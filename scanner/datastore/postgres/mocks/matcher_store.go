// Code generated by MockGen. DO NOT EDIT.
// Source: matcher_store.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/matcher_store.go -source matcher_store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	claircore "github.com/quay/claircore"
	datastore "github.com/quay/claircore/datastore"
	driver "github.com/quay/claircore/libvuln/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockMatcherStore is a mock of MatcherStore interface.
type MockMatcherStore struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherStoreMockRecorder
}

// MockMatcherStoreMockRecorder is the mock recorder for MockMatcherStore.
type MockMatcherStoreMockRecorder struct {
	mock *MockMatcherStore
}

// NewMockMatcherStore creates a new mock instance.
func NewMockMatcherStore(ctrl *gomock.Controller) *MockMatcherStore {
	mock := &MockMatcherStore{ctrl: ctrl}
	mock.recorder = &MockMatcherStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcherStore) EXPECT() *MockMatcherStoreMockRecorder {
	return m.recorder
}

// DeleteUpdateOperations mocks base method.
func (m *MockMatcherStore) DeleteUpdateOperations(arg0 context.Context, arg1 ...uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUpdateOperations", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUpdateOperations indicates an expected call of DeleteUpdateOperations.
func (mr *MockMatcherStoreMockRecorder) DeleteUpdateOperations(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpdateOperations", reflect.TypeOf((*MockMatcherStore)(nil).DeleteUpdateOperations), varargs...)
}

// DeltaUpdateVulnerabilities mocks base method.
func (m *MockMatcherStore) DeltaUpdateVulnerabilities(ctx context.Context, updater string, fingerprint driver.Fingerprint, vulns []*claircore.Vulnerability, deletedVulns []string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltaUpdateVulnerabilities", ctx, updater, fingerprint, vulns, deletedVulns)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaUpdateVulnerabilities indicates an expected call of DeltaUpdateVulnerabilities.
func (mr *MockMatcherStoreMockRecorder) DeltaUpdateVulnerabilities(ctx, updater, fingerprint, vulns, deletedVulns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaUpdateVulnerabilities", reflect.TypeOf((*MockMatcherStore)(nil).DeltaUpdateVulnerabilities), ctx, updater, fingerprint, vulns, deletedVulns)
}

// Distributions mocks base method.
func (m *MockMatcherStore) Distributions(ctx context.Context) ([]claircore.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distributions", ctx)
	ret0, _ := ret[0].([]claircore.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distributions indicates an expected call of Distributions.
func (mr *MockMatcherStoreMockRecorder) Distributions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distributions", reflect.TypeOf((*MockMatcherStore)(nil).Distributions), ctx)
}

// GC mocks base method.
func (m *MockMatcherStore) GC(ctx context.Context, keep int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", ctx, keep)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GC indicates an expected call of GC.
func (mr *MockMatcherStoreMockRecorder) GC(ctx, keep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockMatcherStore)(nil).GC), ctx, keep)
}

// Get mocks base method.
func (m *MockMatcherStore) Get(ctx context.Context, records []*claircore.IndexRecord, opts datastore.GetOpts) (map[string][]*claircore.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, records, opts)
	ret0, _ := ret[0].(map[string][]*claircore.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMatcherStoreMockRecorder) Get(ctx, records, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMatcherStore)(nil).Get), ctx, records, opts)
}

// GetEnrichment mocks base method.
func (m *MockMatcherStore) GetEnrichment(ctx context.Context, kind string, tags []string) ([]driver.EnrichmentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrichment", ctx, kind, tags)
	ret0, _ := ret[0].([]driver.EnrichmentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrichment indicates an expected call of GetEnrichment.
func (mr *MockMatcherStoreMockRecorder) GetEnrichment(ctx, kind, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrichment", reflect.TypeOf((*MockMatcherStore)(nil).GetEnrichment), ctx, kind, tags)
}

// GetLatestUpdateRef mocks base method.
func (m *MockMatcherStore) GetLatestUpdateRef(arg0 context.Context, arg1 driver.UpdateKind) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRef", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRef indicates an expected call of GetLatestUpdateRef.
func (mr *MockMatcherStoreMockRecorder) GetLatestUpdateRef(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRef", reflect.TypeOf((*MockMatcherStore)(nil).GetLatestUpdateRef), arg0, arg1)
}

// GetLatestUpdateRefs mocks base method.
func (m *MockMatcherStore) GetLatestUpdateRefs(arg0 context.Context, arg1 driver.UpdateKind) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRefs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRefs indicates an expected call of GetLatestUpdateRefs.
func (mr *MockMatcherStoreMockRecorder) GetLatestUpdateRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRefs", reflect.TypeOf((*MockMatcherStore)(nil).GetLatestUpdateRefs), arg0, arg1)
}

// GetUpdateDiff mocks base method.
func (m *MockMatcherStore) GetUpdateDiff(ctx context.Context, prev, cur uuid.UUID) (*driver.UpdateDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateDiff", ctx, prev, cur)
	ret0, _ := ret[0].(*driver.UpdateDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateDiff indicates an expected call of GetUpdateDiff.
func (mr *MockMatcherStoreMockRecorder) GetUpdateDiff(ctx, prev, cur any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateDiff", reflect.TypeOf((*MockMatcherStore)(nil).GetUpdateDiff), ctx, prev, cur)
}

// GetUpdateOperations mocks base method.
func (m *MockMatcherStore) GetUpdateOperations(arg0 context.Context, arg1 driver.UpdateKind, arg2 ...string) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateOperations", varargs...)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateOperations indicates an expected call of GetUpdateOperations.
func (mr *MockMatcherStoreMockRecorder) GetUpdateOperations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateOperations", reflect.TypeOf((*MockMatcherStore)(nil).GetUpdateOperations), varargs...)
}

// Initialized mocks base method.
func (m *MockMatcherStore) Initialized(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialized indicates an expected call of Initialized.
func (mr *MockMatcherStoreMockRecorder) Initialized(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockMatcherStore)(nil).Initialized), arg0)
}

// RecordUpdaterSetStatus mocks base method.
func (m *MockMatcherStore) RecordUpdaterSetStatus(ctx context.Context, updaterSet string, updateTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterSetStatus", ctx, updaterSet, updateTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterSetStatus indicates an expected call of RecordUpdaterSetStatus.
func (mr *MockMatcherStoreMockRecorder) RecordUpdaterSetStatus(ctx, updaterSet, updateTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterSetStatus", reflect.TypeOf((*MockMatcherStore)(nil).RecordUpdaterSetStatus), ctx, updaterSet, updateTime)
}

// RecordUpdaterStatus mocks base method.
func (m *MockMatcherStore) RecordUpdaterStatus(ctx context.Context, updaterName string, updateTime time.Time, fingerprint driver.Fingerprint, updaterError error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterStatus", ctx, updaterName, updateTime, fingerprint, updaterError)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterStatus indicates an expected call of RecordUpdaterStatus.
func (mr *MockMatcherStoreMockRecorder) RecordUpdaterStatus(ctx, updaterName, updateTime, fingerprint, updaterError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterStatus", reflect.TypeOf((*MockMatcherStore)(nil).RecordUpdaterStatus), ctx, updaterName, updateTime, fingerprint, updaterError)
}

// UpdateEnrichments mocks base method.
func (m *MockMatcherStore) UpdateEnrichments(ctx context.Context, kind string, fingerprint driver.Fingerprint, enrichments []driver.EnrichmentRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichments", ctx, kind, fingerprint, enrichments)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichments indicates an expected call of UpdateEnrichments.
func (mr *MockMatcherStoreMockRecorder) UpdateEnrichments(ctx, kind, fingerprint, enrichments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichments", reflect.TypeOf((*MockMatcherStore)(nil).UpdateEnrichments), ctx, kind, fingerprint, enrichments)
}

// UpdateEnrichmentsIter mocks base method.
func (m *MockMatcherStore) UpdateEnrichmentsIter(ctx context.Context, kind string, fingerprint driver.Fingerprint, enIter datastore.EnrichmentIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichmentsIter", ctx, kind, fingerprint, enIter)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichmentsIter indicates an expected call of UpdateEnrichmentsIter.
func (mr *MockMatcherStoreMockRecorder) UpdateEnrichmentsIter(ctx, kind, fingerprint, enIter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichmentsIter", reflect.TypeOf((*MockMatcherStore)(nil).UpdateEnrichmentsIter), ctx, kind, fingerprint, enIter)
}

// UpdateVulnerabilities mocks base method.
func (m *MockMatcherStore) UpdateVulnerabilities(ctx context.Context, updater string, fingerprint driver.Fingerprint, vulns []*claircore.Vulnerability) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilities", ctx, updater, fingerprint, vulns)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilities indicates an expected call of UpdateVulnerabilities.
func (mr *MockMatcherStoreMockRecorder) UpdateVulnerabilities(ctx, updater, fingerprint, vulns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilities", reflect.TypeOf((*MockMatcherStore)(nil).UpdateVulnerabilities), ctx, updater, fingerprint, vulns)
}

// UpdateVulnerabilitiesIter mocks base method.
func (m *MockMatcherStore) UpdateVulnerabilitiesIter(ctx context.Context, updater string, fingerprint driver.Fingerprint, vulnIter datastore.VulnerabilityIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilitiesIter", ctx, updater, fingerprint, vulnIter)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilitiesIter indicates an expected call of UpdateVulnerabilitiesIter.
func (mr *MockMatcherStoreMockRecorder) UpdateVulnerabilitiesIter(ctx, updater, fingerprint, vulnIter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilitiesIter", reflect.TypeOf((*MockMatcherStore)(nil).UpdateVulnerabilitiesIter), ctx, updater, fingerprint, vulnIter)
}
