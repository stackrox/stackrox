// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/client.go -source client.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authn "github.com/google/go-containerregistry/pkg/authn"
	name "github.com/google/go-containerregistry/pkg/name"
	v4 "github.com/stackrox/rox/generated/internalapi/scanner/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockScannerClient is a mock of ScannerClient interface.
type MockScannerClient struct {
	ctrl     *gomock.Controller
	recorder *MockScannerClientMockRecorder
}

// MockScannerClientMockRecorder is the mock recorder for MockScannerClient.
type MockScannerClientMockRecorder struct {
	mock *MockScannerClient
}

// NewMockScannerClient creates a new mock instance.
func NewMockScannerClient(ctrl *gomock.Controller) *MockScannerClient {
	mock := &MockScannerClient{ctrl: ctrl}
	mock.recorder = &MockScannerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannerClient) EXPECT() *MockScannerClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScannerClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScannerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScannerClient)(nil).Close))
}

// GetOrCreateImageIndex mocks base method.
func (m *MockScannerClient) GetOrCreateImageIndex(ctx context.Context, ref name.Digest, auth authn.Authenticator) (*v4.IndexReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateImageIndex", ctx, ref, auth)
	ret0, _ := ret[0].(*v4.IndexReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateImageIndex indicates an expected call of GetOrCreateImageIndex.
func (mr *MockScannerClientMockRecorder) GetOrCreateImageIndex(ctx, ref, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateImageIndex", reflect.TypeOf((*MockScannerClient)(nil).GetOrCreateImageIndex), ctx, ref, auth)
}

// IndexAndScanImage mocks base method.
func (m *MockScannerClient) IndexAndScanImage(arg0 context.Context, arg1 name.Digest, arg2 authn.Authenticator) (*v4.VulnerabilityReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexAndScanImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v4.VulnerabilityReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexAndScanImage indicates an expected call of IndexAndScanImage.
func (mr *MockScannerClientMockRecorder) IndexAndScanImage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexAndScanImage", reflect.TypeOf((*MockScannerClient)(nil).IndexAndScanImage), arg0, arg1, arg2)
}
