// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package compress

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	compliance "github.com/stackrox/rox/generated/internalapi/compliance"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson24245084DecodeGithubComStackroxRoxPkgComplianceCompress(in *jlexer.Lexer, out *ResultWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "ResultMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ResultMap = make(map[string]*compliance.ComplianceStandardResult)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *compliance.ComplianceStandardResult
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(compliance.ComplianceStandardResult)
						}
						easyjson24245084DecodeGithubComStackroxRoxGeneratedInternalapiCompliance(in, v1)
					}
					(out.ResultMap)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24245084EncodeGithubComStackroxRoxPkgComplianceCompress(out *jwriter.Writer, in ResultWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultMap\":"
		out.RawString(prefix[1:])
		if in.ResultMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.ResultMap {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					easyjson24245084EncodeGithubComStackroxRoxGeneratedInternalapiCompliance(out, *v2Value)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24245084EncodeGithubComStackroxRoxPkgComplianceCompress(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24245084EncodeGithubComStackroxRoxPkgComplianceCompress(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24245084DecodeGithubComStackroxRoxPkgComplianceCompress(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24245084DecodeGithubComStackroxRoxPkgComplianceCompress(l, v)
}
func easyjson24245084DecodeGithubComStackroxRoxGeneratedInternalapiCompliance(in *jlexer.Lexer, out *compliance.ComplianceStandardResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24245084EncodeGithubComStackroxRoxGeneratedInternalapiCompliance(out *jwriter.Writer, in *compliance.ComplianceStandardResult) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
