// Code generated by MockGen. DO NOT EDIT.
// Source: telemeter.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/telemeter.go -source telemeter.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	telemeter "github.com/stackrox/rox/pkg/telemetry/phonehome/telemeter"
	gomock "go.uber.org/mock/gomock"
)

// MockTelemeter is a mock of Telemeter interface.
type MockTelemeter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemeterMockRecorder
}

// MockTelemeterMockRecorder is the mock recorder for MockTelemeter.
type MockTelemeterMockRecorder struct {
	mock *MockTelemeter
}

// NewMockTelemeter creates a new mock instance.
func NewMockTelemeter(ctrl *gomock.Controller) *MockTelemeter {
	mock := &MockTelemeter{ctrl: ctrl}
	mock.recorder = &MockTelemeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemeter) EXPECT() *MockTelemeterMockRecorder {
	return m.recorder
}

// Group mocks base method.
func (m *MockTelemeter) Group(props map[string]any, opts ...telemeter.Option) {
	m.ctrl.T.Helper()
	varargs := []any{props}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Group", varargs...)
}

// Group indicates an expected call of Group.
func (mr *MockTelemeterMockRecorder) Group(props any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{props}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockTelemeter)(nil).Group), varargs...)
}

// Identify mocks base method.
func (m *MockTelemeter) Identify(props map[string]any, opts ...telemeter.Option) {
	m.ctrl.T.Helper()
	varargs := []any{props}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Identify", varargs...)
}

// Identify indicates an expected call of Identify.
func (mr *MockTelemeterMockRecorder) Identify(props any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{props}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockTelemeter)(nil).Identify), varargs...)
}

// Stop mocks base method.
func (m *MockTelemeter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTelemeterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTelemeter)(nil).Stop))
}

// Track mocks base method.
func (m *MockTelemeter) Track(event string, props map[string]any, opts ...telemeter.Option) {
	m.ctrl.T.Helper()
	varargs := []any{event, props}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Track", varargs...)
}

// Track indicates an expected call of Track.
func (mr *MockTelemeterMockRecorder) Track(event, props any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{event, props}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockTelemeter)(nil).Track), varargs...)
}
