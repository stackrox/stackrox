// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	waiter "github.com/stackrox/rox/pkg/waiter"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder[T]
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder[T any] struct {
	mock *MockManager[T]
}

// NewMockManager creates a new mock instance.
func NewMockManager[T any](ctrl *gomock.Controller) *MockManager[T] {
	mock := &MockManager[T]{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager[T]) EXPECT() *MockManagerMockRecorder[T] {
	return m.recorder
}

// NewWaiter mocks base method.
func (m *MockManager[T]) NewWaiter() (waiter.Waiter[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWaiter")
	ret0, _ := ret[0].(waiter.Waiter[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWaiter indicates an expected call of NewWaiter.
func (mr *MockManagerMockRecorder[T]) NewWaiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWaiter", reflect.TypeOf((*MockManager[T])(nil).NewWaiter))
}

// Send mocks base method.
func (m *MockManager[T]) Send(id string, data T, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", id, data, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockManagerMockRecorder[T]) Send(id, data, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManager[T])(nil).Send), id, data, err)
}

// Start mocks base method.
func (m *MockManager[T]) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder[T]) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager[T])(nil).Start), ctx)
}
