// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	types "github.com/stackrox/rox/pkg/scanners/types"
	scannerV1 "github.com/stackrox/scanner/generated/scanner/api/v1"
	gomock "go.uber.org/mock/gomock"
	semaphore "golang.org/x/sync/semaphore"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// GetScan mocks base method.
func (m *MockScanner) GetScan(image *storage.Image) (*storage.ImageScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScan", image)
	ret0, _ := ret[0].(*storage.ImageScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScan indicates an expected call of GetScan.
func (mr *MockScannerMockRecorder) GetScan(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScan", reflect.TypeOf((*MockScanner)(nil).GetScan), image)
}

// GetVulnDefinitionsInfo mocks base method.
func (m *MockScanner) GetVulnDefinitionsInfo() (*v1.VulnDefinitionsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnDefinitionsInfo")
	ret0, _ := ret[0].(*v1.VulnDefinitionsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnDefinitionsInfo indicates an expected call of GetVulnDefinitionsInfo.
func (mr *MockScannerMockRecorder) GetVulnDefinitionsInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnDefinitionsInfo", reflect.TypeOf((*MockScanner)(nil).GetVulnDefinitionsInfo))
}

// Match mocks base method.
func (m *MockScanner) Match(image *storage.ImageName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", image)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockScannerMockRecorder) Match(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockScanner)(nil).Match), image)
}

// MaxConcurrentScanSemaphore mocks base method.
func (m *MockScanner) MaxConcurrentScanSemaphore() *semaphore.Weighted {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxConcurrentScanSemaphore")
	ret0, _ := ret[0].(*semaphore.Weighted)
	return ret0
}

// MaxConcurrentScanSemaphore indicates an expected call of MaxConcurrentScanSemaphore.
func (mr *MockScannerMockRecorder) MaxConcurrentScanSemaphore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxConcurrentScanSemaphore", reflect.TypeOf((*MockScanner)(nil).MaxConcurrentScanSemaphore))
}

// Name mocks base method.
func (m *MockScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScanner)(nil).Name))
}

// Test mocks base method.
func (m *MockScanner) Test() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockScannerMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockScanner)(nil).Test))
}

// Type mocks base method.
func (m *MockScanner) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockScannerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockScanner)(nil).Type))
}

// MockImageScannerWithDataSource is a mock of ImageScannerWithDataSource interface.
type MockImageScannerWithDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockImageScannerWithDataSourceMockRecorder
}

// MockImageScannerWithDataSourceMockRecorder is the mock recorder for MockImageScannerWithDataSource.
type MockImageScannerWithDataSourceMockRecorder struct {
	mock *MockImageScannerWithDataSource
}

// NewMockImageScannerWithDataSource creates a new mock instance.
func NewMockImageScannerWithDataSource(ctrl *gomock.Controller) *MockImageScannerWithDataSource {
	mock := &MockImageScannerWithDataSource{ctrl: ctrl}
	mock.recorder = &MockImageScannerWithDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageScannerWithDataSource) EXPECT() *MockImageScannerWithDataSourceMockRecorder {
	return m.recorder
}

// DataSource mocks base method.
func (m *MockImageScannerWithDataSource) DataSource() *storage.DataSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSource")
	ret0, _ := ret[0].(*storage.DataSource)
	return ret0
}

// DataSource indicates an expected call of DataSource.
func (mr *MockImageScannerWithDataSourceMockRecorder) DataSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSource", reflect.TypeOf((*MockImageScannerWithDataSource)(nil).DataSource))
}

// GetScanner mocks base method.
func (m *MockImageScannerWithDataSource) GetScanner() types.Scanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanner")
	ret0, _ := ret[0].(types.Scanner)
	return ret0
}

// GetScanner indicates an expected call of GetScanner.
func (mr *MockImageScannerWithDataSourceMockRecorder) GetScanner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanner", reflect.TypeOf((*MockImageScannerWithDataSource)(nil).GetScanner))
}

// MockImageVulnerabilityGetter is a mock of ImageVulnerabilityGetter interface.
type MockImageVulnerabilityGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageVulnerabilityGetterMockRecorder
}

// MockImageVulnerabilityGetterMockRecorder is the mock recorder for MockImageVulnerabilityGetter.
type MockImageVulnerabilityGetterMockRecorder struct {
	mock *MockImageVulnerabilityGetter
}

// NewMockImageVulnerabilityGetter creates a new mock instance.
func NewMockImageVulnerabilityGetter(ctrl *gomock.Controller) *MockImageVulnerabilityGetter {
	mock := &MockImageVulnerabilityGetter{ctrl: ctrl}
	mock.recorder = &MockImageVulnerabilityGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageVulnerabilityGetter) EXPECT() *MockImageVulnerabilityGetterMockRecorder {
	return m.recorder
}

// GetVulnerabilities mocks base method.
func (m *MockImageVulnerabilityGetter) GetVulnerabilities(image *storage.Image, components *scannerV1.Components, notes []scannerV1.Note) (*storage.ImageScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilities", image, components, notes)
	ret0, _ := ret[0].(*storage.ImageScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilities indicates an expected call of GetVulnerabilities.
func (mr *MockImageVulnerabilityGetterMockRecorder) GetVulnerabilities(image, components, notes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilities", reflect.TypeOf((*MockImageVulnerabilityGetter)(nil).GetVulnerabilities), image, components, notes)
}

// MockNodeScanner is a mock of NodeScanner interface.
type MockNodeScanner struct {
	ctrl     *gomock.Controller
	recorder *MockNodeScannerMockRecorder
}

// MockNodeScannerMockRecorder is the mock recorder for MockNodeScanner.
type MockNodeScannerMockRecorder struct {
	mock *MockNodeScanner
}

// NewMockNodeScanner creates a new mock instance.
func NewMockNodeScanner(ctrl *gomock.Controller) *MockNodeScanner {
	mock := &MockNodeScanner{ctrl: ctrl}
	mock.recorder = &MockNodeScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeScanner) EXPECT() *MockNodeScannerMockRecorder {
	return m.recorder
}

// GetNodeInventoryScan mocks base method.
func (m *MockNodeScanner) GetNodeInventoryScan(node *storage.Node, inv *storage.NodeInventory) (*storage.NodeScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeInventoryScan", node, inv)
	ret0, _ := ret[0].(*storage.NodeScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeInventoryScan indicates an expected call of GetNodeInventoryScan.
func (mr *MockNodeScannerMockRecorder) GetNodeInventoryScan(node, inv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeInventoryScan", reflect.TypeOf((*MockNodeScanner)(nil).GetNodeInventoryScan), node, inv)
}

// GetNodeScan mocks base method.
func (m *MockNodeScanner) GetNodeScan(node *storage.Node) (*storage.NodeScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeScan", node)
	ret0, _ := ret[0].(*storage.NodeScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeScan indicates an expected call of GetNodeScan.
func (mr *MockNodeScannerMockRecorder) GetNodeScan(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeScan", reflect.TypeOf((*MockNodeScanner)(nil).GetNodeScan), node)
}

// MaxConcurrentNodeScanSemaphore mocks base method.
func (m *MockNodeScanner) MaxConcurrentNodeScanSemaphore() *semaphore.Weighted {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxConcurrentNodeScanSemaphore")
	ret0, _ := ret[0].(*semaphore.Weighted)
	return ret0
}

// MaxConcurrentNodeScanSemaphore indicates an expected call of MaxConcurrentNodeScanSemaphore.
func (mr *MockNodeScannerMockRecorder) MaxConcurrentNodeScanSemaphore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxConcurrentNodeScanSemaphore", reflect.TypeOf((*MockNodeScanner)(nil).MaxConcurrentNodeScanSemaphore))
}

// Name mocks base method.
func (m *MockNodeScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNodeScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNodeScanner)(nil).Name))
}

// TestNodeScanner mocks base method.
func (m *MockNodeScanner) TestNodeScanner() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestNodeScanner")
	ret0, _ := ret[0].(error)
	return ret0
}

// TestNodeScanner indicates an expected call of TestNodeScanner.
func (mr *MockNodeScannerMockRecorder) TestNodeScanner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestNodeScanner", reflect.TypeOf((*MockNodeScanner)(nil).TestNodeScanner))
}

// Type mocks base method.
func (m *MockNodeScanner) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockNodeScannerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockNodeScanner)(nil).Type))
}

// MockNodeScannerWithDataSource is a mock of NodeScannerWithDataSource interface.
type MockNodeScannerWithDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockNodeScannerWithDataSourceMockRecorder
}

// MockNodeScannerWithDataSourceMockRecorder is the mock recorder for MockNodeScannerWithDataSource.
type MockNodeScannerWithDataSourceMockRecorder struct {
	mock *MockNodeScannerWithDataSource
}

// NewMockNodeScannerWithDataSource creates a new mock instance.
func NewMockNodeScannerWithDataSource(ctrl *gomock.Controller) *MockNodeScannerWithDataSource {
	mock := &MockNodeScannerWithDataSource{ctrl: ctrl}
	mock.recorder = &MockNodeScannerWithDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeScannerWithDataSource) EXPECT() *MockNodeScannerWithDataSourceMockRecorder {
	return m.recorder
}

// DataSource mocks base method.
func (m *MockNodeScannerWithDataSource) DataSource() *storage.DataSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSource")
	ret0, _ := ret[0].(*storage.DataSource)
	return ret0
}

// DataSource indicates an expected call of DataSource.
func (mr *MockNodeScannerWithDataSourceMockRecorder) DataSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSource", reflect.TypeOf((*MockNodeScannerWithDataSource)(nil).DataSource))
}

// GetNodeScanner mocks base method.
func (m *MockNodeScannerWithDataSource) GetNodeScanner() types.NodeScanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeScanner")
	ret0, _ := ret[0].(types.NodeScanner)
	return ret0
}

// GetNodeScanner indicates an expected call of GetNodeScanner.
func (mr *MockNodeScannerWithDataSourceMockRecorder) GetNodeScanner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeScanner", reflect.TypeOf((*MockNodeScannerWithDataSource)(nil).GetNodeScanner))
}

// MockOrchestratorScanner is a mock of OrchestratorScanner interface.
type MockOrchestratorScanner struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorScannerMockRecorder
}

// MockOrchestratorScannerMockRecorder is the mock recorder for MockOrchestratorScanner.
type MockOrchestratorScannerMockRecorder struct {
	mock *MockOrchestratorScanner
}

// NewMockOrchestratorScanner creates a new mock instance.
func NewMockOrchestratorScanner(ctrl *gomock.Controller) *MockOrchestratorScanner {
	mock := &MockOrchestratorScanner{ctrl: ctrl}
	mock.recorder = &MockOrchestratorScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorScanner) EXPECT() *MockOrchestratorScannerMockRecorder {
	return m.recorder
}

// IstioScan mocks base method.
func (m *MockOrchestratorScanner) IstioScan(arg0 string) ([]*storage.EmbeddedVulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IstioScan", arg0)
	ret0, _ := ret[0].([]*storage.EmbeddedVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IstioScan indicates an expected call of IstioScan.
func (mr *MockOrchestratorScannerMockRecorder) IstioScan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IstioScan", reflect.TypeOf((*MockOrchestratorScanner)(nil).IstioScan), arg0)
}

// KubernetesScan mocks base method.
func (m *MockOrchestratorScanner) KubernetesScan(arg0 string) (map[string][]*storage.EmbeddedVulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesScan", arg0)
	ret0, _ := ret[0].(map[string][]*storage.EmbeddedVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesScan indicates an expected call of KubernetesScan.
func (mr *MockOrchestratorScannerMockRecorder) KubernetesScan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesScan", reflect.TypeOf((*MockOrchestratorScanner)(nil).KubernetesScan), arg0)
}

// MaxConcurrentScanSemaphore mocks base method.
func (m *MockOrchestratorScanner) MaxConcurrentScanSemaphore() *semaphore.Weighted {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxConcurrentScanSemaphore")
	ret0, _ := ret[0].(*semaphore.Weighted)
	return ret0
}

// MaxConcurrentScanSemaphore indicates an expected call of MaxConcurrentScanSemaphore.
func (mr *MockOrchestratorScannerMockRecorder) MaxConcurrentScanSemaphore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxConcurrentScanSemaphore", reflect.TypeOf((*MockOrchestratorScanner)(nil).MaxConcurrentScanSemaphore))
}

// Name mocks base method.
func (m *MockOrchestratorScanner) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOrchestratorScannerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOrchestratorScanner)(nil).Name))
}

// OpenShiftScan mocks base method.
func (m *MockOrchestratorScanner) OpenShiftScan(arg0 string) ([]*storage.EmbeddedVulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenShiftScan", arg0)
	ret0, _ := ret[0].([]*storage.EmbeddedVulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenShiftScan indicates an expected call of OpenShiftScan.
func (mr *MockOrchestratorScannerMockRecorder) OpenShiftScan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenShiftScan", reflect.TypeOf((*MockOrchestratorScanner)(nil).OpenShiftScan), arg0)
}

// Type mocks base method.
func (m *MockOrchestratorScanner) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockOrchestratorScannerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockOrchestratorScanner)(nil).Type))
}
