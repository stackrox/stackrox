package storagewrappers

import (
	"fmt"

	"github.com/stackrox/rox/generated/storage"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type VulnerabilityWriter interface {
	GetCve() string

	SetCVSS(score float32)
	SetLink(link string)
	SetScoreVersion(scoreVersion storage.EmbeddedVulnerability_ScoreVersion)
	SetCVSSV2(cvss *storage.CVSSV2)
	SetCVSSV3(cvss *storage.CVSSV3)
	AddCVSSScore() CVSSScoreWriter
	RemoveCVSSScore(score *storage.CVSSScore)
}

type EmbeddedVulnerabilityWrapper struct {
	*storage.EmbeddedVulnerability
}

var _ VulnerabilityWriter = (*EmbeddedVulnerabilityWrapper)(nil)

func (w *EmbeddedVulnerabilityWrapper) AsEmbeddedVulnerability() *storage.EmbeddedVulnerability {
	if w == nil {
		return nil
	}
	return w.EmbeddedVulnerability
}

func (w *EmbeddedVulnerabilityWrapper) SetCVE(cve string) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Cve = cve
}

func (w *EmbeddedVulnerabilityWrapper) AdvisoryWrapper() *AdvisoryWrapper {
	if w == nil || w.EmbeddedVulnerability == nil {
		return nil
	}
	if w.Advisory == nil {
		w.Advisory = &storage.Advisory{}
	}
	return &AdvisoryWrapper{Advisory: w.Advisory}
}

func (w *EmbeddedVulnerabilityWrapper) SetCVSS(score float32) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Cvss = score
}

func (w *EmbeddedVulnerabilityWrapper) SetSummary(summary string) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Summary = summary
}

func (w *EmbeddedVulnerabilityWrapper) SetLink(link string) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Link = link
}

func (w *EmbeddedVulnerabilityWrapper) SetSetFixedBy(fixedBy string) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.SetFixedBy = &storage.EmbeddedVulnerability_FixedBy{FixedBy: fixedBy}
}

func (w *EmbeddedVulnerabilityWrapper) SetScoreVersion(scoreVersion storage.EmbeddedVulnerability_ScoreVersion) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.ScoreVersion = scoreVersion
}

func (w *EmbeddedVulnerabilityWrapper) SetCVSSV2(cvss *storage.CVSSV2) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	fmt.Println("Setting CVSSV2 with vector ", cvss.GetVector())
	w.CvssV2 = cvss
}

func (w *EmbeddedVulnerabilityWrapper) SetCVSSV3(cvss *storage.CVSSV3) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.CvssV3 = cvss
}

func (w *EmbeddedVulnerabilityWrapper) SetPublishedOn(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.PublishedOn = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetLastModified(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.LastModified = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetVulnerabilityType(vulnType storage.EmbeddedVulnerability_VulnerabilityType) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.VulnerabilityType = vulnType
}

func (w *EmbeddedVulnerabilityWrapper) AddVulnerabilityType(vulnType storage.EmbeddedVulnerability_VulnerabilityType) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.VulnerabilityTypes = append(w.VulnerabilityTypes, vulnType)
}

func (w *EmbeddedVulnerabilityWrapper) SetSuppressed(suppressed bool) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Suppressed = suppressed
}

func (w *EmbeddedVulnerabilityWrapper) SetSuppressActivation(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.SuppressActivation = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetSuppressExpiry(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.SuppressExpiry = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetFirstSystemOccurrence(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.FirstSystemOccurrence = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetFirstImageOccurrence(ts *timestamppb.Timestamp) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.FirstImageOccurrence = ts
}

func (w *EmbeddedVulnerabilityWrapper) SetSeverity(severity storage.VulnerabilitySeverity) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.Severity = severity
}

func (w *EmbeddedVulnerabilityWrapper) SetState(state storage.VulnerabilityState) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.State = state
}

func (w *EmbeddedVulnerabilityWrapper) AddCVSSScore() CVSSScoreWriter {
	if w == nil || w.EmbeddedVulnerability == nil {
		return nil
	}
	score := &storage.CVSSScore{}
	w.CvssMetrics = append(w.CvssMetrics, score)
	return &CVSSScoreWrapper{CVSSScore: score}
}

func (w *EmbeddedVulnerabilityWrapper) RemoveCVSSScore(score *storage.CVSSScore) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	if score == nil {
		return
	}
	for i, s := range w.CvssMetrics {
		if s == score {
			w.CvssMetrics = append(w.CvssMetrics[:i], w.CvssMetrics[i+1:]...)
			break
		}
	}
}

func (w *EmbeddedVulnerabilityWrapper) SetNVDCVSS(score float32) {
	if w == nil || w.EmbeddedVulnerability == nil {
		return
	}
	w.NvdCvss = score
}

func (w *EmbeddedVulnerabilityWrapper) SetEPSS(epss *storage.EPSS) {
	_ = epss
}

func (w *EmbeddedVulnerabilityWrapper) EPSSWrapper() *EPSSWrapper {
	if w == nil || w.EmbeddedVulnerability == nil {
		return nil
	}
	if w.Epss == nil {
		w.Epss = &storage.EPSS{}
	}
	return &EPSSWrapper{EPSS: w.Epss}
}
