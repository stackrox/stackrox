// Code generated by MockGen. DO NOT EDIT.
// Source: role_mapper.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/role_mapper.go -source role_mapper.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	permissions "github.com/stackrox/rox/pkg/auth/permissions"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleMapper is a mock of RoleMapper interface.
type MockRoleMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMapperMockRecorder
	isgomock struct{}
}

// MockRoleMapperMockRecorder is the mock recorder for MockRoleMapper.
type MockRoleMapperMockRecorder struct {
	mock *MockRoleMapper
}

// NewMockRoleMapper creates a new mock instance.
func NewMockRoleMapper(ctrl *gomock.Controller) *MockRoleMapper {
	mock := &MockRoleMapper{ctrl: ctrl}
	mock.recorder = &MockRoleMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleMapper) EXPECT() *MockRoleMapperMockRecorder {
	return m.recorder
}

// FromUserDescriptor mocks base method.
func (m *MockRoleMapper) FromUserDescriptor(ctx context.Context, user *permissions.UserDescriptor) ([]permissions.ResolvedRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromUserDescriptor", ctx, user)
	ret0, _ := ret[0].([]permissions.ResolvedRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromUserDescriptor indicates an expected call of FromUserDescriptor.
func (mr *MockRoleMapperMockRecorder) FromUserDescriptor(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUserDescriptor", reflect.TypeOf((*MockRoleMapper)(nil).FromUserDescriptor), ctx, user)
}

// MockRoleStore is a mock of RoleStore interface.
type MockRoleStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoleStoreMockRecorder
	isgomock struct{}
}

// MockRoleStoreMockRecorder is the mock recorder for MockRoleStore.
type MockRoleStoreMockRecorder struct {
	mock *MockRoleStore
}

// NewMockRoleStore creates a new mock instance.
func NewMockRoleStore(ctrl *gomock.Controller) *MockRoleStore {
	mock := &MockRoleStore{ctrl: ctrl}
	mock.recorder = &MockRoleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleStore) EXPECT() *MockRoleStoreMockRecorder {
	return m.recorder
}

// GetAllResolvedRoles mocks base method.
func (m *MockRoleStore) GetAllResolvedRoles(ctx context.Context) ([]permissions.ResolvedRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResolvedRoles", ctx)
	ret0, _ := ret[0].([]permissions.ResolvedRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResolvedRoles indicates an expected call of GetAllResolvedRoles.
func (mr *MockRoleStoreMockRecorder) GetAllResolvedRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResolvedRoles", reflect.TypeOf((*MockRoleStore)(nil).GetAllResolvedRoles), ctx)
}

// GetAndResolveRole mocks base method.
func (m *MockRoleStore) GetAndResolveRole(ctx context.Context, name string) (permissions.ResolvedRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndResolveRole", ctx, name)
	ret0, _ := ret[0].(permissions.ResolvedRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndResolveRole indicates an expected call of GetAndResolveRole.
func (mr *MockRoleStoreMockRecorder) GetAndResolveRole(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndResolveRole", reflect.TypeOf((*MockRoleStore)(nil).GetAndResolveRole), ctx, name)
}

// MockRoleMapperFactory is a mock of RoleMapperFactory interface.
type MockRoleMapperFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMapperFactoryMockRecorder
	isgomock struct{}
}

// MockRoleMapperFactoryMockRecorder is the mock recorder for MockRoleMapperFactory.
type MockRoleMapperFactoryMockRecorder struct {
	mock *MockRoleMapperFactory
}

// NewMockRoleMapperFactory creates a new mock instance.
func NewMockRoleMapperFactory(ctrl *gomock.Controller) *MockRoleMapperFactory {
	mock := &MockRoleMapperFactory{ctrl: ctrl}
	mock.recorder = &MockRoleMapperFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleMapperFactory) EXPECT() *MockRoleMapperFactoryMockRecorder {
	return m.recorder
}

// GetRoleMapper mocks base method.
func (m *MockRoleMapperFactory) GetRoleMapper(authProviderID string) permissions.RoleMapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMapper", authProviderID)
	ret0, _ := ret[0].(permissions.RoleMapper)
	return ret0
}

// GetRoleMapper indicates an expected call of GetRoleMapper.
func (mr *MockRoleMapperFactoryMockRecorder) GetRoleMapper(authProviderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMapper", reflect.TypeOf((*MockRoleMapperFactory)(nil).GetRoleMapper), authProviderID)
}
