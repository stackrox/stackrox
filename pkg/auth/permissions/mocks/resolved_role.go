// Code generated by MockGen. DO NOT EDIT.
// Source: resolved_role.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/resolved_role.go -source resolved_role.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockResolvedRole is a mock of ResolvedRole interface.
type MockResolvedRole struct {
	ctrl     *gomock.Controller
	recorder *MockResolvedRoleMockRecorder
}

// MockResolvedRoleMockRecorder is the mock recorder for MockResolvedRole.
type MockResolvedRoleMockRecorder struct {
	mock *MockResolvedRole
}

// NewMockResolvedRole creates a new mock instance.
func NewMockResolvedRole(ctrl *gomock.Controller) *MockResolvedRole {
	mock := &MockResolvedRole{ctrl: ctrl}
	mock.recorder = &MockResolvedRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolvedRole) EXPECT() *MockResolvedRoleMockRecorder {
	return m.recorder
}

// GetAccessScope mocks base method.
func (m *MockResolvedRole) GetAccessScope() *storage.SimpleAccessScope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessScope")
	ret0, _ := ret[0].(*storage.SimpleAccessScope)
	return ret0
}

// GetAccessScope indicates an expected call of GetAccessScope.
func (mr *MockResolvedRoleMockRecorder) GetAccessScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessScope", reflect.TypeOf((*MockResolvedRole)(nil).GetAccessScope))
}

// GetPermissions mocks base method.
func (m *MockResolvedRole) GetPermissions() map[string]storage.Access {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions")
	ret0, _ := ret[0].(map[string]storage.Access)
	return ret0
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockResolvedRoleMockRecorder) GetPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockResolvedRole)(nil).GetPermissions))
}

// GetRoleName mocks base method.
func (m *MockResolvedRole) GetRoleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRoleName indicates an expected call of GetRoleName.
func (mr *MockResolvedRoleMockRecorder) GetRoleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleName", reflect.TypeOf((*MockResolvedRole)(nil).GetRoleName))
}
