// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/store.go -source store.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAuthProvider mocks base method.
func (m *MockStore) AddAuthProvider(ctx context.Context, authProvider *storage.AuthProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthProvider", ctx, authProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthProvider indicates an expected call of AddAuthProvider.
func (mr *MockStoreMockRecorder) AddAuthProvider(ctx, authProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthProvider", reflect.TypeOf((*MockStore)(nil).AddAuthProvider), ctx, authProvider)
}

// GetAllAuthProviders mocks base method.
func (m *MockStore) GetAllAuthProviders(ctx context.Context) ([]*storage.AuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthProviders", ctx)
	ret0, _ := ret[0].([]*storage.AuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthProviders indicates an expected call of GetAllAuthProviders.
func (mr *MockStoreMockRecorder) GetAllAuthProviders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthProviders", reflect.TypeOf((*MockStore)(nil).GetAllAuthProviders), ctx)
}

// GetAuthProvider mocks base method.
func (m *MockStore) GetAuthProvider(ctx context.Context, id string) (*storage.AuthProvider, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthProvider", ctx, id)
	ret0, _ := ret[0].(*storage.AuthProvider)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuthProvider indicates an expected call of GetAuthProvider.
func (mr *MockStoreMockRecorder) GetAuthProvider(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthProvider", reflect.TypeOf((*MockStore)(nil).GetAuthProvider), ctx, id)
}

// GetAuthProvidersFiltered mocks base method.
func (m *MockStore) GetAuthProvidersFiltered(ctx context.Context, filter func(*storage.AuthProvider) bool) ([]*storage.AuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthProvidersFiltered", ctx, filter)
	ret0, _ := ret[0].([]*storage.AuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthProvidersFiltered indicates an expected call of GetAuthProvidersFiltered.
func (mr *MockStoreMockRecorder) GetAuthProvidersFiltered(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthProvidersFiltered", reflect.TypeOf((*MockStore)(nil).GetAuthProvidersFiltered), ctx, filter)
}

// RemoveAuthProvider mocks base method.
func (m *MockStore) RemoveAuthProvider(ctx context.Context, id string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAuthProvider", ctx, id, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAuthProvider indicates an expected call of RemoveAuthProvider.
func (mr *MockStoreMockRecorder) RemoveAuthProvider(ctx, id, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthProvider", reflect.TypeOf((*MockStore)(nil).RemoveAuthProvider), ctx, id, force)
}

// UpdateAuthProvider mocks base method.
func (m *MockStore) UpdateAuthProvider(ctx context.Context, authProvider *storage.AuthProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthProvider", ctx, authProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthProvider indicates an expected call of UpdateAuthProvider.
func (mr *MockStoreMockRecorder) UpdateAuthProvider(ctx, authProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthProvider", reflect.TypeOf((*MockStore)(nil).UpdateAuthProvider), ctx, authProvider)
}
