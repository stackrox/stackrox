// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/registry.go -source registry.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	authproviders "github.com/stackrox/rox/pkg/auth/authproviders"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
	isgomock struct{}
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockRegistry) CreateProvider(ctx context.Context, options ...authproviders.ProviderOption) (authproviders.Provider, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProvider", varargs...)
	ret0, _ := ret[0].(authproviders.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockRegistryMockRecorder) CreateProvider(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockRegistry)(nil).CreateProvider), varargs...)
}

// DeleteProvider mocks base method.
func (m *MockRegistry) DeleteProvider(ctx context.Context, id string, force, ignoreActive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvider", ctx, id, force, ignoreActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockRegistryMockRecorder) DeleteProvider(ctx, id, force, ignoreActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockRegistry)(nil).DeleteProvider), ctx, id, force, ignoreActive)
}

// GetBackendFactories mocks base method.
func (m *MockRegistry) GetBackendFactories() map[string]authproviders.BackendFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendFactories")
	ret0, _ := ret[0].(map[string]authproviders.BackendFactory)
	return ret0
}

// GetBackendFactories indicates an expected call of GetBackendFactories.
func (mr *MockRegistryMockRecorder) GetBackendFactories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendFactories", reflect.TypeOf((*MockRegistry)(nil).GetBackendFactories))
}

// GetExternalUserClaim mocks base method.
func (m *MockRegistry) GetExternalUserClaim(ctx context.Context, externalToken, typ, state string) (*authproviders.AuthResponse, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUserClaim", ctx, externalToken, typ, state)
	ret0, _ := ret[0].(*authproviders.AuthResponse)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExternalUserClaim indicates an expected call of GetExternalUserClaim.
func (mr *MockRegistryMockRecorder) GetExternalUserClaim(ctx, externalToken, typ, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUserClaim", reflect.TypeOf((*MockRegistry)(nil).GetExternalUserClaim), ctx, externalToken, typ, state)
}

// GetProvider mocks base method.
func (m *MockRegistry) GetProvider(id string) authproviders.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider", id)
	ret0, _ := ret[0].(authproviders.Provider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockRegistryMockRecorder) GetProvider(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockRegistry)(nil).GetProvider), id)
}

// GetProviders mocks base method.
func (m *MockRegistry) GetProviders(name, typ *string) []authproviders.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders", name, typ)
	ret0, _ := ret[0].([]authproviders.Provider)
	return ret0
}

// GetProviders indicates an expected call of GetProviders.
func (mr *MockRegistryMockRecorder) GetProviders(name, typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockRegistry)(nil).GetProviders), name, typ)
}

// Init mocks base method.
func (m *MockRegistry) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRegistryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRegistry)(nil).Init))
}

// IssueToken mocks base method.
func (m *MockRegistry) IssueToken(ctx context.Context, provider authproviders.Provider, authResponse *authproviders.AuthResponse) (string, *http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueToken", ctx, provider, authResponse)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*http.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssueToken indicates an expected call of IssueToken.
func (mr *MockRegistryMockRecorder) IssueToken(ctx, provider, authResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueToken", reflect.TypeOf((*MockRegistry)(nil).IssueToken), ctx, provider, authResponse)
}

// RegisterBackendFactory mocks base method.
func (m *MockRegistry) RegisterBackendFactory(ctx context.Context, typ string, factoryCreator authproviders.BackendFactoryCreator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBackendFactory", ctx, typ, factoryCreator)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBackendFactory indicates an expected call of RegisterBackendFactory.
func (mr *MockRegistryMockRecorder) RegisterBackendFactory(ctx, typ, factoryCreator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBackendFactory", reflect.TypeOf((*MockRegistry)(nil).RegisterBackendFactory), ctx, typ, factoryCreator)
}

// ResolveProvider mocks base method.
func (m *MockRegistry) ResolveProvider(typ, state string) (authproviders.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveProvider", typ, state)
	ret0, _ := ret[0].(authproviders.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveProvider indicates an expected call of ResolveProvider.
func (mr *MockRegistryMockRecorder) ResolveProvider(typ, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProvider", reflect.TypeOf((*MockRegistry)(nil).ResolveProvider), typ, state)
}

// ServeHTTP mocks base method.
func (m *MockRegistry) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockRegistryMockRecorder) ServeHTTP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRegistry)(nil).ServeHTTP), arg0, arg1)
}

// URLPathPrefix mocks base method.
func (m *MockRegistry) URLPathPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLPathPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// URLPathPrefix indicates an expected call of URLPathPrefix.
func (mr *MockRegistryMockRecorder) URLPathPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLPathPrefix", reflect.TypeOf((*MockRegistry)(nil).URLPathPrefix))
}

// UpdateProvider mocks base method.
func (m *MockRegistry) UpdateProvider(ctx context.Context, id string, options ...authproviders.ProviderOption) (authproviders.Provider, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProvider", varargs...)
	ret0, _ := ret[0].(authproviders.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockRegistryMockRecorder) UpdateProvider(ctx, id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockRegistry)(nil).UpdateProvider), varargs...)
}

// ValidateProvider mocks base method.
func (m *MockRegistry) ValidateProvider(ctx context.Context, options ...authproviders.ProviderOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateProvider", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProvider indicates an expected call of ValidateProvider.
func (mr *MockRegistryMockRecorder) ValidateProvider(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProvider", reflect.TypeOf((*MockRegistry)(nil).ValidateProvider), varargs...)
}
