package fixtures

import (
	vtTimestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/protocompat"
	"github.com/stackrox/rox/pkg/uuid"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// GetGlobalDeferralRequest returns a mock pending deferral request with global scope for specified CVE
func GetGlobalDeferralRequest(cves ...string) *storage.VulnerabilityRequest {
	scope := &storage.VulnerabilityRequest_Scope{}
	scope.SetGlobalScope(&storage.VulnerabilityRequest_Scope_Global{})
	req := getVulnRequest(storage.VulnerabilityState_DEFERRED, scope, cves...)

	re := &storage.RequestExpiry{}
	re.SetExpiresOn(proto.ValueOrDefault(protocompat.TimestampNow()))
	dr := &storage.DeferralRequest{}
	dr.SetExpiry(re)

	req.SetDeferralReq(dr)
	return req
}

// GetImageScopeDeferralRequest returns a mock pending deferral request with an image scope for specified CVE
func GetImageScopeDeferralRequest(registry, remote, tag string, cves ...string) *storage.VulnerabilityRequest {
	req := getVulnRequest(storage.VulnerabilityState_DEFERRED, getImageScope(registry, remote, tag), cves...)

	re := &storage.RequestExpiry{}
	re.SetExpiresOn(proto.ValueOrDefault(protocompat.TimestampNow()))
	dr := &storage.DeferralRequest{}
	dr.SetExpiry(re)

	req.SetDeferralReq(dr)
	return req
}

// GetGlobalFPRequest returns a mock pending FP request with global scope for specified CVE
func GetGlobalFPRequest(cves ...string) *storage.VulnerabilityRequest {
	scope := &storage.VulnerabilityRequest_Scope{}
	scope.SetGlobalScope(&storage.VulnerabilityRequest_Scope_Global{})
	req := getVulnRequest(storage.VulnerabilityState_FALSE_POSITIVE, scope, cves...)
	req.SetFpRequest(&storage.FalsePositiveRequest{})
	return req
}

// GetImageScopeFPRequest returns a mock pending FP request with an image scope for specified CVE
func GetImageScopeFPRequest(registry, remote, tag string, cves ...string) *storage.VulnerabilityRequest {
	req := getVulnRequest(storage.VulnerabilityState_FALSE_POSITIVE, getImageScope(registry, remote, tag), cves...)
	req.SetFpRequest(&storage.FalsePositiveRequest{})
	return req
}

// GetApprovedDeferralRequest returns a mock image scoped deferral request that has been approved with fake comments, requestors and approvers
func GetApprovedDeferralRequest(registry, remote, tag string, cves ...string) *storage.VulnerabilityRequest {
	req := GetImageScopeDeferralRequest(registry, remote, tag, cves...)
	req.SetStatus(storage.RequestStatus_APPROVED)
	slimUser := &storage.SlimUser{}
	slimUser.SetId("id-approver")
	slimUser.SetName("fake-approver")
	req.SetApprovers([]*storage.SlimUser{slimUser})
	rc := &storage.RequestComment{}
	rc.SetId(uuid.NewV4().String())
	rc.SetMessage("this is a mock comment by the approver")
	rc.SetUser(req.GetApprovers()[0].CloneVT())
	rc.SetCreatedAt((*timestamppb.Timestamp)((*vtTimestamppb.Timestamp)(req.GetCreatedAt()).CloneVT()))
	req.SetComments(append(req.GetComments(), rc))
	return req
}

// GetGlobalDeferralRequestV2 returns a mock pending deferral request with global scope according to the v2 representation for specified CVE.
func GetGlobalDeferralRequestV2(cves ...string) *storage.VulnerabilityRequest {
	scope := getImageScope(".*", ".*", ".*")
	req := getVulnRequest(storage.VulnerabilityState_DEFERRED, scope, cves...)
	re := &storage.RequestExpiry{}
	re.SetExpiresOn(proto.ValueOrDefault(protocompat.TimestampNow()))
	dr := &storage.DeferralRequest{}
	dr.SetExpiry(re)
	req.SetDeferralReq(dr)
	return req
}

// GetGlobalFPRequestV2 returns a mock pending FP request with global scope according to the v2 representation for specified CVE.
func GetGlobalFPRequestV2(cves ...string) *storage.VulnerabilityRequest {
	scope := getImageScope(".*", ".*", ".*")
	req := getVulnRequest(storage.VulnerabilityState_FALSE_POSITIVE, scope, cves...)
	req.SetFpRequest(&storage.FalsePositiveRequest{})
	return req
}

func getImageScope(registry, remote, tag string) *storage.VulnerabilityRequest_Scope {
	vsi := &storage.VulnerabilityRequest_Scope_Image{}
	vsi.SetRegistry(registry)
	vsi.SetRemote(remote)
	vsi.SetTag(tag)
	vs := &storage.VulnerabilityRequest_Scope{}
	vs.SetImageScope(proto.ValueOrDefault(vsi))
	return vs
}
func getVulnRequest(state storage.VulnerabilityState, scope *storage.VulnerabilityRequest_Scope, cves ...string) *storage.VulnerabilityRequest {
	now := protocompat.TimestampNow()
	requestor := &storage.SlimUser{}
	requestor.SetId(uuid.NewV4().String())
	requestor.SetName("thisisaname")

	vc := &storage.VulnerabilityRequest_CVEs{}
	vc.SetCves(cves)
	rc := &storage.RequestComment{}
	rc.SetId(uuid.NewV4().String())
	rc.SetMessage("this is a mock comment by the requestor")
	rc.SetUser(requestor.CloneVT())
	rc.SetCreatedAt(now)
	vr := &storage.VulnerabilityRequest{}
	vr.SetId(uuid.NewV4().String())
	vr.SetName(uuid.NewV4().String())
	vr.SetTargetState(state)
	vr.SetStatus(storage.RequestStatus_PENDING)
	vr.SetRequestor(requestor)
	vr.SetCreatedAt(now)
	vr.SetLastUpdated(now)
	vr.SetScope(scope)
	vr.SetCves(proto.ValueOrDefault(vc))
	vr.SetComments([]*storage.RequestComment{rc})
	return vr
}
