// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/client.go -source client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authn "github.com/google/go-containerregistry/pkg/authn"
	name "github.com/google/go-containerregistry/pkg/name"
	v4 "github.com/stackrox/rox/generated/internalapi/scanner/v4"
	client "github.com/stackrox/rox/pkg/scannerv4/client"
	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScanner) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScannerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScanner)(nil).Close))
}

// GetImageIndex mocks base method.
func (m *MockScanner) GetImageIndex(ctx context.Context, hashID string) (*v4.IndexReport, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageIndex", ctx, hashID)
	ret0, _ := ret[0].(*v4.IndexReport)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageIndex indicates an expected call of GetImageIndex.
func (mr *MockScannerMockRecorder) GetImageIndex(ctx, hashID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageIndex", reflect.TypeOf((*MockScanner)(nil).GetImageIndex), ctx, hashID)
}

// GetMatcherMetadata mocks base method.
func (m *MockScanner) GetMatcherMetadata(arg0 context.Context) (*v4.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatcherMetadata", arg0)
	ret0, _ := ret[0].(*v4.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatcherMetadata indicates an expected call of GetMatcherMetadata.
func (mr *MockScannerMockRecorder) GetMatcherMetadata(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatcherMetadata", reflect.TypeOf((*MockScanner)(nil).GetMatcherMetadata), arg0)
}

// GetOrCreateImageIndex mocks base method.
func (m *MockScanner) GetOrCreateImageIndex(ctx context.Context, ref name.Digest, auth authn.Authenticator, opt client.ImageRegistryOpt) (*v4.IndexReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateImageIndex", ctx, ref, auth, opt)
	ret0, _ := ret[0].(*v4.IndexReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateImageIndex indicates an expected call of GetOrCreateImageIndex.
func (mr *MockScannerMockRecorder) GetOrCreateImageIndex(ctx, ref, auth, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateImageIndex", reflect.TypeOf((*MockScanner)(nil).GetOrCreateImageIndex), ctx, ref, auth, opt)
}

// GetVulnerabilities mocks base method.
func (m *MockScanner) GetVulnerabilities(ctx context.Context, ref name.Digest, contents *v4.Contents) (*v4.VulnerabilityReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilities", ctx, ref, contents)
	ret0, _ := ret[0].(*v4.VulnerabilityReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilities indicates an expected call of GetVulnerabilities.
func (mr *MockScannerMockRecorder) GetVulnerabilities(ctx, ref, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilities", reflect.TypeOf((*MockScanner)(nil).GetVulnerabilities), ctx, ref, contents)
}

// IndexAndScanImage mocks base method.
func (m *MockScanner) IndexAndScanImage(arg0 context.Context, arg1 name.Digest, arg2 authn.Authenticator, arg3 client.ImageRegistryOpt) (*v4.VulnerabilityReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexAndScanImage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v4.VulnerabilityReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexAndScanImage indicates an expected call of IndexAndScanImage.
func (mr *MockScannerMockRecorder) IndexAndScanImage(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexAndScanImage", reflect.TypeOf((*MockScanner)(nil).IndexAndScanImage), arg0, arg1, arg2, arg3)
}
