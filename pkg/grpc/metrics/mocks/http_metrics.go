// Code generated by MockGen. DO NOT EDIT.
// Source: http_metrics.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/http_metrics.go -source http_metrics.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPMetrics is a mock of HTTPMetrics interface.
type MockHTTPMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMetricsMockRecorder
}

// MockHTTPMetricsMockRecorder is the mock recorder for MockHTTPMetrics.
type MockHTTPMetricsMockRecorder struct {
	mock *MockHTTPMetrics
}

// NewMockHTTPMetrics creates a new mock instance.
func NewMockHTTPMetrics(ctrl *gomock.Controller) *MockHTTPMetrics {
	mock := &MockHTTPMetrics{ctrl: ctrl}
	mock.recorder = &MockHTTPMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPMetrics) EXPECT() *MockHTTPMetricsMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockHTTPMetrics) GetMetrics() (map[string]map[int]int64, map[string]map[string]int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(map[string]map[int]int64)
	ret1, _ := ret[1].(map[string]map[string]int64)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockHTTPMetricsMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockHTTPMetrics)(nil).GetMetrics))
}

// WrapHandler mocks base method.
func (m *MockHTTPMetrics) WrapHandler(handler http.Handler, path string) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapHandler", handler, path)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// WrapHandler indicates an expected call of WrapHandler.
func (mr *MockHTTPMetricsMockRecorder) WrapHandler(handler, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapHandler", reflect.TypeOf((*MockHTTPMetrics)(nil).WrapHandler), handler, path)
}
