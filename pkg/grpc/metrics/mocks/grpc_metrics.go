// Code generated by MockGen. DO NOT EDIT.
// Source: grpc_metrics.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/grpc_metrics.go -source grpc_metrics.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
)

// MockGRPCMetrics is a mock of GRPCMetrics interface.
type MockGRPCMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCMetricsMockRecorder
}

// MockGRPCMetricsMockRecorder is the mock recorder for MockGRPCMetrics.
type MockGRPCMetricsMockRecorder struct {
	mock *MockGRPCMetrics
}

// NewMockGRPCMetrics creates a new mock instance.
func NewMockGRPCMetrics(ctrl *gomock.Controller) *MockGRPCMetrics {
	mock := &MockGRPCMetrics{ctrl: ctrl}
	mock.recorder = &MockGRPCMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCMetrics) EXPECT() *MockGRPCMetricsMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockGRPCMetrics) GetMetrics() (map[string]map[codes.Code]int64, map[string]map[string]int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(map[string]map[codes.Code]int64)
	ret1, _ := ret[1].(map[string]map[string]int64)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockGRPCMetricsMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockGRPCMetrics)(nil).GetMetrics))
}

// UnaryMonitoringInterceptor mocks base method.
func (m *MockGRPCMetrics) UnaryMonitoringInterceptor(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnaryMonitoringInterceptor", ctx, req, info, handler)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnaryMonitoringInterceptor indicates an expected call of UnaryMonitoringInterceptor.
func (mr *MockGRPCMetricsMockRecorder) UnaryMonitoringInterceptor(ctx, req, info, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnaryMonitoringInterceptor", reflect.TypeOf((*MockGRPCMetrics)(nil).UnaryMonitoringInterceptor), ctx, req, info, handler)
}
