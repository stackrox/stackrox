// Code generated by MockGen. DO NOT EDIT.
// Source: scope_request_tracker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payload "github.com/stackrox/default-authz-plugin/pkg/payload"
	sac "github.com/stackrox/rox/pkg/sac"
)

// MockScopeRequest is a mock of ScopeRequest interface.
type MockScopeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockScopeRequestMockRecorder
}

// MockScopeRequestMockRecorder is the mock recorder for MockScopeRequest.
type MockScopeRequestMockRecorder struct {
	mock *MockScopeRequest
}

// NewMockScopeRequest creates a new mock instance.
func NewMockScopeRequest(ctrl *gomock.Controller) *MockScopeRequest {
	mock := &MockScopeRequest{ctrl: ctrl}
	mock.recorder = &MockScopeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeRequest) EXPECT() *MockScopeRequestMockRecorder {
	return m.recorder
}

// GetAccessScope mocks base method.
func (m *MockScopeRequest) GetAccessScope() payload.AccessScope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessScope")
	ret0, _ := ret[0].(payload.AccessScope)
	return ret0
}

// GetAccessScope indicates an expected call of GetAccessScope.
func (mr *MockScopeRequestMockRecorder) GetAccessScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessScope", reflect.TypeOf((*MockScopeRequest)(nil).GetAccessScope))
}

// SetState mocks base method.
func (m *MockScopeRequest) SetState(state sac.TryAllowedResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", state)
}

// SetState indicates an expected call of SetState.
func (mr *MockScopeRequestMockRecorder) SetState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockScopeRequest)(nil).SetState), state)
}

// MockScopeRequestTracker is a mock of ScopeRequestTracker interface.
type MockScopeRequestTracker struct {
	ctrl     *gomock.Controller
	recorder *MockScopeRequestTrackerMockRecorder
}

// MockScopeRequestTrackerMockRecorder is the mock recorder for MockScopeRequestTracker.
type MockScopeRequestTrackerMockRecorder struct {
	mock *MockScopeRequestTracker
}

// NewMockScopeRequestTracker creates a new mock instance.
func NewMockScopeRequestTracker(ctrl *gomock.Controller) *MockScopeRequestTracker {
	mock := &MockScopeRequestTracker{ctrl: ctrl}
	mock.recorder = &MockScopeRequestTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeRequestTracker) EXPECT() *MockScopeRequestTrackerMockRecorder {
	return m.recorder
}

// AddRequested mocks base method.
func (m *MockScopeRequestTracker) AddRequested(scopes ...sac.ScopeRequest) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRequested", varargs...)
}

// AddRequested indicates an expected call of AddRequested.
func (mr *MockScopeRequestTrackerMockRecorder) AddRequested(scopes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequested", reflect.TypeOf((*MockScopeRequestTracker)(nil).AddRequested), scopes...)
}

// PerformChecks mocks base method.
func (m *MockScopeRequestTracker) PerformChecks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformChecks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformChecks indicates an expected call of PerformChecks.
func (mr *MockScopeRequestTrackerMockRecorder) PerformChecks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformChecks", reflect.TypeOf((*MockScopeRequestTracker)(nil).PerformChecks), ctx)
}
