// Code generated by MockGen. DO NOT EDIT.
// Source: transformer.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/transformer.go -source transformer.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	proto "github.com/gogo/protobuf/proto"
	declarativeconfig "github.com/stackrox/rox/pkg/declarativeconfig"
	gomock "go.uber.org/mock/gomock"
)

// MockTransformer is a mock of Transformer interface.
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer.
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance.
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockTransformer) Transform(config declarativeconfig.Configuration) (map[reflect.Type][]proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", config)
	ret0, _ := ret[0].(map[reflect.Type][]proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockTransformerMockRecorder) Transform(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformer)(nil).Transform), config)
}
