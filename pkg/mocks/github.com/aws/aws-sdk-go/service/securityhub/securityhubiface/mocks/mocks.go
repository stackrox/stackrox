// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/securityhub/securityhubiface (interfaces: SecurityHubAPI)
//
// Generated by this command:
//
//	mockgen -package mocks -destination github.com/aws/aws-sdk-go/service/securityhub/securityhubiface/mocks/mocks.go github.com/aws/aws-sdk-go/service/securityhub/securityhubiface SecurityHubAPI
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	securityhub "github.com/aws/aws-sdk-go/service/securityhub"
	gomock "go.uber.org/mock/gomock"
)

// MockSecurityHubAPI is a mock of SecurityHubAPI interface.
type MockSecurityHubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityHubAPIMockRecorder
}

// MockSecurityHubAPIMockRecorder is the mock recorder for MockSecurityHubAPI.
type MockSecurityHubAPIMockRecorder struct {
	mock *MockSecurityHubAPI
}

// NewMockSecurityHubAPI creates a new mock instance.
func NewMockSecurityHubAPI(ctrl *gomock.Controller) *MockSecurityHubAPI {
	mock := &MockSecurityHubAPI{ctrl: ctrl}
	mock.recorder = &MockSecurityHubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityHubAPI) EXPECT() *MockSecurityHubAPIMockRecorder {
	return m.recorder
}

// AcceptAdministratorInvitation mocks base method.
func (m *MockSecurityHubAPI) AcceptAdministratorInvitation(arg0 *securityhub.AcceptAdministratorInvitationInput) (*securityhub.AcceptAdministratorInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAdministratorInvitation", arg0)
	ret0, _ := ret[0].(*securityhub.AcceptAdministratorInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAdministratorInvitation indicates an expected call of AcceptAdministratorInvitation.
func (mr *MockSecurityHubAPIMockRecorder) AcceptAdministratorInvitation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAdministratorInvitation", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptAdministratorInvitation), arg0)
}

// AcceptAdministratorInvitationRequest mocks base method.
func (m *MockSecurityHubAPI) AcceptAdministratorInvitationRequest(arg0 *securityhub.AcceptAdministratorInvitationInput) (*request.Request, *securityhub.AcceptAdministratorInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAdministratorInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.AcceptAdministratorInvitationOutput)
	return ret0, ret1
}

// AcceptAdministratorInvitationRequest indicates an expected call of AcceptAdministratorInvitationRequest.
func (mr *MockSecurityHubAPIMockRecorder) AcceptAdministratorInvitationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAdministratorInvitationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptAdministratorInvitationRequest), arg0)
}

// AcceptAdministratorInvitationWithContext mocks base method.
func (m *MockSecurityHubAPI) AcceptAdministratorInvitationWithContext(arg0 context.Context, arg1 *securityhub.AcceptAdministratorInvitationInput, arg2 ...request.Option) (*securityhub.AcceptAdministratorInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptAdministratorInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.AcceptAdministratorInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAdministratorInvitationWithContext indicates an expected call of AcceptAdministratorInvitationWithContext.
func (mr *MockSecurityHubAPIMockRecorder) AcceptAdministratorInvitationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAdministratorInvitationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptAdministratorInvitationWithContext), varargs...)
}

// AcceptInvitation mocks base method.
func (m *MockSecurityHubAPI) AcceptInvitation(arg0 *securityhub.AcceptInvitationInput) (*securityhub.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0)
	ret0, _ := ret[0].(*securityhub.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitation), arg0)
}

// AcceptInvitationRequest mocks base method.
func (m *MockSecurityHubAPI) AcceptInvitationRequest(arg0 *securityhub.AcceptInvitationInput) (*request.Request, *securityhub.AcceptInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.AcceptInvitationOutput)
	return ret0, ret1
}

// AcceptInvitationRequest indicates an expected call of AcceptInvitationRequest.
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitationRequest), arg0)
}

// AcceptInvitationWithContext mocks base method.
func (m *MockSecurityHubAPI) AcceptInvitationWithContext(arg0 context.Context, arg1 *securityhub.AcceptInvitationInput, arg2 ...request.Option) (*securityhub.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationWithContext indicates an expected call of AcceptInvitationWithContext.
func (mr *MockSecurityHubAPIMockRecorder) AcceptInvitationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).AcceptInvitationWithContext), varargs...)
}

// BatchDeleteAutomationRules mocks base method.
func (m *MockSecurityHubAPI) BatchDeleteAutomationRules(arg0 *securityhub.BatchDeleteAutomationRulesInput) (*securityhub.BatchDeleteAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteAutomationRules", arg0)
	ret0, _ := ret[0].(*securityhub.BatchDeleteAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteAutomationRules indicates an expected call of BatchDeleteAutomationRules.
func (mr *MockSecurityHubAPIMockRecorder) BatchDeleteAutomationRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAutomationRules", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDeleteAutomationRules), arg0)
}

// BatchDeleteAutomationRulesRequest mocks base method.
func (m *MockSecurityHubAPI) BatchDeleteAutomationRulesRequest(arg0 *securityhub.BatchDeleteAutomationRulesInput) (*request.Request, *securityhub.BatchDeleteAutomationRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteAutomationRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchDeleteAutomationRulesOutput)
	return ret0, ret1
}

// BatchDeleteAutomationRulesRequest indicates an expected call of BatchDeleteAutomationRulesRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchDeleteAutomationRulesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAutomationRulesRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDeleteAutomationRulesRequest), arg0)
}

// BatchDeleteAutomationRulesWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchDeleteAutomationRulesWithContext(arg0 context.Context, arg1 *securityhub.BatchDeleteAutomationRulesInput, arg2 ...request.Option) (*securityhub.BatchDeleteAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteAutomationRulesWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchDeleteAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteAutomationRulesWithContext indicates an expected call of BatchDeleteAutomationRulesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchDeleteAutomationRulesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAutomationRulesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDeleteAutomationRulesWithContext), varargs...)
}

// BatchDisableStandards mocks base method.
func (m *MockSecurityHubAPI) BatchDisableStandards(arg0 *securityhub.BatchDisableStandardsInput) (*securityhub.BatchDisableStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisableStandards", arg0)
	ret0, _ := ret[0].(*securityhub.BatchDisableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisableStandards indicates an expected call of BatchDisableStandards.
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandards(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandards), arg0)
}

// BatchDisableStandardsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchDisableStandardsRequest(arg0 *securityhub.BatchDisableStandardsInput) (*request.Request, *securityhub.BatchDisableStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisableStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchDisableStandardsOutput)
	return ret0, ret1
}

// BatchDisableStandardsRequest indicates an expected call of BatchDisableStandardsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandardsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandardsRequest), arg0)
}

// BatchDisableStandardsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchDisableStandardsWithContext(arg0 context.Context, arg1 *securityhub.BatchDisableStandardsInput, arg2 ...request.Option) (*securityhub.BatchDisableStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisableStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchDisableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisableStandardsWithContext indicates an expected call of BatchDisableStandardsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchDisableStandardsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisableStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchDisableStandardsWithContext), varargs...)
}

// BatchEnableStandards mocks base method.
func (m *MockSecurityHubAPI) BatchEnableStandards(arg0 *securityhub.BatchEnableStandardsInput) (*securityhub.BatchEnableStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEnableStandards", arg0)
	ret0, _ := ret[0].(*securityhub.BatchEnableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEnableStandards indicates an expected call of BatchEnableStandards.
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandards(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandards), arg0)
}

// BatchEnableStandardsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchEnableStandardsRequest(arg0 *securityhub.BatchEnableStandardsInput) (*request.Request, *securityhub.BatchEnableStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEnableStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchEnableStandardsOutput)
	return ret0, ret1
}

// BatchEnableStandardsRequest indicates an expected call of BatchEnableStandardsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandardsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandardsRequest), arg0)
}

// BatchEnableStandardsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchEnableStandardsWithContext(arg0 context.Context, arg1 *securityhub.BatchEnableStandardsInput, arg2 ...request.Option) (*securityhub.BatchEnableStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchEnableStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchEnableStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEnableStandardsWithContext indicates an expected call of BatchEnableStandardsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchEnableStandardsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEnableStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchEnableStandardsWithContext), varargs...)
}

// BatchGetAutomationRules mocks base method.
func (m *MockSecurityHubAPI) BatchGetAutomationRules(arg0 *securityhub.BatchGetAutomationRulesInput) (*securityhub.BatchGetAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAutomationRules", arg0)
	ret0, _ := ret[0].(*securityhub.BatchGetAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAutomationRules indicates an expected call of BatchGetAutomationRules.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetAutomationRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAutomationRules", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetAutomationRules), arg0)
}

// BatchGetAutomationRulesRequest mocks base method.
func (m *MockSecurityHubAPI) BatchGetAutomationRulesRequest(arg0 *securityhub.BatchGetAutomationRulesInput) (*request.Request, *securityhub.BatchGetAutomationRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAutomationRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchGetAutomationRulesOutput)
	return ret0, ret1
}

// BatchGetAutomationRulesRequest indicates an expected call of BatchGetAutomationRulesRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetAutomationRulesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAutomationRulesRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetAutomationRulesRequest), arg0)
}

// BatchGetAutomationRulesWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchGetAutomationRulesWithContext(arg0 context.Context, arg1 *securityhub.BatchGetAutomationRulesInput, arg2 ...request.Option) (*securityhub.BatchGetAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetAutomationRulesWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchGetAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAutomationRulesWithContext indicates an expected call of BatchGetAutomationRulesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetAutomationRulesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAutomationRulesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetAutomationRulesWithContext), varargs...)
}

// BatchGetSecurityControls mocks base method.
func (m *MockSecurityHubAPI) BatchGetSecurityControls(arg0 *securityhub.BatchGetSecurityControlsInput) (*securityhub.BatchGetSecurityControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSecurityControls", arg0)
	ret0, _ := ret[0].(*securityhub.BatchGetSecurityControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSecurityControls indicates an expected call of BatchGetSecurityControls.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetSecurityControls(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSecurityControls", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetSecurityControls), arg0)
}

// BatchGetSecurityControlsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchGetSecurityControlsRequest(arg0 *securityhub.BatchGetSecurityControlsInput) (*request.Request, *securityhub.BatchGetSecurityControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSecurityControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchGetSecurityControlsOutput)
	return ret0, ret1
}

// BatchGetSecurityControlsRequest indicates an expected call of BatchGetSecurityControlsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetSecurityControlsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSecurityControlsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetSecurityControlsRequest), arg0)
}

// BatchGetSecurityControlsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchGetSecurityControlsWithContext(arg0 context.Context, arg1 *securityhub.BatchGetSecurityControlsInput, arg2 ...request.Option) (*securityhub.BatchGetSecurityControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetSecurityControlsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchGetSecurityControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSecurityControlsWithContext indicates an expected call of BatchGetSecurityControlsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetSecurityControlsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSecurityControlsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetSecurityControlsWithContext), varargs...)
}

// BatchGetStandardsControlAssociations mocks base method.
func (m *MockSecurityHubAPI) BatchGetStandardsControlAssociations(arg0 *securityhub.BatchGetStandardsControlAssociationsInput) (*securityhub.BatchGetStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetStandardsControlAssociations", arg0)
	ret0, _ := ret[0].(*securityhub.BatchGetStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetStandardsControlAssociations indicates an expected call of BatchGetStandardsControlAssociations.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetStandardsControlAssociations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStandardsControlAssociations", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetStandardsControlAssociations), arg0)
}

// BatchGetStandardsControlAssociationsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchGetStandardsControlAssociationsRequest(arg0 *securityhub.BatchGetStandardsControlAssociationsInput) (*request.Request, *securityhub.BatchGetStandardsControlAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetStandardsControlAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchGetStandardsControlAssociationsOutput)
	return ret0, ret1
}

// BatchGetStandardsControlAssociationsRequest indicates an expected call of BatchGetStandardsControlAssociationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetStandardsControlAssociationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStandardsControlAssociationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetStandardsControlAssociationsRequest), arg0)
}

// BatchGetStandardsControlAssociationsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchGetStandardsControlAssociationsWithContext(arg0 context.Context, arg1 *securityhub.BatchGetStandardsControlAssociationsInput, arg2 ...request.Option) (*securityhub.BatchGetStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetStandardsControlAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchGetStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetStandardsControlAssociationsWithContext indicates an expected call of BatchGetStandardsControlAssociationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchGetStandardsControlAssociationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStandardsControlAssociationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchGetStandardsControlAssociationsWithContext), varargs...)
}

// BatchImportFindings mocks base method.
func (m *MockSecurityHubAPI) BatchImportFindings(arg0 *securityhub.BatchImportFindingsInput) (*securityhub.BatchImportFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportFindings", arg0)
	ret0, _ := ret[0].(*securityhub.BatchImportFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportFindings indicates an expected call of BatchImportFindings.
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindings), arg0)
}

// BatchImportFindingsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchImportFindingsRequest(arg0 *securityhub.BatchImportFindingsInput) (*request.Request, *securityhub.BatchImportFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchImportFindingsOutput)
	return ret0, ret1
}

// BatchImportFindingsRequest indicates an expected call of BatchImportFindingsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindingsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindingsRequest), arg0)
}

// BatchImportFindingsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchImportFindingsWithContext(arg0 context.Context, arg1 *securityhub.BatchImportFindingsInput, arg2 ...request.Option) (*securityhub.BatchImportFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchImportFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchImportFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportFindingsWithContext indicates an expected call of BatchImportFindingsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchImportFindingsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchImportFindingsWithContext), varargs...)
}

// BatchUpdateAutomationRules mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateAutomationRules(arg0 *securityhub.BatchUpdateAutomationRulesInput) (*securityhub.BatchUpdateAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateAutomationRules", arg0)
	ret0, _ := ret[0].(*securityhub.BatchUpdateAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateAutomationRules indicates an expected call of BatchUpdateAutomationRules.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateAutomationRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateAutomationRules", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateAutomationRules), arg0)
}

// BatchUpdateAutomationRulesRequest mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateAutomationRulesRequest(arg0 *securityhub.BatchUpdateAutomationRulesInput) (*request.Request, *securityhub.BatchUpdateAutomationRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateAutomationRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchUpdateAutomationRulesOutput)
	return ret0, ret1
}

// BatchUpdateAutomationRulesRequest indicates an expected call of BatchUpdateAutomationRulesRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateAutomationRulesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateAutomationRulesRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateAutomationRulesRequest), arg0)
}

// BatchUpdateAutomationRulesWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateAutomationRulesWithContext(arg0 context.Context, arg1 *securityhub.BatchUpdateAutomationRulesInput, arg2 ...request.Option) (*securityhub.BatchUpdateAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateAutomationRulesWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchUpdateAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateAutomationRulesWithContext indicates an expected call of BatchUpdateAutomationRulesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateAutomationRulesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateAutomationRulesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateAutomationRulesWithContext), varargs...)
}

// BatchUpdateFindings mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateFindings(arg0 *securityhub.BatchUpdateFindingsInput) (*securityhub.BatchUpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateFindings", arg0)
	ret0, _ := ret[0].(*securityhub.BatchUpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateFindings indicates an expected call of BatchUpdateFindings.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateFindings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateFindings), arg0)
}

// BatchUpdateFindingsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateFindingsRequest(arg0 *securityhub.BatchUpdateFindingsInput) (*request.Request, *securityhub.BatchUpdateFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchUpdateFindingsOutput)
	return ret0, ret1
}

// BatchUpdateFindingsRequest indicates an expected call of BatchUpdateFindingsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateFindingsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateFindingsRequest), arg0)
}

// BatchUpdateFindingsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateFindingsWithContext(arg0 context.Context, arg1 *securityhub.BatchUpdateFindingsInput, arg2 ...request.Option) (*securityhub.BatchUpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchUpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateFindingsWithContext indicates an expected call of BatchUpdateFindingsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateFindingsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateFindingsWithContext), varargs...)
}

// BatchUpdateStandardsControlAssociations mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateStandardsControlAssociations(arg0 *securityhub.BatchUpdateStandardsControlAssociationsInput) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStandardsControlAssociations", arg0)
	ret0, _ := ret[0].(*securityhub.BatchUpdateStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateStandardsControlAssociations indicates an expected call of BatchUpdateStandardsControlAssociations.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateStandardsControlAssociations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStandardsControlAssociations", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateStandardsControlAssociations), arg0)
}

// BatchUpdateStandardsControlAssociationsRequest mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateStandardsControlAssociationsRequest(arg0 *securityhub.BatchUpdateStandardsControlAssociationsInput) (*request.Request, *securityhub.BatchUpdateStandardsControlAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStandardsControlAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.BatchUpdateStandardsControlAssociationsOutput)
	return ret0, ret1
}

// BatchUpdateStandardsControlAssociationsRequest indicates an expected call of BatchUpdateStandardsControlAssociationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateStandardsControlAssociationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStandardsControlAssociationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateStandardsControlAssociationsRequest), arg0)
}

// BatchUpdateStandardsControlAssociationsWithContext mocks base method.
func (m *MockSecurityHubAPI) BatchUpdateStandardsControlAssociationsWithContext(arg0 context.Context, arg1 *securityhub.BatchUpdateStandardsControlAssociationsInput, arg2 ...request.Option) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateStandardsControlAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.BatchUpdateStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateStandardsControlAssociationsWithContext indicates an expected call of BatchUpdateStandardsControlAssociationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) BatchUpdateStandardsControlAssociationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStandardsControlAssociationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).BatchUpdateStandardsControlAssociationsWithContext), varargs...)
}

// CreateActionTarget mocks base method.
func (m *MockSecurityHubAPI) CreateActionTarget(arg0 *securityhub.CreateActionTargetInput) (*securityhub.CreateActionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionTarget", arg0)
	ret0, _ := ret[0].(*securityhub.CreateActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionTarget indicates an expected call of CreateActionTarget.
func (mr *MockSecurityHubAPIMockRecorder) CreateActionTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionTarget", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateActionTarget), arg0)
}

// CreateActionTargetRequest mocks base method.
func (m *MockSecurityHubAPI) CreateActionTargetRequest(arg0 *securityhub.CreateActionTargetInput) (*request.Request, *securityhub.CreateActionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateActionTargetOutput)
	return ret0, ret1
}

// CreateActionTargetRequest indicates an expected call of CreateActionTargetRequest.
func (mr *MockSecurityHubAPIMockRecorder) CreateActionTargetRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionTargetRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateActionTargetRequest), arg0)
}

// CreateActionTargetWithContext mocks base method.
func (m *MockSecurityHubAPI) CreateActionTargetWithContext(arg0 context.Context, arg1 *securityhub.CreateActionTargetInput, arg2 ...request.Option) (*securityhub.CreateActionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateActionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionTargetWithContext indicates an expected call of CreateActionTargetWithContext.
func (mr *MockSecurityHubAPIMockRecorder) CreateActionTargetWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionTargetWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateActionTargetWithContext), varargs...)
}

// CreateAutomationRule mocks base method.
func (m *MockSecurityHubAPI) CreateAutomationRule(arg0 *securityhub.CreateAutomationRuleInput) (*securityhub.CreateAutomationRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutomationRule", arg0)
	ret0, _ := ret[0].(*securityhub.CreateAutomationRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutomationRule indicates an expected call of CreateAutomationRule.
func (mr *MockSecurityHubAPIMockRecorder) CreateAutomationRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutomationRule", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateAutomationRule), arg0)
}

// CreateAutomationRuleRequest mocks base method.
func (m *MockSecurityHubAPI) CreateAutomationRuleRequest(arg0 *securityhub.CreateAutomationRuleInput) (*request.Request, *securityhub.CreateAutomationRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutomationRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateAutomationRuleOutput)
	return ret0, ret1
}

// CreateAutomationRuleRequest indicates an expected call of CreateAutomationRuleRequest.
func (mr *MockSecurityHubAPIMockRecorder) CreateAutomationRuleRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutomationRuleRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateAutomationRuleRequest), arg0)
}

// CreateAutomationRuleWithContext mocks base method.
func (m *MockSecurityHubAPI) CreateAutomationRuleWithContext(arg0 context.Context, arg1 *securityhub.CreateAutomationRuleInput, arg2 ...request.Option) (*securityhub.CreateAutomationRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAutomationRuleWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateAutomationRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutomationRuleWithContext indicates an expected call of CreateAutomationRuleWithContext.
func (mr *MockSecurityHubAPIMockRecorder) CreateAutomationRuleWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutomationRuleWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateAutomationRuleWithContext), varargs...)
}

// CreateFindingAggregator mocks base method.
func (m *MockSecurityHubAPI) CreateFindingAggregator(arg0 *securityhub.CreateFindingAggregatorInput) (*securityhub.CreateFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingAggregator", arg0)
	ret0, _ := ret[0].(*securityhub.CreateFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingAggregator indicates an expected call of CreateFindingAggregator.
func (mr *MockSecurityHubAPIMockRecorder) CreateFindingAggregator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingAggregator", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateFindingAggregator), arg0)
}

// CreateFindingAggregatorRequest mocks base method.
func (m *MockSecurityHubAPI) CreateFindingAggregatorRequest(arg0 *securityhub.CreateFindingAggregatorInput) (*request.Request, *securityhub.CreateFindingAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateFindingAggregatorOutput)
	return ret0, ret1
}

// CreateFindingAggregatorRequest indicates an expected call of CreateFindingAggregatorRequest.
func (mr *MockSecurityHubAPIMockRecorder) CreateFindingAggregatorRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingAggregatorRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateFindingAggregatorRequest), arg0)
}

// CreateFindingAggregatorWithContext mocks base method.
func (m *MockSecurityHubAPI) CreateFindingAggregatorWithContext(arg0 context.Context, arg1 *securityhub.CreateFindingAggregatorInput, arg2 ...request.Option) (*securityhub.CreateFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFindingAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingAggregatorWithContext indicates an expected call of CreateFindingAggregatorWithContext.
func (mr *MockSecurityHubAPIMockRecorder) CreateFindingAggregatorWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingAggregatorWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateFindingAggregatorWithContext), varargs...)
}

// CreateInsight mocks base method.
func (m *MockSecurityHubAPI) CreateInsight(arg0 *securityhub.CreateInsightInput) (*securityhub.CreateInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsight", arg0)
	ret0, _ := ret[0].(*securityhub.CreateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInsight indicates an expected call of CreateInsight.
func (mr *MockSecurityHubAPIMockRecorder) CreateInsight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsight), arg0)
}

// CreateInsightRequest mocks base method.
func (m *MockSecurityHubAPI) CreateInsightRequest(arg0 *securityhub.CreateInsightInput) (*request.Request, *securityhub.CreateInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateInsightOutput)
	return ret0, ret1
}

// CreateInsightRequest indicates an expected call of CreateInsightRequest.
func (mr *MockSecurityHubAPIMockRecorder) CreateInsightRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsightRequest), arg0)
}

// CreateInsightWithContext mocks base method.
func (m *MockSecurityHubAPI) CreateInsightWithContext(arg0 context.Context, arg1 *securityhub.CreateInsightInput, arg2 ...request.Option) (*securityhub.CreateInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInsightWithContext indicates an expected call of CreateInsightWithContext.
func (mr *MockSecurityHubAPIMockRecorder) CreateInsightWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateInsightWithContext), varargs...)
}

// CreateMembers mocks base method.
func (m *MockSecurityHubAPI) CreateMembers(arg0 *securityhub.CreateMembersInput) (*securityhub.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembers", arg0)
	ret0, _ := ret[0].(*securityhub.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembers indicates an expected call of CreateMembers.
func (mr *MockSecurityHubAPIMockRecorder) CreateMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembers), arg0)
}

// CreateMembersRequest mocks base method.
func (m *MockSecurityHubAPI) CreateMembersRequest(arg0 *securityhub.CreateMembersInput) (*request.Request, *securityhub.CreateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.CreateMembersOutput)
	return ret0, ret1
}

// CreateMembersRequest indicates an expected call of CreateMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) CreateMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembersRequest), arg0)
}

// CreateMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) CreateMembersWithContext(arg0 context.Context, arg1 *securityhub.CreateMembersInput, arg2 ...request.Option) (*securityhub.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembersWithContext indicates an expected call of CreateMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) CreateMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).CreateMembersWithContext), varargs...)
}

// DeclineInvitations mocks base method.
func (m *MockSecurityHubAPI) DeclineInvitations(arg0 *securityhub.DeclineInvitationsInput) (*securityhub.DeclineInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.DeclineInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitations indicates an expected call of DeclineInvitations.
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitations), arg0)
}

// DeclineInvitationsRequest mocks base method.
func (m *MockSecurityHubAPI) DeclineInvitationsRequest(arg0 *securityhub.DeclineInvitationsInput) (*request.Request, *securityhub.DeclineInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeclineInvitationsOutput)
	return ret0, ret1
}

// DeclineInvitationsRequest indicates an expected call of DeclineInvitationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitationsRequest), arg0)
}

// DeclineInvitationsWithContext mocks base method.
func (m *MockSecurityHubAPI) DeclineInvitationsWithContext(arg0 context.Context, arg1 *securityhub.DeclineInvitationsInput, arg2 ...request.Option) (*securityhub.DeclineInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeclineInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeclineInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitationsWithContext indicates an expected call of DeclineInvitationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeclineInvitationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeclineInvitationsWithContext), varargs...)
}

// DeleteActionTarget mocks base method.
func (m *MockSecurityHubAPI) DeleteActionTarget(arg0 *securityhub.DeleteActionTargetInput) (*securityhub.DeleteActionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActionTarget", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActionTarget indicates an expected call of DeleteActionTarget.
func (mr *MockSecurityHubAPIMockRecorder) DeleteActionTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActionTarget", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteActionTarget), arg0)
}

// DeleteActionTargetRequest mocks base method.
func (m *MockSecurityHubAPI) DeleteActionTargetRequest(arg0 *securityhub.DeleteActionTargetInput) (*request.Request, *securityhub.DeleteActionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteActionTargetOutput)
	return ret0, ret1
}

// DeleteActionTargetRequest indicates an expected call of DeleteActionTargetRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeleteActionTargetRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActionTargetRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteActionTargetRequest), arg0)
}

// DeleteActionTargetWithContext mocks base method.
func (m *MockSecurityHubAPI) DeleteActionTargetWithContext(arg0 context.Context, arg1 *securityhub.DeleteActionTargetInput, arg2 ...request.Option) (*securityhub.DeleteActionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteActionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActionTargetWithContext indicates an expected call of DeleteActionTargetWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeleteActionTargetWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActionTargetWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteActionTargetWithContext), varargs...)
}

// DeleteFindingAggregator mocks base method.
func (m *MockSecurityHubAPI) DeleteFindingAggregator(arg0 *securityhub.DeleteFindingAggregatorInput) (*securityhub.DeleteFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFindingAggregator", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFindingAggregator indicates an expected call of DeleteFindingAggregator.
func (mr *MockSecurityHubAPIMockRecorder) DeleteFindingAggregator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFindingAggregator", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteFindingAggregator), arg0)
}

// DeleteFindingAggregatorRequest mocks base method.
func (m *MockSecurityHubAPI) DeleteFindingAggregatorRequest(arg0 *securityhub.DeleteFindingAggregatorInput) (*request.Request, *securityhub.DeleteFindingAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFindingAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteFindingAggregatorOutput)
	return ret0, ret1
}

// DeleteFindingAggregatorRequest indicates an expected call of DeleteFindingAggregatorRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeleteFindingAggregatorRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFindingAggregatorRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteFindingAggregatorRequest), arg0)
}

// DeleteFindingAggregatorWithContext mocks base method.
func (m *MockSecurityHubAPI) DeleteFindingAggregatorWithContext(arg0 context.Context, arg1 *securityhub.DeleteFindingAggregatorInput, arg2 ...request.Option) (*securityhub.DeleteFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFindingAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFindingAggregatorWithContext indicates an expected call of DeleteFindingAggregatorWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeleteFindingAggregatorWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFindingAggregatorWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteFindingAggregatorWithContext), varargs...)
}

// DeleteInsight mocks base method.
func (m *MockSecurityHubAPI) DeleteInsight(arg0 *securityhub.DeleteInsightInput) (*securityhub.DeleteInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInsight", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInsight indicates an expected call of DeleteInsight.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsight), arg0)
}

// DeleteInsightRequest mocks base method.
func (m *MockSecurityHubAPI) DeleteInsightRequest(arg0 *securityhub.DeleteInsightInput) (*request.Request, *securityhub.DeleteInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteInsightOutput)
	return ret0, ret1
}

// DeleteInsightRequest indicates an expected call of DeleteInsightRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsightRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsightRequest), arg0)
}

// DeleteInsightWithContext mocks base method.
func (m *MockSecurityHubAPI) DeleteInsightWithContext(arg0 context.Context, arg1 *securityhub.DeleteInsightInput, arg2 ...request.Option) (*securityhub.DeleteInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInsightWithContext indicates an expected call of DeleteInsightWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInsightWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInsightWithContext), varargs...)
}

// DeleteInvitations mocks base method.
func (m *MockSecurityHubAPI) DeleteInvitations(arg0 *securityhub.DeleteInvitationsInput) (*securityhub.DeleteInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitations indicates an expected call of DeleteInvitations.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitations), arg0)
}

// DeleteInvitationsRequest mocks base method.
func (m *MockSecurityHubAPI) DeleteInvitationsRequest(arg0 *securityhub.DeleteInvitationsInput) (*request.Request, *securityhub.DeleteInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteInvitationsOutput)
	return ret0, ret1
}

// DeleteInvitationsRequest indicates an expected call of DeleteInvitationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitationsRequest), arg0)
}

// DeleteInvitationsWithContext mocks base method.
func (m *MockSecurityHubAPI) DeleteInvitationsWithContext(arg0 context.Context, arg1 *securityhub.DeleteInvitationsInput, arg2 ...request.Option) (*securityhub.DeleteInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitationsWithContext indicates an expected call of DeleteInvitationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeleteInvitationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteInvitationsWithContext), varargs...)
}

// DeleteMembers mocks base method.
func (m *MockSecurityHubAPI) DeleteMembers(arg0 *securityhub.DeleteMembersInput) (*securityhub.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembers", arg0)
	ret0, _ := ret[0].(*securityhub.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembers indicates an expected call of DeleteMembers.
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembers), arg0)
}

// DeleteMembersRequest mocks base method.
func (m *MockSecurityHubAPI) DeleteMembersRequest(arg0 *securityhub.DeleteMembersInput) (*request.Request, *securityhub.DeleteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DeleteMembersOutput)
	return ret0, ret1
}

// DeleteMembersRequest indicates an expected call of DeleteMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembersRequest), arg0)
}

// DeleteMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) DeleteMembersWithContext(arg0 context.Context, arg1 *securityhub.DeleteMembersInput, arg2 ...request.Option) (*securityhub.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembersWithContext indicates an expected call of DeleteMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DeleteMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DeleteMembersWithContext), varargs...)
}

// DescribeActionTargets mocks base method.
func (m *MockSecurityHubAPI) DescribeActionTargets(arg0 *securityhub.DescribeActionTargetsInput) (*securityhub.DescribeActionTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActionTargets", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeActionTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActionTargets indicates an expected call of DescribeActionTargets.
func (mr *MockSecurityHubAPIMockRecorder) DescribeActionTargets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActionTargets", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeActionTargets), arg0)
}

// DescribeActionTargetsPages mocks base method.
func (m *MockSecurityHubAPI) DescribeActionTargetsPages(arg0 *securityhub.DescribeActionTargetsInput, arg1 func(*securityhub.DescribeActionTargetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActionTargetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeActionTargetsPages indicates an expected call of DescribeActionTargetsPages.
func (mr *MockSecurityHubAPIMockRecorder) DescribeActionTargetsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActionTargetsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeActionTargetsPages), arg0, arg1)
}

// DescribeActionTargetsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeActionTargetsPagesWithContext(arg0 context.Context, arg1 *securityhub.DescribeActionTargetsInput, arg2 func(*securityhub.DescribeActionTargetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActionTargetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeActionTargetsPagesWithContext indicates an expected call of DescribeActionTargetsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeActionTargetsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActionTargetsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeActionTargetsPagesWithContext), varargs...)
}

// DescribeActionTargetsRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeActionTargetsRequest(arg0 *securityhub.DescribeActionTargetsInput) (*request.Request, *securityhub.DescribeActionTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActionTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeActionTargetsOutput)
	return ret0, ret1
}

// DescribeActionTargetsRequest indicates an expected call of DescribeActionTargetsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeActionTargetsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActionTargetsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeActionTargetsRequest), arg0)
}

// DescribeActionTargetsWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeActionTargetsWithContext(arg0 context.Context, arg1 *securityhub.DescribeActionTargetsInput, arg2 ...request.Option) (*securityhub.DescribeActionTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActionTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeActionTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActionTargetsWithContext indicates an expected call of DescribeActionTargetsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeActionTargetsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActionTargetsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeActionTargetsWithContext), varargs...)
}

// DescribeHub mocks base method.
func (m *MockSecurityHubAPI) DescribeHub(arg0 *securityhub.DescribeHubInput) (*securityhub.DescribeHubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHub", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHub indicates an expected call of DescribeHub.
func (mr *MockSecurityHubAPIMockRecorder) DescribeHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHub", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeHub), arg0)
}

// DescribeHubRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeHubRequest(arg0 *securityhub.DescribeHubInput) (*request.Request, *securityhub.DescribeHubOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHubRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeHubOutput)
	return ret0, ret1
}

// DescribeHubRequest indicates an expected call of DescribeHubRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeHubRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHubRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeHubRequest), arg0)
}

// DescribeHubWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeHubWithContext(arg0 context.Context, arg1 *securityhub.DescribeHubInput, arg2 ...request.Option) (*securityhub.DescribeHubOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHubWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHubWithContext indicates an expected call of DescribeHubWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeHubWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHubWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeHubWithContext), varargs...)
}

// DescribeOrganizationConfiguration mocks base method.
func (m *MockSecurityHubAPI) DescribeOrganizationConfiguration(arg0 *securityhub.DescribeOrganizationConfigurationInput) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfiguration indicates an expected call of DescribeOrganizationConfiguration.
func (mr *MockSecurityHubAPIMockRecorder) DescribeOrganizationConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfiguration", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeOrganizationConfiguration), arg0)
}

// DescribeOrganizationConfigurationRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeOrganizationConfigurationRequest(arg0 *securityhub.DescribeOrganizationConfigurationInput) (*request.Request, *securityhub.DescribeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeOrganizationConfigurationOutput)
	return ret0, ret1
}

// DescribeOrganizationConfigurationRequest indicates an expected call of DescribeOrganizationConfigurationRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeOrganizationConfigurationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeOrganizationConfigurationRequest), arg0)
}

// DescribeOrganizationConfigurationWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *securityhub.DescribeOrganizationConfigurationInput, arg2 ...request.Option) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigurationWithContext indicates an expected call of DescribeOrganizationConfigurationWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeOrganizationConfigurationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeOrganizationConfigurationWithContext), varargs...)
}

// DescribeProducts mocks base method.
func (m *MockSecurityHubAPI) DescribeProducts(arg0 *securityhub.DescribeProductsInput) (*securityhub.DescribeProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProducts", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProducts indicates an expected call of DescribeProducts.
func (mr *MockSecurityHubAPIMockRecorder) DescribeProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProducts", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeProducts), arg0)
}

// DescribeProductsPages mocks base method.
func (m *MockSecurityHubAPI) DescribeProductsPages(arg0 *securityhub.DescribeProductsInput, arg1 func(*securityhub.DescribeProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProductsPages indicates an expected call of DescribeProductsPages.
func (mr *MockSecurityHubAPIMockRecorder) DescribeProductsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeProductsPages), arg0, arg1)
}

// DescribeProductsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeProductsPagesWithContext(arg0 context.Context, arg1 *securityhub.DescribeProductsInput, arg2 func(*securityhub.DescribeProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProductsPagesWithContext indicates an expected call of DescribeProductsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeProductsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeProductsPagesWithContext), varargs...)
}

// DescribeProductsRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeProductsRequest(arg0 *securityhub.DescribeProductsInput) (*request.Request, *securityhub.DescribeProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeProductsOutput)
	return ret0, ret1
}

// DescribeProductsRequest indicates an expected call of DescribeProductsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeProductsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeProductsRequest), arg0)
}

// DescribeProductsWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeProductsWithContext(arg0 context.Context, arg1 *securityhub.DescribeProductsInput, arg2 ...request.Option) (*securityhub.DescribeProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductsWithContext indicates an expected call of DescribeProductsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeProductsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeProductsWithContext), varargs...)
}

// DescribeStandards mocks base method.
func (m *MockSecurityHubAPI) DescribeStandards(arg0 *securityhub.DescribeStandardsInput) (*securityhub.DescribeStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandards", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStandards indicates an expected call of DescribeStandards.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandards(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandards), arg0)
}

// DescribeStandardsControls mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsControls(arg0 *securityhub.DescribeStandardsControlsInput) (*securityhub.DescribeStandardsControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandardsControls", arg0)
	ret0, _ := ret[0].(*securityhub.DescribeStandardsControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStandardsControls indicates an expected call of DescribeStandardsControls.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsControls(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsControls", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsControls), arg0)
}

// DescribeStandardsControlsPages mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsControlsPages(arg0 *securityhub.DescribeStandardsControlsInput, arg1 func(*securityhub.DescribeStandardsControlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandardsControlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStandardsControlsPages indicates an expected call of DescribeStandardsControlsPages.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsControlsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsControlsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsControlsPages), arg0, arg1)
}

// DescribeStandardsControlsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsControlsPagesWithContext(arg0 context.Context, arg1 *securityhub.DescribeStandardsControlsInput, arg2 func(*securityhub.DescribeStandardsControlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStandardsControlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStandardsControlsPagesWithContext indicates an expected call of DescribeStandardsControlsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsControlsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsControlsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsControlsPagesWithContext), varargs...)
}

// DescribeStandardsControlsRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsControlsRequest(arg0 *securityhub.DescribeStandardsControlsInput) (*request.Request, *securityhub.DescribeStandardsControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandardsControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeStandardsControlsOutput)
	return ret0, ret1
}

// DescribeStandardsControlsRequest indicates an expected call of DescribeStandardsControlsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsControlsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsControlsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsControlsRequest), arg0)
}

// DescribeStandardsControlsWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsControlsWithContext(arg0 context.Context, arg1 *securityhub.DescribeStandardsControlsInput, arg2 ...request.Option) (*securityhub.DescribeStandardsControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStandardsControlsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeStandardsControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStandardsControlsWithContext indicates an expected call of DescribeStandardsControlsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsControlsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsControlsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsControlsWithContext), varargs...)
}

// DescribeStandardsPages mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsPages(arg0 *securityhub.DescribeStandardsInput, arg1 func(*securityhub.DescribeStandardsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandardsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStandardsPages indicates an expected call of DescribeStandardsPages.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsPages), arg0, arg1)
}

// DescribeStandardsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsPagesWithContext(arg0 context.Context, arg1 *securityhub.DescribeStandardsInput, arg2 func(*securityhub.DescribeStandardsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStandardsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeStandardsPagesWithContext indicates an expected call of DescribeStandardsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsPagesWithContext), varargs...)
}

// DescribeStandardsRequest mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsRequest(arg0 *securityhub.DescribeStandardsInput) (*request.Request, *securityhub.DescribeStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DescribeStandardsOutput)
	return ret0, ret1
}

// DescribeStandardsRequest indicates an expected call of DescribeStandardsRequest.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsRequest), arg0)
}

// DescribeStandardsWithContext mocks base method.
func (m *MockSecurityHubAPI) DescribeStandardsWithContext(arg0 context.Context, arg1 *securityhub.DescribeStandardsInput, arg2 ...request.Option) (*securityhub.DescribeStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DescribeStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStandardsWithContext indicates an expected call of DescribeStandardsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DescribeStandardsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DescribeStandardsWithContext), varargs...)
}

// DisableImportFindingsForProduct mocks base method.
func (m *MockSecurityHubAPI) DisableImportFindingsForProduct(arg0 *securityhub.DisableImportFindingsForProductInput) (*securityhub.DisableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableImportFindingsForProduct", arg0)
	ret0, _ := ret[0].(*securityhub.DisableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableImportFindingsForProduct indicates an expected call of DisableImportFindingsForProduct.
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProduct", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProduct), arg0)
}

// DisableImportFindingsForProductRequest mocks base method.
func (m *MockSecurityHubAPI) DisableImportFindingsForProductRequest(arg0 *securityhub.DisableImportFindingsForProductInput) (*request.Request, *securityhub.DisableImportFindingsForProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableImportFindingsForProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisableImportFindingsForProductOutput)
	return ret0, ret1
}

// DisableImportFindingsForProductRequest indicates an expected call of DisableImportFindingsForProductRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProductRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProductRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProductRequest), arg0)
}

// DisableImportFindingsForProductWithContext mocks base method.
func (m *MockSecurityHubAPI) DisableImportFindingsForProductWithContext(arg0 context.Context, arg1 *securityhub.DisableImportFindingsForProductInput, arg2 ...request.Option) (*securityhub.DisableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableImportFindingsForProductWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableImportFindingsForProductWithContext indicates an expected call of DisableImportFindingsForProductWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisableImportFindingsForProductWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableImportFindingsForProductWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableImportFindingsForProductWithContext), varargs...)
}

// DisableOrganizationAdminAccount mocks base method.
func (m *MockSecurityHubAPI) DisableOrganizationAdminAccount(arg0 *securityhub.DisableOrganizationAdminAccountInput) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*securityhub.DisableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableOrganizationAdminAccount indicates an expected call of DisableOrganizationAdminAccount.
func (mr *MockSecurityHubAPIMockRecorder) DisableOrganizationAdminAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableOrganizationAdminAccount), arg0)
}

// DisableOrganizationAdminAccountRequest mocks base method.
func (m *MockSecurityHubAPI) DisableOrganizationAdminAccountRequest(arg0 *securityhub.DisableOrganizationAdminAccountInput) (*request.Request, *securityhub.DisableOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisableOrganizationAdminAccountOutput)
	return ret0, ret1
}

// DisableOrganizationAdminAccountRequest indicates an expected call of DisableOrganizationAdminAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisableOrganizationAdminAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableOrganizationAdminAccountRequest), arg0)
}

// DisableOrganizationAdminAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) DisableOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *securityhub.DisableOrganizationAdminAccountInput, arg2 ...request.Option) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableOrganizationAdminAccountWithContext indicates an expected call of DisableOrganizationAdminAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisableOrganizationAdminAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableOrganizationAdminAccountWithContext), varargs...)
}

// DisableSecurityHub mocks base method.
func (m *MockSecurityHubAPI) DisableSecurityHub(arg0 *securityhub.DisableSecurityHubInput) (*securityhub.DisableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSecurityHub", arg0)
	ret0, _ := ret[0].(*securityhub.DisableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSecurityHub indicates an expected call of DisableSecurityHub.
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHub", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHub), arg0)
}

// DisableSecurityHubRequest mocks base method.
func (m *MockSecurityHubAPI) DisableSecurityHubRequest(arg0 *securityhub.DisableSecurityHubInput) (*request.Request, *securityhub.DisableSecurityHubOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSecurityHubRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisableSecurityHubOutput)
	return ret0, ret1
}

// DisableSecurityHubRequest indicates an expected call of DisableSecurityHubRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHubRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHubRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHubRequest), arg0)
}

// DisableSecurityHubWithContext mocks base method.
func (m *MockSecurityHubAPI) DisableSecurityHubWithContext(arg0 context.Context, arg1 *securityhub.DisableSecurityHubInput, arg2 ...request.Option) (*securityhub.DisableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableSecurityHubWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSecurityHubWithContext indicates an expected call of DisableSecurityHubWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisableSecurityHubWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecurityHubWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisableSecurityHubWithContext), varargs...)
}

// DisassociateFromAdministratorAccount mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromAdministratorAccount(arg0 *securityhub.DisassociateFromAdministratorAccountInput) (*securityhub.DisassociateFromAdministratorAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromAdministratorAccount", arg0)
	ret0, _ := ret[0].(*securityhub.DisassociateFromAdministratorAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromAdministratorAccount indicates an expected call of DisassociateFromAdministratorAccount.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromAdministratorAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromAdministratorAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromAdministratorAccount), arg0)
}

// DisassociateFromAdministratorAccountRequest mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromAdministratorAccountRequest(arg0 *securityhub.DisassociateFromAdministratorAccountInput) (*request.Request, *securityhub.DisassociateFromAdministratorAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromAdministratorAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisassociateFromAdministratorAccountOutput)
	return ret0, ret1
}

// DisassociateFromAdministratorAccountRequest indicates an expected call of DisassociateFromAdministratorAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromAdministratorAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromAdministratorAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromAdministratorAccountRequest), arg0)
}

// DisassociateFromAdministratorAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromAdministratorAccountWithContext(arg0 context.Context, arg1 *securityhub.DisassociateFromAdministratorAccountInput, arg2 ...request.Option) (*securityhub.DisassociateFromAdministratorAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateFromAdministratorAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisassociateFromAdministratorAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromAdministratorAccountWithContext indicates an expected call of DisassociateFromAdministratorAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromAdministratorAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromAdministratorAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromAdministratorAccountWithContext), varargs...)
}

// DisassociateFromMasterAccount mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromMasterAccount(arg0 *securityhub.DisassociateFromMasterAccountInput) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccount", arg0)
	ret0, _ := ret[0].(*securityhub.DisassociateFromMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromMasterAccount indicates an expected call of DisassociateFromMasterAccount.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccount), arg0)
}

// DisassociateFromMasterAccountRequest mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromMasterAccountRequest(arg0 *securityhub.DisassociateFromMasterAccountInput) (*request.Request, *securityhub.DisassociateFromMasterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisassociateFromMasterAccountOutput)
	return ret0, ret1
}

// DisassociateFromMasterAccountRequest indicates an expected call of DisassociateFromMasterAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccountRequest), arg0)
}

// DisassociateFromMasterAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) DisassociateFromMasterAccountWithContext(arg0 context.Context, arg1 *securityhub.DisassociateFromMasterAccountInput, arg2 ...request.Option) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateFromMasterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisassociateFromMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFromMasterAccountWithContext indicates an expected call of DisassociateFromMasterAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateFromMasterAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFromMasterAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateFromMasterAccountWithContext), varargs...)
}

// DisassociateMembers mocks base method.
func (m *MockSecurityHubAPI) DisassociateMembers(arg0 *securityhub.DisassociateMembersInput) (*securityhub.DisassociateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembers", arg0)
	ret0, _ := ret[0].(*securityhub.DisassociateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembers indicates an expected call of DisassociateMembers.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembers), arg0)
}

// DisassociateMembersRequest mocks base method.
func (m *MockSecurityHubAPI) DisassociateMembersRequest(arg0 *securityhub.DisassociateMembersInput) (*request.Request, *securityhub.DisassociateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.DisassociateMembersOutput)
	return ret0, ret1
}

// DisassociateMembersRequest indicates an expected call of DisassociateMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembersRequest), arg0)
}

// DisassociateMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) DisassociateMembersWithContext(arg0 context.Context, arg1 *securityhub.DisassociateMembersInput, arg2 ...request.Option) (*securityhub.DisassociateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.DisassociateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembersWithContext indicates an expected call of DisassociateMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) DisassociateMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).DisassociateMembersWithContext), varargs...)
}

// EnableImportFindingsForProduct mocks base method.
func (m *MockSecurityHubAPI) EnableImportFindingsForProduct(arg0 *securityhub.EnableImportFindingsForProductInput) (*securityhub.EnableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableImportFindingsForProduct", arg0)
	ret0, _ := ret[0].(*securityhub.EnableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableImportFindingsForProduct indicates an expected call of EnableImportFindingsForProduct.
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProduct", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProduct), arg0)
}

// EnableImportFindingsForProductRequest mocks base method.
func (m *MockSecurityHubAPI) EnableImportFindingsForProductRequest(arg0 *securityhub.EnableImportFindingsForProductInput) (*request.Request, *securityhub.EnableImportFindingsForProductOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableImportFindingsForProductRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.EnableImportFindingsForProductOutput)
	return ret0, ret1
}

// EnableImportFindingsForProductRequest indicates an expected call of EnableImportFindingsForProductRequest.
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProductRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProductRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProductRequest), arg0)
}

// EnableImportFindingsForProductWithContext mocks base method.
func (m *MockSecurityHubAPI) EnableImportFindingsForProductWithContext(arg0 context.Context, arg1 *securityhub.EnableImportFindingsForProductInput, arg2 ...request.Option) (*securityhub.EnableImportFindingsForProductOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableImportFindingsForProductWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.EnableImportFindingsForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableImportFindingsForProductWithContext indicates an expected call of EnableImportFindingsForProductWithContext.
func (mr *MockSecurityHubAPIMockRecorder) EnableImportFindingsForProductWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableImportFindingsForProductWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableImportFindingsForProductWithContext), varargs...)
}

// EnableOrganizationAdminAccount mocks base method.
func (m *MockSecurityHubAPI) EnableOrganizationAdminAccount(arg0 *securityhub.EnableOrganizationAdminAccountInput) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*securityhub.EnableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableOrganizationAdminAccount indicates an expected call of EnableOrganizationAdminAccount.
func (mr *MockSecurityHubAPIMockRecorder) EnableOrganizationAdminAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableOrganizationAdminAccount), arg0)
}

// EnableOrganizationAdminAccountRequest mocks base method.
func (m *MockSecurityHubAPI) EnableOrganizationAdminAccountRequest(arg0 *securityhub.EnableOrganizationAdminAccountInput) (*request.Request, *securityhub.EnableOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.EnableOrganizationAdminAccountOutput)
	return ret0, ret1
}

// EnableOrganizationAdminAccountRequest indicates an expected call of EnableOrganizationAdminAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) EnableOrganizationAdminAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableOrganizationAdminAccountRequest), arg0)
}

// EnableOrganizationAdminAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) EnableOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *securityhub.EnableOrganizationAdminAccountInput, arg2 ...request.Option) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.EnableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableOrganizationAdminAccountWithContext indicates an expected call of EnableOrganizationAdminAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) EnableOrganizationAdminAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableOrganizationAdminAccountWithContext), varargs...)
}

// EnableSecurityHub mocks base method.
func (m *MockSecurityHubAPI) EnableSecurityHub(arg0 *securityhub.EnableSecurityHubInput) (*securityhub.EnableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSecurityHub", arg0)
	ret0, _ := ret[0].(*securityhub.EnableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSecurityHub indicates an expected call of EnableSecurityHub.
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHub", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHub), arg0)
}

// EnableSecurityHubRequest mocks base method.
func (m *MockSecurityHubAPI) EnableSecurityHubRequest(arg0 *securityhub.EnableSecurityHubInput) (*request.Request, *securityhub.EnableSecurityHubOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSecurityHubRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.EnableSecurityHubOutput)
	return ret0, ret1
}

// EnableSecurityHubRequest indicates an expected call of EnableSecurityHubRequest.
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHubRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHubRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHubRequest), arg0)
}

// EnableSecurityHubWithContext mocks base method.
func (m *MockSecurityHubAPI) EnableSecurityHubWithContext(arg0 context.Context, arg1 *securityhub.EnableSecurityHubInput, arg2 ...request.Option) (*securityhub.EnableSecurityHubOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableSecurityHubWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.EnableSecurityHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSecurityHubWithContext indicates an expected call of EnableSecurityHubWithContext.
func (mr *MockSecurityHubAPIMockRecorder) EnableSecurityHubWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecurityHubWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).EnableSecurityHubWithContext), varargs...)
}

// GetAdministratorAccount mocks base method.
func (m *MockSecurityHubAPI) GetAdministratorAccount(arg0 *securityhub.GetAdministratorAccountInput) (*securityhub.GetAdministratorAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdministratorAccount", arg0)
	ret0, _ := ret[0].(*securityhub.GetAdministratorAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdministratorAccount indicates an expected call of GetAdministratorAccount.
func (mr *MockSecurityHubAPIMockRecorder) GetAdministratorAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdministratorAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetAdministratorAccount), arg0)
}

// GetAdministratorAccountRequest mocks base method.
func (m *MockSecurityHubAPI) GetAdministratorAccountRequest(arg0 *securityhub.GetAdministratorAccountInput) (*request.Request, *securityhub.GetAdministratorAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdministratorAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetAdministratorAccountOutput)
	return ret0, ret1
}

// GetAdministratorAccountRequest indicates an expected call of GetAdministratorAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetAdministratorAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdministratorAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetAdministratorAccountRequest), arg0)
}

// GetAdministratorAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) GetAdministratorAccountWithContext(arg0 context.Context, arg1 *securityhub.GetAdministratorAccountInput, arg2 ...request.Option) (*securityhub.GetAdministratorAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdministratorAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetAdministratorAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdministratorAccountWithContext indicates an expected call of GetAdministratorAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetAdministratorAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdministratorAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetAdministratorAccountWithContext), varargs...)
}

// GetEnabledStandards mocks base method.
func (m *MockSecurityHubAPI) GetEnabledStandards(arg0 *securityhub.GetEnabledStandardsInput) (*securityhub.GetEnabledStandardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledStandards", arg0)
	ret0, _ := ret[0].(*securityhub.GetEnabledStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledStandards indicates an expected call of GetEnabledStandards.
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandards(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandards", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandards), arg0)
}

// GetEnabledStandardsPages mocks base method.
func (m *MockSecurityHubAPI) GetEnabledStandardsPages(arg0 *securityhub.GetEnabledStandardsInput, arg1 func(*securityhub.GetEnabledStandardsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledStandardsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEnabledStandardsPages indicates an expected call of GetEnabledStandardsPages.
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsPages), arg0, arg1)
}

// GetEnabledStandardsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) GetEnabledStandardsPagesWithContext(arg0 context.Context, arg1 *securityhub.GetEnabledStandardsInput, arg2 func(*securityhub.GetEnabledStandardsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnabledStandardsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEnabledStandardsPagesWithContext indicates an expected call of GetEnabledStandardsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsPagesWithContext), varargs...)
}

// GetEnabledStandardsRequest mocks base method.
func (m *MockSecurityHubAPI) GetEnabledStandardsRequest(arg0 *securityhub.GetEnabledStandardsInput) (*request.Request, *securityhub.GetEnabledStandardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledStandardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetEnabledStandardsOutput)
	return ret0, ret1
}

// GetEnabledStandardsRequest indicates an expected call of GetEnabledStandardsRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsRequest), arg0)
}

// GetEnabledStandardsWithContext mocks base method.
func (m *MockSecurityHubAPI) GetEnabledStandardsWithContext(arg0 context.Context, arg1 *securityhub.GetEnabledStandardsInput, arg2 ...request.Option) (*securityhub.GetEnabledStandardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnabledStandardsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetEnabledStandardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledStandardsWithContext indicates an expected call of GetEnabledStandardsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetEnabledStandardsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledStandardsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetEnabledStandardsWithContext), varargs...)
}

// GetFindingAggregator mocks base method.
func (m *MockSecurityHubAPI) GetFindingAggregator(arg0 *securityhub.GetFindingAggregatorInput) (*securityhub.GetFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingAggregator", arg0)
	ret0, _ := ret[0].(*securityhub.GetFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingAggregator indicates an expected call of GetFindingAggregator.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingAggregator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingAggregator", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingAggregator), arg0)
}

// GetFindingAggregatorRequest mocks base method.
func (m *MockSecurityHubAPI) GetFindingAggregatorRequest(arg0 *securityhub.GetFindingAggregatorInput) (*request.Request, *securityhub.GetFindingAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetFindingAggregatorOutput)
	return ret0, ret1
}

// GetFindingAggregatorRequest indicates an expected call of GetFindingAggregatorRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingAggregatorRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingAggregatorRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingAggregatorRequest), arg0)
}

// GetFindingAggregatorWithContext mocks base method.
func (m *MockSecurityHubAPI) GetFindingAggregatorWithContext(arg0 context.Context, arg1 *securityhub.GetFindingAggregatorInput, arg2 ...request.Option) (*securityhub.GetFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingAggregatorWithContext indicates an expected call of GetFindingAggregatorWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingAggregatorWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingAggregatorWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingAggregatorWithContext), varargs...)
}

// GetFindingHistory mocks base method.
func (m *MockSecurityHubAPI) GetFindingHistory(arg0 *securityhub.GetFindingHistoryInput) (*securityhub.GetFindingHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingHistory", arg0)
	ret0, _ := ret[0].(*securityhub.GetFindingHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingHistory indicates an expected call of GetFindingHistory.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingHistory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingHistory", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingHistory), arg0)
}

// GetFindingHistoryPages mocks base method.
func (m *MockSecurityHubAPI) GetFindingHistoryPages(arg0 *securityhub.GetFindingHistoryInput, arg1 func(*securityhub.GetFindingHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingHistoryPages indicates an expected call of GetFindingHistoryPages.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingHistoryPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingHistoryPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingHistoryPages), arg0, arg1)
}

// GetFindingHistoryPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) GetFindingHistoryPagesWithContext(arg0 context.Context, arg1 *securityhub.GetFindingHistoryInput, arg2 func(*securityhub.GetFindingHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingHistoryPagesWithContext indicates an expected call of GetFindingHistoryPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingHistoryPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingHistoryPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingHistoryPagesWithContext), varargs...)
}

// GetFindingHistoryRequest mocks base method.
func (m *MockSecurityHubAPI) GetFindingHistoryRequest(arg0 *securityhub.GetFindingHistoryInput) (*request.Request, *securityhub.GetFindingHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetFindingHistoryOutput)
	return ret0, ret1
}

// GetFindingHistoryRequest indicates an expected call of GetFindingHistoryRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingHistoryRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingHistoryRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingHistoryRequest), arg0)
}

// GetFindingHistoryWithContext mocks base method.
func (m *MockSecurityHubAPI) GetFindingHistoryWithContext(arg0 context.Context, arg1 *securityhub.GetFindingHistoryInput, arg2 ...request.Option) (*securityhub.GetFindingHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetFindingHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingHistoryWithContext indicates an expected call of GetFindingHistoryWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingHistoryWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingHistoryWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingHistoryWithContext), varargs...)
}

// GetFindings mocks base method.
func (m *MockSecurityHubAPI) GetFindings(arg0 *securityhub.GetFindingsInput) (*securityhub.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindings", arg0)
	ret0, _ := ret[0].(*securityhub.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindings indicates an expected call of GetFindings.
func (mr *MockSecurityHubAPIMockRecorder) GetFindings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindings), arg0)
}

// GetFindingsPages mocks base method.
func (m *MockSecurityHubAPI) GetFindingsPages(arg0 *securityhub.GetFindingsInput, arg1 func(*securityhub.GetFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPages indicates an expected call of GetFindingsPages.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsPages), arg0, arg1)
}

// GetFindingsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) GetFindingsPagesWithContext(arg0 context.Context, arg1 *securityhub.GetFindingsInput, arg2 func(*securityhub.GetFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsPagesWithContext indicates an expected call of GetFindingsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsPagesWithContext), varargs...)
}

// GetFindingsRequest mocks base method.
func (m *MockSecurityHubAPI) GetFindingsRequest(arg0 *securityhub.GetFindingsInput) (*request.Request, *securityhub.GetFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetFindingsOutput)
	return ret0, ret1
}

// GetFindingsRequest indicates an expected call of GetFindingsRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsRequest), arg0)
}

// GetFindingsWithContext mocks base method.
func (m *MockSecurityHubAPI) GetFindingsWithContext(arg0 context.Context, arg1 *securityhub.GetFindingsInput, arg2 ...request.Option) (*securityhub.GetFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsWithContext indicates an expected call of GetFindingsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetFindingsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetFindingsWithContext), varargs...)
}

// GetInsightResults mocks base method.
func (m *MockSecurityHubAPI) GetInsightResults(arg0 *securityhub.GetInsightResultsInput) (*securityhub.GetInsightResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightResults", arg0)
	ret0, _ := ret[0].(*securityhub.GetInsightResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightResults indicates an expected call of GetInsightResults.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResults(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResults", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResults), arg0)
}

// GetInsightResultsRequest mocks base method.
func (m *MockSecurityHubAPI) GetInsightResultsRequest(arg0 *securityhub.GetInsightResultsInput) (*request.Request, *securityhub.GetInsightResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInsightResultsOutput)
	return ret0, ret1
}

// GetInsightResultsRequest indicates an expected call of GetInsightResultsRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResultsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResultsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResultsRequest), arg0)
}

// GetInsightResultsWithContext mocks base method.
func (m *MockSecurityHubAPI) GetInsightResultsWithContext(arg0 context.Context, arg1 *securityhub.GetInsightResultsInput, arg2 ...request.Option) (*securityhub.GetInsightResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightResultsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInsightResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightResultsWithContext indicates an expected call of GetInsightResultsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightResultsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightResultsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightResultsWithContext), varargs...)
}

// GetInsights mocks base method.
func (m *MockSecurityHubAPI) GetInsights(arg0 *securityhub.GetInsightsInput) (*securityhub.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsights", arg0)
	ret0, _ := ret[0].(*securityhub.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsights indicates an expected call of GetInsights.
func (mr *MockSecurityHubAPIMockRecorder) GetInsights(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsights", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsights), arg0)
}

// GetInsightsPages mocks base method.
func (m *MockSecurityHubAPI) GetInsightsPages(arg0 *securityhub.GetInsightsInput, arg1 func(*securityhub.GetInsightsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightsPages indicates an expected call of GetInsightsPages.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsPages), arg0, arg1)
}

// GetInsightsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) GetInsightsPagesWithContext(arg0 context.Context, arg1 *securityhub.GetInsightsInput, arg2 func(*securityhub.GetInsightsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightsPagesWithContext indicates an expected call of GetInsightsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsPagesWithContext), varargs...)
}

// GetInsightsRequest mocks base method.
func (m *MockSecurityHubAPI) GetInsightsRequest(arg0 *securityhub.GetInsightsInput) (*request.Request, *securityhub.GetInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInsightsOutput)
	return ret0, ret1
}

// GetInsightsRequest indicates an expected call of GetInsightsRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsRequest), arg0)
}

// GetInsightsWithContext mocks base method.
func (m *MockSecurityHubAPI) GetInsightsWithContext(arg0 context.Context, arg1 *securityhub.GetInsightsInput, arg2 ...request.Option) (*securityhub.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsWithContext indicates an expected call of GetInsightsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetInsightsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInsightsWithContext), varargs...)
}

// GetInvitationsCount mocks base method.
func (m *MockSecurityHubAPI) GetInvitationsCount(arg0 *securityhub.GetInvitationsCountInput) (*securityhub.GetInvitationsCountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationsCount", arg0)
	ret0, _ := ret[0].(*securityhub.GetInvitationsCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationsCount indicates an expected call of GetInvitationsCount.
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCount", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCount), arg0)
}

// GetInvitationsCountRequest mocks base method.
func (m *MockSecurityHubAPI) GetInvitationsCountRequest(arg0 *securityhub.GetInvitationsCountInput) (*request.Request, *securityhub.GetInvitationsCountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationsCountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetInvitationsCountOutput)
	return ret0, ret1
}

// GetInvitationsCountRequest indicates an expected call of GetInvitationsCountRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCountRequest), arg0)
}

// GetInvitationsCountWithContext mocks base method.
func (m *MockSecurityHubAPI) GetInvitationsCountWithContext(arg0 context.Context, arg1 *securityhub.GetInvitationsCountInput, arg2 ...request.Option) (*securityhub.GetInvitationsCountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvitationsCountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetInvitationsCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationsCountWithContext indicates an expected call of GetInvitationsCountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetInvitationsCountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationsCountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetInvitationsCountWithContext), varargs...)
}

// GetMasterAccount mocks base method.
func (m *MockSecurityHubAPI) GetMasterAccount(arg0 *securityhub.GetMasterAccountInput) (*securityhub.GetMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAccount", arg0)
	ret0, _ := ret[0].(*securityhub.GetMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAccount indicates an expected call of GetMasterAccount.
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccount", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccount), arg0)
}

// GetMasterAccountRequest mocks base method.
func (m *MockSecurityHubAPI) GetMasterAccountRequest(arg0 *securityhub.GetMasterAccountInput) (*request.Request, *securityhub.GetMasterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetMasterAccountOutput)
	return ret0, ret1
}

// GetMasterAccountRequest indicates an expected call of GetMasterAccountRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccountRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccountRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccountRequest), arg0)
}

// GetMasterAccountWithContext mocks base method.
func (m *MockSecurityHubAPI) GetMasterAccountWithContext(arg0 context.Context, arg1 *securityhub.GetMasterAccountInput, arg2 ...request.Option) (*securityhub.GetMasterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMasterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetMasterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterAccountWithContext indicates an expected call of GetMasterAccountWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetMasterAccountWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterAccountWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMasterAccountWithContext), varargs...)
}

// GetMembers mocks base method.
func (m *MockSecurityHubAPI) GetMembers(arg0 *securityhub.GetMembersInput) (*securityhub.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", arg0)
	ret0, _ := ret[0].(*securityhub.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockSecurityHubAPIMockRecorder) GetMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembers), arg0)
}

// GetMembersRequest mocks base method.
func (m *MockSecurityHubAPI) GetMembersRequest(arg0 *securityhub.GetMembersInput) (*request.Request, *securityhub.GetMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.GetMembersOutput)
	return ret0, ret1
}

// GetMembersRequest indicates an expected call of GetMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) GetMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembersRequest), arg0)
}

// GetMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) GetMembersWithContext(arg0 context.Context, arg1 *securityhub.GetMembersInput, arg2 ...request.Option) (*securityhub.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersWithContext indicates an expected call of GetMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) GetMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).GetMembersWithContext), varargs...)
}

// InviteMembers mocks base method.
func (m *MockSecurityHubAPI) InviteMembers(arg0 *securityhub.InviteMembersInput) (*securityhub.InviteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMembers", arg0)
	ret0, _ := ret[0].(*securityhub.InviteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteMembers indicates an expected call of InviteMembers.
func (mr *MockSecurityHubAPIMockRecorder) InviteMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembers), arg0)
}

// InviteMembersRequest mocks base method.
func (m *MockSecurityHubAPI) InviteMembersRequest(arg0 *securityhub.InviteMembersInput) (*request.Request, *securityhub.InviteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.InviteMembersOutput)
	return ret0, ret1
}

// InviteMembersRequest indicates an expected call of InviteMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) InviteMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembersRequest), arg0)
}

// InviteMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) InviteMembersWithContext(arg0 context.Context, arg1 *securityhub.InviteMembersInput, arg2 ...request.Option) (*securityhub.InviteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.InviteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteMembersWithContext indicates an expected call of InviteMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) InviteMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).InviteMembersWithContext), varargs...)
}

// ListAutomationRules mocks base method.
func (m *MockSecurityHubAPI) ListAutomationRules(arg0 *securityhub.ListAutomationRulesInput) (*securityhub.ListAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutomationRules", arg0)
	ret0, _ := ret[0].(*securityhub.ListAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutomationRules indicates an expected call of ListAutomationRules.
func (mr *MockSecurityHubAPIMockRecorder) ListAutomationRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutomationRules", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListAutomationRules), arg0)
}

// ListAutomationRulesRequest mocks base method.
func (m *MockSecurityHubAPI) ListAutomationRulesRequest(arg0 *securityhub.ListAutomationRulesInput) (*request.Request, *securityhub.ListAutomationRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutomationRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListAutomationRulesOutput)
	return ret0, ret1
}

// ListAutomationRulesRequest indicates an expected call of ListAutomationRulesRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListAutomationRulesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutomationRulesRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListAutomationRulesRequest), arg0)
}

// ListAutomationRulesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListAutomationRulesWithContext(arg0 context.Context, arg1 *securityhub.ListAutomationRulesInput, arg2 ...request.Option) (*securityhub.ListAutomationRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAutomationRulesWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListAutomationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutomationRulesWithContext indicates an expected call of ListAutomationRulesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListAutomationRulesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutomationRulesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListAutomationRulesWithContext), varargs...)
}

// ListEnabledProductsForImport mocks base method.
func (m *MockSecurityHubAPI) ListEnabledProductsForImport(arg0 *securityhub.ListEnabledProductsForImportInput) (*securityhub.ListEnabledProductsForImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImport", arg0)
	ret0, _ := ret[0].(*securityhub.ListEnabledProductsForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledProductsForImport indicates an expected call of ListEnabledProductsForImport.
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImport(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImport", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImport), arg0)
}

// ListEnabledProductsForImportPages mocks base method.
func (m *MockSecurityHubAPI) ListEnabledProductsForImportPages(arg0 *securityhub.ListEnabledProductsForImportInput, arg1 func(*securityhub.ListEnabledProductsForImportOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledProductsForImportPages indicates an expected call of ListEnabledProductsForImportPages.
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportPages), arg0, arg1)
}

// ListEnabledProductsForImportPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListEnabledProductsForImportPagesWithContext(arg0 context.Context, arg1 *securityhub.ListEnabledProductsForImportInput, arg2 func(*securityhub.ListEnabledProductsForImportOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnabledProductsForImportPagesWithContext indicates an expected call of ListEnabledProductsForImportPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportPagesWithContext), varargs...)
}

// ListEnabledProductsForImportRequest mocks base method.
func (m *MockSecurityHubAPI) ListEnabledProductsForImportRequest(arg0 *securityhub.ListEnabledProductsForImportInput) (*request.Request, *securityhub.ListEnabledProductsForImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListEnabledProductsForImportOutput)
	return ret0, ret1
}

// ListEnabledProductsForImportRequest indicates an expected call of ListEnabledProductsForImportRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportRequest), arg0)
}

// ListEnabledProductsForImportWithContext mocks base method.
func (m *MockSecurityHubAPI) ListEnabledProductsForImportWithContext(arg0 context.Context, arg1 *securityhub.ListEnabledProductsForImportInput, arg2 ...request.Option) (*securityhub.ListEnabledProductsForImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnabledProductsForImportWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListEnabledProductsForImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledProductsForImportWithContext indicates an expected call of ListEnabledProductsForImportWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListEnabledProductsForImportWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledProductsForImportWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListEnabledProductsForImportWithContext), varargs...)
}

// ListFindingAggregators mocks base method.
func (m *MockSecurityHubAPI) ListFindingAggregators(arg0 *securityhub.ListFindingAggregatorsInput) (*securityhub.ListFindingAggregatorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregators", arg0)
	ret0, _ := ret[0].(*securityhub.ListFindingAggregatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregators indicates an expected call of ListFindingAggregators.
func (mr *MockSecurityHubAPIMockRecorder) ListFindingAggregators(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregators", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListFindingAggregators), arg0)
}

// ListFindingAggregatorsPages mocks base method.
func (m *MockSecurityHubAPI) ListFindingAggregatorsPages(arg0 *securityhub.ListFindingAggregatorsInput, arg1 func(*securityhub.ListFindingAggregatorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregatorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregatorsPages indicates an expected call of ListFindingAggregatorsPages.
func (mr *MockSecurityHubAPIMockRecorder) ListFindingAggregatorsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregatorsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListFindingAggregatorsPages), arg0, arg1)
}

// ListFindingAggregatorsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListFindingAggregatorsPagesWithContext(arg0 context.Context, arg1 *securityhub.ListFindingAggregatorsInput, arg2 func(*securityhub.ListFindingAggregatorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregatorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregatorsPagesWithContext indicates an expected call of ListFindingAggregatorsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListFindingAggregatorsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregatorsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListFindingAggregatorsPagesWithContext), varargs...)
}

// ListFindingAggregatorsRequest mocks base method.
func (m *MockSecurityHubAPI) ListFindingAggregatorsRequest(arg0 *securityhub.ListFindingAggregatorsInput) (*request.Request, *securityhub.ListFindingAggregatorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregatorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListFindingAggregatorsOutput)
	return ret0, ret1
}

// ListFindingAggregatorsRequest indicates an expected call of ListFindingAggregatorsRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListFindingAggregatorsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregatorsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListFindingAggregatorsRequest), arg0)
}

// ListFindingAggregatorsWithContext mocks base method.
func (m *MockSecurityHubAPI) ListFindingAggregatorsWithContext(arg0 context.Context, arg1 *securityhub.ListFindingAggregatorsInput, arg2 ...request.Option) (*securityhub.ListFindingAggregatorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregatorsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListFindingAggregatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregatorsWithContext indicates an expected call of ListFindingAggregatorsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListFindingAggregatorsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregatorsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListFindingAggregatorsWithContext), varargs...)
}

// ListInvitations mocks base method.
func (m *MockSecurityHubAPI) ListInvitations(arg0 *securityhub.ListInvitationsInput) (*securityhub.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0)
	ret0, _ := ret[0].(*securityhub.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockSecurityHubAPIMockRecorder) ListInvitations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitations), arg0)
}

// ListInvitationsPages mocks base method.
func (m *MockSecurityHubAPI) ListInvitationsPages(arg0 *securityhub.ListInvitationsInput, arg1 func(*securityhub.ListInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPages indicates an expected call of ListInvitationsPages.
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsPages), arg0, arg1)
}

// ListInvitationsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListInvitationsPagesWithContext(arg0 context.Context, arg1 *securityhub.ListInvitationsInput, arg2 func(*securityhub.ListInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPagesWithContext indicates an expected call of ListInvitationsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsPagesWithContext), varargs...)
}

// ListInvitationsRequest mocks base method.
func (m *MockSecurityHubAPI) ListInvitationsRequest(arg0 *securityhub.ListInvitationsInput) (*request.Request, *securityhub.ListInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListInvitationsOutput)
	return ret0, ret1
}

// ListInvitationsRequest indicates an expected call of ListInvitationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsRequest), arg0)
}

// ListInvitationsWithContext mocks base method.
func (m *MockSecurityHubAPI) ListInvitationsWithContext(arg0 context.Context, arg1 *securityhub.ListInvitationsInput, arg2 ...request.Option) (*securityhub.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithContext indicates an expected call of ListInvitationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListInvitationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListInvitationsWithContext), varargs...)
}

// ListMembers mocks base method.
func (m *MockSecurityHubAPI) ListMembers(arg0 *securityhub.ListMembersInput) (*securityhub.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*securityhub.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockSecurityHubAPIMockRecorder) ListMembers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method.
func (m *MockSecurityHubAPI) ListMembersPages(arg0 *securityhub.ListMembersInput, arg1 func(*securityhub.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages.
func (mr *MockSecurityHubAPIMockRecorder) ListMembersPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListMembersPagesWithContext(arg0 context.Context, arg1 *securityhub.ListMembersInput, arg2 func(*securityhub.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method.
func (m *MockSecurityHubAPI) ListMembersRequest(arg0 *securityhub.ListMembersInput) (*request.Request, *securityhub.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListMembersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method.
func (m *MockSecurityHubAPI) ListMembersWithContext(arg0 context.Context, arg1 *securityhub.ListMembersInput, arg2 ...request.Option) (*securityhub.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListMembersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListMembersWithContext), varargs...)
}

// ListOrganizationAdminAccounts mocks base method.
func (m *MockSecurityHubAPI) ListOrganizationAdminAccounts(arg0 *securityhub.ListOrganizationAdminAccountsInput) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccounts", arg0)
	ret0, _ := ret[0].(*securityhub.ListOrganizationAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationAdminAccounts indicates an expected call of ListOrganizationAdminAccounts.
func (mr *MockSecurityHubAPIMockRecorder) ListOrganizationAdminAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccounts", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListOrganizationAdminAccounts), arg0)
}

// ListOrganizationAdminAccountsPages mocks base method.
func (m *MockSecurityHubAPI) ListOrganizationAdminAccountsPages(arg0 *securityhub.ListOrganizationAdminAccountsInput, arg1 func(*securityhub.ListOrganizationAdminAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationAdminAccountsPages indicates an expected call of ListOrganizationAdminAccountsPages.
func (mr *MockSecurityHubAPIMockRecorder) ListOrganizationAdminAccountsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListOrganizationAdminAccountsPages), arg0, arg1)
}

// ListOrganizationAdminAccountsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListOrganizationAdminAccountsPagesWithContext(arg0 context.Context, arg1 *securityhub.ListOrganizationAdminAccountsInput, arg2 func(*securityhub.ListOrganizationAdminAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationAdminAccountsPagesWithContext indicates an expected call of ListOrganizationAdminAccountsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListOrganizationAdminAccountsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListOrganizationAdminAccountsPagesWithContext), varargs...)
}

// ListOrganizationAdminAccountsRequest mocks base method.
func (m *MockSecurityHubAPI) ListOrganizationAdminAccountsRequest(arg0 *securityhub.ListOrganizationAdminAccountsInput) (*request.Request, *securityhub.ListOrganizationAdminAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListOrganizationAdminAccountsOutput)
	return ret0, ret1
}

// ListOrganizationAdminAccountsRequest indicates an expected call of ListOrganizationAdminAccountsRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListOrganizationAdminAccountsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListOrganizationAdminAccountsRequest), arg0)
}

// ListOrganizationAdminAccountsWithContext mocks base method.
func (m *MockSecurityHubAPI) ListOrganizationAdminAccountsWithContext(arg0 context.Context, arg1 *securityhub.ListOrganizationAdminAccountsInput, arg2 ...request.Option) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListOrganizationAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationAdminAccountsWithContext indicates an expected call of ListOrganizationAdminAccountsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListOrganizationAdminAccountsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListOrganizationAdminAccountsWithContext), varargs...)
}

// ListSecurityControlDefinitions mocks base method.
func (m *MockSecurityHubAPI) ListSecurityControlDefinitions(arg0 *securityhub.ListSecurityControlDefinitionsInput) (*securityhub.ListSecurityControlDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityControlDefinitions", arg0)
	ret0, _ := ret[0].(*securityhub.ListSecurityControlDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityControlDefinitions indicates an expected call of ListSecurityControlDefinitions.
func (mr *MockSecurityHubAPIMockRecorder) ListSecurityControlDefinitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityControlDefinitions", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListSecurityControlDefinitions), arg0)
}

// ListSecurityControlDefinitionsPages mocks base method.
func (m *MockSecurityHubAPI) ListSecurityControlDefinitionsPages(arg0 *securityhub.ListSecurityControlDefinitionsInput, arg1 func(*securityhub.ListSecurityControlDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityControlDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityControlDefinitionsPages indicates an expected call of ListSecurityControlDefinitionsPages.
func (mr *MockSecurityHubAPIMockRecorder) ListSecurityControlDefinitionsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityControlDefinitionsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListSecurityControlDefinitionsPages), arg0, arg1)
}

// ListSecurityControlDefinitionsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListSecurityControlDefinitionsPagesWithContext(arg0 context.Context, arg1 *securityhub.ListSecurityControlDefinitionsInput, arg2 func(*securityhub.ListSecurityControlDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityControlDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityControlDefinitionsPagesWithContext indicates an expected call of ListSecurityControlDefinitionsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListSecurityControlDefinitionsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityControlDefinitionsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListSecurityControlDefinitionsPagesWithContext), varargs...)
}

// ListSecurityControlDefinitionsRequest mocks base method.
func (m *MockSecurityHubAPI) ListSecurityControlDefinitionsRequest(arg0 *securityhub.ListSecurityControlDefinitionsInput) (*request.Request, *securityhub.ListSecurityControlDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityControlDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListSecurityControlDefinitionsOutput)
	return ret0, ret1
}

// ListSecurityControlDefinitionsRequest indicates an expected call of ListSecurityControlDefinitionsRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListSecurityControlDefinitionsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityControlDefinitionsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListSecurityControlDefinitionsRequest), arg0)
}

// ListSecurityControlDefinitionsWithContext mocks base method.
func (m *MockSecurityHubAPI) ListSecurityControlDefinitionsWithContext(arg0 context.Context, arg1 *securityhub.ListSecurityControlDefinitionsInput, arg2 ...request.Option) (*securityhub.ListSecurityControlDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityControlDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListSecurityControlDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityControlDefinitionsWithContext indicates an expected call of ListSecurityControlDefinitionsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListSecurityControlDefinitionsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityControlDefinitionsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListSecurityControlDefinitionsWithContext), varargs...)
}

// ListStandardsControlAssociations mocks base method.
func (m *MockSecurityHubAPI) ListStandardsControlAssociations(arg0 *securityhub.ListStandardsControlAssociationsInput) (*securityhub.ListStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStandardsControlAssociations", arg0)
	ret0, _ := ret[0].(*securityhub.ListStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStandardsControlAssociations indicates an expected call of ListStandardsControlAssociations.
func (mr *MockSecurityHubAPIMockRecorder) ListStandardsControlAssociations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStandardsControlAssociations", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListStandardsControlAssociations), arg0)
}

// ListStandardsControlAssociationsPages mocks base method.
func (m *MockSecurityHubAPI) ListStandardsControlAssociationsPages(arg0 *securityhub.ListStandardsControlAssociationsInput, arg1 func(*securityhub.ListStandardsControlAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStandardsControlAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStandardsControlAssociationsPages indicates an expected call of ListStandardsControlAssociationsPages.
func (mr *MockSecurityHubAPIMockRecorder) ListStandardsControlAssociationsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStandardsControlAssociationsPages", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListStandardsControlAssociationsPages), arg0, arg1)
}

// ListStandardsControlAssociationsPagesWithContext mocks base method.
func (m *MockSecurityHubAPI) ListStandardsControlAssociationsPagesWithContext(arg0 context.Context, arg1 *securityhub.ListStandardsControlAssociationsInput, arg2 func(*securityhub.ListStandardsControlAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStandardsControlAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStandardsControlAssociationsPagesWithContext indicates an expected call of ListStandardsControlAssociationsPagesWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListStandardsControlAssociationsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStandardsControlAssociationsPagesWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListStandardsControlAssociationsPagesWithContext), varargs...)
}

// ListStandardsControlAssociationsRequest mocks base method.
func (m *MockSecurityHubAPI) ListStandardsControlAssociationsRequest(arg0 *securityhub.ListStandardsControlAssociationsInput) (*request.Request, *securityhub.ListStandardsControlAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStandardsControlAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListStandardsControlAssociationsOutput)
	return ret0, ret1
}

// ListStandardsControlAssociationsRequest indicates an expected call of ListStandardsControlAssociationsRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListStandardsControlAssociationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStandardsControlAssociationsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListStandardsControlAssociationsRequest), arg0)
}

// ListStandardsControlAssociationsWithContext mocks base method.
func (m *MockSecurityHubAPI) ListStandardsControlAssociationsWithContext(arg0 context.Context, arg1 *securityhub.ListStandardsControlAssociationsInput, arg2 ...request.Option) (*securityhub.ListStandardsControlAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStandardsControlAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListStandardsControlAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStandardsControlAssociationsWithContext indicates an expected call of ListStandardsControlAssociationsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListStandardsControlAssociationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStandardsControlAssociationsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListStandardsControlAssociationsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSecurityHubAPI) ListTagsForResource(arg0 *securityhub.ListTagsForResourceInput) (*securityhub.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*securityhub.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSecurityHubAPIMockRecorder) ListTagsForResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSecurityHubAPI) ListTagsForResourceRequest(arg0 *securityhub.ListTagsForResourceInput) (*request.Request, *securityhub.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSecurityHubAPIMockRecorder) ListTagsForResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSecurityHubAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *securityhub.ListTagsForResourceInput, arg2 ...request.Option) (*securityhub.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSecurityHubAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSecurityHubAPI) TagResource(arg0 *securityhub.TagResourceInput) (*securityhub.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*securityhub.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSecurityHubAPIMockRecorder) TagResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSecurityHubAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSecurityHubAPI) TagResourceRequest(arg0 *securityhub.TagResourceInput) (*request.Request, *securityhub.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSecurityHubAPIMockRecorder) TagResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSecurityHubAPI) TagResourceWithContext(arg0 context.Context, arg1 *securityhub.TagResourceInput, arg2 ...request.Option) (*securityhub.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSecurityHubAPIMockRecorder) TagResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSecurityHubAPI) UntagResource(arg0 *securityhub.UntagResourceInput) (*securityhub.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*securityhub.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSecurityHubAPIMockRecorder) UntagResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSecurityHubAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSecurityHubAPI) UntagResourceRequest(arg0 *securityhub.UntagResourceInput) (*request.Request, *securityhub.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSecurityHubAPIMockRecorder) UntagResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSecurityHubAPI) UntagResourceWithContext(arg0 context.Context, arg1 *securityhub.UntagResourceInput, arg2 ...request.Option) (*securityhub.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UntagResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateActionTarget mocks base method.
func (m *MockSecurityHubAPI) UpdateActionTarget(arg0 *securityhub.UpdateActionTargetInput) (*securityhub.UpdateActionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionTarget", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionTarget indicates an expected call of UpdateActionTarget.
func (mr *MockSecurityHubAPIMockRecorder) UpdateActionTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionTarget", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateActionTarget), arg0)
}

// UpdateActionTargetRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateActionTargetRequest(arg0 *securityhub.UpdateActionTargetInput) (*request.Request, *securityhub.UpdateActionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateActionTargetOutput)
	return ret0, ret1
}

// UpdateActionTargetRequest indicates an expected call of UpdateActionTargetRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateActionTargetRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionTargetRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateActionTargetRequest), arg0)
}

// UpdateActionTargetWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateActionTargetWithContext(arg0 context.Context, arg1 *securityhub.UpdateActionTargetInput, arg2 ...request.Option) (*securityhub.UpdateActionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateActionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateActionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionTargetWithContext indicates an expected call of UpdateActionTargetWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateActionTargetWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionTargetWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateActionTargetWithContext), varargs...)
}

// UpdateFindingAggregator mocks base method.
func (m *MockSecurityHubAPI) UpdateFindingAggregator(arg0 *securityhub.UpdateFindingAggregatorInput) (*securityhub.UpdateFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindingAggregator", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindingAggregator indicates an expected call of UpdateFindingAggregator.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingAggregator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingAggregator", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingAggregator), arg0)
}

// UpdateFindingAggregatorRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateFindingAggregatorRequest(arg0 *securityhub.UpdateFindingAggregatorInput) (*request.Request, *securityhub.UpdateFindingAggregatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindingAggregatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateFindingAggregatorOutput)
	return ret0, ret1
}

// UpdateFindingAggregatorRequest indicates an expected call of UpdateFindingAggregatorRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingAggregatorRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingAggregatorRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingAggregatorRequest), arg0)
}

// UpdateFindingAggregatorWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateFindingAggregatorWithContext(arg0 context.Context, arg1 *securityhub.UpdateFindingAggregatorInput, arg2 ...request.Option) (*securityhub.UpdateFindingAggregatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFindingAggregatorWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateFindingAggregatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindingAggregatorWithContext indicates an expected call of UpdateFindingAggregatorWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingAggregatorWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingAggregatorWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingAggregatorWithContext), varargs...)
}

// UpdateFindings mocks base method.
func (m *MockSecurityHubAPI) UpdateFindings(arg0 *securityhub.UpdateFindingsInput) (*securityhub.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindings", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindings indicates an expected call of UpdateFindings.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindings", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindings), arg0)
}

// UpdateFindingsRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateFindingsRequest(arg0 *securityhub.UpdateFindingsInput) (*request.Request, *securityhub.UpdateFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateFindingsOutput)
	return ret0, ret1
}

// UpdateFindingsRequest indicates an expected call of UpdateFindingsRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingsRequest), arg0)
}

// UpdateFindingsWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateFindingsWithContext(arg0 context.Context, arg1 *securityhub.UpdateFindingsInput, arg2 ...request.Option) (*securityhub.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindingsWithContext indicates an expected call of UpdateFindingsWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateFindingsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateFindingsWithContext), varargs...)
}

// UpdateInsight mocks base method.
func (m *MockSecurityHubAPI) UpdateInsight(arg0 *securityhub.UpdateInsightInput) (*securityhub.UpdateInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInsight", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInsight indicates an expected call of UpdateInsight.
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsight", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsight), arg0)
}

// UpdateInsightRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateInsightRequest(arg0 *securityhub.UpdateInsightInput) (*request.Request, *securityhub.UpdateInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateInsightOutput)
	return ret0, ret1
}

// UpdateInsightRequest indicates an expected call of UpdateInsightRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsightRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsightRequest), arg0)
}

// UpdateInsightWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateInsightWithContext(arg0 context.Context, arg1 *securityhub.UpdateInsightInput, arg2 ...request.Option) (*securityhub.UpdateInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInsightWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInsightWithContext indicates an expected call of UpdateInsightWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateInsightWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInsightWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateInsightWithContext), varargs...)
}

// UpdateOrganizationConfiguration mocks base method.
func (m *MockSecurityHubAPI) UpdateOrganizationConfiguration(arg0 *securityhub.UpdateOrganizationConfigurationInput) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfiguration indicates an expected call of UpdateOrganizationConfiguration.
func (mr *MockSecurityHubAPIMockRecorder) UpdateOrganizationConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfiguration", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateOrganizationConfiguration), arg0)
}

// UpdateOrganizationConfigurationRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateOrganizationConfigurationRequest(arg0 *securityhub.UpdateOrganizationConfigurationInput) (*request.Request, *securityhub.UpdateOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateOrganizationConfigurationOutput)
	return ret0, ret1
}

// UpdateOrganizationConfigurationRequest indicates an expected call of UpdateOrganizationConfigurationRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateOrganizationConfigurationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateOrganizationConfigurationRequest), arg0)
}

// UpdateOrganizationConfigurationWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateOrganizationConfigurationWithContext(arg0 context.Context, arg1 *securityhub.UpdateOrganizationConfigurationInput, arg2 ...request.Option) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfigurationWithContext indicates an expected call of UpdateOrganizationConfigurationWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateOrganizationConfigurationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateOrganizationConfigurationWithContext), varargs...)
}

// UpdateSecurityHubConfiguration mocks base method.
func (m *MockSecurityHubAPI) UpdateSecurityHubConfiguration(arg0 *securityhub.UpdateSecurityHubConfigurationInput) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityHubConfiguration", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateSecurityHubConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityHubConfiguration indicates an expected call of UpdateSecurityHubConfiguration.
func (mr *MockSecurityHubAPIMockRecorder) UpdateSecurityHubConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityHubConfiguration", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateSecurityHubConfiguration), arg0)
}

// UpdateSecurityHubConfigurationRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateSecurityHubConfigurationRequest(arg0 *securityhub.UpdateSecurityHubConfigurationInput) (*request.Request, *securityhub.UpdateSecurityHubConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityHubConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateSecurityHubConfigurationOutput)
	return ret0, ret1
}

// UpdateSecurityHubConfigurationRequest indicates an expected call of UpdateSecurityHubConfigurationRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateSecurityHubConfigurationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityHubConfigurationRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateSecurityHubConfigurationRequest), arg0)
}

// UpdateSecurityHubConfigurationWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateSecurityHubConfigurationWithContext(arg0 context.Context, arg1 *securityhub.UpdateSecurityHubConfigurationInput, arg2 ...request.Option) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecurityHubConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateSecurityHubConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityHubConfigurationWithContext indicates an expected call of UpdateSecurityHubConfigurationWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateSecurityHubConfigurationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityHubConfigurationWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateSecurityHubConfigurationWithContext), varargs...)
}

// UpdateStandardsControl mocks base method.
func (m *MockSecurityHubAPI) UpdateStandardsControl(arg0 *securityhub.UpdateStandardsControlInput) (*securityhub.UpdateStandardsControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStandardsControl", arg0)
	ret0, _ := ret[0].(*securityhub.UpdateStandardsControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStandardsControl indicates an expected call of UpdateStandardsControl.
func (mr *MockSecurityHubAPIMockRecorder) UpdateStandardsControl(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStandardsControl", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateStandardsControl), arg0)
}

// UpdateStandardsControlRequest mocks base method.
func (m *MockSecurityHubAPI) UpdateStandardsControlRequest(arg0 *securityhub.UpdateStandardsControlInput) (*request.Request, *securityhub.UpdateStandardsControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStandardsControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*securityhub.UpdateStandardsControlOutput)
	return ret0, ret1
}

// UpdateStandardsControlRequest indicates an expected call of UpdateStandardsControlRequest.
func (mr *MockSecurityHubAPIMockRecorder) UpdateStandardsControlRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStandardsControlRequest", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateStandardsControlRequest), arg0)
}

// UpdateStandardsControlWithContext mocks base method.
func (m *MockSecurityHubAPI) UpdateStandardsControlWithContext(arg0 context.Context, arg1 *securityhub.UpdateStandardsControlInput, arg2 ...request.Option) (*securityhub.UpdateStandardsControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStandardsControlWithContext", varargs...)
	ret0, _ := ret[0].(*securityhub.UpdateStandardsControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStandardsControlWithContext indicates an expected call of UpdateStandardsControlWithContext.
func (mr *MockSecurityHubAPIMockRecorder) UpdateStandardsControlWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStandardsControlWithContext", reflect.TypeOf((*MockSecurityHubAPI)(nil).UpdateStandardsControlWithContext), varargs...)
}
