// Code generated by MockGen. DO NOT EDIT.
// Source: ca.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/ca.go -source ca.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "crypto"
	x509 "crypto/x509"
	reflect "reflect"

	mtls "github.com/stackrox/rox/pkg/mtls"
	gomock "go.uber.org/mock/gomock"
)

// MockCA is a mock of CA interface.
type MockCA struct {
	ctrl     *gomock.Controller
	recorder *MockCAMockRecorder
}

// MockCAMockRecorder is the mock recorder for MockCA.
type MockCAMockRecorder struct {
	mock *MockCA
}

// NewMockCA creates a new mock instance.
func NewMockCA(ctrl *gomock.Controller) *MockCA {
	mock := &MockCA{ctrl: ctrl}
	mock.recorder = &MockCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCA) EXPECT() *MockCAMockRecorder {
	return m.recorder
}

// CertPEM mocks base method.
func (m *MockCA) CertPEM() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertPEM")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CertPEM indicates an expected call of CertPEM.
func (mr *MockCAMockRecorder) CertPEM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertPEM", reflect.TypeOf((*MockCA)(nil).CertPEM))
}

// CertPool mocks base method.
func (m *MockCA) CertPool() *x509.CertPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertPool")
	ret0, _ := ret[0].(*x509.CertPool)
	return ret0
}

// CertPool indicates an expected call of CertPool.
func (mr *MockCAMockRecorder) CertPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertPool", reflect.TypeOf((*MockCA)(nil).CertPool))
}

// Certificate mocks base method.
func (m *MockCA) Certificate() *x509.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certificate")
	ret0, _ := ret[0].(*x509.Certificate)
	return ret0
}

// Certificate indicates an expected call of Certificate.
func (mr *MockCAMockRecorder) Certificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockCA)(nil).Certificate))
}

// CheckProperties mocks base method.
func (m *MockCA) CheckProperties() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProperties")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckProperties indicates an expected call of CheckProperties.
func (mr *MockCAMockRecorder) CheckProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProperties", reflect.TypeOf((*MockCA)(nil).CheckProperties))
}

// IssueCertForSubject mocks base method.
func (m *MockCA) IssueCertForSubject(subj mtls.Subject, opts ...mtls.IssueCertOption) (*mtls.IssuedCert, error) {
	m.ctrl.T.Helper()
	varargs := []any{subj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueCertForSubject", varargs...)
	ret0, _ := ret[0].(*mtls.IssuedCert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertForSubject indicates an expected call of IssueCertForSubject.
func (mr *MockCAMockRecorder) IssueCertForSubject(subj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertForSubject", reflect.TypeOf((*MockCA)(nil).IssueCertForSubject), varargs...)
}

// KeyPEM mocks base method.
func (m *MockCA) KeyPEM() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPEM")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// KeyPEM indicates an expected call of KeyPEM.
func (mr *MockCAMockRecorder) KeyPEM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPEM", reflect.TypeOf((*MockCA)(nil).KeyPEM))
}

// PrivateKey mocks base method.
func (m *MockCA) PrivateKey() crypto.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKey")
	ret0, _ := ret[0].(crypto.PrivateKey)
	return ret0
}

// PrivateKey indicates an expected call of PrivateKey.
func (mr *MockCAMockRecorder) PrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKey", reflect.TypeOf((*MockCA)(nil).PrivateKey))
}

// ValidateAndExtractSubject mocks base method.
func (m *MockCA) ValidateAndExtractSubject(cert *x509.Certificate) (mtls.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndExtractSubject", cert)
	ret0, _ := ret[0].(mtls.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndExtractSubject indicates an expected call of ValidateAndExtractSubject.
func (mr *MockCAMockRecorder) ValidateAndExtractSubject(cert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndExtractSubject", reflect.TypeOf((*MockCA)(nil).ValidateAndExtractSubject), cert)
}
