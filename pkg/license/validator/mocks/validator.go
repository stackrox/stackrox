// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	licenseproto "github.com/stackrox/rox/generated/shared/license"
	validator "github.com/stackrox/rox/pkg/license/validator"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// RegisterSigningKey mocks base method.
func (m *MockValidator) RegisterSigningKey(algo string, raw []byte, restrictions *validator.SigningKeyRestrictions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSigningKey", algo, raw, restrictions)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSigningKey indicates an expected call of RegisterSigningKey.
func (mr *MockValidatorMockRecorder) RegisterSigningKey(algo, raw, restrictions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSigningKey", reflect.TypeOf((*MockValidator)(nil).RegisterSigningKey), algo, raw, restrictions)
}

// ValidateLicenseKey mocks base method.
func (m *MockValidator) ValidateLicenseKey(licenseKey string) (*licenseproto.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLicenseKey", licenseKey)
	ret0, _ := ret[0].(*licenseproto.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateLicenseKey indicates an expected call of ValidateLicenseKey.
func (mr *MockValidatorMockRecorder) ValidateLicenseKey(licenseKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLicenseKey", reflect.TypeOf((*MockValidator)(nil).ValidateLicenseKey), licenseKey)
}
