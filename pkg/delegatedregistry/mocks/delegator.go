// Code generated by MockGen. DO NOT EDIT.
// Source: delegator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
)

// MockDelegator is a mock of Delegator interface.
type MockDelegator struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatorMockRecorder
}

// MockDelegatorMockRecorder is the mock recorder for MockDelegator.
type MockDelegatorMockRecorder struct {
	mock *MockDelegator
}

// NewMockDelegator creates a new mock instance.
func NewMockDelegator(ctrl *gomock.Controller) *MockDelegator {
	mock := &MockDelegator{ctrl: ctrl}
	mock.recorder = &MockDelegatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegator) EXPECT() *MockDelegatorMockRecorder {
	return m.recorder
}

// DelegateEnrichImage mocks base method.
func (m *MockDelegator) DelegateEnrichImage(ctx context.Context, image *storage.Image, clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateEnrichImage", ctx, image, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateEnrichImage indicates an expected call of DelegateEnrichImage.
func (mr *MockDelegatorMockRecorder) DelegateEnrichImage(ctx, image, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateEnrichImage", reflect.TypeOf((*MockDelegator)(nil).DelegateEnrichImage), ctx, image, clusterID)
}

// GetDelegateClusterID mocks base method.
func (m *MockDelegator) GetDelegateClusterID(ctx context.Context, image *storage.Image) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegateClusterID", ctx, image)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDelegateClusterID indicates an expected call of GetDelegateClusterID.
func (mr *MockDelegatorMockRecorder) GetDelegateClusterID(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegateClusterID", reflect.TypeOf((*MockDelegator)(nil).GetDelegateClusterID), ctx, image)
}
