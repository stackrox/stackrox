// Code generated by MockGen. DO NOT EDIT.
// Source: delegator.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/delegator.go -source delegator.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDelegator is a mock of Delegator interface.
type MockDelegator struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatorMockRecorder
}

// MockDelegatorMockRecorder is the mock recorder for MockDelegator.
type MockDelegatorMockRecorder struct {
	mock *MockDelegator
}

// NewMockDelegator creates a new mock instance.
func NewMockDelegator(ctrl *gomock.Controller) *MockDelegator {
	mock := &MockDelegator{ctrl: ctrl}
	mock.recorder = &MockDelegatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegator) EXPECT() *MockDelegatorMockRecorder {
	return m.recorder
}

// DelegateScanImage mocks base method.
func (m *MockDelegator) DelegateScanImage(ctx context.Context, imgName *storage.ImageName, clusterID string, force bool) (*storage.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateScanImage", ctx, imgName, clusterID, force)
	ret0, _ := ret[0].(*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegateScanImage indicates an expected call of DelegateScanImage.
func (mr *MockDelegatorMockRecorder) DelegateScanImage(ctx, imgName, clusterID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateScanImage", reflect.TypeOf((*MockDelegator)(nil).DelegateScanImage), ctx, imgName, clusterID, force)
}

// GetDelegateClusterID mocks base method.
func (m *MockDelegator) GetDelegateClusterID(ctx context.Context, imgName *storage.ImageName) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegateClusterID", ctx, imgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDelegateClusterID indicates an expected call of GetDelegateClusterID.
func (mr *MockDelegatorMockRecorder) GetDelegateClusterID(ctx, imgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegateClusterID", reflect.TypeOf((*MockDelegator)(nil).GetDelegateClusterID), ctx, imgName)
}

// ValidateCluster mocks base method.
func (m *MockDelegator) ValidateCluster(clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCluster", clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCluster indicates an expected call of ValidateCluster.
func (mr *MockDelegatorMockRecorder) ValidateCluster(clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCluster", reflect.TypeOf((*MockDelegator)(nil).ValidateCluster), clusterID)
}
