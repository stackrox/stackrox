// Code generated by MockGen. DO NOT EDIT.
// Source: cred_manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/cred_manager.go -source cred_manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	google "golang.org/x/oauth2/google"
)

// MockCredentialsManager is a mock of CredentialsManager interface.
type MockCredentialsManager struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsManagerMockRecorder
}

// MockCredentialsManagerMockRecorder is the mock recorder for MockCredentialsManager.
type MockCredentialsManagerMockRecorder struct {
	mock *MockCredentialsManager
}

// NewMockCredentialsManager creates a new mock instance.
func NewMockCredentialsManager(ctrl *gomock.Controller) *MockCredentialsManager {
	mock := &MockCredentialsManager{ctrl: ctrl}
	mock.recorder = &MockCredentialsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsManager) EXPECT() *MockCredentialsManagerMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockCredentialsManager) GetCredentials(ctx context.Context) (*google.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx)
	ret0, _ := ret[0].(*google.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsManagerMockRecorder) GetCredentials(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialsManager)(nil).GetCredentials), ctx)
}

// Start mocks base method.
func (m *MockCredentialsManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCredentialsManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCredentialsManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockCredentialsManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCredentialsManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCredentialsManager)(nil).Stop))
}
