// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/handler.go -source handler.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	types "github.com/stackrox/rox/pkg/cloudproviders/gcp/types"
	gomock "go.uber.org/mock/gomock"
	google "golang.org/x/oauth2/google"
)

// MockClientHandler is a mock of ClientHandler interface.
type MockClientHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClientHandlerMockRecorder
}

// MockClientHandlerMockRecorder is the mock recorder for MockClientHandler.
type MockClientHandlerMockRecorder struct {
	mock *MockClientHandler
}

// NewMockClientHandler creates a new mock instance.
func NewMockClientHandler(ctrl *gomock.Controller) *MockClientHandler {
	mock := &MockClientHandler{ctrl: ctrl}
	mock.recorder = &MockClientHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientHandler) EXPECT() *MockClientHandlerMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientHandler) GetClient() (*storage.Client, types.DoneFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*storage.Client)
	ret1, _ := ret[1].(types.DoneFunc)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientHandlerMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientHandler)(nil).GetClient))
}

// UpdateClient mocks base method.
func (m *MockClientHandler) UpdateClient(ctx context.Context, creds *google.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, creds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientHandlerMockRecorder) UpdateClient(ctx, creds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientHandler)(nil).UpdateClient), ctx, creds)
}
