defs: |
  def authForCollector:
    (container(.daemonsets.collector; "collector") | .image | sub("/.*$"; "")) as $collectorRegistry |
      .secrets["secured-cluster-services-collector"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
        | .["https://" + (if ($collectorRegistry == "docker.io") then "index.docker.io/v1/" else $collectorRegistry end)]
        | .auth | @base64d;

  def authForMain:
      (container(.deployments.sensor; "sensor") | .image | sub("/.*$"; "")) as $mainRegistry |
        .secrets["secured-cluster-services-main"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
          | .["https://" + (if ($mainRegistry == "docker.io") then "index.docker.io/v1/" else $mainRegistry end)]
          | .auth | @base64d;

expect: |
  # Ensure that default/legacy service accounts are always referenced in the correct fashion in the non-error case

  assumeThat(.error == null) | .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "stackrox")
  assumeThat(.error == null) | .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "collector-stackrox")

  assumeThat(.error == null) | .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "stackrox")
  assumeThat(.error == null) | [.serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "stackrox")
  assumeThat(.error == null) | [.serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)

  # Ensure that newly created secrets are always referenced in the correct fashion in the non-error case.
  assumeThat(.error == null) | .serviceaccounts["collector"] | [.imagePullSecrets[] |
    select(.name == "secured-cluster-services-main" or .name == "secured-cluster-services-collector")] |
    assertThat(length == 2)
  assumeThat(.error == null) | .serviceaccounts["sensor"] | .imagePullSecrets[] |
    select(.name == "secured-cluster-services-main")
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | .imagePullSecrets[] |
    select(.name == "secured-cluster-services-main")

tests:
- name: "with no image pull secret creation"
  expect: |
    .secrets?["secured-cluster-services-main"]? | assertThat(. == null)
    .secrets?["secured-cluster-services-collector"]? | assertThat(. == null)
  tests:
  - name: "with allowNone=true"
    set:
      imagePullSecrets.allowNone: true
  - name: "with default setting of allowNone=false"
    tests:
    - name: "should fail with no extra secrets"
      expectError: true
    - name: "should succeed with useExisting"
      expect: |
        .serviceaccounts[] | [.imagePullSecrets[] | select(.name == "extra-secret1" or .name == "extra-secret2")]
          | assertThat(length == 2)
      tests:
      - name: as JSON list
        set:
          imagePullSecrets.useExisting: ["extra-secret1", "extra-secret2"]

      - name: as semicolon-delimited list string
        set:
          imagePullSecrets.useExisting: "extra-secret1; extra-secret2 "

- name: "with image pull secret creation"

  expect: |
    .secrets["secured-cluster-services-main"] | assertThat(. != null)
    .secrets["secured-cluster-services-collector"] | assertThat(. != null)
    .serviceaccounts[] | [.imagePullSecrets[] | select(.name == "secured-cluster-services-main")] | assertThat(length == 1)
    .serviceaccounts.collector | [.imagePullSecrets[] | select(.name == "secured-cluster-services-collector")]
      | assertThat(length == 1)
  tests:
  - name: "with username and password specified"
    values:
      imagePullSecrets:
        username: foo
        password: bar
    expect: |
      authForMain | assertThat(. == "foo:bar")
      authForCollector | assertThat(. == "foo:bar")
    tests:
    - name: "with default registry"
    - name: "with custom default registry"
      set:
        image.registry: my.registry.io
    - name: "with custom main registry"
      set:
        image.main.registry: my.registry.io
    - name: "with custom collector registry"
      set:
        image.collector.registry: my.collector-registry.io
    - name: "with docker registry"
      set:
        image.registry: docker.io/stackrox
  - name: "with empty password"
    values:
      imagePullSecrets:
        username: foo
        password: ""
    expect: |
      authForMain | assertThat(. == "foo:")
      authForCollector | assertThat(. == "foo:")

- name: "default image pull secret are referenced in service accounts"
  values:
    imagePullSecrets:
      allowNone: true
  expect: |
    .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "stackrox")
    .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "collector-stackrox")

    .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "stackrox")
    [.serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)
    .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "stackrox")
    [.serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "collector-stackrox")] | assertThat(length == 0)

- name: "additional image pull secret are referenced in service accounts"
  values:
    imagePullSecrets:
      useExisting: custom-ips
  expect: |
    .serviceaccounts["collector"] | .imagePullSecrets[] | select(.name == "custom-ips")
    .serviceaccounts["sensor"] | .imagePullSecrets[] | select(.name == "custom-ips")
    .serviceaccounts["admission-control"] | .imagePullSecrets[] | select(.name == "custom-ips")
