defs: |
  def authForCollector:
    (container(.daemonsets.collector; "collector") | .image | sub("/.*$"; "")) as $collectorRegistry |
      .secrets["secured-cluster-services-collector"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
        | .["https://" + (if ($collectorRegistry == "docker.io") then "index.docker.io/v1/" else $collectorRegistry end)]
        | .auth | @base64d;

  def authForMain:
      (container(.deployments.sensor; "sensor") | .image | sub("/.*$"; "")) as $mainRegistry |
        .secrets["secured-cluster-services-main"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
          | .["https://" + (if ($mainRegistry == "docker.io") then "index.docker.io/v1/" else $mainRegistry end)]
          | .auth | @base64d;

expect: |
  # Ensure that default/legacy service accounts are always referenced in the correct fashion in the non-error case

  assumeThat(.error == null) | .serviceaccounts["collector"] | saRefersTo(["stackrox", "collector-stackrox"])
  assumeThat(.error == null) | .serviceaccounts["sensor"] | saRefersTo(["stackrox"])
  assumeThat(.error == null) | .serviceaccounts["sensor"] | saNotRefersTo(["collector-stackrox"])
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | saRefersTo(["stackrox"])
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | saNotRefersTo(["collector-stackrox"])

  # Ensure that newly created secrets are always referenced in the correct fashion in the non-error case.

  assumeThat(.error == null) | .serviceaccounts["collector"]
    | saRefersTo(["secured-cluster-services-main", "secured-cluster-services-collector"])
  assumeThat(.error == null) | .serviceaccounts["sensor"] | saRefersTo(["secured-cluster-services-main"])
  assumeThat(.error == null) | .serviceaccounts["sensor"] | saNotRefersTo(["secured-cluster-services-collector", "collector-stackrox"])
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | saRefersTo(["secured-cluster-services-main"])
  assumeThat(.error == null) | .serviceaccounts["admission-control"] | saNotRefersTo(["secured-cluster-services-collector", "collector-stackrox"])

tests:
- name: "with no image pull secret creation"
  expect: |
    .secrets?["secured-cluster-services-main"]? | assertThat(. == null)
    .secrets?["secured-cluster-services-collector"]? | assertThat(. == null)
  tests:
  - name: "works with allowNone=true"
    set:
      imagePullSecrets.allowNone: true
  - name: "with default setting of allowNone=false"
    tests:
    - name: "should fail with no extra secrets"
      expectError: true
    - name: "should succeed with useExisting"
      expect: |
        .serviceaccounts[] | saRefersTo(["extra-secret1", "extra-secret2"])
      tests:
      - name: as JSON list
        set:
          imagePullSecrets.useExisting: ["extra-secret1", "extra-secret2"]

      - name: as semicolon-delimited list string
        set:
          imagePullSecrets.useExisting: "extra-secret1; extra-secret2 "

- name: "with image pull secret creation (username specified)"
  values:
    imagePullSecrets:
      username: foo
  expect: |
    .secrets["secured-cluster-services-main"] | assertThat(. != null)
    .secrets["secured-cluster-services-collector"] | assertThat(. != null)
    .serviceaccounts[] | saRefersTo(["secured-cluster-services-main"])
    .serviceaccounts["collector"] | saRefersTo(["secured-cluster-services-collector"])
  tests:
  - name: "with password specified too"
    values:
      imagePullSecrets:
        password: bar
    expect: |
      authForMain | assertThat(. == "foo:bar")
      authForCollector | assertThat(. == "foo:bar")
    tests:
    - name: "with default registry"
    - name: "with custom default registry"
      set:
        image.registry: my.registry.io
    - name: "with custom main registry"
      set:
        image.main.registry: my.registry.io
    - name: "with custom collector registry"
      set:
        image.collector.registry: my.collector-registry.io
    - name: "with docker registry"
      set:
        image.registry: docker.io/stackrox
  - name: "with empty password"
    values:
      imagePullSecrets:
        password: ""
    expect: |
      authForMain | assertThat(. == "foo:")
      authForCollector | assertThat(. == "foo:")
  - name: "useExisting secrets are referenced, if specified"
    set:
      imagePullSecrets.useExisting: ["extra-secret1", "extra-secret2"]
    expect: |
      .serviceaccounts[] | saRefersTo(["extra-secret1", "extra-secret2"])
