values:
  imagePullSecrets:
    allowNone: true
set:
  createSecrets: null  # reset
tests:
- name: "with no certificate data"
  expect: |
    # We should _never_ create secrets in this case.
    .secrets["sensor-tls"] | assertThat(. == null)
    .secrets["collector-tls"] | assertThat(. == null)
    .secrets["admission-control-tls"] | assertThat(. == null)
  tests:
  - name: "on install"
    tests:
    - name: "should fail by default"
      expectError: true
    - name: "should succeed (but not create secret) with createSecrets=false"
      set:
        createSecrets: false
  - name: "on upgrade"
    release:
      isInstall: false
      isUpgrade: true
    tests:
    - name: "should succeed (but not create secrets) by default"
    - name: "should fail with createSecrets=true"
      set:
        createSecrets: true
      expectError: true
- name: "with some certificate data"
  values:
    ca:
      cert: "CA cert"
    sensor:
      serviceTLS:
        cert: "sensor cert"
        key: "sensor key"
  defs: |
    def verifyTLSSecret(serviceName):
      .secrets[serviceName + "-tls"].stringData | [
        (.["ca.pem"] | assertThat(. == "CA cert\n")),
        (.[serviceName + "-cert.pem"] | assertThat(. == serviceName + " cert\n")),
        (.[serviceName + "-key.pem"] | assertThat(. == serviceName + " key\n"))
      ][];

  tests:
  - name: "on install"
    tests:
    - name: "should fail by default"
      expectError: true
    - name: "should succeed with createSecrets=false and not create any secrets"
      set:
        createSecrets: false
      expect: |
        .secrets["sensor-tls"] | assertThat(. == null)
        .secrets["collector-tls"] | assertThat(. == null)
        .secrets["admission-control-tls"] | assertThat(. == null)
    - name: "should partially create secrets on upgrade"
      release:
        isInstall: false
        isUpgrade: true
      expect: |
        verifyTLSSecret("sensor")
        .secrets["collector-tls"] | assertThat(. == null)
        .secrets["admission-control-tls"] | assertThat(. == null)
    - name: "should create TLS secrets with rhacs.redhat.com/tls=true"
      release:
        isInstall: true
      values:
        collector:
          serviceTLS:
            cert: "collector cert"
            key: "collector key"
        admissionControl:
          serviceTLS:
            cert: "admission control cert"
            key: "admission control key"
        createSecret: true
      expect: |
        assertThat(.secrets["sensor-tls"].metadata.labels["rhacs.redhat.com/tls"] == "true")
        assertThat(.secrets["collector-tls"].metadata.labels["rhacs.redhat.com/tls"] == "true")
        assertThat(.secrets["admission-control-tls"].metadata.labels["rhacs.redhat.com/tls"] == "true")
