values:
  imagePullSecrets:
    allowNone: true
server:
  availableSchemas:
  - openshift-4.1.0
  - com.coreos
tests:
- name: "When enabled (legacy)"
  set:
    enableOpenShiftMonitoring: true
    env.openshift: 4
  tests: &enabled-test
    - name: "resources are created for prometheus-operator"
      expect: |
        .roles["secured-cluster-prometheus-k8s"] | assertThat(. != null)
        .rolebindings["secured-cluster-prometheus-k8s"] | assertThat(. != null)
        .rolebindings["rhacs-sensor-auth-reader-stackrox"] | assertThat(. != null)
        .servicemonitors["sensor-monitor-stackrox"] | [
            assertThat(.metadata.namespace == "openshift-monitoring"),
            assertThat(.spec.endpoints[].port == "monitoring-tls")
          ]

    - name: "secure metrics endpoint is enabled"
      expect: |
        .deployments.sensor.spec.template.spec.containers[0].env[] |
          select(.name == "ROX_ENABLE_SECURE_METRICS") | assertThat(.value == "true")
        .deployments.sensor.spec.template.spec.containers[0].ports[] |
          select(.name == "monitoring-tls") | assertThat(.containerPort == 9091)
        .deployments.sensor.spec.template.spec.containers[0].volumeMounts[] |
          select(.name == "monitoring-tls") | assertThat(.mountPath == "/run/secrets/stackrox.io/monitoring-tls")
        .services.sensor.spec.ports[] | select(.name == "monitoring-tls") | [
            assertThat(.targetPort == "monitoring-tls"),
            assertThat(.port == 9091)
          ]
        .networkpolicys["sensor-monitoring-tls"] | assertThat(. != null)

- name: "When enabled"
  set:
    monitoring.openshift.enabled: true
    env.openshift: 4
  tests: *enabled-test

- name: "When enabled via default value"
  set:
    env.openshift: 4
  tests: *enabled-test

- name: "When disabled"
  set:
    monitoring.openshift.enabled: false
    env.openshift: 4
  tests: &disabled-test
    - name: "resources are not created for prometheus-operator"
      expect: |
        .roles["secured-cluster-prometheus-k8s"] | assertThat(. == null)
        .rolebindings["secured-cluster-prometheus-k8s"] | assertThat(. == null)
        .rolebindings["rhacs-sensor-auth-reader-stackrox"] | assertThat(. == null)
        .servicemonitors["sensor-monitor-stackrox"] | assertThat(. == null)

    - name: "secure metrics endpoint is disabled"
      expect: |
        .networkpolicys["sensor-monitoring-tls"] | assertThat(. == null)

- name: "Disable override when on non-OpenShift environment"
  set:
    monitoring.openshift.enabled: true
    env.openshift: false
  tests: *disabled-test

- name: "Disable override when on explicit OpenShift 3 environment"
  set:
    monitoring.openshift.enabled: true
    env.openshift: 3
  tests: *disabled-test

- name: "Disable override with default value when on explicit OpenShift 3 environment"
  set:
    env.openshift: 3
  tests: *disabled-test

- name: "Disable override when on auto-detected OpenShift 3 environment"
  set:
    monitoring.openshift.enabled: true
  server:
    visibleSchemas:
      - openshift-3.11.0
  capabilities:
    kubeVersion:
      version: "v1.11.0"
  tests: *disabled-test

- name: "Disable override when on non-OpenShift environment (legacy)"
  set:
    enableOpenShiftMonitoring: true
    env.openshift: false
  tests: *disabled-test

- name: "Disable override when on explicit OpenShift 3 environment (legacy)"
  set:
    enableOpenShiftMonitoring: true
    env.openshift: 3
  tests: *disabled-test

- name: "Disable override when on auto-detected OpenShift 3 environment (legacy)"
  set:
    enableOpenShiftMonitoring: true
  server:
    visibleSchemas:
      - openshift-3.11.0
  capabilities:
    kubeVersion:
      version: "v1.11.0"
  tests: *disabled-test
