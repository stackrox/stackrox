values:
  monitoring:
    openshift:
      enabled: false
server:
  visibleSchemas:
  - openshift-4.1.0
  availableSchemas:
  - openshift-4.1.0
tests:
- name: "scanner v4 indexer mounts additional-ca-sensor secret"
  set:
    imagePullSecrets.allowNone: true
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-indexer"].spec.template.spec.volumes[] | select(.name == "additional-ca-volume") | assertThat(.secret.secretName == "additional-ca-sensor")
    container(.deployments["scanner-v4-indexer"]; "indexer") | .volumeMounts[] | select(.name == "additional-ca-volume") | assertThat(. != null)
- name: "scanner v4 with default settings with indexer enabled"
  set:
    imagePullSecrets.allowNone: true
    scannerV4.disable: false
  expect: |
    container(.deployments["scanner-v4-indexer"]; "indexer") | assertThat (. != null)
    envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
  tests:
  - name: "on openshift 4"
    set:
      env.openshift: 4
  - name: "on openshift 3"
    set:
      env.openshift: 3

- name: "scanner V4 disabled should not be installed by default"
  set:
    imagePullSecrets.allowNone: true
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. == null)
    .deployments["scanner-v4-db"] | assertThat(. == null)

- name: "scanner V4 enabled should only deploy indexer and db"
  set:
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-matcher"] | assertThat(. == null)
    .deployments["scanner-v4-db"] | assertThat(. != null)

- name: "no matcher resources should exist"
  set:
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    .deployments["scanner-v4-matcher"] | assertThat(. == null)
    .secrets["scanner-v4-matcher-tls"] | assertThat(. == null)
    .configmaps["scanner-v4-matcher-config"] | assertThat(. == null)
    .networkpolicys["scanner-v4-matcher"] | assertThat(. == null)
    .services["scanner-v4-matcher"] | assertThat(. == null)
    .horizontalpodautoscalers["scanner-v4-matcher"] | assertThat(. == null)

- name: "scanner can override image config"
  set:
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    container(.deployments["scanner-v4-indexer"]; "indexer") | assertThat(.image == "custom.io/custom-scanner:1.2.3")
    container(.deployments["scanner-v4-db"]; "db") | assertThat(.image == "custom.io/custom-scanner-db:1.2.3")
  tests:
  - name: "with fullref"
    values:
      image:
        scannerV4:
          fullRef: "custom.io/custom-scanner:1.2.3"
        scannerV4DB:
          fullRef: "custom.io/custom-scanner-db:1.2.3"
  - name: "with separate parts"
    values:
      image:
        scannerV4:
          tag: 1.2.3
          registry: custom.io
          name: custom-scanner
        scannerV4DB:
          tag: 1.2.3
          registry: custom.io
          name: custom-scanner-db

- name: "scanner V4 service account can access image pull secrets"
  server:
    objects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: stackrox
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: stackrox-scanner
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: stackrox-scanner-v4
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: collector-stackrox
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: secured-cluster-services-main
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: secured-cluster-services-collector
        namespace: stackrox
  set:
    scannerV4.disable: false
  expect: |
    assumeThat(.error == null) | .serviceaccounts["scanner-v4"] | saRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner-v4"])
    assumeThat(.error == null) | .serviceaccounts["scanner-v4"] | saNotRefersTo(["secured-cluster-services-collector", "collector-stackrox"])
  tests:
  - name: "when authenticating in image registry with user and password"
    set:
      imagePullSecrets.username: "imagePullUser"
      imagePullSecrets.password: "imagePullPassword"
    expect: |
      .serviceaccounts["scanner-v4"] | saOnlyRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner-v4"])
      .secrets["secured-cluster-services-main"] | assertThat(. != null)
  - name: "when username/password are not provided, no secret is created"
    expect: .secrets["secured-cluster-services-main"] | assertThat(. == null)
    tests:
    - name: "by default (allowNone is false), chart fails"
      expectError: true
      expect: |
        .error | assertThat(contains("You have not specified any image pull secrets, and no existing image pull secrets were automatically inferred."))
    - name: "when allowNone is true"
      set:
        imagePullSecrets.allowNone: true
      expect: .serviceaccounts["scanner-v4"] | saOnlyRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner-v4"])
    - name: "when using existing secrets"
      set:
        imagePullSecrets.useExisting: "existing-secret1; existing-secret2"
      expect: |
        .serviceaccounts["scanner-v4"] | saOnlyRefersTo([
          "secured-cluster-services-main", "stackrox", "stackrox-scanner-v4", "existing-secret1", "existing-secret2"])

- name: "sensor only connects to local scanner V4 when it is enabled"
  set:
    imagePullSecrets.allowNone: true
  tests:
  - name: "local scanner enabled"
    set:
      scannerV4.disable: false
    expect: |
      envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
  - name: "local scanner disabled"
    set:
      scannerV4.disable: true
    expect: |
      envVars(.deployments.sensor; "sensor")| assertThat(has("ROX_LOCAL_IMAGE_SCANNING_ENABLED") == false)

- name: "sensor connects to local scanner using the correct gRPC endpoint"
  release:
    namespace: custom-ns
  set:
    allowNonstandardNamespace: true
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    .deployments["sensor"].spec.template.spec.containers[0].env[] |
      select(.name == "ROX_SCANNER_V4_GRPC_ENDPOINT") | assertThat(.value == "scanner-v4-indexer.custom-ns.svc:8443")

- name: "Test customize for local scanner v4"
  values:
    scannerV4:
      disable: false
    imagePullSecrets:
      allowNone: true
    customize:
      envVars:
        FOO: bar
  expect: |
    envVars(.deployments["scanner-v4-indexer"]; "indexer")["FOO"] | assertThat(. == "bar")

- name: "Enabling scanner v2 automatically enables scanner v4 as well"
  values:
    scanner:
      disable: false
    imagePullSecrets:
      allowNone: true
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. != null)

- name: "Enabling scanner v2 does not enable scanner v4 if it has been explicitly disabled"
  values:
    scannerV4:
      disable: true
    scanner:
      disable: false
    imagePullSecrets:
      allowNone: true
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. == null)

- name: "indexer should be using sensor endpoints when deployed as part of secured-cluster-services"
  set:
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.repository_to_cpe_url | assertThat(. == "https://sensor.stackrox.svc/scanner/definitions?file=repo2cpe")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.name_to_repos_url | assertThat(. == "https://sensor.stackrox.svc/scanner/definitions?file=name2repos")

- name: "indexer should not allow ingress from central and matcher when deployed as a secured-cluster-service"
  set:
    scannerV4.disable: false
    imagePullSecrets.allowNone: true
  expect: |
    .networkpolicys["scanner-v4-indexer"].spec.ingress | assertThat(length == 1)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[0] | .ports | assertThat(length == 1)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[0] | .from[0].podSelector.matchLabels.app | assertThat(. == "sensor")
