defs: |
  def container(obj; name):
    obj.spec.template.spec.containers[] | select(.name == name);

  def rawEnvVars(obj; container):
    [container(obj; container) | .env[] | (.value = del(.name))] | from_entries;

  def envVars(obj; container):
    container(obj; container) | .env | from_entries;

  def verifyNamespace(ns):
    [.objects[].metadata | select(.namespace and .namespace != ns)] | assertThat(length == 0);

  def helmClusterConfig:
    .secrets["helm-cluster-config"] | .stringData["config.yaml"] | fromyaml;

  def verifyCentralEndpoint(ep):
    [
      (envVars(.deployments.sensor; "sensor")["ROX_CENTRAL_ENDPOINT"] | assertThat(. == ep)),
      (.secrets["helm-cluster-config"] | .stringData["config.yaml"] | fromyaml
        | .clusterConfig.staticConfig.centralApiEndpoint | assertThat(. == ep))
    ][];

  def verifySensorEndpoint(ep):
    [
      (envVars(.deployments["admission-control"]; "admission-control")["ROX_SENSOR_ENDPOINT"]
        | assertThat(. == ep)),
      (envVars(.daemonsets.collector; "collector")["GRPC_SERVER"] | assertThat(. == ep)),
      (envVars(.daemonsets.collector; "compliance")["ROX_ADVERTISED_ENDPOINT"]
        | assertThat(. == ep))
    ][];

  def verifyMonitoringExposed(service):
    [service.spec.ports[] | select(.name == "monitoring" and .port == 9090 and .targetPort == "monitoring")]
      | (length == 1);

  def verifyMonitoringContainerPortExposed(container):
    [container | if .ports != null then .ports[] else {} end
      | select(.containerPort == 9090 and .name == "monitoring")]
        | (length == 1);

  # Please keep the defs here in sync with the ones in the central image-pull-secrets test.

  # Separate functions, to make error messages helpful.
  def containsAll(needles):
      . as $hay | all(needles[]; . as $needle | any($hay[]; . == $needle));
  def containsNone(needles):
      . as $hay | all(needles[]; . as $needle | all($hay[]; . != $needle));

  def saRefersTo(pullSecretNames):
      (.imagePullSecrets // []) | [.[] | .name] | assertThat(. | containsAll(pullSecretNames));

  def saNotRefersTo(pullSecretNames):
      (.imagePullSecrets // []) | [.[] | .name] | assertThat(. | containsNone(pullSecretNames));

  # This treats the lists as multisets.
  def saOnlyRefersTo(pullSecretNames):
      [.imagePullSecrets[] | .name] | sort | assertThat(. == (pullSecretNames | sort));

server:
  visibleSchemas:
  - kubernetes-1.20.2
  objects:
    # Apparently, for the `lookup` function in the Helm chart to be able to list the objects of a certain kind
    # at least one such object needs to exist. Therefore, we create a StorageClass here solely
    # for enabling lookups in the charts under test.
    - apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: some-sc-that-we-dont-care-about
        annotations:
          storageclass.kubernetes.io/is-default-class: false
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: stackrox
        name: just-some-dummy-pvc
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "314159Mi"
values:
  clusterName: "testcluster"
  createSecrets: false
  ca:
    cert: "DUMMY CA CERTIFICATE"
