values:
  monitoring:
    openshift:
      enabled: false
server:
  visibleSchemas:
  - openshift-4.1.0
  availableSchemas:
  - openshift-4.1.0
tests:
- name: "scanner with default settings is in slim mode"
  set:
    imagePullSecrets.allowNone: true
    scanner.disable: false
  expect: |
    container(.deployments["scanner"]; "scanner").image | contains("slim")
    container(.deployments["scanner-db"]; "db").image | contains("slim")
    envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
    .deployments.["scanner"].spec.template.spec.volumes[] | select(.name == "additional-ca-volume") | assertThat(.secret.secretName == "additional-ca-sensor")
  tests:
  - name: "on openshift 4"
  - name: "on openshift 3"
    set:
      env.openshift: 3

- name: "scanner is disabled by default, neither deployments nor SA should be created"
  set:
    imagePullSecrets.allowNone: true
  expect: |
    .deployments["scanner"] | assertThat(. == null)
    .deployments["scanner-db"] | assertThat(. == null)
    .serviceaccounts["scanner"] | assertThat(. == null)

- name: "scanner can override image config"
  set:
    imagePullSecrets.allowNone: true
    scanner.disable: false
  expect: |
    container(.deployments["scanner"]; "scanner") | assertThat(.image == "custom.io/custom-scanner:1.2.3")
    container(.deployments["scanner-db"]; "db") | assertThat(.image == "custom.io/custom-scanner-db:1.2.3")
  tests:
  - name: "with fullref"
    values:
      image:
        scanner:
          fullRef: "custom.io/custom-scanner:1.2.3"
        scannerDb:
          fullRef: "custom.io/custom-scanner-db:1.2.3"
  - name: "with separate parts"
    values:
      image:
        scanner:
          tag: 1.2.3
          registry: custom.io
          name: custom-scanner
        scannerDb:
          tag: 1.2.3
          registry: custom.io
          name: custom-scanner-db

- name: "scanner accepts connections from sensor when scanner slim is enabled"
  set:
    imagePullSecrets.allowNone: true
    scanner.disable: false
    scanner.mode: "slim"
  expect: |
    .networkpolicys["scanner"].spec.ingress | assertThat(length == 2)
    .networkpolicys["scanner"].spec.ingress[1] | .from[0].podSelector.matchLabels.app | assertThat(. == "sensor")

- name: "scanner slim service account can access image pull secrets"
  set:
    scanner.disable: false
    scanner.mode: "slim"
  expect: |
    assumeThat(.error == null) | .serviceaccounts["scanner"] | saRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner"])
    assumeThat(.error == null) | .serviceaccounts["scanner"] | saNotRefersTo(["secured-cluster-services-collector", "collector-stackrox"])
  tests:
  - name: "when authenticating in image registry with user and password"
    set:
      imagePullSecrets.username: "imagePullUser"
      imagePullSecrets.password: "imagePullPassword"
    expect: |
      .serviceaccounts["scanner"] | saOnlyRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner"])
      .secrets["secured-cluster-services-main"] | assertThat(. != null)
  - name: "when username/password are not provided, no secret is created"
    expect: .secrets["secured-cluster-services-main"] | assertThat(. == null)
    tests:
    - name: "by default (allowNone is false), chart fails"
      expectError: true
      expect: |
        .error | assertThat(contains("You have not specified any image pull secrets, and no existing image pull secrets were automatically inferred."))
    - name: "when allowNone is true"
      set:
        imagePullSecrets.allowNone: true
      expect: .serviceaccounts["scanner"] | saOnlyRefersTo(["secured-cluster-services-main", "stackrox", "stackrox-scanner"])
    - name: "when using existing secrets"
      set:
        imagePullSecrets.useExisting: "existing-secret1; existing-secret2"
      expect: |
        .serviceaccounts["scanner"] | saOnlyRefersTo([
          "secured-cluster-services-main", "stackrox", "stackrox-scanner", "existing-secret1", "existing-secret2"])

- name: "sensor only connects to local scanner when it is enabled"
  set:
    imagePullSecrets.allowNone: true
  tests:
  - name: "local scanner enabled"
    set:
      scanner.disable: false
    expect: |
      envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
  - name: "local scanner disabled"
    set:
      scanner.disable: true
    expect: |
      envVars(.deployments.sensor; "sensor")| assertThat(has("ROX_LOCAL_IMAGE_SCANNING_ENABLED") == false)

- name: "sensor connects to local scanner using the correct GRPC endpoint"
  release:
    namespace: custom-ns
  set:
    imagePullSecrets.allowNone: true
    allowNonstandardNamespace: true
    scanner.disable: false
  expect: |
    .deployments["sensor"].spec.template.spec.containers[0].env[] |
      select(.name == "ROX_SCANNER_GRPC_ENDPOINT") | assertThat(.value == "scanner.custom-ns.svc:8443")

- name: "Test customize for local scanner"
  values:
    imagePullSecrets:
      allowNone: true
    scanner:
      disable: false
    customize:
      envVars:
        FOO: bar
    expect: |
      envVars(.deployments.scanner; "scanner")["FOO"] | assertThat(. == "bar")

- name: "Installation fails in full mode"
  values:
    imagePullSecrets:
      allowNone: true
    scanner:
      disable: false
      mode: full
  expectError: true
  expect: |
    .error | assertThat(contains("set to slim mode: scanner.mode=slim"))
