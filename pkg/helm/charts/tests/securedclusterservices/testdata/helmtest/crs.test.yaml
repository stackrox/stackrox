values:
  imagePullSecrets:
    allowNone: true
  config:
    admissionControl:
      listenOnEvents: true
      listenOnCreate: true
      listenOnUpdates: true
tests:
  - name: "Rendering without init bundle or CRS fails"
    values:
      ca:
        cert: null
    expectError: true
    expect: |
      .error | assertThat(contains("A CA certificate must be specified"))

  - name: "With CRS"
    values:
      ca:
        cert: null
      crs:
        file: |
          # This test data can be generated by:
          #
          #   * Deploying test Central
          #   * roxctl central crs generate foo -o crs.yaml
          #   * Metadata annotations can be removed for brevity.
          #   * Insert resulting CRS file here.
          apiVersion: v1
          data:
            crs: ZXlKRFFYTWlPbHNpTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0WEc1TlNVbEVVRlJEUTBGcFYyZEJkMGxDUVdkSlVVY3JaekozTjNwcFZuSkpjRTVqZG1oQ01ucHBSV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUkVGd1hHNU5VMk4zU2xGWlJGWlJVVVJGZURWVVpFZEdhbUV4U25abFEwSkVXbGhLTUdGWFduQlpNa1l3V2xOQ1FtUllVbTlpTTBwd1pFaHJkMGhvWTA1TmFsRjRYRzVOVkVWNVRXcEJNRTE2VFRGWGFHTk9UV3ByZUUxVVJYaE5ha0V3VFhwTk1WZHFRWEJOVTJOM1NsRlpSRlpSVVVSRmVEVlVaRWRHYW1FeFNuWmxRMEpFWEc1YVdFb3dZVmRhY0ZreVJqQmFVMEpDWkZoU2IySXpTbkJrU0d0M1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTFhHNUJiMGxDUVZGRGJGUnVTa3AxY25OcGEzVTBLemt4WmpOTmN6STBVMkZtSzJSRVNFZFZWaTk0TkRndmFraEpTRk5QUWxCUFQzQnllbGx0UVZoQ1EyUkhYRzVFZDFCdFVHUmpSMEZWYlc5U1JIb3hSSEF2YnpOalYweEZlVFJFUzBWWFFWQk9OR1k1UlZGcFZFSmtSbXBSUkRkalJUVTBiSEp6YWpGaGEwUTFhekJLWEc1RE1YZHRLMm96YTFaelYwTlRhelZoY2xZNFJuaHNibGRwUkhFMVJYSlpkRXhyWkhad1RuUlJXWEJLWkhnelJrUXlLMGxKUm1KaVRXeFBMM1pLUjNNMlhHNHhhaTl3YW5SWVdqaFJSMUY0V2t0WmR6RmFjV0Y0V1ZVMldsazRlbVpzVERSb1IxTmhTbE1yVEVwNk1IazVWMWhVY0U1WE9HY3llRE5tZVdOWlZtTjBYRzVFUW5ocGFtRmtRMmd2ZUdoSk0xRlRabEl4UWtWTVEwNWpZMVpGVldobmRIUXhTM2h1U1ZVNVV6SkNZbVYwTVhoU1JUbDFZVVZhZUd4SUwzUmFUMU5NWEc0MWFVWlBTamR5YW00d1JtZ3ZVUzlUT1VwdGVYWjBLMWxXTWpNMVFXZE5Ra0ZCUjJwWlZFSm1UVUUwUjBFeFZXUkVkMFZDTDNkUlJVRjNTVU53UkVGa1hHNUNaMDVXU0ZOVlJVWnFRVlZDWjJkeVFtZEZSa0pSWTBSQlVWbEpTM2RaUWtKUlZVaEJkMGwzUkhkWlJGWlNNRlJCVVVndlFrRlZkMEYzUlVJdmVrRmtYRzVDWjA1V1NGRTBSVVpuVVZWWk5FVldjazVWTmt4UlRtNURNbmsxVlZNeWJHUk1UM296T1VsM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFVUm5aMFZDWEc1QlNrNTNVekJpWlRSd1IySkROV2d5U3pGT1RHeFlORkEzY2tsMmVYRjFWRFpqY2tFeFFsUmtiV2g1V1hvMWRHVkNjRVZvUm1kcmFWRXhObGhzZG1oS1hHNUhRbGgyYnpOSFRVMVplR0Y2V0M5NGRreHpaRUZ6U1hKMksyeE5TWG93WkZFelVIWTFMemg1U0d0TWVHZFFTa2RFVDFoVVVYQlpjRTlFU2pNMlJ6SkZYRzU2V25wSlltRnVjMDFXTUZSVkwweFdhMlJoU21FME56ZDVVbFVyTTNGR2NqbHFaRk52Y0U5cVkxTklSa2xtYTJZeGJYUjFVVnAxY2pVeWVpODBjVEJxWEc1WlNFcG5ZbmRaUjBGVFRYZERaMGw2TUZOeVJpOXFPSEJZYkVNNGVWbEhMMkV6UTBwcGRYUXZSR1JRYUdONGJVeEJMMFY1WjBvMVJqQk5ZV1ZpVkVvNFhHNTZNMVpzYnpCamNYVnlVa1JVTmpRNVlXZElMM3BLT1dOVldVbEZaV3BvYW1KWlYweHFlbmhDZERKbFFXeEtkVlpvUkRJNWQzaEdTM0IxYW5OWlFWRnFYRzVHZFdadE5Ya3dTbVpsZEVaaGNuZEdkeXRMVkcwMk5EMWNiaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMWNiaUpkTENKalpYSjBJam9pTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0WEc1TlNVbEVVMFJEUTBGcVEyZEJkMGxDUVdkSlNXVnVkblpqWTAwNVZteHpkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUYzUzFSRmJrMURWVWRCTVZWRlhHNUJlRTFsVlROU2FGa3lkRk5pTTJkblVUSldlV1JIYkcxaFYwNW9aRWRWWjFGWVZqQmhSemw1WVZoU05VMUNORmhFVkVrd1RWUkZlRTFxUlRWT1JHTjNYRzVOUm05WVJGUkpNVTFVUlhoTmFrbDNUa1JqZDAxR2IzZG5ZVEI0VEZSQmNrSm5UbFpDUVc5VVNrUnJkMWw2VG1wTmJVVTFURmRaTWs1cVJYUk9SMUYzWEc1YVF6QTBXa1JHYlV4VWFHeE9WRTB4V21wa2JFMTZXVEJOUkVWaVRVSnJSMEV4VlVWRGQzZFRWV3RXU0ZOV1RsVlZhMFpQVmtZNVZGSldTbGRUVlU1R1hHNU5WVVYzVUhkWlJGWlJVVVJFUkdoVFVsVmtTbFV4VWxOUlZUVlZXREZPUmxWc1drcFJNRlUyU1VSQmQwMUVRWGROUkVGM1RGUkJkMDFFUVhSTlJFRjNYRzVOUXpCM1RVUkJkMHhVUVhkTlJFRjNUVVJCZDAxRVFYZE5SRVZqVFVKdlIwRXhWVVZDVWsxVVQwUm5lVTVVYTNoTlZFVXlUbXBaTUU5RVZYcFBSR040WEc1T1ZFSmFUVUpOUjBKNWNVZFRUVFE1UVdkRlIwTkRjVWRUVFRRNVFYZEZTRUV3U1VGQ1VHRjVNR1ZQVkcwdlozWmpPREZhVG5Wc1lqSjRPR3hIZDBWM1hHNWhaSFoxWjFSSllqQjVVbGs0Y1VkRE4zWkNUV280YjNCSlZXeG9TamxPZFdSTFl6bDJkREpLVWpKdlRFbzRVbGhDZG1GQ1ZtbDRUWEZ0YldwblltdDNYRzVuWWxsM1JHZFpSRlpTTUZCQlVVZ3ZRa0ZSUkVGblYyZE5RakJIUVRGVlpFcFJVVmROUWxGSFEwTnpSMEZSVlVaQ2QwMUNRbWRuY2tKblJVWkNVV05FWEc1QmFrRk5RbWRPVmtoU1RVSkJaamhGUVdwQlFVMUNNRWRCTVZWa1JHZFJWMEpDVkZaVldrcG9NRVJVUXpBek9YUXZXRWR4VkVoeVQybFRRVzl6UkVGbVhHNUNaMDVXU0ZOTlJVZEVRVmRuUWxKcVoxSlhjekZVYjNSQk1tTk1Za3hzVWt4aFZqQnpOMUJtTUdwQk0wSm5UbFpJVWtWRlRVUkJkV2RvVG5sYVYyUndYRzVqTTFKNVdWYzFNRXh1VGpCWlYwNXlZMjA1Tkdkb1pIbGFWMlJ3WXpOU2VWbFhOVEJNYms0d1dWZE9jbU50T1RSTWJrNHlXWHBCVGtKbmEzRm9hMmxIWEc0NWR6QkNRVkZ6UmtGQlQwTkJVVVZCV25GelJsUm9iM05UV2xkNGIwWkhaRWR3WkdkWFRWQlhVMEp5TUU5TVYxWnlSMXBhUlhGcVQySkphVzAxVm5sYVhHNWphVGhuZDFCMWN6SmhSMUZzVjNWRFkwZElNaXRYTVhsRFUwSTFNVTE1T0hBNWEycGthazFPVWpacFVIaEJXVnBzWVhGTVIzaHlXVmMyWkROV1p6RlpYRzVRVm10VWJXaHBVbUozZW1SQ1RsSm1aMFUwUjJObVJtY3pVSHBOV1hSb09GaEZaQ3RaUmtSelYwUlBXbTFCV2tGd09YVk9iMVY2UTNGdlVXRjBWR1J2WEc1SU1WZDJiVU50TkVKS05GcERiMUpMUkhFNVNIQXpZM1pyYVZKTFRYRlZibGN5YUhSME0weFRibWhtYjIxelV6aGFkWEZrSzNKWk5uUXJaMjVSYlVoS1hHNXBUbGxEZHpsTGJXbElhV0UySzFSeU1ISlFZbEpUWVhWTVlXVXlSRVJxYjNwdmVtNDJTREpvTVRGUlFVWjZRMWxpY1ZSQ00xSnNlV1ZEYkVObmFWWklYRzVOUnpBMU1rWjZNRlJOYjBZMk5YQmplU3RRYkZnelozWnhXWEpKYVVwRksxaHRXWEpGUVQwOVhHNHRMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdFhHNGlMQ0pyWlhraU9pSXRMUzB0TFVKRlIwbE9JRVZESUZCU1NWWkJWRVVnUzBWWkxTMHRMUzFjYmsxSVkwTkJVVVZGU1Uxc2EzaFNPRUpHYW5KbkszVnFhR3BpTWtSRFQxRXhRMDVvTWpWVFV6SmFkSEJuU21Sd1VsbHFhMFJ2UVc5SFEwTnhSMU5OTkRsY2JrRjNSVWh2VlZGRVVXZEJSVGx5VEZJME5VOWlLME01ZW5wV2F6STJWblppU0hsVllrRlVRbkF5S3paQ1RXaDJWRXBHYW5sdldVeDFPRVY1VUhscGEyaGNibE5YUlc0d01qVXdjSG95S3pOWmJFaGhaM051ZUVaalJ6bHZSbGRNUlhseFlWRTlQVnh1TFMwdExTMUZUa1FnUlVNZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFZ4dUluMD0=
          kind: Secret
          metadata:
            name: cluster-registration-secret
    tests:
      - name: "cluster-registration-secret Kubernetes secret is created"
        expect: |
          .secrets["cluster-registration-secret"].data.crs | assertThat(. != null)
      - name: "sensor pod includes crs init container"
        expect: |
          .deployments.sensor.spec.template.spec.initContainers[0] | assertThat(.name == "crs")
      - name: "secured cluster services contain certificate init container"
        expect: |
          .deployments.sensor.spec.template.spec.initContainers[] | select(.name == "init-tls-certs") | assertThat(. != null)
          .deployments["admission-control"].spec.template.spec.initContainers[] | select(.name == "init-tls-certs") | assertThat(. != null)
          .daemonsets.collector.spec.template.spec.initContainers[] | select(.name == "init-tls-certs") | assertThat(. != null)
      - name: "Validating webhooks contain CA"
        expect: |
          .validatingwebhookconfigurations[].webhooks[].clientConfig.caBundle | assertThat(. != null)
      - name: "and with init bundle causes rendering error"
        set:
          ca.cert: "certificate coming from an init bundle"
          sensor.serviceTLS.cert: "certificate coming from an init bundle"
        expectError: true
        expect: |
          .error | assertThat(contains("please pick only one"))
