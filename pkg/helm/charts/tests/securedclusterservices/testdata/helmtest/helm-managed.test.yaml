values:
  imagePullSecrets:
    allowNone: true
tests:
- name: "All clusters should have secret created"
  expect: |
    .secrets["helm-cluster-config"].stringData["config.yaml"] | assertThat(. and . != "")
    envVars(.deployments.sensor; "sensor")["ROX_HELM_CLUSTER_CONFIG_FP"] | assertThat(. and . != "")
  tests:
  - name: "with default (null) setting"
  - name: "with explicit true setting"
    set:
      helmManaged: true
    expect: |
      helmClusterConfig | assertThat(.managedBy == "MANAGER_TYPE_HELM_CHART")
  - name: "with false setting"
    set:
      helmManaged: false
    expect: |
      helmClusterConfig | assertThat(.managedBy == "MANAGER_TYPE_MANUAL")

- name: "Explicitly set fingerprint should be as expected"
  expect: |
    helmClusterConfig | assertThat(.clusterConfig.configFingerprint == "test-fpr")
    envVars(.deployments.sensor; "sensor") | assertThat(.["ROX_HELM_CLUSTER_CONFIG_FP"] == "test-fpr")
  set:
    meta.configFingerprintOverride: "test-fpr"

- name: "Operator-installed instance should have managedBy=MANAGER_TYPE_KUBERNETES_OPERATOR"
  set:
    managedBy: MANAGER_TYPE_KUBERNETES_OPERATOR
  tests:
  - name: "be managed by operator"
    expect: |
      helmClusterConfig | assertThat(.managedBy == "MANAGER_TYPE_KUBERNETES_OPERATOR")

- name: "Helm-installed instance should have managedBy=MANAGER_TYPE_HELM_CHART"
  set:
    managedBy: MANAGER_TYPE_HELM_CHART
  tests:
  - name: "be managed by operator"
    expect: |
      helmClusterConfig | assertThat(.managedBy == "MANAGER_TYPE_HELM_CHART")
