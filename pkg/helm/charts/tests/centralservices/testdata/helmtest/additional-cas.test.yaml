values:
  central:
    persistence:
      none: true
  imagePullSecrets:
    allowNone: true
tests:
- name: "Additional CA secret is not created"
  expect: |
    .secrets["additional-ca"] | assertThat(. == null)
  tests:
  - name: "with default settings"
  - name: "with an empty string"
    set:
      additionalCAs: ""
  - name: "with an empty list"
    set:
      additionalCAs: []
  - name: "with an empty map"
    set:
      additionalCAs: {}
- name: "Additional CA secret is created from a map and invalid characters are translated"
  values:
    additionalCAs:
      foo.crt: bar
      bar/baz?.pem: baz
  expect: |
    .secrets["additional-ca"].stringData | assertThat(. == {
      "00-bar-baz-.pem.crt": "baz\n",
      "01-foo.crt": "bar\n"})
    .secrets["additional-ca"].metadata.namespace | assertThat(. == "stackrox")
- name: "Additional CA secret is created from a single string"
  values:
    additionalCAs: |
      single extra certificate authority
  expect: |
    .secrets["additional-ca"].stringData | assertThat(. == {
      "00-ca.crt": "single extra certificate authority\n"})
- name: "Additional CA secret is created from a list of strings"
  values:
    additionalCAs:
    - "extra CA"
    - "another extra CA"
  expect: |
    .secrets["additional-ca"].stringData | assertThat(. == {
      "00-ca.crt": "extra CA\n",
      "01-ca.crt": "another extra CA\n"})
- name: "error cases"
  expectError: true
  expect: |
    .error | assertThat(contains("additionalCAs"))
  tests:
  - name: "when setting is not a string, list, dict"
    set:
      additionalCAs: 42
  - name: "when setting is a list containing a non-string value"
    set:
      additionalCAs: ["foo", 42, "bar"]
  - name: "when setting is a dict containing a non-string value"
    set:
      additionalCAs:
        foo.crt: "foo"
        bar.crt:
          baz: qux
