defs: |
  def container(obj; name):
    obj.spec.template.spec.containers[] | select(.name == name);

  def verifyNodeAffinities(obj):
    [
      (obj.spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution[]
        | select(.preference.matchExpressions[0].key == "node-role.kubernetes.io/infra" ) | [
          assertThat(.weight == 50),
          assertThat(.preference.matchExpressions[0].operator == "Exists")
        ]),
      (obj.spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution[]
        | select(.preference.matchExpressions[0].key == "node-role.kubernetes.io/compute" ) | [
          assertThat(.weight == 25),
          assertThat(.preference.matchExpressions[0].operator == "Exists")
        ]),
      (obj.spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution[]
        | select(.preference.matchExpressions[0].key == "node-role.kubernetes.io/master" ) | [
          assertThat(.weight == 100),
          assertThat(.preference.matchExpressions[0].operator == "DoesNotExist")
        ]),
      (obj.spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution[]
        | select(.preference.matchExpressions[0].key == "node-role.kubernetes.io/control-plane" ) | [
          assertThat(.weight == 100),
          assertThat(.preference.matchExpressions[0].operator == "DoesNotExist")
        ])
    ][];

server:
  visibleSchemas:
    - kubernetes-1.20.2
  objects:
    # Apparently, for the `lookup` function in the Helm chart to be able to list the objects of a certain kind
    # at least one such object needs to exist. Therefore, we create a StorageClass here solely
    # for enabling lookups in the charts under test.
    - apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: some-sc
        annotations:
          storageclass.kubernetes.io/is-default-class: false

values:
  ca:
    cert: "CA cert"
    key: "CA key"
  central:
    adminPassword:
      value: adminpw
    serviceTLS:
      cert: "Central cert"
      key: "Central key"
    db:
      serviceTLS:
        cert: "Central DB cert"
        key: "Central DB key"
  scanner:
    serviceTLS:
      cert: "Scanner cert"
      key: "Scanner key"
    dbServiceTLS:
      cert: "ScannerDB cert"
      key: "ScannerDB key"
  scannerV4:
    indexer:
      serviceTLS:
        cert: "Indexer cert"
        key: "Indexer key"
    matcher:
      serviceTLS:
        cert: "Matcher cert"
        key: "Matcher key"
    db:
      serviceTLS:
        cert: "ScannerDB cert"
        key: "ScannerDB key"
