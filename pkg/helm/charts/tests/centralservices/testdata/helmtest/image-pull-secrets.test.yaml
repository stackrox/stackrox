# This file tests image pull secret references
# WITHOUT pre-existing secrets.
defs: |
  def authForCentral:
      (container(.deployments.central; "central") | .image | sub("/.*$"; "")) as $mainRegistry |
        .secrets["stackrox"].data[".dockerconfigjson"] | @base64d | fromjson | .auths
          | .["https://" + (if ($mainRegistry == "docker.io") then "index.docker.io/v1/" else $mainRegistry end)]
          | .auth | @base64d;

  # Please keep the defs here in sync with the ones in the secured cluster sibling of this test.

  # Separate functions, to make error messages helpful.
  def containsAll(needles):
      . as $hay | all(needles[]; . as $needle | any($hay[]; . == $needle));
  def containsNone(needles):
      . as $hay | all(needles[]; . as $needle | all($hay[]; . != $needle));

  def saRefersTo(pullSecretNames):
      (.imagePullSecrets // []) | [.[] | .name] | assertThat(. | containsAll(pullSecretNames));

  def saNotRefersTo(pullSecretNames):
      (.imagePullSecrets // []) | [.[] | .name] | assertThat(. | containsNone(pullSecretNames));

  # This treats the lists as multisets.
  def saOnlyRefersTo(pullSecretNames):
      [.imagePullSecrets[] | .name] | sort | assertThat(. == (pullSecretNames | sort));

expect: |
  # Ensure that legacy image pull secret is not referenced when it does not exist.
  assumeThat(.error == null) | .serviceaccounts["central"] | saNotRefersTo(["stackrox-scanner"])
  assumeThat(.error == null) | .serviceaccounts["central-db"] | saNotRefersTo(["stackrox-scanner"])
  assumeThat(.error == null) | .serviceaccounts["scanner"] | saNotRefersTo(["stackrox-scanner"])

tests:
- name: "with no image pull secret creation"
  expect: |
    .secrets?["stackrox"]? | assertThat(. == null)
  tests:
  - name: "works with allowNone=true, and default image pull secrets are NOT referenced in service accounts"
    set:
      imagePullSecrets.allowNone: true
    expect: |
      .serviceaccounts["central"] | assertThat(.imagePullSecrets == null)
      .serviceaccounts["central-db"] | assertThat(.imagePullSecrets == null)
      .serviceaccounts["scanner"] | assertThat(.imagePullSecrets == null)
  - name: "with default setting of allowNone=false"
    tests:
    - name: "should fail with no extra secrets"
      expectError: true
    - name: "should succeed with pull secrets referenced in default SA"
      server:
        objects:
        - apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: default
            namespace: stackrox
          imagePullSecrets:
          - name: from-default-1
          - name: from-default-2
      expect: |
        .serviceaccounts[] | saRefersTo(["from-default-1", "from-default-2"])
    - name: "should succeed with useExisting"
      expect: |
        .serviceaccounts[] | saRefersTo(["extra-secret1", "extra-secret2"])
      tests:
      - name: as JSON list
        set:
          imagePullSecrets.useExisting: ["extra-secret1", "extra-secret2"]

      - name: as semicolon-delimited list string
        set:
          imagePullSecrets.useExisting: "extra-secret1; extra-secret2 "

- name: "with image pull secret creation (username specified)"
  values:
    imagePullSecrets:
      username: foo
  expect: |
    .secrets["stackrox"] | assertThat(. != null)
    .serviceaccounts[] | saRefersTo(["stackrox"])
  tests:
  - name: "with password specified too"
    values:
      imagePullSecrets:
        password: bar
    expect: |
      authForCentral | assertThat(. == "foo:bar")
    tests:
    - name: "with default registry"
    - name: "with custom central registry"
      set:
        central.image.registry: my.registry.io
    - name: "with docker registry"
      set:
        central.image.registry: docker.io/stackrox
  - name: "with empty password"
    values:
      imagePullSecrets:
        password: ""
    expect: |
      authForCentral | assertThat(. == "foo:")
  - name: "secrets from default SA are referenced, if present"
    server:
      objects:
      - apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: default
          namespace: stackrox
        imagePullSecrets:
        - name: from-default-1
        - name: from-default-2
    expect: |
      .serviceaccounts[] | saRefersTo(["from-default-1", "from-default-2"])
  - name: "useExisting secrets are referenced, if specified"
    set:
      imagePullSecrets.useExisting: ["extra-secret1", "extra-secret2"]
    expect: |
      .serviceaccounts[] | saRefersTo(["extra-secret1", "extra-secret2"])
