values:
  central:
    persistence:
      none: true
  ca:
    cert: ""
    key: ""
  imagePullSecrets:
    allowNone: true
  scannerV4:
    indexer:
      serviceTLS:
        cert: ""
        key: ""
    matcher:
      serviceTLS:
        cert: ""
        key: ""
    db:
      serviceTLS:
        cert: ""
        key: ""
  monitoring:
    openshift:
      enabled: false
server:
  visibleSchemas:
  - openshift-4.1.0
  availableSchemas:
  - openshift-4.1.0
tests:
- name: "matcher resources should exist"
  set:
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .secrets["scanner-v4-matcher-tls"] | assertThat(. != null)
    .configmaps["scanner-v4-matcher-config"] | assertThat(. != null)
    .networkpolicys["scanner-v4-matcher"] | assertThat(. != null)
    .services["scanner-v4-matcher"] | assertThat(. != null)
    .horizontalpodautoscalers["scanner-v4-matcher"] | assertThat(. != null)
- name: "additional-ca-volume is backed by additional-ca secret"
  set:
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-indexer"].spec.template.spec
      | .volumes[] | select(.name == "additional-ca-volume")
      | .secret.secretName
      | assertThat(. == "additional-ca")
- name: "StorageClass stackrox-gke-ssd is created when scannerV4 references this storage class in its PVC configuration"
  values:
    scannerV4:
      disable: false
      db:
        persistence:
          persistentVolumeClaim:
            storageClass: "stackrox-gke-ssd"
  expect: |
    .objects | map(select(.kind == "StorageClass" and .metadata.name == "stackrox-gke-ssd")) | assertThat(length == 1)

- name: "scanner V4 indexer and matcher skip gRPC health probes on Kubernetes < 1.24.0"
  set:
    scannerV4.disable: false
    meta.apiServer.version: "1.23.99"
  expect: |
    .deployments["scanner-v4-indexer"].spec.template.spec.containers[0].readinessProbe.grpc | assertThat(. == null)
    .deployments["scanner-v4-matcher"].spec.template.spec.containers[0].readinessProbe.grpc | assertThat(. == null)
# TODO(ROX-20842): Add test which checks existence of gRPC health probes on Kubernetes >= 1.24.0.
# Cannot be added right away because helmtest would need to be updated, as the validation of
# the manifests it baked in bails out on grpc readinessProbes (probably outdated schemas).
- name: "scanner V4 indexer and matcher can be enabled with built-in defaulting"
  set:
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)

- name: "Install mode is reported by Helm chart installation notes"
  tests:
  - name: "when installing neither indexer nor matcher"
    set:
      scannerV4.disable: true
    expect: |
      .notes | assertThat(match("Scanner V4: +disabled"))
  - name: "when installing indexer and matcher"
    set:
      scannerV4.disable: false
    expect: |
      .notes | assertThat(match("Scanner V4: +enabled"))
      .notes | assertThat(match("Scanner V4 is enabled and the following Scanner V4 components will be deployed: indexer and matcher"))
# This test can be deleted once the scanner V2 is removed.
- name: "enabling scanner V4 keeps scanner V2 enabled"
  set:
    scannerV4.disable: false
  expect:
    .deployments["scanner"] | assertThat(. != null)

- name: "scanner with default settings"
  set:
    scannerV4.disable: false
  expect: |
    .serviceaccounts["scanner-v4"] | assertThat(. != null)
    .secrets["scanner-v4-db-password"].stringData.password | assertThat(length != 0)
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-matcher-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-db-config"] | assertThat(. != null)
    #    .deployments["scanner-v4-indexer"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    .deployments["scanner-v4-db"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    verifyNodeAffinities(.deployments["scanner-v4-db"])
    .networkpolicys["scanner-v4-indexer"] | assertThat(. != null)
    .networkpolicys["scanner-v4-matcher"] | assertThat(. != null)
    .networkpolicys["scanner-v4-db"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)
    .services["scanner-v4-indexer"] | assertThat(. != null)
    .services["scanner-v4-matcher"] | assertThat(. != null)
    .services["scanner-v4-db"] | assertThat(. != null)
  tests:
  - name: "receives newly generated TLS certificates with keys"
    expect: |
      .secrets["scanner-v4-indexer-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-matcher-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-db-tls"].stringData | assertThat(.["key.pem"] | contains("BEGIN RSA PRIVATE KEY"))
    tests:
    - name: "as default"
    - name: "with explicit setting"
      set:
        scanner.mode: full
    - name: "with empty setting"
      set:
        scanner.mode: ""

- name: "scanner V4 with deprecated PodSecurityPolicies disabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: false
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. == null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. == null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. == null)

- name: "scanner with deprecated PodSecurityPolicies enabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: true
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. != null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. != null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. != null)

- name: "scanner v4 DB uses expected default configuration"
  values:
    scannerV4:
      disable: false
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.password_file | assertThat(. == "/run/secrets/stackrox.io/secrets/password")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("sslrootcert=/run/secrets/stackrox.io/certs/ca.pem"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("host=scanner-v4-db.stackrox.svc"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("min_conns="))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("max_conns="))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("statement_timeout=") | not)

- name: "scanner v4 DB configuration can be fine-tuned"
  values:
    scannerV4:
      disable: false
      db:
        source:
          minConns: 2
          maxConns: 42
          statementTimeoutMs: 314159
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.password_file | assertThat(. == "/run/secrets/stackrox.io/secrets/password")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("sslrootcert=/run/secrets/stackrox.io/certs/ca.pem"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("host=scanner-v4-db.stackrox.svc"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("min_conns=2"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("max_conns=42"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("statement_timeout=314159"))

- name: "scanner V4 service account can access image pull secrets"
  server:
    objects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: stackrox
        namespace: stackrox
    - apiVersion: v1
      kind: Secret
      metadata:
        name: stackrox-scanner
        namespace: stackrox
  set:
    scannerV4.disable: false
  expect: |
    .serviceaccounts["scanner-v4"] | assertThat(. != null)
    .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox")
    .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox-scanner")

- name: "indexer should be using central endpoints when deployed as part of central-services"
  set:
    scannerV4.disable: false
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.repository_to_cpe_url | assertThat(. == "https://central.stackrox.svc/api/extensions/scannerdefinitions?file=repo2cpe")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.name_to_repos_url | assertThat(. == "https://central.stackrox.svc/api/extensions/scannerdefinitions?file=name2repos")

- name: "matcher should be using central endpoint when deployed"
  set:
    scannerV4.disable: false
    expect: |
      .configmaps["scanner-v4-matcher-config"].data.["config.yaml"] | fromyaml | .matcher.vulnerabilities_url | assertThat(. == "https://central.stackrox.svc/api/extensions/scannerdefinitions?version=ROX_VERSION")

- name: "Scanner V4 is not installed by default"
  set:
    scannerV4.disable: null
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. == null)
    .deployments["scanner-v4-matcher"] | assertThat(. == null)
    .deployments["scanner-v4-db"] | assertThat(. == null)

- name: "Scanner V4 can be disabled without impacting Scanner V2"
  set:
    scannerV4.disable: true
  expect: |
    .deployments["scanner-v4-indexer"] | assertThat(. == null)
    .deployments["scanner-v4-matcher"] | assertThat(. == null)
    .deployments["scanner-v4-db"] | assertThat(. == null)
    .deployments["scanner"] | assertThat(. != null)
    .deployments["scanner-db"] | assertThat(. != null)

- name: "indexer should allow ingress from central, sensor, and matcher when deployed as a central-service"
  set:
    scannerV4.disable: false
  expect: |
    .networkpolicys["scanner-v4-indexer"].spec.ingress | assertThat(length == 3)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[0] | .ports | assertThat(length == 1)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[0] | .from[0].podSelector.matchLabels.app | assertThat(. == "central")
    .networkpolicys["scanner-v4-indexer"].spec.ingress[1] | .ports | assertThat(length == 1)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[1] | .from[0].podSelector.matchLabels.app | assertThat(. == "scanner-v4-matcher")
    .networkpolicys["scanner-v4-indexer"].spec.ingress[2] | .ports | assertThat(length == 1)
    .networkpolicys["scanner-v4-indexer"].spec.ingress[2] | .from[0].podSelector.matchLabels.app | assertThat(. == "sensor")

- name: "matcher should allow ingress from central"
  set:
    scannerV4.disable: false
  expect: |
    .networkpolicys["scanner-v4-matcher"].spec.ingress | assertThat(length == 1)
    .networkpolicys["scanner-v4-matcher"].spec.ingress[0] | .ports | assertThat(length == 1)
    .networkpolicys["scanner-v4-matcher"].spec.ingress[0] | .from[0].podSelector.matchLabels.app | assertThat(. == "central")

- name: "Scanner V4 DB persistence"
  set:
    scannerV4.disable: false
  defs: |
    def getVolume(deploymentName; volumeName):
      .deployments[deploymentName].spec.template.spec.volumes[] | select(.name == "disk");
    def getScannerV4Disk:
      getVolume("scanner-v4-db"; "disk");
    def getScannerV4PVC:
      getScannerV4Disk | .persistentVolumeClaim;
  tests:
    - name: "defaults to PVC in absence of a default StorageClass"
      expect: |
        getScannerV4Disk | assertThat(.persistentVolumeClaim != null)
        .persistentvolumeclaims["scanner-v4-db"] | assertThat(. != null)
    - name: "can be configured to use a specific PVC"
      values:
        scannerV4:
          db:
            persistence:
              persistentVolumeClaim:
                claimName: "starfleet"
                createClaim: true
      expect: |
        getScannerV4Disk | assertThat(.persistentVolumeClaim != null)
        getScannerV4PVC | assertThat(.claimName == "starfleet")
      tests:
        - name: "which is newly created"
          expect: |
            .persistentvolumeclaims["starfleet"] | assertThat(. != null)
        - name: "which is assumed to exist"
          values:
            scannerV4:
              db:
                persistence:
                  persistentVolumeClaim:
                    createClaim: false
          expect: |
            .persistentvolumeclaims["starfleet"] | assertThat(. == null)
