values:
  central:
    persistence:
      none: true
  ca:
    cert: ""
    key: ""
  scannerV4:
    indexer:
      serviceTLS:
        cert: ""
        key: ""
    matcher:
      serviceTLS:
        cert: ""
        key: ""
    db:
      serviceTLS:
        cert: ""
        key: ""
  monitoring:
    openshift:
      enabled: false
server:
  visibleSchemas:
  - openshift-4.1.0
  availableSchemas:
  - openshift-4.1.0
tests:

- name: "scanner V4 indexer and matcher can be enabled with built-in defaulting"
  set:
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)

# This test can be deleted once the scanner V2 is removed.
- name: "enabling scanner V4 keeps scanner V2 enabled"
  set:
    scannerV4.disable: false
  expect:
    .deployments["scanner"] | assertThat(. != null)

- name: "scanner with default settings"
  set:
    scannerV4.disable: false
  expect: |
    .serviceaccounts["scanner-v4"] | assertThat(. != null)
    .secrets["scanner-v4-db-password"].stringData.password | assertThat(length != 0)
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-matcher-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-db-config"] | assertThat(. != null)
    #    .deployments["scanner-v4-indexer"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    .deployments["scanner-v4-db"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    verifyNodeAffinities(.deployments["scanner-v4-db"])
    .networkpolicys["scanner-v4-indexer"] | assertThat(. != null)
    .networkpolicys["scanner-v4-matcher"] | assertThat(. != null)
    .networkpolicys["scanner-v4-db"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)
    .services["scanner-v4-indexer"] | assertThat(. != null)
    .services["scanner-v4-matcher"] | assertThat(. != null)
    .services["scanner-v4-db"] | assertThat(. != null)
  tests:
  - name: "receives newly generated TLS certificats with keys"
    expect: |
      .secrets["scanner-v4-indexer-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-matcher-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-db-tls"].stringData | assertThat(.["key.pem"] | contains("BEGIN RSA PRIVATE KEY"))
    tests:
    - name: "as default"
    - name: "with explicit setting"
      set:
        scanner.mode: full
    - name: "with empty setting"
      set:
        scanner.mode: ""

- name: "scanner V4 with deprecated PodSecurityPolicies disabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: false
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. == null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. == null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. == null)

- name: "scanner with deprecated PodSecurityPolicies enabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: true
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. != null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. != null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. != null)

- name: "Installation fails if"
  tests:
    - name: "indexer is enabled without matcher also being enabled"
      values:
        scannerV4:
          indexer:
            disable: false
          matcher:
            disable: true
    - name: "matcher is enabled without indexer also being enabled"
      values:
        scannerV4:
          indexer:
            disable: true
          matcher:
            disable: false
  expectError: true

- name: "scanner v4 DB uses expected default configuration"
  values:
    scannerV4:
      disable: false
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.password_file | assertThat(. == "/run/secrets/stackrox.io/secrets/password")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("sslrootcert=/run/secrets/stackrox.io/certs/ca.pem"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("host=scanner-v4-db.stackrox.svc"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("min_conns=") | not)
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("max_conns=") | not)
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("statement_timeout=") | not)

- name: "scanner v4 DB configuration can be fine-tuned"
  values:
    scannerV4:
      disable: false
      db:
        source:
          minConns: 2
          maxConns: 42
          statementTimeoutMs: 314159
  expect: |
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.password_file | assertThat(. == "/run/secrets/stackrox.io/secrets/password")
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("sslrootcert=/run/secrets/stackrox.io/certs/ca.pem"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("host=scanner-v4-db.stackrox.svc"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("min_conns=2"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("max_conns=42"))
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | fromyaml | .indexer.database.conn_string | assertThat(contains("statement_timeout=314159"))

- name: "scanner V4 service account can access image pull secrets"
  set:
    scannerV4.disable: false
  expect: |
    .serviceaccounts["scanner-v4"] | assertThat(. != null)
    .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox")
    .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox-scanner")
