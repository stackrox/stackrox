values:
  central:
    persistence:
      none: true
  ca:
    cert: ""
    key: ""
  scannerV4:
    indexer:
      serviceTLS:
        cert: ""
        key: ""
    matcher:
      serviceTLS:
        cert: ""
        key: ""
    db:
      serviceTLS:
        cert: ""
        key: ""
  monitoring:
    openshift:
      enabled: false
server:
  visibleSchemas:
  - openshift-4.1.0
  availableSchemas:
  - openshift-4.1.0
tests:
# - name: "scanner v4 with default settings with indexer enabled"
#   set:
#     scanner-v4.indexer.disable: false
#   expect: |
#     container(.deployments["scanner-v4-indexer"]; "scanner").image | contains("slim")
#     container(.deployments["scanner-db"]; "db").image | contains("slim")
#     .securitycontextconstraints | keys | sort | assertThat(. == ["stackrox-admission-control", "stackrox-collector", "stackrox-scanner", "stackrox-sensor"])
#     envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
#   tests:
#   - name: "on openshift 4"
#   - name: "on openshift 3"
#     set:
#       env.openshift: 3

# - name: "scanner V4 is disabled should not be installed by default"
#   expect: |
#     .deployments["scanner-v4-matcher"] | assertThat(. == null)
#     .deployments["scanner-v4-indexer"] | assertThat(. == null)
#     .deployments["scanner-v4-db"] | assertThat(. == null)

- name: "scanner V4 indexer and matcher can be enabled with single switch"
  set:
    scannerV4.disable: false
  expect: |
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)

# This test can be deleted once the scanner V2 is removed.
- name: "enabling scanner V4 keeps scanner V2 enabled"
  set:
    scannerV4.disable: false
  expect:
    .deployments["scanner"] | assertThat(. != null)

- name: "scanner with default settings"
  set:
    scannerV4.disable: false
  expect: |
    .serviceaccounts["scanner-v4"] | assertThat(. != null)
    .secrets["scanner-v4-db-password"].stringData.password | assertThat(length != 0)
    .configmaps["scanner-v4-indexer-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-matcher-config"].data.["config.yaml"] | assertThat(length != 0)
    .configmaps["scanner-v4-db-config"] | assertThat(. != null)
    #    .deployments["scanner-v4-indexer"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    .deployments["scanner-v4-db"].spec.template.spec.affinity.nodeAffinity | .preferredDuringSchedulingIgnoredDuringExecution | assertThat(length == 5)
    verifyNodeAffinities(.deployments["scanner-v4-db"])
    .networkpolicys["scanner-v4-indexer"] | assertThat(. != null)
    .networkpolicys["scanner-v4-matcher"] | assertThat(. != null)
    .networkpolicys["scanner-v4-db"] | assertThat(. != null)
    .deployments["scanner-v4-indexer"] | assertThat(. != null)
    .deployments["scanner-v4-matcher"] | assertThat(. != null)
    .deployments["scanner-v4-db"] | assertThat(. != null)
    .services["scanner-v4-indexer"] | assertThat(. != null)
    .services["scanner-v4-matcher"] | assertThat(. != null)
    .services["scanner-v4-db"] | assertThat(. != null)
  tests:
  - name: "receives newly generated TLS certificats with keys"
    expect: |
      .secrets["scanner-v4-indexer-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-matcher-tls"].stringData | assertThat(.["cert.pem"] | contains("BEGIN CERTIFICATE"))
      .secrets["scanner-v4-db-tls"].stringData | assertThat(.["key.pem"] | contains("BEGIN RSA PRIVATE KEY"))
    tests:
    - name: "as default"
    - name: "with explicit setting"
      set:
        scanner.mode: full
    - name: "with empty setting"
      set:
        scanner.mode: ""

- name: "scanner V4 with deprecated PodSecurityPolicies disabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: false
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. == null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. == null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. == null)

- name: "scanner with deprecated PodSecurityPolicies enabled"
  values:
    scannerV4:
      disable: false
    system:
      enablePodSecurityPolicies: true
  expect: |
    .podsecuritypolicys["stackrox-scanner-v4"] | assertThat(. != null)
    .rolebindings["stackrox-scanner-v4-psp"] | assertThat(. != null)
    .clusterroles["stackrox-scanner-v4-psp"] | assertThat(. != null)

# - name: "scanner V4 service account can access image pull secrets"
#   set:
#     scannerV4.disable: false
#   expect: |
#     .serviceaccounts["scanner-v4"] | assertThat(. != null)
#     .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox")
#     .serviceaccounts["scanner-v4"] | .imagePullSecrets[] | select(.name == "stackrox-scanner")
#   tests:
#   - name: "when authenticating in image registry with user and password"
#     set:
#       imagePullSecrets.username: "imagePullUser"
#       imagePullSecrets.password: "imagePullPassword"
#     expect: |
#       .serviceaccounts["scanner-v4"] | .imagePullSecrets | assertThat(length == 3)
#       # .secrets["secured-cluster-services-main"] | assertThat(. != null)
#  - name: "no secret is created"
#    expect: .secrets["secured-cluster-services-main"] | assertThat(. == null)
#    tests:
#    - name: "when allowNone is true"
#      set:
#        imagePullSecrets.allowNone: true
#      expect: .serviceaccounts["scanner"] | .imagePullSecrets | assertThat(length == 3)
#    - name: "when using existing secrets"
#      set:
#        imagePullSecrets.useExisting: "existing-secret1; existing-secret2"
#      expect: |
#        .serviceaccounts["scanner"] | .imagePullSecrets | assertThat(length == 5)
#        .serviceaccounts["scanner"] | .imagePullSecrets[] | select(.name == "existing-secret1")
#        .serviceaccounts["scanner"] | .imagePullSecrets[] | select(.name == "existing-secret2")

# - name: "sensor only connects to local scanner when it is enabled"
#   tests:
#   - name: "local scanner enabled"
#     set:
#       scanner.disable: false
#     expect: |
#       envVars(.deployments.sensor; "sensor")["ROX_LOCAL_IMAGE_SCANNING_ENABLED"] | assertThat(. == "true")
#   - name: "local scanner disabled"
#     set:
#       scanner.disable: true
#     expect: |
#       envVars(.deployments.sensor; "sensor")| assertThat(has("ROX_LOCAL_IMAGE_SCANNING_ENABLED") == false)

# - name: "sensor connects to local scanner using the correct GRPC endpoint"
#   release:
#     namespace: custom-ns
#   set:
#     allowNonstandardNamespace: true
#     scanner.disable: false
#   expect: |
#     .deployments["sensor"].spec.template.spec.containers[0].env[] |
#       select(.name == "ROX_SCANNER_GRPC_ENDPOINT") | assertThat(.value == "scanner.custom-ns.svc:8443")

# - name: "Test customize for local scanner"
#   values:
#     scanner:
#       disable: false
#     customize:
#       envVars:
#         FOO: bar
#     expect: |
#       envVars(.deployments.scanner; "scanner")["FOO"] | assertThat(. == "bar")

# - name: "Installation fails in full mode"
#   values:
#     scanner:
#       disable: false
#       mode: full
#   expectError: true
#   expect: |
#     .error | assertThat(contains("set to slim mode: scanner.mode=slim"))
