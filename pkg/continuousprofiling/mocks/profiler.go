// Code generated by MockGen. DO NOT EDIT.
// Source: profiler.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/profiler.go -source profiler.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pyroscope "github.com/grafana/pyroscope-go"
	gomock "go.uber.org/mock/gomock"
)

// MockStartClientWrapper is a mock of StartClientWrapper interface.
type MockStartClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockStartClientWrapperMockRecorder
	isgomock struct{}
}

// MockStartClientWrapperMockRecorder is the mock recorder for MockStartClientWrapper.
type MockStartClientWrapperMockRecorder struct {
	mock *MockStartClientWrapper
}

// NewMockStartClientWrapper creates a new mock instance.
func NewMockStartClientWrapper(ctrl *gomock.Controller) *MockStartClientWrapper {
	mock := &MockStartClientWrapper{ctrl: ctrl}
	mock.recorder = &MockStartClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartClientWrapper) EXPECT() *MockStartClientWrapperMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStartClientWrapper) Start(arg0 pyroscope.Config) (*pyroscope.Profiler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(*pyroscope.Profiler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockStartClientWrapperMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStartClientWrapper)(nil).Start), arg0)
}
