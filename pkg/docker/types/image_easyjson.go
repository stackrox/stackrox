// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	container "github.com/docker/docker/api/types/container"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson220accf5DecodeGithubComStackroxRoxPkgDockerTypes(in *jlexer.Lexer, out *ImageInspect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.ID = string(in.String())
		case "RepoTags":
			if in.IsNull() {
				in.Skip()
				out.RepoTags = nil
			} else {
				in.Delim('[')
				if out.RepoTags == nil {
					if !in.IsDelim(']') {
						out.RepoTags = make([]string, 0, 4)
					} else {
						out.RepoTags = []string{}
					}
				} else {
					out.RepoTags = (out.RepoTags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.RepoTags = append(out.RepoTags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RepoDigests":
			if in.IsNull() {
				in.Skip()
				out.RepoDigests = nil
			} else {
				in.Delim('[')
				if out.RepoDigests == nil {
					if !in.IsDelim(']') {
						out.RepoDigests = make([]string, 0, 4)
					} else {
						out.RepoDigests = []string{}
					}
				} else {
					out.RepoDigests = (out.RepoDigests)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.RepoDigests = append(out.RepoDigests, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Config":
			if in.IsNull() {
				in.Skip()
				out.Config = nil
			} else {
				if out.Config == nil {
					out.Config = new(Config)
				}
				easyjson220accf5DecodeGithubComStackroxRoxPkgDockerTypes1(in, out.Config)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson220accf5EncodeGithubComStackroxRoxPkgDockerTypes(out *jwriter.Writer, in *ImageInspect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.RepoTags) != 0 {
		const prefix string = ",\"RepoTags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.RepoTags {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.RepoDigests) != 0 {
		const prefix string = ",\"RepoDigests\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.RepoDigests {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Config != nil {
		const prefix string = ",\"Config\":"
		out.RawString(prefix)
		easyjson220accf5EncodeGithubComStackroxRoxPkgDockerTypes1(out, &*in.Config)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v *ImageInspect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson220accf5EncodeGithubComStackroxRoxPkgDockerTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v *ImageInspect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson220accf5EncodeGithubComStackroxRoxPkgDockerTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageInspect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson220accf5DecodeGithubComStackroxRoxPkgDockerTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageInspect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson220accf5DecodeGithubComStackroxRoxPkgDockerTypes(l, v)
}
func easyjson220accf5DecodeGithubComStackroxRoxPkgDockerTypes1(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Healthcheck":
			if in.IsNull() {
				in.Skip()
				out.Healthcheck = nil
			} else {
				if out.Healthcheck == nil {
					out.Healthcheck = new(container.HealthConfig)
				}
				easyjson220accf5DecodeGithubComDockerDockerApiTypesContainer(in, out.Healthcheck)
			}
		case "User":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson220accf5EncodeGithubComStackroxRoxPkgDockerTypes1(out *jwriter.Writer, in *Config) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Healthcheck != nil {
		const prefix string = ",\"Healthcheck\":"
		first = false
		out.RawString(prefix[1:])
		easyjson220accf5EncodeGithubComDockerDockerApiTypesContainer(out, &*in.Healthcheck)
	}
	if in.User != "" {
		const prefix string = ",\"User\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}
func easyjson220accf5DecodeGithubComDockerDockerApiTypesContainer(in *jlexer.Lexer, out *container.HealthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Test":
			if in.IsNull() {
				in.Skip()
				out.Test = nil
			} else {
				in.Delim('[')
				if out.Test == nil {
					if !in.IsDelim(']') {
						out.Test = make([]string, 0, 4)
					} else {
						out.Test = []string{}
					}
				} else {
					out.Test = (out.Test)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Test = append(out.Test, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Interval":
			out.Interval = time.Duration(in.Int64())
		case "Timeout":
			out.Timeout = time.Duration(in.Int64())
		case "StartPeriod":
			out.StartPeriod = time.Duration(in.Int64())
		case "Retries":
			out.Retries = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson220accf5EncodeGithubComDockerDockerApiTypesContainer(out *jwriter.Writer, in *container.HealthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Test) != 0 {
		const prefix string = ",\"Test\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v8, v9 := range in.Test {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Interval != 0 {
		const prefix string = ",\"Interval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Interval))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"Timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timeout))
	}
	if in.StartPeriod != 0 {
		const prefix string = ",\"StartPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartPeriod))
	}
	if in.Retries != 0 {
		const prefix string = ",\"Retries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Retries))
	}
	out.RawByte('}')
}
