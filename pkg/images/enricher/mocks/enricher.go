// Code generated by MockGen. DO NOT EDIT.
// Source: enricher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
	enricher "github.com/stackrox/rox/pkg/images/enricher"
	scannerV1 "github.com/stackrox/scanner/generated/scanner/api/v1"
)

// MockImageEnricher is a mock of ImageEnricher interface.
type MockImageEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockImageEnricherMockRecorder
}

// MockImageEnricherMockRecorder is the mock recorder for MockImageEnricher.
type MockImageEnricherMockRecorder struct {
	mock *MockImageEnricher
}

// NewMockImageEnricher creates a new mock instance.
func NewMockImageEnricher(ctrl *gomock.Controller) *MockImageEnricher {
	mock := &MockImageEnricher{ctrl: ctrl}
	mock.recorder = &MockImageEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageEnricher) EXPECT() *MockImageEnricherMockRecorder {
	return m.recorder
}

// EnrichImage mocks base method.
func (m *MockImageEnricher) EnrichImage(ctx enricher.EnrichmentContext, image *storage.Image) (enricher.EnrichmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichImage", ctx, image)
	ret0, _ := ret[0].(enricher.EnrichmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichImage indicates an expected call of EnrichImage.
func (mr *MockImageEnricherMockRecorder) EnrichImage(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichImage", reflect.TypeOf((*MockImageEnricher)(nil).EnrichImage), ctx, image)
}

// EnrichWithVulnerabilities mocks base method.
func (m *MockImageEnricher) EnrichWithVulnerabilities(image *storage.Image, components *scannerV1.Components, notes []scannerV1.Note) (enricher.EnrichmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichWithVulnerabilities", image, components, notes)
	ret0, _ := ret[0].(enricher.EnrichmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichWithVulnerabilities indicates an expected call of EnrichWithVulnerabilities.
func (mr *MockImageEnricherMockRecorder) EnrichWithVulnerabilities(image, components, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichWithVulnerabilities", reflect.TypeOf((*MockImageEnricher)(nil).EnrichWithVulnerabilities), image, components, notes)
}

// MockcveSuppressor is a mock of cveSuppressor interface.
type MockcveSuppressor struct {
	ctrl     *gomock.Controller
	recorder *MockcveSuppressorMockRecorder
}

// MockcveSuppressorMockRecorder is the mock recorder for MockcveSuppressor.
type MockcveSuppressorMockRecorder struct {
	mock *MockcveSuppressor
}

// NewMockcveSuppressor creates a new mock instance.
func NewMockcveSuppressor(ctrl *gomock.Controller) *MockcveSuppressor {
	mock := &MockcveSuppressor{ctrl: ctrl}
	mock.recorder = &MockcveSuppressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcveSuppressor) EXPECT() *MockcveSuppressorMockRecorder {
	return m.recorder
}

// EnrichImageWithSuppressedCVEs mocks base method.
func (m *MockcveSuppressor) EnrichImageWithSuppressedCVEs(image *storage.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnrichImageWithSuppressedCVEs", image)
}

// EnrichImageWithSuppressedCVEs indicates an expected call of EnrichImageWithSuppressedCVEs.
func (mr *MockcveSuppressorMockRecorder) EnrichImageWithSuppressedCVEs(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichImageWithSuppressedCVEs", reflect.TypeOf((*MockcveSuppressor)(nil).EnrichImageWithSuppressedCVEs), image)
}
