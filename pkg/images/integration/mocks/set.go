// Code generated by MockGen. DO NOT EDIT.
// Source: set.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/set.go -source set.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	registries "github.com/stackrox/rox/pkg/registries"
	scanners "github.com/stackrox/rox/pkg/scanners"
	gomock "go.uber.org/mock/gomock"
)

// MockSet is a mock of Set interface.
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
}

// MockSetMockRecorder is the mock recorder for MockSet.
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance.
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockSet) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockSetMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSet)(nil).Clear))
}

// RegistryFactory mocks base method.
func (m *MockSet) RegistryFactory() registries.Factory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryFactory")
	ret0, _ := ret[0].(registries.Factory)
	return ret0
}

// RegistryFactory indicates an expected call of RegistryFactory.
func (mr *MockSetMockRecorder) RegistryFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryFactory", reflect.TypeOf((*MockSet)(nil).RegistryFactory))
}

// RegistrySet mocks base method.
func (m *MockSet) RegistrySet() registries.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrySet")
	ret0, _ := ret[0].(registries.Set)
	return ret0
}

// RegistrySet indicates an expected call of RegistrySet.
func (mr *MockSetMockRecorder) RegistrySet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrySet", reflect.TypeOf((*MockSet)(nil).RegistrySet))
}

// RemoveImageIntegration mocks base method.
func (m *MockSet) RemoveImageIntegration(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImageIntegration", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImageIntegration indicates an expected call of RemoveImageIntegration.
func (mr *MockSetMockRecorder) RemoveImageIntegration(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImageIntegration", reflect.TypeOf((*MockSet)(nil).RemoveImageIntegration), id)
}

// ScannerFactory mocks base method.
func (m *MockSet) ScannerFactory() scanners.Factory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScannerFactory")
	ret0, _ := ret[0].(scanners.Factory)
	return ret0
}

// ScannerFactory indicates an expected call of ScannerFactory.
func (mr *MockSetMockRecorder) ScannerFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScannerFactory", reflect.TypeOf((*MockSet)(nil).ScannerFactory))
}

// ScannerSet mocks base method.
func (m *MockSet) ScannerSet() scanners.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScannerSet")
	ret0, _ := ret[0].(scanners.Set)
	return ret0
}

// ScannerSet indicates an expected call of ScannerSet.
func (mr *MockSetMockRecorder) ScannerSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScannerSet", reflect.TypeOf((*MockSet)(nil).ScannerSet))
}

// UpdateImageIntegration mocks base method.
func (m *MockSet) UpdateImageIntegration(integration *storage.ImageIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageIntegration", integration)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageIntegration indicates an expected call of UpdateImageIntegration.
func (mr *MockSetMockRecorder) UpdateImageIntegration(integration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageIntegration", reflect.TypeOf((*MockSet)(nil).UpdateImageIntegration), integration)
}
