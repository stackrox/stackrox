// Code generated by MockGen. DO NOT EDIT.
// Source: nonce_generator.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/nonce_generator.go -source nonce_generator.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNonceGenerator is a mock of NonceGenerator interface.
type MockNonceGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockNonceGeneratorMockRecorder
}

// MockNonceGeneratorMockRecorder is the mock recorder for MockNonceGenerator.
type MockNonceGeneratorMockRecorder struct {
	mock *MockNonceGenerator
}

// NewMockNonceGenerator creates a new mock instance.
func NewMockNonceGenerator(ctrl *gomock.Controller) *MockNonceGenerator {
	mock := &MockNonceGenerator{ctrl: ctrl}
	mock.recorder = &MockNonceGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceGenerator) EXPECT() *MockNonceGeneratorMockRecorder {
	return m.recorder
}

// Nonce mocks base method.
func (m *MockNonceGenerator) Nonce() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nonce indicates an expected call of Nonce.
func (mr *MockNonceGeneratorMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockNonceGenerator)(nil).Nonce))
}

// NonceBytes mocks base method.
func (m *MockNonceGenerator) NonceBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceBytes indicates an expected call of NonceBytes.
func (mr *MockNonceGeneratorMockRecorder) NonceBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceBytes", reflect.TypeOf((*MockNonceGenerator)(nil).NonceBytes))
}
