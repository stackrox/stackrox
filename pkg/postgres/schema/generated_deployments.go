// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// GeneratedDeploymentSchema is the pre-computed schema for deployments table
	GeneratedDeploymentSchema = &walker.Schema{
		Table:    "deployments",
		Type:     "*storage.Deployment",
		TypeName: "Deployment",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment,store",
				},
			},

			{
				Name:       "Hash",
				ColumnName: "hash",
				Type:       "uint64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},

			{
				Name:       "Type",
				ColumnName: "type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "Namespace",
				ColumnName: "namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace,store",
				},
			},

			{
				Name:       "NamespaceId",
				ColumnName: "namespace_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace",
				},
			},

			{
				Name:       "OrchestratorComponent",
				ColumnName: "orchestrator_component",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Orchestrator",
				},
			},

			{
				Name:       "Replicas",
				ColumnName: "replicas",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "PodLabels",
				ColumnName: "pod_labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Pod",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "ClusterName",
				ColumnName: "cluster_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster,store",
				},
			},

			{
				Name:       "Containers",
				ColumnName: "containers",
				Type:       "[]github.com/stackrox/rox/generated/storage.Container",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Annotations",
				ColumnName: "annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "Priority",
				ColumnName: "priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "Inactive",
				ColumnName: "inactive",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "ImagePullSecrets",
				ColumnName: "image_pull_secrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "ServiceAccount",
				ColumnName: "service_account",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Service",
				},
			},

			{
				Name:       "ServiceAccountPermissionLevel",
				ColumnName: "service_account_permission_level",
				Type:       "github.com/stackrox/rox/generated/storage.PermissionLevel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Service",
				},
			},

			{
				Name:       "AutomountServiceAccountToken",
				ColumnName: "automount_service_account_token",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "HostNetwork",
				ColumnName: "host_network",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "HostPid",
				ColumnName: "host_pid",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "HostIpc",
				ColumnName: "host_ipc",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "RuntimeClass",
				ColumnName: "runtime_class",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Tolerations",
				ColumnName: "tolerations",
				Type:       "[]github.com/stackrox/rox/generated/storage.Toleration",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "-",
				},
			},

			{
				Name:       "Ports",
				ColumnName: "ports",
				Type:       "[]github.com/stackrox/rox/generated/storage.PortConfig",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "StateTimestamp",
				ColumnName: "state_timestamp",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},

			{
				Name:       "RiskScore",
				ColumnName: "risk_score",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "PlatformComponent",
				ColumnName: "platform_component",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Platform",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Deployment,
	}
)

// GetDeploymentSchema returns the generated schema for deployments
func GetDeploymentSchema() *walker.Schema {
	// Set up search options if not already done
	if GeneratedDeploymentSchema.OptionsMap == nil {
		GeneratedDeploymentSchema.SetOptionsMap(search.Walk(v1.SearchCategory_DEPLOYMENTS, "deployments", (*storage.Deployment)(nil)))
	}
	return GeneratedDeploymentSchema
}
