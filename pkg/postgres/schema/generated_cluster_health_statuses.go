// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedClusterHealthStatusSearchFields contains pre-computed search fields for cluster_health_statuses
	generatedClusterHealthStatusSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedClusterHealthStatusSchema is the pre-computed schema for cluster_health_statuses table
	generatedClusterHealthStatusSchema = &walker.Schema{
		Table:    "cluster_health_statuses",
		Type:     "storage.ClusterHealthStatus",
		TypeName: "ClusterHealthStatus",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "SensorHealthStatus",
				ColumnName: "SensorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "CollectorHealthStatus",
				ColumnName: "CollectorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "OverallHealthStatus",
				ColumnName: "OverallHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "AdmissionControlHealthStatus",
				ColumnName: "AdmissionControlHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "ScannerHealthStatus",
				ColumnName: "ScannerHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "LastContact",
				ColumnName: "LastContact",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetClusterHealthStatusSchema returns the generated schema for cluster_health_statuses
func GetClusterHealthStatusSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedClusterHealthStatusSchema.OptionsMap == nil {
		generatedClusterHealthStatusSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_HEALTH, generatedClusterHealthStatusSearchFields))
	}
	return generatedClusterHealthStatusSchema
}
