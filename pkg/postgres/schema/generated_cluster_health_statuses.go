// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedClusterHealthStatusSearchFields contains pre-computed search fields for cluster_health_statuses
	generatedClusterHealthStatusSearchFields = map[search.FieldLabel]*search.Field{

		"Sensor": {
			FieldPath: "SensorHealthStatus",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},

		"Collector": {
			FieldPath: "CollectorHealthStatus",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},

		"Cluster": {
			FieldPath: "OverallHealthStatus",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},

		"Admission": {
			FieldPath: "AdmissionControlHealthStatus",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},

		"Scanner": {
			FieldPath: "ScannerHealthStatus",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},

		"Last": {
			FieldPath: "LastContact",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTER_HEALTH,
		},
	}

	// generatedClusterHealthStatusSchema is the pre-computed schema for cluster_health_statuses table
	generatedClusterHealthStatusSchema = &walker.Schema{
		Table:    "cluster_health_statuses",
		Type:     "*storage.ClusterHealthStatus",
		TypeName: "ClusterHealthStatus",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "SensorHealthStatus",
				ColumnName: "sensor_health_status",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Sensor",
				},
			},

			{
				Name:       "CollectorHealthStatus",
				ColumnName: "collector_health_status",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Collector",
				},
			},

			{
				Name:       "OverallHealthStatus",
				ColumnName: "overall_health_status",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "AdmissionControlHealthStatus",
				ColumnName: "admission_control_health_status",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Admission",
				},
			},

			{
				Name:       "ScannerHealthStatus",
				ColumnName: "scanner_health_status",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Scanner",
				},
			},

			{
				Name:       "HealthInfoComplete",
				ColumnName: "health_info_complete",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Cluster,
	}
)

// GetClusterHealthStatusSchema returns the generated schema for cluster_health_statuses
func GetClusterHealthStatusSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedClusterHealthStatusSchema.OptionsMap == nil {
		generatedClusterHealthStatusSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_HEALTH, generatedClusterHealthStatusSearchFields))
	}
	return generatedClusterHealthStatusSchema
}
