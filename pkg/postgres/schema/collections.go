// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableCollectionsStmt holds the create statement for table `collections`.
	CreateTableCollectionsStmt = &postgres.CreateStmts{
		GormModel: (*Collections)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*CollectionsEmbeddedCollections)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// CollectionsSchema is the go schema for table `collections`.
	CollectionsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("collections")
		if schema != nil {
			return schema
		}
		schema = getResourceCollectionSchema()
		schema.ScopingResource = resources.WorkflowAdministration
		RegisterTable(schema, CreateTableCollectionsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COLLECTIONS, schema)
		return schema
	}()
)

const (
	// CollectionsTableName specifies the name of the table in postgres.
	CollectionsTableName = "collections"
	// CollectionsEmbeddedCollectionsTableName specifies the name of the table in postgres.
	CollectionsEmbeddedCollectionsTableName = "collections_embedded_collections"
)

// Collections holds the Gorm model for Postgres table `collections`.
type Collections struct {
	ID            string `gorm:"column:id;type:varchar;primaryKey"`
	Name          string `gorm:"column:name;type:varchar;unique"`
	CreatedByName string `gorm:"column:createdby_name;type:varchar"`
	UpdatedByName string `gorm:"column:updatedby_name;type:varchar"`
	Serialized    []byte `gorm:"column:serialized;type:bytea"`
}

// CollectionsEmbeddedCollections holds the Gorm model for Postgres table `collections_embedded_collections`.
type CollectionsEmbeddedCollections struct {
	CollectionsID       string      `gorm:"column:collections_id;type:varchar;primaryKey"`
	Idx                 int         `gorm:"column:idx;type:integer;primaryKey;index:collectionsembeddedcollections_idx,type:btree"`
	ID                  string      `gorm:"column:id;type:varchar"`
	CollectionsRef      Collections `gorm:"foreignKey:collections_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	CollectionsCycleRef Collections `gorm:"foreignKey:id;references:id;belongsTo;constraint:OnDelete:RESTRICT"`
}

var (
	resourceCollectionSearchFields = map[search.FieldLabel]*search.Field{}

	resourceCollectionSchema = &walker.Schema{
		Table:    "collections",
		Type:     "*storage.ResourceCollection",
		TypeName: "ResourceCollection",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "CreatedBy_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "UpdatedBy_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "collections_embedded_collections",
				Type:     "*storage.ResourceCollection_EmbeddedResourceCollection",
				TypeName: "ResourceCollection_EmbeddedResourceCollection",
				Fields: []walker.Field{
					{
						Name:       "collectionID",
						ColumnName: "collections_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Embedded Collection ID",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getResourceCollectionSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if resourceCollectionSchema.OptionsMap == nil {
		resourceCollectionSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COLLECTIONS, resourceCollectionSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range resourceCollectionSchema.Fields {
		resourceCollectionSchema.Fields[i].Schema = resourceCollectionSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(resourceCollectionSchema)
	return resourceCollectionSchema
}
