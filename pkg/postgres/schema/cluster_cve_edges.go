// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableClusterCveEdgesStmt holds the create statement for table `cluster_cve_edges`.
	CreateTableClusterCveEdgesStmt = &postgres.CreateStmts{
		GormModel: (*ClusterCveEdges)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterCveEdgesSchema is the go schema for table `cluster_cve_edges`.
	ClusterCveEdgesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_cve_edges")
		if schema != nil {
			return schema
		}
		schema = getClusterCVEEdgeSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster":    ClustersSchema,
			"storage.ClusterCVE": ClusterCvesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_CLUSTER_VULNERABILITIES,
			v1.SearchCategory_CLUSTER_VULN_EDGE,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Cluster
		RegisterTable(schema, CreateTableClusterCveEdgesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_CLUSTER_VULN_EDGE, schema)
		return schema
	}()
)

const (
	// ClusterCveEdgesTableName specifies the name of the table in postgres.
	ClusterCveEdgesTableName = "cluster_cve_edges"
)

// ClusterCveEdges holds the Gorm model for Postgres table `cluster_cve_edges`.
type ClusterCveEdges struct {
	ID          string   `gorm:"column:id;type:varchar;primaryKey"`
	IsFixable   bool     `gorm:"column:isfixable;type:bool"`
	FixedBy     string   `gorm:"column:fixedby;type:varchar"`
	ClusterID   string   `gorm:"column:clusterid;type:uuid"`
	CveID       string   `gorm:"column:cveid;type:varchar;index:clustercveedges_cveid,type:hash"`
	Serialized  []byte   `gorm:"column:serialized;type:bytea"`
	ClustersRef Clusters `gorm:"foreignKey:clusterid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	clusterCVEEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	clusterCVEEdgeSchema = &walker.Schema{
		Table:    "cluster_cve_edges",
		Type:     "*storage.ClusterCVEEdge",
		TypeName: "ClusterCVEEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "IsFixable",
				ColumnName: "IsFixable",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "FixedBy",
				ColumnName: "FixedBy",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "CveId",
				ColumnName: "CveId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getClusterCVEEdgeSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if clusterCVEEdgeSchema.OptionsMap == nil {
		clusterCVEEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_VULN_EDGE, clusterCVEEdgeSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range clusterCVEEdgeSchema.Fields {
		clusterCVEEdgeSchema.Fields[i].Schema = clusterCVEEdgeSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(clusterCVEEdgeSchema)
	return clusterCVEEdgeSchema
}
