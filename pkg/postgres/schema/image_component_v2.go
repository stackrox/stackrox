// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImageComponentV2Stmt holds the create statement for table `image_component_v2`.
	CreateTableImageComponentV2Stmt = &postgres.CreateStmts{
		GormModel: (*ImageComponentV2)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageComponentV2Schema is the go schema for table `image_component_v2`.
	ImageComponentV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("image_component_v2")
		if schema != nil {
			return schema
		}
		schema = getImageComponentV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":   ImagesSchema,
			"storage.ImageV2": ImagesV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_IMAGES_V2,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageComponentV2Stmt, features.FlattenCVEData.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGE_COMPONENTS_V2, schema)
		return schema
	}()
)

const (
	// ImageComponentV2TableName specifies the name of the table in postgres.
	ImageComponentV2TableName = "image_component_v2"
)

// ImageComponentV2 holds the Gorm model for Postgres table `image_component_v2`.
type ImageComponentV2 struct {
	ID              string             `gorm:"column:id;type:varchar;primaryKey"`
	Name            string             `gorm:"column:name;type:varchar"`
	Version         string             `gorm:"column:version;type:varchar"`
	Priority        int64              `gorm:"column:priority;type:bigint"`
	Source          storage.SourceType `gorm:"column:source;type:integer"`
	RiskScore       float32            `gorm:"column:riskscore;type:numeric"`
	TopCvss         float32            `gorm:"column:topcvss;type:numeric"`
	OperatingSystem string             `gorm:"column:operatingsystem;type:varchar"`
	ImageID         string             `gorm:"column:imageid;type:varchar;index:imagecomponentv2_imageid,type:btree"`
	Location        string             `gorm:"column:location;type:varchar"`
	ImageIDV2       string             `gorm:"column:imageidv2;type:varchar;index:imagecomponentv2_imageidv2,type:btree"`
	Serialized      []byte             `gorm:"column:serialized;type:bytea"`
	ImagesRef       Images             `gorm:"foreignKey:imageid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	ImagesV2Ref     ImagesV2           `gorm:"foreignKey:imageidv2;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	imageComponentV2SearchFields = map[search.FieldLabel]*search.Field{}

	imageComponentV2Schema = &walker.Schema{
		Table:    "image_component_v2",
		Type:     "*storage.ImageComponentV2",
		TypeName: "ImageComponentV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Source",
				ColumnName: "Source",
				Type:       "storage.SourceType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Location",
				ColumnName: "Location",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageIdV2",
				ColumnName: "ImageIdV2",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getImageComponentV2Schema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if imageComponentV2Schema.OptionsMap == nil {
		imageComponentV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_COMPONENTS_V2, imageComponentV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range imageComponentV2Schema.Fields {
		imageComponentV2Schema.Fields[i].Schema = imageComponentV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(imageComponentV2Schema)
	return imageComponentV2Schema
}
