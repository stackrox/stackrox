// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNodeCvesStmt holds the create statement for table `node_cves`.
	CreateTableNodeCvesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists node_cves (
                   Id varchar,
                   CveBaseInfo_Cve varchar,
                   CveBaseInfo_PublishedOn timestamp,
                   CveBaseInfo_CreatedAt timestamp,
                   Cvss numeric,
                   Severity integer,
                   ImpactScore numeric,
                   Snoozed bool,
                   SnoozeExpiry timestamp,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		GormModel: (*NodeCves)(nil),
		Indexes:   []string{},
		Children:  []*postgres.CreateStmts{},
	}

	// NodeCvesSchema is the go schema for table `node_cves`.
	NodeCvesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("node_cves")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.NodeCVE)(nil)), "node_cves")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_NODE_VULNERABILITIES, "nodecve", (*storage.NodeCVE)(nil)))
		RegisterTable(schema, CreateTableNodeCvesStmt)
		return schema
	}()
)

const (
	NodeCvesTableName = "node_cves"
)

// NodeCves holds the Gorm model for Postgres table `node_cves`.
type NodeCves struct {
	Id                     string                        `gorm:"column:id;type:varchar;primaryKey"`
	CveBaseInfoCve         string                        `gorm:"column:cvebaseinfo_cve;type:varchar"`
	CveBaseInfoPublishedOn *time.Time                    `gorm:"column:cvebaseinfo_publishedon;type:timestamp"`
	CveBaseInfoCreatedAt   *time.Time                    `gorm:"column:cvebaseinfo_createdat;type:timestamp"`
	Cvss                   float32                       `gorm:"column:cvss;type:numeric"`
	Severity               storage.VulnerabilitySeverity `gorm:"column:severity;type:integer"`
	ImpactScore            float32                       `gorm:"column:impactscore;type:numeric"`
	Snoozed                bool                          `gorm:"column:snoozed;type:bool"`
	SnoozeExpiry           *time.Time                    `gorm:"column:snoozeexpiry;type:timestamp"`
	Serialized             []byte                        `gorm:"column:serialized;type:bytea"`
}
