// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableReportMetadataStmt holds the create statement for table `report_metadata`.
	CreateTableReportMetadataStmt = &postgres.CreateStmts{
		GormModel: (*ReportMetadata)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ReportMetadataSchema is the go schema for table `report_metadata`.
	ReportMetadataSchema = func() *walker.Schema {
		schema := GetSchemaForTable("report_metadata")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ReportMetadata)(nil)), "report_metadata")
		referencedSchemas := map[string]*walker.Schema{
			"storage.ReportConfiguration": ReportConfigurationsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_REPORT_METADATA, "reportmetadata", (*storage.ReportMetadata)(nil)))
		RegisterTable(schema, CreateTableReportMetadataStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_REPORT_METADATA, schema)
		return schema
	}()
)

const (
	// ReportMetadataTableName specifies the name of the table in postgres.
	ReportMetadataTableName = "report_metadata"
)

// ReportMetadata holds the Gorm model for Postgres table `report_metadata`.
type ReportMetadata struct {
	ReportID                             string                                  `gorm:"column:reportid;type:uuid;primaryKey"`
	ReportConfigID                       string                                  `gorm:"column:reportconfigid;type:varchar"`
	RequesterName                        string                                  `gorm:"column:requester_name;type:varchar"`
	ReportStatusRunState                 storage.ReportStatus_RunState           `gorm:"column:reportstatus_runstate;type:integer"`
	ReportStatusQueuedAt                 *time.Time                              `gorm:"column:reportstatus_queuedat;type:timestamp"`
	ReportStatusCompletedAt              *time.Time                              `gorm:"column:reportstatus_completedat;type:timestamp"`
	ReportStatusReportRequestType        storage.ReportStatus_RunMethod          `gorm:"column:reportstatus_reportrequesttype;type:integer"`
	ReportStatusReportNotificationMethod storage.ReportStatus_NotificationMethod `gorm:"column:reportstatus_reportnotificationmethod;type:integer"`
	Serialized                           []byte                                  `gorm:"column:serialized;type:bytea"`
	ReportConfigurationsRef              ReportConfigurations                    `gorm:"foreignKey:reportconfigid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
