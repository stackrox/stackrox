// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedReportSnapshotSearchFields contains pre-computed search fields for report_snapshots
	generatedReportSnapshotSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedReportSnapshotSchema is the pre-computed schema for report_snapshots table
	generatedReportSnapshotSchema = &walker.Schema{
		Table:    "report_snapshots",
		Type:     "storage.ReportSnapshot",
		TypeName: "ReportSnapshot",
		Fields: []walker.Field{
			{
				Name:       "ReportId",
				ColumnName: "ReportId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ReportConfigurationId",
				ColumnName: "ReportConfigurationId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "RunState",
				ColumnName: "ReportStatus_RunState",
				Type:       "storage.ReportStatus_RunState",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "QueuedAt",
				ColumnName: "ReportStatus_QueuedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "CompletedAt",
				ColumnName: "ReportStatus_CompletedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "ReportRequestType",
				ColumnName: "ReportStatus_ReportRequestType",
				Type:       "storage.ReportStatus_RunMethod",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "ReportNotificationMethod",
				ColumnName: "ReportStatus_ReportNotificationMethod",
				Type:       "storage.ReportStatus_NotificationMethod",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Id",
				ColumnName: "Requester_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Requester_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "AreaOfConcern",
				ColumnName: "AreaOfConcern",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetReportSnapshotSchema returns the generated schema for report_snapshots
func GetReportSnapshotSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedReportSnapshotSchema.OptionsMap == nil {
		generatedReportSnapshotSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_REPORT_SNAPSHOT, generatedReportSnapshotSearchFields))
	}
	return generatedReportSnapshotSchema
}
