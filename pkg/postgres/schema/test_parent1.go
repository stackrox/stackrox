// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableTestParent1Stmt holds the create statement for table `test_parent1`.
	CreateTableTestParent1Stmt = &postgres.CreateStmts{
		GormModel: (*TestParent1)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*TestParent1Childrens)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// TestParent1Schema is the go schema for table `test_parent1`.
	TestParent1Schema = func() *walker.Schema {
		schema := GetSchemaForTable("test_parent1")
		if schema != nil {
			return schema
		}
		schema = getTestParent1Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.TestGrandparent": TestGrandparentsSchema,
			"storage.TestChild1":      TestChild1Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Namespace
		RegisterTable(schema, CreateTableTestParent1Stmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory(110), schema)
		return schema
	}()
)

const (
	// TestParent1TableName specifies the name of the table in postgres.
	TestParent1TableName = "test_parent1"
	// TestParent1ChildrensTableName specifies the name of the table in postgres.
	TestParent1ChildrensTableName = "test_parent1_childrens"
)

// TestParent1 holds the Gorm model for Postgres table `test_parent1`.
type TestParent1 struct {
	ID                  string           `gorm:"column:id;type:varchar;primaryKey"`
	ParentID            string           `gorm:"column:parentid;type:varchar"`
	Val                 string           `gorm:"column:val;type:varchar"`
	StringSlice         *pq.StringArray  `gorm:"column:stringslice;type:text[]"`
	Serialized          []byte           `gorm:"column:serialized;type:bytea"`
	TestGrandparentsRef TestGrandparents `gorm:"foreignKey:parentid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// TestParent1Childrens holds the Gorm model for Postgres table `test_parent1_childrens`.
type TestParent1Childrens struct {
	TestParent1ID  string      `gorm:"column:test_parent1_id;type:varchar;primaryKey"`
	Idx            int         `gorm:"column:idx;type:integer;primaryKey;index:testparent1childrens_idx,type:btree"`
	ChildID        string      `gorm:"column:childid;type:varchar"`
	TestParent1Ref TestParent1 `gorm:"foreignKey:test_parent1_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	testParent1SearchFields = map[search.FieldLabel]*search.Field{}

	testParent1Schema = &walker.Schema{
		Table:    "test_parent1",
		Type:     "*storage.TestParent1",
		TypeName: "TestParent1",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ParentId",
				ColumnName: "ParentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Val",
				ColumnName: "Val",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "StringSlice",
				ColumnName: "StringSlice",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "test_parent1_childrens",
				Type:     "*storage.TestParent1_Child1Ref",
				TypeName: "TestParent1_Child1Ref",
				Fields: []walker.Field{
					{
						Name:       "testParent1ID",
						ColumnName: "test_parent1_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ChildId",
						ColumnName: "ChildId",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getTestParent1Schema() *walker.Schema {
	// Set up search options if not already done
	if testParent1Schema.OptionsMap == nil {
		testParent1Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(110), testParent1SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range testParent1Schema.Fields {
		testParent1Schema.Fields[i].Schema = testParent1Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(testParent1Schema)
	return testParent1Schema
}
