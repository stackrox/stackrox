// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableAuthMachineToMachineConfigsStmt holds the create statement for table `auth_machine_to_machine_configs`.
	CreateTableAuthMachineToMachineConfigsStmt = &postgres.CreateStmts{
		GormModel: (*AuthMachineToMachineConfigs)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*AuthMachineToMachineConfigsMappings)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// AuthMachineToMachineConfigsSchema is the go schema for table `auth_machine_to_machine_configs`.
	AuthMachineToMachineConfigsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("auth_machine_to_machine_configs")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.AuthMachineToMachineConfig)(nil)), "auth_machine_to_machine_configs")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Role": RolesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Access
		RegisterTable(schema, CreateTableAuthMachineToMachineConfigsStmt)
		return schema
	}()
)

const (
	// AuthMachineToMachineConfigsTableName specifies the name of the table in postgres.
	AuthMachineToMachineConfigsTableName = "auth_machine_to_machine_configs"
	// AuthMachineToMachineConfigsMappingsTableName specifies the name of the table in postgres.
	AuthMachineToMachineConfigsMappingsTableName = "auth_machine_to_machine_configs_mappings"
)

// AuthMachineToMachineConfigs holds the Gorm model for Postgres table `auth_machine_to_machine_configs`.
type AuthMachineToMachineConfigs struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Issuer     string `gorm:"column:issuer;type:varchar;unique"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

// AuthMachineToMachineConfigsMappings holds the Gorm model for Postgres table `auth_machine_to_machine_configs_mappings`.
type AuthMachineToMachineConfigsMappings struct {
	AuthMachineToMachineConfigsID  string                      `gorm:"column:auth_machine_to_machine_configs_id;type:uuid;primaryKey"`
	Idx                            int                         `gorm:"column:idx;type:integer;primaryKey;index:authmachinetomachineconfigsmappings_idx,type:btree"`
	Role                           string                      `gorm:"column:role;type:varchar"`
	AuthMachineToMachineConfigsRef AuthMachineToMachineConfigs `gorm:"foreignKey:auth_machine_to_machine_configs_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	RolesRef                       Roles                       `gorm:"foreignKey:role;references:name;belongsTo;constraint:OnDelete:RESTRICT"`
}
