// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableAuthMachineToMachineConfigsStmt holds the create statement for table `auth_machine_to_machine_configs`.
	CreateTableAuthMachineToMachineConfigsStmt = &postgres.CreateStmts{
		GormModel: (*AuthMachineToMachineConfigs)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// AuthMachineToMachineConfigsSchema is the go schema for table `auth_machine_to_machine_configs`.
	AuthMachineToMachineConfigsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("auth_machine_to_machine_configs")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.AuthMachineToMachineConfig)(nil)), "auth_machine_to_machine_configs")
		schema.ScopingResource = resources.Access
		RegisterTable(schema, CreateTableAuthMachineToMachineConfigsStmt)
		return schema
	}()
)

const (
	// AuthMachineToMachineConfigsTableName specifies the name of the table in postgres.
	AuthMachineToMachineConfigsTableName = "auth_machine_to_machine_configs"
)

// AuthMachineToMachineConfigs holds the Gorm model for Postgres table `auth_machine_to_machine_configs`.
type AuthMachineToMachineConfigs struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
