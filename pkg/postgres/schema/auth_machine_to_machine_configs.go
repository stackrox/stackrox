// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableAuthMachineToMachineConfigsStmt holds the create statement for table `auth_machine_to_machine_configs`.
	CreateTableAuthMachineToMachineConfigsStmt = &postgres.CreateStmts{
		GormModel: (*AuthMachineToMachineConfigs)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*AuthMachineToMachineConfigsMappings)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// AuthMachineToMachineConfigsSchema is the go schema for table `auth_machine_to_machine_configs`.
	AuthMachineToMachineConfigsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("auth_machine_to_machine_configs")
		if schema != nil {
			return schema
		}
		schema = getAuthMachineToMachineConfigSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Role": RolesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Access
		RegisterTable(schema, CreateTableAuthMachineToMachineConfigsStmt)
		return schema
	}()
)

const (
	// AuthMachineToMachineConfigsTableName specifies the name of the table in postgres.
	AuthMachineToMachineConfigsTableName = "auth_machine_to_machine_configs"
	// AuthMachineToMachineConfigsMappingsTableName specifies the name of the table in postgres.
	AuthMachineToMachineConfigsMappingsTableName = "auth_machine_to_machine_configs_mappings"
)

// AuthMachineToMachineConfigs holds the Gorm model for Postgres table `auth_machine_to_machine_configs`.
type AuthMachineToMachineConfigs struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Issuer     string `gorm:"column:issuer;type:varchar;unique"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

// AuthMachineToMachineConfigsMappings holds the Gorm model for Postgres table `auth_machine_to_machine_configs_mappings`.
type AuthMachineToMachineConfigsMappings struct {
	AuthMachineToMachineConfigsID  string                      `gorm:"column:auth_machine_to_machine_configs_id;type:uuid;primaryKey"`
	Idx                            int                         `gorm:"column:idx;type:integer;primaryKey;index:authmachinetomachineconfigsmappings_idx,type:btree"`
	Role                           string                      `gorm:"column:role;type:varchar"`
	AuthMachineToMachineConfigsRef AuthMachineToMachineConfigs `gorm:"foreignKey:auth_machine_to_machine_configs_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	RolesRef                       Roles                       `gorm:"foreignKey:role;references:name;belongsTo;constraint:OnDelete:RESTRICT"`
}

var (
	authMachineToMachineConfigSearchFields = map[search.FieldLabel]*search.Field{}

	authMachineToMachineConfigSchema = &walker.Schema{
		Table:    "auth_machine_to_machine_configs",
		Type:     "*storage.AuthMachineToMachineConfig",
		TypeName: "AuthMachineToMachineConfig",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Issuer",
				ColumnName: "Issuer",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "auth_machine_to_machine_configs_mappings",
				Type:     "*storage.AuthMachineToMachineConfig_Mapping",
				TypeName: "AuthMachineToMachineConfig_Mapping",
				Fields: []walker.Field{
					{
						Name:       "authMachineToMachineConfigID",
						ColumnName: "auth_machine_to_machine_configs_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Role",
						ColumnName: "Role",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getAuthMachineToMachineConfigSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if authMachineToMachineConfigSchema.OptionsMap == nil {
		authMachineToMachineConfigSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, authMachineToMachineConfigSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range authMachineToMachineConfigSchema.Fields {
		authMachineToMachineConfigSchema.Fields[i].Schema = authMachineToMachineConfigSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(authMachineToMachineConfigSchema)
	return authMachineToMachineConfigSchema
}
