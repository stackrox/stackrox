// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedAuthProviderSearchFields contains pre-computed search fields for auth_providers
	generatedAuthProviderSearchFields = map[search.FieldLabel]*search.Field{

		"AuthProvider": {
			FieldPath: "Name",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_AUTH_PROVIDERS,
		},
	}

	// generatedAuthProviderSchema is the pre-computed schema for auth_providers table
	generatedAuthProviderSchema = &walker.Schema{
		Table:    "auth_providers",
		Type:     "*storage.AuthProvider",
		TypeName: "AuthProvider",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "AuthProvider",
				},
			},

			{
				Name:       "Type",
				ColumnName: "type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "UiEndpoint",
				ColumnName: "ui_endpoint",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Enabled",
				ColumnName: "enabled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Config",
				ColumnName: "config",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "LoginUrl",
				ColumnName: "login_url",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Validated",
				ColumnName: "validated",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "ExtraUiEndpoints",
				ColumnName: "extra_ui_endpoints",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "Active",
				ColumnName: "active",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "RequiredAttributes",
				ColumnName: "required_attributes",
				Type:       "[]github.com/stackrox/rox/generated/storage.AuthProvider_RequiredAttribute",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "ClaimMappings",
				ColumnName: "claim_mappings",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Access,
	}
)

// GetAuthProviderSchema returns the generated schema for auth_providers
func GetAuthProviderSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedAuthProviderSchema.OptionsMap == nil {
		generatedAuthProviderSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_AUTH_PROVIDERS, generatedAuthProviderSearchFields))
	}
	return generatedAuthProviderSchema
}
