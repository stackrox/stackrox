// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableVulnerabilityRequestsStmt holds the create statement for table `vulnerability_requests`.
	CreateTableVulnerabilityRequestsStmt = &postgres.CreateStmts{
		GormModel: (*VulnerabilityRequests)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*VulnerabilityRequestsApprovers)(nil),
				Children:  []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				GormModel: (*VulnerabilityRequestsComments)(nil),
				Children:  []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				GormModel: (*VulnerabilityRequestsApproversV2)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// VulnerabilityRequestsSchema is the go schema for table `vulnerability_requests`.
	VulnerabilityRequestsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("vulnerability_requests")
		if schema != nil {
			return schema
		}
		schema = getVulnerabilityRequestSchema()
		schema.ScopingResource = resources.VulnerabilityRequest
		RegisterTable(schema, CreateTableVulnerabilityRequestsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_VULN_REQUEST, schema)
		return schema
	}()
)

const (
	// VulnerabilityRequestsTableName specifies the name of the table in postgres.
	VulnerabilityRequestsTableName = "vulnerability_requests"
	// VulnerabilityRequestsApproversTableName specifies the name of the table in postgres.
	VulnerabilityRequestsApproversTableName = "vulnerability_requests_approvers"
	// VulnerabilityRequestsCommentsTableName specifies the name of the table in postgres.
	VulnerabilityRequestsCommentsTableName = "vulnerability_requests_comments"
	// VulnerabilityRequestsApproversV2TableName specifies the name of the table in postgres.
	VulnerabilityRequestsApproversV2TableName = "vulnerability_requests_approvers_v2"
)

// VulnerabilityRequests holds the Gorm model for Postgres table `vulnerability_requests`.
type VulnerabilityRequests struct {
	ID                                string                           `gorm:"column:id;type:varchar;primaryKey"`
	Name                              string                           `gorm:"column:name;type:varchar;unique"`
	TargetState                       storage.VulnerabilityState       `gorm:"column:targetstate;type:integer"`
	Status                            storage.RequestStatus            `gorm:"column:status;type:integer"`
	Expired                           bool                             `gorm:"column:expired;type:bool"`
	RequestorName                     string                           `gorm:"column:requestor_name;type:varchar"`
	CreatedAt                         *time.Time                       `gorm:"column:createdat;type:timestamp"`
	LastUpdated                       *time.Time                       `gorm:"column:lastupdated;type:timestamp"`
	ScopeImageScopeRegistry           string                           `gorm:"column:scope_imagescope_registry;type:varchar"`
	ScopeImageScopeRemote             string                           `gorm:"column:scope_imagescope_remote;type:varchar"`
	ScopeImageScopeTag                string                           `gorm:"column:scope_imagescope_tag;type:varchar"`
	RequesterV2ID                     string                           `gorm:"column:requesterv2_id;type:varchar"`
	RequesterV2Name                   string                           `gorm:"column:requesterv2_name;type:varchar"`
	DeferralReqExpiryExpiresOn        *time.Time                       `gorm:"column:deferralreq_expiry_expireson;type:timestamp"`
	DeferralReqExpiryExpiresWhenFixed bool                             `gorm:"column:deferralreq_expiry_expireswhenfixed;type:bool"`
	DeferralReqExpiryExpiryType       storage.RequestExpiry_ExpiryType `gorm:"column:deferralreq_expiry_expirytype;type:integer"`
	CvesCves                          *pq.StringArray                  `gorm:"column:cves_cves;type:text[]"`
	DeferralUpdateCVEs                *pq.StringArray                  `gorm:"column:deferralupdate_cves;type:text[]"`
	FalsePositiveUpdateCVEs           *pq.StringArray                  `gorm:"column:falsepositiveupdate_cves;type:text[]"`
	Serialized                        []byte                           `gorm:"column:serialized;type:bytea"`
}

// VulnerabilityRequestsApprovers holds the Gorm model for Postgres table `vulnerability_requests_approvers`.
type VulnerabilityRequestsApprovers struct {
	VulnerabilityRequestsID  string                `gorm:"column:vulnerability_requests_id;type:varchar;primaryKey"`
	Idx                      int                   `gorm:"column:idx;type:integer;primaryKey;index:vulnerabilityrequestsapprovers_idx,type:btree"`
	Name                     string                `gorm:"column:name;type:varchar"`
	VulnerabilityRequestsRef VulnerabilityRequests `gorm:"foreignKey:vulnerability_requests_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// VulnerabilityRequestsComments holds the Gorm model for Postgres table `vulnerability_requests_comments`.
type VulnerabilityRequestsComments struct {
	VulnerabilityRequestsID  string                `gorm:"column:vulnerability_requests_id;type:varchar;primaryKey"`
	Idx                      int                   `gorm:"column:idx;type:integer;primaryKey;index:vulnerabilityrequestscomments_idx,type:btree"`
	UserName                 string                `gorm:"column:user_name;type:varchar"`
	VulnerabilityRequestsRef VulnerabilityRequests `gorm:"foreignKey:vulnerability_requests_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// VulnerabilityRequestsApproversV2 holds the Gorm model for Postgres table `vulnerability_requests_approvers_v2`.
type VulnerabilityRequestsApproversV2 struct {
	VulnerabilityRequestsID  string                `gorm:"column:vulnerability_requests_id;type:varchar;primaryKey"`
	Idx                      int                   `gorm:"column:idx;type:integer;primaryKey;index:vulnerabilityrequestsapproversv2_idx,type:btree"`
	ID                       string                `gorm:"column:id;type:varchar"`
	Name                     string                `gorm:"column:name;type:varchar"`
	VulnerabilityRequestsRef VulnerabilityRequests `gorm:"foreignKey:vulnerability_requests_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	vulnerabilityRequestSearchFields = map[search.FieldLabel]*search.Field{}

	vulnerabilityRequestSchema = &walker.Schema{
		Table:    "vulnerability_requests",
		Type:     "*storage.VulnerabilityRequest",
		TypeName: "VulnerabilityRequest",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "TargetState",
				ColumnName: "TargetState",
				Type:       "storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Status",
				ColumnName: "Status",
				Type:       "storage.RequestStatus",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Expired",
				ColumnName: "Expired",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Name",
				ColumnName: "Requestor_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Registry",
				ColumnName: "Scope_ImageScope_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Scope_ImageScope_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Scope_ImageScope_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Id",
				ColumnName: "RequesterV2_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "RequesterV2_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ExpiresOn",
				ColumnName: "DeferralReq_Expiry_ExpiresOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ExpiresWhenFixed",
				ColumnName: "DeferralReq_Expiry_ExpiresWhenFixed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "ExpiryType",
				ColumnName: "DeferralReq_Expiry_ExpiryType",
				Type:       "storage.RequestExpiry_ExpiryType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Cves",
				ColumnName: "Cves_Cves",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "CVEs",
				ColumnName: "DeferralUpdate_CVEs",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "CVEs",
				ColumnName: "FalsePositiveUpdate_CVEs",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "vulnerability_requests_approvers",
				Type:     "*storage.SlimUser",
				TypeName: "SlimUser",
				Fields: []walker.Field{
					{
						Name:       "vulnerabilityRequestID",
						ColumnName: "vulnerability_requests_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Name",
						ColumnName: "Name",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "User Name",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},

			&walker.Schema{
				Table:    "vulnerability_requests_comments",
				Type:     "*storage.RequestComment",
				TypeName: "RequestComment",
				Fields: []walker.Field{
					{
						Name:       "vulnerabilityRequestID",
						ColumnName: "vulnerability_requests_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Name",
						ColumnName: "User_Name",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "User Name",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},

			&walker.Schema{
				Table:    "vulnerability_requests_approvers_v2",
				Type:     "*storage.Approver",
				TypeName: "Approver",
				Fields: []walker.Field{
					{
						Name:       "vulnerabilityRequestID",
						ColumnName: "vulnerability_requests_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Approver User ID",
							Enabled:   true,
						},
					},
					{
						Name:       "Name",
						ColumnName: "Name",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Approver User Name",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getVulnerabilityRequestSchema() *walker.Schema {
	// Set up search options if not already done
	if vulnerabilityRequestSchema.OptionsMap == nil {
		vulnerabilityRequestSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_VULN_REQUEST, vulnerabilityRequestSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range vulnerabilityRequestSchema.Fields {
		vulnerabilityRequestSchema.Fields[i].Schema = vulnerabilityRequestSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(vulnerabilityRequestSchema)
	return vulnerabilityRequestSchema
}
