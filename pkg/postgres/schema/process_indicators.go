// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableProcessIndicatorsStmt holds the create statement for table `process_indicators`.
	CreateTableProcessIndicatorsStmt = &postgres.CreateStmts{
		GormModel: (*ProcessIndicators)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ProcessIndicatorsSchema is the go schema for table `process_indicators`.
	ProcessIndicatorsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("process_indicators")
		if schema != nil {
			return schema
		}
		schema = getProcessIndicatorSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Deployment": DeploymentsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.DeploymentExtension
		RegisterTable(schema, CreateTableProcessIndicatorsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_PROCESS_INDICATORS, schema)
		return schema
	}()
)

const (
	// ProcessIndicatorsTableName specifies the name of the table in postgres.
	ProcessIndicatorsTableName = "process_indicators"
)

// ProcessIndicators holds the Gorm model for Postgres table `process_indicators`.
type ProcessIndicators struct {
	ID                 string     `gorm:"column:id;type:uuid;primaryKey"`
	DeploymentID       string     `gorm:"column:deploymentid;type:uuid;index:processindicators_deploymentid,type:hash"`
	ContainerName      string     `gorm:"column:containername;type:varchar"`
	PodID              string     `gorm:"column:podid;type:varchar"`
	PodUID             string     `gorm:"column:poduid;type:uuid;index:processindicators_poduid,type:hash"`
	SignalContainerID  string     `gorm:"column:signal_containerid;type:varchar"`
	SignalTime         *time.Time `gorm:"column:signal_time;type:timestamp;index:processindicators_signal_time,type:btree"`
	SignalName         string     `gorm:"column:signal_name;type:varchar"`
	SignalArgs         string     `gorm:"column:signal_args;type:varchar"`
	SignalExecFilePath string     `gorm:"column:signal_execfilepath;type:varchar"`
	SignalUID          uint32     `gorm:"column:signal_uid;type:bigint"`
	ClusterID          string     `gorm:"column:clusterid;type:uuid;index:processindicators_sac_filter,type:btree"`
	Namespace          string     `gorm:"column:namespace;type:varchar;index:processindicators_sac_filter,type:btree"`
	ContainerStartTime *time.Time `gorm:"column:containerstarttime;type:timestamp"`
	Serialized         []byte     `gorm:"column:serialized;type:bytea"`
}

var (
	processIndicatorSearchFields = map[search.FieldLabel]*search.Field{}

	processIndicatorSchema = &walker.Schema{
		Table:    "process_indicators",
		Type:     "*storage.ProcessIndicator",
		TypeName: "ProcessIndicator",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "DeploymentId",
				ColumnName: "DeploymentId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ContainerName",
				ColumnName: "ContainerName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PodId",
				ColumnName: "PodId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PodUid",
				ColumnName: "PodUid",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ContainerId",
				ColumnName: "Signal_ContainerId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Time",
				ColumnName: "Signal_Time",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Name",
				ColumnName: "Signal_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Args",
				ColumnName: "Signal_Args",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ExecFilePath",
				ColumnName: "Signal_ExecFilePath",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Uid",
				ColumnName: "Signal_Uid",
				Type:       "uint32",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getProcessIndicatorSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if processIndicatorSchema.OptionsMap == nil {
		processIndicatorSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_PROCESS_INDICATORS, processIndicatorSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range processIndicatorSchema.Fields {
		processIndicatorSchema.Fields[i].Schema = processIndicatorSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(processIndicatorSchema)
	return processIndicatorSchema
}
