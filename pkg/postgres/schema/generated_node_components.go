// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedNodeComponentSearchFields contains pre-computed search fields for node_components
	generatedNodeComponentSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedNodeComponentSchema is the pre-computed schema for node_components table
	generatedNodeComponentSchema = &walker.Schema{
		Table:    "node_components",
		Type:     "storage.NodeComponent",
		TypeName: "NodeComponent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.String,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetNodeComponentSchema returns the generated schema for node_components
func GetNodeComponentSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedNodeComponentSchema.OptionsMap == nil {
		generatedNodeComponentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODE_COMPONENTS, generatedNodeComponentSearchFields))
	}
	return generatedNodeComponentSchema
}
