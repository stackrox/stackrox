// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageV2SearchFields contains pre-computed search fields for images_v2
	generatedImageV2SearchFields = map[search.FieldLabel]*search.Field{

		"Image": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Component": {
			FieldPath: "ComponentCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Fixable": {
			FieldPath: "FixableCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Unknown": {
			FieldPath: "UnknownCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Critical": {
			FieldPath: "CriticalCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Important": {
			FieldPath: "ImportantCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Moderate": {
			FieldPath: "ModerateCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Low": {
			FieldPath: "LowCveCount",
			Type:      v1.SearchDataType_SEARCH_NUMERIC,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},

		"Last": {
			FieldPath: "LastUpdated",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES_V2,
		},
	}

	// generatedImageV2Schema is the pre-computed schema for images_v2 table
	generatedImageV2Schema = &walker.Schema{
		Table:    "images_v2",
		Type:     "*storage.ImageV2",
		TypeName: "ImageV2",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "Sha",
				ColumnName: "sha",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "ComponentCount",
				ColumnName: "component_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Component",
				},
			},

			{
				Name:       "CveCount",
				ColumnName: "cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "FixableCveCount",
				ColumnName: "fixable_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "UnknownCveCount",
				ColumnName: "unknown_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Unknown",
				},
			},

			{
				Name:       "FixableUnknownCveCount",
				ColumnName: "fixable_unknown_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "CriticalCveCount",
				ColumnName: "critical_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Critical",
				},
			},

			{
				Name:       "FixableCriticalCveCount",
				ColumnName: "fixable_critical_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "ImportantCveCount",
				ColumnName: "important_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Important",
				},
			},

			{
				Name:       "FixableImportantCveCount",
				ColumnName: "fixable_important_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "ModerateCveCount",
				ColumnName: "moderate_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Moderate",
				},
			},

			{
				Name:       "FixableModerateCveCount",
				ColumnName: "fixable_moderate_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "LowCveCount",
				ColumnName: "low_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Low",
				},
			},

			{
				Name:       "FixableLowCveCount",
				ColumnName: "fixable_low_cve_count",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable",
				},
			},

			{
				Name:       "NotPullable",
				ColumnName: "not_pullable",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "IsClusterLocal",
				ColumnName: "is_cluster_local",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Priority",
				ColumnName: "priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "RiskScore",
				ColumnName: "risk_score",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "TopCvss",
				ColumnName: "top_cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "Notes",
				ColumnName: "notes",
				Type:       "[]github.com/stackrox/rox/generated/storage.ImageV2_Note",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Image,
	}
)

// GetImageV2Schema returns the generated schema for images_v2
func GetImageV2Schema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageV2Schema.OptionsMap == nil {
		generatedImageV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGES_V2, generatedImageV2SearchFields))
	}
	return generatedImageV2Schema
}
