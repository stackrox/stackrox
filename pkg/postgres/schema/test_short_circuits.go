// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableTestShortCircuitsStmt holds the create statement for table `test_short_circuits`.
	CreateTableTestShortCircuitsStmt = &postgres.CreateStmts{
		GormModel: (*TestShortCircuits)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// TestShortCircuitsSchema is the go schema for table `test_short_circuits`.
	TestShortCircuitsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("test_short_circuits")
		if schema != nil {
			return schema
		}
		schema = getTestShortCircuitSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.TestChild1":        TestChild1Schema,
			"storage.TestG2GrandChild1": TestG2GrandChild1Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Namespace
		RegisterTable(schema, CreateTableTestShortCircuitsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory(114), schema)
		return schema
	}()
)

const (
	// TestShortCircuitsTableName specifies the name of the table in postgres.
	TestShortCircuitsTableName = "test_short_circuits"
)

// TestShortCircuits holds the Gorm model for Postgres table `test_short_circuits`.
type TestShortCircuits struct {
	ID             string `gorm:"column:id;type:varchar;primaryKey"`
	ChildID        string `gorm:"column:childid;type:varchar"`
	G2GrandchildID string `gorm:"column:g2grandchildid;type:varchar"`
	Serialized     []byte `gorm:"column:serialized;type:bytea"`
}

var (
	testShortCircuitSearchFields = map[search.FieldLabel]*search.Field{}

	testShortCircuitSchema = &walker.Schema{
		Table:    "test_short_circuits",
		Type:     "*storage.TestShortCircuit",
		TypeName: "TestShortCircuit",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ChildId",
				ColumnName: "ChildId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "G2GrandchildId",
				ColumnName: "G2GrandchildId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getTestShortCircuitSchema() *walker.Schema {
	// Set up search options if not already done
	if testShortCircuitSchema.OptionsMap == nil {
		testShortCircuitSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(114), testShortCircuitSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range testShortCircuitSchema.Fields {
		testShortCircuitSchema.Fields[i].Schema = testShortCircuitSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(testShortCircuitSchema)
	return testShortCircuitSchema
}
