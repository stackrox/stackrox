// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableNotificationsStmt holds the create statement for table `notifications`.
	CreateTableNotificationsStmt = &postgres.CreateStmts{
		GormModel: (*Notifications)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// NotificationsSchema is the go schema for table `notifications`.
	NotificationsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("notifications")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.Notification)(nil)), "notifications")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_NOTIFICATIONS, "notification", (*storage.Notification)(nil)))
		RegisterTable(schema, CreateTableNotificationsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_NOTIFICATIONS, schema)
		return schema
	}()
)

const (
	// NotificationsTableName specifies the name of the table in postgres.
	NotificationsTableName = "notifications"
)

// Notifications holds the Gorm model for Postgres table `notifications`.
type Notifications struct {
	ID           string                    `gorm:"column:id;type:uuid;primaryKey"`
	Type         storage.NotificationType  `gorm:"column:type;type:integer"`
	Level        storage.NotificationLevel `gorm:"column:level;type:integer"`
	Domain       string                    `gorm:"column:domain;type:varchar"`
	ResourceType string                    `gorm:"column:resourcetype;type:varchar"`
	LastOccurred *time.Time                `gorm:"column:lastoccurred;type:timestamp"`
	CreatedAt    *time.Time                `gorm:"column:createdat;type:timestamp"`
	Serialized   []byte                    `gorm:"column:serialized;type:bytea"`
}
