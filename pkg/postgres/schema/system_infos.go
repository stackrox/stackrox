// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableSystemInfosStmt holds the create statement for table `system_infos`.
	CreateTableSystemInfosStmt = &postgres.CreateStmts{
		GormModel: (*SystemInfos)(nil),
		Children:  []*postgres.CreateStmts{},
		PostStmts: []string{
			"ALTER TABLE system_infos REPLICA IDENTITY FULL",
		},
	}

	// SystemInfosSchema is the go schema for table `system_infos`.
	SystemInfosSchema = func() *walker.Schema {
		schema := GetSchemaForTable("system_infos")
		if schema != nil {
			return schema
		}
		schema = getSystemInfoSchema()
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableSystemInfosStmt)
		return schema
	}()
)

const (
	// SystemInfosTableName specifies the name of the table in postgres.
	SystemInfosTableName = "system_infos"
)

// SystemInfos holds the Gorm model for Postgres table `system_infos`.
type SystemInfos struct {
	BackupInfoRequestorName string `gorm:"column:backupinfo_requestor_name;type:varchar"`
	Serialized              []byte `gorm:"column:serialized;type:bytea"`
}

var (
	systemInfoSearchFields = map[search.FieldLabel]*search.Field{}

	systemInfoSchema = &walker.Schema{
		Table:    "system_infos",
		Type:     "*storage.SystemInfo",
		TypeName: "SystemInfo",
		Fields: []walker.Field{
			{
				Name:       "Name",
				ColumnName: "BackupInfo_Requestor_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getSystemInfoSchema() *walker.Schema {
	// Set up search options if not already done
	if systemInfoSchema.OptionsMap == nil {
		systemInfoSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, systemInfoSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range systemInfoSchema.Fields {
		systemInfoSchema.Fields[i].Schema = systemInfoSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(systemInfoSchema)
	return systemInfoSchema
}
