// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImageCvesV2Stmt holds the create statement for table `image_cves_v2`.
	CreateTableImageCvesV2Stmt = &postgres.CreateStmts{
		GormModel: (*ImageCvesV2)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageCvesV2Schema is the go schema for table `image_cves_v2`.
	ImageCvesV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("image_cves_v2")
		if schema != nil {
			return schema
		}
		schema = getImageCVEV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":            ImagesSchema,
			"storage.ImageComponentV2": ImageComponentV2Schema,
			"storage.ImageV2":          ImagesV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_IMAGES_V2,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageCvesV2Stmt, features.FlattenCVEData.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGE_VULNERABILITIES_V2, schema)
		return schema
	}()
)

const (
	// ImageCvesV2TableName specifies the name of the table in postgres.
	ImageCvesV2TableName = "image_cves_v2"
)

// ImageCvesV2 holds the Gorm model for Postgres table `image_cves_v2`.
type ImageCvesV2 struct {
	ID                             string                        `gorm:"column:id;type:varchar;primaryKey"`
	ImageID                        string                        `gorm:"column:imageid;type:varchar;index:imagecvesv2_imageid,type:btree"`
	CveBaseInfoCve                 string                        `gorm:"column:cvebaseinfo_cve;type:varchar;index:imagecvesv2_cvebaseinfo_cve,type:btree"`
	CveBaseInfoPublishedOn         *time.Time                    `gorm:"column:cvebaseinfo_publishedon;type:timestamp"`
	CveBaseInfoCreatedAt           *time.Time                    `gorm:"column:cvebaseinfo_createdat;type:timestamp"`
	CveBaseInfoEpssEpssProbability float32                       `gorm:"column:cvebaseinfo_epss_epssprobability;type:numeric"`
	Cvss                           float32                       `gorm:"column:cvss;type:numeric"`
	Severity                       storage.VulnerabilitySeverity `gorm:"column:severity;type:integer;index:imagecvesv2_severity,type:btree"`
	ImpactScore                    float32                       `gorm:"column:impactscore;type:numeric"`
	Nvdcvss                        float32                       `gorm:"column:nvdcvss;type:numeric"`
	FirstImageOccurrence           *time.Time                    `gorm:"column:firstimageoccurrence;type:timestamp"`
	State                          storage.VulnerabilityState    `gorm:"column:state;type:integer;index:imagecvesv2_state,type:btree"`
	IsFixable                      bool                          `gorm:"column:isfixable;type:bool"`
	FixedBy                        string                        `gorm:"column:fixedby;type:varchar"`
	ComponentID                    string                        `gorm:"column:componentid;type:varchar;index:imagecvesv2_componentid,type:btree"`
	AdvisoryName                   string                        `gorm:"column:advisory_name;type:varchar"`
	AdvisoryLink                   string                        `gorm:"column:advisory_link;type:varchar"`
	ImageIDV2                      string                        `gorm:"column:imageidv2;type:varchar;index:imagecvesv2_imageidv2,type:btree"`
	Serialized                     []byte                        `gorm:"column:serialized;type:bytea"`
	ImagesRef                      Images                        `gorm:"foreignKey:imageid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	ImageComponentV2Ref            ImageComponentV2              `gorm:"foreignKey:componentid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	ImagesV2Ref                    ImagesV2                      `gorm:"foreignKey:imageidv2;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	imageCVEV2SearchFields = map[search.FieldLabel]*search.Field{}

	imageCVEV2Schema = &walker.Schema{
		Table:    "image_cves_v2",
		Type:     "*storage.ImageCVEV2",
		TypeName: "ImageCVEV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Cve",
				ColumnName: "CveBaseInfo_Cve",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PublishedOn",
				ColumnName: "CveBaseInfo_PublishedOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CveBaseInfo_CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "EpssProbability",
				ColumnName: "CveBaseInfo_Epss_EpssProbability",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Cvss",
				ColumnName: "Cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.VulnerabilitySeverity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ImpactScore",
				ColumnName: "ImpactScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Nvdcvss",
				ColumnName: "Nvdcvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "FirstImageOccurrence",
				ColumnName: "FirstImageOccurrence",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "State",
				ColumnName: "State",
				Type:       "storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "IsFixable",
				ColumnName: "IsFixable",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "FixedBy",
				ColumnName: "FixedBy",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ComponentId",
				ColumnName: "ComponentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Advisory_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Link",
				ColumnName: "Advisory_Link",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageIdV2",
				ColumnName: "ImageIdV2",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getImageCVEV2Schema() *walker.Schema {
	// Set up search options if not already done
	if imageCVEV2Schema.OptionsMap == nil {
		imageCVEV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULNERABILITIES_V2, imageCVEV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range imageCVEV2Schema.Fields {
		imageCVEV2Schema.Fields[i].Schema = imageCVEV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(imageCVEV2Schema)
	return imageCVEV2Schema
}
