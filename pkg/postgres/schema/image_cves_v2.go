// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImageCvesV2Stmt holds the create statement for table `image_cves_v2`.
	CreateTableImageCvesV2Stmt = &postgres.CreateStmts{
		GormModel: (*ImageCvesV2)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageCvesV2Schema is the go schema for table `image_cves_v2`.
	ImageCvesV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("image_cves_v2")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ImageCVEV2)(nil)), "image_cves_v2")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":            ImagesSchema,
			"storage.ImageComponentV2": ImageComponentV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_IMAGE_VULNERABILITIES_V2, "imagecvev2", (*storage.ImageCVEV2)(nil)))
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageCvesV2Stmt, features.FlattenCVEData.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGE_VULNERABILITIES_V2, schema)
		return schema
	}()
)

const (
	// ImageCvesV2TableName specifies the name of the table in postgres.
	ImageCvesV2TableName = "image_cves_v2"
)

// ImageCvesV2 holds the Gorm model for Postgres table `image_cves_v2`.
type ImageCvesV2 struct {
	ID                             string                        `gorm:"column:id;type:varchar;primaryKey"`
	ImageID                        string                        `gorm:"column:imageid;type:varchar;index:imagecvesv2_imageid,type:btree"`
	CveBaseInfoCve                 string                        `gorm:"column:cvebaseinfo_cve;type:varchar;index:imagecvesv2_cvebaseinfo_cve,type:btree"`
	CveBaseInfoPublishedOn         *time.Time                    `gorm:"column:cvebaseinfo_publishedon;type:timestamp"`
	CveBaseInfoCreatedAt           *time.Time                    `gorm:"column:cvebaseinfo_createdat;type:timestamp"`
	CveBaseInfoEpssEpssProbability float32                       `gorm:"column:cvebaseinfo_epss_epssprobability;type:numeric"`
	OperatingSystem                string                        `gorm:"column:operatingsystem;type:varchar"`
	Cvss                           float32                       `gorm:"column:cvss;type:numeric"`
	Severity                       storage.VulnerabilitySeverity `gorm:"column:severity;type:integer;index:imagecvesv2_severity,type:btree"`
	ImpactScore                    float32                       `gorm:"column:impactscore;type:numeric"`
	Nvdcvss                        float32                       `gorm:"column:nvdcvss;type:numeric"`
	FirstImageOccurrence           *time.Time                    `gorm:"column:firstimageoccurrence;type:timestamp"`
	State                          storage.VulnerabilityState    `gorm:"column:state;type:integer;index:imagecvesv2_state,type:btree"`
	IsFixable                      bool                          `gorm:"column:isfixable;type:bool"`
	FixedBy                        string                        `gorm:"column:fixedby;type:varchar"`
	ComponentID                    string                        `gorm:"column:componentid;type:varchar;index:imagecvesv2_componentid,type:btree"`
	Advisory                       string                        `gorm:"column:advisory;type:varchar"`
	Serialized                     []byte                        `gorm:"column:serialized;type:bytea"`
	ImagesRef                      Images                        `gorm:"foreignKey:imageid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	ImageComponentV2Ref            ImageComponentV2              `gorm:"foreignKey:componentid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
