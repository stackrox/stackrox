// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// GeneratedAlertSearchFields contains pre-computed search fields for alerts
	GeneratedAlertSearchFields = map[search.FieldLabel]*search.Field{

		"Alert": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Lifecycle": {
			FieldPath: "LifecycleStage",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Namespace": {
			FieldPath: "Namespace",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Violation": {
			FieldPath: "Time",
			Type:      v1.SearchDataType_SEARCH_DATETIME,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Platform": {
			FieldPath: "PlatformComponent",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},

		"Entity": {
			FieldPath: "EntityType",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ALERTS,
		},
	}

	// GeneratedAlertSchema is the pre-computed schema for alerts table
	GeneratedAlertSchema = &walker.Schema{
		Table:    "alerts",
		Type:     "*storage.Alert",
		TypeName: "Alert",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Alert",
				},
			},

			{
				Name:       "LifecycleStage",
				ColumnName: "lifecycle_stage",
				Type:       "github.com/stackrox/rox/generated/storage.LifecycleStage",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Lifecycle",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "ClusterName",
				ColumnName: "cluster_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster,store",
				},
			},

			{
				Name:       "Namespace",
				ColumnName: "namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace,store",
				},
			},

			{
				Name:       "NamespaceId",
				ColumnName: "namespace_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace",
				},
			},

			{
				Name:       "Entity",
				ColumnName: "entity",
				Type:       "github.com/stackrox/rox/generated/storage.isAlert_Entity",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Violations",
				ColumnName: "violations",
				Type:       "[]github.com/stackrox/rox/generated/storage.Alert_Violation",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "-",
				},
			},

			{
				Name:       "State",
				ColumnName: "state",
				Type:       "github.com/stackrox/rox/generated/storage.ViolationState",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Violation",
				},
			},

			{
				Name:       "PlatformComponent",
				ColumnName: "platform_component",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Platform",
				},
			},

			{
				Name:       "EntityType",
				ColumnName: "entity_type",
				Type:       "github.com/stackrox/rox/generated/storage.Alert_EntityType",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Entity",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Alert,
	}
)

// GetAlertSchema returns the generated schema for alerts
func GetAlertSchema() *walker.Schema {
	// Set up search options if not already done
	if GeneratedAlertSchema.OptionsMap == nil {
		GeneratedAlertSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ALERTS, GeneratedAlertSearchFields))
	}
	return GeneratedAlertSchema
}
