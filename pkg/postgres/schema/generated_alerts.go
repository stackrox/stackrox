// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedAlertSearchFields contains pre-computed search fields for alerts
	generatedAlertSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedAlertSchema is the pre-computed schema for alerts table
	generatedAlertSchema = &walker.Schema{
		Table:    "alerts",
		Type:     "storage.Alert",
		TypeName: "Alert",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Id",
				ColumnName: "Policy_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Policy_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Description",
				ColumnName: "Policy_Description",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Disabled",
				ColumnName: "Policy_Disabled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "Categories",
				ColumnName: "Policy_Categories",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.String,
			},
			{
				Name:       "Severity",
				ColumnName: "Policy_Severity",
				Type:       "storage.Severity",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "EnforcementActions",
				ColumnName: "Policy_EnforcementActions",
				Type:       "[]storage.EnforcementAction",
				SQLType:    "int[]",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "Policy_LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTName",
				ColumnName: "Policy_SORTName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTLifecycleStage",
				ColumnName: "Policy_SORTLifecycleStage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTEnforcement",
				ColumnName: "Policy_SORTEnforcement",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "LifecycleStage",
				ColumnName: "LifecycleStage",
				Type:       "storage.LifecycleStage",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "NamespaceId",
				ColumnName: "NamespaceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Id",
				ColumnName: "Deployment_Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Deployment_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Inactive",
				ColumnName: "Deployment_Inactive",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "Id",
				ColumnName: "Image_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Registry",
				ColumnName: "Image_Name_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Image_Name_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Image_Name_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "FullName",
				ColumnName: "Image_Name_FullName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "IdV2",
				ColumnName: "Image_IdV2",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ResourceType",
				ColumnName: "Resource_ResourceType",
				Type:       "storage.Alert_Resource_ResourceType",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Resource_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Action",
				ColumnName: "Enforcement_Action",
				Type:       "storage.EnforcementAction",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Time",
				ColumnName: "Time",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "State",
				ColumnName: "State",
				Type:       "storage.ViolationState",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "PlatformComponent",
				ColumnName: "PlatformComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "EntityType",
				ColumnName: "EntityType",
				Type:       "storage.Alert_EntityType",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetAlertSchema returns the generated schema for alerts
func GetAlertSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedAlertSchema.OptionsMap == nil {
		generatedAlertSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ALERTS, generatedAlertSearchFields))
	}
	return generatedAlertSchema
}
