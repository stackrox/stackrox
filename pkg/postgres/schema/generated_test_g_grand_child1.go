// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedTestGGrandChild1SearchFields contains pre-computed search fields for test_g_grand_child1
	generatedTestGGrandChild1SearchFields = map[search.FieldLabel]*search.Field{}

	// generatedTestGGrandChild1Schema is the pre-computed schema for test_g_grand_child1 table
	generatedTestGGrandChild1Schema = &walker.Schema{
		Table:    "test_g_grand_child1",
		Type:     "storage.TestGGrandChild1",
		TypeName: "TestGGrandChild1",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Val",
				ColumnName: "Val",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetTestGGrandChild1Schema returns the generated schema for test_g_grand_child1
func GetTestGGrandChild1Schema() *walker.Schema {
	// Set up search options if not already done
	if generatedTestGGrandChild1Schema.OptionsMap == nil {
		generatedTestGGrandChild1Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(107), generatedTestGGrandChild1SearchFields))
	}
	return generatedTestGGrandChild1Schema
}
