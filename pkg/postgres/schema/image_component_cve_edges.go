// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableImageComponentCveEdgesStmt holds the create statement for table `image_component_cve_edges`.
	CreateTableImageComponentCveEdgesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists image_component_cve_edges (
                   Id varchar,
                   IsFixable bool,
                   FixedBy varchar,
                   ImageComponentId varchar,
                   ImageCveId varchar,
                   serialized bytea,
                   PRIMARY KEY(Id),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (ImageComponentId) REFERENCES image_components(Id) ON DELETE CASCADE
               )
               `,
		GormModel: (*ImageComponentCveEdges)(nil),
		Indexes:   []string{},
		Children:  []*postgres.CreateStmts{},
	}

	// ImageComponentCveEdgesSchema is the go schema for table `image_component_cve_edges`.
	ImageComponentCveEdgesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("image_component_cve_edges")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ComponentCVEEdge)(nil)), "image_component_cve_edges")
		referencedSchemas := map[string]*walker.Schema{
			"storage.ImageComponent": ImageComponentsSchema,
			"storage.CVE":            ImageCvesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_COMPONENT_VULN_EDGE, "componentcveedge", (*storage.ComponentCVEEdge)(nil)))
		RegisterTable(schema, CreateTableImageComponentCveEdgesStmt)
		return schema
	}()
)

const (
	ImageComponentCveEdgesTableName = "image_component_cve_edges"
)

// ImageComponentCveEdges holds the Gorm model for Postgres table `image_component_cve_edges`.
type ImageComponentCveEdges struct {
	Id                 string          `gorm:"column:id;type:varchar;primaryKey"`
	IsFixable          bool            `gorm:"column:isfixable;type:bool"`
	FixedBy            string          `gorm:"column:fixedby;type:varchar"`
	ImageComponentId   string          `gorm:"column:imagecomponentid;type:varchar"`
	ImageCveId         string          `gorm:"column:imagecveid;type:varchar"`
	Serialized         []byte          `gorm:"column:serialized;type:bytea"`
	ImageComponentsRef ImageComponents `gorm:"foreignKey:imagecomponentid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
