// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedNodeSearchFields contains pre-computed search fields for nodes
	generatedNodeSearchFields = map[search.FieldLabel]*search.Field{

		"Node": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},

		"Operating": {
			FieldPath: "OsImage",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},

		"Last": {
			FieldPath: "LastUpdated",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
	}

	// generatedNodeSchema is the pre-computed schema for nodes table
	generatedNodeSchema = &walker.Schema{
		Table:    "nodes",
		Type:     "*storage.Node",
		TypeName: "Node",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node",
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node,store",
				},
			},

			{
				Name:       "Taints",
				ColumnName: "taints",
				Type:       "[]github.com/stackrox/rox/generated/storage.Taint",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "ClusterName",
				ColumnName: "cluster_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster,store",
				},
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node",
				},
			},

			{
				Name:       "Annotations",
				ColumnName: "annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node",
				},
			},

			{
				Name:       "InternalIpAddresses",
				ColumnName: "internal_ip_addresses",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "ExternalIpAddresses",
				ColumnName: "external_ip_addresses",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "ContainerRuntimeVersion",
				ColumnName: "container_runtime_version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "KernelVersion",
				ColumnName: "kernel_version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "OperatingSystem",
				ColumnName: "operating_system",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "OsImage",
				ColumnName: "os_image",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Operating",
				},
			},

			{
				Name:       "KubeletVersion",
				ColumnName: "kubelet_version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "KubeProxyVersion",
				ColumnName: "kube_proxy_version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "SetComponents",
				ColumnName: "set_components",
				Type:       "github.com/stackrox/rox/generated/storage.isNode_SetComponents",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "SetCves",
				ColumnName: "set_cves",
				Type:       "github.com/stackrox/rox/generated/storage.isNode_SetCves",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "SetFixable",
				ColumnName: "set_fixable",
				Type:       "github.com/stackrox/rox/generated/storage.isNode_SetFixable",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Priority",
				ColumnName: "priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node",
				},
			},

			{
				Name:       "RiskScore",
				ColumnName: "risk_score",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Node",
				},
			},

			{
				Name:       "SetTopCvss",
				ColumnName: "set_top_cvss",
				Type:       "github.com/stackrox/rox/generated/storage.isNode_SetTopCvss",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Notes",
				ColumnName: "notes",
				Type:       "[]github.com/stackrox/rox/generated/storage.Node_Note",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Node,
	}
)

// GetNodeSchema returns the generated schema for nodes
func GetNodeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedNodeSchema.OptionsMap == nil {
		generatedNodeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODES, generatedNodeSearchFields))
	}
	return generatedNodeSchema
}
