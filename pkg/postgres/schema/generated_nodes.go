// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedNodeSearchFields contains pre-computed search fields for nodes
	generatedNodeSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedNodeSchema is the pre-computed schema for nodes table
	generatedNodeSchema = &walker.Schema{
		Table:    "nodes",
		Type:     "storage.Node",
		TypeName: "Node",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.String,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.String,
			},
			{
				Name:       "JoinedAt",
				ColumnName: "JoinedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "Version",
				ColumnName: "ContainerRuntime_Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "OsImage",
				ColumnName: "OsImage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "ScanTime",
				ColumnName: "Scan_ScanTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "Components",
				ColumnName: "Components",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Cves",
				ColumnName: "Cves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "FixableCves",
				ColumnName: "FixableCves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.String,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetNodeSchema returns the generated schema for nodes
func GetNodeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedNodeSchema.OptionsMap == nil {
		generatedNodeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODES, generatedNodeSearchFields))
	}
	return generatedNodeSchema
}
