// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedActiveComponentSearchFields contains pre-computed search fields for active_components
	generatedActiveComponentSearchFields = map[search.FieldLabel]*search.Field{

		"Image": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ACTIVE_COMPONENT,
		},

		"Deployment": {
			FieldPath: "DeploymentId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ACTIVE_COMPONENT,
		},

		"Component": {
			FieldPath: "ComponentId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ACTIVE_COMPONENT,
		},
	}

	// generatedActiveComponentSchema is the pre-computed schema for active_components table
	generatedActiveComponentSchema = &walker.Schema{
		Table:    "active_components",
		Type:     "*storage.ActiveComponent",
		TypeName: "ActiveComponent",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "DeploymentId",
				ColumnName: "deployment_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "ComponentId",
				ColumnName: "component_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Component",
				},
			},

			{
				Name:       "DEPRECATEDActiveContexts",
				ColumnName: "d_e_p_r_e_c_a_t_e_d_active_contexts",
				Type:       "map[string]*github.com/stackrox/rox/generated/storage.ActiveComponent_ActiveContext",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "-",
				},
			},

			{
				Name:       "ActiveContextsSlice",
				ColumnName: "active_contexts_slice",
				Type:       "[]github.com/stackrox/rox/generated/storage.ActiveComponent_ActiveContext",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Deployment,
	}
)

// GetActiveComponentSchema returns the generated schema for active_components
func GetActiveComponentSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedActiveComponentSchema.OptionsMap == nil {
		generatedActiveComponentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ACTIVE_COMPONENT, generatedActiveComponentSearchFields))
	}
	return generatedActiveComponentSchema
}
