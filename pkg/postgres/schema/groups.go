// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableGroupsStmt holds the create statement for table `groups`.
	CreateTableGroupsStmt = &postgres.CreateStmts{
		GormModel: (*Groups)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// GroupsSchema is the go schema for table `groups`.
	GroupsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("groups")
		if schema != nil {
			return schema
		}
		schema = getGroupSchema()
		schema.ScopingResource = resources.Access
		RegisterTable(schema, CreateTableGroupsStmt)
		return schema
	}()
)

const (
	// GroupsTableName specifies the name of the table in postgres.
	GroupsTableName = "groups"
)

// Groups holds the Gorm model for Postgres table `groups`.
type Groups struct {
	PropsID             string `gorm:"column:props_id;type:varchar;primaryKey"`
	PropsAuthProviderID string `gorm:"column:props_authproviderid;type:varchar;uniqueIndex:groups_unique_indicator"`
	PropsKey            string `gorm:"column:props_key;type:varchar;uniqueIndex:groups_unique_indicator"`
	PropsValue          string `gorm:"column:props_value;type:varchar;uniqueIndex:groups_unique_indicator"`
	RoleName            string `gorm:"column:rolename;type:varchar;uniqueIndex:groups_unique_indicator"`
	Serialized          []byte `gorm:"column:serialized;type:bytea"`
}

var (
	groupSearchFields = map[search.FieldLabel]*search.Field{}

	groupSchema = &walker.Schema{
		Table:    "groups",
		Type:     "*storage.Group",
		TypeName: "Group",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Props_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "AuthProviderId",
				ColumnName: "Props_AuthProviderId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Key",
				ColumnName: "Props_Key",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Value",
				ColumnName: "Props_Value",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "RoleName",
				ColumnName: "RoleName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getGroupSchema() *walker.Schema {
	// Set up search options if not already done
	if groupSchema.OptionsMap == nil {
		groupSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, groupSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range groupSchema.Fields {
		groupSchema.Fields[i].Schema = groupSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(groupSchema)
	return groupSchema
}
