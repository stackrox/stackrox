// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedComplianceOperatorCheckResultV2SearchFields contains pre-computed search fields for compliance_operator_check_result_v2
	generatedComplianceOperatorCheckResultV2SearchFields = map[search.FieldLabel]*search.Field{

		"Compliance": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_CHECK_RESULTS,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_CHECK_RESULTS,
		},

		"Scan": {
			FieldPath: "ScanRefId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_CHECK_RESULTS,
		},

		"Rule": {
			FieldPath: "RuleRefId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_CHECK_RESULTS,
		},
	}

	// generatedComplianceOperatorCheckResultV2Schema is the pre-computed schema for compliance_operator_check_result_v2 table
	generatedComplianceOperatorCheckResultV2Schema = &walker.Schema{
		Table:    "compliance_operator_check_result_v2",
		Type:     "*storage.ComplianceOperatorCheckResultV2",
		TypeName: "ComplianceOperatorCheckResultV2",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "CheckId",
				ColumnName: "check_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "CheckName",
				ColumnName: "check_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Status",
				ColumnName: "status",
				Type:       "github.com/stackrox/rox/generated/storage.ComplianceOperatorCheckResultV2_CheckStatus",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "Severity",
				ColumnName: "severity",
				Type:       "github.com/stackrox/rox/generated/storage.RuleSeverity",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "Description",
				ColumnName: "description",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Instructions",
				ColumnName: "instructions",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Annotations",
				ColumnName: "annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "ValuesUsed",
				ColumnName: "values_used",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "Warnings",
				ColumnName: "warnings",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "ScanName",
				ColumnName: "scan_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ClusterName",
				ColumnName: "cluster_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ScanConfigName",
				ColumnName: "scan_config_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "Rationale",
				ColumnName: "rationale",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "ScanRefId",
				ColumnName: "scan_ref_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Scan",
				},
			},

			{
				Name:       "RuleRefId",
				ColumnName: "rule_ref_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Rule",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Compliance,
	}
)

// GetComplianceOperatorCheckResultV2Schema returns the generated schema for compliance_operator_check_result_v2
func GetComplianceOperatorCheckResultV2Schema() *walker.Schema {
	// Set up search options if not already done
	if generatedComplianceOperatorCheckResultV2Schema.OptionsMap == nil {
		generatedComplianceOperatorCheckResultV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_CHECK_RESULTS, generatedComplianceOperatorCheckResultV2SearchFields))
	}
	return generatedComplianceOperatorCheckResultV2Schema
}
