// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// GeneratedImageSchema is the pre-computed schema for images table
	GeneratedImageSchema = &walker.Schema{
		Table:    "images",
		Type:     "*storage.Image",
		TypeName: "Image",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "Names",
				ColumnName: "names",
				Type:       "[]github.com/stackrox/rox/generated/storage.ImageName",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "-",
				},
			},

			{
				Name:       "SetComponents",
				ColumnName: "set_components",
				Type:       "github.com/stackrox/rox/generated/storage.isImage_SetComponents",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "SetCves",
				ColumnName: "set_cves",
				Type:       "github.com/stackrox/rox/generated/storage.isImage_SetCves",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "SetFixable",
				ColumnName: "set_fixable",
				Type:       "github.com/stackrox/rox/generated/storage.isImage_SetFixable",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "NotPullable",
				ColumnName: "not_pullable",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "IsClusterLocal",
				ColumnName: "is_cluster_local",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Priority",
				ColumnName: "priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "RiskScore",
				ColumnName: "risk_score",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Image",
				},
			},

			{
				Name:       "SetTopCvss",
				ColumnName: "set_top_cvss",
				Type:       "github.com/stackrox/rox/generated/storage.isImage_SetTopCvss",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Notes",
				ColumnName: "notes",
				Type:       "[]github.com/stackrox/rox/generated/storage.Image_Note",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Image,
	}
)

// GetImageSchema returns the generated schema for images
func GetImageSchema() *walker.Schema {
	// Set up search options if not already done
	if GeneratedImageSchema.OptionsMap == nil {
		GeneratedImageSchema.SetOptionsMap(search.Walk(v1.SearchCategory_IMAGES, "images", (*storage.Image)(nil)))
	}
	return GeneratedImageSchema
}
