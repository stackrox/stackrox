// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedServiceAccountSearchFields contains pre-computed search fields for service_accounts
	generatedServiceAccountSearchFields = map[search.FieldLabel]*search.Field{

		"Service": {
			FieldPath: "Name",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SERVICE_ACCOUNTS,
		},

		"Namespace": {
			FieldPath: "Namespace",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SERVICE_ACCOUNTS,
		},

		"Cluster": {
			FieldPath: "ClusterName",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SERVICE_ACCOUNTS,
		},
	}

	// generatedServiceAccountSchema is the pre-computed schema for service_accounts table
	generatedServiceAccountSchema = &walker.Schema{
		Table:    "service_accounts",
		Type:     "*storage.ServiceAccount",
		TypeName: "ServiceAccount",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Service",
				},
			},

			{
				Name:       "Namespace",
				ColumnName: "namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace,store",
				},
			},

			{
				Name:       "ClusterName",
				ColumnName: "cluster_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster,store",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Service",
				},
			},

			{
				Name:       "Annotations",
				ColumnName: "annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Service",
				},
			},

			{
				Name:       "AutomountToken",
				ColumnName: "automount_token",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Secrets",
				ColumnName: "secrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "ImagePullSecrets",
				ColumnName: "image_pull_secrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.ServiceAccount,
	}
)

// GetServiceAccountSchema returns the generated schema for service_accounts
func GetServiceAccountSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedServiceAccountSchema.OptionsMap == nil {
		generatedServiceAccountSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SERVICE_ACCOUNTS, generatedServiceAccountSearchFields))
	}
	return generatedServiceAccountSchema
}
