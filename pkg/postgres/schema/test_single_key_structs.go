// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableTestSingleKeyStructsStmt holds the create statement for table `test_single_key_structs`.
	CreateTableTestSingleKeyStructsStmt = &postgres.CreateStmts{
		GormModel: (*TestSingleKeyStructs)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// TestSingleKeyStructsSchema is the go schema for table `test_single_key_structs`.
	TestSingleKeyStructsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("test_single_key_structs")
		if schema != nil {
			return schema
		}
		schema = getTestSingleKeyStructSchema()
		schema.ScopingResource = resources.Namespace
		RegisterTable(schema, CreateTableTestSingleKeyStructsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory(100), schema)
		return schema
	}()
)

const (
	// TestSingleKeyStructsTableName specifies the name of the table in postgres.
	TestSingleKeyStructsTableName = "test_single_key_structs"
)

// TestSingleKeyStructs holds the Gorm model for Postgres table `test_single_key_structs`.
type TestSingleKeyStructs struct {
	Key         string                           `gorm:"column:key;type:varchar;primaryKey;index:testsinglekeystructs_key,type:hash"`
	Name        string                           `gorm:"column:name;type:varchar;unique"`
	StringSlice *pq.StringArray                  `gorm:"column:stringslice;type:text[]"`
	Bool        bool                             `gorm:"column:bool;type:bool"`
	Uint64      uint64                           `gorm:"column:uint64;type:bigint"`
	Int64       int64                            `gorm:"column:int64;type:bigint"`
	Float       float32                          `gorm:"column:float;type:numeric"`
	Labels      map[string]string                `gorm:"column:labels;type:jsonb"`
	Timestamp   *time.Time                       `gorm:"column:timestamp;type:timestamp"`
	Enum        storage.TestSingleKeyStruct_Enum `gorm:"column:enum;type:integer"`
	Enums       *pq.Int32Array                   `gorm:"column:enums;type:int[]"`
	Serialized  []byte                           `gorm:"column:serialized;type:bytea"`
}

var (
	testSingleKeyStructSearchFields = map[search.FieldLabel]*search.Field{}

	testSingleKeyStructSchema = &walker.Schema{
		Table:    "test_single_key_structs",
		Type:     "*storage.TestSingleKeyStruct",
		TypeName: "TestSingleKeyStruct",
		Fields: []walker.Field{
			{
				Name:       "Key",
				ColumnName: "Key",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "StringSlice",
				ColumnName: "StringSlice",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Bool",
				ColumnName: "Bool",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Uint64",
				ColumnName: "Uint64",
				Type:       "uint64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Int64",
				ColumnName: "Int64",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Float",
				ColumnName: "Float",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Timestamp",
				ColumnName: "Timestamp",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Enum",
				ColumnName: "Enum",
				Type:       "storage.TestSingleKeyStruct_Enum",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Enums",
				ColumnName: "Enums",
				Type:       "[]storage.TestSingleKeyStruct_Enum",
				SQLType:    "int[]",
				DataType:   postgres.EnumArray,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getTestSingleKeyStructSchema() *walker.Schema {
	// Set up search options if not already done
	if testSingleKeyStructSchema.OptionsMap == nil {
		testSingleKeyStructSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(100), testSingleKeyStructSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range testSingleKeyStructSchema.Fields {
		testSingleKeyStructSchema.Fields[i].Schema = testSingleKeyStructSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(testSingleKeyStructSchema)
	return testSingleKeyStructSchema
}
