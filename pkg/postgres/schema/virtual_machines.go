// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableVirtualMachinesStmt holds the create statement for table `virtual_machines`.
	CreateTableVirtualMachinesStmt = &postgres.CreateStmts{
		GormModel: (*VirtualMachines)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// VirtualMachinesSchema is the go schema for table `virtual_machines`.
	VirtualMachinesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("virtual_machines")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.VirtualMachine)(nil)), "virtual_machines")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_VIRTUAL_MACHINES, "virtualmachine", (*storage.VirtualMachine)(nil)))
		schema.ScopingResource = resources.VirtualMachine
		RegisterTable(schema, CreateTableVirtualMachinesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_VIRTUAL_MACHINES, schema)
		return schema
	}()
)

const (
	// VirtualMachinesTableName specifies the name of the table in postgres.
	VirtualMachinesTableName = "virtual_machines"
)

// VirtualMachines holds the Gorm model for Postgres table `virtual_machines`.
type VirtualMachines struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Namespace  string `gorm:"column:namespace;type:varchar;index:virtualmachines_sac_filter,type:btree"`
	Name       string `gorm:"column:name;type:varchar"`
	ClusterID  string `gorm:"column:clusterid;type:uuid;index:virtualmachines_sac_filter,type:btree"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
