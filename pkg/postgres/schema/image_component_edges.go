// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableImageComponentEdgesStmt holds the create statement for table `image_component_edges`.
	CreateTableImageComponentEdgesStmt = &postgres.CreateStmts{
		GormModel: (*ImageComponentEdges)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageComponentEdgesSchema is the go schema for table `image_component_edges`.
	ImageComponentEdgesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("image_component_edges")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ImageComponentEdge)(nil)), "image_component_edges")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":          ImagesSchema,
			"storage.ImageComponent": ImageComponentsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageComponentEdgesStmt)
		return schema
	}()
)

const (
	// ImageComponentEdgesTableName specifies the name of the table in postgres.
	ImageComponentEdgesTableName = "image_component_edges"
)

// ImageComponentEdges holds the Gorm model for Postgres table `image_component_edges`.
type ImageComponentEdges struct {
	ID               string `gorm:"column:id;type:varchar;primaryKey"`
	Location         string `gorm:"column:location;type:varchar"`
	ImageID          string `gorm:"column:imageid;type:varchar;index:imagecomponentedges_imageid,type:hash"`
	ImageComponentID string `gorm:"column:imagecomponentid;type:varchar;index:imagecomponentedges_imagecomponentid,type:hash"`
	Serialized       []byte `gorm:"column:serialized;type:bytea"`
	ImagesRef        Images `gorm:"foreignKey:imageid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
