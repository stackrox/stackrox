// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableImageComponentsStmt holds the create statement for table `image_components`.
	CreateTableImageComponentsStmt = &postgres.CreateStmts{
		GormModel: (*ImageComponents)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageComponentsSchema is the go schema for table `image_components`.
	ImageComponentsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("image_components")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ImageComponent)(nil)), "image_components")
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageComponentsStmt)
		return schema
	}()
)

const (
	// ImageComponentsTableName specifies the name of the table in postgres.
	ImageComponentsTableName = "image_components"
)

// ImageComponents holds the Gorm model for Postgres table `image_components`.
type ImageComponents struct {
	ID              string             `gorm:"column:id;type:varchar;primaryKey"`
	Name            string             `gorm:"column:name;type:varchar"`
	Version         string             `gorm:"column:version;type:varchar"`
	Priority        int64              `gorm:"column:priority;type:bigint"`
	Source          storage.SourceType `gorm:"column:source;type:integer"`
	RiskScore       float32            `gorm:"column:riskscore;type:numeric"`
	TopCvss         float32            `gorm:"column:topcvss;type:numeric"`
	OperatingSystem string             `gorm:"column:operatingsystem;type:varchar"`
	Serialized      []byte             `gorm:"column:serialized;type:bytea"`
}
