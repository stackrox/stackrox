// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableRoleBindingsStmt holds the create statement for table `role_bindings`.
	CreateTableRoleBindingsStmt = &postgres.CreateStmts{
		GormModel: (*RoleBindings)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*RoleBindingsSubjects)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// RoleBindingsSchema is the go schema for table `role_bindings`.
	RoleBindingsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("role_bindings")
		if schema != nil {
			return schema
		}
		schema = getK8sRoleBindingSchema()
		schema.ScopingResource = resources.K8sRoleBinding
		RegisterTable(schema, CreateTableRoleBindingsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_ROLEBINDINGS, schema)
		return schema
	}()
)

const (
	// RoleBindingsTableName specifies the name of the table in postgres.
	RoleBindingsTableName = "role_bindings"
	// RoleBindingsSubjectsTableName specifies the name of the table in postgres.
	RoleBindingsSubjectsTableName = "role_bindings_subjects"
)

// RoleBindings holds the Gorm model for Postgres table `role_bindings`.
type RoleBindings struct {
	ID          string            `gorm:"column:id;type:uuid;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar"`
	Namespace   string            `gorm:"column:namespace;type:varchar;index:rolebindings_sac_filter,type:btree"`
	ClusterID   string            `gorm:"column:clusterid;type:uuid;index:rolebindings_sac_filter,type:btree"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	ClusterRole bool              `gorm:"column:clusterrole;type:bool"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	RoleID      string            `gorm:"column:roleid;type:uuid"`
	Serialized  []byte            `gorm:"column:serialized;type:bytea"`
}

// RoleBindingsSubjects holds the Gorm model for Postgres table `role_bindings_subjects`.
type RoleBindingsSubjects struct {
	RoleBindingsID  string              `gorm:"column:role_bindings_id;type:uuid;primaryKey"`
	Idx             int                 `gorm:"column:idx;type:integer;primaryKey;index:rolebindingssubjects_idx,type:btree"`
	Kind            storage.SubjectKind `gorm:"column:kind;type:integer"`
	Name            string              `gorm:"column:name;type:varchar"`
	RoleBindingsRef RoleBindings        `gorm:"foreignKey:role_bindings_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	k8sRoleBindingSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Cluster"): {
			FieldPath: ".cluster_name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Cluster Role"): {
			FieldPath: ".cluster_role",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: ".namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Role Binding"): {
			FieldPath: ".name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Role Binding Annotation"): {
			FieldPath: ".annotations",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Role Binding ID"): {
			FieldPath: ".id",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Role Binding Label"): {
			FieldPath: ".labels",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Role ID"): {
			FieldPath: ".role_id",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Subject"): {
			FieldPath: ".subjects.name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
		search.FieldLabel("Subject Kind"): {
			FieldPath: ".subjects.kind",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ROLEBINDINGS,
		},
	}

	k8sRoleBindingSchema = &walker.Schema{
		Table:    "role_bindings",
		Type:     "*storage.K8SRoleBinding",
		TypeName: "K8sRoleBinding",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Role Binding ID",
					Enabled:   true,
				},
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Role Binding",
					Enabled:   true,
				},
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Namespace",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster ID",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterRole",
				ColumnName: "ClusterRole",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
				Search: walker.SearchField{
					FieldName: "Cluster Role",
					Enabled:   true,
				},
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Role Binding Label",
					Enabled:   true,
				},
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Role Binding Annotation",
					Enabled:   true,
				},
			},
			{
				Name:       "RoleId",
				ColumnName: "RoleId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Role ID",
					Enabled:   true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "role_bindings_subjects",
				Type:     "*storage.Subject",
				TypeName: "Subject",
				Fields: []walker.Field{
					{
						Name:       "roleBindingID",
						ColumnName: "role_bindings_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Kind",
						ColumnName: "Kind",
						Type:       "storage.SubjectKind",
						SQLType:    "integer",
						DataType:   postgres.Enum,
						Search: walker.SearchField{
							FieldName: "Subject Kind",
							Enabled:   true,
						},
					},
					{
						Name:       "Name",
						ColumnName: "Name",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Subject",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getK8sRoleBindingSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if k8sRoleBindingSchema.OptionsMap == nil {
		k8sRoleBindingSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ROLEBINDINGS, k8sRoleBindingSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range k8sRoleBindingSchema.Fields {
		k8sRoleBindingSchema.Fields[i].Schema = k8sRoleBindingSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(k8sRoleBindingSchema)
	return k8sRoleBindingSchema
}
