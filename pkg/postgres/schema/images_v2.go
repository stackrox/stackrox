// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImagesV2Stmt holds the create statement for table `images_v2`.
	CreateTableImagesV2Stmt = &postgres.CreateStmts{
		GormModel: (*ImagesV2)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ImagesV2Layers)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ImagesV2Schema is the go schema for table `images_v2`.
	ImagesV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("images_v2")
		if schema != nil {
			return schema
		}
		schema = getImageV2Schema()
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGES_V2,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImagesV2Stmt, features.FlattenImageData.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGES_V2, schema)
		return schema
	}()
)

const (
	// ImagesV2TableName specifies the name of the table in postgres.
	ImagesV2TableName = "images_v2"
	// ImagesV2LayersTableName specifies the name of the table in postgres.
	ImagesV2LayersTableName = "images_v2_layers"
)

// ImagesV2 holds the Gorm model for Postgres table `images_v2`.
type ImagesV2 struct {
	ID                                string            `gorm:"column:id;type:varchar;primaryKey"`
	Digest                            string            `gorm:"column:digest;type:varchar"`
	NameRegistry                      string            `gorm:"column:name_registry;type:varchar"`
	NameRemote                        string            `gorm:"column:name_remote;type:varchar"`
	NameTag                           string            `gorm:"column:name_tag;type:varchar"`
	NameFullName                      string            `gorm:"column:name_fullname;type:varchar"`
	MetadataV1Created                 *time.Time        `gorm:"column:metadata_v1_created;type:timestamp"`
	MetadataV1User                    string            `gorm:"column:metadata_v1_user;type:varchar"`
	MetadataV1Command                 *pq.StringArray   `gorm:"column:metadata_v1_command;type:text[]"`
	MetadataV1Entrypoint              *pq.StringArray   `gorm:"column:metadata_v1_entrypoint;type:text[]"`
	MetadataV1Volumes                 *pq.StringArray   `gorm:"column:metadata_v1_volumes;type:text[]"`
	MetadataV1Labels                  map[string]string `gorm:"column:metadata_v1_labels;type:jsonb"`
	ScanScanTime                      *time.Time        `gorm:"column:scan_scantime;type:timestamp"`
	ScanOperatingSystem               string            `gorm:"column:scan_operatingsystem;type:varchar"`
	SignatureFetched                  *time.Time        `gorm:"column:signature_fetched;type:timestamp"`
	ScanStatsComponentCount           int32             `gorm:"column:scanstats_componentcount;type:integer"`
	ScanStatsCveCount                 int32             `gorm:"column:scanstats_cvecount;type:integer"`
	ScanStatsFixableCveCount          int32             `gorm:"column:scanstats_fixablecvecount;type:integer"`
	ScanStatsUnknownCveCount          int32             `gorm:"column:scanstats_unknowncvecount;type:integer"`
	ScanStatsFixableUnknownCveCount   int32             `gorm:"column:scanstats_fixableunknowncvecount;type:integer"`
	ScanStatsCriticalCveCount         int32             `gorm:"column:scanstats_criticalcvecount;type:integer"`
	ScanStatsFixableCriticalCveCount  int32             `gorm:"column:scanstats_fixablecriticalcvecount;type:integer"`
	ScanStatsImportantCveCount        int32             `gorm:"column:scanstats_importantcvecount;type:integer"`
	ScanStatsFixableImportantCveCount int32             `gorm:"column:scanstats_fixableimportantcvecount;type:integer"`
	ScanStatsModerateCveCount         int32             `gorm:"column:scanstats_moderatecvecount;type:integer"`
	ScanStatsFixableModerateCveCount  int32             `gorm:"column:scanstats_fixablemoderatecvecount;type:integer"`
	ScanStatsLowCveCount              int32             `gorm:"column:scanstats_lowcvecount;type:integer"`
	ScanStatsFixableLowCveCount       int32             `gorm:"column:scanstats_fixablelowcvecount;type:integer"`
	LastUpdated                       *time.Time        `gorm:"column:lastupdated;type:timestamp"`
	Priority                          int64             `gorm:"column:priority;type:bigint"`
	RiskScore                         float32           `gorm:"column:riskscore;type:numeric"`
	TopCvss                           float32           `gorm:"column:topcvss;type:numeric"`
	Serialized                        []byte            `gorm:"column:serialized;type:bytea"`
}

// ImagesV2Layers holds the Gorm model for Postgres table `images_v2_layers`.
type ImagesV2Layers struct {
	ImagesV2ID  string   `gorm:"column:images_v2_id;type:varchar;primaryKey"`
	Idx         int      `gorm:"column:idx;type:integer;primaryKey;index:imagesv2layers_idx,type:btree"`
	Instruction string   `gorm:"column:instruction;type:varchar"`
	Value       string   `gorm:"column:value;type:varchar"`
	ImagesV2Ref ImagesV2 `gorm:"foreignKey:images_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	imageV2SearchFields = map[search.FieldLabel]*search.Field{}

	imageV2Schema = &walker.Schema{
		Table:    "images_v2",
		Type:     "*storage.ImageV2",
		TypeName: "ImageV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Sha",
				ColumnName: "Sha",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Registry",
				ColumnName: "Name_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Name_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Name_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "FullName",
				ColumnName: "Name_FullName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Created",
				ColumnName: "Metadata_V1_Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "User",
				ColumnName: "Metadata_V1_User",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Command",
				ColumnName: "Metadata_V1_Command",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Entrypoint",
				ColumnName: "Metadata_V1_Entrypoint",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Volumes",
				ColumnName: "Metadata_V1_Volumes",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Labels",
				ColumnName: "Metadata_V1_Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "ScanTime",
				ColumnName: "Scan_ScanTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "Scan_OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Fetched",
				ColumnName: "Signature_Fetched",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ComponentCount",
				ColumnName: "ComponentCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "CveCount",
				ColumnName: "CveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCveCount",
				ColumnName: "FixableCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "UnknownCveCount",
				ColumnName: "UnknownCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableUnknownCveCount",
				ColumnName: "FixableUnknownCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "CriticalCveCount",
				ColumnName: "CriticalCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCriticalCveCount",
				ColumnName: "FixableCriticalCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "ImportantCveCount",
				ColumnName: "ImportantCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableImportantCveCount",
				ColumnName: "FixableImportantCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "ModerateCveCount",
				ColumnName: "ModerateCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableModerateCveCount",
				ColumnName: "FixableModerateCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "LowCveCount",
				ColumnName: "LowCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableLowCveCount",
				ColumnName: "FixableLowCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "images_v2_layers",
				Type:     "*storage.ImageLayer",
				TypeName: "ImageLayer",
				Fields: []walker.Field{
					{
						Name:       "imageV2ID",
						ColumnName: "images_v2_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Instruction",
						ColumnName: "Instruction",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Dockerfile Instruction Keyword",
							Enabled:   true,
						},
					},
					{
						Name:       "Value",
						ColumnName: "Value",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Dockerfile Instruction Value",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getImageV2Schema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if imageV2Schema.OptionsMap == nil {
		imageV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGES_V2, imageV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range imageV2Schema.Fields {
		imageV2Schema.Fields[i].Schema = imageV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(imageV2Schema)
	return imageV2Schema
}
