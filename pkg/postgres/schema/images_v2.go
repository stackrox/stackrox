// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImagesV2Stmt holds the create statement for table `images_v2`.
	CreateTableImagesV2Stmt = &postgres.CreateStmts{
		GormModel: (*ImagesV2)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ImagesV2Layers)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ImagesV2Schema is the go schema for table `images_v2`.
	ImagesV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("images_v2")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ImageV2)(nil)), "images_v2")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_IMAGES_V2, "imagev2", (*storage.ImageV2)(nil)))
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGES_V2,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImagesV2Stmt, features.FlattenImageData.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGES_V2, schema)
		return schema
	}()
)

const (
	// ImagesV2TableName specifies the name of the table in postgres.
	ImagesV2TableName = "images_v2"
	// ImagesV2LayersTableName specifies the name of the table in postgres.
	ImagesV2LayersTableName = "images_v2_layers"
)

// ImagesV2 holds the Gorm model for Postgres table `images_v2`.
type ImagesV2 struct {
	ID                       string            `gorm:"column:id;type:uuid;primaryKey"`
	Sha                      string            `gorm:"column:sha;type:varchar"`
	NameRegistry             string            `gorm:"column:name_registry;type:varchar"`
	NameRemote               string            `gorm:"column:name_remote;type:varchar"`
	NameTag                  string            `gorm:"column:name_tag;type:varchar"`
	NameFullName             string            `gorm:"column:name_fullname;type:varchar"`
	MetadataV1Created        *time.Time        `gorm:"column:metadata_v1_created;type:timestamp"`
	MetadataV1User           string            `gorm:"column:metadata_v1_user;type:varchar"`
	MetadataV1Command        *pq.StringArray   `gorm:"column:metadata_v1_command;type:text[]"`
	MetadataV1Entrypoint     *pq.StringArray   `gorm:"column:metadata_v1_entrypoint;type:text[]"`
	MetadataV1Volumes        *pq.StringArray   `gorm:"column:metadata_v1_volumes;type:text[]"`
	MetadataV1Labels         map[string]string `gorm:"column:metadata_v1_labels;type:jsonb"`
	ScanScanTime             *time.Time        `gorm:"column:scan_scantime;type:timestamp"`
	ScanOperatingSystem      string            `gorm:"column:scan_operatingsystem;type:varchar"`
	SignatureFetched         *time.Time        `gorm:"column:signature_fetched;type:timestamp"`
	ComponentCount           int32             `gorm:"column:componentcount;type:integer"`
	CveCount                 int32             `gorm:"column:cvecount;type:integer"`
	FixableCveCount          int32             `gorm:"column:fixablecvecount;type:integer"`
	UnknownCveCount          int32             `gorm:"column:unknowncvecount;type:integer"`
	FixableUnknownCveCount   int32             `gorm:"column:fixableunknowncvecount;type:integer"`
	CriticalCveCount         int32             `gorm:"column:criticalcvecount;type:integer"`
	FixableCriticalCveCount  int32             `gorm:"column:fixablecriticalcvecount;type:integer"`
	ImportantCveCount        int32             `gorm:"column:importantcvecount;type:integer"`
	FixableImportantCveCount int32             `gorm:"column:fixableimportantcvecount;type:integer"`
	ModerateCveCount         int32             `gorm:"column:moderatecvecount;type:integer"`
	FixableModerateCveCount  int32             `gorm:"column:fixablemoderatecvecount;type:integer"`
	LowCveCount              int32             `gorm:"column:lowcvecount;type:integer"`
	FixableLowCveCount       int32             `gorm:"column:fixablelowcvecount;type:integer"`
	LastUpdated              *time.Time        `gorm:"column:lastupdated;type:timestamp"`
	Priority                 int64             `gorm:"column:priority;type:bigint"`
	RiskScore                float32           `gorm:"column:riskscore;type:numeric"`
	TopCvss                  float32           `gorm:"column:topcvss;type:numeric"`
	Serialized               []byte            `gorm:"column:serialized;type:bytea"`
}

// ImagesV2Layers holds the Gorm model for Postgres table `images_v2_layers`.
type ImagesV2Layers struct {
	ImagesV2ID  string   `gorm:"column:images_v2_id;type:uuid;primaryKey"`
	Idx         int      `gorm:"column:idx;type:integer;primaryKey;index:imagesv2layers_idx,type:btree"`
	Instruction string   `gorm:"column:instruction;type:varchar"`
	Value       string   `gorm:"column:value;type:varchar"`
	ImagesV2Ref ImagesV2 `gorm:"foreignKey:images_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
