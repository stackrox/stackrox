// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageCVEEdgeSearchFields contains pre-computed search fields for image_cve_edges
	generatedImageCVEEdgeSearchFields = map[search.FieldLabel]*search.Field{

		"First": {
			FieldPath: "FirstImageOccurrence",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULN_EDGE,
		},

		"Vulnerability": {
			FieldPath: "State",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULN_EDGE,
		},
	}

	// generatedImageCVEEdgeSchema is the pre-computed schema for image_cve_edges table
	generatedImageCVEEdgeSchema = &walker.Schema{
		Table:    "image_cve_edges",
		Type:     "*storage.ImageCVEEdge",
		TypeName: "ImageCVEEdge",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "State",
				ColumnName: "state",
				Type:       "github.com/stackrox/rox/generated/storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Vulnerability",
				},
			},

			{
				Name:       "ImageId",
				ColumnName: "image_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},
			},

			{
				Name:       "ImageCveId",
				ColumnName: "image_cve_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Image,
	}
)

// GetImageCVEEdgeSchema returns the generated schema for image_cve_edges
func GetImageCVEEdgeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageCVEEdgeSchema.OptionsMap == nil {
		generatedImageCVEEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULN_EDGE, generatedImageCVEEdgeSearchFields))
	}
	return generatedImageCVEEdgeSchema
}
