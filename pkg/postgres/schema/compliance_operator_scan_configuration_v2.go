// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceOperatorScanConfigurationV2Stmt holds the create statement for table `compliance_operator_scan_configuration_v2`.
	CreateTableComplianceOperatorScanConfigurationV2Stmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorScanConfigurationV2)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ComplianceOperatorScanConfigurationV2Profiles)(nil),
				Children:  []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				GormModel: (*ComplianceOperatorScanConfigurationV2Clusters)(nil),
				Children:  []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				GormModel: (*ComplianceOperatorScanConfigurationV2Notifiers)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ComplianceOperatorScanConfigurationV2Schema is the go schema for table `compliance_operator_scan_configuration_v2`.
	ComplianceOperatorScanConfigurationV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_scan_configuration_v2")
		if schema != nil {
			return schema
		}
		schema = getComplianceOperatorScanConfigurationV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster":                     ClustersSchema,
			"storage.ComplianceOperatorProfileV2": ComplianceOperatorProfileV2Schema,
			"storage.Notifier":                    NotifiersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_COMPLIANCE_SCAN_CONFIG,
		}...)
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorScanConfigurationV2Stmt, features.ComplianceEnhancements.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_SCAN_CONFIG, schema)
		return schema
	}()
)

const (
	// ComplianceOperatorScanConfigurationV2TableName specifies the name of the table in postgres.
	ComplianceOperatorScanConfigurationV2TableName = "compliance_operator_scan_configuration_v2"
	// ComplianceOperatorScanConfigurationV2ProfilesTableName specifies the name of the table in postgres.
	ComplianceOperatorScanConfigurationV2ProfilesTableName = "compliance_operator_scan_configuration_v2_profiles"
	// ComplianceOperatorScanConfigurationV2ClustersTableName specifies the name of the table in postgres.
	ComplianceOperatorScanConfigurationV2ClustersTableName = "compliance_operator_scan_configuration_v2_clusters"
	// ComplianceOperatorScanConfigurationV2NotifiersTableName specifies the name of the table in postgres.
	ComplianceOperatorScanConfigurationV2NotifiersTableName = "compliance_operator_scan_configuration_v2_notifiers"
)

// ComplianceOperatorScanConfigurationV2 holds the Gorm model for Postgres table `compliance_operator_scan_configuration_v2`.
type ComplianceOperatorScanConfigurationV2 struct {
	ID             string `gorm:"column:id;type:uuid;primaryKey"`
	ScanConfigName string `gorm:"column:scanconfigname;type:varchar;unique"`
	ModifiedByName string `gorm:"column:modifiedby_name;type:varchar"`
	Serialized     []byte `gorm:"column:serialized;type:bytea"`
}

// ComplianceOperatorScanConfigurationV2Profiles holds the Gorm model for Postgres table `compliance_operator_scan_configuration_v2_profiles`.
type ComplianceOperatorScanConfigurationV2Profiles struct {
	ComplianceOperatorScanConfigurationV2ID  string                                `gorm:"column:compliance_operator_scan_configuration_v2_id;type:uuid;primaryKey"`
	Idx                                      int                                   `gorm:"column:idx;type:integer;primaryKey;index:complianceoperatorscanconfigurationv2profiles_idx,type:btree"`
	ProfileName                              string                                `gorm:"column:profilename;type:varchar"`
	ComplianceOperatorScanConfigurationV2Ref ComplianceOperatorScanConfigurationV2 `gorm:"foreignKey:compliance_operator_scan_configuration_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// ComplianceOperatorScanConfigurationV2Clusters holds the Gorm model for Postgres table `compliance_operator_scan_configuration_v2_clusters`.
type ComplianceOperatorScanConfigurationV2Clusters struct {
	ComplianceOperatorScanConfigurationV2ID  string                                `gorm:"column:compliance_operator_scan_configuration_v2_id;type:uuid;primaryKey"`
	Idx                                      int                                   `gorm:"column:idx;type:integer;primaryKey;index:complianceoperatorscanconfigurationv2clusters_idx,type:btree"`
	ClusterID                                string                                `gorm:"column:clusterid;type:uuid;index:complianceoperatorscanconfigurationv2clusters_sac_filter,type:hash"`
	ComplianceOperatorScanConfigurationV2Ref ComplianceOperatorScanConfigurationV2 `gorm:"foreignKey:compliance_operator_scan_configuration_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// ComplianceOperatorScanConfigurationV2Notifiers holds the Gorm model for Postgres table `compliance_operator_scan_configuration_v2_notifiers`.
type ComplianceOperatorScanConfigurationV2Notifiers struct {
	ComplianceOperatorScanConfigurationV2ID  string                                `gorm:"column:compliance_operator_scan_configuration_v2_id;type:uuid;primaryKey"`
	Idx                                      int                                   `gorm:"column:idx;type:integer;primaryKey;index:complianceoperatorscanconfigurationv2notifiers_idx,type:btree"`
	ID                                       string                                `gorm:"column:id;type:varchar"`
	ComplianceOperatorScanConfigurationV2Ref ComplianceOperatorScanConfigurationV2 `gorm:"foreignKey:compliance_operator_scan_configuration_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	NotifiersRef                             Notifiers                             `gorm:"foreignKey:id;references:id;belongsTo;constraint:OnDelete:RESTRICT"`
}

var (
	complianceOperatorScanConfigurationV2SearchFields = map[search.FieldLabel]*search.Field{}

	complianceOperatorScanConfigurationV2Schema = &walker.Schema{
		Table:    "compliance_operator_scan_configuration_v2",
		Type:     "*storage.ComplianceOperatorScanConfigurationV2",
		TypeName: "ComplianceOperatorScanConfigurationV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ScanConfigName",
				ColumnName: "ScanConfigName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "ModifiedBy_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "compliance_operator_scan_configuration_v2_profiles",
				Type:     "*storage.ComplianceOperatorScanConfigurationV2_ProfileName",
				TypeName: "ComplianceOperatorScanConfigurationV2_ProfileName",
				Fields: []walker.Field{
					{
						Name:       "complianceOperatorScanConfigurationV2ID",
						ColumnName: "compliance_operator_scan_configuration_v2_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ProfileName",
						ColumnName: "ProfileName",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Compliance Config Profile Name",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},

			&walker.Schema{
				Table:    "compliance_operator_scan_configuration_v2_clusters",
				Type:     "*storage.ComplianceOperatorScanConfigurationV2_Cluster",
				TypeName: "ComplianceOperatorScanConfigurationV2_Cluster",
				Fields: []walker.Field{
					{
						Name:       "complianceOperatorScanConfigurationV2ID",
						ColumnName: "compliance_operator_scan_configuration_v2_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ClusterId",
						ColumnName: "ClusterId",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Cluster ID",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},

			&walker.Schema{
				Table:    "compliance_operator_scan_configuration_v2_notifiers",
				Type:     "*storage.NotifierConfiguration",
				TypeName: "NotifierConfiguration",
				Fields: []walker.Field{
					{
						Name:       "complianceOperatorScanConfigurationV2ID",
						ColumnName: "compliance_operator_scan_configuration_v2_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getComplianceOperatorScanConfigurationV2Schema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if complianceOperatorScanConfigurationV2Schema.OptionsMap == nil {
		complianceOperatorScanConfigurationV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_SCAN_CONFIG, complianceOperatorScanConfigurationV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceOperatorScanConfigurationV2Schema.Fields {
		complianceOperatorScanConfigurationV2Schema.Fields[i].Schema = complianceOperatorScanConfigurationV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceOperatorScanConfigurationV2Schema)
	return complianceOperatorScanConfigurationV2Schema
}
