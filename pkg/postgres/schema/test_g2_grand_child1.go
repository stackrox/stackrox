// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestG2GrandChild1Stmt holds the create statement for table `test_g2_grand_child1`.
	CreateTableTestG2GrandChild1Stmt = &postgres.CreateStmts{
		GormModel: (*TestG2GrandChild1)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// TestG2GrandChild1Schema is the go schema for table `test_g2_grand_child1`.
	TestG2GrandChild1Schema = func() *walker.Schema {
		schema := GetSchemaForTable("test_g2_grand_child1")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestG2GrandChild1)(nil)), "test_g2_grand_child1")
		referencedSchemas := map[string]*walker.Schema{
			"storage.TestGGrandChild1":  TestGGrandChild1Schema,
			"storage.TestG3GrandChild1": TestG3GrandChild1Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory(66), "testg2grandchild1", (*storage.TestG2GrandChild1)(nil)))
		RegisterTable(schema, CreateTableTestG2GrandChild1Stmt)
		return schema
	}()
)

const (
	TestG2GrandChild1TableName = "test_g2_grand_child1"
)

// TestG2GrandChild1 holds the Gorm model for Postgres table `test_g2_grand_child1`.
type TestG2GrandChild1 struct {
	Id                  string           `gorm:"column:id;type:varchar;primaryKey"`
	ParentId            string           `gorm:"column:parentid;type:varchar"`
	ChildId             string           `gorm:"column:childid;type:varchar"`
	Val                 string           `gorm:"column:val;type:varchar"`
	Serialized          []byte           `gorm:"column:serialized;type:bytea"`
	TestGGrandChild1Ref TestGGrandChild1 `gorm:"foreignKey:parentid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}
