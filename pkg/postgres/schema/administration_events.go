// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableAdministrationEventsStmt holds the create statement for table `administration_events`.
	CreateTableAdministrationEventsStmt = &postgres.CreateStmts{
		GormModel: (*AdministrationEvents)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// AdministrationEventsSchema is the go schema for table `administration_events`.
	AdministrationEventsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("administration_events")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.AdministrationEvent)(nil)), "administration_events")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_ADMINISTRATION_EVENTS, "administrationevent", (*storage.AdministrationEvent)(nil)))
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableAdministrationEventsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_ADMINISTRATION_EVENTS, schema)
		return schema
	}()
)

const (
	// AdministrationEventsTableName specifies the name of the table in postgres.
	AdministrationEventsTableName = "administration_events"
)

// AdministrationEvents holds the Gorm model for Postgres table `administration_events`.
type AdministrationEvents struct {
	ID             string                           `gorm:"column:id;type:uuid;primaryKey"`
	Type           storage.AdministrationEventType  `gorm:"column:type;type:integer"`
	Level          storage.AdministrationEventLevel `gorm:"column:level;type:integer"`
	Domain         string                           `gorm:"column:domain;type:varchar"`
	ResourceType   string                           `gorm:"column:resource_type;type:varchar"`
	LastOccurredAt *time.Time                       `gorm:"column:lastoccurredat;type:timestamp"`
	CreatedAt      *time.Time                       `gorm:"column:createdat;type:timestamp"`
	Serialized     []byte                           `gorm:"column:serialized;type:bytea"`
}
