// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableAdministrationEventsStmt holds the create statement for table `administration_events`.
	CreateTableAdministrationEventsStmt = &postgres.CreateStmts{
		GormModel: (*AdministrationEvents)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// AdministrationEventsSchema is the go schema for table `administration_events`.
	AdministrationEventsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("administration_events")
		if schema != nil {
			return schema
		}
		schema = getAdministrationEventSchema()
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableAdministrationEventsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_ADMINISTRATION_EVENTS, schema)
		return schema
	}()
)

const (
	// AdministrationEventsTableName specifies the name of the table in postgres.
	AdministrationEventsTableName = "administration_events"
)

// AdministrationEvents holds the Gorm model for Postgres table `administration_events`.
type AdministrationEvents struct {
	ID             string                           `gorm:"column:id;type:uuid;primaryKey"`
	Type           storage.AdministrationEventType  `gorm:"column:type;type:integer"`
	Level          storage.AdministrationEventLevel `gorm:"column:level;type:integer"`
	Domain         string                           `gorm:"column:domain;type:varchar"`
	ResourceType   string                           `gorm:"column:resource_type;type:varchar"`
	NumOccurrences int64                            `gorm:"column:numoccurrences;type:bigint"`
	LastOccurredAt *time.Time                       `gorm:"column:lastoccurredat;type:timestamp"`
	CreatedAt      *time.Time                       `gorm:"column:createdat;type:timestamp"`
	Serialized     []byte                           `gorm:"column:serialized;type:bytea"`
}

var (
	administrationEventSearchFields = map[search.FieldLabel]*search.Field{}

	administrationEventSchema = &walker.Schema{
		Table:    "administration_events",
		Type:     "*storage.AdministrationEvent",
		TypeName: "AdministrationEvent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "storage.AdministrationEventType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Level",
				ColumnName: "Level",
				Type:       "storage.AdministrationEventLevel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Domain",
				ColumnName: "Domain",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Resource_Type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "NumOccurrences",
				ColumnName: "NumOccurrences",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "LastOccurredAt",
				ColumnName: "LastOccurredAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getAdministrationEventSchema() *walker.Schema {
	// Set up search options if not already done
	if administrationEventSchema.OptionsMap == nil {
		administrationEventSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ADMINISTRATION_EVENTS, administrationEventSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range administrationEventSchema.Fields {
		administrationEventSchema.Fields[i].Schema = administrationEventSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(administrationEventSchema)
	return administrationEventSchema
}
