// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableListeningEndpointsStmt holds the create statement for table `listening_endpoints`.
	CreateTableListeningEndpointsStmt = &postgres.CreateStmts{
		GormModel: (*ListeningEndpoints)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ListeningEndpointsSchema is the go schema for table `listening_endpoints`.
	ListeningEndpointsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("listening_endpoints")
		if schema != nil {
			return schema
		}
		schema = getProcessListeningOnPortStorageSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.ProcessIndicator": ProcessIndicatorsSchema,
			"storage.Deployment":       DeploymentsSchema,
			"storage.Pod":              PodsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.DeploymentExtension
		RegisterTable(schema, CreateTableListeningEndpointsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_PROCESS_LISTENING_ON_PORT, schema)
		return schema
	}()
)

const (
	// ListeningEndpointsTableName specifies the name of the table in postgres.
	ListeningEndpointsTableName = "listening_endpoints"
)

// ListeningEndpoints holds the Gorm model for Postgres table `listening_endpoints`.
type ListeningEndpoints struct {
	ID                 string             `gorm:"column:id;type:uuid;primaryKey"`
	Port               uint32             `gorm:"column:port;type:bigint"`
	Protocol           storage.L4Protocol `gorm:"column:protocol;type:integer"`
	CloseTimestamp     *time.Time         `gorm:"column:closetimestamp;type:timestamp"`
	ProcessIndicatorID string             `gorm:"column:processindicatorid;type:uuid;index:listeningendpoints_processindicatorid,type:btree"`
	Closed             bool               `gorm:"column:closed;type:bool;index:listeningendpoints_closed,type:btree"`
	DeploymentID       string             `gorm:"column:deploymentid;type:uuid;index:listeningendpoints_deploymentid,type:btree"`
	PodUID             string             `gorm:"column:poduid;type:uuid;index:listeningendpoints_poduid,type:hash"`
	ClusterID          string             `gorm:"column:clusterid;type:uuid;index:listeningendpoints_sac_filter,type:btree"`
	Namespace          string             `gorm:"column:namespace;type:varchar;index:listeningendpoints_sac_filter,type:btree"`
	Serialized         []byte             `gorm:"column:serialized;type:bytea"`
}

var (
	processListeningOnPortStorageSearchFields = map[search.FieldLabel]*search.Field{}

	processListeningOnPortStorageSchema = &walker.Schema{
		Table:    "listening_endpoints",
		Type:     "*storage.ProcessListeningOnPortStorage",
		TypeName: "ProcessListeningOnPortStorage",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Port",
				ColumnName: "Port",
				Type:       "uint32",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Protocol",
				ColumnName: "Protocol",
				Type:       "storage.L4Protocol",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "CloseTimestamp",
				ColumnName: "CloseTimestamp",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ProcessIndicatorId",
				ColumnName: "ProcessIndicatorId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Closed",
				ColumnName: "Closed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "DeploymentId",
				ColumnName: "DeploymentId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "PodUid",
				ColumnName: "PodUid",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getProcessListeningOnPortStorageSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if processListeningOnPortStorageSchema.OptionsMap == nil {
		processListeningOnPortStorageSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_PROCESS_LISTENING_ON_PORT, processListeningOnPortStorageSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range processListeningOnPortStorageSchema.Fields {
		processListeningOnPortStorageSchema.Fields[i].Schema = processListeningOnPortStorageSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(processListeningOnPortStorageSchema)
	return processListeningOnPortStorageSchema
}
