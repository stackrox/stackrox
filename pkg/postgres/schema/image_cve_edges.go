// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImageCveEdgesStmt holds the create statement for table `image_cve_edges`.
	CreateTableImageCveEdgesStmt = &postgres.CreateStmts{
		GormModel: (*ImageCveEdges)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageCveEdgesSchema is the go schema for table `image_cve_edges`.
	ImageCveEdgesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("image_cve_edges")
		if schema != nil {
			return schema
		}
		schema = getImageCVEEdgeSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":    ImagesSchema,
			"storage.ImageCVE": ImageCvesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES,
			v1.SearchCategory_COMPONENT_VULN_EDGE,
			v1.SearchCategory_IMAGE_COMPONENTS,
			v1.SearchCategory_IMAGE_COMPONENT_EDGE,
			v1.SearchCategory_IMAGE_VULN_EDGE,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableImageCveEdgesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGE_VULN_EDGE, schema)
		return schema
	}()
)

const (
	// ImageCveEdgesTableName specifies the name of the table in postgres.
	ImageCveEdgesTableName = "image_cve_edges"
)

// ImageCveEdges holds the Gorm model for Postgres table `image_cve_edges`.
type ImageCveEdges struct {
	ID                   string                     `gorm:"column:id;type:varchar;primaryKey"`
	FirstImageOccurrence *time.Time                 `gorm:"column:firstimageoccurrence;type:timestamp"`
	State                storage.VulnerabilityState `gorm:"column:state;type:integer"`
	ImageID              string                     `gorm:"column:imageid;type:varchar;index:imagecveedges_imageid,type:hash"`
	ImageCveID           string                     `gorm:"column:imagecveid;type:varchar;index:imagecveedges_imagecveid,type:hash"`
	Serialized           []byte                     `gorm:"column:serialized;type:bytea"`
	ImagesRef            Images                     `gorm:"foreignKey:imageid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	imageCVEEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	imageCVEEdgeSchema = &walker.Schema{
		Table:    "image_cve_edges",
		Type:     "*storage.ImageCVEEdge",
		TypeName: "ImageCVEEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "FirstImageOccurrence",
				ColumnName: "FirstImageOccurrence",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "State",
				ColumnName: "State",
				Type:       "storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageCveId",
				ColumnName: "ImageCveId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getImageCVEEdgeSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if imageCVEEdgeSchema.OptionsMap == nil {
		imageCVEEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULN_EDGE, imageCVEEdgeSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range imageCVEEdgeSchema.Fields {
		imageCVEEdgeSchema.Fields[i].Schema = imageCVEEdgeSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(imageCVEEdgeSchema)
	return imageCVEEdgeSchema
}
