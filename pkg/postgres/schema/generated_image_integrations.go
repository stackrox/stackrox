// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageIntegrationSearchFields contains pre-computed search fields for image_integrations
	generatedImageIntegrationSearchFields = map[search.FieldLabel]*search.Field{

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_INTEGRATIONS,
		},
	}

	// generatedImageIntegrationSchema is the pre-computed schema for image_integrations table
	generatedImageIntegrationSchema = &walker.Schema{
		Table:    "image_integrations",
		Type:     "*storage.ImageIntegration",
		TypeName: "ImageIntegration",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Type",
				ColumnName: "type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Categories",
				ColumnName: "categories",
				Type:       "[]github.com/stackrox/rox/generated/storage.ImageIntegrationCategory",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "IntegrationConfig",
				ColumnName: "integration_config",
				Type:       "github.com/stackrox/rox/generated/storage.isImageIntegration_IntegrationConfig",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Autogenerated",
				ColumnName: "autogenerated",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "SkipTestIntegration",
				ColumnName: "skip_test_integration",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Integration,
	}
)

// GetImageIntegrationSchema returns the generated schema for image_integrations
func GetImageIntegrationSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageIntegrationSchema.OptionsMap == nil {
		generatedImageIntegrationSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_INTEGRATIONS, generatedImageIntegrationSearchFields))
	}
	return generatedImageIntegrationSchema
}
