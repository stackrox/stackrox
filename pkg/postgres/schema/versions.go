// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableVersionsStmt holds the create statement for table `versions`.
	CreateTableVersionsStmt = &postgres.CreateStmts{
		GormModel: (*Versions)(nil),
		Children:  []*postgres.CreateStmts{},
		PostStmts: []string{
			"ALTER TABLE versions REPLICA IDENTITY FULL",
		},
	}

	// VersionsSchema is the go schema for table `versions`.
	VersionsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("versions")
		if schema != nil {
			return schema
		}
		schema = getVersionSchema()
		schema.ScopingResource = resources.Version
		RegisterTable(schema, CreateTableVersionsStmt)
		return schema
	}()
)

const (
	// VersionsTableName specifies the name of the table in postgres.
	VersionsTableName = "versions"
)

// Versions holds the Gorm model for Postgres table `versions`.
type Versions struct {
	SeqNum        int32      `gorm:"column:seqnum;type:integer"`
	Version       string     `gorm:"column:version;type:varchar"`
	LastPersisted *time.Time `gorm:"column:lastpersisted;type:timestamp"`
	MinSeqNum     int32      `gorm:"column:minseqnum;type:integer"`
	Serialized    []byte     `gorm:"column:serialized;type:bytea"`
}

var (
	versionSearchFields = map[search.FieldLabel]*search.Field{}

	versionSchema = &walker.Schema{
		Table:    "versions",
		Type:     "*storage.Version",
		TypeName: "Version",
		Fields: []walker.Field{
			{
				Name:       "SeqNum",
				ColumnName: "SeqNum",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "LastPersisted",
				ColumnName: "LastPersisted",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "MinSeqNum",
				ColumnName: "MinSeqNum",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getVersionSchema() *walker.Schema {
	// Set up search options if not already done
	if versionSchema.OptionsMap == nil {
		versionSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, versionSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range versionSchema.Fields {
		versionSchema.Fields[i].Schema = versionSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(versionSchema)
	return versionSchema
}
