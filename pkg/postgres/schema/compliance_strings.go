// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableComplianceStringsStmt holds the create statement for table `compliance_strings`.
	CreateTableComplianceStringsStmt = &postgres.CreateStmts{
		GormModel: (*ComplianceStrings)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceStringsSchema is the go schema for table `compliance_strings`.
	ComplianceStringsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_strings")
		if schema != nil {
			return schema
		}
		schema = getComplianceStringsSchema()
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceStringsStmt)
		return schema
	}()
)

const (
	// ComplianceStringsTableName specifies the name of the table in postgres.
	ComplianceStringsTableName = "compliance_strings"
)

// ComplianceStrings holds the Gorm model for Postgres table `compliance_strings`.
type ComplianceStrings struct {
	ID         string `gorm:"column:id;type:varchar;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	complianceStringsSearchFields = map[search.FieldLabel]*search.Field{}

	complianceStringsSchema = &walker.Schema{
		Table:    "compliance_strings",
		Type:     "*storage.ComplianceStrings",
		TypeName: "ComplianceStrings",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getComplianceStringsSchema() *walker.Schema {
	// Set up search options if not already done
	if complianceStringsSchema.OptionsMap == nil {
		complianceStringsSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, complianceStringsSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceStringsSchema.Fields {
		complianceStringsSchema.Fields[i].Schema = complianceStringsSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceStringsSchema)
	return complianceStringsSchema
}
