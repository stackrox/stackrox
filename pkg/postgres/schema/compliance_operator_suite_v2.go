// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceOperatorSuiteV2Stmt holds the create statement for table `compliance_operator_suite_v2`.
	CreateTableComplianceOperatorSuiteV2Stmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorSuiteV2)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceOperatorSuiteV2Schema is the go schema for table `compliance_operator_suite_v2`.
	ComplianceOperatorSuiteV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_suite_v2")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ComplianceOperatorSuiteV2)(nil)), "compliance_operator_suite_v2")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_COMPLIANCE_SUITES, "complianceoperatorsuitev2", (*storage.ComplianceOperatorSuiteV2)(nil)))
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorSuiteV2Stmt, features.ComplianceEnhancements.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_SUITES, schema)
		return schema
	}()
)

const (
	// ComplianceOperatorSuiteV2TableName specifies the name of the table in postgres.
	ComplianceOperatorSuiteV2TableName = "compliance_operator_suite_v2"
)

// ComplianceOperatorSuiteV2 holds the Gorm model for Postgres table `compliance_operator_suite_v2`.
type ComplianceOperatorSuiteV2 struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Name       string `gorm:"column:name;type:varchar"`
	ClusterID  string `gorm:"column:clusterid;type:uuid;index:complianceoperatorsuitev2_sac_filter,type:hash"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
