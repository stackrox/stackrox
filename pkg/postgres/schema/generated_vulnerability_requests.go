// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedVulnerabilityRequestSearchFields contains pre-computed search fields for vulnerability_requests
	generatedVulnerabilityRequestSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedVulnerabilityRequestSchema is the pre-computed schema for vulnerability_requests table
	generatedVulnerabilityRequestSchema = &walker.Schema{
		Table:    "vulnerability_requests",
		Type:     "storage.VulnerabilityRequest",
		TypeName: "VulnerabilityRequest",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "TargetState",
				ColumnName: "TargetState",
				Type:       "storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Status",
				ColumnName: "Status",
				Type:       "storage.RequestStatus",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Expired",
				ColumnName: "Expired",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Requestor_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "Registry",
				ColumnName: "Scope_ImageScope_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Scope_ImageScope_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Scope_ImageScope_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Id",
				ColumnName: "RequesterV2_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "RequesterV2_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ExpiresOn",
				ColumnName: "DeferralReq_Expiry_ExpiresOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "ExpiresWhenFixed",
				ColumnName: "DeferralReq_Expiry_ExpiresWhenFixed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "ExpiryType",
				ColumnName: "DeferralReq_Expiry_ExpiryType",
				Type:       "storage.RequestExpiry_ExpiryType",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "Cves",
				ColumnName: "Cves_Cves",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.String,
			},
			{
				Name:       "CVEs",
				ColumnName: "DeferralUpdate_CVEs",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.String,
			},
			{
				Name:       "CVEs",
				ColumnName: "FalsePositiveUpdate_CVEs",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetVulnerabilityRequestSchema returns the generated schema for vulnerability_requests
func GetVulnerabilityRequestSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedVulnerabilityRequestSchema.OptionsMap == nil {
		generatedVulnerabilityRequestSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_VULN_REQUEST, generatedVulnerabilityRequestSearchFields))
	}
	return generatedVulnerabilityRequestSchema
}
