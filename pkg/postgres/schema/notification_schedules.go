// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNotificationSchedulesStmt holds the create statement for table `notification_schedules`.
	CreateTableNotificationSchedulesStmt = &postgres.CreateStmts{
		GormModel: (*NotificationSchedules)(nil),
		Children:  []*postgres.CreateStmts{},
		PostStmts: []string{
			"ALTER TABLE notification_schedules REPLICA IDENTITY FULL",
		},
	}

	// NotificationSchedulesSchema is the go schema for table `notification_schedules`.
	NotificationSchedulesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("notification_schedules")
		if schema != nil {
			return schema
		}
		schema = getNotificationScheduleSchema()
		schema.ScopingResource = resources.Notifications
		RegisterTable(schema, CreateTableNotificationSchedulesStmt)
		return schema
	}()
)

const (
	// NotificationSchedulesTableName specifies the name of the table in postgres.
	NotificationSchedulesTableName = "notification_schedules"
)

// NotificationSchedules holds the Gorm model for Postgres table `notification_schedules`.
type NotificationSchedules struct {
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	notificationScheduleSearchFields = map[search.FieldLabel]*search.Field{}

	notificationScheduleSchema = &walker.Schema{
		Table:    "notification_schedules",
		Type:     "*storage.NotificationSchedule",
		TypeName: "NotificationSchedule",
		Fields: []walker.Field{
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getNotificationScheduleSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if notificationScheduleSchema.OptionsMap == nil {
		notificationScheduleSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, notificationScheduleSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range notificationScheduleSchema.Fields {
		notificationScheduleSchema.Fields[i].Schema = notificationScheduleSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(notificationScheduleSchema)
	return notificationScheduleSchema
}
