// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableLogImbuesStmt holds the create statement for table `log_imbues`.
	CreateTableLogImbuesStmt = &postgres.CreateStmts{
		GormModel: (*LogImbues)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// LogImbuesSchema is the go schema for table `log_imbues`.
	LogImbuesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("log_imbues")
		if schema != nil {
			return schema
		}
		schema = getLogImbueSchema()
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableLogImbuesStmt)
		return schema
	}()
)

const (
	// LogImbuesTableName specifies the name of the table in postgres.
	LogImbuesTableName = "log_imbues"
)

// LogImbues holds the Gorm model for Postgres table `log_imbues`.
type LogImbues struct {
	ID         string     `gorm:"column:id;type:varchar;primaryKey"`
	Timestamp  *time.Time `gorm:"column:timestamp;type:timestamp"`
	Serialized []byte     `gorm:"column:serialized;type:bytea"`
}

var (
	logImbueSearchFields = map[search.FieldLabel]*search.Field{}

	logImbueSchema = &walker.Schema{
		Table:    "log_imbues",
		Type:     "*storage.LogImbue",
		TypeName: "LogImbue",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Timestamp",
				ColumnName: "Timestamp",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getLogImbueSchema() *walker.Schema {
	// Set up search options if not already done
	if logImbueSchema.OptionsMap == nil {
		logImbueSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, logImbueSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range logImbueSchema.Fields {
		logImbueSchema.Fields[i].Schema = logImbueSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(logImbueSchema)
	return logImbueSchema
}
