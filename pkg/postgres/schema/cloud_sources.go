// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableCloudSourcesStmt holds the create statement for table `cloud_sources`.
	CreateTableCloudSourcesStmt = &postgres.CreateStmts{
		GormModel: (*CloudSources)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// CloudSourcesSchema is the go schema for table `cloud_sources`.
	CloudSourcesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cloud_sources")
		if schema != nil {
			return schema
		}
		schema = getCloudSourceSchema()
		schema.ScopingResource = resources.Integration
		RegisterTable(schema, CreateTableCloudSourcesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_CLOUD_SOURCES, schema)
		return schema
	}()
)

const (
	// CloudSourcesTableName specifies the name of the table in postgres.
	CloudSourcesTableName = "cloud_sources"
)

// CloudSources holds the Gorm model for Postgres table `cloud_sources`.
type CloudSources struct {
	ID         string                   `gorm:"column:id;type:uuid;primaryKey"`
	Name       string                   `gorm:"column:name;type:varchar;unique"`
	Type       storage.CloudSource_Type `gorm:"column:type;type:integer"`
	Serialized []byte                   `gorm:"column:serialized;type:bytea"`
}

var (
	cloudSourceSearchFields = map[search.FieldLabel]*search.Field{}

	cloudSourceSchema = &walker.Schema{
		Table:    "cloud_sources",
		Type:     "*storage.CloudSource",
		TypeName: "CloudSource",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "storage.CloudSource_Type",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getCloudSourceSchema() *walker.Schema {
	// Set up search options if not already done
	if cloudSourceSchema.OptionsMap == nil {
		cloudSourceSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLOUD_SOURCES, cloudSourceSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range cloudSourceSchema.Fields {
		cloudSourceSchema.Fields[i].Schema = cloudSourceSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(cloudSourceSchema)
	return cloudSourceSchema
}
