// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableReportConfigurationsStmt holds the create statement for table `report_configurations`.
	CreateTableReportConfigurationsStmt = &postgres.CreateStmts{
		GormModel: (*ReportConfigurations)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ReportConfigurationsNotifiers)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ReportConfigurationsSchema is the go schema for table `report_configurations`.
	ReportConfigurationsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("report_configurations")
		if schema != nil {
			return schema
		}
		schema = getReportConfigurationSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Notifier": NotifiersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_REPORT_SNAPSHOT,
		}...)
		schema.ScopingResource = resources.WorkflowAdministration
		RegisterTable(schema, CreateTableReportConfigurationsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_REPORT_CONFIGURATIONS, schema)
		return schema
	}()
)

const (
	// ReportConfigurationsTableName specifies the name of the table in postgres.
	ReportConfigurationsTableName = "report_configurations"
	// ReportConfigurationsNotifiersTableName specifies the name of the table in postgres.
	ReportConfigurationsNotifiersTableName = "report_configurations_notifiers"
)

// ReportConfigurations holds the Gorm model for Postgres table `report_configurations`.
type ReportConfigurations struct {
	ID                        string                                 `gorm:"column:id;type:varchar;primaryKey"`
	Name                      string                                 `gorm:"column:name;type:varchar"`
	Type                      storage.ReportConfiguration_ReportType `gorm:"column:type;type:integer"`
	ScopeID                   string                                 `gorm:"column:scopeid;type:varchar"`
	ResourceScopeCollectionID string                                 `gorm:"column:resourcescope_collectionid;type:varchar"`
	CreatorName               string                                 `gorm:"column:creator_name;type:varchar"`
	Serialized                []byte                                 `gorm:"column:serialized;type:bytea"`
}

// ReportConfigurationsNotifiers holds the Gorm model for Postgres table `report_configurations_notifiers`.
type ReportConfigurationsNotifiers struct {
	ReportConfigurationsID  string               `gorm:"column:report_configurations_id;type:varchar;primaryKey"`
	Idx                     int                  `gorm:"column:idx;type:integer;primaryKey;index:reportconfigurationsnotifiers_idx,type:btree"`
	ID                      string               `gorm:"column:id;type:varchar"`
	ReportConfigurationsRef ReportConfigurations `gorm:"foreignKey:report_configurations_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	NotifiersRef            Notifiers            `gorm:"foreignKey:id;references:id;belongsTo;constraint:OnDelete:RESTRICT"`
}

var (
	reportConfigurationSearchFields = map[search.FieldLabel]*search.Field{}

	reportConfigurationSchema = &walker.Schema{
		Table:    "report_configurations",
		Type:     "*storage.ReportConfiguration",
		TypeName: "ReportConfiguration",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "storage.ReportConfiguration_ReportType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ScopeId",
				ColumnName: "ScopeId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CollectionId",
				ColumnName: "ResourceScope_CollectionId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Creator_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "report_configurations_notifiers",
				Type:     "*storage.NotifierConfiguration",
				TypeName: "NotifierConfiguration",
				Fields: []walker.Field{
					{
						Name:       "reportConfigurationID",
						ColumnName: "report_configurations_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getReportConfigurationSchema() *walker.Schema {
	// Set up search options if not already done
	if reportConfigurationSchema.OptionsMap == nil {
		reportConfigurationSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_REPORT_CONFIGURATIONS, reportConfigurationSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range reportConfigurationSchema.Fields {
		reportConfigurationSchema.Fields[i].Schema = reportConfigurationSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(reportConfigurationSchema)
	return reportConfigurationSchema
}
