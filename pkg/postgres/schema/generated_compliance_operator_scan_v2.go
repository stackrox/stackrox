// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedComplianceOperatorScanV2SearchFields contains pre-computed search fields for compliance_operator_scan_v2
	generatedComplianceOperatorScanV2SearchFields = map[search.FieldLabel]*search.Field{

		"Compliance": {
			FieldPath: "ScanConfigName",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_SCAN,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_SCAN,
		},

		"Scan": {
			FieldPath: "ScanRefId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_SCAN,
		},
	}

	// generatedComplianceOperatorScanV2Schema is the pre-computed schema for compliance_operator_scan_v2 table
	generatedComplianceOperatorScanV2Schema = &walker.Schema{
		Table:    "compliance_operator_scan_v2",
		Type:     "*storage.ComplianceOperatorScanV2",
		TypeName: "ComplianceOperatorScanV2",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "ScanConfigName",
				ColumnName: "scan_config_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Errors",
				ColumnName: "errors",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Annotations",
				ColumnName: "annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "ScanType",
				ColumnName: "scan_type",
				Type:       "github.com/stackrox/rox/generated/storage.ScanType",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "NodeSelector",
				ColumnName: "node_selector",
				Type:       "github.com/stackrox/rox/generated/storage.NodeRole",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "ScanName",
				ColumnName: "scan_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "Warnings",
				ColumnName: "warnings",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ProductType",
				ColumnName: "product_type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ScanRefId",
				ColumnName: "scan_ref_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Scan",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Compliance,
	}
)

// GetComplianceOperatorScanV2Schema returns the generated schema for compliance_operator_scan_v2
func GetComplianceOperatorScanV2Schema() *walker.Schema {
	// Set up search options if not already done
	if generatedComplianceOperatorScanV2Schema.OptionsMap == nil {
		generatedComplianceOperatorScanV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_SCAN, generatedComplianceOperatorScanV2SearchFields))
	}
	return generatedComplianceOperatorScanV2Schema
}
