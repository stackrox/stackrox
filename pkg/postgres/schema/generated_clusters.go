// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// GeneratedClusterSchema is the pre-computed schema for clusters table
	GeneratedClusterSchema = &walker.Schema{
		Table:    "clusters",
		Type:     "*storage.Cluster",
		TypeName: "Cluster",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster,store",
				},
			},

			{
				Name:       "Type",
				ColumnName: "type",
				Type:       "github.com/stackrox/rox/generated/storage.ClusterType",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "MainImage",
				ColumnName: "main_image",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "CollectorImage",
				ColumnName: "collector_image",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "CentralApiEndpoint",
				ColumnName: "central_api_endpoint",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "RuntimeSupport",
				ColumnName: "runtime_support",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "CollectionMethod",
				ColumnName: "collection_method",
				Type:       "github.com/stackrox/rox/generated/storage.CollectionMethod",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "AdmissionController",
				ColumnName: "admission_controller",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "AdmissionControllerUpdates",
				ColumnName: "admission_controller_updates",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "AdmissionControllerEvents",
				ColumnName: "admission_controller_events",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Priority",
				ColumnName: "priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},

			{
				Name:       "SlimCollector",
				ColumnName: "slim_collector",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "AuditLogState",
				ColumnName: "audit_log_state",
				Type:       "map[string]*github.com/stackrox/rox/generated/storage.AuditLogFileState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "InitBundleId",
				ColumnName: "init_bundle_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ManagedBy",
				ColumnName: "managed_by",
				Type:       "github.com/stackrox/rox/generated/storage.ManagerType",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "SensorCapabilities",
				ColumnName: "sensor_capabilities",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "AdmissionControllerFailOnError",
				ColumnName: "admission_controller_fail_on_error",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Cluster,
	}
)

// GetClusterSchema returns the generated schema for clusters
func GetClusterSchema() *walker.Schema {
	// Set up search options if not already done
	if GeneratedClusterSchema.OptionsMap == nil {
		GeneratedClusterSchema.SetOptionsMap(search.Walk(v1.SearchCategory_CLUSTERS, "clusters", (*storage.Cluster)(nil)))
	}
	return GeneratedClusterSchema
}
