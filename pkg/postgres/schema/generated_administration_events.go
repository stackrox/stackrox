// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedAdministrationEventSearchFields contains pre-computed search fields for administration_events
	generatedAdministrationEventSearchFields = map[search.FieldLabel]*search.Field{

		"Event": {
			FieldPath: "Type",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ADMINISTRATION_EVENTS,
		},

		"Last": {
			FieldPath: "LastOccurredAt",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ADMINISTRATION_EVENTS,
		},

		"Created": {
			FieldPath: "CreatedAt",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_ADMINISTRATION_EVENTS,
		},
	}

	// generatedAdministrationEventSchema is the pre-computed schema for administration_events table
	generatedAdministrationEventSchema = &walker.Schema{
		Table:    "administration_events",
		Type:     "*storage.AdministrationEvent",
		TypeName: "AdministrationEvent",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "Type",
				ColumnName: "type",
				Type:       "github.com/stackrox/rox/generated/storage.AdministrationEventType",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Event",
				},
			},

			{
				Name:       "Level",
				ColumnName: "level",
				Type:       "github.com/stackrox/rox/generated/storage.AdministrationEventLevel",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Event",
				},
			},

			{
				Name:       "Message",
				ColumnName: "message",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Hint",
				ColumnName: "hint",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Domain",
				ColumnName: "domain",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Event",
				},
			},

			{
				Name:       "NumOccurrences",
				ColumnName: "num_occurrences",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Event",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Administration,
	}
)

// GetAdministrationEventSchema returns the generated schema for administration_events
func GetAdministrationEventSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedAdministrationEventSchema.OptionsMap == nil {
		generatedAdministrationEventSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ADMINISTRATION_EVENTS, generatedAdministrationEventSearchFields))
	}
	return generatedAdministrationEventSchema
}
