// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// GeneratedPolicySearchFields contains pre-computed search fields for policies
	GeneratedPolicySearchFields = map[search.FieldLabel]*search.Field{

		"Policy": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Description": {
			FieldPath: "Description",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Disabled": {
			FieldPath: "Disabled",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Category": {
			FieldPath: "Categories",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Lifecycle": {
			FieldPath: "LifecycleStages",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Severity": {
			FieldPath: "Severity",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"Enforcement": {
			FieldPath: "EnforcementActions",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"SORT_Policy": {
			FieldPath: "SORTName",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
			Analyzer:  "keyword",
		},

		"SORT_Lifecycle": {
			FieldPath: "SORTLifecycleStage",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},

		"SORT_Enforcement": {
			FieldPath: "SORTEnforcement",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
		},
	}

	// GeneratedPolicySchema is the pre-computed schema for policies table
	GeneratedPolicySchema = &walker.Schema{
		Table:    "policies",
		Type:     "*storage.Policy",
		TypeName: "Policy",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Policy",
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Policy,store",
				},
			},

			{
				Name:       "Description",
				ColumnName: "description",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Description",
				},
			},

			{
				Name:       "Rationale",
				ColumnName: "rationale",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Remediation",
				ColumnName: "remediation",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "Disabled",
				ColumnName: "disabled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Disabled",
				},
			},

			{
				Name:       "Categories",
				ColumnName: "categories",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Category,store",
				},
			},

			{
				Name:       "LifecycleStages",
				ColumnName: "lifecycle_stages",
				Type:       "[]github.com/stackrox/rox/generated/storage.LifecycleStage",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Lifecycle",
				},
			},

			{
				Name:       "EventSource",
				ColumnName: "event_source",
				Type:       "github.com/stackrox/rox/generated/storage.EventSource",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "Exclusions",
				ColumnName: "exclusions",
				Type:       "[]github.com/stackrox/rox/generated/storage.Exclusion",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Scope",
				ColumnName: "scope",
				Type:       "[]github.com/stackrox/rox/generated/storage.Scope",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Severity",
				ColumnName: "severity",
				Type:       "github.com/stackrox/rox/generated/storage.Severity",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Severity,store",
				},
			},

			{
				Name:       "EnforcementActions",
				ColumnName: "enforcement_actions",
				Type:       "[]github.com/stackrox/rox/generated/storage.EnforcementAction",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Enforcement",
				},
			},

			{
				Name:       "Notifiers",
				ColumnName: "notifiers",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},

			{
				Name:       "SORTName",
				ColumnName: "s_o_r_t_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "SORT_Policy,hidden,analyzer=keyword",
				},
			},

			{
				Name:       "SORTLifecycleStage",
				ColumnName: "s_o_r_t_lifecycle_stage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "SORT_Lifecycle",
				},
			},

			{
				Name:       "SORTEnforcement",
				ColumnName: "s_o_r_t_enforcement",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "SORT_Enforcement,hidden",
				},
			},

			{
				Name:       "PolicyVersion",
				ColumnName: "policy_version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "PolicySections",
				ColumnName: "policy_sections",
				Type:       "[]github.com/stackrox/rox/generated/storage.PolicySection",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "MitreAttackVectors",
				ColumnName: "mitre_attack_vectors",
				Type:       "[]github.com/stackrox/rox/generated/storage.Policy_MitreAttackVectors",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "CriteriaLocked",
				ColumnName: "criteria_locked",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "MitreVectorsLocked",
				ColumnName: "mitre_vectors_locked",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "IsDefault",
				ColumnName: "is_default",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "Source",
				ColumnName: "source",
				Type:       "github.com/stackrox/rox/generated/storage.PolicySource",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.WorkflowAdministration,
	}
)

// GetPolicySchema returns the generated schema for policies
func GetPolicySchema() *walker.Schema {
	// Set up search options if not already done
	if GeneratedPolicySchema.OptionsMap == nil {
		GeneratedPolicySchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_POLICIES, GeneratedPolicySearchFields))
	}
	return GeneratedPolicySchema
}
