// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedPolicySearchFields contains pre-computed search fields for policies
	generatedPolicySearchFields = map[search.FieldLabel]*search.Field{}

	// generatedPolicySchema is the pre-computed schema for policies table
	generatedPolicySchema = &walker.Schema{
		Table:    "policies",
		Type:     "storage.Policy",
		TypeName: "Policy",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Description",
				ColumnName: "Description",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Disabled",
				ColumnName: "Disabled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "Categories",
				ColumnName: "Categories",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.String,
			},
			{
				Name:       "LifecycleStages",
				ColumnName: "LifecycleStages",
				Type:       "[]storage.LifecycleStage",
				SQLType:    "int[]",
				DataType:   postgres.String,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.Severity",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "EnforcementActions",
				ColumnName: "EnforcementActions",
				Type:       "[]storage.EnforcementAction",
				SQLType:    "int[]",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTName",
				ColumnName: "SORTName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTLifecycleStage",
				ColumnName: "SORTLifecycleStage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTEnforcement",
				ColumnName: "SORTEnforcement",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetPolicySchema returns the generated schema for policies
func GetPolicySchema() *walker.Schema {
	// Set up search options if not already done
	if generatedPolicySchema.OptionsMap == nil {
		generatedPolicySchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_POLICIES, generatedPolicySearchFields))
	}
	return generatedPolicySchema
}
