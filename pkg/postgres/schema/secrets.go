// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableSecretsStmt holds the create statement for table `secrets`.
	CreateTableSecretsStmt = &postgres.CreateStmts{
		GormModel: (*Secrets)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*SecretsFiles)(nil),
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						GormModel: (*SecretsFilesRegistries)(nil),
						Children:  []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// SecretsSchema is the go schema for table `secrets`.
	SecretsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("secrets")
		if schema != nil {
			return schema
		}
		schema = getSecretSchema()
		schema.ScopingResource = resources.Secret
		RegisterTable(schema, CreateTableSecretsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_SECRETS, schema)
		return schema
	}()
)

const (
	// SecretsTableName specifies the name of the table in postgres.
	SecretsTableName = "secrets"
	// SecretsFilesTableName specifies the name of the table in postgres.
	SecretsFilesTableName = "secrets_files"
	// SecretsFilesRegistriesTableName specifies the name of the table in postgres.
	SecretsFilesRegistriesTableName = "secrets_files_registries"
)

// Secrets holds the Gorm model for Postgres table `secrets`.
type Secrets struct {
	ID          string     `gorm:"column:id;type:uuid;primaryKey"`
	Name        string     `gorm:"column:name;type:varchar"`
	ClusterID   string     `gorm:"column:clusterid;type:uuid;index:secrets_sac_filter,type:btree"`
	ClusterName string     `gorm:"column:clustername;type:varchar"`
	Namespace   string     `gorm:"column:namespace;type:varchar;index:secrets_sac_filter,type:btree"`
	CreatedAt   *time.Time `gorm:"column:createdat;type:timestamp"`
	Serialized  []byte     `gorm:"column:serialized;type:bytea"`
}

// SecretsFiles holds the Gorm model for Postgres table `secrets_files`.
type SecretsFiles struct {
	SecretsID   string             `gorm:"column:secrets_id;type:uuid;primaryKey"`
	Idx         int                `gorm:"column:idx;type:integer;primaryKey;index:secretsfiles_idx,type:btree"`
	Type        storage.SecretType `gorm:"column:type;type:integer"`
	CertEndDate *time.Time         `gorm:"column:cert_enddate;type:timestamp"`
	SecretsRef  Secrets            `gorm:"foreignKey:secrets_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// SecretsFilesRegistries holds the Gorm model for Postgres table `secrets_files_registries`.
type SecretsFilesRegistries struct {
	SecretsID       string       `gorm:"column:secrets_id;type:uuid;primaryKey"`
	SecretsFilesIdx int          `gorm:"column:secrets_files_idx;type:integer;primaryKey"`
	Idx             int          `gorm:"column:idx;type:integer;primaryKey;index:secretsfilesregistries_idx,type:btree"`
	Name            string       `gorm:"column:name;type:varchar"`
	SecretsFilesRef SecretsFiles `gorm:"foreignKey:secrets_id,secrets_files_idx;references:secrets_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	secretSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Cert Expiration"): {
			FieldPath: ".files.Metadata.Cert.end_date.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: ".cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Created Time"): {
			FieldPath: ".created_at.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Image Pull Secret Registry"): {
			FieldPath: ".files.Metadata.ImagePullSecret.registries.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: ".namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: ".name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret ID"): {
			FieldPath: ".id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret Type"): {
			FieldPath: ".files.type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
	}

	secretSchema = &walker.Schema{
		Table:    "secrets",
		Type:     "*storage.Secret",
		TypeName: "Secret",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Secret ID",
					Enabled:   true,
				},
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Secret",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster ID",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster",
					Enabled:   true,
				},
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Namespace",
					Enabled:   true,
				},
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "secrets_files",
				Type:     "*storage.SecretDataFile",
				TypeName: "SecretDataFile",
				Fields: []walker.Field{
					{
						Name:       "secretID",
						ColumnName: "secrets_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Type",
						ColumnName: "Type",
						Type:       "storage.SecretType",
						SQLType:    "integer",
						DataType:   postgres.Enum,
						Search: walker.SearchField{
							FieldName: "Secret Type",
							Enabled:   true,
						},
					},
					{
						Name:       "EndDate",
						ColumnName: "Cert_EndDate",
						Type:       "*timestamppb.Timestamp",
						SQLType:    "timestamp",
						DataType:   postgres.DateTime,
						Search: walker.SearchField{
							FieldName: "Cert Expiration",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{

					&walker.Schema{
						Table:    "secrets_files_registries",
						Type:     "*storage.ImagePullSecret_Registry",
						TypeName: "ImagePullSecret_Registry",
						Fields: []walker.Field{
							{
								Name:       "secretID",
								ColumnName: "secrets_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "secretFileIdx",
								ColumnName: "secrets_files_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Image Pull Secret Registry",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},
				},
			},
		},
	}
)

func getSecretSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if secretSchema.OptionsMap == nil {
		secretSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SECRETS, secretSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range secretSchema.Fields {
		secretSchema.Fields[i].Schema = secretSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(secretSchema)
	return secretSchema
}
