// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNetworkpoliciesundodeploymentsStmt holds the create statement for table `networkpoliciesundodeployments`.
	CreateTableNetworkpoliciesundodeploymentsStmt = &postgres.CreateStmts{
		GormModel: (*Networkpoliciesundodeployments)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// NetworkpoliciesundodeploymentsSchema is the go schema for table `networkpoliciesundodeployments`.
	NetworkpoliciesundodeploymentsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("networkpoliciesundodeployments")
		if schema != nil {
			return schema
		}
		schema = getNetworkPolicyApplicationUndoDeploymentRecordSchema()
		schema.ScopingResource = resources.NetworkPolicy
		RegisterTable(schema, CreateTableNetworkpoliciesundodeploymentsStmt)
		return schema
	}()
)

const (
	// NetworkpoliciesundodeploymentsTableName specifies the name of the table in postgres.
	NetworkpoliciesundodeploymentsTableName = "networkpoliciesundodeployments"
)

// Networkpoliciesundodeployments holds the Gorm model for Postgres table `networkpoliciesundodeployments`.
type Networkpoliciesundodeployments struct {
	DeploymentID string `gorm:"column:deploymentid;type:uuid;primaryKey"`
	Serialized   []byte `gorm:"column:serialized;type:bytea"`
}

var (
	networkPolicyApplicationUndoDeploymentRecordSearchFields = map[search.FieldLabel]*search.Field{}

	networkPolicyApplicationUndoDeploymentRecordSchema = &walker.Schema{
		Table:    "networkpoliciesundodeployments",
		Type:     "*storage.NetworkPolicyApplicationUndoDeploymentRecord",
		TypeName: "NetworkPolicyApplicationUndoDeploymentRecord",
		Fields: []walker.Field{
			{
				Name:       "DeploymentId",
				ColumnName: "DeploymentId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getNetworkPolicyApplicationUndoDeploymentRecordSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if networkPolicyApplicationUndoDeploymentRecordSchema.OptionsMap == nil {
		networkPolicyApplicationUndoDeploymentRecordSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, networkPolicyApplicationUndoDeploymentRecordSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range networkPolicyApplicationUndoDeploymentRecordSchema.Fields {
		networkPolicyApplicationUndoDeploymentRecordSchema.Fields[i].Schema = networkPolicyApplicationUndoDeploymentRecordSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(networkPolicyApplicationUndoDeploymentRecordSchema)
	return networkPolicyApplicationUndoDeploymentRecordSchema
}
