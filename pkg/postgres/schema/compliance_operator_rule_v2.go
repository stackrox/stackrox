// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceOperatorRuleV2Stmt holds the create statement for table `compliance_operator_rule_v2`.
	CreateTableComplianceOperatorRuleV2Stmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorRuleV2)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ComplianceOperatorRuleV2Controls)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ComplianceOperatorRuleV2Schema is the go schema for table `compliance_operator_rule_v2`.
	ComplianceOperatorRuleV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_rule_v2")
		if schema != nil {
			return schema
		}
		schema = getComplianceOperatorRuleV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorRuleV2Stmt, features.ComplianceEnhancements.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_RULES, schema)
		return schema
	}()
)

const (
	// ComplianceOperatorRuleV2TableName specifies the name of the table in postgres.
	ComplianceOperatorRuleV2TableName = "compliance_operator_rule_v2"
	// ComplianceOperatorRuleV2ControlsTableName specifies the name of the table in postgres.
	ComplianceOperatorRuleV2ControlsTableName = "compliance_operator_rule_v2_controls"
)

// ComplianceOperatorRuleV2 holds the Gorm model for Postgres table `compliance_operator_rule_v2`.
type ComplianceOperatorRuleV2 struct {
	ID         string               `gorm:"column:id;type:varchar;primaryKey"`
	Name       string               `gorm:"column:name;type:varchar"`
	RuleType   string               `gorm:"column:ruletype;type:varchar"`
	Severity   storage.RuleSeverity `gorm:"column:severity;type:integer"`
	ClusterID  string               `gorm:"column:clusterid;type:uuid;index:complianceoperatorrulev2_sac_filter,type:hash"`
	RuleRefID  string               `gorm:"column:rulerefid;type:uuid"`
	Serialized []byte               `gorm:"column:serialized;type:bytea"`
}

// ComplianceOperatorRuleV2Controls holds the Gorm model for Postgres table `compliance_operator_rule_v2_controls`.
type ComplianceOperatorRuleV2Controls struct {
	ComplianceOperatorRuleV2ID  string                   `gorm:"column:compliance_operator_rule_v2_id;type:varchar;primaryKey"`
	Idx                         int                      `gorm:"column:idx;type:integer;primaryKey;index:complianceoperatorrulev2controls_idx,type:btree"`
	Standard                    string                   `gorm:"column:standard;type:varchar"`
	Control                     string                   `gorm:"column:control;type:varchar"`
	ComplianceOperatorRuleV2Ref ComplianceOperatorRuleV2 `gorm:"foreignKey:compliance_operator_rule_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	complianceOperatorRuleV2SearchFields = map[search.FieldLabel]*search.Field{}

	complianceOperatorRuleV2Schema = &walker.Schema{
		Table:    "compliance_operator_rule_v2",
		Type:     "*storage.ComplianceOperatorRuleV2",
		TypeName: "ComplianceOperatorRuleV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "RuleType",
				ColumnName: "RuleType",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.RuleSeverity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "RuleRefId",
				ColumnName: "RuleRefId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "compliance_operator_rule_v2_controls",
				Type:     "*storage.RuleControls",
				TypeName: "RuleControls",
				Fields: []walker.Field{
					{
						Name:       "complianceOperatorRuleV2ID",
						ColumnName: "compliance_operator_rule_v2_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Standard",
						ColumnName: "Standard",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Compliance Standard",
							Enabled:   true,
						},
					},
					{
						Name:       "Control",
						ColumnName: "Control",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Compliance Control",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getComplianceOperatorRuleV2Schema() *walker.Schema {
	// Set up search options if not already done
	if complianceOperatorRuleV2Schema.OptionsMap == nil {
		complianceOperatorRuleV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_RULES, complianceOperatorRuleV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceOperatorRuleV2Schema.Fields {
		complianceOperatorRuleV2Schema.Fields[i].Schema = complianceOperatorRuleV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceOperatorRuleV2Schema)
	return complianceOperatorRuleV2Schema
}
