// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedNodeComponentEdgeSearchFields contains pre-computed search fields for node_component_edges
	generatedNodeComponentEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedNodeComponentEdgeSchema is the pre-computed schema for node_component_edges table
	generatedNodeComponentEdgeSchema = &walker.Schema{
		Table:    "node_component_edges",
		Type:     "storage.NodeComponentEdge",
		TypeName: "NodeComponentEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "NodeId",
				ColumnName: "NodeId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "NodeComponentId",
				ColumnName: "NodeComponentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetNodeComponentEdgeSchema returns the generated schema for node_component_edges
func GetNodeComponentEdgeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedNodeComponentEdgeSchema.OptionsMap == nil {
		generatedNodeComponentEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODE_COMPONENT_EDGE, generatedNodeComponentEdgeSearchFields))
	}
	return generatedNodeComponentEdgeSchema
}
