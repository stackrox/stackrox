// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageCVESearchFields contains pre-computed search fields for image_cves
	generatedImageCVESearchFields = map[search.FieldLabel]*search.Field{

		"CVE": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},

		"Operating": {
			FieldPath: "OperatingSystem",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},

		"CVSS": {
			FieldPath: "Cvss",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},

		"Severity": {
			FieldPath: "Severity",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},

		"Impact": {
			FieldPath: "ImpactScore",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},

		"NVD": {
			FieldPath: "Nvdcvss",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGE_VULNERABILITIES,
		},
	}

	// generatedImageCVESchema is the pre-computed schema for image_cves table
	generatedImageCVESchema = &walker.Schema{
		Table:    "image_cves",
		Type:     "*storage.ImageCVE",
		TypeName: "ImageCVE",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "CVE",
				},
			},

			{
				Name:       "OperatingSystem",
				ColumnName: "operating_system",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Operating",
				},
			},

			{
				Name:       "Cvss",
				ColumnName: "cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "CVSS,store",
				},
			},

			{
				Name:       "Severity",
				ColumnName: "severity",
				Type:       "github.com/stackrox/rox/generated/storage.VulnerabilitySeverity",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Severity",
				},
			},

			{
				Name:       "ImpactScore",
				ColumnName: "impact_score",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Impact",
				},
			},

			{
				Name:       "Snoozed",
				ColumnName: "snoozed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "CVE",
				},
			},

			{
				Name:       "Nvdcvss",
				ColumnName: "nvdcvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "NVD",
				},
			},

			{
				Name:       "CvssMetrics",
				ColumnName: "cvss_metrics",
				Type:       "[]github.com/stackrox/rox/generated/storage.CVSSScore",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "NvdScoreVersion",
				ColumnName: "nvd_score_version",
				Type:       "github.com/stackrox/rox/generated/storage.CvssScoreVersion",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Image,
	}
)

// GetImageCVESchema returns the generated schema for image_cves
func GetImageCVESchema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageCVESchema.OptionsMap == nil {
		generatedImageCVESchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULNERABILITIES, generatedImageCVESearchFields))
	}
	return generatedImageCVESchema
}
