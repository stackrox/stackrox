// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageCVESearchFields contains pre-computed search fields for image_cves
	generatedImageCVESearchFields = map[search.FieldLabel]*search.Field{}

	// generatedImageCVESchema is the pre-computed schema for image_cves table
	generatedImageCVESchema = &walker.Schema{
		Table:    "image_cves",
		Type:     "storage.ImageCVE",
		TypeName: "ImageCVE",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Cve",
				ColumnName: "CveBaseInfo_Cve",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PublishedOn",
				ColumnName: "CveBaseInfo_PublishedOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CveBaseInfo_CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "EpssProbability",
				ColumnName: "CveBaseInfo_Epss_EpssProbability",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Cvss",
				ColumnName: "Cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.VulnerabilitySeverity",
				SQLType:    "integer",
				DataType:   postgres.String,
			},
			{
				Name:       "ImpactScore",
				ColumnName: "ImpactScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "Snoozed",
				ColumnName: "Snoozed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.String,
			},
			{
				Name:       "SnoozeExpiry",
				ColumnName: "SnoozeExpiry",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.String,
			},
			{
				Name:       "Nvdcvss",
				ColumnName: "Nvdcvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetImageCVESchema returns the generated schema for image_cves
func GetImageCVESchema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageCVESchema.OptionsMap == nil {
		generatedImageCVESchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULNERABILITIES, generatedImageCVESearchFields))
	}
	return generatedImageCVESchema
}
