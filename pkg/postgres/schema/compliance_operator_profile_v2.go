// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceOperatorProfileV2Stmt holds the create statement for table `compliance_operator_profile_v2`.
	CreateTableComplianceOperatorProfileV2Stmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorProfileV2)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*ComplianceOperatorProfileV2Rules)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// ComplianceOperatorProfileV2Schema is the go schema for table `compliance_operator_profile_v2`.
	ComplianceOperatorProfileV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_profile_v2")
		if schema != nil {
			return schema
		}
		schema = getComplianceOperatorProfileV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.ComplianceOperatorRuleV2": ComplianceOperatorRuleV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorProfileV2Stmt, features.ComplianceEnhancements.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_PROFILES, schema)
		return schema
	}()
)

const (
	// ComplianceOperatorProfileV2TableName specifies the name of the table in postgres.
	ComplianceOperatorProfileV2TableName = "compliance_operator_profile_v2"
	// ComplianceOperatorProfileV2RulesTableName specifies the name of the table in postgres.
	ComplianceOperatorProfileV2RulesTableName = "compliance_operator_profile_v2_rules"
)

// ComplianceOperatorProfileV2 holds the Gorm model for Postgres table `compliance_operator_profile_v2`.
type ComplianceOperatorProfileV2 struct {
	ID             string `gorm:"column:id;type:varchar;primaryKey"`
	ProfileID      string `gorm:"column:profileid;type:varchar"`
	Name           string `gorm:"column:name;type:varchar"`
	ProfileVersion string `gorm:"column:profileversion;type:varchar"`
	ProductType    string `gorm:"column:producttype;type:varchar"`
	Standard       string `gorm:"column:standard;type:varchar"`
	ClusterID      string `gorm:"column:clusterid;type:uuid;index:complianceoperatorprofilev2_sac_filter,type:hash"`
	ProfileRefID   string `gorm:"column:profilerefid;type:uuid"`
	Serialized     []byte `gorm:"column:serialized;type:bytea"`
}

// ComplianceOperatorProfileV2Rules holds the Gorm model for Postgres table `compliance_operator_profile_v2_rules`.
type ComplianceOperatorProfileV2Rules struct {
	ComplianceOperatorProfileV2ID  string                      `gorm:"column:compliance_operator_profile_v2_id;type:varchar;primaryKey"`
	Idx                            int                         `gorm:"column:idx;type:integer;primaryKey;index:complianceoperatorprofilev2rules_idx,type:btree"`
	RuleName                       string                      `gorm:"column:rulename;type:varchar"`
	ComplianceOperatorProfileV2Ref ComplianceOperatorProfileV2 `gorm:"foreignKey:compliance_operator_profile_v2_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	complianceOperatorProfileV2SearchFields = map[search.FieldLabel]*search.Field{}

	complianceOperatorProfileV2Schema = &walker.Schema{
		Table:    "compliance_operator_profile_v2",
		Type:     "*storage.ComplianceOperatorProfileV2",
		TypeName: "ComplianceOperatorProfileV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ProfileId",
				ColumnName: "ProfileId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ProfileVersion",
				ColumnName: "ProfileVersion",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ProductType",
				ColumnName: "ProductType",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Standard",
				ColumnName: "Standard",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ProfileRefId",
				ColumnName: "ProfileRefId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "compliance_operator_profile_v2_rules",
				Type:     "*storage.ComplianceOperatorProfileV2_Rule",
				TypeName: "ComplianceOperatorProfileV2_Rule",
				Fields: []walker.Field{
					{
						Name:       "complianceOperatorProfileV2ID",
						ColumnName: "compliance_operator_profile_v2_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "RuleName",
						ColumnName: "RuleName",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
				Children: []*walker.Schema{},
			},
		},
	}
)

func getComplianceOperatorProfileV2Schema() *walker.Schema {
	// Set up search options if not already done
	if complianceOperatorProfileV2Schema.OptionsMap == nil {
		complianceOperatorProfileV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_PROFILES, complianceOperatorProfileV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceOperatorProfileV2Schema.Fields {
		complianceOperatorProfileV2Schema.Fields[i].Schema = complianceOperatorProfileV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceOperatorProfileV2Schema)
	return complianceOperatorProfileV2Schema
}
