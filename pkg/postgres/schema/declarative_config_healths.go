// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableDeclarativeConfigHealthsStmt holds the create statement for table `declarative_config_healths`.
	CreateTableDeclarativeConfigHealthsStmt = &postgres.CreateStmts{
		GormModel: (*DeclarativeConfigHealths)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// DeclarativeConfigHealthsSchema is the go schema for table `declarative_config_healths`.
	DeclarativeConfigHealthsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("declarative_config_healths")
		if schema != nil {
			return schema
		}
		schema = getDeclarativeConfigHealthSchema()
		schema.ScopingResource = resources.Integration
		RegisterTable(schema, CreateTableDeclarativeConfigHealthsStmt)
		return schema
	}()
)

const (
	// DeclarativeConfigHealthsTableName specifies the name of the table in postgres.
	DeclarativeConfigHealthsTableName = "declarative_config_healths"
)

// DeclarativeConfigHealths holds the Gorm model for Postgres table `declarative_config_healths`.
type DeclarativeConfigHealths struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	declarativeConfigHealthSearchFields = map[search.FieldLabel]*search.Field{}

	declarativeConfigHealthSchema = &walker.Schema{
		Table:    "declarative_config_healths",
		Type:     "*storage.DeclarativeConfigHealth",
		TypeName: "DeclarativeConfigHealth",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getDeclarativeConfigHealthSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if declarativeConfigHealthSchema.OptionsMap == nil {
		declarativeConfigHealthSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, declarativeConfigHealthSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range declarativeConfigHealthSchema.Fields {
		declarativeConfigHealthSchema.Fields[i].Schema = declarativeConfigHealthSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(declarativeConfigHealthSchema)
	return declarativeConfigHealthSchema
}
