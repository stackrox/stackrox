// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableReportSnapshotsStmt holds the create statement for table `report_snapshots`.
	CreateTableReportSnapshotsStmt = &postgres.CreateStmts{
		GormModel: (*ReportSnapshots)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ReportSnapshotsSchema is the go schema for table `report_snapshots`.
	ReportSnapshotsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("report_snapshots")
		if schema != nil {
			return schema
		}
		schema = getReportSnapshotSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.ReportConfiguration": ReportConfigurationsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.WorkflowAdministration
		RegisterTable(schema, CreateTableReportSnapshotsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_REPORT_SNAPSHOT, schema)
		return schema
	}()
)

const (
	// ReportSnapshotsTableName specifies the name of the table in postgres.
	ReportSnapshotsTableName = "report_snapshots"
)

// ReportSnapshots holds the Gorm model for Postgres table `report_snapshots`.
type ReportSnapshots struct {
	ReportID                             string                                  `gorm:"column:reportid;type:uuid;primaryKey"`
	ReportConfigurationID                string                                  `gorm:"column:reportconfigurationid;type:varchar"`
	Name                                 string                                  `gorm:"column:name;type:varchar"`
	ReportStatusRunState                 storage.ReportStatus_RunState           `gorm:"column:reportstatus_runstate;type:integer"`
	ReportStatusQueuedAt                 *time.Time                              `gorm:"column:reportstatus_queuedat;type:timestamp"`
	ReportStatusCompletedAt              *time.Time                              `gorm:"column:reportstatus_completedat;type:timestamp"`
	ReportStatusReportRequestType        storage.ReportStatus_RunMethod          `gorm:"column:reportstatus_reportrequesttype;type:integer"`
	ReportStatusReportNotificationMethod storage.ReportStatus_NotificationMethod `gorm:"column:reportstatus_reportnotificationmethod;type:integer"`
	RequesterID                          string                                  `gorm:"column:requester_id;type:varchar"`
	RequesterName                        string                                  `gorm:"column:requester_name;type:varchar"`
	AreaOfConcern                        string                                  `gorm:"column:areaofconcern;type:varchar"`
	Serialized                           []byte                                  `gorm:"column:serialized;type:bytea"`
	ReportConfigurationsRef              ReportConfigurations                    `gorm:"foreignKey:reportconfigurationid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	reportSnapshotSearchFields = map[search.FieldLabel]*search.Field{}

	reportSnapshotSchema = &walker.Schema{
		Table:    "report_snapshots",
		Type:     "*storage.ReportSnapshot",
		TypeName: "ReportSnapshot",
		Fields: []walker.Field{
			{
				Name:       "ReportId",
				ColumnName: "ReportId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ReportConfigurationId",
				ColumnName: "ReportConfigurationId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "RunState",
				ColumnName: "ReportStatus_RunState",
				Type:       "storage.ReportStatus_RunState",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "QueuedAt",
				ColumnName: "ReportStatus_QueuedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "CompletedAt",
				ColumnName: "ReportStatus_CompletedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ReportRequestType",
				ColumnName: "ReportStatus_ReportRequestType",
				Type:       "storage.ReportStatus_RunMethod",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ReportNotificationMethod",
				ColumnName: "ReportStatus_ReportNotificationMethod",
				Type:       "storage.ReportStatus_NotificationMethod",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Id",
				ColumnName: "Requester_Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Name",
				ColumnName: "Requester_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "AreaOfConcern",
				ColumnName: "AreaOfConcern",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getReportSnapshotSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if reportSnapshotSchema.OptionsMap == nil {
		reportSnapshotSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_REPORT_SNAPSHOT, reportSnapshotSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range reportSnapshotSchema.Fields {
		reportSnapshotSchema.Fields[i].Schema = reportSnapshotSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(reportSnapshotSchema)
	return reportSnapshotSchema
}
