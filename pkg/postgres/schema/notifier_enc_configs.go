// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNotifierEncConfigsStmt holds the create statement for table `notifier_enc_configs`.
	CreateTableNotifierEncConfigsStmt = &postgres.CreateStmts{
		GormModel: (*NotifierEncConfigs)(nil),
		Children:  []*postgres.CreateStmts{},
		PostStmts: []string{
			"ALTER TABLE notifier_enc_configs REPLICA IDENTITY FULL",
		},
	}

	// NotifierEncConfigsSchema is the go schema for table `notifier_enc_configs`.
	NotifierEncConfigsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("notifier_enc_configs")
		if schema != nil {
			return schema
		}
		schema = getNotifierEncConfigSchema()
		schema.ScopingResource = resources.InstallationInfo
		RegisterTable(schema, CreateTableNotifierEncConfigsStmt)
		return schema
	}()
)

const (
	// NotifierEncConfigsTableName specifies the name of the table in postgres.
	NotifierEncConfigsTableName = "notifier_enc_configs"
)

// NotifierEncConfigs holds the Gorm model for Postgres table `notifier_enc_configs`.
type NotifierEncConfigs struct {
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	notifierEncConfigSearchFields = map[search.FieldLabel]*search.Field{}

	notifierEncConfigSchema = &walker.Schema{
		Table:    "notifier_enc_configs",
		Type:     "*storage.NotifierEncConfig",
		TypeName: "NotifierEncConfig",
		Fields: []walker.Field{
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getNotifierEncConfigSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if notifierEncConfigSchema.OptionsMap == nil {
		notifierEncConfigSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, notifierEncConfigSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range notifierEncConfigSchema.Fields {
		notifierEncConfigSchema.Fields[i].Schema = notifierEncConfigSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(notifierEncConfigSchema)
	return notifierEncConfigSchema
}
