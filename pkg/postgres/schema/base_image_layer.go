// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableBaseImageLayerStmt holds the create statement for table `base_image_layer`.
	CreateTableBaseImageLayerStmt = &postgres.CreateStmts{
		GormModel: (*BaseImageLayer)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// BaseImageLayerSchema is the go schema for table `base_image_layer`.
	BaseImageLayerSchema = func() *walker.Schema {
		schema := GetSchemaForTable("base_image_layer")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.BaseImageLayer)(nil)), "base_image_layer")
		referencedSchemas := map[string]*walker.Schema{
			"storage.BaseImage": BaseImagesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.BaseImageLayer
		RegisterTable(schema, CreateTableBaseImageLayerStmt)
		return schema
	}()
)

const (
	// BaseImageLayerTableName specifies the name of the table in postgres.
	BaseImageLayerTableName = "base_image_layer"
)

// BaseImageLayer holds the Gorm model for Postgres table `base_image_layer`.
type BaseImageLayer struct {
	ID          int64  `gorm:"column:id;type:bigint;primaryKey"`
	Iid         int64  `gorm:"column:iid;type:bigint"`
	LayerDigest string `gorm:"column:layerdigest;type:varchar"`
	Level       int32  `gorm:"column:level;type:integer"`
	Serialized  []byte `gorm:"column:serialized;type:bytea"`
}
