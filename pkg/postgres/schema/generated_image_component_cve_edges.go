// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedComponentCVEEdgeSearchFields contains pre-computed search fields for image_component_cve_edges
	generatedComponentCVEEdgeSearchFields = map[search.FieldLabel]*search.Field{

		"Fixable": {
			FieldPath: "IsFixable",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPONENT_VULN_EDGE,
		},
	}

	// generatedComponentCVEEdgeSchema is the pre-computed schema for image_component_cve_edges table
	generatedComponentCVEEdgeSchema = &walker.Schema{
		Table:    "image_component_cve_edges",
		Type:     "*storage.ComponentCVEEdge",
		TypeName: "ComponentCVEEdge",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "IsFixable",
				ColumnName: "is_fixable",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Fixable,store",
				},
			},

			{
				Name:       "HasFixedBy",
				ColumnName: "has_fixed_by",
				Type:       "github.com/stackrox/rox/generated/storage.isComponentCVEEdge_HasFixedBy",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "ImageComponentId",
				ColumnName: "image_component_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},
			},

			{
				Name:       "ImageCveId",
				ColumnName: "image_cve_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Image,
	}
)

// GetComponentCVEEdgeSchema returns the generated schema for image_component_cve_edges
func GetComponentCVEEdgeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedComponentCVEEdgeSchema.OptionsMap == nil {
		generatedComponentCVEEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPONENT_VULN_EDGE, generatedComponentCVEEdgeSearchFields))
	}
	return generatedComponentCVEEdgeSchema
}
