// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableClusterCvesStmt holds the create statement for table `cluster_cves`.
	CreateTableClusterCvesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists cluster_cves (
                   Id varchar,
                   Cve varchar,
                   Cvss numeric,
                   ImpactScore numeric,
                   PublishedOn timestamp,
                   CreatedAt timestamp,
                   Suppressed bool,
                   SuppressExpiry timestamp,
                   Severity integer,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		GormModel: (*ClusterCves)(nil),
		Indexes:   []string{},
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterCvesSchema is the go schema for table `cluster_cves`.
	ClusterCvesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_cves")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.CVE)(nil)), "cluster_cves")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_CLUSTER_VULNERABILITIES, "cve", (*storage.CVE)(nil)))
		RegisterTable(schema, CreateTableClusterCvesStmt)
		return schema
	}()
)

const (
	ClusterCvesTableName = "cluster_cves"
)

// ClusterCves holds the Gorm model for Postgres table `cluster_cves`.
type ClusterCves struct {
	Id             string                        `gorm:"column:id;type:varchar;primaryKey"`
	Cve            string                        `gorm:"column:cve;type:varchar"`
	Cvss           float32                       `gorm:"column:cvss;type:numeric"`
	ImpactScore    float32                       `gorm:"column:impactscore;type:numeric"`
	PublishedOn    *time.Time                    `gorm:"column:publishedon;type:timestamp"`
	CreatedAt      *time.Time                    `gorm:"column:createdat;type:timestamp"`
	Suppressed     bool                          `gorm:"column:suppressed;type:bool"`
	SuppressExpiry *time.Time                    `gorm:"column:suppressexpiry;type:timestamp"`
	Severity       storage.VulnerabilitySeverity `gorm:"column:severity;type:integer"`
	Serialized     []byte                        `gorm:"column:serialized;type:bytea"`
}
