// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableClusterCvesStmt holds the create statement for table `cluster_cves`.
	CreateTableClusterCvesStmt = &postgres.CreateStmts{
		GormModel: (*ClusterCves)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterCvesSchema is the go schema for table `cluster_cves`.
	ClusterCvesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_cves")
		if schema != nil {
			return schema
		}
		schema = getClusterCVESchema()
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_CLUSTER_VULNERABILITIES,
			v1.SearchCategory_CLUSTER_VULN_EDGE,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Cluster
		RegisterTable(schema, CreateTableClusterCvesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_CLUSTER_VULNERABILITIES, schema)
		return schema
	}()
)

const (
	// ClusterCvesTableName specifies the name of the table in postgres.
	ClusterCvesTableName = "cluster_cves"
)

// ClusterCves holds the Gorm model for Postgres table `cluster_cves`.
type ClusterCves struct {
	ID                             string                        `gorm:"column:id;type:varchar;primaryKey"`
	CveBaseInfoCve                 string                        `gorm:"column:cvebaseinfo_cve;type:varchar;index:clustercves_cvebaseinfo_cve,type:btree"`
	CveBaseInfoPublishedOn         *time.Time                    `gorm:"column:cvebaseinfo_publishedon;type:timestamp"`
	CveBaseInfoCreatedAt           *time.Time                    `gorm:"column:cvebaseinfo_createdat;type:timestamp"`
	CveBaseInfoEpssEpssProbability float32                       `gorm:"column:cvebaseinfo_epss_epssprobability;type:numeric"`
	Cvss                           float32                       `gorm:"column:cvss;type:numeric"`
	Severity                       storage.VulnerabilitySeverity `gorm:"column:severity;type:integer"`
	ImpactScore                    float32                       `gorm:"column:impactscore;type:numeric"`
	Snoozed                        bool                          `gorm:"column:snoozed;type:bool"`
	SnoozeExpiry                   *time.Time                    `gorm:"column:snoozeexpiry;type:timestamp"`
	Type                           storage.CVE_CVEType           `gorm:"column:type;type:integer"`
	Serialized                     []byte                        `gorm:"column:serialized;type:bytea"`
}

var (
	clusterCVESearchFields = map[search.FieldLabel]*search.Field{}

	clusterCVESchema = &walker.Schema{
		Table:    "cluster_cves",
		Type:     "*storage.ClusterCVE",
		TypeName: "ClusterCVE",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Cve",
				ColumnName: "CveBaseInfo_Cve",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PublishedOn",
				ColumnName: "CveBaseInfo_PublishedOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CveBaseInfo_CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "EpssProbability",
				ColumnName: "CveBaseInfo_Epss_EpssProbability",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Cvss",
				ColumnName: "Cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.VulnerabilitySeverity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ImpactScore",
				ColumnName: "ImpactScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Snoozed",
				ColumnName: "Snoozed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "SnoozeExpiry",
				ColumnName: "SnoozeExpiry",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "storage.CVE_CVEType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getClusterCVESchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if clusterCVESchema.OptionsMap == nil {
		clusterCVESchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_VULNERABILITIES, clusterCVESearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range clusterCVESchema.Fields {
		clusterCVESchema.Fields[i].Schema = clusterCVESchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(clusterCVESchema)
	return clusterCVESchema
}
