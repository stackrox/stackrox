// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableBaseImageLayersStmt holds the create statement for table `base_image_layers`.
	CreateTableBaseImageLayersStmt = &postgres.CreateStmts{
		GormModel: (*BaseImageLayers)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// BaseImageLayersSchema is the go schema for table `base_image_layers`.
	BaseImageLayersSchema = func() *walker.Schema {
		schema := GetSchemaForTable("base_image_layers")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.BaseImageLayer)(nil)), "base_image_layers")
		referencedSchemas := map[string]*walker.Schema{
			"storage.BaseImage": BaseImagesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_BASE_IMAGE_LAYERS, "baseimagelayer", (*storage.BaseImageLayer)(nil)))
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_BASE_IMAGES,
			v1.SearchCategory_BASE_IMAGE_LAYERS,
		}...)
		schema.ScopingResource = resources.BaseImageLayer
		RegisterTable(schema, CreateTableBaseImageLayersStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_BASE_IMAGE_LAYERS, schema)
		return schema
	}()
)

const (
	// BaseImageLayersTableName specifies the name of the table in postgres.
	BaseImageLayersTableName = "base_image_layers"
)

// BaseImageLayers holds the Gorm model for Postgres table `base_image_layers`.
type BaseImageLayers struct {
	ID          string `gorm:"column:id;type:varchar;primaryKey"`
	Iid         string `gorm:"column:iid;type:varchar"`
	LayerDigest string `gorm:"column:layerdigest;type:varchar"`
	Level       int32  `gorm:"column:level;type:integer"`
	Serialized  []byte `gorm:"column:serialized;type:bytea"`
}
