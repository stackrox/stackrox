// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceOperatorCheckResultV2Stmt holds the create statement for table `compliance_operator_check_result_v2`.
	CreateTableComplianceOperatorCheckResultV2Stmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorCheckResultV2)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceOperatorCheckResultV2Schema is the go schema for table `compliance_operator_check_result_v2`.
	ComplianceOperatorCheckResultV2Schema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_check_result_v2")
		if schema != nil {
			return schema
		}
		schema = getComplianceOperatorCheckResultV2Schema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster":                               ClustersSchema,
			"storage.ComplianceOperatorScanV2":              ComplianceOperatorScanV2Schema,
			"storage.ComplianceOperatorScanConfigurationV2": ComplianceOperatorScanConfigurationV2Schema,
			"storage.ComplianceOperatorProfileV2":           ComplianceOperatorProfileV2Schema,
			"storage.ComplianceOperatorRuleV2":              ComplianceOperatorRuleV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorCheckResultV2Stmt, features.ComplianceEnhancements.Enabled)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_CHECK_RESULTS, schema)
		return schema
	}()
)

const (
	// ComplianceOperatorCheckResultV2TableName specifies the name of the table in postgres.
	ComplianceOperatorCheckResultV2TableName = "compliance_operator_check_result_v2"
)

// ComplianceOperatorCheckResultV2 holds the Gorm model for Postgres table `compliance_operator_check_result_v2`.
type ComplianceOperatorCheckResultV2 struct {
	ID              string                                              `gorm:"column:id;type:varchar;primaryKey"`
	CheckID         string                                              `gorm:"column:checkid;type:varchar"`
	CheckName       string                                              `gorm:"column:checkname;type:varchar"`
	ClusterID       string                                              `gorm:"column:clusterid;type:uuid;index:complianceoperatorcheckresultv2_sac_filter,type:hash"`
	Status          storage.ComplianceOperatorCheckResultV2_CheckStatus `gorm:"column:status;type:integer"`
	Severity        storage.RuleSeverity                                `gorm:"column:severity;type:integer"`
	CreatedTime     *time.Time                                          `gorm:"column:createdtime;type:timestamp"`
	ScanConfigName  string                                              `gorm:"column:scanconfigname;type:varchar"`
	Rationale       string                                              `gorm:"column:rationale;type:varchar"`
	ScanRefID       string                                              `gorm:"column:scanrefid;type:uuid"`
	RuleRefID       string                                              `gorm:"column:rulerefid;type:uuid"`
	LastStartedTime *time.Time                                          `gorm:"column:laststartedtime;type:timestamp"`
	Serialized      []byte                                              `gorm:"column:serialized;type:bytea"`
}

var (
	complianceOperatorCheckResultV2SearchFields = map[search.FieldLabel]*search.Field{}

	complianceOperatorCheckResultV2Schema = &walker.Schema{
		Table:    "compliance_operator_check_result_v2",
		Type:     "*storage.ComplianceOperatorCheckResultV2",
		TypeName: "ComplianceOperatorCheckResultV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "CheckId",
				ColumnName: "CheckId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CheckName",
				ColumnName: "CheckName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Status",
				ColumnName: "Status",
				Type:       "storage.ComplianceOperatorCheckResultV2_CheckStatus",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.RuleSeverity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "CreatedTime",
				ColumnName: "CreatedTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ScanConfigName",
				ColumnName: "ScanConfigName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Rationale",
				ColumnName: "Rationale",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ScanRefId",
				ColumnName: "ScanRefId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "RuleRefId",
				ColumnName: "RuleRefId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "LastStartedTime",
				ColumnName: "LastStartedTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getComplianceOperatorCheckResultV2Schema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if complianceOperatorCheckResultV2Schema.OptionsMap == nil {
		complianceOperatorCheckResultV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_CHECK_RESULTS, complianceOperatorCheckResultV2SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceOperatorCheckResultV2Schema.Fields {
		complianceOperatorCheckResultV2Schema.Fields[i].Schema = complianceOperatorCheckResultV2Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceOperatorCheckResultV2Schema)
	return complianceOperatorCheckResultV2Schema
}
