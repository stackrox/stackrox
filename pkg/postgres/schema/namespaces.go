// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNamespacesStmt holds the create statement for table `namespaces`.
	CreateTableNamespacesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists namespaces (
                   Id varchar,
                   Name varchar,
                   ClusterId varchar,
                   ClusterName varchar,
                   Labels jsonb,
                   Annotations jsonb,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		GormModel: (*Namespaces)(nil),
		Indexes:   []string{},
		Children:  []*postgres.CreateStmts{},
	}

	// NamespacesSchema is the go schema for table `namespaces`.
	NamespacesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("namespaces")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.NamespaceMetadata)(nil)), "namespaces")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_NAMESPACES, "namespacemetadata", (*storage.NamespaceMetadata)(nil)))
		RegisterTable(schema, CreateTableNamespacesStmt)
		return schema
	}()
)

const (
	NamespacesTableName = "namespaces"
)

// Namespaces holds the Gorm model for Postgres table `namespaces`.
type Namespaces struct {
	Id          string            `gorm:"column:id;type:varchar;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar"`
	ClusterId   string            `gorm:"column:clusterid;type:varchar"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	Serialized  []byte            `gorm:"column:serialized;type:bytea"`
}
