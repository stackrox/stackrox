// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableNamespacesStmt holds the create statement for table `namespaces`.
	CreateTableNamespacesStmt = &postgres.CreateStmts{
		GormModel: (*Namespaces)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// NamespacesSchema is the go schema for table `namespaces`.
	NamespacesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("namespaces")
		if schema != nil {
			return schema
		}
		schema = getNamespaceMetadataSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGE_VULNERABILITIES,
			v1.SearchCategory_COMPONENT_VULN_EDGE,
			v1.SearchCategory_IMAGE_COMPONENTS,
			v1.SearchCategory_IMAGE_COMPONENT_EDGE,
			v1.SearchCategory_IMAGE_VULN_EDGE,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Namespace
		RegisterTable(schema, CreateTableNamespacesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_NAMESPACES, schema)
		return schema
	}()
)

const (
	// NamespacesTableName specifies the name of the table in postgres.
	NamespacesTableName = "namespaces"
)

// Namespaces holds the Gorm model for Postgres table `namespaces`.
type Namespaces struct {
	ID          string            `gorm:"column:id;type:uuid;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar;index:namespaces_sac_filter,type:btree"`
	ClusterID   string            `gorm:"column:clusterid;type:uuid;index:namespaces_sac_filter,type:btree"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	Serialized  []byte            `gorm:"column:serialized;type:bytea"`
}

var (
	namespaceMetadataSearchFields = map[search.FieldLabel]*search.Field{}

	namespaceMetadataSchema = &walker.Schema{
		Table:    "namespaces",
		Type:     "*storage.NamespaceMetadata",
		TypeName: "NamespaceMetadata",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getNamespaceMetadataSchema() *walker.Schema {
	// Set up search options if not already done
	if namespaceMetadataSchema.OptionsMap == nil {
		namespaceMetadataSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NAMESPACES, namespaceMetadataSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range namespaceMetadataSchema.Fields {
		namespaceMetadataSchema.Fields[i].Schema = namespaceMetadataSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(namespaceMetadataSchema)
	return namespaceMetadataSchema
}
