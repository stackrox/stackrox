// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableScanAuditsStmt holds the create statement for table `scan_audits`.
	CreateTableScanAuditsStmt = &postgres.CreateStmts{
		GormModel: (*ScanAudits)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ScanAuditsSchema is the go schema for table `scan_audits`.
	ScanAuditsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("scan_audits")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ScanAudit)(nil)), "scan_audits")
		schema.ScopingResource = resources.Image
		RegisterTable(schema, CreateTableScanAuditsStmt)
		return schema
	}()
)

const (
	// ScanAuditsTableName specifies the name of the table in postgres.
	ScanAuditsTableName = "scan_audits"
)

// ScanAudits holds the Gorm model for Postgres table `scan_audits`.
type ScanAudits struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	ImageID    string `gorm:"column:imageid;type:varchar"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
