// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableDiscoveredClustersStmt holds the create statement for table `discovered_clusters`.
	CreateTableDiscoveredClustersStmt = &postgres.CreateStmts{
		GormModel: (*DiscoveredClusters)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// DiscoveredClustersSchema is the go schema for table `discovered_clusters`.
	DiscoveredClustersSchema = func() *walker.Schema {
		schema := GetSchemaForTable("discovered_clusters")
		if schema != nil {
			return schema
		}
		schema = getDiscoveredClusterSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.CloudSource": CloudSourcesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableDiscoveredClustersStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_DISCOVERED_CLUSTERS, schema)
		return schema
	}()
)

const (
	// DiscoveredClustersTableName specifies the name of the table in postgres.
	DiscoveredClustersTableName = "discovered_clusters"
)

// DiscoveredClusters holds the Gorm model for Postgres table `discovered_clusters`.
type DiscoveredClusters struct {
	ID                        string                           `gorm:"column:id;type:uuid;primaryKey"`
	MetadataName              string                           `gorm:"column:metadata_name;type:varchar"`
	MetadataType              storage.ClusterMetadata_Type     `gorm:"column:metadata_type;type:integer"`
	MetadataFirstDiscoveredAt *time.Time                       `gorm:"column:metadata_firstdiscoveredat;type:timestamp"`
	Status                    storage.DiscoveredCluster_Status `gorm:"column:status;type:integer"`
	SourceID                  string                           `gorm:"column:sourceid;type:uuid"`
	LastUpdatedAt             *time.Time                       `gorm:"column:lastupdatedat;type:timestamp"`
	Serialized                []byte                           `gorm:"column:serialized;type:bytea"`
}

var (
	discoveredClusterSearchFields = map[search.FieldLabel]*search.Field{}

	discoveredClusterSchema = &walker.Schema{
		Table:    "discovered_clusters",
		Type:     "*storage.DiscoveredCluster",
		TypeName: "DiscoveredCluster",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Metadata_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Metadata_Type",
				Type:       "storage.ClusterMetadata_Type",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "FirstDiscoveredAt",
				ColumnName: "Metadata_FirstDiscoveredAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Status",
				ColumnName: "Status",
				Type:       "storage.DiscoveredCluster_Status",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "SourceId",
				ColumnName: "SourceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdatedAt",
				ColumnName: "LastUpdatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getDiscoveredClusterSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if discoveredClusterSchema.OptionsMap == nil {
		discoveredClusterSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_DISCOVERED_CLUSTERS, discoveredClusterSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range discoveredClusterSchema.Fields {
		discoveredClusterSchema.Fields[i].Schema = discoveredClusterSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(discoveredClusterSchema)
	return discoveredClusterSchema
}
