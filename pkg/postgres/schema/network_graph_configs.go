// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNetworkGraphConfigsStmt holds the create statement for table `network_graph_configs`.
	CreateTableNetworkGraphConfigsStmt = &postgres.CreateStmts{
		GormModel: (*NetworkGraphConfigs)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// NetworkGraphConfigsSchema is the go schema for table `network_graph_configs`.
	NetworkGraphConfigsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("network_graph_configs")
		if schema != nil {
			return schema
		}
		schema = getNetworkGraphConfigSchema()
		schema.ScopingResource = resources.Administration
		RegisterTable(schema, CreateTableNetworkGraphConfigsStmt)
		return schema
	}()
)

const (
	// NetworkGraphConfigsTableName specifies the name of the table in postgres.
	NetworkGraphConfigsTableName = "network_graph_configs"
)

// NetworkGraphConfigs holds the Gorm model for Postgres table `network_graph_configs`.
type NetworkGraphConfigs struct {
	ID         string `gorm:"column:id;type:varchar;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	networkGraphConfigSearchFields = map[search.FieldLabel]*search.Field{}

	networkGraphConfigSchema = &walker.Schema{
		Table:    "network_graph_configs",
		Type:     "*storage.NetworkGraphConfig",
		TypeName: "NetworkGraphConfig",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getNetworkGraphConfigSchema() *walker.Schema {
	// Set up search options if not already done
	if networkGraphConfigSchema.OptionsMap == nil {
		networkGraphConfigSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, networkGraphConfigSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range networkGraphConfigSchema.Fields {
		networkGraphConfigSchema.Fields[i].Schema = networkGraphConfigSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(networkGraphConfigSchema)
	return networkGraphConfigSchema
}
