// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedTestStructSearchFields contains pre-computed search fields for test_structs
	generatedTestStructSearchFields = map[search.FieldLabel]*search.Field{

		"Test": {
			FieldPath: "Key1",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SEARCH_UNSET,
		},
	}

	// generatedTestStructSchema is the pre-computed schema for test_structs table
	generatedTestStructSchema = &walker.Schema{
		Table:    "test_structs",
		Type:     "*storage.TestStruct",
		TypeName: "TestStruct",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Key1",
				ColumnName: "key1",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Key2",
				ColumnName: "key2",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "StringSlice",
				ColumnName: "string_slice",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Bool",
				ColumnName: "bool",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Uint64",
				ColumnName: "uint64",
				Type:       "uint64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Int64",
				ColumnName: "int64",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Float",
				ColumnName: "float",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Enum",
				ColumnName: "enum",
				Type:       "github.com/stackrox/rox/generated/storage.TestStruct_Enum",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Enums",
				ColumnName: "enums",
				Type:       "[]github.com/stackrox/rox/generated/storage.TestStruct_Enum",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "String_",
				ColumnName: "string_",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "IntSliceDeprecated",
				ColumnName: "int_slice_deprecated",
				Type:       "[]int64",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Int32Slice",
				ColumnName: "int32_slice",
				Type:       "[]int32",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Nested",
				ColumnName: "nested",
				Type:       "[]github.com/stackrox/rox/generated/storage.TestStruct_Nested",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Oneof",
				ColumnName: "oneof",
				Type:       "github.com/stackrox/rox/generated/storage.isTestStruct_Oneof",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Namespace,
	}
)

// GetTestStructSchema returns the generated schema for test_structs
func GetTestStructSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedTestStructSchema.OptionsMap == nil {
		generatedTestStructSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, generatedTestStructSearchFields))
	}
	return generatedTestStructSchema
}
