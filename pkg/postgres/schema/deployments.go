// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableDeploymentsStmt holds the create statement for table `deployments`.
	CreateTableDeploymentsStmt = &postgres.CreateStmts{
		GormModel: (*Deployments)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*DeploymentsContainers)(nil),
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						GormModel: (*DeploymentsContainersEnvs)(nil),
						Children:  []*postgres.CreateStmts{},
					},
					&postgres.CreateStmts{
						GormModel: (*DeploymentsContainersVolumes)(nil),
						Children:  []*postgres.CreateStmts{},
					},
					&postgres.CreateStmts{
						GormModel: (*DeploymentsContainersSecrets)(nil),
						Children:  []*postgres.CreateStmts{},
					},
				},
			},
			&postgres.CreateStmts{
				GormModel: (*DeploymentsPorts)(nil),
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						GormModel: (*DeploymentsPortsExposureInfos)(nil),
						Children:  []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// DeploymentsSchema is the go schema for table `deployments`.
	DeploymentsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("deployments")
		if schema != nil {
			return schema
		}
		schema = getDeploymentSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":             ImagesSchema,
			"storage.NamespaceMetadata": NamespacesSchema,
			"storage.ImageV2":           ImagesV2Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_IMAGE_VULNERABILITIES_V2,
			v1.SearchCategory_IMAGE_COMPONENTS_V2,
			v1.SearchCategory_IMAGE_VULNERABILITIES,
			v1.SearchCategory_COMPONENT_VULN_EDGE,
			v1.SearchCategory_IMAGE_COMPONENTS,
			v1.SearchCategory_IMAGE_COMPONENT_EDGE,
			v1.SearchCategory_IMAGE_VULN_EDGE,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_IMAGES_V2,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
			v1.SearchCategory_PROCESS_INDICATORS,
			v1.SearchCategory_PODS,
		}...)
		schema.ScopingResource = resources.Deployment
		RegisterTable(schema, CreateTableDeploymentsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_DEPLOYMENTS, schema)
		return schema
	}()
)

const (
	// DeploymentsTableName specifies the name of the table in postgres.
	DeploymentsTableName = "deployments"
	// DeploymentsContainersTableName specifies the name of the table in postgres.
	DeploymentsContainersTableName = "deployments_containers"
	// DeploymentsContainersEnvsTableName specifies the name of the table in postgres.
	DeploymentsContainersEnvsTableName = "deployments_containers_envs"
	// DeploymentsContainersVolumesTableName specifies the name of the table in postgres.
	DeploymentsContainersVolumesTableName = "deployments_containers_volumes"
	// DeploymentsContainersSecretsTableName specifies the name of the table in postgres.
	DeploymentsContainersSecretsTableName = "deployments_containers_secrets"
	// DeploymentsPortsTableName specifies the name of the table in postgres.
	DeploymentsPortsTableName = "deployments_ports"
	// DeploymentsPortsExposureInfosTableName specifies the name of the table in postgres.
	DeploymentsPortsExposureInfosTableName = "deployments_ports_exposure_infos"
)

// Deployments holds the Gorm model for Postgres table `deployments`.
type Deployments struct {
	ID                            string                  `gorm:"column:id;type:uuid;primaryKey"`
	Name                          string                  `gorm:"column:name;type:varchar"`
	Type                          string                  `gorm:"column:type;type:varchar"`
	Namespace                     string                  `gorm:"column:namespace;type:varchar;index:deployments_sac_filter,type:btree"`
	NamespaceID                   string                  `gorm:"column:namespaceid;type:uuid"`
	OrchestratorComponent         bool                    `gorm:"column:orchestratorcomponent;type:bool"`
	Labels                        map[string]string       `gorm:"column:labels;type:jsonb"`
	PodLabels                     map[string]string       `gorm:"column:podlabels;type:jsonb"`
	Created                       *time.Time              `gorm:"column:created;type:timestamp"`
	ClusterID                     string                  `gorm:"column:clusterid;type:uuid;index:deployments_sac_filter,type:btree"`
	ClusterName                   string                  `gorm:"column:clustername;type:varchar"`
	Annotations                   map[string]string       `gorm:"column:annotations;type:jsonb"`
	Priority                      int64                   `gorm:"column:priority;type:bigint"`
	ImagePullSecrets              *pq.StringArray         `gorm:"column:imagepullsecrets;type:text[]"`
	ServiceAccount                string                  `gorm:"column:serviceaccount;type:varchar"`
	ServiceAccountPermissionLevel storage.PermissionLevel `gorm:"column:serviceaccountpermissionlevel;type:integer"`
	RiskScore                     float32                 `gorm:"column:riskscore;type:numeric;index:deployments_riskscore,type:btree"`
	PlatformComponent             bool                    `gorm:"column:platformcomponent;type:bool"`
	Serialized                    []byte                  `gorm:"column:serialized;type:bytea"`
}

// DeploymentsContainers holds the Gorm model for Postgres table `deployments_containers`.
type DeploymentsContainers struct {
	DeploymentsID                         string          `gorm:"column:deployments_id;type:uuid;primaryKey"`
	Idx                                   int             `gorm:"column:idx;type:integer;primaryKey;index:deploymentscontainers_idx,type:btree"`
	ImageID                               string          `gorm:"column:image_id;type:varchar;index:deploymentscontainers_image_id,type:hash"`
	ImageNameRegistry                     string          `gorm:"column:image_name_registry;type:varchar"`
	ImageNameRemote                       string          `gorm:"column:image_name_remote;type:varchar"`
	ImageNameTag                          string          `gorm:"column:image_name_tag;type:varchar"`
	ImageNameFullName                     string          `gorm:"column:image_name_fullname;type:varchar"`
	ImageIDV2                             string          `gorm:"column:image_idv2;type:varchar;index:deploymentscontainers_image_idv2,type:btree"`
	SecurityContextPrivileged             bool            `gorm:"column:securitycontext_privileged;type:bool"`
	SecurityContextDropCapabilities       *pq.StringArray `gorm:"column:securitycontext_dropcapabilities;type:text[]"`
	SecurityContextAddCapabilities        *pq.StringArray `gorm:"column:securitycontext_addcapabilities;type:text[]"`
	SecurityContextReadOnlyRootFilesystem bool            `gorm:"column:securitycontext_readonlyrootfilesystem;type:bool"`
	ResourcesCPUCoresRequest              float32         `gorm:"column:resources_cpucoresrequest;type:numeric"`
	ResourcesCPUCoresLimit                float32         `gorm:"column:resources_cpucoreslimit;type:numeric"`
	ResourcesMemoryMbRequest              float32         `gorm:"column:resources_memorymbrequest;type:numeric"`
	ResourcesMemoryMbLimit                float32         `gorm:"column:resources_memorymblimit;type:numeric"`
	DeploymentsRef                        Deployments     `gorm:"foreignKey:deployments_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// DeploymentsContainersEnvs holds the Gorm model for Postgres table `deployments_containers_envs`.
type DeploymentsContainersEnvs struct {
	DeploymentsID            string                                                 `gorm:"column:deployments_id;type:uuid;primaryKey"`
	DeploymentsContainersIdx int                                                    `gorm:"column:deployments_containers_idx;type:integer;primaryKey"`
	Idx                      int                                                    `gorm:"column:idx;type:integer;primaryKey;index:deploymentscontainersenvs_idx,type:btree"`
	Key                      string                                                 `gorm:"column:key;type:varchar"`
	Value                    string                                                 `gorm:"column:value;type:varchar"`
	EnvVarSource             storage.ContainerConfig_EnvironmentConfig_EnvVarSource `gorm:"column:envvarsource;type:integer"`
	DeploymentsContainersRef DeploymentsContainers                                  `gorm:"foreignKey:deployments_id,deployments_containers_idx;references:deployments_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

// DeploymentsContainersVolumes holds the Gorm model for Postgres table `deployments_containers_volumes`.
type DeploymentsContainersVolumes struct {
	DeploymentsID            string                `gorm:"column:deployments_id;type:uuid;primaryKey"`
	DeploymentsContainersIdx int                   `gorm:"column:deployments_containers_idx;type:integer;primaryKey"`
	Idx                      int                   `gorm:"column:idx;type:integer;primaryKey;index:deploymentscontainersvolumes_idx,type:btree"`
	Name                     string                `gorm:"column:name;type:varchar"`
	Source                   string                `gorm:"column:source;type:varchar"`
	Destination              string                `gorm:"column:destination;type:varchar"`
	ReadOnly                 bool                  `gorm:"column:readonly;type:bool"`
	Type                     string                `gorm:"column:type;type:varchar"`
	DeploymentsContainersRef DeploymentsContainers `gorm:"foreignKey:deployments_id,deployments_containers_idx;references:deployments_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

// DeploymentsContainersSecrets holds the Gorm model for Postgres table `deployments_containers_secrets`.
type DeploymentsContainersSecrets struct {
	DeploymentsID            string                `gorm:"column:deployments_id;type:uuid;primaryKey"`
	DeploymentsContainersIdx int                   `gorm:"column:deployments_containers_idx;type:integer;primaryKey"`
	Idx                      int                   `gorm:"column:idx;type:integer;primaryKey;index:deploymentscontainerssecrets_idx,type:btree"`
	Name                     string                `gorm:"column:name;type:varchar"`
	Path                     string                `gorm:"column:path;type:varchar"`
	DeploymentsContainersRef DeploymentsContainers `gorm:"foreignKey:deployments_id,deployments_containers_idx;references:deployments_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

// DeploymentsPorts holds the Gorm model for Postgres table `deployments_ports`.
type DeploymentsPorts struct {
	DeploymentsID  string                           `gorm:"column:deployments_id;type:uuid;primaryKey"`
	Idx            int                              `gorm:"column:idx;type:integer;primaryKey;index:deploymentsports_idx,type:btree"`
	ContainerPort  int32                            `gorm:"column:containerport;type:integer"`
	Protocol       string                           `gorm:"column:protocol;type:varchar"`
	Exposure       storage.PortConfig_ExposureLevel `gorm:"column:exposure;type:integer"`
	DeploymentsRef Deployments                      `gorm:"foreignKey:deployments_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// DeploymentsPortsExposureInfos holds the Gorm model for Postgres table `deployments_ports_exposure_infos`.
type DeploymentsPortsExposureInfos struct {
	DeploymentsID       string                           `gorm:"column:deployments_id;type:uuid;primaryKey"`
	DeploymentsPortsIdx int                              `gorm:"column:deployments_ports_idx;type:integer;primaryKey"`
	Idx                 int                              `gorm:"column:idx;type:integer;primaryKey;index:deploymentsportsexposureinfos_idx,type:btree"`
	Level               storage.PortConfig_ExposureLevel `gorm:"column:level;type:integer"`
	ServiceName         string                           `gorm:"column:servicename;type:varchar"`
	ServicePort         int32                            `gorm:"column:serviceport;type:integer"`
	NodePort            int32                            `gorm:"column:nodeport;type:integer"`
	ExternalIps         *pq.StringArray                  `gorm:"column:externalips;type:text[]"`
	ExternalHostnames   *pq.StringArray                  `gorm:"column:externalhostnames;type:text[]"`
	DeploymentsPortsRef DeploymentsPorts                 `gorm:"foreignKey:deployments_id,deployments_ports_idx;references:deployments_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	deploymentSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Add Capabilities"): {
			FieldPath: ".containers.security_context.add_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Limit"): {
			FieldPath: ".containers.resources.cpu_cores_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Request"): {
			FieldPath: ".containers.resources.cpu_cores_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: ".cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Created"): {
			FieldPath: ".created.seconds",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment"): {
			FieldPath: ".name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Annotation"): {
			FieldPath: ".annotations",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment ID"): {
			FieldPath: ".id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Label"): {
			FieldPath: ".labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Priority"): {
			FieldPath: ".priority",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Score"): {
			FieldPath: ".risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Type"): {
			FieldPath: ".type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Drop Capabilities"): {
			FieldPath: ".containers.security_context.drop_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Key"): {
			FieldPath: ".containers.config.env.key",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Value"): {
			FieldPath: ".containers.config.env.value",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Variable Source"): {
			FieldPath: ".containers.config.env.env_var_source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposed Node Port"): {
			FieldPath: ".ports.exposure_infos.node_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposing Service"): {
			FieldPath: ".ports.exposure_infos.service_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposing Service Port"): {
			FieldPath: ".ports.exposure_infos.service_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposure Level"): {
			FieldPath: ".ports.exposure_infos.level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External Hostname"): {
			FieldPath: ".ports.exposure_infos.external_hostnames",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External IP"): {
			FieldPath: ".ports.exposure_infos.external_ips",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image"): {
			FieldPath: ".containers.image.name.full_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
			Analyzer:  "standard",
		},
		search.FieldLabel("Image ID"): {
			FieldPath: ".containers.image.id_v2",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Pull Secret"): {
			FieldPath: ".image_pull_secrets",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Registry"): {
			FieldPath: ".containers.image.name.registry",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Remote"): {
			FieldPath: ".containers.image.name.remote",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Sha"): {
			FieldPath: ".containers.image.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Tag"): {
			FieldPath: ".containers.image.name.tag",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Max Exposure Level"): {
			FieldPath: ".ports.exposure",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Limit (MB)"): {
			FieldPath: ".containers.resources.memory_mb_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Request (MB)"): {
			FieldPath: ".containers.resources.memory_mb_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: ".namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace ID"): {
			FieldPath: ".namespace_id",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Orchestrator Component"): {
			FieldPath: ".orchestrator_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Platform Component"): {
			FieldPath: ".platform_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Pod Label"): {
			FieldPath: ".pod_labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port"): {
			FieldPath: ".ports.container_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port Protocol"): {
			FieldPath: ".ports.protocol",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Privileged"): {
			FieldPath: ".containers.security_context.privileged",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Read Only Root Filesystem"): {
			FieldPath: ".containers.security_context.read_only_root_filesystem",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: ".containers.secrets.name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret Path"): {
			FieldPath: ".containers.secrets.path",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account"): {
			FieldPath: ".service_account",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account Permission Level"): {
			FieldPath: ".service_account_permission_level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Destination"): {
			FieldPath: ".containers.volumes.destination",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Name"): {
			FieldPath: ".containers.volumes.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume ReadOnly"): {
			FieldPath: ".containers.volumes.read_only",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Source"): {
			FieldPath: ".containers.volumes.source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Type"): {
			FieldPath: ".containers.volumes.type",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
	}

	deploymentSchema = &walker.Schema{
		Table:    "deployments",
		Type:     "*storage.Deployment",
		TypeName: "Deployment",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Deployment ID",
					Enabled:   true,
				},
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Deployment",
					Enabled:   true,
				},
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Deployment Type",
					Enabled:   true,
				},
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Namespace",
					Enabled:   true,
				},
			},
			{
				Name:       "NamespaceId",
				ColumnName: "NamespaceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Namespace ID",
					Enabled:   true,
				},
			},
			{
				Name:       "OrchestratorComponent",
				ColumnName: "OrchestratorComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
				Search: walker.SearchField{
					FieldName: "Orchestrator Component",
					Enabled:   true,
				},
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Deployment Label",
					Enabled:   true,
				},
			},
			{
				Name:       "PodLabels",
				ColumnName: "PodLabels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Pod Label",
					Enabled:   true,
				},
			},
			{
				Name:       "Created",
				ColumnName: "Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster ID",
					Enabled:   true,
				},
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster",
					Enabled:   true,
				},
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Deployment Annotation",
					Enabled:   true,
				},
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
				Search: walker.SearchField{
					FieldName: "Deployment Risk Priority",
					Enabled:   true,
				},
			},
			{
				Name:       "ImagePullSecrets",
				ColumnName: "ImagePullSecrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
				Search: walker.SearchField{
					FieldName: "Image Pull Secret",
					Enabled:   true,
				},
			},
			{
				Name:       "ServiceAccount",
				ColumnName: "ServiceAccount",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Service Account",
					Enabled:   true,
				},
			},
			{
				Name:       "ServiceAccountPermissionLevel",
				ColumnName: "ServiceAccountPermissionLevel",
				Type:       "storage.PermissionLevel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
				Search: walker.SearchField{
					FieldName: "Service Account Permission Level",
					Enabled:   true,
				},
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
				Search: walker.SearchField{
					FieldName: "Deployment Risk Score",
					Enabled:   true,
				},
			},
			{
				Name:       "PlatformComponent",
				ColumnName: "PlatformComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
				Search: walker.SearchField{
					FieldName: "Platform Component",
					Enabled:   true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "deployments_containers",
				Type:     "*storage.Container",
				TypeName: "Container",
				Fields: []walker.Field{
					{
						Name:       "deploymentID",
						ColumnName: "deployments_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Image_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image Sha",
							Enabled:   true,
						},
					},
					{
						Name:       "Registry",
						ColumnName: "Image_Name_Registry",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image Registry",
							Enabled:   true,
						},
					},
					{
						Name:       "Remote",
						ColumnName: "Image_Name_Remote",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image Remote",
							Enabled:   true,
						},
					},
					{
						Name:       "Tag",
						ColumnName: "Image_Name_Tag",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image Tag",
							Enabled:   true,
						},
					},
					{
						Name:       "FullName",
						ColumnName: "Image_Name_FullName",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image",
							Enabled:   true,
						},
					},
					{
						Name:       "IdV2",
						ColumnName: "Image_IdV2",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Image ID",
							Enabled:   true,
						},
					},
					{
						Name:       "Privileged",
						ColumnName: "SecurityContext_Privileged",
						Type:       "bool",
						SQLType:    "bool",
						DataType:   postgres.Bool,
						Search: walker.SearchField{
							FieldName: "Privileged",
							Enabled:   true,
						},
					},
					{
						Name:       "DropCapabilities",
						ColumnName: "SecurityContext_DropCapabilities",
						Type:       "[]string",
						SQLType:    "text[]",
						DataType:   postgres.StringArray,
						Search: walker.SearchField{
							FieldName: "Drop Capabilities",
							Enabled:   true,
						},
					},
					{
						Name:       "AddCapabilities",
						ColumnName: "SecurityContext_AddCapabilities",
						Type:       "[]string",
						SQLType:    "text[]",
						DataType:   postgres.StringArray,
						Search: walker.SearchField{
							FieldName: "Add Capabilities",
							Enabled:   true,
						},
					},
					{
						Name:       "ReadOnlyRootFilesystem",
						ColumnName: "SecurityContext_ReadOnlyRootFilesystem",
						Type:       "bool",
						SQLType:    "bool",
						DataType:   postgres.Bool,
						Search: walker.SearchField{
							FieldName: "Read Only Root Filesystem",
							Enabled:   true,
						},
					},
					{
						Name:       "CpuCoresRequest",
						ColumnName: "Resources_CpuCoresRequest",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
						Search: walker.SearchField{
							FieldName: "CPU Cores Request",
							Enabled:   true,
						},
					},
					{
						Name:       "CpuCoresLimit",
						ColumnName: "Resources_CpuCoresLimit",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
						Search: walker.SearchField{
							FieldName: "CPU Cores Limit",
							Enabled:   true,
						},
					},
					{
						Name:       "MemoryMbRequest",
						ColumnName: "Resources_MemoryMbRequest",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
						Search: walker.SearchField{
							FieldName: "Memory Request (MB)",
							Enabled:   true,
						},
					},
					{
						Name:       "MemoryMbLimit",
						ColumnName: "Resources_MemoryMbLimit",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
						Search: walker.SearchField{
							FieldName: "Memory Limit (MB)",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{

					&walker.Schema{
						Table:    "deployments_containers_envs",
						Type:     "*storage.ContainerConfig_EnvironmentConfig",
						TypeName: "ContainerConfig_EnvironmentConfig",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Key",
								ColumnName: "Key",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Environment Key",
									Enabled:   true,
								},
							},
							{
								Name:       "Value",
								ColumnName: "Value",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Environment Value",
									Enabled:   true,
								},
							},
							{
								Name:       "EnvVarSource",
								ColumnName: "EnvVarSource",
								Type:       "storage.ContainerConfig_EnvironmentConfig_EnvVarSource",
								SQLType:    "integer",
								DataType:   postgres.Enum,
								Search: walker.SearchField{
									FieldName: "Environment Variable Source",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},

					&walker.Schema{
						Table:    "deployments_containers_volumes",
						Type:     "*storage.Volume",
						TypeName: "Volume",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Volume Name",
									Enabled:   true,
								},
							},
							{
								Name:       "Source",
								ColumnName: "Source",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Volume Source",
									Enabled:   true,
								},
							},
							{
								Name:       "Destination",
								ColumnName: "Destination",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Volume Destination",
									Enabled:   true,
								},
							},
							{
								Name:       "ReadOnly",
								ColumnName: "ReadOnly",
								Type:       "bool",
								SQLType:    "bool",
								DataType:   postgres.Bool,
								Search: walker.SearchField{
									FieldName: "Volume ReadOnly",
									Enabled:   true,
								},
							},
							{
								Name:       "Type",
								ColumnName: "Type",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Volume Type",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},

					&walker.Schema{
						Table:    "deployments_containers_secrets",
						Type:     "*storage.EmbeddedSecret",
						TypeName: "EmbeddedSecret",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Secret",
									Enabled:   true,
								},
							},
							{
								Name:       "Path",
								ColumnName: "Path",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Secret Path",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},
				},
			},

			&walker.Schema{
				Table:    "deployments_ports",
				Type:     "*storage.PortConfig",
				TypeName: "PortConfig",
				Fields: []walker.Field{
					{
						Name:       "deploymentID",
						ColumnName: "deployments_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ContainerPort",
						ColumnName: "ContainerPort",
						Type:       "int32",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Search: walker.SearchField{
							FieldName: "Port",
							Enabled:   true,
						},
					},
					{
						Name:       "Protocol",
						ColumnName: "Protocol",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Port Protocol",
							Enabled:   true,
						},
					},
					{
						Name:       "Exposure",
						ColumnName: "Exposure",
						Type:       "storage.PortConfig_ExposureLevel",
						SQLType:    "integer",
						DataType:   postgres.Enum,
						Search: walker.SearchField{
							FieldName: "Max Exposure Level",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{

					&walker.Schema{
						Table:    "deployments_ports_exposure_infos",
						Type:     "*storage.PortConfig_ExposureInfo",
						TypeName: "PortConfig_ExposureInfo",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentPortIdx",
								ColumnName: "deployments_ports_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Level",
								ColumnName: "Level",
								Type:       "storage.PortConfig_ExposureLevel",
								SQLType:    "integer",
								DataType:   postgres.Enum,
								Search: walker.SearchField{
									FieldName: "Exposure Level",
									Enabled:   true,
								},
							},
							{
								Name:       "ServiceName",
								ColumnName: "ServiceName",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Exposing Service",
									Enabled:   true,
								},
							},
							{
								Name:       "ServicePort",
								ColumnName: "ServicePort",
								Type:       "int32",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Search: walker.SearchField{
									FieldName: "Exposing Service Port",
									Enabled:   true,
								},
							},
							{
								Name:       "NodePort",
								ColumnName: "NodePort",
								Type:       "int32",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Search: walker.SearchField{
									FieldName: "Exposed Node Port",
									Enabled:   true,
								},
							},
							{
								Name:       "ExternalIps",
								ColumnName: "ExternalIps",
								Type:       "[]string",
								SQLType:    "text[]",
								DataType:   postgres.StringArray,
								Search: walker.SearchField{
									FieldName: "External IP",
									Enabled:   true,
								},
							},
							{
								Name:       "ExternalHostnames",
								ColumnName: "ExternalHostnames",
								Type:       "[]string",
								SQLType:    "text[]",
								DataType:   postgres.StringArray,
								Search: walker.SearchField{
									FieldName: "External Hostname",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},
				},
			},
		},
	}
)

func getDeploymentSchema() *walker.Schema {
	// Set up search options if not already done
	if deploymentSchema.OptionsMap == nil {
		deploymentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_DEPLOYMENTS, deploymentSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range deploymentSchema.Fields {
		deploymentSchema.Fields[i].Schema = deploymentSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(deploymentSchema)
	return deploymentSchema
}
