// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableTestGrandparentsStmt holds the create statement for table `test_grandparents`.
	CreateTableTestGrandparentsStmt = &postgres.CreateStmts{
		GormModel: (*TestGrandparents)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*TestGrandparentsEmbeddeds)(nil),
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						GormModel: (*TestGrandparentsEmbeddedsEmbedded2)(nil),
						Children:  []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// TestGrandparentsSchema is the go schema for table `test_grandparents`.
	TestGrandparentsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("test_grandparents")
		if schema != nil {
			return schema
		}
		schema = getTestGrandparentSchema()
		schema.ScopingResource = resources.Namespace
		RegisterTable(schema, CreateTableTestGrandparentsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory(109), schema)
		return schema
	}()
)

const (
	// TestGrandparentsTableName specifies the name of the table in postgres.
	TestGrandparentsTableName = "test_grandparents"
	// TestGrandparentsEmbeddedsTableName specifies the name of the table in postgres.
	TestGrandparentsEmbeddedsTableName = "test_grandparents_embeddeds"
	// TestGrandparentsEmbeddedsEmbedded2TableName specifies the name of the table in postgres.
	TestGrandparentsEmbeddedsEmbedded2TableName = "test_grandparents_embeddeds_embedded2"
)

// TestGrandparents holds the Gorm model for Postgres table `test_grandparents`.
type TestGrandparents struct {
	ID         string  `gorm:"column:id;type:varchar;primaryKey"`
	Val        string  `gorm:"column:val;type:varchar"`
	Priority   int64   `gorm:"column:priority;type:bigint"`
	RiskScore  float32 `gorm:"column:riskscore;type:numeric"`
	Serialized []byte  `gorm:"column:serialized;type:bytea"`
}

// TestGrandparentsEmbeddeds holds the Gorm model for Postgres table `test_grandparents_embeddeds`.
type TestGrandparentsEmbeddeds struct {
	TestGrandparentsID  string           `gorm:"column:test_grandparents_id;type:varchar;primaryKey"`
	Idx                 int              `gorm:"column:idx;type:integer;primaryKey;index:testgrandparentsembeddeds_idx,type:btree"`
	Val                 string           `gorm:"column:val;type:varchar"`
	TestGrandparentsRef TestGrandparents `gorm:"foreignKey:test_grandparents_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

// TestGrandparentsEmbeddedsEmbedded2 holds the Gorm model for Postgres table `test_grandparents_embeddeds_embedded2`.
type TestGrandparentsEmbeddedsEmbedded2 struct {
	TestGrandparentsID           string                    `gorm:"column:test_grandparents_id;type:varchar;primaryKey"`
	TestGrandparentsEmbeddedsIdx int                       `gorm:"column:test_grandparents_embeddeds_idx;type:integer;primaryKey"`
	Idx                          int                       `gorm:"column:idx;type:integer;primaryKey;index:testgrandparentsembeddedsembedded2_idx,type:btree"`
	Val                          string                    `gorm:"column:val;type:varchar"`
	TestGrandparentsEmbeddedsRef TestGrandparentsEmbeddeds `gorm:"foreignKey:test_grandparents_id,test_grandparents_embeddeds_idx;references:test_grandparents_id,idx;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	testGrandparentSearchFields = map[search.FieldLabel]*search.Field{}

	testGrandparentSchema = &walker.Schema{
		Table:    "test_grandparents",
		Type:     "*storage.TestGrandparent",
		TypeName: "TestGrandparent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Val",
				ColumnName: "Val",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{

			&walker.Schema{
				Table:    "test_grandparents_embeddeds",
				Type:     "*storage.TestGrandparent_Embedded",
				TypeName: "TestGrandparent_Embedded",
				Fields: []walker.Field{
					{
						Name:       "testGrandparentID",
						ColumnName: "test_grandparents_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Val",
						ColumnName: "Val",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Search: walker.SearchField{
							FieldName: "Test Grandparent Embedded",
							Enabled:   true,
						},
					},
				},
				Children: []*walker.Schema{

					&walker.Schema{
						Table:    "test_grandparents_embeddeds_embedded2",
						Type:     "*storage.TestGrandparent_Embedded_Embedded2",
						TypeName: "TestGrandparent_Embedded_Embedded2",
						Fields: []walker.Field{
							{
								Name:       "testGrandparentID",
								ColumnName: "test_grandparents_Id",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "testGrandparentEmbeddedIdx",
								ColumnName: "test_grandparents_embeddeds_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Val",
								ColumnName: "Val",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
								Search: walker.SearchField{
									FieldName: "Test Grandparent Embedded2",
									Enabled:   true,
								},
							},
						},
						Children: []*walker.Schema{},
					},
				},
			},
		},
	}
)

func getTestGrandparentSchema() *walker.Schema {
	// Set up search options if not already done
	if testGrandparentSchema.OptionsMap == nil {
		testGrandparentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(109), testGrandparentSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range testGrandparentSchema.Fields {
		testGrandparentSchema.Fields[i].Schema = testGrandparentSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(testGrandparentSchema)
	return testGrandparentSchema
}
