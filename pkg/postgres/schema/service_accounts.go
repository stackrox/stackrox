// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableServiceAccountsStmt holds the create statement for table `service_accounts`.
	CreateTableServiceAccountsStmt = &postgres.CreateStmts{
		GormModel: (*ServiceAccounts)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ServiceAccountsSchema is the go schema for table `service_accounts`.
	ServiceAccountsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("service_accounts")
		if schema != nil {
			return schema
		}
		schema = getServiceAccountSchema()
		schema.ScopingResource = resources.ServiceAccount
		RegisterTable(schema, CreateTableServiceAccountsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_SERVICE_ACCOUNTS, schema)
		return schema
	}()
)

const (
	// ServiceAccountsTableName specifies the name of the table in postgres.
	ServiceAccountsTableName = "service_accounts"
)

// ServiceAccounts holds the Gorm model for Postgres table `service_accounts`.
type ServiceAccounts struct {
	ID          string            `gorm:"column:id;type:uuid;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar"`
	Namespace   string            `gorm:"column:namespace;type:varchar;index:serviceaccounts_sac_filter,type:btree"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	ClusterID   string            `gorm:"column:clusterid;type:uuid;index:serviceaccounts_sac_filter,type:btree"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	Serialized  []byte            `gorm:"column:serialized;type:bytea"`
}

var (
	serviceAccountSearchFields = map[search.FieldLabel]*search.Field{}

	serviceAccountSchema = &walker.Schema{
		Table:    "service_accounts",
		Type:     "*storage.ServiceAccount",
		TypeName: "ServiceAccount",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getServiceAccountSchema() *walker.Schema {
	// Set up search options if not already done
	if serviceAccountSchema.OptionsMap == nil {
		serviceAccountSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SERVICE_ACCOUNTS, serviceAccountSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range serviceAccountSchema.Fields {
		serviceAccountSchema.Fields[i].Schema = serviceAccountSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(serviceAccountSchema)
	return serviceAccountSchema
}
