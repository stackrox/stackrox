// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableClusterInitBundlesStmt holds the create statement for table `cluster_init_bundles`.
	CreateTableClusterInitBundlesStmt = &postgres.CreateStmts{
		GormModel: (*ClusterInitBundles)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterInitBundlesSchema is the go schema for table `cluster_init_bundles`.
	ClusterInitBundlesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_init_bundles")
		if schema != nil {
			return schema
		}
		schema = getInitBundleMetaSchema()
		schema.ScopingResource = resources.InitBundleMeta
		RegisterTable(schema, CreateTableClusterInitBundlesStmt)
		return schema
	}()
)

const (
	// ClusterInitBundlesTableName specifies the name of the table in postgres.
	ClusterInitBundlesTableName = "cluster_init_bundles"
)

// ClusterInitBundles holds the Gorm model for Postgres table `cluster_init_bundles`.
type ClusterInitBundles struct {
	ID         string `gorm:"column:id;type:varchar;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	initBundleMetaSearchFields = map[search.FieldLabel]*search.Field{}

	initBundleMetaSchema = &walker.Schema{
		Table:    "cluster_init_bundles",
		Type:     "*storage.InitBundleMeta",
		TypeName: "InitBundleMeta",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getInitBundleMetaSchema() *walker.Schema {
	// Set up search options if not already done
	if initBundleMetaSchema.OptionsMap == nil {
		initBundleMetaSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, initBundleMetaSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range initBundleMetaSchema.Fields {
		initBundleMetaSchema.Fields[i].Schema = initBundleMetaSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(initBundleMetaSchema)
	return initBundleMetaSchema
}
