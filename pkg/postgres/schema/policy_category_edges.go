// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTablePolicyCategoryEdgesStmt holds the create statement for table `policy_category_edges`.
	CreateTablePolicyCategoryEdgesStmt = &postgres.CreateStmts{
		GormModel: (*PolicyCategoryEdges)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// PolicyCategoryEdgesSchema is the go schema for table `policy_category_edges`.
	PolicyCategoryEdgesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("policy_category_edges")
		if schema != nil {
			return schema
		}
		schema = getPolicyCategoryEdgeSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Policy":         PoliciesSchema,
			"storage.PolicyCategory": PolicyCategoriesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_POLICY_CATEGORY_EDGE,
			v1.SearchCategory_POLICY_CATEGORIES,
		}...)
		schema.ScopingResource = resources.WorkflowAdministration
		RegisterTable(schema, CreateTablePolicyCategoryEdgesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_POLICY_CATEGORY_EDGE, schema)
		return schema
	}()
)

const (
	// PolicyCategoryEdgesTableName specifies the name of the table in postgres.
	PolicyCategoryEdgesTableName = "policy_category_edges"
)

// PolicyCategoryEdges holds the Gorm model for Postgres table `policy_category_edges`.
type PolicyCategoryEdges struct {
	ID                  string           `gorm:"column:id;type:varchar;primaryKey"`
	PolicyID            string           `gorm:"column:policyid;type:varchar"`
	CategoryID          string           `gorm:"column:categoryid;type:varchar"`
	Serialized          []byte           `gorm:"column:serialized;type:bytea"`
	PoliciesRef         Policies         `gorm:"foreignKey:policyid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	PolicyCategoriesRef PolicyCategories `gorm:"foreignKey:categoryid;references:id;belongsTo;constraint:OnDelete:CASCADE"`
}

var (
	policyCategoryEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	policyCategoryEdgeSchema = &walker.Schema{
		Table:    "policy_category_edges",
		Type:     "*storage.PolicyCategoryEdge",
		TypeName: "PolicyCategoryEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "PolicyId",
				ColumnName: "PolicyId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CategoryId",
				ColumnName: "CategoryId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getPolicyCategoryEdgeSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if policyCategoryEdgeSchema.OptionsMap == nil {
		policyCategoryEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_POLICY_CATEGORY_EDGE, policyCategoryEdgeSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range policyCategoryEdgeSchema.Fields {
		policyCategoryEdgeSchema.Fields[i].Schema = policyCategoryEdgeSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(policyCategoryEdgeSchema)
	return policyCategoryEdgeSchema
}
