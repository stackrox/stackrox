// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableComplianceIntegrationsStmt holds the create statement for table `compliance_integrations`.
	CreateTableComplianceIntegrationsStmt = &postgres.CreateStmts{
		GormModel: (*ComplianceIntegrations)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceIntegrationsSchema is the go schema for table `compliance_integrations`.
	ComplianceIntegrationsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_integrations")
		if schema != nil {
			return schema
		}
		schema = getComplianceIntegrationSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceIntegrationsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_COMPLIANCE_INTEGRATIONS, schema)
		return schema
	}()
)

const (
	// ComplianceIntegrationsTableName specifies the name of the table in postgres.
	ComplianceIntegrationsTableName = "compliance_integrations"
)

// ComplianceIntegrations holds the Gorm model for Postgres table `compliance_integrations`.
type ComplianceIntegrations struct {
	ID                string           `gorm:"column:id;type:uuid;primaryKey"`
	Version           string           `gorm:"column:version;type:varchar"`
	ClusterID         string           `gorm:"column:clusterid;type:uuid;uniqueIndex:compliance_unique_indicator;index:complianceintegrations_sac_filter,type:hash"`
	OperatorInstalled bool             `gorm:"column:operatorinstalled;type:bool"`
	OperatorStatus    storage.COStatus `gorm:"column:operatorstatus;type:integer"`
	Serialized        []byte           `gorm:"column:serialized;type:bytea"`
}

var (
	complianceIntegrationSearchFields = map[search.FieldLabel]*search.Field{}

	complianceIntegrationSchema = &walker.Schema{
		Table:    "compliance_integrations",
		Type:     "*storage.ComplianceIntegration",
		TypeName: "ComplianceIntegration",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "OperatorInstalled",
				ColumnName: "OperatorInstalled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "OperatorStatus",
				ColumnName: "OperatorStatus",
				Type:       "storage.COStatus",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getComplianceIntegrationSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if complianceIntegrationSchema.OptionsMap == nil {
		complianceIntegrationSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_INTEGRATIONS, complianceIntegrationSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range complianceIntegrationSchema.Fields {
		complianceIntegrationSchema.Fields[i].Schema = complianceIntegrationSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(complianceIntegrationSchema)
	return complianceIntegrationSchema
}
