// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableClusterHealthStatusesStmt holds the create statement for table `cluster_health_statuses`.
	CreateTableClusterHealthStatusesStmt = &postgres.CreateStmts{
		GormModel: (*ClusterHealthStatuses)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ClusterHealthStatusesSchema is the go schema for table `cluster_health_statuses`.
	ClusterHealthStatusesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("cluster_health_statuses")
		if schema != nil {
			return schema
		}
		schema = getClusterHealthStatusSchema()
		referencedSchemas := map[string]*walker.Schema{
			"storage.Cluster": ClustersSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Cluster
		RegisterTable(schema, CreateTableClusterHealthStatusesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_CLUSTER_HEALTH, schema)
		return schema
	}()
)

const (
	// ClusterHealthStatusesTableName specifies the name of the table in postgres.
	ClusterHealthStatusesTableName = "cluster_health_statuses"
)

// ClusterHealthStatuses holds the Gorm model for Postgres table `cluster_health_statuses`.
type ClusterHealthStatuses struct {
	ID                           string                                        `gorm:"column:id;type:uuid;primaryKey"`
	SensorHealthStatus           storage.ClusterHealthStatus_HealthStatusLabel `gorm:"column:sensorhealthstatus;type:integer"`
	CollectorHealthStatus        storage.ClusterHealthStatus_HealthStatusLabel `gorm:"column:collectorhealthstatus;type:integer"`
	OverallHealthStatus          storage.ClusterHealthStatus_HealthStatusLabel `gorm:"column:overallhealthstatus;type:integer"`
	AdmissionControlHealthStatus storage.ClusterHealthStatus_HealthStatusLabel `gorm:"column:admissioncontrolhealthstatus;type:integer"`
	ScannerHealthStatus          storage.ClusterHealthStatus_HealthStatusLabel `gorm:"column:scannerhealthstatus;type:integer"`
	LastContact                  *time.Time                                    `gorm:"column:lastcontact;type:timestamp"`
	Serialized                   []byte                                        `gorm:"column:serialized;type:bytea"`
}

var (
	clusterHealthStatusSearchFields = map[search.FieldLabel]*search.Field{}

	clusterHealthStatusSchema = &walker.Schema{
		Table:    "cluster_health_statuses",
		Type:     "*storage.ClusterHealthStatus",
		TypeName: "ClusterHealthStatus",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "SensorHealthStatus",
				ColumnName: "SensorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "CollectorHealthStatus",
				ColumnName: "CollectorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "OverallHealthStatus",
				ColumnName: "OverallHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "AdmissionControlHealthStatus",
				ColumnName: "AdmissionControlHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ScannerHealthStatus",
				ColumnName: "ScannerHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "LastContact",
				ColumnName: "LastContact",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getClusterHealthStatusSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if clusterHealthStatusSchema.OptionsMap == nil {
		clusterHealthStatusSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_HEALTH, clusterHealthStatusSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range clusterHealthStatusSchema.Fields {
		clusterHealthStatusSchema.Fields[i].Schema = clusterHealthStatusSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(clusterHealthStatusSchema)
	return clusterHealthStatusSchema
}
