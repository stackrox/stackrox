// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedProcessIndicatorSearchFields contains pre-computed search fields for process_indicators
	generatedProcessIndicatorSearchFields = map[search.FieldLabel]*search.Field{

		"Process": {
			FieldPath: "Id",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},

		"Deployment": {
			FieldPath: "DeploymentId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},

		"Container": {
			FieldPath: "ContainerName",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},

		"Pod": {
			FieldPath: "PodId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},

		"Namespace": {
			FieldPath: "Namespace",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_PROCESS_INDICATORS,
		},
	}

	// generatedProcessIndicatorSchema is the pre-computed schema for process_indicators table
	generatedProcessIndicatorSchema = &walker.Schema{
		Table:    "process_indicators",
		Type:     "*storage.ProcessIndicator",
		TypeName: "ProcessIndicator",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Process",
				},
			},

			{
				Name:       "DeploymentId",
				ColumnName: "deployment_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Deployment",
				},
			},

			{
				Name:       "ContainerName",
				ColumnName: "container_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Container",
				},
			},

			{
				Name:       "PodId",
				ColumnName: "pod_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Pod",
				},
			},

			{
				Name:       "PodUid",
				ColumnName: "pod_uid",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					Index: []*walker.PostgresIndexOptions{
						{IndexType: "btree"},
					},
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Pod",
				},
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "Namespace",
				ColumnName: "namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Namespace,store,hidden",
				},
			},

			{
				Name:       "ImageId",
				ColumnName: "image_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.DeploymentExtension,
	}
)

// GetProcessIndicatorSchema returns the generated schema for process_indicators
func GetProcessIndicatorSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedProcessIndicatorSchema.OptionsMap == nil {
		generatedProcessIndicatorSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_PROCESS_INDICATORS, generatedProcessIndicatorSearchFields))
	}
	return generatedProcessIndicatorSchema
}
