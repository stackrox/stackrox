// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableImageIntegrationsStmt holds the create statement for table `image_integrations`.
	CreateTableImageIntegrationsStmt = &postgres.CreateStmts{
		GormModel: (*ImageIntegrations)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ImageIntegrationsSchema is the go schema for table `image_integrations`.
	ImageIntegrationsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("image_integrations")
		if schema != nil {
			return schema
		}
		schema = getImageIntegrationSchema()
		schema.ScopingResource = resources.Integration
		RegisterTable(schema, CreateTableImageIntegrationsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_IMAGE_INTEGRATIONS, schema)
		return schema
	}()
)

const (
	// ImageIntegrationsTableName specifies the name of the table in postgres.
	ImageIntegrationsTableName = "image_integrations"
)

// ImageIntegrations holds the Gorm model for Postgres table `image_integrations`.
type ImageIntegrations struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Name       string `gorm:"column:name;type:varchar;unique"`
	ClusterID  string `gorm:"column:clusterid;type:uuid;index:imageintegrations_sac_filter,type:btree"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

var (
	imageIntegrationSearchFields = map[search.FieldLabel]*search.Field{}

	imageIntegrationSchema = &walker.Schema{
		Table:    "image_integrations",
		Type:     "*storage.ImageIntegration",
		TypeName: "ImageIntegration",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{},
	}
)

func getImageIntegrationSchema() *walker.Schema {
	// Set up search options using pre-computed search fields (no runtime reflection)
	if imageIntegrationSchema.OptionsMap == nil {
		imageIntegrationSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_INTEGRATIONS, imageIntegrationSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range imageIntegrationSchema.Fields {
		imageIntegrationSchema.Fields[i].Schema = imageIntegrationSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(imageIntegrationSchema)
	return imageIntegrationSchema
}
