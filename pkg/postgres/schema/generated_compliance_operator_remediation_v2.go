// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedComplianceOperatorRemediationV2SearchFields contains pre-computed search fields for compliance_operator_remediation_v2
	generatedComplianceOperatorRemediationV2SearchFields = map[search.FieldLabel]*search.Field{

		"Compliance": {
			FieldPath: "Name",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_REMEDIATIONS,
		},

		"Cluster": {
			FieldPath: "ClusterId",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_COMPLIANCE_REMEDIATIONS,
		},
	}

	// generatedComplianceOperatorRemediationV2Schema is the pre-computed schema for compliance_operator_remediation_v2 table
	generatedComplianceOperatorRemediationV2Schema = &walker.Schema{
		Table:    "compliance_operator_remediation_v2",
		Type:     "*storage.ComplianceOperatorRemediationV2",
		TypeName: "ComplianceOperatorRemediationV2",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Id",
				ColumnName: "id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "ComplianceCheckResultName",
				ColumnName: "compliance_check_result_name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Compliance",
				},
			},

			{
				Name:       "Apply",
				ColumnName: "apply",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},

			{
				Name:       "CurrentObject",
				ColumnName: "current_object",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "OutdatedObject",
				ColumnName: "outdated_object",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "EnforcementType",
				ColumnName: "enforcement_type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},

			{
				Name:       "ClusterId",
				ColumnName: "cluster_id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Cluster",
				},
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Compliance,
	}
)

// GetComplianceOperatorRemediationV2Schema returns the generated schema for compliance_operator_remediation_v2
func GetComplianceOperatorRemediationV2Schema() *walker.Schema {
	// Set up search options if not already done
	if generatedComplianceOperatorRemediationV2Schema.OptionsMap == nil {
		generatedComplianceOperatorRemediationV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_COMPLIANCE_REMEDIATIONS, generatedComplianceOperatorRemediationV2SearchFields))
	}
	return generatedComplianceOperatorRemediationV2Schema
}
