// Code generated by generate-schema tool. DO NOT EDIT.

package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedTestSingleKeyStructSearchFields contains pre-computed search fields for test_single_key_structs
	generatedTestSingleKeyStructSearchFields = map[search.FieldLabel]*search.Field{

		"Test": {
			FieldPath: "Key",
			Type:      v1.SearchDataType_SEARCH_STRING,
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SEARCH_UNSET,
		},
	}

	// generatedTestSingleKeyStructSchema is the pre-computed schema for test_single_key_structs table
	generatedTestSingleKeyStructSchema = &walker.Schema{
		Table:    "test_single_key_structs",
		Type:     "*storage.TestSingleKeyStruct",
		TypeName: "TestSingleKeyStruct",
		Fields: []walker.Field{

			{
				Name:       "state",
				ColumnName: "state",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.MessageState",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Key",
				ColumnName: "key",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Name",
				ColumnName: "name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "StringSlice",
				ColumnName: "string_slice",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Bool",
				ColumnName: "bool",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Uint64",
				ColumnName: "uint64",
				Type:       "uint64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Int64",
				ColumnName: "int64",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Float",
				ColumnName: "float",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Labels",
				ColumnName: "labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Enum",
				ColumnName: "enum",
				Type:       "github.com/stackrox/rox/generated/storage.TestSingleKeyStruct_Enum",
				SQLType:    "integer",
				DataType:   postgres.Integer,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Enums",
				ColumnName: "enums",
				Type:       "[]github.com/stackrox/rox/generated/storage.TestSingleKeyStruct_Enum",
				SQLType:    "jsonb",
				DataType:   postgres.Map,

				Search: walker.SearchField{
					Enabled:   true,
					FieldName: "Test",
				},
			},

			{
				Name:       "Nested",
				ColumnName: "nested",
				Type:       "[]github.com/stackrox/rox/generated/storage.TestSingleKeyStruct_Nested",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Oneof",
				ColumnName: "oneof",
				Type:       "github.com/stackrox/rox/generated/storage.isTestSingleKeyStruct_Oneof",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "Bytess",
				ColumnName: "bytess",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.Bytes,
			},

			{
				Name:       "unknownFields",
				ColumnName: "unknown_fields",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.UnknownFields",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},

			{
				Name:       "sizeCache",
				ColumnName: "size_cache",
				Type:       "google.golang.org/protobuf/runtime/protoimpl.SizeCache",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
		},

		ScopingResource: resources.Namespace,
	}
)

// GetTestSingleKeyStructSchema returns the generated schema for test_single_key_structs
func GetTestSingleKeyStructSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedTestSingleKeyStructSchema.OptionsMap == nil {
		generatedTestSingleKeyStructSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, generatedTestSingleKeyStructSearchFields))
	}
	return generatedTestSingleKeyStructSchema
}
