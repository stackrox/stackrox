// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableBaseImagesStmt holds the create statement for table `base_images`.
	CreateTableBaseImagesStmt = &postgres.CreateStmts{
		GormModel: (*BaseImages)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// BaseImagesSchema is the go schema for table `base_images`.
	BaseImagesSchema = func() *walker.Schema {
		schema := GetSchemaForTable("base_images")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.BaseImage)(nil)), "base_images")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_BASE_IMAGES, "baseimage", (*storage.BaseImage)(nil)))
		schema.SetSearchScope([]v1.SearchCategory{
			v1.SearchCategory_BASE_IMAGES,
			v1.SearchCategory_IMAGES,
			v1.SearchCategory_DEPLOYMENTS,
			v1.SearchCategory_NAMESPACES,
			v1.SearchCategory_CLUSTERS,
		}...)
		schema.ScopingResource = resources.BaseImage
		RegisterTable(schema, CreateTableBaseImagesStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_BASE_IMAGES, schema)
		return schema
	}()
)

const (
	// BaseImagesTableName specifies the name of the table in postgres.
	BaseImagesTableName = "base_images"
)

// BaseImages holds the Gorm model for Postgres table `base_images`.
type BaseImages struct {
	ID               string     `gorm:"column:id;type:varchar;primaryKey"`
	Registry         string     `gorm:"column:registry;type:varchar"`
	Repository       string     `gorm:"column:repository;type:varchar"`
	Tag              string     `gorm:"column:tag;type:varchar"`
	Digest           string     `gorm:"column:digest;type:varchar"`
	ConfigDigest     string     `gorm:"column:configdigest;type:varchar"`
	CreatedAt        *time.Time `gorm:"column:createdat;type:timestamp"`
	Active           bool       `gorm:"column:active;type:bool"`
	FirstLayerDigest string     `gorm:"column:firstlayerdigest;type:varchar"`
	Serialized       []byte     `gorm:"column:serialized;type:bytea"`
}
