// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// VersionSearchFields contains pre-computed search fields for versions
	VersionSearchFields = map[search.FieldLabel]*search.Field{}

	// VersionSchema is the pre-computed schema for versions table
	VersionSchema = &walker.Schema{
		Table:    "versions",
		Type:     "*storage.Version",
		TypeName: "Version",
		Fields: []walker.Field{
			{
				Name:       "SeqNum",
				ColumnName: "SeqNum",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "LastPersisted",
				ColumnName: "LastPersisted",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "MinSeqNum",
				ColumnName: "MinSeqNum",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetVersionSchema returns the generated schema for versions
func GetVersionSchema() *walker.Schema {
	// Set up search options if not already done
	if VersionSchema.OptionsMap == nil {
		VersionSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, VersionSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range VersionSchema.Fields {
		VersionSchema.Fields[i].Schema = VersionSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(VersionSchema)
	return VersionSchema
}
