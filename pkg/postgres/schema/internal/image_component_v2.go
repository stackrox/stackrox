// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ImageComponentV2SearchFields contains pre-computed search fields for image_component_v2
	ImageComponentV2SearchFields = map[search.FieldLabel]*search.Field{}

	// ImageComponentV2Schema is the pre-computed schema for image_component_v2 table
	ImageComponentV2Schema = &walker.Schema{
		Table:    "image_component_v2",
		Type:     "*storage.ImageComponentV2",
		TypeName: "ImageComponentV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Source",
				ColumnName: "Source",
				Type:       "storage.SourceType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Location",
				ColumnName: "Location",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageIdV2",
				ColumnName: "ImageIdV2",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetImageComponentV2Schema returns the generated schema for image_component_v2
func GetImageComponentV2Schema() *walker.Schema {
	// Set up search options if not already done
	if ImageComponentV2Schema.OptionsMap == nil {
		ImageComponentV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_COMPONENTS_V2, ImageComponentV2SearchFields))
	}
	return ImageComponentV2Schema
}
