// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertPodFromProto(obj *storage.Pod) (*schema.Pods, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.Pods{
		Id:           obj.GetId(),
		Name:         obj.GetName(),
		DeploymentId: obj.GetDeploymentId(),
		Namespace:    obj.GetNamespace(),
		ClusterId:    obj.GetClusterId(),
		Serialized:   serialized,
	}
	return model, nil
}

func convertPodToProto(m *schema.Pods) (*storage.Pod, error) {
	var msg storage.Pod
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestPodConversion(t *testing.T) {
	obj := &storage.Pod{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertPodFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertPodToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertContainerInstanceFromProto(obj *storage.ContainerInstance, pods_Id string) (*schema.PodsLiveInstances, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.PodsLiveInstances{
		PodsId:      pods_Id,
		Idx:         idx,
		ImageDigest: obj.GetImageDigest(),
	}
	return model, nil
}

func convertContainerInstanceToProto(m *schema.PodsLiveInstances) (*storage.ContainerInstance, error) {
	var msg storage.ContainerInstance
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestContainerInstanceConversion(t *testing.T) {
	obj := &storage.ContainerInstance{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertContainerInstanceFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertContainerInstanceToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
