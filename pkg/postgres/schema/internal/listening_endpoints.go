// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ProcessListeningOnPortStorageSearchFields contains pre-computed search fields for listening_endpoints
	ProcessListeningOnPortStorageSearchFields = map[search.FieldLabel]*search.Field{}

	// ProcessListeningOnPortStorageSchema is the pre-computed schema for listening_endpoints table
	ProcessListeningOnPortStorageSchema = &walker.Schema{
		Table:    "listening_endpoints",
		Type:     "*storage.ProcessListeningOnPortStorage",
		TypeName: "ProcessListeningOnPortStorage",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Port",
				ColumnName: "Port",
				Type:       "uint32",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Protocol",
				ColumnName: "Protocol",
				Type:       "storage.L4Protocol",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "CloseTimestamp",
				ColumnName: "CloseTimestamp",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ProcessIndicatorId",
				ColumnName: "ProcessIndicatorId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Closed",
				ColumnName: "Closed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "DeploymentId",
				ColumnName: "DeploymentId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "PodUid",
				ColumnName: "PodUid",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetProcessListeningOnPortStorageSchema returns the generated schema for listening_endpoints
func GetProcessListeningOnPortStorageSchema() *walker.Schema {
	// Set up search options if not already done
	if ProcessListeningOnPortStorageSchema.OptionsMap == nil {
		ProcessListeningOnPortStorageSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_PROCESS_LISTENING_ON_PORT, ProcessListeningOnPortStorageSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ProcessListeningOnPortStorageSchema.Fields {
		ProcessListeningOnPortStorageSchema.Fields[i].Schema = ProcessListeningOnPortStorageSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ProcessListeningOnPortStorageSchema)
	return ProcessListeningOnPortStorageSchema
}
