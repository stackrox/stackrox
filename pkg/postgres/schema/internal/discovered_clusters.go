// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// DiscoveredClusterSearchFields contains pre-computed search fields for discovered_clusters
	DiscoveredClusterSearchFields = map[search.FieldLabel]*search.Field{}

	// DiscoveredClusterSchema is the pre-computed schema for discovered_clusters table
	DiscoveredClusterSchema = &walker.Schema{
		Table:    "discovered_clusters",
		Type:     "*storage.DiscoveredCluster",
		TypeName: "DiscoveredCluster",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Metadata_Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Metadata_Type",
				Type:       "storage.ClusterMetadata_Type",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "FirstDiscoveredAt",
				ColumnName: "Metadata_FirstDiscoveredAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Status",
				ColumnName: "Status",
				Type:       "storage.DiscoveredCluster_Status",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "SourceId",
				ColumnName: "SourceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdatedAt",
				ColumnName: "LastUpdatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetDiscoveredClusterSchema returns the generated schema for discovered_clusters
func GetDiscoveredClusterSchema() *walker.Schema {
	// Set up search options if not already done
	if DiscoveredClusterSchema.OptionsMap == nil {
		DiscoveredClusterSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_DISCOVERED_CLUSTERS, DiscoveredClusterSearchFields))
	}
	return DiscoveredClusterSchema
}
