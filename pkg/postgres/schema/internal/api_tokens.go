// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// TokenMetadataSearchFields contains pre-computed search fields for api_tokens
	TokenMetadataSearchFields = map[search.FieldLabel]*search.Field{}

	// TokenMetadataSchema is the pre-computed schema for api_tokens table
	TokenMetadataSchema = &walker.Schema{
		Table:    "api_tokens",
		Type:     "*storage.TokenMetadata",
		TypeName: "TokenMetadata",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Expiration",
				ColumnName: "Expiration",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Revoked",
				ColumnName: "Revoked",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetTokenMetadataSchema returns the generated schema for api_tokens
func GetTokenMetadataSchema() *walker.Schema {
	// Set up search options if not already done
	if TokenMetadataSchema.OptionsMap == nil {
		TokenMetadataSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_API_TOKEN, TokenMetadataSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range TokenMetadataSchema.Fields {
		TokenMetadataSchema.Fields[i].Schema = TokenMetadataSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(TokenMetadataSchema)
	return TokenMetadataSchema
}
