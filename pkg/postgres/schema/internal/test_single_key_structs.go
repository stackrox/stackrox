// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// TestSingleKeyStructSearchFields contains pre-computed search fields for test_single_key_structs
	TestSingleKeyStructSearchFields = map[search.FieldLabel]*search.Field{}

	// TestSingleKeyStructSchema is the pre-computed schema for test_single_key_structs table
	TestSingleKeyStructSchema = &walker.Schema{
		Table:    "test_single_key_structs",
		Type:     "*storage.TestSingleKeyStruct",
		TypeName: "TestSingleKeyStruct",
		Fields: []walker.Field{
			{
				Name:       "Key",
				ColumnName: "Key",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "StringSlice",
				ColumnName: "StringSlice",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Bool",
				ColumnName: "Bool",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Uint64",
				ColumnName: "Uint64",
				Type:       "uint64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Int64",
				ColumnName: "Int64",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Float",
				ColumnName: "Float",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Timestamp",
				ColumnName: "Timestamp",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Enum",
				ColumnName: "Enum",
				Type:       "storage.TestSingleKeyStruct_Enum",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Enums",
				ColumnName: "Enums",
				Type:       "[]storage.TestSingleKeyStruct_Enum",
				SQLType:    "int[]",
				DataType:   postgres.EnumArray,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetTestSingleKeyStructSchema returns the generated schema for test_single_key_structs
func GetTestSingleKeyStructSchema() *walker.Schema {
	// Set up search options if not already done
	if TestSingleKeyStructSchema.OptionsMap == nil {
		TestSingleKeyStructSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(100), TestSingleKeyStructSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range TestSingleKeyStructSchema.Fields {
		TestSingleKeyStructSchema.Fields[i].Schema = TestSingleKeyStructSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(TestSingleKeyStructSchema)
	return TestSingleKeyStructSchema
}
