// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertK8SRoleBindingFromProto(obj *storage.K8SRoleBinding) (*schema.RoleBindings, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.RoleBindings{
		Id:          obj.GetId(),
		Name:        obj.GetName(),
		Namespace:   obj.GetNamespace(),
		ClusterId:   obj.GetClusterId(),
		ClusterName: obj.GetClusterName(),
		ClusterRole: obj.GetClusterRole(),
		Labels:      obj.GetLabels(),
		Annotations: obj.GetAnnotations(),
		RoleId:      obj.GetRoleId(),
		Serialized:  serialized,
	}
	return model, nil
}

func convertK8SRoleBindingToProto(m *schema.RoleBindings) (*storage.K8SRoleBinding, error) {
	var msg storage.K8SRoleBinding
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestK8SRoleBindingConversion(t *testing.T) {
	obj := &storage.K8SRoleBinding{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertK8SRoleBindingFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertK8SRoleBindingToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertSubjectFromProto(obj *storage.Subject, role_bindings_Id string) (*schema.RoleBindingsSubjects, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.RoleBindingsSubjects{
		RoleBindingsId: role_bindings_Id,
		Idx:            idx,
		Kind:           obj.GetKind(),
		Name:           obj.GetName(),
	}
	return model, nil
}

func convertSubjectToProto(m *schema.RoleBindingsSubjects) (*storage.Subject, error) {
	var msg storage.Subject
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestSubjectConversion(t *testing.T) {
	obj := &storage.Subject{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertSubjectFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertSubjectToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
