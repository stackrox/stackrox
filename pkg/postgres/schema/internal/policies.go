// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// PolicySearchFields contains pre-computed search fields for policies
	PolicySearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Category"): {
			FieldPath: "policy.categories",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Description"): {
			FieldPath: "policy.description",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Disabled"): {
			FieldPath: "policy.disabled",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Enforcement"): {
			FieldPath: "policy.enforcement_actions",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Lifecycle Stage"): {
			FieldPath: "policy.lifecycle_stages",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Policy"): {
			FieldPath: "policy.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Policy ID"): {
			FieldPath: "policy.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("Policy Last Updated"): {
			FieldPath: "policy.last_updated.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("SORT_Enforcement"): {
			FieldPath: "policy.SORT_enforcement",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("SORT_Lifecycle Stage"): {
			FieldPath: "policy.SORT_lifecycleStage",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
		},
		search.FieldLabel("SORT_Policy"): {
			FieldPath: "policy.SORT_name",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_POLICIES,
			Analyzer:  "keyword",
		},
		search.FieldLabel("Severity"): {
			FieldPath: "policy.severity",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_POLICIES,
		},
	}

	// PolicySchema is the pre-computed schema for policies table
	PolicySchema = &walker.Schema{
		Table:    "policies",
		Type:     "*storage.Policy",
		TypeName: "Policy",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Description",
				ColumnName: "Description",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Disabled",
				ColumnName: "Disabled",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Categories",
				ColumnName: "Categories",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "LifecycleStages",
				ColumnName: "LifecycleStages",
				Type:       "[]storage.LifecycleStage",
				SQLType:    "int[]",
				DataType:   postgres.EnumArray,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.Severity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "EnforcementActions",
				ColumnName: "EnforcementActions",
				Type:       "[]storage.EnforcementAction",
				SQLType:    "int[]",
				DataType:   postgres.EnumArray,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "SORTName",
				ColumnName: "SORTName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTLifecycleStage",
				ColumnName: "SORTLifecycleStage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "SORTEnforcement",
				ColumnName: "SORTEnforcement",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetPolicySchema returns the generated schema for policies
func GetPolicySchema() *walker.Schema {
	// Set up search options if not already done
	if PolicySchema.OptionsMap == nil {
		PolicySchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_POLICIES, PolicySearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range PolicySchema.Fields {
		PolicySchema.Fields[i].Schema = PolicySchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(PolicySchema)
	return PolicySchema
}
