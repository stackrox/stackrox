// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ImageV2SearchFields contains pre-computed search fields for images_v2
	ImageV2SearchFields = map[search.FieldLabel]*search.Field{}

	// ImageV2Schema is the pre-computed schema for images_v2 table
	ImageV2Schema = &walker.Schema{
		Table:    "images_v2",
		Type:     "*storage.ImageV2",
		TypeName: "ImageV2",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Sha",
				ColumnName: "Sha",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Registry",
				ColumnName: "Name_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Name_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Name_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "FullName",
				ColumnName: "Name_FullName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Created",
				ColumnName: "Metadata_V1_Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "User",
				ColumnName: "Metadata_V1_User",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Command",
				ColumnName: "Metadata_V1_Command",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Entrypoint",
				ColumnName: "Metadata_V1_Entrypoint",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Volumes",
				ColumnName: "Metadata_V1_Volumes",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Labels",
				ColumnName: "Metadata_V1_Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "ScanTime",
				ColumnName: "Scan_ScanTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "Scan_OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Fetched",
				ColumnName: "Signature_Fetched",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ComponentCount",
				ColumnName: "ComponentCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "CveCount",
				ColumnName: "CveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCveCount",
				ColumnName: "FixableCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "UnknownCveCount",
				ColumnName: "UnknownCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableUnknownCveCount",
				ColumnName: "FixableUnknownCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "CriticalCveCount",
				ColumnName: "CriticalCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCriticalCveCount",
				ColumnName: "FixableCriticalCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "ImportantCveCount",
				ColumnName: "ImportantCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableImportantCveCount",
				ColumnName: "FixableImportantCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "ModerateCveCount",
				ColumnName: "ModerateCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableModerateCveCount",
				ColumnName: "FixableModerateCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "LowCveCount",
				ColumnName: "LowCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableLowCveCount",
				ColumnName: "FixableLowCveCount",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetImageV2Schema returns the generated schema for images_v2
func GetImageV2Schema() *walker.Schema {
	// Set up search options if not already done
	if ImageV2Schema.OptionsMap == nil {
		ImageV2Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGES_V2, ImageV2SearchFields))
	}
	return ImageV2Schema
}
