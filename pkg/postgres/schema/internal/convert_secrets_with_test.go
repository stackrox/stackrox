// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertSecretFromProto(obj *storage.Secret) (*schema.Secrets, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.Secrets{
		Id:          obj.GetId(),
		Name:        obj.GetName(),
		ClusterId:   obj.GetClusterId(),
		ClusterName: obj.GetClusterName(),
		Namespace:   obj.GetNamespace(),
		CreatedAt:   pgutils.NilOrTime(obj.GetCreatedAt()),
		Serialized:  serialized,
	}
	return model, nil
}

func convertSecretToProto(m *schema.Secrets) (*storage.Secret, error) {
	var msg storage.Secret
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestSecretConversion(t *testing.T) {
	obj := &storage.Secret{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertSecretFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertSecretToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertSecretDataFileFromProto(obj *storage.SecretDataFile, secrets_Id string) (*schema.SecretsFiles, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.SecretsFiles{
		SecretsId:   secrets_Id,
		Idx:         idx,
		Type:        obj.GetType(),
		CertEndDate: pgutils.NilOrTime(obj.GetCert().GetEndDate()),
	}
	return model, nil
}

func convertSecretDataFileToProto(m *schema.SecretsFiles) (*storage.SecretDataFile, error) {
	var msg storage.SecretDataFile
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestSecretDataFileConversion(t *testing.T) {
	obj := &storage.SecretDataFile{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertSecretDataFileFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertSecretDataFileToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertImagePullSecret_RegistryFromProto(obj *storage.ImagePullSecret_Registry, secrets_Id string, secrets_files_idx int) (*schema.SecretsFilesRegistries, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.SecretsFilesRegistries{
		SecretsId:       secrets_Id,
		SecretsFilesIdx: secrets_files_idx,
		Idx:             idx,
		Name:            obj.GetName(),
	}
	return model, nil
}

func convertImagePullSecret_RegistryToProto(m *schema.SecretsFilesRegistries) (*storage.ImagePullSecret_Registry, error) {
	var msg storage.ImagePullSecret_Registry
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestImagePullSecret_RegistryConversion(t *testing.T) {
	obj := &storage.ImagePullSecret_Registry{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertImagePullSecret_RegistryFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertImagePullSecret_RegistryToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
