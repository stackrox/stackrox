// Code generated by pg-bindings generator. DO NOT EDIT.
package convert

import (
	"testing"

	"github.com/lib/pq"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertDeploymentFromProto(obj *storage.Deployment) (*schema.Deployments, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.Deployments{
		Id:                            obj.GetId(),
		Name:                          obj.GetName(),
		Type:                          obj.GetType(),
		Namespace:                     obj.GetNamespace(),
		NamespaceId:                   obj.GetNamespaceId(),
		OrchestratorComponent:         obj.GetOrchestratorComponent(),
		Labels:                        obj.GetLabels(),
		PodLabels:                     obj.GetPodLabels(),
		Created:                       pgutils.NilOrTime(obj.GetCreated()),
		ClusterId:                     obj.GetClusterId(),
		ClusterName:                   obj.GetClusterName(),
		Annotations:                   obj.GetAnnotations(),
		Priority:                      obj.GetPriority(),
		ImagePullSecrets:              pq.Array(obj.GetImagePullSecrets()).(*pq.StringArray),
		ServiceAccount:                obj.GetServiceAccount(),
		ServiceAccountPermissionLevel: obj.GetServiceAccountPermissionLevel(),
		RiskScore:                     obj.GetRiskScore(),
		Serialized:                    serialized,
	}
	return model, nil
}
func convertDeploymentToProto(m *schema.Deployments) (*storage.Deployment, error) {
	var msg storage.Deployment
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestDeploymentConversion(t *testing.T) {
	obj := &storage.Deployment{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertDeploymentFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertDeploymentToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertContainerFromProto(obj *storage.Container, idx int, deployments_Id string) (*schema.DeploymentsContainers, error) {
	model := &schema.DeploymentsContainers{
		DeploymentsId:                         deployments_Id,
		Idx:                                   idx,
		ImageId:                               obj.GetImage().GetId(),
		ImageNameRegistry:                     obj.GetImage().GetName().GetRegistry(),
		ImageNameRemote:                       obj.GetImage().GetName().GetRemote(),
		ImageNameTag:                          obj.GetImage().GetName().GetTag(),
		ImageNameFullName:                     obj.GetImage().GetName().GetFullName(),
		SecurityContextPrivileged:             obj.GetSecurityContext().GetPrivileged(),
		SecurityContextDropCapabilities:       pq.Array(obj.GetSecurityContext().GetDropCapabilities()).(*pq.StringArray),
		SecurityContextAddCapabilities:        pq.Array(obj.GetSecurityContext().GetAddCapabilities()).(*pq.StringArray),
		SecurityContextReadOnlyRootFilesystem: obj.GetSecurityContext().GetReadOnlyRootFilesystem(),
		ResourcesCpuCoresRequest:              obj.GetResources().GetCpuCoresRequest(),
		ResourcesCpuCoresLimit:                obj.GetResources().GetCpuCoresLimit(),
		ResourcesMemoryMbRequest:              obj.GetResources().GetMemoryMbRequest(),
		ResourcesMemoryMbLimit:                obj.GetResources().GetMemoryMbLimit(),
	}
	return model, nil
}
func convertContainerConfig_EnvironmentConfigFromProto(obj *storage.ContainerConfig_EnvironmentConfig, idx int, deployments_Id string, deployments_containers_idx int) (*schema.DeploymentsContainersEnvs, error) {
	model := &schema.DeploymentsContainersEnvs{
		DeploymentsId:            deployments_Id,
		DeploymentsContainersIdx: deployments_containers_idx,
		Idx:                      idx,
		Key:                      obj.GetKey(),
		Value:                    obj.GetValue(),
		EnvVarSource:             obj.GetEnvVarSource(),
	}
	return model, nil
}
func convertVolumeFromProto(obj *storage.Volume, idx int, deployments_Id string, deployments_containers_idx int) (*schema.DeploymentsContainersVolumes, error) {
	model := &schema.DeploymentsContainersVolumes{
		DeploymentsId:            deployments_Id,
		DeploymentsContainersIdx: deployments_containers_idx,
		Idx:                      idx,
		Name:                     obj.GetName(),
		Source:                   obj.GetSource(),
		Destination:              obj.GetDestination(),
		ReadOnly:                 obj.GetReadOnly(),
		Type:                     obj.GetType(),
	}
	return model, nil
}
func convertEmbeddedSecretFromProto(obj *storage.EmbeddedSecret, idx int, deployments_Id string, deployments_containers_idx int) (*schema.DeploymentsContainersSecrets, error) {
	model := &schema.DeploymentsContainersSecrets{
		DeploymentsId:            deployments_Id,
		DeploymentsContainersIdx: deployments_containers_idx,
		Idx:                      idx,
		Name:                     obj.GetName(),
		Path:                     obj.GetPath(),
	}
	return model, nil
}
func convertPortConfigFromProto(obj *storage.PortConfig, idx int, deployments_Id string) (*schema.DeploymentsPorts, error) {
	model := &schema.DeploymentsPorts{
		DeploymentsId: deployments_Id,
		Idx:           idx,
		ContainerPort: obj.GetContainerPort(),
		Protocol:      obj.GetProtocol(),
		Exposure:      obj.GetExposure(),
	}
	return model, nil
}
func convertPortConfig_ExposureInfoFromProto(obj *storage.PortConfig_ExposureInfo, idx int, deployments_Id string, deployments_ports_idx int) (*schema.DeploymentsPortsExposureInfos, error) {
	model := &schema.DeploymentsPortsExposureInfos{
		DeploymentsId:       deployments_Id,
		DeploymentsPortsIdx: deployments_ports_idx,
		Idx:                 idx,
		Level:               obj.GetLevel(),
		ServiceName:         obj.GetServiceName(),
		ServicePort:         obj.GetServicePort(),
		NodePort:            obj.GetNodePort(),
		ExternalIps:         pq.Array(obj.GetExternalIps()).(*pq.StringArray),
		ExternalHostnames:   pq.Array(obj.GetExternalHostnames()).(*pq.StringArray),
	}
	return model, nil
}
