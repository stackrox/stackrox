// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ImageComponentSearchFields contains pre-computed search fields for image_components
	ImageComponentSearchFields = map[search.FieldLabel]*search.Field{}

	// ImageComponentSchema is the pre-computed schema for image_components table
	ImageComponentSchema = &walker.Schema{
		Table:    "image_components",
		Type:     "*storage.ImageComponent",
		TypeName: "ImageComponent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Version",
				ColumnName: "Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "Source",
				ColumnName: "Source",
				Type:       "storage.SourceType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetImageComponentSchema returns the generated schema for image_components
func GetImageComponentSchema() *walker.Schema {
	// Set up search options if not already done
	if ImageComponentSchema.OptionsMap == nil {
		ImageComponentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_COMPONENTS, ImageComponentSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ImageComponentSchema.Fields {
		ImageComponentSchema.Fields[i].Schema = ImageComponentSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ImageComponentSchema)
	return ImageComponentSchema
}
