// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// AuthMachineToMachineConfigSearchFields contains pre-computed search fields for auth_machine_to_machine_configs
	AuthMachineToMachineConfigSearchFields = map[search.FieldLabel]*search.Field{}

	// AuthMachineToMachineConfigSchema is the pre-computed schema for auth_machine_to_machine_configs table
	AuthMachineToMachineConfigSchema = &walker.Schema{
		Table:    "auth_machine_to_machine_configs",
		Type:     "*storage.AuthMachineToMachineConfig",
		TypeName: "AuthMachineToMachineConfig",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Issuer",
				ColumnName: "Issuer",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "auth_machine_to_machine_configs_mappings",
				Type:     "*storage.AuthMachineToMachineConfig_Mapping",
				TypeName: "AuthMachineToMachineConfig_Mapping",
				Fields: []walker.Field{
					{
						Name:       "authMachineToMachineConfigID",
						ColumnName: "auth_machine_to_machine_configs_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Role",
						ColumnName: "Role",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
			},
		},
	}
)

// GetAuthMachineToMachineConfigSchema returns the generated schema for auth_machine_to_machine_configs
func GetAuthMachineToMachineConfigSchema() *walker.Schema {
	// Set up search options if not already done
	if AuthMachineToMachineConfigSchema.OptionsMap == nil {
		AuthMachineToMachineConfigSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, AuthMachineToMachineConfigSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range AuthMachineToMachineConfigSchema.Fields {
		AuthMachineToMachineConfigSchema.Fields[i].Schema = AuthMachineToMachineConfigSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(AuthMachineToMachineConfigSchema)
	return AuthMachineToMachineConfigSchema
}
