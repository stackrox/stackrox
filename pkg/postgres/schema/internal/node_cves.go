// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// NodeCVESearchFields contains pre-computed search fields for node_cves
	NodeCVESearchFields = map[search.FieldLabel]*search.Field{}

	// NodeCVESchema is the pre-computed schema for node_cves table
	NodeCVESchema = &walker.Schema{
		Table:    "node_cves",
		Type:     "*storage.NodeCVE",
		TypeName: "NodeCVE",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Cve",
				ColumnName: "CveBaseInfo_Cve",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "PublishedOn",
				ColumnName: "CveBaseInfo_PublishedOn",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CveBaseInfo_CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "EpssProbability",
				ColumnName: "CveBaseInfo_Epss_EpssProbability",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Cvss",
				ColumnName: "Cvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Severity",
				ColumnName: "Severity",
				Type:       "storage.VulnerabilitySeverity",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ImpactScore",
				ColumnName: "ImpactScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "Snoozed",
				ColumnName: "Snoozed",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "SnoozeExpiry",
				ColumnName: "SnoozeExpiry",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Orphaned",
				ColumnName: "Orphaned",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "OrphanedTime",
				ColumnName: "OrphanedTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetNodeCVESchema returns the generated schema for node_cves
func GetNodeCVESchema() *walker.Schema {
	// Set up search options if not already done
	if NodeCVESchema.OptionsMap == nil {
		NodeCVESchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODE_VULNERABILITIES, NodeCVESearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range NodeCVESchema.Fields {
		NodeCVESchema.Fields[i].Schema = NodeCVESchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(NodeCVESchema)
	return NodeCVESchema
}
