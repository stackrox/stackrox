// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ActiveComponentSearchFields contains pre-computed search fields for active_components
	ActiveComponentSearchFields = map[search.FieldLabel]*search.Field{}

	// ActiveComponentSchema is the pre-computed schema for active_components table
	ActiveComponentSchema = &walker.Schema{
		Table:    "active_components",
		Type:     "*storage.ActiveComponent",
		TypeName: "ActiveComponent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "DeploymentId",
				ColumnName: "DeploymentId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ComponentId",
				ColumnName: "ComponentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "active_components_active_contexts_slices",
				Type:     "*storage.ActiveComponent_ActiveContext",
				TypeName: "ActiveComponent_ActiveContext",
				Fields: []walker.Field{
					{
						Name:       "activeComponentID",
						ColumnName: "active_components_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ContainerName",
						ColumnName: "ContainerName",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "ImageId",
						ColumnName: "ImageId",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
			},
		},
	}
)

// GetActiveComponentSchema returns the generated schema for active_components
func GetActiveComponentSchema() *walker.Schema {
	// Set up search options if not already done
	if ActiveComponentSchema.OptionsMap == nil {
		ActiveComponentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_ACTIVE_COMPONENT, ActiveComponentSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ActiveComponentSchema.Fields {
		ActiveComponentSchema.Fields[i].Schema = ActiveComponentSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ActiveComponentSchema)
	return ActiveComponentSchema
}
