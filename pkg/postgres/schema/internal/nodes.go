// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// NodeSearchFields contains pre-computed search fields for nodes
	NodeSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Advisory Link"): {
			FieldPath: "node.scan.components.vulns.advisory.link",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Advisory Name"): {
			FieldPath: "node.scan.components.vulns.advisory.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVE"): {
			FieldPath: "node.scan.components.vulnerabilities.cve_base_info.cve",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVE Count"): {
			FieldPath: "node.SetCves.Cves",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVE Created Time"): {
			FieldPath: "node.scan.components.vulnerabilities.cve_base_info.created_at.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVE Published On"): {
			FieldPath: "node.scan.components.vulnerabilities.cve_base_info.published_on.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVE Snoozed"): {
			FieldPath: "node.scan.components.vulns.suppressed",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("CVSS"): {
			FieldPath: "node.scan.components.vulns.cvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: "node.cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: "node.cluster_id",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Component"): {
			FieldPath: "node.scan.components.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Component Count"): {
			FieldPath: "node.SetComponents.Components",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Component Version"): {
			FieldPath: "node.scan.components.version",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Container Runtime"): {
			FieldPath: "node.container_runtime.version",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("EPSS Probability"): {
			FieldPath: "node.scan.components.vulnerabilities.cve_base_info.epss.epss_probability",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Fixable CVE Count"): {
			FieldPath: "node.SetFixable.FixableCves",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Fixed By"): {
			FieldPath: "node.scan.components.vulns.SetFixedBy.FixedBy",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Last Updated"): {
			FieldPath: "node.last_updated.seconds",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("NVD CVSS"): {
			FieldPath: "node.scan.components.vulns.nvd_cvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node"): {
			FieldPath: "node.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Annotation"): {
			FieldPath: "node.annotations",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node ID"): {
			FieldPath: "node.id",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Join Time"): {
			FieldPath: "node.joined_at.seconds",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Label"): {
			FieldPath: "node.labels",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Risk Priority"): {
			FieldPath: "node.priority",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Risk Score"): {
			FieldPath: "node.risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Scan Time"): {
			FieldPath: "node.scan.scan_time.seconds",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Node Top CVSS"): {
			FieldPath: "node.SetTopCvss.TopCvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Operating System"): {
			FieldPath: "node.os_image",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Taint Effect"): {
			FieldPath: "node.taints.taint_effect",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Taint Key"): {
			FieldPath: "node.taints.key",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Taint Value"): {
			FieldPath: "node.taints.value",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
		search.FieldLabel("Vulnerability State"): {
			FieldPath: "node.scan.components.vulns.state",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_NODES,
		},
	}

	// NodeSchema is the pre-computed schema for nodes table
	NodeSchema = &walker.Schema{
		Table:    "nodes",
		Type:     "*storage.Node",
		TypeName: "Node",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "JoinedAt",
				ColumnName: "JoinedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Version",
				ColumnName: "ContainerRuntime_Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "OsImage",
				ColumnName: "OsImage",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ScanTime",
				ColumnName: "Scan_ScanTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Components",
				ColumnName: "Components",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "Cves",
				ColumnName: "Cves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCves",
				ColumnName: "FixableCves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "nodes_taints",
				Type:     "*storage.Taint",
				TypeName: "Taint",
				Fields: []walker.Field{
					{
						Name:       "nodeID",
						ColumnName: "nodes_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Key",
						ColumnName: "Key",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Value",
						ColumnName: "Value",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "TaintEffect",
						ColumnName: "TaintEffect",
						Type:       "storage.TaintEffect",
						SQLType:    "integer",
						DataType:   postgres.Enum,
					},
				},
			},
		},
	}
)

// GetNodeSchema returns the generated schema for nodes
func GetNodeSchema() *walker.Schema {
	// Set up search options if not already done
	if NodeSchema.OptionsMap == nil {
		NodeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_NODES, NodeSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range NodeSchema.Fields {
		NodeSchema.Fields[i].Schema = NodeSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(NodeSchema)
	return NodeSchema
}
