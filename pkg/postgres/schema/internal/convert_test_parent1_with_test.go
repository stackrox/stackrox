// Code generated by pg-bindings generator. DO NOT EDIT.
package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertTestParent1FromProto(obj *storage.TestParent1) (*schema.TestParent1, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.TestParent1{
		Id:         obj.GetId(),
		ParentId:   obj.GetParentId(),
		Val:        obj.GetVal(),
		Serialized: serialized,
	}
	return model, nil
}
func convertTestParent1ToProto(m *schema.TestParent1) (*storage.TestParent1, error) {
	var msg storage.TestParent1
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestTestParent1Conversion(t *testing.T) {
	obj := &storage.TestParent1{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertTestParent1FromProto(obj)
	assert.NoError(t, err)
	conv, err := convertTestParent1ToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertTestParent1_Child1RefFromProto(obj *storage.TestParent1_Child1Ref, idx int, test_parent1_Id string) (*schema.TestParent1Childrens, error) {
	model := &schema.TestParent1Childrens{
		TestParent1Id: test_parent1_Id,
		Idx:           idx,
		ChildId:       obj.GetChildId(),
	}
	return model, nil
}
