// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// TestGrandChild1SearchFields contains pre-computed search fields for test_grand_child1
	TestGrandChild1SearchFields = map[search.FieldLabel]*search.Field{}

	// TestGrandChild1Schema is the pre-computed schema for test_grand_child1 table
	TestGrandChild1Schema = &walker.Schema{
		Table:    "test_grand_child1",
		Type:     "*storage.TestGrandChild1",
		TypeName: "TestGrandChild1",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "ParentId",
				ColumnName: "ParentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ChildId",
				ColumnName: "ChildId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Val",
				ColumnName: "Val",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetTestGrandChild1Schema returns the generated schema for test_grand_child1
func GetTestGrandChild1Schema() *walker.Schema {
	// Set up search options if not already done
	if TestGrandChild1Schema.OptionsMap == nil {
		TestGrandChild1Schema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(108), TestGrandChild1SearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range TestGrandChild1Schema.Fields {
		TestGrandChild1Schema.Fields[i].Schema = TestGrandChild1Schema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(TestGrandChild1Schema)
	return TestGrandChild1Schema
}
