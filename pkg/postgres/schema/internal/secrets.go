// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// SecretSearchFields contains pre-computed search fields for secrets
	SecretSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Secret ID"): {
			FieldPath: ".id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: ".name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: ".cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Created Time"): {
			FieldPath: ".created_at.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret Type"): {
			FieldPath: ".files.type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Image Pull Secret Registry"): {
			FieldPath: ".files.Metadata.ImagePullSecret.registries.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: ".namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cert Expiration"): {
			FieldPath: ".files.Metadata.Cert.end_date.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
	}

	// SecretSchema is the pre-computed schema for secrets table
	SecretSchema = &walker.Schema{
		Table:    "secrets",
		Type:     "*storage.Secret",
		TypeName: "Secret",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetSecretSchema returns the generated schema for secrets
func GetSecretSchema() *walker.Schema {
	// Set up search options if not already done
	if SecretSchema.OptionsMap == nil {
		SecretSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SECRETS, SecretSearchFields))
	}
	return SecretSchema
}
