// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// SecretSearchFields contains pre-computed search fields for secrets
	SecretSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Cert Expiration"): {
			FieldPath: "secret.files.Metadata.Cert.end_date.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: "secret.cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: "secret.cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Created Time"): {
			FieldPath: "secret.created_at.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Image Pull Secret Registry"): {
			FieldPath: "secret.files.Metadata.ImagePullSecret.registries.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: "secret.namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: "secret.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret ID"): {
			FieldPath: "secret.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_SECRETS,
		},
		search.FieldLabel("Secret Type"): {
			FieldPath: "secret.files.type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_SECRETS,
		},
	}

	// SecretSchema is the pre-computed schema for secrets table
	SecretSchema = &walker.Schema{
		Table:    "secrets",
		Type:     "*storage.Secret",
		TypeName: "Secret",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "CreatedAt",
				ColumnName: "CreatedAt",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "secrets_files",
				Type:     "*storage.SecretDataFile",
				TypeName: "SecretDataFile",
				Fields: []walker.Field{
					{
						Name:       "secretID",
						ColumnName: "secrets_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Type",
						ColumnName: "Type",
						Type:       "storage.SecretType",
						SQLType:    "integer",
						DataType:   postgres.Enum,
					},
					{
						Name:       "EndDate",
						ColumnName: "Cert_EndDate",
						Type:       "*timestamppb.Timestamp",
						SQLType:    "timestamp",
						DataType:   postgres.DateTime,
					},
				},
				Children: []*walker.Schema{
					{
						Table:    "secrets_files_registries",
						Type:     "*storage.ImagePullSecret_Registry",
						TypeName: "ImagePullSecret_Registry",
						Fields: []walker.Field{
							{
								Name:       "secretID",
								ColumnName: "secrets_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "secretFileIdx",
								ColumnName: "secrets_files_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
						},
					},
				},
			},
		},
	}
)

// GetSecretSchema returns the generated schema for secrets
func GetSecretSchema() *walker.Schema {
	// Set up search options if not already done
	if SecretSchema.OptionsMap == nil {
		SecretSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SECRETS, SecretSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range SecretSchema.Fields {
		SecretSchema.Fields[i].Schema = SecretSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(SecretSchema)
	return SecretSchema
}
