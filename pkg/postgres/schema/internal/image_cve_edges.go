// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ImageCVEEdgeSearchFields contains pre-computed search fields for image_cve_edges
	ImageCVEEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	// ImageCVEEdgeSchema is the pre-computed schema for image_cve_edges table
	ImageCVEEdgeSchema = &walker.Schema{
		Table:    "image_cve_edges",
		Type:     "*storage.ImageCVEEdge",
		TypeName: "ImageCVEEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "FirstImageOccurrence",
				ColumnName: "FirstImageOccurrence",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "State",
				ColumnName: "State",
				Type:       "storage.VulnerabilityState",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageCveId",
				ColumnName: "ImageCveId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetImageCVEEdgeSchema returns the generated schema for image_cve_edges
func GetImageCVEEdgeSchema() *walker.Schema {
	// Set up search options if not already done
	if ImageCVEEdgeSchema.OptionsMap == nil {
		ImageCVEEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_VULN_EDGE, ImageCVEEdgeSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ImageCVEEdgeSchema.Fields {
		ImageCVEEdgeSchema.Fields[i].Schema = ImageCVEEdgeSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ImageCVEEdgeSchema)
	return ImageCVEEdgeSchema
}
