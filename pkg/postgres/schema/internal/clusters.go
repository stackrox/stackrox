// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ClusterSearchFields contains pre-computed search fields for clusters
	ClusterSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Admission Control Status"): {
			FieldPath: ".health_status.admission_control_health_status",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: ".name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster Kubernetes Version"): {
			FieldPath: ".status.orchestrator_metadata.version",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster Label"): {
			FieldPath: ".labels",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster Platform Type"): {
			FieldPath: ".type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster Status"): {
			FieldPath: ".health_status.overall_health_status",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Cluster Type"): {
			FieldPath: ".status.provider_metadata.cluster.type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Collector Status"): {
			FieldPath: ".health_status.collector_health_status",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Last Contact"): {
			FieldPath: ".health_status.last_contact.seconds",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Scanner Status"): {
			FieldPath: ".health_status.scanner_health_status",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
		search.FieldLabel("Sensor Status"): {
			FieldPath: ".health_status.sensor_health_status",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_CLUSTERS,
		},
	}

	// ClusterSchema is the pre-computed schema for clusters table
	ClusterSchema = &walker.Schema{
		Table:    "clusters",
		Type:     "*storage.Cluster",
		TypeName: "Cluster",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster ID",
					Enabled:   true,
				},
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Search: walker.SearchField{
					FieldName: "Cluster",
					Enabled:   true,
				},
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "storage.ClusterType",
				SQLType:    "integer",
				DataType:   postgres.Enum,
				Search: walker.SearchField{
					FieldName: "Cluster Platform Type",
					Enabled:   true,
				},
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
				Search: walker.SearchField{
					FieldName: "Cluster Label",
					Enabled:   true,
				},
			},
			{
				Name:       "Type",
				ColumnName: "Status_ProviderMetadata_Cluster_Type",
				Type:       "storage.ClusterMetadata_Type",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "Version",
				ColumnName: "Status_OrchestratorMetadata_Version",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetClusterSchema returns the generated schema for clusters
func GetClusterSchema() *walker.Schema {
	// Set up search options if not already done
	if ClusterSchema.OptionsMap == nil {
		ClusterSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTERS, ClusterSearchFields))
	}
	return ClusterSchema
}
