// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ClusterHealthStatusSearchFields contains pre-computed search fields for cluster_health_statuses
	ClusterHealthStatusSearchFields = map[search.FieldLabel]*search.Field{}

	// ClusterHealthStatusSchema is the pre-computed schema for cluster_health_statuses table
	ClusterHealthStatusSchema = &walker.Schema{
		Table:    "cluster_health_statuses",
		Type:     "*storage.ClusterHealthStatus",
		TypeName: "ClusterHealthStatus",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "SensorHealthStatus",
				ColumnName: "SensorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "CollectorHealthStatus",
				ColumnName: "CollectorHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "OverallHealthStatus",
				ColumnName: "OverallHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "AdmissionControlHealthStatus",
				ColumnName: "AdmissionControlHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "ScannerHealthStatus",
				ColumnName: "ScannerHealthStatus",
				Type:       "storage.ClusterHealthStatus_HealthStatusLabel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "LastContact",
				ColumnName: "LastContact",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetClusterHealthStatusSchema returns the generated schema for cluster_health_statuses
func GetClusterHealthStatusSchema() *walker.Schema {
	// Set up search options if not already done
	if ClusterHealthStatusSchema.OptionsMap == nil {
		ClusterHealthStatusSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_CLUSTER_HEALTH, ClusterHealthStatusSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ClusterHealthStatusSchema.Fields {
		ClusterHealthStatusSchema.Fields[i].Schema = ClusterHealthStatusSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ClusterHealthStatusSchema)
	return ClusterHealthStatusSchema
}
