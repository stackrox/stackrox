// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ConfigSearchFields contains pre-computed search fields for configs
	ConfigSearchFields = map[search.FieldLabel]*search.Field{}

	// ConfigSchema is the pre-computed schema for configs table
	ConfigSchema = &walker.Schema{
		Table:    "configs",
		Type:     "*storage.Config",
		TypeName: "Config",
		Fields: []walker.Field{
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetConfigSchema returns the generated schema for configs
func GetConfigSchema() *walker.Schema {
	// Set up search options if not already done
	if ConfigSchema.OptionsMap == nil {
		ConfigSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_SEARCH_UNSET, ConfigSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ConfigSchema.Fields {
		ConfigSchema.Fields[i].Schema = ConfigSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ConfigSchema)
	return ConfigSchema
}
