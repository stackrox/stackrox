// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// DeploymentSearchFields contains pre-computed search fields for deployments
	DeploymentSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Exposing Service"): {
			FieldPath: ".ports.exposure_infos.service_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Tag"): {
			FieldPath: ".containers.image.name.tag",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image ID"): {
			FieldPath: ".containers.image.id_v2",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Source"): {
			FieldPath: ".containers.volumes.source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Type"): {
			FieldPath: ".containers.volumes.type",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Limit"): {
			FieldPath: ".containers.resources.cpu_cores_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Score"): {
			FieldPath: ".risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Platform Component"): {
			FieldPath: ".platform_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment ID"): {
			FieldPath: ".id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Type"): {
			FieldPath: ".type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: ".namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Name"): {
			FieldPath: ".containers.volumes.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Pull Secret"): {
			FieldPath: ".image_pull_secrets",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposed Node Port"): {
			FieldPath: ".ports.exposure_infos.node_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External IP"): {
			FieldPath: ".ports.exposure_infos.external_ips",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Orchestrator Component"): {
			FieldPath: ".orchestrator_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Variable Source"): {
			FieldPath: ".containers.config.env.env_var_source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume ReadOnly"): {
			FieldPath: ".containers.volumes.read_only",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account"): {
			FieldPath: ".service_account",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port Protocol"): {
			FieldPath: ".ports.protocol",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Created"): {
			FieldPath: ".created.seconds",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: ".cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Key"): {
			FieldPath: ".containers.config.env.key",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Value"): {
			FieldPath: ".containers.config.env.value",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Sha"): {
			FieldPath: ".containers.image.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Read Only Root Filesystem"): {
			FieldPath: ".containers.security_context.read_only_root_filesystem",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: ".containers.secrets.name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposing Service Port"): {
			FieldPath: ".ports.exposure_infos.service_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment"): {
			FieldPath: ".name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace ID"): {
			FieldPath: ".namespace_id",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Privileged"): {
			FieldPath: ".containers.security_context.privileged",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret Path"): {
			FieldPath: ".containers.secrets.path",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Request"): {
			FieldPath: ".containers.resources.cpu_cores_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Limit (MB)"): {
			FieldPath: ".containers.resources.memory_mb_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Priority"): {
			FieldPath: ".priority",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External Hostname"): {
			FieldPath: ".ports.exposure_infos.external_hostnames",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Pod Label"): {
			FieldPath: ".pod_labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: ".cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Registry"): {
			FieldPath: ".containers.image.name.registry",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Remote"): {
			FieldPath: ".containers.image.name.remote",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Drop Capabilities"): {
			FieldPath: ".containers.security_context.drop_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Annotation"): {
			FieldPath: ".annotations",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Max Exposure Level"): {
			FieldPath: ".ports.exposure",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposure Level"): {
			FieldPath: ".ports.exposure_infos.level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Label"): {
			FieldPath: ".labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image"): {
			FieldPath: ".containers.image.name.full_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
			Analyzer:  "standard",
		},
		search.FieldLabel("Add Capabilities"): {
			FieldPath: ".containers.security_context.add_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Destination"): {
			FieldPath: ".containers.volumes.destination",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Request (MB)"): {
			FieldPath: ".containers.resources.memory_mb_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account Permission Level"): {
			FieldPath: ".service_account_permission_level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port"): {
			FieldPath: ".ports.container_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
	}

	// DeploymentSchema is the pre-computed schema for deployments table
	DeploymentSchema = &walker.Schema{
		Table:    "deployments",
		Type:     "*storage.Deployment",
		TypeName: "Deployment",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "NamespaceId",
				ColumnName: "NamespaceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "OrchestratorComponent",
				ColumnName: "OrchestratorComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "PodLabels",
				ColumnName: "PodLabels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Created",
				ColumnName: "Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "ImagePullSecrets",
				ColumnName: "ImagePullSecrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "ServiceAccount",
				ColumnName: "ServiceAccount",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ServiceAccountPermissionLevel",
				ColumnName: "ServiceAccountPermissionLevel",
				Type:       "storage.PermissionLevel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "PlatformComponent",
				ColumnName: "PlatformComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetDeploymentSchema returns the generated schema for deployments
func GetDeploymentSchema() *walker.Schema {
	// Set up search options if not already done
	if DeploymentSchema.OptionsMap == nil {
		DeploymentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_DEPLOYMENTS, DeploymentSearchFields))
	}
	return DeploymentSchema
}
