// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// DeploymentSearchFields contains pre-computed search fields for deployments
	DeploymentSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Add Capabilities"): {
			FieldPath: "deployment.containers.security_context.add_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Limit"): {
			FieldPath: "deployment.containers.resources.cpu_cores_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("CPU Cores Request"): {
			FieldPath: "deployment.containers.resources.cpu_cores_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster"): {
			FieldPath: "deployment.cluster_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Cluster ID"): {
			FieldPath: "deployment.cluster_id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Created"): {
			FieldPath: "deployment.created.seconds",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment"): {
			FieldPath: "deployment.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Annotation"): {
			FieldPath: "deployment.annotations",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment ID"): {
			FieldPath: "deployment.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Label"): {
			FieldPath: "deployment.labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Priority"): {
			FieldPath: "deployment.priority",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Risk Score"): {
			FieldPath: "deployment.risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Deployment Type"): {
			FieldPath: "deployment.type",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Drop Capabilities"): {
			FieldPath: "deployment.containers.security_context.drop_capabilities",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Key"): {
			FieldPath: "deployment.containers.config.env.key",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Value"): {
			FieldPath: "deployment.containers.config.env.value",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Environment Variable Source"): {
			FieldPath: "deployment.containers.config.env.env_var_source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposed Node Port"): {
			FieldPath: "deployment.ports.exposure_infos.node_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposing Service"): {
			FieldPath: "deployment.ports.exposure_infos.service_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposing Service Port"): {
			FieldPath: "deployment.ports.exposure_infos.service_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Exposure Level"): {
			FieldPath: "deployment.ports.exposure_infos.level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External Hostname"): {
			FieldPath: "deployment.ports.exposure_infos.external_hostnames",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("External IP"): {
			FieldPath: "deployment.ports.exposure_infos.external_ips",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image"): {
			FieldPath: "deployment.containers.image.name.full_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
			Analyzer:  "standard",
		},
		search.FieldLabel("Image ID"): {
			FieldPath: "deployment.containers.image.id_v2",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Pull Secret"): {
			FieldPath: "deployment.image_pull_secrets",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Registry"): {
			FieldPath: "deployment.containers.image.name.registry",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Remote"): {
			FieldPath: "deployment.containers.image.name.remote",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Sha"): {
			FieldPath: "deployment.containers.image.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Image Tag"): {
			FieldPath: "deployment.containers.image.name.tag",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Max Exposure Level"): {
			FieldPath: "deployment.ports.exposure",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Limit (MB)"): {
			FieldPath: "deployment.containers.resources.memory_mb_limit",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Memory Request (MB)"): {
			FieldPath: "deployment.containers.resources.memory_mb_request",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace"): {
			FieldPath: "deployment.namespace",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Namespace ID"): {
			FieldPath: "deployment.namespace_id",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Orchestrator Component"): {
			FieldPath: "deployment.orchestrator_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Platform Component"): {
			FieldPath: "deployment.platform_component",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Pod Label"): {
			FieldPath: "deployment.pod_labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port"): {
			FieldPath: "deployment.ports.container_port",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Port Protocol"): {
			FieldPath: "deployment.ports.protocol",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Privileged"): {
			FieldPath: "deployment.containers.security_context.privileged",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Read Only Root Filesystem"): {
			FieldPath: "deployment.containers.security_context.read_only_root_filesystem",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret"): {
			FieldPath: "deployment.containers.secrets.name",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Secret Path"): {
			FieldPath: "deployment.containers.secrets.path",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account"): {
			FieldPath: "deployment.service_account",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Service Account Permission Level"): {
			FieldPath: "deployment.service_account_permission_level",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Destination"): {
			FieldPath: "deployment.containers.volumes.destination",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Name"): {
			FieldPath: "deployment.containers.volumes.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume ReadOnly"): {
			FieldPath: "deployment.containers.volumes.read_only",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Source"): {
			FieldPath: "deployment.containers.volumes.source",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
		search.FieldLabel("Volume Type"): {
			FieldPath: "deployment.containers.volumes.type",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_DEPLOYMENTS,
		},
	}

	// DeploymentSchema is the pre-computed schema for deployments table
	DeploymentSchema = &walker.Schema{
		Table:    "deployments",
		Type:     "*storage.Deployment",
		TypeName: "Deployment",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Name",
				ColumnName: "Name",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Type",
				ColumnName: "Type",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Namespace",
				ColumnName: "Namespace",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "NamespaceId",
				ColumnName: "NamespaceId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "OrchestratorComponent",
				ColumnName: "OrchestratorComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "Labels",
				ColumnName: "Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "PodLabels",
				ColumnName: "PodLabels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Created",
				ColumnName: "Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "ClusterId",
				ColumnName: "ClusterId",
				Type:       "string",
				SQLType:    "uuid",
				DataType:   postgres.String,
			},
			{
				Name:       "ClusterName",
				ColumnName: "ClusterName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Annotations",
				ColumnName: "Annotations",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "ImagePullSecrets",
				ColumnName: "ImagePullSecrets",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "ServiceAccount",
				ColumnName: "ServiceAccount",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ServiceAccountPermissionLevel",
				ColumnName: "ServiceAccountPermissionLevel",
				Type:       "storage.PermissionLevel",
				SQLType:    "integer",
				DataType:   postgres.Enum,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "PlatformComponent",
				ColumnName: "PlatformComponent",
				Type:       "bool",
				SQLType:    "bool",
				DataType:   postgres.Bool,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "deployments_containers",
				Type:     "*storage.Container",
				TypeName: "Container",
				Fields: []walker.Field{
					{
						Name:       "deploymentID",
						ColumnName: "deployments_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Id",
						ColumnName: "Image_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Registry",
						ColumnName: "Image_Name_Registry",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Remote",
						ColumnName: "Image_Name_Remote",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Tag",
						ColumnName: "Image_Name_Tag",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "FullName",
						ColumnName: "Image_Name_FullName",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "IdV2",
						ColumnName: "Image_IdV2",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Privileged",
						ColumnName: "SecurityContext_Privileged",
						Type:       "bool",
						SQLType:    "bool",
						DataType:   postgres.Bool,
					},
					{
						Name:       "DropCapabilities",
						ColumnName: "SecurityContext_DropCapabilities",
						Type:       "[]string",
						SQLType:    "text[]",
						DataType:   postgres.StringArray,
					},
					{
						Name:       "AddCapabilities",
						ColumnName: "SecurityContext_AddCapabilities",
						Type:       "[]string",
						SQLType:    "text[]",
						DataType:   postgres.StringArray,
					},
					{
						Name:       "ReadOnlyRootFilesystem",
						ColumnName: "SecurityContext_ReadOnlyRootFilesystem",
						Type:       "bool",
						SQLType:    "bool",
						DataType:   postgres.Bool,
					},
					{
						Name:       "CpuCoresRequest",
						ColumnName: "Resources_CpuCoresRequest",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
					},
					{
						Name:       "CpuCoresLimit",
						ColumnName: "Resources_CpuCoresLimit",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
					},
					{
						Name:       "MemoryMbRequest",
						ColumnName: "Resources_MemoryMbRequest",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
					},
					{
						Name:       "MemoryMbLimit",
						ColumnName: "Resources_MemoryMbLimit",
						Type:       "float32",
						SQLType:    "numeric",
						DataType:   postgres.Numeric,
					},
				},
				Children: []*walker.Schema{
					{
						Table:    "deployments_containers_envs",
						Type:     "*storage.ContainerConfig_EnvironmentConfig",
						TypeName: "ContainerConfig_EnvironmentConfig",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Key",
								ColumnName: "Key",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "Value",
								ColumnName: "Value",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "EnvVarSource",
								ColumnName: "EnvVarSource",
								Type:       "storage.ContainerConfig_EnvironmentConfig_EnvVarSource",
								SQLType:    "integer",
								DataType:   postgres.Enum,
							},
						},
					},
					{
						Table:    "deployments_containers_volumes",
						Type:     "*storage.Volume",
						TypeName: "Volume",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "Source",
								ColumnName: "Source",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "Destination",
								ColumnName: "Destination",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "ReadOnly",
								ColumnName: "ReadOnly",
								Type:       "bool",
								SQLType:    "bool",
								DataType:   postgres.Bool,
							},
							{
								Name:       "Type",
								ColumnName: "Type",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
						},
					},
					{
						Table:    "deployments_containers_secrets",
						Type:     "*storage.EmbeddedSecret",
						TypeName: "EmbeddedSecret",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentContainerIdx",
								ColumnName: "deployments_containers_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Name",
								ColumnName: "Name",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "Path",
								ColumnName: "Path",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
						},
					},
				},
			},
			{
				Table:    "deployments_ports",
				Type:     "*storage.PortConfig",
				TypeName: "PortConfig",
				Fields: []walker.Field{
					{
						Name:       "deploymentID",
						ColumnName: "deployments_Id",
						Type:       "string",
						SQLType:    "uuid",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "ContainerPort",
						ColumnName: "ContainerPort",
						Type:       "int32",
						SQLType:    "integer",
						DataType:   postgres.Integer,
					},
					{
						Name:       "Protocol",
						ColumnName: "Protocol",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Exposure",
						ColumnName: "Exposure",
						Type:       "storage.PortConfig_ExposureLevel",
						SQLType:    "integer",
						DataType:   postgres.Enum,
					},
				},
				Children: []*walker.Schema{
					{
						Table:    "deployments_ports_exposure_infos",
						Type:     "*storage.PortConfig_ExposureInfo",
						TypeName: "PortConfig_ExposureInfo",
						Fields: []walker.Field{
							{
								Name:       "deploymentID",
								ColumnName: "deployments_Id",
								Type:       "string",
								SQLType:    "uuid",
								DataType:   postgres.String,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "deploymentPortIdx",
								ColumnName: "deployments_ports_idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "idx",
								ColumnName: "idx",
								Type:       "int",
								SQLType:    "integer",
								DataType:   postgres.Integer,
								Options: walker.PostgresOptions{
									PrimaryKey: true,
								},
							},
							{
								Name:       "Level",
								ColumnName: "Level",
								Type:       "storage.PortConfig_ExposureLevel",
								SQLType:    "integer",
								DataType:   postgres.Enum,
							},
							{
								Name:       "ServiceName",
								ColumnName: "ServiceName",
								Type:       "string",
								SQLType:    "varchar",
								DataType:   postgres.String,
							},
							{
								Name:       "ServicePort",
								ColumnName: "ServicePort",
								Type:       "int32",
								SQLType:    "integer",
								DataType:   postgres.Integer,
							},
							{
								Name:       "NodePort",
								ColumnName: "NodePort",
								Type:       "int32",
								SQLType:    "integer",
								DataType:   postgres.Integer,
							},
							{
								Name:       "ExternalIps",
								ColumnName: "ExternalIps",
								Type:       "[]string",
								SQLType:    "text[]",
								DataType:   postgres.StringArray,
							},
							{
								Name:       "ExternalHostnames",
								ColumnName: "ExternalHostnames",
								Type:       "[]string",
								SQLType:    "text[]",
								DataType:   postgres.StringArray,
							},
						},
					},
				},
			},
		},
	}
)

// GetDeploymentSchema returns the generated schema for deployments
func GetDeploymentSchema() *walker.Schema {
	// Set up search options if not already done
	if DeploymentSchema.OptionsMap == nil {
		DeploymentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_DEPLOYMENTS, DeploymentSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range DeploymentSchema.Fields {
		DeploymentSchema.Fields[i].Schema = DeploymentSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(DeploymentSchema)
	return DeploymentSchema
}
