// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/lib/pq"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertAlertFromProto(obj *storage.Alert) (*schema.Alerts, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.Alerts{
		Id:                       obj.GetId(),
		PolicyId:                 obj.GetPolicy().GetId(),
		PolicyName:               obj.GetPolicy().GetName(),
		PolicyDescription:        obj.GetPolicy().GetDescription(),
		PolicyDisabled:           obj.GetPolicy().GetDisabled(),
		PolicyCategories:         pq.Array(obj.GetPolicy().GetCategories()).(*pq.StringArray),
		PolicyLifecycleStages:    pq.Array(pgutils.ConvertEnumSliceToIntArray(obj.GetPolicy().GetLifecycleStages())).(*pq.Int32Array),
		PolicySeverity:           obj.GetPolicy().GetSeverity(),
		PolicyEnforcementActions: pq.Array(pgutils.ConvertEnumSliceToIntArray(obj.GetPolicy().GetEnforcementActions())).(*pq.Int32Array),
		PolicyLastUpdated:        pgutils.NilOrTime(obj.GetPolicy().GetLastUpdated()),
		PolicySORTName:           obj.GetPolicy().GetSORTName(),
		PolicySORTLifecycleStage: obj.GetPolicy().GetSORTLifecycleStage(),
		PolicySORTEnforcement:    obj.GetPolicy().GetSORTEnforcement(),
		LifecycleStage:           obj.GetLifecycleStage(),
		ClusterId:                obj.GetClusterId(),
		ClusterName:              obj.GetClusterName(),
		Namespace:                obj.GetNamespace(),
		NamespaceId:              obj.GetNamespaceId(),
		DeploymentId:             obj.GetDeployment().GetId(),
		DeploymentName:           obj.GetDeployment().GetName(),
		DeploymentInactive:       obj.GetDeployment().GetInactive(),
		ImageId:                  obj.GetImage().GetId(),
		ImageNameRegistry:        obj.GetImage().GetName().GetRegistry(),
		ImageNameRemote:          obj.GetImage().GetName().GetRemote(),
		ImageNameTag:             obj.GetImage().GetName().GetTag(),
		ImageNameFullName:        obj.GetImage().GetName().GetFullName(),
		ResourceResourceType:     obj.GetResource().GetResourceType(),
		ResourceName:             obj.GetResource().GetName(),
		EnforcementAction:        obj.GetEnforcement().GetAction(),
		Time:                     pgutils.NilOrTime(obj.GetTime()),
		State:                    obj.GetState(),
		Serialized:               serialized,
	}
	return model, nil
}

func convertAlertToProto(m *schema.Alerts) (*storage.Alert, error) {
	var msg storage.Alert
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestAlertConversion(t *testing.T) {
	obj := &storage.Alert{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertAlertFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertAlertToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
