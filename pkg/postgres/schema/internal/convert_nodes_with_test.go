// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertNodeFromProto(obj *storage.Node) (*schema.Nodes, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.Nodes{
		Id:                      obj.GetId(),
		Name:                    obj.GetName(),
		ClusterId:               obj.GetClusterId(),
		ClusterName:             obj.GetClusterName(),
		Labels:                  obj.GetLabels(),
		Annotations:             obj.GetAnnotations(),
		JoinedAt:                pgutils.NilOrTime(obj.GetJoinedAt()),
		ContainerRuntimeVersion: obj.GetContainerRuntime().GetVersion(),
		OsImage:                 obj.GetOsImage(),
		LastUpdated:             pgutils.NilOrTime(obj.GetLastUpdated()),
		ScanScanTime:            pgutils.NilOrTime(obj.GetScan().GetScanTime()),
		Components:              obj.GetComponents(),
		Cves:                    obj.GetCves(),
		FixableCves:             obj.GetFixableCves(),
		Priority:                obj.GetPriority(),
		RiskScore:               obj.GetRiskScore(),
		TopCvss:                 obj.GetTopCvss(),
		Serialized:              serialized,
	}
	return model, nil
}

func convertNodeToProto(m *schema.Nodes) (*storage.Node, error) {
	var msg storage.Node
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestNodeConversion(t *testing.T) {
	obj := &storage.Node{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertNodeFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertNodeToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertTaintFromProto(obj *storage.Taint, nodes_Id string) (*schema.NodesTaints, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.NodesTaints{
		NodesId:     nodes_Id,
		Idx:         idx,
		Key:         obj.GetKey(),
		Value:       obj.GetValue(),
		TaintEffect: obj.GetTaintEffect(),
	}
	return model, nil
}

func convertTaintToProto(m *schema.NodesTaints) (*storage.Taint, error) {
	var msg storage.Taint
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestTaintConversion(t *testing.T) {
	obj := &storage.Taint{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertTaintFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertTaintToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
