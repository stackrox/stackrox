// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// ImageSearchFields contains pre-computed search fields for images
	ImageSearchFields = map[search.FieldLabel]*search.Field{
		search.FieldLabel("Advisory Link"): {
			FieldPath: "image.scan.components.vulns.advisory.link",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Advisory Name"): {
			FieldPath: "image.scan.components.vulns.advisory.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("CVE"): {
			FieldPath: "image.scan.components.vulns.cve",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("CVE Published On"): {
			FieldPath: "image.scan.components.vulns.published_on.seconds",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("CVE Snoozed"): {
			FieldPath: "image.scan.components.vulns.suppressed",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("CVSS"): {
			FieldPath: "image.scan.components.vulns.cvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Component"): {
			FieldPath: "image.scan.components.name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Component Count"): {
			FieldPath: "image.SetComponents.Components",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Component Risk Score"): {
			FieldPath: "image.scan.components.risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Component Version"): {
			FieldPath: "image.scan.components.version",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Dockerfile Instruction Keyword"): {
			FieldPath: "image.metadata.v1.layers.instruction",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Dockerfile Instruction Value"): {
			FieldPath: "image.metadata.v1.layers.value",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("EPSS Probability"): {
			FieldPath: "image.scan.components.vulns.epss.epss_probability",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Fixable CVE Count"): {
			FieldPath: "image.SetFixable.FixableCves",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Fixed By"): {
			FieldPath: "image.scan.components.vulns.SetFixedBy.FixedBy",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image"): {
			FieldPath: "image.name.full_name",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
			Analyzer:  "standard",
		},
		search.FieldLabel("Image CVE Count"): {
			FieldPath: "image.SetCves.Cves",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Command"): {
			FieldPath: "image.metadata.v1.command",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Created Time"): {
			FieldPath: "image.metadata.v1.created.seconds",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Entrypoint"): {
			FieldPath: "image.metadata.v1.entrypoint",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Label"): {
			FieldPath: "image.metadata.v1.labels",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image OS"): {
			FieldPath: "image.scan.operating_system",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Registry"): {
			FieldPath: "image.name.registry",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Remote"): {
			FieldPath: "image.name.remote",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Risk Priority"): {
			FieldPath: "image.priority",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Risk Score"): {
			FieldPath: "image.risk_score",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Scan Time"): {
			FieldPath: "image.scan.scan_time.seconds",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Sha"): {
			FieldPath: "image.id",
			Store:     true,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Signature Fetched Time"): {
			FieldPath: "image.signature.fetched.seconds",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Tag"): {
			FieldPath: "image.name.tag",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Top CVSS"): {
			FieldPath: "image.SetTopCvss.TopCvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image User"): {
			FieldPath: "image.metadata.v1.user",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Image Volumes"): {
			FieldPath: "image.metadata.v1.volumes",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Last Updated"): {
			FieldPath: "image.last_updated.seconds",
			Store:     false,
			Hidden:    true,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("NVD CVSS"): {
			FieldPath: "image.scan.components.vulns.nvd_cvss",
			Store:     true,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
		search.FieldLabel("Vulnerability State"): {
			FieldPath: "image.scan.components.vulns.state",
			Store:     false,
			Hidden:    false,
			Category:  v1.SearchCategory_IMAGES,
		},
	}

	// ImageSchema is the pre-computed schema for images table
	ImageSchema = &walker.Schema{
		Table:    "images",
		Type:     "*storage.Image",
		TypeName: "Image",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Registry",
				ColumnName: "Name_Registry",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Remote",
				ColumnName: "Name_Remote",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Tag",
				ColumnName: "Name_Tag",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "FullName",
				ColumnName: "Name_FullName",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Created",
				ColumnName: "Metadata_V1_Created",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "User",
				ColumnName: "Metadata_V1_User",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Command",
				ColumnName: "Metadata_V1_Command",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Entrypoint",
				ColumnName: "Metadata_V1_Entrypoint",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Volumes",
				ColumnName: "Metadata_V1_Volumes",
				Type:       "[]string",
				SQLType:    "text[]",
				DataType:   postgres.StringArray,
			},
			{
				Name:       "Labels",
				ColumnName: "Metadata_V1_Labels",
				Type:       "map[string]string",
				SQLType:    "jsonb",
				DataType:   postgres.Map,
			},
			{
				Name:       "ScanTime",
				ColumnName: "Scan_ScanTime",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "OperatingSystem",
				ColumnName: "Scan_OperatingSystem",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Fetched",
				ColumnName: "Signature_Fetched",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Components",
				ColumnName: "Components",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "Cves",
				ColumnName: "Cves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "FixableCves",
				ColumnName: "FixableCves",
				Type:       "int32",
				SQLType:    "integer",
				DataType:   postgres.Integer,
			},
			{
				Name:       "LastUpdated",
				ColumnName: "LastUpdated",
				Type:       "*timestamppb.Timestamp",
				SQLType:    "timestamp",
				DataType:   postgres.DateTime,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "TopCvss",
				ColumnName: "TopCvss",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
		Children: []*walker.Schema{
			{
				Table:    "images_layers",
				Type:     "*storage.ImageLayer",
				TypeName: "ImageLayer",
				Fields: []walker.Field{
					{
						Name:       "imageID",
						ColumnName: "images_Id",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "idx",
						ColumnName: "idx",
						Type:       "int",
						SQLType:    "integer",
						DataType:   postgres.Integer,
						Options: walker.PostgresOptions{
							PrimaryKey: true,
						},
					},
					{
						Name:       "Instruction",
						ColumnName: "Instruction",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
					{
						Name:       "Value",
						ColumnName: "Value",
						Type:       "string",
						SQLType:    "varchar",
						DataType:   postgres.String,
					},
				},
			},
		},
	}
)

// GetImageSchema returns the generated schema for images
func GetImageSchema() *walker.Schema {
	// Set up search options if not already done
	if ImageSchema.OptionsMap == nil {
		ImageSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGES, ImageSearchFields))
	}
	// Set Schema back-reference on all fields
	for i := range ImageSchema.Fields {
		ImageSchema.Fields[i].Schema = ImageSchema
	}
	// Set Schema back-reference on all child schema fields
	var setChildSchemaReferences func(*walker.Schema)
	setChildSchemaReferences = func(schema *walker.Schema) {
		for _, child := range schema.Children {
			for i := range child.Fields {
				child.Fields[i].Schema = child
			}
			setChildSchemaReferences(child)
		}
	}
	setChildSchemaReferences(ImageSchema)
	return ImageSchema
}
