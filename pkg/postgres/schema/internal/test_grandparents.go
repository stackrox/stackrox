// Code generated by pg-bindings generator. DO NOT EDIT.
package internal

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// TestGrandparentSearchFields contains pre-computed search fields for test_grandparents
	TestGrandparentSearchFields = map[search.FieldLabel]*search.Field{}

	// TestGrandparentSchema is the pre-computed schema for test_grandparents table
	TestGrandparentSchema = &walker.Schema{
		Table:    "test_grandparents",
		Type:     "*storage.TestGrandparent",
		TypeName: "TestGrandparent",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Val",
				ColumnName: "Val",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "Priority",
				ColumnName: "Priority",
				Type:       "int64",
				SQLType:    "bigint",
				DataType:   postgres.BigInteger,
			},
			{
				Name:       "RiskScore",
				ColumnName: "RiskScore",
				Type:       "float32",
				SQLType:    "numeric",
				DataType:   postgres.Numeric,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
			},
		},
	}
)

// GetTestGrandparentSchema returns the generated schema for test_grandparents
func GetTestGrandparentSchema() *walker.Schema {
	// Set up search options if not already done
	if TestGrandparentSchema.OptionsMap == nil {
		TestGrandparentSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory(109), TestGrandparentSearchFields))
	}
	return TestGrandparentSchema
}
