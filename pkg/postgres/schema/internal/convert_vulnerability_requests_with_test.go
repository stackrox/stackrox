// Code generated by pg-bindings generator. DO NOT EDIT.

package convert

import (
	"testing"

	"github.com/lib/pq"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertVulnerabilityRequestFromProto(obj *storage.VulnerabilityRequest) (*schema.VulnerabilityRequests, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.VulnerabilityRequests{
		Id:                                obj.GetId(),
		TargetState:                       obj.GetTargetState(),
		Status:                            obj.GetStatus(),
		Expired:                           obj.GetExpired(),
		RequestorName:                     obj.GetRequestor().GetName(),
		CreatedAt:                         pgutils.NilOrTime(obj.GetCreatedAt()),
		LastUpdated:                       pgutils.NilOrTime(obj.GetLastUpdated()),
		DeferralReqExpiryExpiresWhenFixed: obj.GetDeferralReq().GetExpiry().GetExpiresWhenFixed(),
		DeferralReqExpiryExpiresOn:        pgutils.NilOrTime(obj.GetDeferralReq().GetExpiry().GetExpiresOn()),
		CvesIds:                           pq.Array(obj.GetCves().GetIds()).(*pq.StringArray),
		Serialized:                        serialized,
	}
	return model, nil
}

func convertVulnerabilityRequestToProto(m *schema.VulnerabilityRequests) (*storage.VulnerabilityRequest, error) {
	var msg storage.VulnerabilityRequest
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestVulnerabilityRequestConversion(t *testing.T) {
	obj := &storage.VulnerabilityRequest{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertVulnerabilityRequestFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertVulnerabilityRequestToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertSlimUserFromProto(obj *storage.SlimUser, vulnerability_requests_Id string) (*schema.VulnerabilityRequestsApprovers, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.VulnerabilityRequestsApprovers{
		VulnerabilityRequestsId: vulnerability_requests_Id,
		Idx:                     idx,
		Name:                    obj.GetName(),
	}
	return model, nil
}

func convertSlimUserToProto(m *schema.VulnerabilityRequestsApprovers) (*storage.SlimUser, error) {
	var msg storage.SlimUser
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestSlimUserConversion(t *testing.T) {
	obj := &storage.SlimUser{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertSlimUserFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertSlimUserToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
func convertRequestCommentFromProto(obj *storage.RequestComment, vulnerability_requests_Id string) (*schema.VulnerabilityRequestsComments, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.VulnerabilityRequestsComments{
		VulnerabilityRequestsId: vulnerability_requests_Id,
		Idx:                     idx,
		UserName:                obj.GetUser().GetName(),
	}
	return model, nil
}

func convertRequestCommentToProto(m *schema.VulnerabilityRequestsComments) (*storage.RequestComment, error) {
	var msg storage.RequestComment
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestRequestCommentConversion(t *testing.T) {
	obj := &storage.RequestComment{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertRequestCommentFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertRequestCommentToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
