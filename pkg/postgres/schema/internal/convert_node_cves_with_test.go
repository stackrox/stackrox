// Code generated by pg-bindings generator. DO NOT EDIT.
package convert

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/assert"
)

func convertNodeCVEFromProto(obj *storage.NodeCVE) (*schema.NodeCves, error) {
	serialized, err := obj.Marshal()
	if err != nil {
		return nil, err
	}
	model := &schema.NodeCves{
		Id:                     obj.GetId(),
		CveBaseInfoCve:         obj.GetCveBaseInfo().GetCve(),
		CveBaseInfoPublishedOn: pgutils.NilOrTime(obj.GetCveBaseInfo().GetPublishedOn()),
		CveBaseInfoCreatedAt:   pgutils.NilOrTime(obj.GetCveBaseInfo().GetCreatedAt()),
		OperatingSystem:        obj.GetOperatingSystem(),
		Cvss:                   obj.GetCvss(),
		Severity:               obj.GetSeverity(),
		ImpactScore:            obj.GetImpactScore(),
		Snoozed:                obj.GetSnoozed(),
		SnoozeExpiry:           pgutils.NilOrTime(obj.GetSnoozeExpiry()),
		Serialized:             serialized,
	}
	return model, nil
}
func convertNodeCVEToProto(m *schema.NodeCves) (*storage.NodeCVE, error) {
	var msg storage.NodeCVE
	if err := msg.Unmarshal(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}

func TestNodeCVEConversion(t *testing.T) {
	obj := &storage.NodeCVE{}
	assert.NoError(t, testutils.FullInit(obj, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
	m, err := convertNodeCVEFromProto(obj)
	assert.NoError(t, err)
	conv, err := convertNodeCVEToProto(m)
	assert.NoError(t, err)
	assert.Equal(t, obj, conv)
}
