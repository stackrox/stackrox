// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// generatedImageComponentEdgeSearchFields contains pre-computed search fields for image_component_edges
	generatedImageComponentEdgeSearchFields = map[search.FieldLabel]*search.Field{}

	// generatedImageComponentEdgeSchema is the pre-computed schema for image_component_edges table
	generatedImageComponentEdgeSchema = &walker.Schema{
		Table:    "image_component_edges",
		Type:     "storage.ImageComponentEdge",
		TypeName: "ImageComponentEdge",
		Fields: []walker.Field{
			{
				Name:       "Id",
				ColumnName: "Id",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
				Options: walker.PostgresOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:       "Location",
				ColumnName: "Location",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageId",
				ColumnName: "ImageId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "ImageComponentId",
				ColumnName: "ImageComponentId",
				Type:       "string",
				SQLType:    "varchar",
				DataType:   postgres.String,
			},
			{
				Name:       "serialized",
				ColumnName: "serialized",
				Type:       "[]byte",
				SQLType:    "bytea",
				DataType:   postgres.String,
			},
		},
	}
)

// GetImageComponentEdgeSchema returns the generated schema for image_component_edges
func GetImageComponentEdgeSchema() *walker.Schema {
	// Set up search options if not already done
	if generatedImageComponentEdgeSchema.OptionsMap == nil {
		generatedImageComponentEdgeSchema.SetOptionsMap(search.OptionsMapFromMap(v1.SearchCategory_IMAGE_COMPONENT_EDGE, generatedImageComponentEdgeSearchFields))
	}
	return generatedImageComponentEdgeSchema
}
