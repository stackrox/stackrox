// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	types "github.com/stackrox/rox/pkg/registries/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockRegistry) Config() *types.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*types.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockRegistryMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockRegistry)(nil).Config))
}

// HTTPClient mocks base method.
func (m *MockRegistry) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockRegistryMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockRegistry)(nil).HTTPClient))
}

// Match mocks base method.
func (m *MockRegistry) Match(image *storage.ImageName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", image)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockRegistryMockRecorder) Match(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockRegistry)(nil).Match), image)
}

// Metadata mocks base method.
func (m *MockRegistry) Metadata(image *storage.Image) (*storage.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", image)
	ret0, _ := ret[0].(*storage.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockRegistryMockRecorder) Metadata(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockRegistry)(nil).Metadata), image)
}

// Name mocks base method.
func (m *MockRegistry) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRegistryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRegistry)(nil).Name))
}

// Test mocks base method.
func (m *MockRegistry) Test() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockRegistryMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockRegistry)(nil).Test))
}

// MockImageRegistry is a mock of ImageRegistry interface.
type MockImageRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockImageRegistryMockRecorder
}

// MockImageRegistryMockRecorder is the mock recorder for MockImageRegistry.
type MockImageRegistryMockRecorder struct {
	mock *MockImageRegistry
}

// NewMockImageRegistry creates a new mock instance.
func NewMockImageRegistry(ctrl *gomock.Controller) *MockImageRegistry {
	mock := &MockImageRegistry{ctrl: ctrl}
	mock.recorder = &MockImageRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRegistry) EXPECT() *MockImageRegistryMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockImageRegistry) Config() *types.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*types.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockImageRegistryMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockImageRegistry)(nil).Config))
}

// DataSource mocks base method.
func (m *MockImageRegistry) DataSource() *storage.DataSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSource")
	ret0, _ := ret[0].(*storage.DataSource)
	return ret0
}

// DataSource indicates an expected call of DataSource.
func (mr *MockImageRegistryMockRecorder) DataSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSource", reflect.TypeOf((*MockImageRegistry)(nil).DataSource))
}

// HTTPClient mocks base method.
func (m *MockImageRegistry) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockImageRegistryMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockImageRegistry)(nil).HTTPClient))
}

// Match mocks base method.
func (m *MockImageRegistry) Match(image *storage.ImageName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", image)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockImageRegistryMockRecorder) Match(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockImageRegistry)(nil).Match), image)
}

// Metadata mocks base method.
func (m *MockImageRegistry) Metadata(image *storage.Image) (*storage.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", image)
	ret0, _ := ret[0].(*storage.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockImageRegistryMockRecorder) Metadata(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockImageRegistry)(nil).Metadata), image)
}

// Name mocks base method.
func (m *MockImageRegistry) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockImageRegistryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockImageRegistry)(nil).Name))
}

// Source mocks base method.
func (m *MockImageRegistry) Source() *storage.ImageIntegration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(*storage.ImageIntegration)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockImageRegistryMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockImageRegistry)(nil).Source))
}

// Test mocks base method.
func (m *MockImageRegistry) Test() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockImageRegistryMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockImageRegistry)(nil).Test))
}
