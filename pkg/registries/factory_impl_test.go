package registries

import (
	"net/http"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/registries/types"
	"github.com/stretchr/testify/assert"
)

var (
	NameRepoListEnabled  = "ENABLED"
	NameRepoListDisabled = "DISABLED"
	RegistryType         = "FAKE"
)

func TestCreateRegistryWithoutRepoList(t *testing.T) {
	onlyWithRepoOpts := FactoryOptions{
		CreatorFuncs: []CreatorWrapper{creatorWithRepoList},
	}

	withAndWithoutOpts := FactoryOptions{
		CreatorFuncs:                []CreatorWrapper{creatorWithRepoList},
		CreatorFuncsWithoutRepoList: []CreatorWrapper{creatorWithoutRepoList},
	}

	testCases := map[string]struct {
		opts         FactoryOptions
		envVal       bool
		autogen      bool
		expectedName string
	}{
		"auto gen has repo list enabled":                 {withAndWithoutOpts, false, true, NameRepoListEnabled},
		"non auto gen repo list disabled":                {withAndWithoutOpts, false, false, NameRepoListDisabled},
		"auto gen repo list disabled if env var set":     {withAndWithoutOpts, true, true, NameRepoListDisabled},
		"non auto gen repo list disabled if env var set": {withAndWithoutOpts, true, false, NameRepoListDisabled},

		// remaining tests ensure repo list is used only enabled creators exist
		"def creators autogen with env false":    {onlyWithRepoOpts, false, true, NameRepoListEnabled},
		"def creators no autogen with env false": {onlyWithRepoOpts, false, false, NameRepoListEnabled},
		"def creators autogen with env true":     {onlyWithRepoOpts, true, true, NameRepoListEnabled},
		"def creators no autogen with env true":  {onlyWithRepoOpts, true, false, NameRepoListEnabled},
	}

	for name, tc := range testCases {
		t.Run(name, func(t *testing.T) {
			disableRepoListForAll = tc.envVal
			factory := NewFactory(tc.opts)
			reg, err := factory.CreateRegistry(&storage.ImageIntegration{Autogenerated: tc.autogen, Type: RegistryType}, nil)
			assert.NoError(t, err)
			assert.Equal(t, reg.Name(), tc.expectedName)
		})
	}
}

func newFakeReg(name string) types.Registry {
	return &FakeReg{
		name: name,
	}
}

type FakeReg struct {
	name string
}

var _ types.Registry = (*FakeReg)(nil)

func (*FakeReg) Config() *types.Config                                     { return nil }
func (*FakeReg) HTTPClient() *http.Client                                  { return nil }
func (*FakeReg) Match(_ *storage.ImageName) bool                           { return false }
func (*FakeReg) Metadata(_ *storage.Image) (*storage.ImageMetadata, error) { return nil, nil }
func (f *FakeReg) Name() string                                            { return f.name }
func (*FakeReg) Test() error                                               { return nil }

func creatorWithoutRepoList() (string,
	func(integration *storage.ImageIntegration, _ *types.CreatorOptions) (types.Registry, error),
) {
	return RegistryType,
		func(integration *storage.ImageIntegration, _ *types.CreatorOptions) (types.Registry, error) {
			reg := newFakeReg(NameRepoListDisabled)
			return reg, nil
		}
}

func creatorWithRepoList() (string,
	func(integration *storage.ImageIntegration, _ *types.CreatorOptions) (types.Registry, error),
) {
	return RegistryType,
		func(integration *storage.ImageIntegration, _ *types.CreatorOptions) (types.Registry, error) {
			reg := newFakeReg(NameRepoListEnabled)
			return reg, nil
		}
}
