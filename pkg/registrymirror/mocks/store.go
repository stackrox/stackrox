// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1 "github.com/openshift/api/config/v1"
	v1alpha1 "github.com/openshift/api/operator/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockStore) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockStoreMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockStore)(nil).Cleanup))
}

// DeleteImageContentSourcePolicy mocks base method.
func (m *MockStore) DeleteImageContentSourcePolicy(uid types.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageContentSourcePolicy", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageContentSourcePolicy indicates an expected call of DeleteImageContentSourcePolicy.
func (mr *MockStoreMockRecorder) DeleteImageContentSourcePolicy(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageContentSourcePolicy", reflect.TypeOf((*MockStore)(nil).DeleteImageContentSourcePolicy), uid)
}

// DeleteImageDigestMirrorSet mocks base method.
func (m *MockStore) DeleteImageDigestMirrorSet(uid types.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageDigestMirrorSet", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageDigestMirrorSet indicates an expected call of DeleteImageDigestMirrorSet.
func (mr *MockStoreMockRecorder) DeleteImageDigestMirrorSet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageDigestMirrorSet", reflect.TypeOf((*MockStore)(nil).DeleteImageDigestMirrorSet), uid)
}

// DeleteImageTagMirrorSet mocks base method.
func (m *MockStore) DeleteImageTagMirrorSet(uid types.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageTagMirrorSet", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageTagMirrorSet indicates an expected call of DeleteImageTagMirrorSet.
func (mr *MockStoreMockRecorder) DeleteImageTagMirrorSet(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageTagMirrorSet", reflect.TypeOf((*MockStore)(nil).DeleteImageTagMirrorSet), uid)
}

// PullSources mocks base method.
func (m *MockStore) PullSources(srcImage string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullSources", srcImage)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullSources indicates an expected call of PullSources.
func (mr *MockStoreMockRecorder) PullSources(srcImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullSources", reflect.TypeOf((*MockStore)(nil).PullSources), srcImage)
}

// UpsertImageContentSourcePolicy mocks base method.
func (m *MockStore) UpsertImageContentSourcePolicy(icsp *v1alpha1.ImageContentSourcePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertImageContentSourcePolicy", icsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImageContentSourcePolicy indicates an expected call of UpsertImageContentSourcePolicy.
func (mr *MockStoreMockRecorder) UpsertImageContentSourcePolicy(icsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImageContentSourcePolicy", reflect.TypeOf((*MockStore)(nil).UpsertImageContentSourcePolicy), icsp)
}

// UpsertImageDigestMirrorSet mocks base method.
func (m *MockStore) UpsertImageDigestMirrorSet(idms *v1.ImageDigestMirrorSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertImageDigestMirrorSet", idms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImageDigestMirrorSet indicates an expected call of UpsertImageDigestMirrorSet.
func (mr *MockStoreMockRecorder) UpsertImageDigestMirrorSet(idms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImageDigestMirrorSet", reflect.TypeOf((*MockStore)(nil).UpsertImageDigestMirrorSet), idms)
}

// UpsertImageTagMirrorSet mocks base method.
func (m *MockStore) UpsertImageTagMirrorSet(itms *v1.ImageTagMirrorSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertImageTagMirrorSet", itms)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertImageTagMirrorSet indicates an expected call of UpsertImageTagMirrorSet.
func (mr *MockStoreMockRecorder) UpsertImageTagMirrorSet(itms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertImageTagMirrorSet", reflect.TypeOf((*MockStore)(nil).UpsertImageTagMirrorSet), itms)
}
