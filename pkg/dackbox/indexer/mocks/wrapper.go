// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/wrapper.go -source wrapper.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	proto "github.com/gogo/protobuf/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockWrapper is a mock of Wrapper interface.
type MockWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperMockRecorder
}

// MockWrapperMockRecorder is the mock recorder for MockWrapper.
type MockWrapperMockRecorder struct {
	mock *MockWrapper
}

// NewMockWrapper creates a new mock instance.
func NewMockWrapper(ctrl *gomock.Controller) *MockWrapper {
	mock := &MockWrapper{ctrl: ctrl}
	mock.recorder = &MockWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrapper) EXPECT() *MockWrapperMockRecorder {
	return m.recorder
}

// Wrap mocks base method.
func (m *MockWrapper) Wrap(key []byte, msg proto.Message) (string, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", key, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Wrap indicates an expected call of Wrap.
func (mr *MockWrapperMockRecorder) Wrap(key, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockWrapper)(nil).Wrap), key, msg)
}
