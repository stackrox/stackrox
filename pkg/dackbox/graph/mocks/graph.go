// Code generated by MockGen. DO NOT EDIT.
// Source: graph.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/graph.go -source graph.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRGraph is a mock of RGraph interface.
type MockRGraph struct {
	ctrl     *gomock.Controller
	recorder *MockRGraphMockRecorder
}

// MockRGraphMockRecorder is the mock recorder for MockRGraph.
type MockRGraphMockRecorder struct {
	mock *MockRGraph
}

// NewMockRGraph creates a new mock instance.
func NewMockRGraph(ctrl *gomock.Controller) *MockRGraph {
	mock := &MockRGraph{ctrl: ctrl}
	mock.recorder = &MockRGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRGraph) EXPECT() *MockRGraphMockRecorder {
	return m.recorder
}

// CountRefsFrom mocks base method.
func (m *MockRGraph) CountRefsFrom(from []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFrom", from)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFrom indicates an expected call of CountRefsFrom.
func (mr *MockRGraphMockRecorder) CountRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFrom", reflect.TypeOf((*MockRGraph)(nil).CountRefsFrom), from)
}

// CountRefsFromPrefix mocks base method.
func (m *MockRGraph) CountRefsFromPrefix(from, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFromPrefix indicates an expected call of CountRefsFromPrefix.
func (mr *MockRGraphMockRecorder) CountRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFromPrefix", reflect.TypeOf((*MockRGraph)(nil).CountRefsFromPrefix), from, prefix)
}

// CountRefsTo mocks base method.
func (m *MockRGraph) CountRefsTo(to []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsTo", to)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsTo indicates an expected call of CountRefsTo.
func (mr *MockRGraphMockRecorder) CountRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsTo", reflect.TypeOf((*MockRGraph)(nil).CountRefsTo), to)
}

// CountRefsToPrefix mocks base method.
func (m *MockRGraph) CountRefsToPrefix(to, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsToPrefix", to, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsToPrefix indicates an expected call of CountRefsToPrefix.
func (mr *MockRGraphMockRecorder) CountRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsToPrefix", reflect.TypeOf((*MockRGraph)(nil).CountRefsToPrefix), to, prefix)
}

// GetRefsFrom mocks base method.
func (m *MockRGraph) GetRefsFrom(from []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFrom", from)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFrom indicates an expected call of GetRefsFrom.
func (mr *MockRGraphMockRecorder) GetRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFrom", reflect.TypeOf((*MockRGraph)(nil).GetRefsFrom), from)
}

// GetRefsFromPrefix mocks base method.
func (m *MockRGraph) GetRefsFromPrefix(from, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFromPrefix indicates an expected call of GetRefsFromPrefix.
func (mr *MockRGraphMockRecorder) GetRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFromPrefix", reflect.TypeOf((*MockRGraph)(nil).GetRefsFromPrefix), from, prefix)
}

// GetRefsTo mocks base method.
func (m *MockRGraph) GetRefsTo(to []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsTo", to)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsTo indicates an expected call of GetRefsTo.
func (mr *MockRGraphMockRecorder) GetRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsTo", reflect.TypeOf((*MockRGraph)(nil).GetRefsTo), to)
}

// GetRefsToPrefix mocks base method.
func (m *MockRGraph) GetRefsToPrefix(to, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsToPrefix", to, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsToPrefix indicates an expected call of GetRefsToPrefix.
func (mr *MockRGraphMockRecorder) GetRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsToPrefix", reflect.TypeOf((*MockRGraph)(nil).GetRefsToPrefix), to, prefix)
}

// HasRefsFrom mocks base method.
func (m *MockRGraph) HasRefsFrom(from []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsFrom", from)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsFrom indicates an expected call of HasRefsFrom.
func (mr *MockRGraphMockRecorder) HasRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsFrom", reflect.TypeOf((*MockRGraph)(nil).HasRefsFrom), from)
}

// HasRefsTo mocks base method.
func (m *MockRGraph) HasRefsTo(to []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsTo", to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsTo indicates an expected call of HasRefsTo.
func (mr *MockRGraphMockRecorder) HasRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsTo", reflect.TypeOf((*MockRGraph)(nil).HasRefsTo), to)
}

// ReferencedFromPrefix mocks base method.
func (m *MockRGraph) ReferencedFromPrefix(to, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencedFromPrefix", to, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencedFromPrefix indicates an expected call of ReferencedFromPrefix.
func (mr *MockRGraphMockRecorder) ReferencedFromPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencedFromPrefix", reflect.TypeOf((*MockRGraph)(nil).ReferencedFromPrefix), to, prefix)
}

// ReferencesPrefix mocks base method.
func (m *MockRGraph) ReferencesPrefix(from, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencesPrefix", from, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencesPrefix indicates an expected call of ReferencesPrefix.
func (mr *MockRGraphMockRecorder) ReferencesPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencesPrefix", reflect.TypeOf((*MockRGraph)(nil).ReferencesPrefix), from, prefix)
}

// MockRWGraph is a mock of RWGraph interface.
type MockRWGraph struct {
	ctrl     *gomock.Controller
	recorder *MockRWGraphMockRecorder
}

// MockRWGraphMockRecorder is the mock recorder for MockRWGraph.
type MockRWGraphMockRecorder struct {
	mock *MockRWGraph
}

// NewMockRWGraph creates a new mock instance.
func NewMockRWGraph(ctrl *gomock.Controller) *MockRWGraph {
	mock := &MockRWGraph{ctrl: ctrl}
	mock.recorder = &MockRWGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWGraph) EXPECT() *MockRWGraphMockRecorder {
	return m.recorder
}

// AddRefs mocks base method.
func (m *MockRWGraph) AddRefs(from []byte, to ...[]byte) {
	m.ctrl.T.Helper()
	varargs := []any{from}
	for _, a := range to {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddRefs", varargs...)
}

// AddRefs indicates an expected call of AddRefs.
func (mr *MockRWGraphMockRecorder) AddRefs(from any, to ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{from}, to...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefs", reflect.TypeOf((*MockRWGraph)(nil).AddRefs), varargs...)
}

// CountRefsFrom mocks base method.
func (m *MockRWGraph) CountRefsFrom(from []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFrom", from)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFrom indicates an expected call of CountRefsFrom.
func (mr *MockRWGraphMockRecorder) CountRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).CountRefsFrom), from)
}

// CountRefsFromPrefix mocks base method.
func (m *MockRWGraph) CountRefsFromPrefix(from, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFromPrefix indicates an expected call of CountRefsFromPrefix.
func (mr *MockRWGraphMockRecorder) CountRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFromPrefix", reflect.TypeOf((*MockRWGraph)(nil).CountRefsFromPrefix), from, prefix)
}

// CountRefsTo mocks base method.
func (m *MockRWGraph) CountRefsTo(to []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsTo", to)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsTo indicates an expected call of CountRefsTo.
func (mr *MockRWGraphMockRecorder) CountRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsTo", reflect.TypeOf((*MockRWGraph)(nil).CountRefsTo), to)
}

// CountRefsToPrefix mocks base method.
func (m *MockRWGraph) CountRefsToPrefix(to, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsToPrefix", to, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsToPrefix indicates an expected call of CountRefsToPrefix.
func (mr *MockRWGraphMockRecorder) CountRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsToPrefix", reflect.TypeOf((*MockRWGraph)(nil).CountRefsToPrefix), to, prefix)
}

// DeleteRefsFrom mocks base method.
func (m *MockRWGraph) DeleteRefsFrom(from []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRefsFrom", from)
}

// DeleteRefsFrom indicates an expected call of DeleteRefsFrom.
func (mr *MockRWGraphMockRecorder) DeleteRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).DeleteRefsFrom), from)
}

// DeleteRefsTo mocks base method.
func (m *MockRWGraph) DeleteRefsTo(from []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRefsTo", from)
}

// DeleteRefsTo indicates an expected call of DeleteRefsTo.
func (mr *MockRWGraphMockRecorder) DeleteRefsTo(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefsTo", reflect.TypeOf((*MockRWGraph)(nil).DeleteRefsTo), from)
}

// GetRefsFrom mocks base method.
func (m *MockRWGraph) GetRefsFrom(from []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFrom", from)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFrom indicates an expected call of GetRefsFrom.
func (mr *MockRWGraphMockRecorder) GetRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).GetRefsFrom), from)
}

// GetRefsFromPrefix mocks base method.
func (m *MockRWGraph) GetRefsFromPrefix(from, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFromPrefix indicates an expected call of GetRefsFromPrefix.
func (mr *MockRWGraphMockRecorder) GetRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFromPrefix", reflect.TypeOf((*MockRWGraph)(nil).GetRefsFromPrefix), from, prefix)
}

// GetRefsTo mocks base method.
func (m *MockRWGraph) GetRefsTo(to []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsTo", to)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsTo indicates an expected call of GetRefsTo.
func (mr *MockRWGraphMockRecorder) GetRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsTo", reflect.TypeOf((*MockRWGraph)(nil).GetRefsTo), to)
}

// GetRefsToPrefix mocks base method.
func (m *MockRWGraph) GetRefsToPrefix(to, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsToPrefix", to, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsToPrefix indicates an expected call of GetRefsToPrefix.
func (mr *MockRWGraphMockRecorder) GetRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsToPrefix", reflect.TypeOf((*MockRWGraph)(nil).GetRefsToPrefix), to, prefix)
}

// HasRefsFrom mocks base method.
func (m *MockRWGraph) HasRefsFrom(from []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsFrom", from)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsFrom indicates an expected call of HasRefsFrom.
func (mr *MockRWGraphMockRecorder) HasRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsFrom", reflect.TypeOf((*MockRWGraph)(nil).HasRefsFrom), from)
}

// HasRefsTo mocks base method.
func (m *MockRWGraph) HasRefsTo(to []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsTo", to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsTo indicates an expected call of HasRefsTo.
func (mr *MockRWGraphMockRecorder) HasRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsTo", reflect.TypeOf((*MockRWGraph)(nil).HasRefsTo), to)
}

// ReferencedFromPrefix mocks base method.
func (m *MockRWGraph) ReferencedFromPrefix(to, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencedFromPrefix", to, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencedFromPrefix indicates an expected call of ReferencedFromPrefix.
func (mr *MockRWGraphMockRecorder) ReferencedFromPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencedFromPrefix", reflect.TypeOf((*MockRWGraph)(nil).ReferencedFromPrefix), to, prefix)
}

// ReferencesPrefix mocks base method.
func (m *MockRWGraph) ReferencesPrefix(from, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencesPrefix", from, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencesPrefix indicates an expected call of ReferencesPrefix.
func (mr *MockRWGraphMockRecorder) ReferencesPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencesPrefix", reflect.TypeOf((*MockRWGraph)(nil).ReferencesPrefix), from, prefix)
}

// SetRefs mocks base method.
func (m *MockRWGraph) SetRefs(from []byte, to [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefs", from, to)
}

// SetRefs indicates an expected call of SetRefs.
func (mr *MockRWGraphMockRecorder) SetRefs(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefs", reflect.TypeOf((*MockRWGraph)(nil).SetRefs), from, to)
}

// deleteFrom mocks base method.
func (m *MockRWGraph) deleteFrom(from []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteFrom", from)
}

// deleteFrom indicates an expected call of deleteFrom.
func (mr *MockRWGraphMockRecorder) deleteFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFrom", reflect.TypeOf((*MockRWGraph)(nil).deleteFrom), from)
}

// deleteTo mocks base method.
func (m *MockRWGraph) deleteTo(to []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteTo", to)
}

// deleteTo indicates an expected call of deleteTo.
func (mr *MockRWGraphMockRecorder) deleteTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteTo", reflect.TypeOf((*MockRWGraph)(nil).deleteTo), to)
}

// setFrom mocks base method.
func (m *MockRWGraph) setFrom(from []byte, to [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setFrom", from, to)
}

// setFrom indicates an expected call of setFrom.
func (mr *MockRWGraphMockRecorder) setFrom(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFrom", reflect.TypeOf((*MockRWGraph)(nil).setFrom), from, to)
}

// setTo mocks base method.
func (m *MockRWGraph) setTo(to []byte, from [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setTo", to, from)
}

// setTo indicates an expected call of setTo.
func (mr *MockRWGraphMockRecorder) setTo(to, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setTo", reflect.TypeOf((*MockRWGraph)(nil).setTo), to, from)
}

// MockapplyableGraph is a mock of applyableGraph interface.
type MockapplyableGraph struct {
	ctrl     *gomock.Controller
	recorder *MockapplyableGraphMockRecorder
}

// MockapplyableGraphMockRecorder is the mock recorder for MockapplyableGraph.
type MockapplyableGraphMockRecorder struct {
	mock *MockapplyableGraph
}

// NewMockapplyableGraph creates a new mock instance.
func NewMockapplyableGraph(ctrl *gomock.Controller) *MockapplyableGraph {
	mock := &MockapplyableGraph{ctrl: ctrl}
	mock.recorder = &MockapplyableGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapplyableGraph) EXPECT() *MockapplyableGraphMockRecorder {
	return m.recorder
}

// deleteFrom mocks base method.
func (m *MockapplyableGraph) deleteFrom(from []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteFrom", from)
}

// deleteFrom indicates an expected call of deleteFrom.
func (mr *MockapplyableGraphMockRecorder) deleteFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFrom", reflect.TypeOf((*MockapplyableGraph)(nil).deleteFrom), from)
}

// deleteTo mocks base method.
func (m *MockapplyableGraph) deleteTo(to []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteTo", to)
}

// deleteTo indicates an expected call of deleteTo.
func (mr *MockapplyableGraphMockRecorder) deleteTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteTo", reflect.TypeOf((*MockapplyableGraph)(nil).deleteTo), to)
}

// setFrom mocks base method.
func (m *MockapplyableGraph) setFrom(from []byte, to [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setFrom", from, to)
}

// setFrom indicates an expected call of setFrom.
func (mr *MockapplyableGraphMockRecorder) setFrom(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFrom", reflect.TypeOf((*MockapplyableGraph)(nil).setFrom), from, to)
}

// setTo mocks base method.
func (m *MockapplyableGraph) setTo(to []byte, from [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setTo", to, from)
}

// setTo indicates an expected call of setTo.
func (mr *MockapplyableGraphMockRecorder) setTo(to, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setTo", reflect.TypeOf((*MockapplyableGraph)(nil).setTo), to, from)
}

// MockDiscardableRGraph is a mock of DiscardableRGraph interface.
type MockDiscardableRGraph struct {
	ctrl     *gomock.Controller
	recorder *MockDiscardableRGraphMockRecorder
}

// MockDiscardableRGraphMockRecorder is the mock recorder for MockDiscardableRGraph.
type MockDiscardableRGraphMockRecorder struct {
	mock *MockDiscardableRGraph
}

// NewMockDiscardableRGraph creates a new mock instance.
func NewMockDiscardableRGraph(ctrl *gomock.Controller) *MockDiscardableRGraph {
	mock := &MockDiscardableRGraph{ctrl: ctrl}
	mock.recorder = &MockDiscardableRGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscardableRGraph) EXPECT() *MockDiscardableRGraphMockRecorder {
	return m.recorder
}

// CountRefsFrom mocks base method.
func (m *MockDiscardableRGraph) CountRefsFrom(from []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFrom", from)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFrom indicates an expected call of CountRefsFrom.
func (mr *MockDiscardableRGraphMockRecorder) CountRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFrom", reflect.TypeOf((*MockDiscardableRGraph)(nil).CountRefsFrom), from)
}

// CountRefsFromPrefix mocks base method.
func (m *MockDiscardableRGraph) CountRefsFromPrefix(from, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsFromPrefix indicates an expected call of CountRefsFromPrefix.
func (mr *MockDiscardableRGraphMockRecorder) CountRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsFromPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).CountRefsFromPrefix), from, prefix)
}

// CountRefsTo mocks base method.
func (m *MockDiscardableRGraph) CountRefsTo(to []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsTo", to)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsTo indicates an expected call of CountRefsTo.
func (mr *MockDiscardableRGraphMockRecorder) CountRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsTo", reflect.TypeOf((*MockDiscardableRGraph)(nil).CountRefsTo), to)
}

// CountRefsToPrefix mocks base method.
func (m *MockDiscardableRGraph) CountRefsToPrefix(to, prefix []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRefsToPrefix", to, prefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountRefsToPrefix indicates an expected call of CountRefsToPrefix.
func (mr *MockDiscardableRGraphMockRecorder) CountRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRefsToPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).CountRefsToPrefix), to, prefix)
}

// Discard mocks base method.
func (m *MockDiscardableRGraph) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockDiscardableRGraphMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockDiscardableRGraph)(nil).Discard))
}

// GetRefsFrom mocks base method.
func (m *MockDiscardableRGraph) GetRefsFrom(from []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFrom", from)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFrom indicates an expected call of GetRefsFrom.
func (mr *MockDiscardableRGraphMockRecorder) GetRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFrom", reflect.TypeOf((*MockDiscardableRGraph)(nil).GetRefsFrom), from)
}

// GetRefsFromPrefix mocks base method.
func (m *MockDiscardableRGraph) GetRefsFromPrefix(from, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsFromPrefix", from, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsFromPrefix indicates an expected call of GetRefsFromPrefix.
func (mr *MockDiscardableRGraphMockRecorder) GetRefsFromPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsFromPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).GetRefsFromPrefix), from, prefix)
}

// GetRefsTo mocks base method.
func (m *MockDiscardableRGraph) GetRefsTo(to []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsTo", to)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsTo indicates an expected call of GetRefsTo.
func (mr *MockDiscardableRGraphMockRecorder) GetRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsTo", reflect.TypeOf((*MockDiscardableRGraph)(nil).GetRefsTo), to)
}

// GetRefsToPrefix mocks base method.
func (m *MockDiscardableRGraph) GetRefsToPrefix(to, prefix []byte) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefsToPrefix", to, prefix)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetRefsToPrefix indicates an expected call of GetRefsToPrefix.
func (mr *MockDiscardableRGraphMockRecorder) GetRefsToPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefsToPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).GetRefsToPrefix), to, prefix)
}

// HasRefsFrom mocks base method.
func (m *MockDiscardableRGraph) HasRefsFrom(from []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsFrom", from)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsFrom indicates an expected call of HasRefsFrom.
func (mr *MockDiscardableRGraphMockRecorder) HasRefsFrom(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsFrom", reflect.TypeOf((*MockDiscardableRGraph)(nil).HasRefsFrom), from)
}

// HasRefsTo mocks base method.
func (m *MockDiscardableRGraph) HasRefsTo(to []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRefsTo", to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRefsTo indicates an expected call of HasRefsTo.
func (mr *MockDiscardableRGraphMockRecorder) HasRefsTo(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRefsTo", reflect.TypeOf((*MockDiscardableRGraph)(nil).HasRefsTo), to)
}

// ReferencedFromPrefix mocks base method.
func (m *MockDiscardableRGraph) ReferencedFromPrefix(to, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencedFromPrefix", to, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencedFromPrefix indicates an expected call of ReferencedFromPrefix.
func (mr *MockDiscardableRGraphMockRecorder) ReferencedFromPrefix(to, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencedFromPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).ReferencedFromPrefix), to, prefix)
}

// ReferencesPrefix mocks base method.
func (m *MockDiscardableRGraph) ReferencesPrefix(from, prefix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencesPrefix", from, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReferencesPrefix indicates an expected call of ReferencesPrefix.
func (mr *MockDiscardableRGraphMockRecorder) ReferencesPrefix(from, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencesPrefix", reflect.TypeOf((*MockDiscardableRGraph)(nil).ReferencesPrefix), from, prefix)
}
