plugins {
    id "com.google.protobuf" version "0.8.19"
    id "groovy"
    id "codenarc"
}

sourceCompatibility = 1.11
version = '1.0'

codenarc.configFile = file("./codenarc-rules.groovy")
codenarc.reportFormat = 'text'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

def grpcVersion = '1.57.2'
// If the proto versions are changed, be sure it is also changed in make/protogen.mk.
def protocVersion = '3.25.3'
def protobufVersion = '3.25.3'
def nettyTcNativeVersion = '2.0.61.Final'
def fabric8Version = '6.11.0'
def jacksonVersion = '2.14.2'

protobuf {
    // There is no protoc-grpc-gen for Apple Silicon (M1), so if you are running on it, force the osx-x86_64 version
    // See https://github.com/grpc/grpc-java/issues/7690
    def protocGenArch = ''
    if (System.getProperty("os.arch") == "aarch64" && System.getProperty("os.name").toLowerCase().contains("mac")) {
        protocGenArch = ':osx-x86_64'
    }

    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}${protocGenArch}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }

        // Add each output source directory to the sourceSet based on its basename (e.g., `java`).
        all().each { task ->
            task.outputSourceDirectorySet.srcDirs.each { srcDir ->
                sourceSets[task.sourceSet.name][srcDir.name].srcDirs += srcDir
            }
        }
    }
}

// Assign all Java source dirs to Groovy, as the groovy compiler should take care of them.
sourceSets.each { ss ->
    ss.groovy.srcDirs += ss.java.srcDirs
    ss.java.srcDirs = []
}

dependencies {
    // grpc and protobuf
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "com.google.api.grpc:proto-google-common-protos:2.37.1"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-auth:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    implementation platform('org.apache.groovy:groovy-bom:4.0.19')
    implementation 'org.apache.groovy:groovy'
    implementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
    implementation "org.spockframework:spock-core"
    implementation "org.spockframework:spock-junit4"
    implementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.3'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: "${protobufVersion}"
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"

    // Use the Kubernetes API
    implementation "io.fabric8:kubernetes-client:${fabric8Version}"
    implementation "io.fabric8:openshift-client:${fabric8Version}"

    implementation 'io.kubernetes:client-java:20.0.0-legacy'

    implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.3.6'

    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    implementation 'com.google.api.grpc:googleapis-common-protos:0.0.3'

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.9'

    implementation group: 'commons-cli', name: 'commons-cli', version: '1.6.0'

    implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.4.0'

    //JavaMail for mail verifications
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'

    //Slack API
    implementation group: 'com.slack.api', name: 'slack-api-client', version: '1.38.3'

    // JAX-B dependencies for JDK 9+
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.5"

    // Required to make codenarc work with JDK 14.
    // See https://github.com/gradle/gradle/issues/12646.
    constraints {
        "codenarc"("org.codehaus.groovy:groovy:2.5.10")
        "codenarc"("org.codehaus.groovy:groovy-xml:2.5.23")
    }

    implementation 'org.javers:javers-core:7.4.1'
    implementation group: 'org.picocontainer', name: 'picocontainer', version: '2.15'

    implementation 'commons-codec:commons-codec:1.16.1'
}

// Apply some base attributes to all the test tasks.
tasks.withType(Test) {
    testLogging {
        showStandardStreams true
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }
    timeout = Duration.ofMinutes(630)

    // This ensures that repeated invocations of tests actually run the tests.
    // Otherwise, if the tests pass, Gradle "caches" the result and doesn't actually run the tests,
    // which is not the behaviour we expect of E2Es.
    // https://stackoverflow.com/questions/42175235/force-gradle-to-run-task-even-if-it-is-up-to-date/42185919
    outputs.upToDateWhen { false }

    reports {
        junitXml {
            outputPerTestCase = true
            mergeReruns = true
        }
    }
}

task testBegin(type: Test) {
    useJUnitPlatform {
        includeTags "Begin"
    }
}

task testParallel(type: Test) {
  systemProperty 'spock.configuration', rootProject.file('src/test/resources/ParallelSpockConfig.groovy')
  useJUnitPlatform {
      includeTags "Parallel"
  }
}

task testRest(type: Test) {
    useJUnitPlatform {
        excludeTags "Begin", "Parallel", "Upgrade", "SensorBounce", "SensorBounceNext"
    }
}

task testParallelBAT(type: Test) {
  systemProperty 'spock.configuration', rootProject.file('src/test/resources/ParallelSpockConfig.groovy')
  useJUnitPlatform {
      includeTags "Parallel & BAT"
  }
}

task testBAT(type: Test) {
    useJUnitPlatform {
        includeTags "BAT"
        excludeTags "Parallel"
    }
}

task testSMOKE(type: Test) {
    useJUnitPlatform {
        includeTags "SMOKE"
    }
}

task testCOMPATIBILITY(type: Test) {
    useJUnitPlatform {
        includeTags "COMPATIBILITY"
        excludeTags "SensorBounce"
    }
}

task testCOMPATIBILITYSensorBounce(type: Test) {
    useJUnitPlatform {
        includeTags "COMPATIBILITY & SensorBounce"
    }
}

task testRUNTIME(type: Test) {
    useJUnitPlatform {
        includeTags "RUNTIME"
    }
}

task testPolicyEnforcement(type: Test) {
    useJUnitPlatform {
        includeTags "PolicyEnforcement"
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform {
        includeTags "Integration"
    }
}

task testNetworkPolicySimulation(type: Test) {
    useJUnitPlatform {
        includeTags "NetworkPolicySimulation"
    }
}

task testUpgrade(type: Test) {
    useJUnitPlatform {
        includeTags "Upgrade"
    }
}
task testGraphQL(type: Test) {
    useJUnitPlatform {
        includeTags "GraphQL"
    }
}
task testSensorBounce(type: Test) {
    useJUnitPlatform {
        includeTags "SensorBounce"
    }
}
task testSensorBounceNext(type: Test) {
    useJUnitPlatform {
        includeTags "SensorBounceNext"
    }
}

task runSampleScript(dependsOn: 'classes', type: JavaExec) {
    if (project.hasProperty("runScript")) {
        main = "sampleScripts." + project.getProperty("runScript")
        classpath = sourceSets.main.runtimeClasspath
    }
}
task testPZ(type: Test) {
    useJUnitPlatform {
        includeTags "PZ"
    }
}
task testPZDebug(type: Test) {
    useJUnitPlatform {
        includeTags "PZDebug"
    }
}
task testDeploymentCheck(type: Test) {
    useJUnitPlatform {
        includeTags "DeploymentCheck"
    }
}
test {
    useJUnitPlatform()
}
