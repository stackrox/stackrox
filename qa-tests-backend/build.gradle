plugins {
    id "com.google.protobuf" version "0.8.18"
    id "groovy"
    id "codenarc"
}

sourceCompatibility = 1.8
version = '1.0'

codenarc.configFile = file("./codenarc-rules.groovy")
codenarc.reportFormat = 'text'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

def grpcVersion = '1.21.0'
// If the proto versions are changed, be sure it is also changed in make/protogen.mk.
def protocVersion = '3.19.4'
def protobufVersion = '3.19.4'
def nettyTcNativeVersion = '2.0.45.Final'
def fabric8Version = '5.12.1'

protobuf {
    // There is no protoc-grpc-gen for Apple Silicon (M1), so if you are running on it, force the osx-x86_64 version
    // See https://github.com/grpc/grpc-java/issues/7690
    def protocGenArch = ''
    if (System.getProperty("os.arch") == "aarch64" && System.getProperty("os.name").toLowerCase().contains("mac")) {
        protocGenArch = ':osx-x86_64'
    }

    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}${protocGenArch}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }

        // Add each output source directory to the sourceSet based on its basename (e.g., `java`).
        all().each { task ->
            task.outputSourceDirectorySet.srcDirs.each { srcDir ->
                sourceSets[task.sourceSet.name][srcDir.name].srcDirs += srcDir
            }
        }
    }
}

// Assign all Java source dirs to Groovy, as the groovy compiler should take care of them.
sourceSets.each { ss ->
    ss.groovy.srcDirs += ss.java.srcDirs
    ss.java.srcDirs = []
}

dependencies {
    // grpc and protobuf
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation "com.google.api.grpc:proto-google-common-protos:2.3.2"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-auth:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.4.18'
    testImplementation group: 'junit', name: 'junit', version: '4.11'
    testImplementation group: 'org.yaml', name: 'snakeyaml', version: '1.29'
    implementation group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.6'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.6.1'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.5.3'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.1'
    testImplementation( 'com.athaydes:spock-reports:1.4.0' ) {
        transitive = false
    }
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: "${protobufVersion}"
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"

    // Use the Kubernetes API
    implementation "io.fabric8:kubernetes-client:${fabric8Version}"
    implementation "io.fabric8:openshift-client:${fabric8Version}"

    implementation 'io.kubernetes:client-java:2.0.0-beta1'

    implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.1.0-rc-3'

    implementation group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.4'

    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.7'

    implementation 'com.google.api.grpc:googleapis-common-protos:0.0.3'

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.5.1'

    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'

    //JavaMail for mail verifications
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'

    //Slack API
    implementation group: 'com.slack.api', name: 'slack-api-client', version: '1.20.2'

    // JAX-B dependencies for JDK 9+
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"

    // Required to make codenarc work with JDK 14.
    // See https://github.com/gradle/gradle/issues/12646.
    constraints {
        "codenarc"("org.codehaus.groovy:groovy:2.5.10")
        "codenarc"("org.codehaus.groovy:groovy-xml:2.5.10")
    }

    implementation 'org.javers:javers-core:6.5.2'
    implementation group: 'org.picocontainer', name: 'picocontainer', version: '2.15'

    implementation 'commons-codec:commons-codec:1.15'
}



tasks.withType(Test) {
    def testGroups = new TestGroups(System.getProperty("groups"))

    useJUnit {
        includeCategories testGroups.getIncludedGroups()
        excludeCategories testGroups.getExcludedGroups()
    }

    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

test {
    testLogging.showStandardStreams = true

    // This ensures that repeated invocations of tests actually run the tests.
    // Otherwise, if the tests pass, Gradle "caches" the result and doesn't actually run the tests,
    // which is not the behaviour we expect of E2Es.
    // https://stackoverflow.com/questions/42175235/force-gradle-to-run-task-even-if-it-is-up-to-date/42185919
    outputs.upToDateWhen { false }
}

task runSampleScript(dependsOn: 'classes', type: JavaExec) {
    if (project.hasProperty("runScript")) {
        main = "sampleScripts." + project.getProperty("runScript")
        classpath = sourceSets.main.runtimeClasspath
    }
}
