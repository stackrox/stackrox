# Multi-stage Dockerfile for ML Risk Service with UV
FROM python:3.11-slim AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    UV_CACHE_DIR=/tmp/uv-cache

# Install system dependencies needed for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libc6-dev \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install UV
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    /root/.local/bin/uv --version
ENV PATH="/root/.local/bin:$PATH"

# Create app directory
WORKDIR /app

# Copy Python project files
COPY pyproject.toml uv.lock README.md ./

# Copy source code needed for project installation
COPY src/ ./src/
COPY training/ ./training/
COPY proto/ ./proto/

# Install dependencies including ML dependencies and the project itself with UV
RUN uv sync --frozen --no-dev --extra ml

# Production stage
FROM python:3.11-slim AS production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src \
    UV_CACHE_DIR=/tmp/uv-cache

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r mlrisk \
    && useradd -r -g mlrisk -s /bin/false mlrisk

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv

# Add virtual environment to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Create app directory structure
WORKDIR /app
RUN mkdir -p /app/models /app/training /app/reports /app/logs \
    && chown -R mlrisk:mlrisk /app

# Copy application code from builder (where it was installed as a package)
COPY --from=builder /app/src/ /app/src/
COPY --from=builder /app/training/ /app/training/
COPY --from=builder /app/proto/ /app/proto/

# Copy configuration files
# The expanded config is generated by `make generate-config` before Docker build
COPY src/config/feature_config.expanded.yaml /app/config/feature_config.yaml

# Copy scripts
COPY scripts/entrypoint.sh /app/entrypoint.sh
COPY scripts/healthcheck.sh /app/healthcheck.sh

# Set script permissions
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh && \
    chown mlrisk:mlrisk /app/entrypoint.sh /app/healthcheck.sh

# Switch to non-root user
USER mlrisk

# Expose ports
EXPOSE 8080 8081 8090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Default entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Labels
LABEL maintainer="StackRox ML Team" \
      description="ML Risk Ranking Service for StackRox" \
      version="1.0.0"