// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type Testg2grandchild1StoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
	store       Store
	pool        *pgxpool.Pool
}

func TestTestg2grandchild1Store(t *testing.T) {
	suite.Run(t, new(Testg2grandchild1StoreSuite))
}

func (s *Testg2grandchild1StoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}

	ctx := sac.WithAllAccess(context.Background())

	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(ctx, config)
	s.Require().NoError(err)

	Destroy(ctx, pool)

	s.pool = pool
	s.store = New(ctx, pool)
}

func (s *Testg2grandchild1StoreSuite) TearDownTest() {
	s.pool.Close()
	s.envIsolator.RestoreAll()
}

func (s *Testg2grandchild1StoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	testG2GrandChild1 := &storage.TestG2GrandChild1{}
	s.NoError(testutils.FullInit(testG2GrandChild1, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTestG2GrandChild1, exists, err := store.Get(ctx, testG2GrandChild1.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestG2GrandChild1)

	s.NoError(store.Upsert(ctx, testG2GrandChild1))
	foundTestG2GrandChild1, exists, err = store.Get(ctx, testG2GrandChild1.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(testG2GrandChild1, foundTestG2GrandChild1)

	testG2GrandChild1Count, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, testG2GrandChild1Count)

	testG2GrandChild1Exists, err := store.Exists(ctx, testG2GrandChild1.GetId())
	s.NoError(err)
	s.True(testG2GrandChild1Exists)
	s.NoError(store.Upsert(ctx, testG2GrandChild1))

	foundTestG2GrandChild1, exists, err = store.Get(ctx, testG2GrandChild1.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(testG2GrandChild1, foundTestG2GrandChild1)

	s.NoError(store.Delete(ctx, testG2GrandChild1.GetId()))
	foundTestG2GrandChild1, exists, err = store.Get(ctx, testG2GrandChild1.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestG2GrandChild1)

	var testG2GrandChild1s []*storage.TestG2GrandChild1
	for i := 0; i < 200; i++ {
		testG2GrandChild1 := &storage.TestG2GrandChild1{}
		s.NoError(testutils.FullInit(testG2GrandChild1, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		testG2GrandChild1s = append(testG2GrandChild1s, testG2GrandChild1)
	}

	s.NoError(store.UpsertMany(ctx, testG2GrandChild1s))

	testG2GrandChild1Count, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, testG2GrandChild1Count)
}
