// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type TestGrandparentsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestTestGrandparentsStore(t *testing.T) {
	suite.Run(t, new(TestGrandparentsStoreSuite))
}

func (s *TestGrandparentsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *TestGrandparentsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE test_grandparents CASCADE")
	s.T().Log("test_grandparents", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *TestGrandparentsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *TestGrandparentsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	testGrandparent := &storage.TestGrandparent{}
	s.NoError(testutils.FullInit(testGrandparent, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTestGrandparent, exists, err := store.Get(ctx, testGrandparent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestGrandparent)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, testGrandparent))
	foundTestGrandparent, exists, err = store.Get(ctx, testGrandparent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(testGrandparent, foundTestGrandparent)

	testGrandparentCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, testGrandparentCount)
	testGrandparentCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(testGrandparentCount)

	testGrandparentExists, err := store.Exists(ctx, testGrandparent.GetId())
	s.NoError(err)
	s.True(testGrandparentExists)
	s.NoError(store.Upsert(ctx, testGrandparent))
	s.ErrorIs(store.Upsert(withNoAccessCtx, testGrandparent), sac.ErrResourceAccessDenied)

	foundTestGrandparent, exists, err = store.Get(ctx, testGrandparent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(testGrandparent, foundTestGrandparent)

	s.NoError(store.Delete(ctx, testGrandparent.GetId()))
	foundTestGrandparent, exists, err = store.Get(ctx, testGrandparent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestGrandparent)
	s.NoError(store.Delete(withNoAccessCtx, testGrandparent.GetId()))

	var testGrandparents []*storage.TestGrandparent
	var testGrandparentIDs []string
	for i := 0; i < 200; i++ {
		testGrandparent := &storage.TestGrandparent{}
		s.NoError(testutils.FullInit(testGrandparent, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		testGrandparents = append(testGrandparents, testGrandparent)
		testGrandparentIDs = append(testGrandparentIDs, testGrandparent.GetId())
	}

	s.NoError(store.UpsertMany(ctx, testGrandparents))

	testGrandparentCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, testGrandparentCount)

	s.NoError(store.DeleteMany(ctx, testGrandparentIDs))

	testGrandparentCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, testGrandparentCount)
}
