// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/env"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type TestMultiKeyStructsStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
	store       Store
	testDB      *pgtest.TestPostgres
}

func TestTestMultiKeyStructsStore(t *testing.T) {
	suite.Run(t, new(TestMultiKeyStructsStoreSuite))
}

func (s *TestMultiKeyStructsStoreSuite) SetupSuite() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(env.PostgresDatastoreEnabled.EnvVar(), "true")

	if !env.PostgresDatastoreEnabled.BooleanSetting() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.Pool)
}

func (s *TestMultiKeyStructsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE test_multi_key_structs CASCADE")
	s.T().Log("test_multi_key_structs", tag)
	s.NoError(err)
}

func (s *TestMultiKeyStructsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
	s.envIsolator.RestoreAll()
}

func (s *TestMultiKeyStructsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	testMultiKeyStruct := &storage.TestMultiKeyStruct{}
	s.NoError(testutils.FullInit(testMultiKeyStruct, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTestMultiKeyStruct, exists, err := store.Get(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestMultiKeyStruct)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, testMultiKeyStruct))
	foundTestMultiKeyStruct, exists, err = store.Get(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	s.NoError(err)
	s.True(exists)
	s.Equal(testMultiKeyStruct, foundTestMultiKeyStruct)

	testMultiKeyStructCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, testMultiKeyStructCount)
	testMultiKeyStructCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(testMultiKeyStructCount)

	testMultiKeyStructExists, err := store.Exists(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	s.NoError(err)
	s.True(testMultiKeyStructExists)
	s.NoError(store.Upsert(ctx, testMultiKeyStruct))
	s.ErrorIs(store.Upsert(withNoAccessCtx, testMultiKeyStruct), sac.ErrResourceAccessDenied)

	foundTestMultiKeyStruct, exists, err = store.Get(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	s.NoError(err)
	s.True(exists)
	s.Equal(testMultiKeyStruct, foundTestMultiKeyStruct)

	s.NoError(store.Delete(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2()))
	foundTestMultiKeyStruct, exists, err = store.Get(ctx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestMultiKeyStruct)
	s.NoError(store.Delete(withNoAccessCtx, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2()))

	var testMultiKeyStructs []*storage.TestMultiKeyStruct
	var testMultiKeyStructIDs []string
	for i := 0; i < 200; i++ {
		testMultiKeyStruct := &storage.TestMultiKeyStruct{}
		s.NoError(testutils.FullInit(testMultiKeyStruct, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		testMultiKeyStructs = append(testMultiKeyStructs, testMultiKeyStruct)
		testMultiKeyStructIDs = append(testMultiKeyStructIDs, testMultiKeyStruct.GetKey1(), testMultiKeyStruct.GetKey2())
	}

	s.NoError(store.UpsertMany(ctx, testMultiKeyStructs))

	testMultiKeyStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, testMultiKeyStructCount)

	s.NoError(store.DeleteMany(ctx, testMultiKeyStructIDs))

	testMultiKeyStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, testMultiKeyStructCount)
}
