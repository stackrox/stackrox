// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type TestStructsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestTestStructsStore(t *testing.T) {
	suite.Run(t, new(TestStructsStoreSuite))
}

func (s *TestStructsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *TestStructsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE test_structs CASCADE")
	s.T().Log("test_structs", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *TestStructsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *TestStructsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	testStruct := &storage.TestStruct{}
	s.NoError(testutils.FullInit(testStruct, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTestStruct, exists, err := store.Get(ctx, testStruct.GetKey1())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestStruct)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, testStruct))
	foundTestStruct, exists, err = store.Get(ctx, testStruct.GetKey1())
	s.NoError(err)
	s.True(exists)
	s.Equal(testStruct, foundTestStruct)

	testStructCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, testStructCount)
	testStructCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(testStructCount)

	testStructExists, err := store.Exists(ctx, testStruct.GetKey1())
	s.NoError(err)
	s.True(testStructExists)
	s.NoError(store.Upsert(ctx, testStruct))
	s.ErrorIs(store.Upsert(withNoAccessCtx, testStruct), sac.ErrResourceAccessDenied)

	foundTestStruct, exists, err = store.Get(ctx, testStruct.GetKey1())
	s.NoError(err)
	s.True(exists)
	s.Equal(testStruct, foundTestStruct)

	s.NoError(store.Delete(ctx, testStruct.GetKey1()))
	foundTestStruct, exists, err = store.Get(ctx, testStruct.GetKey1())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTestStruct)
	s.NoError(store.Delete(withNoAccessCtx, testStruct.GetKey1()))

	var testStructs []*storage.TestStruct
	var testStructIDs []string
	for i := 0; i < 200; i++ {
		testStruct := &storage.TestStruct{}
		s.NoError(testutils.FullInit(testStruct, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		testStructs = append(testStructs, testStruct)
		testStructIDs = append(testStructIDs, testStruct.GetKey1())
	}

	s.NoError(store.UpsertMany(ctx, testStructs))

	testStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, testStructCount)

	s.NoError(store.DeleteMany(ctx, testStructIDs))

	testStructCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, testStructCount)
}
