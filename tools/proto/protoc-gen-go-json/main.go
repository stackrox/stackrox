package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"path"
	"strings"
)

// Standard library dependencies.
const (
	unsafePackage  = protogen.GoImportPath("unsafe")
	fmtPackage     = protogen.GoImportPath("fmt")
	stringsPackage = protogen.GoImportPath("strings")
)

var (
	fprintf = fmtPackage.Ident("Fprintf")
	trim    = stringsPackage.Ident("TrimSuffix")
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}

		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_json.pb.go"

	importPath := protogen.GoImportPath(path.Join(
		string(file.GoImportPath),
		string(file.GoPackageName),
	))

	g := gen.NewGeneratedFile(filename, importPath)
	g.P("// Code generated by protoc-gen-go-json. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.Import("bytes")
	g.Import("fmt")
	g.Import("time")

	for _, m := range file.Messages {
		generateMessage(g, m)
	}
}

func generateMessage(g *protogen.GeneratedFile, msg *protogen.Message) {
	if msg.Desc.IsMapEntry() {
		return
	}

	s := msg.GoIdent.String()
	name := s[strings.LastIndex(s, ".")+1:]

	g.P()
	g.P("func (m *", name, ") MarshalJSON() ([]byte, error) { ")
	g.P(`if m == nil { return []byte("null"), nil }`)
	g.P("var buf ", stringsPackage.Ident("Builder"))
	g.P(`buf.Grow(m.SizeVT())`)
	g.P(`if err := m.marshalJSON(&buf); err != nil { return nil, err }`)
	g.P(`str := buf.String()`)
	g.P(`return `, unsafePackage.Ident("Slice"), "(", unsafePackage.Ident("StringData"), `(str), len(str)), nil`)
	g.P("}")
	g.P("func (m *", name, ") marshalJSON(buf *", stringsPackage.Ident("Builder"), ") (err error) { ")
	g.P(`if m == nil { buf.WriteString("null"); return nil }`)
	hasMapsOrList := false
	for _, f := range msg.Fields {
		hasMapsOrList = hasMapsOrList || f.Desc.IsMap() || f.Desc.IsList()
	}
	g.P("trailingComma := false")
	g.P("if trailingComma {}")
	w(g, "{")
	for _, f := range msg.Fields {
		g.P(`if x := m.Get`, f.GoName, "(); x != ", zero(f.Desc), " { ")
		g.P("if trailingComma { buf.WriteByte(',') }; trailingComma = true;")
		ident(g, f.Desc.JSONName())
		w(g, ":")
		if f.Desc.IsList() {
			g.P("trailingComma = false")
			w(g, "[")
			g.P(`for _, v := range x {`)
			g.P("if trailingComma { buf.WriteByte(',') }; trailingComma = true;")
			switch f.Desc.Kind() {
			case protoreflect.MessageKind:
				if f.Desc.Message().FullName() == "google.protobuf.Timestamp" {
					g.P(`if v == nil { buf.WriteString("null") } else {`)
					t(g, "t")
					g.P("}")
				} else {
					g.P("if err := v.marshalJSON(buf); err != nil { return err }")
				}
			case protoreflect.StringKind:
				g.P(fprintf, `(buf, "%q", v)`)
			case protoreflect.BoolKind:
				g.P(`if v { buf.WriteString("true") } else { buf.WriteString("false") }`)
			case protoreflect.EnumKind:
				q(g, "v.String()")
			case protoreflect.Int32Kind, protoreflect.Sint32Kind,
				protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
				g.P(fprintf, `(buf, "%d", v)`)
			case protoreflect.Int64Kind, protoreflect.Sint64Kind,
				protoreflect.Uint64Kind, protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind:
				g.P(fprintf, `(buf, "\"%d\"", v)`)
			case protoreflect.FloatKind, protoreflect.DoubleKind:
				g.P(fprintf, `(buf, "%f", v)`)
			case protoreflect.BytesKind:
				w(g, "null")
			default:
				panic(f.Location.SourceFile + "/" + f.GoName)
			}
			g.P("}")
			w(g, "]")
			g.P("}") // x
			continue
		}
		if f.Desc.IsMap() {
			g.P("trailingComma = false")
			w(g, "{")
			g.P(`for k, v := range x {`)
			g.P("if trailingComma { buf.WriteByte(',') }; trailingComma = true;")
			switch f.Desc.MapKey().Kind() {
			case protoreflect.StringKind:
				g.P(fprintf, `(buf, "%q", k)`)
			case protoreflect.BoolKind:
				g.P(`if k { buf.WriteString("true") } else { buf.WriteString("false") }`)
			case protoreflect.EnumKind:
				q(g, "k.String()")
			case protoreflect.Int32Kind, protoreflect.Sint32Kind,
				protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
				g.P(fprintf, `(buf, "%d", k`)
			case protoreflect.Int64Kind, protoreflect.Sint64Kind,
				protoreflect.Uint64Kind, protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind:
				g.P(fprintf, `(buf, "\"%d\"", k)`)
			case protoreflect.FloatKind, protoreflect.DoubleKind:
				g.P(fprintf, `(buf, "%f", k)`)
			default:
				panic(f)
			}
			w(g, ":")
			switch f.Desc.MapValue().Kind() {
			case protoreflect.MessageKind:
				g.P("if err := v.marshalJSON(buf); err != nil { return err }")
			case protoreflect.StringKind:
				g.P(fprintf, `(buf, "%q", v)`)
			case protoreflect.BoolKind:
				g.P(`if v { buf.WriteString("true") } else { buf.WriteString("false") }`)
			case protoreflect.EnumKind:
				q(g, "v.String()")
			case protoreflect.Int32Kind, protoreflect.Sint32Kind,
				protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
				g.P(fprintf, `(buf, "%d", v)`)
			case protoreflect.Int64Kind, protoreflect.Sint64Kind,
				protoreflect.Uint64Kind, protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind:
				g.P(fprintf, `(buf, "\"%d\"", v)`)
			case protoreflect.FloatKind, protoreflect.DoubleKind:
				g.P(fprintf, `(buf, "%f", v)`)
			default:
				panic(f)
			}
			g.P("}")
			w(g, "}")
			g.P("}") // x
			continue
		}
		switch f.Desc.Kind() {
		case protoreflect.MessageKind:
			if f.Desc.Message().FullName() == "google.protobuf.Timestamp" {
				g.P(`if t := x; t == nil { buf.WriteString("null") } else {`)
				t(g, "t")
				g.P("}")
				g.P("}") // x
				continue
			}
			g.P("if err := x.marshalJSON(buf); err != nil { return err }")
		case protoreflect.StringKind:
			g.P(fprintf, `(buf, "%q", x)`)
		case protoreflect.BoolKind:
			g.P(`if x { buf.WriteString("true") } else { buf.WriteString("false") }`)
		case protoreflect.EnumKind:
			q(g, "x.String()")
		case protoreflect.Int32Kind, protoreflect.Sint32Kind,
			protoreflect.Uint32Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind:
			g.P(fprintf, `(buf, "%d", x)`)
		case protoreflect.Int64Kind, protoreflect.Sint64Kind,
			protoreflect.Uint64Kind, protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind:
			g.P(fprintf, `(buf, "\"%d\"", x)`)
		case protoreflect.FloatKind, protoreflect.DoubleKind:
			g.P(fprintf, `(buf, "%f", x)`)
		case protoreflect.BytesKind:
			w(g, "null")
		default:
			panic(f.Location.SourceFile + "/" + f.GoName)
		}
		g.P("}") // x
	}
	w(g, "}")
	g.P("return nil")
	g.P("}")
	g.P()
	for _, m := range msg.Messages {
		generateMessage(g, m)
	}
}

func w(g *protogen.GeneratedFile, s string) {
	g.P(`buf.WriteString("` + s + `")`)
}

func q(g *protogen.GeneratedFile, s string) {
	g.P(`buf.WriteString("\"" +` + s + `+ "\"")`)
}

func ident(g *protogen.GeneratedFile, s string) {
	g.P(`buf.WriteString("\""); buf.WriteString("` + s + `"); buf.WriteString("\"");`)

}

func t(g *protogen.GeneratedFile, s string) {
	// https://github.com/protocolbuffers/protobuf-go/blob/v1.36.5/encoding/protojson/well_known_types.go#L597-L607
	// Uses RFC 3339, where generated output will be Z-normalized and uses 0, 3,
	// 6 or 9 fractional digits.
	g.P(`tf := ` + s + `.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")`)
	g.P(`tf = `, trim, `(tf, "000")`)
	g.P(`tf = `, trim, `(tf, "000")`)
	g.P(`tf = `, trim, `(tf, ".000")`)
	q(g, `tf + "Z"`)
}

func zero(fd protoreflect.FieldDescriptor) string {
	if fd.IsMap() || fd.IsList() {
		return "nil"
	}
	switch fd.Kind() {
	case protoreflect.MessageKind, protoreflect.BytesKind:
		return "nil"
	case protoreflect.StringKind:
		return `""`
	case protoreflect.BoolKind:
		return "false"
	case protoreflect.EnumKind, protoreflect.Int32Kind, protoreflect.Sint32Kind,
		protoreflect.Uint32Kind, protoreflect.Int64Kind, protoreflect.Sint64Kind,
		protoreflect.Uint64Kind, protoreflect.Sfixed32Kind, protoreflect.Fixed32Kind,
		protoreflect.Sfixed64Kind, protoreflect.Fixed64Kind,
		protoreflect.FloatKind, protoreflect.DoubleKind:
		return "0"
	default:
		panic(fd.FullName())
	}
}
