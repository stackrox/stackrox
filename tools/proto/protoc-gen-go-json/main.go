package main

import (
	"path"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}

		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_json.pb.go"

	importPath := protogen.GoImportPath(path.Join(
		string(file.GoImportPath),
		string(file.GoPackageName),
	))

	g := gen.NewGeneratedFile(filename, importPath)
	g.P("// Code generated by protoc-gen-go-json. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P(`import "bytes"`)

	for _, m := range file.Messages {
		generateMessage(g, m)
	}
}

func generateMessage(g *protogen.GeneratedFile, msg *protogen.Message) {
	s := msg.GoIdent.String()
	name := s[strings.LastIndex(s, ".")+1:]

	g.P()
	g.P("func (m *", name, ") MarshalJSON() ([]byte, error) ", " { ")
	g.P("if m == nil { return nil, nil }")
	g.P("var buffer bytes.Buffer")
	g.P(`buffer.WriteString("{")`)
	g.P(`buffer.WriteString("{")`)
	g.P(`var b []byte`)
	g.P(`var err error`)
	for _, f := range msg.Fields {
		g.P("buffer.WriteString(\"", f.Desc.JSONName(), "\")")
		g.P(`buffer.WriteString(":")`)
		switch f.Desc.Kind() {
		case protoreflect.MessageKind:
			g.P("b, err = m.Get", f.GoName, "().MarshalJSON()")
			g.P("if err != nil { return nil, err }")
			g.P("buffer.Write(b)")
		case protoreflect.StringKind:
			g.P(`buffer.WriteString(m.Get`, f.GoName, "())")
		case protoreflect.BoolKind:
			g.P("if m.Get", f.GoName, `() { buffer.WriteString("true") } else { buffer.WriteString("false") }`)
		}
	}
	g.P(`buffer.WriteString("}")`)
	g.P("}")
	g.P()
	for _, m := range msg.Messages {
		generateMessage(g, m)
	}
}
