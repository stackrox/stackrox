# Assert that config-hash annotation is correct in all deployment pod templates.
# Since the config hash needs to be determined programmatically, we implement this assert
# as a nested `kuttl assert` and expand the config hash using envsubst.
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
- script: |
    set -eu # shell in CI does not grok -o pipefail
    if ! retry-kubectl.sh get secret central-tls -n $NAMESPACE >/dev/null 2>&1; then
      echo "ERROR: central-tls secret not found"
      exit 1
    fi
    # Compute config hash from central-tls secret
    config_hash=$(retry-kubectl.sh get secret central-tls -n $NAMESPACE -o jsonpath='{.data.ca\.pem}' | base64 -d | sha256sum | cut -d' ' -f1)
    echo "Expected config-hash: $config_hash"
    # Generate assert file with computed config hash
    assert_file=$(mktemp)
    env - PATH=$PATH CONFIG_HASH=$config_hash envsubst < ../../common/config-hash-assert.envsubst.yaml > $assert_file
    # Run kuttl assert on the generated file
    ${KUTTL:-kubectl-kuttl} assert --namespace $NAMESPACE --timeout 30 $assert_file
    rm $assert_file
    # Verify that each Stackrox pod has the expected config-hash annotation
    mismatch_pods=$(retry-kubectl.sh get pods -n $NAMESPACE -o json | jq -r --arg hash "$config_hash" '[.items[]
      | select(.metadata.labels["app.kubernetes.io/name"]=="stackrox")
      | select(.metadata.annotations["app.stackrox.io/config-hash"] != $hash)
      | .metadata.name] | @tsv')
    if [ -n "$mismatch_pods" ]; then
      echo "ERROR: Pods with missing or mismatched app.stackrox.io/config-hash:"
      printf '%s\n' "$mismatch_pods"
      exit 1
    fi
