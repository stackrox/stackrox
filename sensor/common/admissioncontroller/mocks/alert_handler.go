// Code generated by MockGen. DO NOT EDIT.
// Source: alert_handler.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/alert_handler.go -source alert_handler.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	sensor "github.com/stackrox/rox/generated/internalapi/sensor"
	centralsensor "github.com/stackrox/rox/pkg/centralsensor"
	common "github.com/stackrox/rox/sensor/common"
	message "github.com/stackrox/rox/sensor/common/message"
	gomock "go.uber.org/mock/gomock"
)

// MockAlertHandler is a mock of AlertHandler interface.
type MockAlertHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAlertHandlerMockRecorder
}

// MockAlertHandlerMockRecorder is the mock recorder for MockAlertHandler.
type MockAlertHandlerMockRecorder struct {
	mock *MockAlertHandler
}

// NewMockAlertHandler creates a new mock instance.
func NewMockAlertHandler(ctrl *gomock.Controller) *MockAlertHandler {
	mock := &MockAlertHandler{ctrl: ctrl}
	mock.recorder = &MockAlertHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertHandler) EXPECT() *MockAlertHandlerMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockAlertHandler) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockAlertHandlerMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockAlertHandler)(nil).Capabilities))
}

// Notify mocks base method.
func (m *MockAlertHandler) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockAlertHandlerMockRecorder) Notify(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockAlertHandler)(nil).Notify), e)
}

// ProcessAlerts mocks base method.
func (m *MockAlertHandler) ProcessAlerts(alerts *sensor.AdmissionControlAlerts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAlerts", alerts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAlerts indicates an expected call of ProcessAlerts.
func (mr *MockAlertHandlerMockRecorder) ProcessAlerts(alerts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlerts", reflect.TypeOf((*MockAlertHandler)(nil).ProcessAlerts), alerts)
}

// ProcessMessage mocks base method.
func (m *MockAlertHandler) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockAlertHandlerMockRecorder) ProcessMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockAlertHandler)(nil).ProcessMessage), msg)
}

// ResponsesC mocks base method.
func (m *MockAlertHandler) ResponsesC() <-chan *message.ExpiringMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *message.ExpiringMessage)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockAlertHandlerMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockAlertHandler)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockAlertHandler) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAlertHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAlertHandler)(nil).Start))
}

// Stop mocks base method.
func (m *MockAlertHandler) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockAlertHandlerMockRecorder) Stop(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAlertHandler)(nil).Stop), err)
}
