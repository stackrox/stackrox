// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/interfaces.go -source interfaces.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	types "github.com/stackrox/rox/pkg/registries/types"
	scan "github.com/stackrox/rox/sensor/common/scan"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockregistryStore is a mock of registryStore interface.
type MockregistryStore struct {
	ctrl     *gomock.Controller
	recorder *MockregistryStoreMockRecorder
}

// MockregistryStoreMockRecorder is the mock recorder for MockregistryStore.
type MockregistryStoreMockRecorder struct {
	mock *MockregistryStore
}

// NewMockregistryStore creates a new mock instance.
func NewMockregistryStore(ctrl *gomock.Controller) *MockregistryStore {
	mock := &MockregistryStore{ctrl: ctrl}
	mock.recorder = &MockregistryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockregistryStore) EXPECT() *MockregistryStoreMockRecorder {
	return m.recorder
}

// GetCentralRegistries mocks base method.
func (m *MockregistryStore) GetCentralRegistries(arg0 *storage.ImageName) []types.ImageRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCentralRegistries", arg0)
	ret0, _ := ret[0].([]types.ImageRegistry)
	return ret0
}

// GetCentralRegistries indicates an expected call of GetCentralRegistries.
func (mr *MockregistryStoreMockRecorder) GetCentralRegistries(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCentralRegistries", reflect.TypeOf((*MockregistryStore)(nil).GetCentralRegistries), arg0)
}

// GetGlobalRegistry mocks base method.
func (m *MockregistryStore) GetGlobalRegistry(arg0 *storage.ImageName) (types.ImageRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalRegistry", arg0)
	ret0, _ := ret[0].(types.ImageRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalRegistry indicates an expected call of GetGlobalRegistry.
func (mr *MockregistryStoreMockRecorder) GetGlobalRegistry(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalRegistry", reflect.TypeOf((*MockregistryStore)(nil).GetGlobalRegistry), arg0)
}

// GetPullSecretRegistries mocks base method.
func (m *MockregistryStore) GetPullSecretRegistries(image *storage.ImageName, namespace string, imagePullSecrets []string) ([]types.ImageRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullSecretRegistries", image, namespace, imagePullSecrets)
	ret0, _ := ret[0].([]types.ImageRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullSecretRegistries indicates an expected call of GetPullSecretRegistries.
func (mr *MockregistryStoreMockRecorder) GetPullSecretRegistries(image, namespace, imagePullSecrets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullSecretRegistries", reflect.TypeOf((*MockregistryStore)(nil).GetPullSecretRegistries), image, namespace, imagePullSecrets)
}

// IsLocal mocks base method.
func (m *MockregistryStore) IsLocal(arg0 *storage.ImageName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocal indicates an expected call of IsLocal.
func (mr *MockregistryStoreMockRecorder) IsLocal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocal", reflect.TypeOf((*MockregistryStore)(nil).IsLocal), arg0)
}

// MockcentralClient is a mock of centralClient interface.
type MockcentralClient struct {
	ctrl     *gomock.Controller
	recorder *MockcentralClientMockRecorder
}

// MockcentralClientMockRecorder is the mock recorder for MockcentralClient.
type MockcentralClientMockRecorder struct {
	mock *MockcentralClient
}

// NewMockcentralClient creates a new mock instance.
func NewMockcentralClient(ctrl *gomock.Controller) *MockcentralClient {
	mock := &MockcentralClient{ctrl: ctrl}
	mock.recorder = &MockcentralClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcentralClient) EXPECT() *MockcentralClientMockRecorder {
	return m.recorder
}

// EnrichLocalImageInternal mocks base method.
func (m *MockcentralClient) EnrichLocalImageInternal(arg0 context.Context, arg1 *v1.EnrichLocalImageInternalRequest, arg2 ...grpc.CallOption) (*v1.ScanImageInternalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnrichLocalImageInternal", varargs...)
	ret0, _ := ret[0].(*v1.ScanImageInternalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichLocalImageInternal indicates an expected call of EnrichLocalImageInternal.
func (mr *MockcentralClientMockRecorder) EnrichLocalImageInternal(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichLocalImageInternal", reflect.TypeOf((*MockcentralClient)(nil).EnrichLocalImageInternal), varargs...)
}

// ScanImageInternal mocks base method.
func (m *MockcentralClient) ScanImageInternal(arg0 context.Context, arg1 *v1.ScanImageInternalRequest, arg2 ...grpc.CallOption) (*v1.ScanImageInternalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanImageInternal", varargs...)
	ret0, _ := ret[0].(*v1.ScanImageInternalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanImageInternal indicates an expected call of ScanImageInternal.
func (mr *MockcentralClientMockRecorder) ScanImageInternal(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanImageInternal", reflect.TypeOf((*MockcentralClient)(nil).ScanImageInternal), varargs...)
}

// MocklocalScan is a mock of localScan interface.
type MocklocalScan struct {
	ctrl     *gomock.Controller
	recorder *MocklocalScanMockRecorder
}

// MocklocalScanMockRecorder is the mock recorder for MocklocalScan.
type MocklocalScanMockRecorder struct {
	mock *MocklocalScan
}

// NewMocklocalScan creates a new mock instance.
func NewMocklocalScan(ctrl *gomock.Controller) *MocklocalScan {
	mock := &MocklocalScan{ctrl: ctrl}
	mock.recorder = &MocklocalScanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocalScan) EXPECT() *MocklocalScanMockRecorder {
	return m.recorder
}

// EnrichLocalImageInNamespace mocks base method.
func (m *MocklocalScan) EnrichLocalImageInNamespace(arg0 context.Context, arg1 scan.LocalScanCentralClient, arg2 *scan.LocalScanRequest) (*storage.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichLocalImageInNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichLocalImageInNamespace indicates an expected call of EnrichLocalImageInNamespace.
func (mr *MocklocalScanMockRecorder) EnrichLocalImageInNamespace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichLocalImageInNamespace", reflect.TypeOf((*MocklocalScan)(nil).EnrichLocalImageInNamespace), arg0, arg1, arg2)
}
