// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/orchestrator.go -source orchestrator.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	orchestrator "github.com/stackrox/rox/sensor/common/orchestrator"
	gomock "go.uber.org/mock/gomock"
)

// MockOrchestrator is a mock of Orchestrator interface.
type MockOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorMockRecorder
	isgomock struct{}
}

// MockOrchestratorMockRecorder is the mock recorder for MockOrchestrator.
type MockOrchestratorMockRecorder struct {
	mock *MockOrchestrator
}

// NewMockOrchestrator creates a new mock instance.
func NewMockOrchestrator(ctrl *gomock.Controller) *MockOrchestrator {
	mock := &MockOrchestrator{ctrl: ctrl}
	mock.recorder = &MockOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestrator) EXPECT() *MockOrchestratorMockRecorder {
	return m.recorder
}

// GetNodeScrapeConfig mocks base method.
func (m *MockOrchestrator) GetNodeScrapeConfig(nodeName string) (*orchestrator.NodeScrapeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeScrapeConfig", nodeName)
	ret0, _ := ret[0].(*orchestrator.NodeScrapeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeScrapeConfig indicates an expected call of GetNodeScrapeConfig.
func (mr *MockOrchestratorMockRecorder) GetNodeScrapeConfig(nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeScrapeConfig", reflect.TypeOf((*MockOrchestrator)(nil).GetNodeScrapeConfig), nodeName)
}
