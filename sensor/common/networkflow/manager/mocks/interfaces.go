// Code generated by MockGen. DO NOT EDIT.
// Source: sensor/common/networkflow/manager/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	net "github.com/stackrox/rox/pkg/net"
	clusterentities "github.com/stackrox/rox/sensor/common/clusterentities"
)

// MockEntityStore is a mock of EntityStore interface.
type MockEntityStore struct {
	ctrl     *gomock.Controller
	recorder *MockEntityStoreMockRecorder
}

// MockEntityStoreMockRecorder is the mock recorder for MockEntityStore.
type MockEntityStoreMockRecorder struct {
	mock *MockEntityStore
}

// NewMockEntityStore creates a new mock instance.
func NewMockEntityStore(ctrl *gomock.Controller) *MockEntityStore {
	mock := &MockEntityStore{ctrl: ctrl}
	mock.recorder = &MockEntityStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityStore) EXPECT() *MockEntityStoreMockRecorder {
	return m.recorder
}

// LookupByContainerID mocks base method.
func (m *MockEntityStore) LookupByContainerID(arg0 string) (clusterentities.ContainerMetadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByContainerID", arg0)
	ret0, _ := ret[0].(clusterentities.ContainerMetadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupByContainerID indicates an expected call of LookupByContainerID.
func (mr *MockEntityStoreMockRecorder) LookupByContainerID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByContainerID", reflect.TypeOf((*MockEntityStore)(nil).LookupByContainerID), arg0)
}

// LookupByEndpoint mocks base method.
func (m *MockEntityStore) LookupByEndpoint(arg0 net.NumericEndpoint) []clusterentities.LookupResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByEndpoint", arg0)
	ret0, _ := ret[0].([]clusterentities.LookupResult)
	return ret0
}

// LookupByEndpoint indicates an expected call of LookupByEndpoint.
func (mr *MockEntityStoreMockRecorder) LookupByEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByEndpoint", reflect.TypeOf((*MockEntityStore)(nil).LookupByEndpoint), arg0)
}

// RegisterPublicIPsListener mocks base method.
func (m *MockEntityStore) RegisterPublicIPsListener(arg0 clusterentities.PublicIPsListener) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPublicIPsListener", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegisterPublicIPsListener indicates an expected call of RegisterPublicIPsListener.
func (mr *MockEntityStoreMockRecorder) RegisterPublicIPsListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublicIPsListener", reflect.TypeOf((*MockEntityStore)(nil).RegisterPublicIPsListener), arg0)
}

// UnregisterPublicIPsListener mocks base method.
func (m *MockEntityStore) UnregisterPublicIPsListener(arg0 clusterentities.PublicIPsListener) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterPublicIPsListener", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnregisterPublicIPsListener indicates an expected call of UnregisterPublicIPsListener.
func (mr *MockEntityStoreMockRecorder) UnregisterPublicIPsListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterPublicIPsListener", reflect.TypeOf((*MockEntityStore)(nil).UnregisterPublicIPsListener), arg0)
}
