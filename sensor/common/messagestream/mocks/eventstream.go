// Code generated by MockGen. DO NOT EDIT.
// Source: eventstream.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/eventstream.go -source eventstream.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	gomock "go.uber.org/mock/gomock"
)

// MockSensorMessageStream is a mock of SensorMessageStream interface.
type MockSensorMessageStream struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMessageStreamMockRecorder
	isgomock struct{}
}

// MockSensorMessageStreamMockRecorder is the mock recorder for MockSensorMessageStream.
type MockSensorMessageStreamMockRecorder struct {
	mock *MockSensorMessageStream
}

// NewMockSensorMessageStream creates a new mock instance.
func NewMockSensorMessageStream(ctrl *gomock.Controller) *MockSensorMessageStream {
	mock := &MockSensorMessageStream{ctrl: ctrl}
	mock.recorder = &MockSensorMessageStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensorMessageStream) EXPECT() *MockSensorMessageStreamMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSensorMessageStream) Send(msg *central.MsgFromSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSensorMessageStreamMockRecorder) Send(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSensorMessageStream)(nil).Send), msg)
}
