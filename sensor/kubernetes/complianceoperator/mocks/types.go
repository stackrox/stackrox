// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	centralsensor "github.com/stackrox/rox/pkg/centralsensor"
	common "github.com/stackrox/rox/sensor/common"
	message "github.com/stackrox/rox/sensor/common/message"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusInfo is a mock of StatusInfo interface.
type MockStatusInfo struct {
	ctrl     *gomock.Controller
	recorder *MockStatusInfoMockRecorder
}

// MockStatusInfoMockRecorder is the mock recorder for MockStatusInfo.
type MockStatusInfoMockRecorder struct {
	mock *MockStatusInfo
}

// NewMockStatusInfo creates a new mock instance.
func NewMockStatusInfo(ctrl *gomock.Controller) *MockStatusInfo {
	mock := &MockStatusInfo{ctrl: ctrl}
	mock.recorder = &MockStatusInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusInfo) EXPECT() *MockStatusInfoMockRecorder {
	return m.recorder
}

// GetNamespace mocks base method.
func (m *MockStatusInfo) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockStatusInfoMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockStatusInfo)(nil).GetNamespace))
}

// MockInfoUpdater is a mock of InfoUpdater interface.
type MockInfoUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockInfoUpdaterMockRecorder
}

// MockInfoUpdaterMockRecorder is the mock recorder for MockInfoUpdater.
type MockInfoUpdaterMockRecorder struct {
	mock *MockInfoUpdater
}

// NewMockInfoUpdater creates a new mock instance.
func NewMockInfoUpdater(ctrl *gomock.Controller) *MockInfoUpdater {
	mock := &MockInfoUpdater{ctrl: ctrl}
	mock.recorder = &MockInfoUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoUpdater) EXPECT() *MockInfoUpdaterMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockInfoUpdater) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockInfoUpdaterMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockInfoUpdater)(nil).Capabilities))
}

// GetNamespace mocks base method.
func (m *MockInfoUpdater) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockInfoUpdaterMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockInfoUpdater)(nil).GetNamespace))
}

// Notify mocks base method.
func (m *MockInfoUpdater) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockInfoUpdaterMockRecorder) Notify(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockInfoUpdater)(nil).Notify), e)
}

// ProcessMessage mocks base method.
func (m *MockInfoUpdater) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockInfoUpdaterMockRecorder) ProcessMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockInfoUpdater)(nil).ProcessMessage), msg)
}

// ResponsesC mocks base method.
func (m *MockInfoUpdater) ResponsesC() <-chan *message.ExpiringMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *message.ExpiringMessage)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockInfoUpdaterMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockInfoUpdater)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockInfoUpdater) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockInfoUpdaterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInfoUpdater)(nil).Start))
}

// Stop mocks base method.
func (m *MockInfoUpdater) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockInfoUpdaterMockRecorder) Stop(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInfoUpdater)(nil).Stop), err)
}
