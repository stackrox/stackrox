// Code generated by MockGen. DO NOT EDIT.
// Source: virtualmachineinstances.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/virtualmachineinstances.go -source virtualmachineinstances.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	store "github.com/stackrox/rox/sensor/kubernetes/listener/resources/virtualmachine/store"
	gomock "go.uber.org/mock/gomock"
)

// MockvirtualMachineStore is a mock of virtualMachineStore interface.
type MockvirtualMachineStore struct {
	ctrl     *gomock.Controller
	recorder *MockvirtualMachineStoreMockRecorder
	isgomock struct{}
}

// MockvirtualMachineStoreMockRecorder is the mock recorder for MockvirtualMachineStore.
type MockvirtualMachineStoreMockRecorder struct {
	mock *MockvirtualMachineStore
}

// NewMockvirtualMachineStore creates a new mock instance.
func NewMockvirtualMachineStore(ctrl *gomock.Controller) *MockvirtualMachineStore {
	mock := &MockvirtualMachineStore{ctrl: ctrl}
	mock.recorder = &MockvirtualMachineStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvirtualMachineStore) EXPECT() *MockvirtualMachineStoreMockRecorder {
	return m.recorder
}

// AddOrUpdateVirtualMachine mocks base method.
func (m *MockvirtualMachineStore) AddOrUpdateVirtualMachine(vm *store.VirtualMachineInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrUpdateVirtualMachine", vm)
}

// AddOrUpdateVirtualMachine indicates an expected call of AddOrUpdateVirtualMachine.
func (mr *MockvirtualMachineStoreMockRecorder) AddOrUpdateVirtualMachine(vm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateVirtualMachine", reflect.TypeOf((*MockvirtualMachineStore)(nil).AddOrUpdateVirtualMachine), vm)
}

// AddOrUpdateVirtualMachineInstance mocks base method.
func (m *MockvirtualMachineStore) AddOrUpdateVirtualMachineInstance(uid, namespace string, vsockCID *uint32, isRunning bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrUpdateVirtualMachineInstance", uid, namespace, vsockCID, isRunning)
}

// AddOrUpdateVirtualMachineInstance indicates an expected call of AddOrUpdateVirtualMachineInstance.
func (mr *MockvirtualMachineStoreMockRecorder) AddOrUpdateVirtualMachineInstance(uid, namespace, vsockCID, isRunning any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateVirtualMachineInstance", reflect.TypeOf((*MockvirtualMachineStore)(nil).AddOrUpdateVirtualMachineInstance), uid, namespace, vsockCID, isRunning)
}

// Get mocks base method.
func (m *MockvirtualMachineStore) Get(uid string) *store.VirtualMachineInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid)
	ret0, _ := ret[0].(*store.VirtualMachineInfo)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockvirtualMachineStoreMockRecorder) Get(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockvirtualMachineStore)(nil).Get), uid)
}

// RemoveVirtualMachine mocks base method.
func (m *MockvirtualMachineStore) RemoveVirtualMachine(uid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveVirtualMachine", uid)
}

// RemoveVirtualMachine indicates an expected call of RemoveVirtualMachine.
func (mr *MockvirtualMachineStoreMockRecorder) RemoveVirtualMachine(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVirtualMachine", reflect.TypeOf((*MockvirtualMachineStore)(nil).RemoveVirtualMachine), uid)
}

// RemoveVirtualMachineInstance mocks base method.
func (m *MockvirtualMachineStore) RemoveVirtualMachineInstance(uid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveVirtualMachineInstance", uid)
}

// RemoveVirtualMachineInstance indicates an expected call of RemoveVirtualMachineInstance.
func (mr *MockvirtualMachineStoreMockRecorder) RemoveVirtualMachineInstance(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVirtualMachineInstance", reflect.TypeOf((*MockvirtualMachineStore)(nil).RemoveVirtualMachineInstance), uid)
}
