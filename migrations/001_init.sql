CREATE TABLE "clusters" ("id" uuid,"name" varchar,"type" integer,"labels" jsonb,"status_providermetadata_cluster_type" integer,"status_orchestratormetadata_version" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_clusters_name" UNIQUE ("name"));
CREATE TABLE "namespaces" ("id" uuid,"name" varchar,"clusterid" uuid,"clustername" varchar,"labels" jsonb,"annotations" jsonb,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "namespaces_sac_filter" ON "namespaces" USING btree("name","clusterid");
CREATE TABLE "deployments" ("id" uuid,"name" varchar,"type" varchar,"namespace" varchar,"namespaceid" uuid,"orchestratorcomponent" boolean,"labels" jsonb,"podlabels" jsonb,"created" timestamp,"clusterid" uuid,"clustername" varchar,"annotations" jsonb,"priority" bigint,"imagepullsecrets" text[],"serviceaccount" varchar,"serviceaccountpermissionlevel" integer,"riskscore" numeric,"platformcomponent" boolean,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "deployments_riskscore" ON "deployments" USING btree("riskscore");
CREATE INDEX IF NOT EXISTS "deployments_sac_filter" ON "deployments" USING btree("namespace","clusterid");
CREATE TABLE "deployments_containers" ("deployments_id" uuid,"idx" integer,"image_id" varchar,"image_name_registry" varchar,"image_name_remote" varchar,"image_name_tag" varchar,"image_name_fullname" varchar,"securitycontext_privileged" boolean,"securitycontext_dropcapabilities" text[],"securitycontext_addcapabilities" text[],"securitycontext_readonlyrootfilesystem" boolean,"resources_cpucoresrequest" numeric,"resources_cpucoreslimit" numeric,"resources_memorymbrequest" numeric,"resources_memorymblimit" numeric,PRIMARY KEY ("deployments_id","idx"),CONSTRAINT "fk_deployments_containers_deployments_ref" FOREIGN KEY ("deployments_id") REFERENCES "deployments"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentscontainers_image_id" ON "deployments_containers" USING hash("image_id");
CREATE INDEX IF NOT EXISTS "deploymentscontainers_idx" ON "deployments_containers" USING btree("idx");
CREATE TABLE "deployments_containers_envs" ("deployments_id" uuid,"deployments_containers_idx" integer,"idx" integer,"key" varchar,"value" varchar,"envvarsource" integer,PRIMARY KEY ("deployments_id","deployments_containers_idx","idx"),CONSTRAINT "fk_deployments_containers_envs_deployments_containers_ref" FOREIGN KEY ("deployments_id","deployments_containers_idx") REFERENCES "deployments_containers"("deployments_id","idx") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentscontainersenvs_idx" ON "deployments_containers_envs" USING btree("idx");
CREATE TABLE "deployments_containers_volumes" ("deployments_id" uuid,"deployments_containers_idx" integer,"idx" integer,"name" varchar,"source" varchar,"destination" varchar,"readonly" boolean,"type" varchar,PRIMARY KEY ("deployments_id","deployments_containers_idx","idx"),CONSTRAINT "fk_deployments_containers_volumes_deployments_containers_ref" FOREIGN KEY ("deployments_id","deployments_containers_idx") REFERENCES "deployments_containers"("deployments_id","idx") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentscontainersvolumes_idx" ON "deployments_containers_volumes" USING btree("idx");
CREATE TABLE "deployments_containers_secrets" ("deployments_id" uuid,"deployments_containers_idx" integer,"idx" integer,"name" varchar,"path" varchar,PRIMARY KEY ("deployments_id","deployments_containers_idx","idx"),CONSTRAINT "fk_deployments_containers_secrets_deployments_containers_ref" FOREIGN KEY ("deployments_id","deployments_containers_idx") REFERENCES "deployments_containers"("deployments_id","idx") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentscontainerssecrets_idx" ON "deployments_containers_secrets" USING btree("idx");
CREATE TABLE "deployments_ports" ("deployments_id" uuid,"idx" integer,"containerport" integer,"protocol" varchar,"exposure" integer,PRIMARY KEY ("deployments_id","idx"),CONSTRAINT "fk_deployments_ports_deployments_ref" FOREIGN KEY ("deployments_id") REFERENCES "deployments"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentsports_idx" ON "deployments_ports" USING btree("idx");
CREATE TABLE "deployments_ports_exposure_infos" ("deployments_id" uuid,"deployments_ports_idx" integer,"idx" integer,"level" integer,"servicename" varchar,"serviceport" integer,"nodeport" integer,"externalips" text[],"externalhostnames" text[],PRIMARY KEY ("deployments_id","deployments_ports_idx","idx"),CONSTRAINT "fk_deployments_ports_exposure_infos_deployments_ports_ref" FOREIGN KEY ("deployments_id","deployments_ports_idx") REFERENCES "deployments_ports"("deployments_id","idx") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "deploymentsportsexposureinfos_idx" ON "deployments_ports_exposure_infos" USING btree("idx");
CREATE TABLE "image_components" ("id" varchar,"name" varchar,"version" varchar,"priority" bigint,"source" integer,"riskscore" numeric,"topcvss" numeric,"operatingsystem" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "active_components" ("id" varchar,"deploymentid" uuid,"componentid" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "activecomponents_deploymentid" ON "active_components" USING hash("deploymentid");
CREATE TABLE "active_components_active_contexts_slices" ("active_components_id" varchar,"idx" integer,"containername" varchar,"imageid" varchar,PRIMARY KEY ("active_components_id","idx"),CONSTRAINT "fk_active_components_active_contexts_slices_active_comp0f2d0b84" FOREIGN KEY ("active_components_id") REFERENCES "active_components"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "activecomponentsactivecontextsslices_idx" ON "active_components_active_contexts_slices" USING btree("idx");
CREATE TABLE "administration_events" ("id" uuid,"type" integer,"level" integer,"domain" varchar,"resource_type" varchar,"numoccurrences" bigint,"lastoccurredat" timestamp,"createdat" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "alerts" ("id" uuid,"policy_id" varchar,"policy_name" varchar,"policy_description" varchar,"policy_disabled" boolean,"policy_categories" text[],"policy_severity" integer,"policy_enforcementactions" int[],"policy_lastupdated" timestamp,"policy_sortname" varchar,"policy_sortlifecyclestage" varchar,"policy_sortenforcement" boolean,"lifecyclestage" integer,"clusterid" uuid,"clustername" varchar,"namespace" varchar,"namespaceid" uuid,"deployment_id" uuid,"deployment_name" varchar,"deployment_inactive" boolean,"image_id" varchar,"image_name_registry" varchar,"image_name_remote" varchar,"image_name_tag" varchar,"image_name_fullname" varchar,"resource_resourcetype" integer,"resource_name" varchar,"enforcement_action" integer,"time" timestamp,"state" integer,"platformcomponent" boolean,"entitytype" integer,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "alerts_sac_filter" ON "alerts" USING btree("clusterid","namespace");
CREATE INDEX IF NOT EXISTS "alerts_lifecyclestage" ON "alerts" USING btree("lifecyclestage");
CREATE INDEX IF NOT EXISTS "alerts_policy_id" ON "alerts" USING btree("policy_id");
CREATE INDEX IF NOT EXISTS "alerts_state" ON "alerts" USING btree("state");
CREATE INDEX IF NOT EXISTS "alerts_time" ON "alerts" USING btree("time");
CREATE INDEX IF NOT EXISTS "alerts_deployment_id" ON "alerts" USING hash("deployment_id");
CREATE TABLE "api_tokens" ("id" varchar,"expiration" timestamp,"revoked" boolean,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "auth_machine_to_machine_configs" ("id" uuid,"issuer" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_auth_machine_to_machine_configs_issuer" UNIQUE ("issuer"));
CREATE TABLE "roles" ("name" varchar,"serialized" bytea,PRIMARY KEY ("name"));
CREATE TABLE "auth_machine_to_machine_configs_mappings" ("auth_machine_to_machine_configs_id" uuid,"idx" integer,"role" varchar,PRIMARY KEY ("auth_machine_to_machine_configs_id","idx"),CONSTRAINT "fk_auth_machine_to_machine_configs_mappings_auth_machin9a6c39e4" FOREIGN KEY ("auth_machine_to_machine_configs_id") REFERENCES "auth_machine_to_machine_configs"("id") ON DELETE CASCADE,CONSTRAINT "fk_auth_machine_to_machine_configs_mappings_roles_ref" FOREIGN KEY ("role") REFERENCES "roles"("name") ON DELETE RESTRICT);
CREATE INDEX IF NOT EXISTS "authmachinetomachineconfigsmappings_idx" ON "auth_machine_to_machine_configs_mappings" USING btree("idx");
CREATE TABLE "auth_providers" ("id" varchar,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_auth_providers_name" UNIQUE ("name"));
CREATE TABLE "blobs" ("name" varchar,"length" bigint,"modifiedtime" timestamp,"serialized" bytea,PRIMARY KEY ("name"));
CREATE TABLE "cloud_sources" ("id" uuid,"name" varchar,"type" integer,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_cloud_sources_name" UNIQUE ("name"));
CREATE TABLE "cluster_cves" ("id" varchar,"cvebaseinfo_cve" varchar,"cvebaseinfo_publishedon" timestamp,"cvebaseinfo_createdat" timestamp,"cvebaseinfo_epss_epssprobability" numeric,"cvss" numeric,"severity" integer,"impactscore" numeric,"snoozed" boolean,"snoozeexpiry" timestamp,"type" integer,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "clustercves_cvebaseinfo_cve" ON "cluster_cves" USING btree("cvebaseinfo_cve");
CREATE TABLE "cluster_cve_edges" ("id" varchar,"isfixable" boolean,"fixedby" varchar,"clusterid" uuid,"cveid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_cluster_cve_edges_clusters_ref" FOREIGN KEY ("clusterid") REFERENCES "clusters"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "clustercveedges_cveid" ON "cluster_cve_edges" USING hash("cveid");
CREATE TABLE "cluster_health_statuses" ("id" uuid,"sensorhealthstatus" integer,"collectorhealthstatus" integer,"overallhealthstatus" integer,"admissioncontrolhealthstatus" integer,"scannerhealthstatus" integer,"lastcontact" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "cluster_init_bundles" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "collections" ("id" varchar,"name" varchar,"createdby_name" varchar,"updatedby_name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_collections_name" UNIQUE ("name"));
CREATE TABLE "collections_embedded_collections" ("collections_id" varchar,"idx" integer,"id" varchar,PRIMARY KEY ("collections_id","idx"),CONSTRAINT "fk_collections_embedded_collections_collections_ref" FOREIGN KEY ("collections_id") REFERENCES "collections"("id") ON DELETE CASCADE,CONSTRAINT "fk_collections_embedded_collections_collections_cycle_ref" FOREIGN KEY ("id") REFERENCES "collections"("id") ON DELETE RESTRICT);
CREATE INDEX IF NOT EXISTS "collectionsembeddedcollections_idx" ON "collections_embedded_collections" USING btree("idx");
CREATE TABLE "compliance_configs" ("standardid" varchar,"serialized" bytea,PRIMARY KEY ("standardid"));
CREATE TABLE "compliance_domains" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_integrations" ("id" uuid,"version" varchar,"clusterid" uuid,"operatorinstalled" boolean,"operatorstatus" integer,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceintegrations_sac_filter" ON "compliance_integrations" USING hash("clusterid");
CREATE UNIQUE INDEX IF NOT EXISTS "compliance_unique_indicator" ON "compliance_integrations" ("clusterid");
CREATE TABLE "compliance_operator_benchmark_v2" ("id" uuid,"name" varchar,"version" varchar,"shortname" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_benchmark_v2_profiles" ("compliance_operator_benchmark_v2_id" uuid,"idx" integer,"profilename" varchar,"profileversion" varchar,PRIMARY KEY ("compliance_operator_benchmark_v2_id","idx"),CONSTRAINT "fk_compliance_operator_benchmark_v2_profiles_compliance8e6514c6" FOREIGN KEY ("compliance_operator_benchmark_v2_id") REFERENCES "compliance_operator_benchmark_v2"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorbenchmarkv2profiles_idx" ON "compliance_operator_benchmark_v2_profiles" USING btree("idx");
CREATE TABLE "compliance_operator_scan_configuration_v2" ("id" uuid,"scanconfigname" varchar,"modifiedby_name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_compliance_operator_scan_configuration_v2_scanconfigname" UNIQUE ("scanconfigname"));
CREATE TABLE "compliance_operator_scan_configuration_v2_profiles" ("compliance_operator_scan_configuration_v2_id" uuid,"idx" integer,"profilename" varchar,PRIMARY KEY ("compliance_operator_scan_configuration_v2_id","idx"),CONSTRAINT "fk_compliance_operator_scan_configuration_v2_profiles_c68197db9" FOREIGN KEY ("compliance_operator_scan_configuration_v2_id") REFERENCES "compliance_operator_scan_configuration_v2"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorscanconfigurationv2profiles_idx" ON "compliance_operator_scan_configuration_v2_profiles" USING btree("idx");
CREATE TABLE "compliance_operator_scan_configuration_v2_clusters" ("compliance_operator_scan_configuration_v2_id" uuid,"idx" integer,"clusterid" uuid,PRIMARY KEY ("compliance_operator_scan_configuration_v2_id","idx"),CONSTRAINT "fk_compliance_operator_scan_configuration_v2_clusters_c45d36757" FOREIGN KEY ("compliance_operator_scan_configuration_v2_id") REFERENCES "compliance_operator_scan_configuration_v2"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorscanconfigurationv2clusters_sac_filter" ON "compliance_operator_scan_configuration_v2_clusters" USING hash("clusterid");
CREATE INDEX IF NOT EXISTS "complianceoperatorscanconfigurationv2clusters_idx" ON "compliance_operator_scan_configuration_v2_clusters" USING btree("idx");
CREATE TABLE "notifiers" ("id" varchar,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_notifiers_name" UNIQUE ("name"));
CREATE TABLE "compliance_operator_scan_configuration_v2_notifiers" ("compliance_operator_scan_configuration_v2_id" uuid,"idx" integer,"id" varchar,PRIMARY KEY ("compliance_operator_scan_configuration_v2_id","idx"),CONSTRAINT "fk_compliance_operator_scan_configuration_v2_notifiers_9964bf33" FOREIGN KEY ("compliance_operator_scan_configuration_v2_id") REFERENCES "compliance_operator_scan_configuration_v2"("id") ON DELETE CASCADE,CONSTRAINT "fk_compliance_operator_scan_configuration_v2_notifiers_c565a2d1" FOREIGN KEY ("id") REFERENCES "notifiers"("id") ON DELETE RESTRICT);
CREATE INDEX IF NOT EXISTS "complianceoperatorscanconfigurationv2notifiers_idx" ON "compliance_operator_scan_configuration_v2_notifiers" USING btree("idx");
CREATE TABLE "compliance_operator_profile_v2" ("id" varchar,"profileid" varchar,"name" varchar,"profileversion" varchar,"producttype" varchar,"standard" varchar,"clusterid" uuid,"profilerefid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorprofilev2_sac_filter" ON "compliance_operator_profile_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_profile_v2_rules" ("compliance_operator_profile_v2_id" varchar,"idx" integer,"rulename" varchar,PRIMARY KEY ("compliance_operator_profile_v2_id","idx"),CONSTRAINT "fk_compliance_operator_profile_v2_rules_compliance_oper55f27d3c" FOREIGN KEY ("compliance_operator_profile_v2_id") REFERENCES "compliance_operator_profile_v2"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorprofilev2rules_idx" ON "compliance_operator_profile_v2_rules" USING btree("idx");
CREATE TABLE "compliance_operator_scan_v2" ("id" varchar,"scanconfigname" varchar,"clusterid" uuid,"profile_profilerefid" uuid,"status_result" varchar,"lastexecutedtime" timestamp,"scanname" varchar,"scanrefid" uuid,"laststartedtime" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorscanv2_sac_filter" ON "compliance_operator_scan_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_rule_v2" ("id" varchar,"name" varchar,"ruletype" varchar,"severity" integer,"clusterid" uuid,"rulerefid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorrulev2_sac_filter" ON "compliance_operator_rule_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_rule_v2_controls" ("compliance_operator_rule_v2_id" varchar,"idx" integer,"standard" varchar,"control" varchar,PRIMARY KEY ("compliance_operator_rule_v2_id","idx"),CONSTRAINT "fk_compliance_operator_rule_v2_controls_compliance_oper55523455" FOREIGN KEY ("compliance_operator_rule_v2_id") REFERENCES "compliance_operator_rule_v2"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorrulev2controls_idx" ON "compliance_operator_rule_v2_controls" USING btree("idx");
CREATE TABLE "compliance_operator_check_result_v2" ("id" varchar,"checkid" varchar,"checkname" varchar,"clusterid" uuid,"status" integer,"severity" integer,"createdtime" timestamp,"scanconfigname" varchar,"rationale" varchar,"scanrefid" uuid,"rulerefid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorcheckresultv2_sac_filter" ON "compliance_operator_check_result_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_check_results" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_cluster_scan_config_statuses" ("id" uuid,"clusterid" uuid,"scanconfigid" uuid,"lastupdatedtime" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorclusterscanconfigstatuses_sac_filter" ON "compliance_operator_cluster_scan_config_statuses" USING hash("clusterid");
CREATE TABLE "compliance_operator_profiles" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_remediation_v2" ("id" uuid,"name" varchar,"compliancecheckresultname" varchar,"clusterid" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorremediationv2_sac_filter" ON "compliance_operator_remediation_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_report_snapshot_v2" ("reportid" uuid,"scanconfigurationid" uuid,"name" varchar,"reportstatus_runstate" integer,"reportstatus_startedat" timestamp,"reportstatus_completedat" timestamp,"reportstatus_reportrequesttype" integer,"reportstatus_reportnotificationmethod" integer,"user_id" varchar,"user_name" varchar,"serialized" bytea,PRIMARY KEY ("reportid"),CONSTRAINT "fk_compliance_operator_report_snapshot_v2_compliance_op4653ba9c" FOREIGN KEY ("scanconfigurationid") REFERENCES "compliance_operator_scan_configuration_v2"("id") ON DELETE CASCADE);
CREATE TABLE "compliance_operator_report_snapshot_v2_scans" ("compliance_operator_report_snapshot_v2_reportid" uuid,"idx" integer,"scanrefid" varchar,"laststartedtime" timestamp,PRIMARY KEY ("compliance_operator_report_snapshot_v2_reportid","idx"),CONSTRAINT "fk_compliance_operator_report_snapshot_v2_scans_complia4e9b3bd3" FOREIGN KEY ("compliance_operator_report_snapshot_v2_reportid") REFERENCES "compliance_operator_report_snapshot_v2"("reportid") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "complianceoperatorreportsnapshotv2scans_idx" ON "compliance_operator_report_snapshot_v2_scans" USING btree("idx");
CREATE TABLE "compliance_operator_rules" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_scan_setting_binding_v2" ("id" varchar,"name" varchar,"clusterid" uuid,"scansettingname" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorscansettingbindingv2_sac_filter" ON "compliance_operator_scan_setting_binding_v2" USING hash("clusterid");
CREATE TABLE "compliance_operator_scan_setting_bindings" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_scans" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "compliance_operator_suite_v2" ("id" uuid,"name" varchar,"clusterid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "complianceoperatorsuitev2_sac_filter" ON "compliance_operator_suite_v2" USING hash("clusterid");
CREATE TABLE "compliance_run_metadata" ("runid" varchar,"standardid" varchar,"clusterid" uuid,"finishtimestamp" timestamp,"serialized" bytea,PRIMARY KEY ("runid"));
CREATE INDEX IF NOT EXISTS "compliancerunmetadata_sac_filter" ON "compliance_run_metadata" USING hash("clusterid");
CREATE TABLE "compliance_run_results" ("runmetadata_runid" varchar,"runmetadata_standardid" varchar,"runmetadata_clusterid" uuid,"runmetadata_finishtimestamp" timestamp,"serialized" bytea,PRIMARY KEY ("runmetadata_runid"));
CREATE INDEX IF NOT EXISTS "compliancerunresults_sac_filter" ON "compliance_run_results" USING hash("runmetadata_clusterid");
CREATE TABLE "compliance_strings" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "configs" ("serialized" bytea);
CREATE TABLE "declarative_config_healths" ("id" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "delegated_registry_configs" ("serialized" bytea);
CREATE TABLE "discovered_clusters" ("id" uuid,"metadata_name" varchar,"metadata_type" integer,"metadata_firstdiscoveredat" timestamp,"status" integer,"sourceid" uuid,"lastupdatedat" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "external_backups" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "groups" ("props_id" varchar,"props_authproviderid" varchar,"props_key" varchar,"props_value" varchar,"rolename" varchar,"serialized" bytea,PRIMARY KEY ("props_id"));
CREATE UNIQUE INDEX IF NOT EXISTS "groups_unique_indicator" ON "groups" ("props_authproviderid","props_key","props_value","rolename");
CREATE TABLE "hashes" ("clusterid" varchar,"serialized" bytea,PRIMARY KEY ("clusterid"));
CREATE TABLE "image_cves" ("id" varchar,"cvebaseinfo_cve" varchar,"cvebaseinfo_publishedon" timestamp,"cvebaseinfo_createdat" timestamp,"cvebaseinfo_epss_epssprobability" numeric,"operatingsystem" varchar,"cvss" numeric,"severity" integer,"impactscore" numeric,"snoozed" boolean,"snoozeexpiry" timestamp,"nvdcvss" numeric,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "imagecves_cvebaseinfo_cve" ON "image_cves" USING btree("cvebaseinfo_cve");
CREATE TABLE "image_component_cve_edges" ("id" varchar,"isfixable" boolean,"fixedby" varchar,"imagecomponentid" varchar,"imagecveid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_image_component_cve_edges_image_components_ref" FOREIGN KEY ("imagecomponentid") REFERENCES "image_components"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "imagecomponentcveedges_imagecveid" ON "image_component_cve_edges" USING hash("imagecveid");
CREATE INDEX IF NOT EXISTS "imagecomponentcveedges_imagecomponentid" ON "image_component_cve_edges" USING hash("imagecomponentid");
CREATE TABLE "images" ("id" varchar,"name_registry" varchar,"name_remote" varchar,"name_tag" varchar,"name_fullname" varchar,"metadata_v1_created" timestamp,"metadata_v1_user" varchar,"metadata_v1_command" text[],"metadata_v1_entrypoint" text[],"metadata_v1_volumes" text[],"metadata_v1_labels" jsonb,"scan_scantime" timestamp,"scan_operatingsystem" varchar,"signature_fetched" timestamp,"components" integer,"cves" integer,"fixablecves" integer,"lastupdated" timestamp,"priority" bigint,"riskscore" numeric,"topcvss" numeric,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "images_layers" ("images_id" varchar,"idx" integer,"instruction" varchar,"value" varchar,PRIMARY KEY ("images_id","idx"),CONSTRAINT "fk_images_layers_images_ref" FOREIGN KEY ("images_id") REFERENCES "images"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "imageslayers_idx" ON "images_layers" USING btree("idx");
CREATE TABLE "image_component_edges" ("id" varchar,"location" varchar,"imageid" varchar,"imagecomponentid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_image_component_edges_images_ref" FOREIGN KEY ("imageid") REFERENCES "images"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "imagecomponentedges_imagecomponentid" ON "image_component_edges" USING hash("imagecomponentid");
CREATE INDEX IF NOT EXISTS "imagecomponentedges_imageid" ON "image_component_edges" USING hash("imageid");
CREATE TABLE "image_cve_edges" ("id" varchar,"firstimageoccurrence" timestamp,"state" integer,"imageid" varchar,"imagecveid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_image_cve_edges_images_ref" FOREIGN KEY ("imageid") REFERENCES "images"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "imagecveedges_imagecveid" ON "image_cve_edges" USING hash("imagecveid");
CREATE INDEX IF NOT EXISTS "imagecveedges_imageid" ON "image_cve_edges" USING hash("imageid");
CREATE TABLE "image_integrations" ("id" uuid,"name" varchar,"clusterid" uuid,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_image_integrations_name" UNIQUE ("name"));
CREATE INDEX IF NOT EXISTS "imageintegrations_sac_filter" ON "image_integrations" USING btree("clusterid");
CREATE TABLE "installation_infos" ("serialized" bytea);
CREATE TABLE "integration_healths" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "k8s_roles" ("id" uuid,"name" varchar,"namespace" varchar,"clusterid" uuid,"clustername" varchar,"clusterrole" boolean,"labels" jsonb,"annotations" jsonb,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "k8sroles_sac_filter" ON "k8s_roles" USING btree("namespace","clusterid");
CREATE TABLE "process_indicators" ("id" uuid,"deploymentid" uuid,"containername" varchar,"podid" varchar,"poduid" uuid,"signal_containerid" varchar,"signal_time" timestamp,"signal_name" varchar,"signal_args" varchar,"signal_execfilepath" varchar,"signal_uid" bigint,"clusterid" uuid,"namespace" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "processindicators_poduid" ON "process_indicators" USING hash("poduid");
CREATE INDEX IF NOT EXISTS "processindicators_deploymentid" ON "process_indicators" USING hash("deploymentid");
CREATE INDEX IF NOT EXISTS "processindicators_sac_filter" ON "process_indicators" USING btree("clusterid","namespace");
CREATE INDEX IF NOT EXISTS "processindicators_signal_time" ON "process_indicators" USING btree("signal_time");
CREATE TABLE "pods" ("id" uuid,"name" varchar,"deploymentid" uuid,"namespace" varchar,"clusterid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "pods_sac_filter" ON "pods" USING btree("namespace","clusterid");
CREATE TABLE "pods_live_instances" ("pods_id" uuid,"idx" integer,"imagedigest" varchar,PRIMARY KEY ("pods_id","idx"),CONSTRAINT "fk_pods_live_instances_pods_ref" FOREIGN KEY ("pods_id") REFERENCES "pods"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "podsliveinstances_idx" ON "pods_live_instances" USING btree("idx");
CREATE TABLE "listening_endpoints" ("id" uuid,"port" bigint,"protocol" integer,"closetimestamp" timestamp,"processindicatorid" uuid,"closed" boolean,"deploymentid" uuid,"poduid" uuid,"clusterid" uuid,"namespace" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "listeningendpoints_poduid" ON "listening_endpoints" USING hash("poduid");
CREATE INDEX IF NOT EXISTS "listeningendpoints_deploymentid" ON "listening_endpoints" USING btree("deploymentid");
CREATE INDEX IF NOT EXISTS "listeningendpoints_closed" ON "listening_endpoints" USING btree("closed");
CREATE INDEX IF NOT EXISTS "listeningendpoints_processindicatorid" ON "listening_endpoints" USING btree("processindicatorid");
CREATE INDEX IF NOT EXISTS "listeningendpoints_sac_filter" ON "listening_endpoints" USING btree("clusterid","namespace");
CREATE TABLE "log_imbues" ("id" varchar,"timestamp" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "network_baselines" ("deploymentid" uuid,"clusterid" uuid,"namespace" varchar,"serialized" bytea,PRIMARY KEY ("deploymentid"));
CREATE INDEX IF NOT EXISTS "networkbaselines_sac_filter" ON "network_baselines" USING btree("clusterid","namespace");
CREATE TABLE "network_entities" ("info_id" varchar,"info_externalsource_cidr" cidr,"info_externalsource_default" boolean,"info_externalsource_discovered" boolean,"serialized" bytea,PRIMARY KEY ("info_id"));
CREATE INDEX IF NOT EXISTS "networkentities_info_externalsource_cidr" ON "network_entities" USING btree("info_externalsource_cidr");
CREATE TABLE IF NOT EXISTS network_flows_v2 (
					Flow_id bigserial,
					Props_SrcEntity_Type integer,
					Props_SrcEntity_Id varchar,
					Props_DstEntity_Type integer,
					Props_DstEntity_Id varchar,
					Props_DstPort integer,
					Props_L4Protocol integer,
					LastSeenTimestamp timestamp,
					ClusterId varchar,
					PRIMARY KEY(ClusterId, Flow_id)
			) PARTITION BY LIST (ClusterId);
CREATE INDEX IF NOT EXISTS network_flows_src_v2 ON network_flows_v2 USING hash(props_srcentity_Id);
CREATE INDEX IF NOT EXISTS network_flows_dst_v2 ON network_flows_v2 USING hash(props_dstentity_Id);
CREATE INDEX IF NOT EXISTS network_flows_lastseentimestamp_v2 ON network_flows_v2 USING brin (lastseentimestamp);
CREATE TABLE "network_graph_configs" ("id" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "networkpolicies" ("id" varchar,"clusterid" uuid,"namespace" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "networkpolicies_sac_filter" ON "networkpolicies" USING btree("clusterid","namespace");
CREATE TABLE "networkpoliciesundodeployments" ("deploymentid" uuid,"serialized" bytea,PRIMARY KEY ("deploymentid"));
CREATE TABLE "networkpolicyapplicationundorecords" ("clusterid" uuid,"serialized" bytea,PRIMARY KEY ("clusterid"));
CREATE TABLE "nodes" ("id" uuid,"name" varchar,"clusterid" uuid,"clustername" varchar,"labels" jsonb,"annotations" jsonb,"joinedat" timestamp,"containerruntime_version" varchar,"osimage" varchar,"lastupdated" timestamp,"scan_scantime" timestamp,"components" integer,"cves" integer,"fixablecves" integer,"priority" bigint,"riskscore" numeric,"topcvss" numeric,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "nodes_sac_filter" ON "nodes" USING hash("clusterid");
CREATE TABLE "nodes_taints" ("nodes_id" uuid,"idx" integer,"key" varchar,"value" varchar,"tainteffect" integer,PRIMARY KEY ("nodes_id","idx"),CONSTRAINT "fk_nodes_taints_nodes_ref" FOREIGN KEY ("nodes_id") REFERENCES "nodes"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "nodestaints_idx" ON "nodes_taints" USING btree("idx");
CREATE TABLE "node_components" ("id" varchar,"name" varchar,"version" varchar,"priority" bigint,"riskscore" numeric,"topcvss" numeric,"operatingsystem" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "node_component_edges" ("id" varchar,"nodeid" uuid,"nodecomponentid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_node_component_edges_nodes_ref" FOREIGN KEY ("nodeid") REFERENCES "nodes"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "nodecomponentedges_nodecomponentid" ON "node_component_edges" USING hash("nodecomponentid");
CREATE INDEX IF NOT EXISTS "nodecomponentedges_nodeid" ON "node_component_edges" USING hash("nodeid");
CREATE TABLE "node_cves" ("id" varchar,"cvebaseinfo_cve" varchar,"cvebaseinfo_publishedon" timestamp,"cvebaseinfo_createdat" timestamp,"cvebaseinfo_epss_epssprobability" numeric,"operatingsystem" varchar,"cvss" numeric,"severity" integer,"impactscore" numeric,"snoozed" boolean,"snoozeexpiry" timestamp,"orphaned" boolean,"orphanedtime" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "nodecves_cvebaseinfo_cve" ON "node_cves" USING btree("cvebaseinfo_cve");
CREATE TABLE "node_components_cves_edges" ("id" varchar,"isfixable" boolean,"fixedby" varchar,"nodecomponentid" varchar,"nodecveid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_node_components_cves_edges_node_components_ref" FOREIGN KEY ("nodecomponentid") REFERENCES "node_components"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "nodecomponentscvesedges_nodecveid" ON "node_components_cves_edges" USING hash("nodecveid");
CREATE INDEX IF NOT EXISTS "nodecomponentscvesedges_nodecomponentid" ON "node_components_cves_edges" USING hash("nodecomponentid");
CREATE TABLE "notification_schedules" ("serialized" bytea);
CREATE TABLE "notifier_enc_configs" ("serialized" bytea);
CREATE TABLE "permission_sets" ("id" uuid,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_permission_sets_name" UNIQUE ("name"));
CREATE TABLE "policies" ("id" varchar,"name" varchar,"description" varchar,"disabled" boolean,"categories" text[],"lifecyclestages" int[],"severity" integer,"enforcementactions" int[],"lastupdated" timestamp,"sortname" varchar,"sortlifecyclestage" varchar,"sortenforcement" boolean,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_policies_name" UNIQUE ("name"));
CREATE INDEX IF NOT EXISTS "policies_id" ON "policies" USING btree("id");
CREATE TABLE "policy_categories" ("id" varchar,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_policy_categories_name" UNIQUE ("name"));
ALTER TABLE "policies" ALTER COLUMN "lifecyclestages" TYPE int[] USING "lifecyclestages"::int[];
ALTER TABLE "policies" ALTER COLUMN "enforcementactions" TYPE int[] USING "enforcementactions"::int[];
CREATE TABLE "policy_category_edges" ("id" varchar,"policyid" varchar,"categoryid" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "fk_policy_category_edges_policies_ref" FOREIGN KEY ("policyid") REFERENCES "policies"("id") ON DELETE CASCADE,CONSTRAINT "fk_policy_category_edges_policy_categories_ref" FOREIGN KEY ("categoryid") REFERENCES "policy_categories"("id") ON DELETE CASCADE);
CREATE TABLE "process_baseline_results" ("deploymentid" uuid,"clusterid" uuid,"namespace" varchar,"serialized" bytea,PRIMARY KEY ("deploymentid"));
CREATE INDEX IF NOT EXISTS "processbaselineresults_sac_filter" ON "process_baseline_results" USING btree("clusterid","namespace");
CREATE TABLE "process_baselines" ("id" varchar,"key_deploymentid" uuid,"key_clusterid" uuid,"key_namespace" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "processbaselines_sac_filter" ON "process_baselines" USING btree("key_clusterid","key_namespace");
CREATE INDEX IF NOT EXISTS "processbaselines_key_deploymentid" ON "process_baselines" USING hash("key_deploymentid");
CREATE TABLE "report_configurations" ("id" varchar,"name" varchar,"type" integer,"scopeid" varchar,"resourcescope_collectionid" varchar,"creator_name" varchar,"serialized" bytea,PRIMARY KEY ("id"));
CREATE TABLE "report_configurations_notifiers" ("report_configurations_id" varchar,"idx" integer,"id" varchar,PRIMARY KEY ("report_configurations_id","idx"),CONSTRAINT "fk_report_configurations_notifiers_notifiers_ref" FOREIGN KEY ("id") REFERENCES "notifiers"("id") ON DELETE RESTRICT,CONSTRAINT "fk_report_configurations_notifiers_report_configurations_ref" FOREIGN KEY ("report_configurations_id") REFERENCES "report_configurations"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "reportconfigurationsnotifiers_idx" ON "report_configurations_notifiers" USING btree("idx");
CREATE TABLE "report_snapshots" ("reportid" uuid,"reportconfigurationid" varchar,"name" varchar,"reportstatus_runstate" integer,"reportstatus_queuedat" timestamp,"reportstatus_completedat" timestamp,"reportstatus_reportrequesttype" integer,"reportstatus_reportnotificationmethod" integer,"requester_id" varchar,"requester_name" varchar,"serialized" bytea,PRIMARY KEY ("reportid"),CONSTRAINT "fk_report_snapshots_report_configurations_ref" FOREIGN KEY ("reportconfigurationid") REFERENCES "report_configurations"("id") ON DELETE CASCADE);
CREATE TABLE "risks" ("id" varchar,"subject_namespace" varchar,"subject_clusterid" uuid,"subject_type" integer,"score" numeric,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "risks_sac_filter" ON "risks" USING btree("subject_namespace","subject_clusterid");
CREATE TABLE "role_bindings" ("id" uuid,"name" varchar,"namespace" varchar,"clusterid" uuid,"clustername" varchar,"clusterrole" boolean,"labels" jsonb,"annotations" jsonb,"roleid" uuid,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "rolebindings_sac_filter" ON "role_bindings" USING btree("namespace","clusterid");
CREATE TABLE "role_bindings_subjects" ("role_bindings_id" uuid,"idx" integer,"kind" integer,"name" varchar,PRIMARY KEY ("role_bindings_id","idx"),CONSTRAINT "fk_role_bindings_subjects_role_bindings_ref" FOREIGN KEY ("role_bindings_id") REFERENCES "role_bindings"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "rolebindingssubjects_idx" ON "role_bindings_subjects" USING btree("idx");
CREATE TABLE "secrets" ("id" uuid,"name" varchar,"clusterid" uuid,"clustername" varchar,"namespace" varchar,"createdat" timestamp,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "secrets_sac_filter" ON "secrets" USING btree("clusterid","namespace");
CREATE TABLE "secrets_files" ("secrets_id" uuid,"idx" integer,"type" integer,"cert_enddate" timestamp,PRIMARY KEY ("secrets_id","idx"),CONSTRAINT "fk_secrets_files_secrets_ref" FOREIGN KEY ("secrets_id") REFERENCES "secrets"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "secretsfiles_idx" ON "secrets_files" USING btree("idx");
CREATE TABLE "secrets_files_registries" ("secrets_id" uuid,"secrets_files_idx" integer,"idx" integer,"name" varchar,PRIMARY KEY ("secrets_id","secrets_files_idx","idx"),CONSTRAINT "fk_secrets_files_registries_secrets_files_ref" FOREIGN KEY ("secrets_id","secrets_files_idx") REFERENCES "secrets_files"("secrets_id","idx") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "secretsfilesregistries_idx" ON "secrets_files_registries" USING btree("idx");
CREATE TABLE "secured_units" ("id" uuid,"timestamp" timestamp,"numnodes" bigint,"numcpuunits" bigint,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_secured_units_timestamp" UNIQUE ("timestamp"));
CREATE TABLE "sensor_upgrade_configs" ("serialized" bytea);
CREATE TABLE "service_accounts" ("id" uuid,"name" varchar,"namespace" varchar,"clustername" varchar,"clusterid" uuid,"labels" jsonb,"annotations" jsonb,"serialized" bytea,PRIMARY KEY ("id"));
CREATE INDEX IF NOT EXISTS "serviceaccounts_sac_filter" ON "service_accounts" USING btree("namespace","clusterid");
CREATE TABLE "service_identities" ("serialstr" varchar,"serialized" bytea,PRIMARY KEY ("serialstr"));
CREATE TABLE "signature_integrations" ("id" varchar,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_signature_integrations_name" UNIQUE ("name"));
CREATE TABLE "simple_access_scopes" ("id" uuid,"name" varchar,"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_simple_access_scopes_name" UNIQUE ("name"));
CREATE TABLE "system_infos" ("backupinfo_requestor_name" varchar,"serialized" bytea);
CREATE TABLE "versions" ("seqnum" integer,"version" varchar,"lastpersisted" timestamp,"minseqnum" integer,"serialized" bytea);
CREATE TABLE "vulnerability_requests" ("id" varchar,"name" varchar,"targetstate" integer,"status" integer,"expired" boolean,"requestor_name" varchar,"createdat" timestamp,"lastupdated" timestamp,"scope_imagescope_registry" varchar,"scope_imagescope_remote" varchar,"scope_imagescope_tag" varchar,"requesterv2_id" varchar,"requesterv2_name" varchar,"deferralreq_expiry_expireson" timestamp,"deferralreq_expiry_expireswhenfixed" boolean,"deferralreq_expiry_expirytype" integer,"cves_cves" text[],"deferralupdate_cves" text[],"falsepositiveupdate_cves" text[],"serialized" bytea,PRIMARY KEY ("id"),CONSTRAINT "uni_vulnerability_requests_name" UNIQUE ("name"));
CREATE TABLE "vulnerability_requests_approvers" ("vulnerability_requests_id" varchar,"idx" integer,"name" varchar,PRIMARY KEY ("vulnerability_requests_id","idx"),CONSTRAINT "fk_vulnerability_requests_approvers_vulnerability_requests_ref" FOREIGN KEY ("vulnerability_requests_id") REFERENCES "vulnerability_requests"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "vulnerabilityrequestsapprovers_idx" ON "vulnerability_requests_approvers" USING btree("idx");
CREATE TABLE "vulnerability_requests_comments" ("vulnerability_requests_id" varchar,"idx" integer,"user_name" varchar,PRIMARY KEY ("vulnerability_requests_id","idx"),CONSTRAINT "fk_vulnerability_requests_comments_vulnerability_requests_ref" FOREIGN KEY ("vulnerability_requests_id") REFERENCES "vulnerability_requests"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "vulnerabilityrequestscomments_idx" ON "vulnerability_requests_comments" USING btree("idx");
CREATE TABLE "vulnerability_requests_approvers_v2" ("vulnerability_requests_id" varchar,"idx" integer,"id" varchar,"name" varchar,PRIMARY KEY ("vulnerability_requests_id","idx"),CONSTRAINT "fk_vulnerability_requests_approvers_v2_vulnerability_reaef85e7a" FOREIGN KEY ("vulnerability_requests_id") REFERENCES "vulnerability_requests"("id") ON DELETE CASCADE);
CREATE INDEX IF NOT EXISTS "vulnerabilityrequestsapproversv2_idx" ON "vulnerability_requests_approvers_v2" USING btree("idx");
CREATE TABLE "watched_images" ("name" varchar,"serialized" bytea,PRIMARY KEY ("name"));
