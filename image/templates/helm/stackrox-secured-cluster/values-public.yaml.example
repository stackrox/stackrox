# StackRox Kubernetes Security Platform - Secured Cluster Services Chart
# PUBLIC configuration file.
#
# This file contains general configuration values relevant for the deployment of the
# StackRox Kubernetes Platform Secured Cluster Services components, which do not contain
# or reference sensitive data. This file can and should be stored in a source code
# management system and should be referenced on each `helm upgrade`.
#
# Most of the values in this file are optional, and you only should need to make modifications
# if the default deployment configuration is not sufficient for you for whatever reason.
# The most notable exceptios are
#
# - `clusterName`,
# - `centralEndpoint` and
# - `imagePullSecrets`.
#
# # BEGIN CONFIGURATION VALUES SECTION
#
## The cluster name. A new cluster of this name will be automatically registered at StackRox Central
## when deploying this Helm chart. Make sure that this name is unique among the set of secured clusters.
#clusterName: null
#
## To change the cluster name, confirm the new cluster name in this field. It should match the `clusterName` value.
## You don't need to change this unless you upgrade and change the value for clusterName.
## In this case, set it to the new value of clusterName. This option exists to prevent you from accidentally
## creating a new cluster with a different name.
#confirmNewClusterName: null
#
## Custom labels associated with a secured cluster in StackRox.
#clusterLabels: {}
#
## The gRPC endpoint for accessing StackRox Central.
#centralEndpoint: central.{{ .Release.Namespace }}.svc:443
#
## A dictionary of additional CA certificates to include (PEM encoded).
## For example:
##   additionalCAs:
##     acme-labs-ca.pem: |
##       -----BEGIN CERTIFICATE-----
##       [...]
##       -----END CERTIFICATE-----
#additionalCAs: null
#
# Specify `true` to create the `sensor-upgrader` account. By default, the StackRox Kubernetes
# Security Platform creates a service account called `sensor-upgrader` in each secured cluster.
# This account is highly privileged but is only used during upgrades. If you don’t create this
# account, you will have to complete future upgrades manually if the Sensor doesn’t have enough
# permissions. See
# [Enable automatic upgrades for secured clusters](https://help.stackrox.com/docs/configure-stackrox/enable-automatic-upgrades/)
# for more information.
# Note that auto-upgrades for Helm-managed clusters are disabled.
#createUpgraderServiceAccount: false
#
## Configuration for image pull secrets.
## These should usually be set via the command line when running `helm install`, e.g.,
## helm install --set imagePullSecrets.username=myuser --set imagePullSecrets.password=mypass,
## or be stored in a separate YAML-encoded secrets file.
#imagePullSecrets:
#
#  # If no image pull secrets are provided, an installation would usually fail. In order to
#  # prevent it from failing, this option must explicitly be set to true.
#  allowNone: false
#
#  # If there exist available image pull secrets in the cluster that are managed separately,
#  # set this value to the list of the respective secret names. While it is recommended to
#  # record the secret names in a persisted YAML file, providing a single string containing
#  # a comma-delimited list of secret names is also supported, for easier interaction with
#  # --set.
#  useExisting: []
#
#  # Whether to import any secrets from the default service account existing in the StackRox
#  # namespace. The default service account often contains "standard" image pull secrets that
#  # should be used by default for image pulls, hence this defaults to true. Only has an effect
#  # if server-side lookups are enabled.
#  useFromDefaultServiceAccount: true
#
## Settings regarding the installation environment
#env:
#  # Treat the environment as an OpenShift cluster. Leave this unset to use auto-detection
#  # based on available API resources on the server.
#  # Set it to true to auto-detect the OpenShift version, otherwise set it explicitly.
#  # Possible values: null, false, true, 3, 4
#  openshift: null
#
#  # Treat the environment as Istio-enabled. Leave this unset to use auto-detection based on
#  # available API resources on the server.
#  # Possible values: null, false, true
#  istio: null
#
## PEM-encoded StackRox Service CA certificate.
#ca:
#  cert: null
#
## Image configuration
#image:
#  # The image registry to use. Unless overridden in the more specific configs, this
#  # determines the base registry for each image referenced in this config file.
#  registry: my.image-registry.io
#
#  # Configuration for the `main` image -- used by Sensor, Admission Control, Compliance.
#  main:
#    registry: null  # if set to null, use `image.registry`
#    name: main      # the final image name is composed of the registry and the name, plus the tag below
#    tag: null       # should be left as null - will get picked up from the Chart version.
#    fullRef: null   # you can set a full image reference such as stackrox.io/main:1.2.3.4 here, but this is not
#                    # recommended.
#    # The default pull policy for this image. Can be overridden for each individual service.
#    pullPolicy: IfNotPresent
#
#  # Configuration for the `collector` image -- used by Collector.
#  collector:
#    registry: null
#    name: collector
#    tag: null
#    fullRef: null
#    pullPolicy: IfNotPresent
#
## Sensor specific configuration.
#sensor:
#
#  # Kubernetes image pull policy for Sensor.
#  imagePullPolicy: IfNotPresent
#
#  # Resource configuration for the sensor container.
#  resources:
#    requests:
#      memory: "4Gi"
#      cpu: "2"
#    limits:
#      memory: "8Gi"
#      cpu: "4"
#
#  # Settings for the internal service-to-service TLS certificate used by Sensor.
#  serviceTLS:
#    cert: null
#    key: null
#
#  # Use a nodeSelector for sensor
#  nodeSelector
#    environment: production
#
#  If the nodes selected by the node selector are tainted, you can specify the corresponding taint tolerations here.
#  tolerations:
#    - effect: NoSchedule
#      key: infra
#      value: reserved
#    - effect: NoExecute
#      key: infra
#      value: reserved
#
#   If scheduling needs specific affinities, you can specify the corresponding affinities here.
#   affinity:
#     nodeAffinity:
#       preferredDuringSchedulingIgnoredDuringExecution:
#         # Sensor is single-homed, so avoid preemptible nodes.
#         - weight: 100
#           preference:
#             matchExpressions:
#               - key: cloud.google.com/gke-preemptible
#                 operator: NotIn
#                 values:
#                 - "true"
#         - weight: 50
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/infra
#               operator: Exists
#         - weight: 25
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/compute
#               operator: Exists
#         # From v1.20 node-role.kubernetes.io/control-plane replaces node-role.kubernetes.io/master (removed in
#         # v1.25). We apply both because our goal is not to run pods on control plane nodes for any version of k8s.
#         - weight: 100
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/master
#               operator: DoesNotExist
#         - weight: 100
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/control-plane
#               operator: DoesNotExist
#
#  # Address of the Sensor endpoint including port number. No trailing slash.
#  # Rarely needs to be changed.
#  endpoint: sensor.stackrox.svc:443
#
## Admission Control specific configuration.
#admissionControl:
#
#  # This setting controls whether the cluster is configured to contact the StackRox
#  # Kubernetes Security Platform with `AdmissionReview` requests for create events on
#  # Kubernetes objects.
#  listenOnCreates: false
#
#  # This setting controls whether the cluster is configured to contact the StackRox Kubernetes
#  # Security Platform with `AdmissionReview` requests for update events on Kubernetes objects.
#  listenOnUpdates: false
#
#  # This setting controls whether the cluster is configured to contact the StackRox
#  # Kubernetes Security Platform with `AdmissionReview` requests for update Kubernetes events
#  # like exec and portforward.
#  #
#  # Defaults to `false` on OpenShift, to `true` otherwise.
#  listenOnEvents: true
#
#  # Use a nodeSelector for admission control pods
#  nodeSelector
#    environment: production
#
#  If the nodes selected by the node selector are tainted, you can specify the corresponding taint tolerations here.
#  tolerations:
#    - effect: NoSchedule
#      key: infra
#      value: reserved
#    - effect: NoExecute
#      key: infra
#      value: reserved
#
#   If scheduling needs specific affinities, you can specify the corresponding affinities here.
#   affinity:
#     nodeAffinity:
#       preferredDuringSchedulingIgnoredDuringExecution:
#         # node-role.kubernetes.io/master is replaced by node-role.kubernetes.io/control-plane from certain version
#         # of k8s. We apply both to be compatible with any k8s version.
#         - weight: 50
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/master
#               operator: Exists
#         - weight: 50
#           preference:
#             matchExpressions:
#             - key: node-role.kubernetes.io/control-plane
#               operator: Exists
#     podAntiAffinity:
#       preferredDuringSchedulingIgnoredDuringExecution:
#         - weight: 60
#           podAffinityTerm:
#             namespaces: ["stackrox"]
#             topologyKey: "kubernetes.io/hostname"
#             labelSelector:
#               matchLabels:
#                 app: admission-control
#
#  # Dynamic part of the configuration which is retrieved from Central and can be modified through
#  # the frontend.
#  dynamic:
#
#    # It controls whether the StackRox Kubernetes Security Platform evaluates policies for object
#    # updates; if it’s disabled, all `AdmissionReview` requests are automatically accepted. You must
#    # specify `listenOnUpdates` as `true` for this to work.
#    enforceOnUpdates: false
#
#    # Controls whether the StackRox Kubernetes Security Platform evaluates policies.
#    # If disabled, all AdmissionReview requests are automatically accepted. You must specify
#    # `listenOnCreates` as `true` for this to work.
#    enforceOnCreates: false
#
#    scanInline: false
#
#    # If enabled, bypassing the Admission Controller is disabled.
#    disableBypass: false
#
#    # The maximum time in seconds, the StackRox Kubernetes Security Platform should wait while
#    # evaluating admission review requests. Use it to set request timeouts when you enable image scanning.
#    # If the image scan runs longer than the specified time, the StackRox Kubernetes Security Platform
#    # accepts the request. Other enforcement options, such as scaling the deployment to zero replicas,
#    # are still applied later if the image violates applicable policies.
#    timeout: 3
#
#  # Kubernetes image pull policy for Admission Control.
#  imagePullPolicy: IfNotPresent
#
#  # Resource configuration for the Admission Control container.
#  resources:
#    requests:
#      memory: "100Mi"
#      cpu: "50m"
#    limits:
#      memory: "500Mi"
#      cpu: "500m"
#
#  # Replicas configures the replicas of the admission controller pod.
#  replicas: 3
#
#  # Settings for the internal service-to-service TLS certificate used by Admission Control.
#  serviceTLS:
#    cert: null
#    key: null
#
## Collector specific configuration.
#collector:
#
#  # Collection method to use. Can be one of:
#  #   - EBPF
#  #   - CORE_BPF
#  #   - NO_COLLECTION
#  collectionMethod: EBPF
#
#  # Configure usage of taint tolerations. If `false`, tolerations are applied to collector,
#  # and the collector pods can schedule onto all nodes with taints. If `true`, no tolerations
#  # are applied, and the collector pods won't scheduled onto nodes with taints.
#  disableTaintTolerations: false
#
#  # Configure whether slim Collector images should be used or not. Using slim Collector images
#  # requires Central to provide the matching kernel module or eBPF probe. If you are running
#  # the StackRox Kubernetes Security Platform in offline mode, you must download a kernel support
#  # package from [stackrox.io](https://install.stackrox.io/collector/support-packages/index.html)
#  # and upload it to Central for slim Collectors to function. Otherwise, you must ensure that
#  # Central can access the online probe repository hosted at https://collector-modules.stackrox.io/.
#  slimMode: false
#
#  # Kubernetes image pull policy for Collector.
#  imagePullPolicy: IfNotPresent
#
#  # Resource configuration for the Collector container.
#  resources:
#    requests:
#      memory: "320Mi"
#      cpu: "50m"
#    limits:
#      memory: "1Gi"
#      cpu: "750m"
#
#   If the nodes selected by the node selector are tainted, you can specify the corresponding taint tolerations here.
#   tolerations:
#     - operator: "Exists"
#
#  complianceImagePullPolicy: IfNotPresent
#
#  # Resource configuration for the Compliance container.
#  complianceResources:
#    requests:
#      memory: "10Mi"
#      cpu: "10m"
#    limits:
#      memory: "2Gi"
#      cpu: "1"
#
#  # Resource configuration for the Node Inventory container.
#  nodeScanningResources:
#    requests:
#      memory: "10Mi"
#      cpu: "10m"
#    limits:
#      memory: "500Mi"
#      cpu: "1"
#
#  # Settings for the internal service-to-service TLS certificate used by Collector.
#  serviceTLS:
#    cert: null
#    key: null
#
# # Settings configuring the ingestion of audit logs:
# auditLogs:
#  # Disable audit log collection. This setting defaults to false on OpenShift 4 clusters. On all other cluster types,
#  # it defaults to true, and setting it to false will result in an error.
#  disableCollection: false
#
# # Customization Settings.
# # The following allows specifying custom Kubernetes metadata (labels and annotations)
# # for all objects instantiated by this Helm chart, as well as additional pod labels,
# # pod annotations, and container environment variables for workloads.
# # The configuration is hierarchical, in the sense that metadata that is defined at a more
# # generic scope (e.g., for all objects) can be overridden by metadata defined at a narrower
# # scope (e.g., only for the sensor deployment).
# customize:
#   # Extra metadata for all objects.
#   labels:
#     my-label-key: my-label-value
#   annotations:
#     my-annotation-key: my-annotation-value
#
#   # Extra pod metadata for all objects (only has an effect for workloads, i.e., deployments).
#   podLabels:
#     my-pod-label-key: my-pod-label-value
#   podAnnotations:
#     my-pod-annotation-key: my-pod-annotation-value
#
#   # Extra environment variables for all containers in all objects.
#   envVars:
#     MY_ENV_VAR_NAME: MY_ENV_VAR_VALUE
#
#   # Extra metadata for the Sensor deployment only.
#   sensor:
#     labels: {}
#     annotations: {}
#     podLabels: {}
#     podAnnotations: {}
#     envVars: {}
#
#   # Extra metadata for the collector daemon set only.
#   collector:
#     labels: {}
#     annotations: {}
#     podLabels: {}
#     podAnnotations: {}
#     envVars: {}
#
#   # Extra metadata for the admission control only.
#   admission-control:
#     labels: {}
#     annotations: {}
#     podLabels: {}
#     podAnnotations: {}
#     envVars: {}
#
#   # Extra metadata for the compliance only.
#   compliance:
#     labels: {}
#     annotations: {}
#     podLabels: {}
#     podAnnotations: {}
#     envVars: {}
#
#   # Extra metadata for all other objects. The keys in the following map can be
#   # an object name of the form "service/central-loadbalancer", or a reference to all
#   # objects of a given type in the form "service/*". The values under each key
#   # are the five metadata overrides (labels, annotations, podLabels, podAnnotations, envVars)
#   # as specified above, though only the first two will be relevant for non-workload
#   # object types.
#   other:
#     "service/*":
#       labels: {}
#       annotations: {}
#
# # EXPERT SETTINGS
# # The following settings should only be changed if you know very well what you are doing.
# # The scenarios in which these are required are generally not supported.
#
# # Set allowNonstandardNamespace=true if you are deploying into a namespace other than
# # "stackrox". This has been observed to work in some case, but is not generally supported.
# allowNonstandardNamespace: false
#
# # Set allowNonstandardReleaseName=true if you are deploying with a release name other than
# # the default "stackrox-central-services". This has been observed to work in some cases,
# # but is not generally supported.
# allowNonstandardReleaseName: false
#
#
#meta:
#  # This is a dictionary from file names to contents that can be used to inject files that
#  # would usually be included via .Files.Get into the chart rendering.
#  fileOverrides: {}
#
#  # This configuration section allows overriding settings that would be inferred from the
#  # running API server.
#  apiServer:
#    # The Kubernetes version running on the API server. This is used for auto-detection
#    # of the platform.
#    version: null
#    # The list of available API resources on the server, in the form of "apps/v1" or
#    # "apps/v1/Deployment". This is used to detect environment capabilities.
#    overrideAPIResources: null
#    # A list of extra API resources that should be assumed to exist on the API server. This
#    # can be used in conjunction with both data obtained from the API server, or data set
#    # via `overrideAPIResources`.
#    extraAPIResources: []
#
#monitoring:
#  # Enables integration with OpenShift platform monitoring.
#  openshift:
#    enabled: true
