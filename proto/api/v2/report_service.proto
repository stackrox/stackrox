syntax = "proto3";

option go_package = "v2";
option java_package = "io.stackrox.proto.api.v2";

import "google/protobuf/timestamp.proto";
import "api/v2/common.proto";
import "api/v2/search_query.proto";
import weak "google/api/annotations.proto";
import "api/v2/report_configuration_service.proto";
import "api/v2/user.proto";

package v2;

message GetReportHistoryRequest {
    string   report_config_id  = 1;
    RawQuery report_param_query = 2;
}

message ReportHistoryResponse {
    repeated ReportSnapshot report_snapshots = 1;
}

message ReportStatusResponse {
    ReportStatus status = 1;
}

message CollectionSnapshot {
    string id   = 1;
    string name = 2;
}

message ReportSnapshot {

    string                    id                           = 1;
    string                    name                         = 2;
    string                    description                  = 3;
    oneof                     filter {
        VulnerabilityReportFilters  vuln_report_filters   = 5;
    }
    CollectionSnapshot         collection_snapshot        = 6;
    ReportSchedule             schedule                   = 7;
    ReportStatus               report_status              = 8;
    repeated NotifierSnapshot notifiers                   = 9;
    SlimUser                  user                        = 10;
}

message NotifierSnapshot {
    oneof notifier_config {
        EmailNotifierConfiguration email_config = 1;
    }
    string notifier_name = 2;
}

message ReportStatus {
    enum RunState {
        WAITING   = 0;
        PREPARING = 1;
        SUCCESS   = 2;
        FAILURE   = 3;
    }

    enum ReportMethod {
        ON_DEMAND = 0;
        SCHEDULED = 1;
    }

    RunState                   run_state       = 1;
    google.protobuf.Timestamp  completed_at        = 2;
    string                     error_msg       = 3;
    ReportMethod               report_request_type   = 4;
    NotificationMethod         report_notification_method = 5;
}

enum NotificationMethod {
    EMAIL = 0;
    DOWNLOAD = 1;
}

message RunReportRequest {
    string             report_config_id           = 1;
    NotificationMethod report_notification_method = 2;
}

message RunReportResponse {
    string report_config_id = 1;
    string report_id        = 2;
}

service ReportService {
    // GetReportStatus returns report status for the given report id
    rpc GetReportStatus (ResourceByID) returns (ReportStatusResponse) {
        option (google.api.http) = {
            get: "/v2/reports/status/{id}"
        };
    }
    // GetReportStatusConfigID returns report status for a report config id
    rpc GetLastReportStatusConfigID (ResourceByID) returns (ReportStatusResponse) {
        option (google.api.http) = {
            get: "/v2/reports/last-status/{id}"
        };
    }

    // GetReportHistory returns the full history for a report configuration with the specified ID.
    rpc GetReportHistory(GetReportHistoryRequest) returns (ReportHistoryResponse) {
        option (google.api.http) = {
            get: "/v2/reports/history/{report_config_id}"
        };
    }

    // Submits a new report generation request if the user requesting this report does not have another waiting or preparing
    // report for the same report configuration.
    rpc RunReport(RunReportRequest) returns (RunReportResponse) {
        option (google.api.http) = {
            post: "/v2/reports/run"
            body: "*"
        };
    }

    // Cancels a queued report job for the given report id. If the job is not active, it is a noop.
    // If a report is already being prepared, it won't be cancelled.
    rpc CancelReport(ResourceByID) returns (Empty) {
        option (google.api.http) = {
            delete: "/v2/reports/cancel/{id}"
        };
    }
}
