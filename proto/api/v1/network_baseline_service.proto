syntax = "proto3";

package v1;

import "api/v1/common.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "storage/network_baseline.proto";
import "storage/network_flow.proto";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

message NetworkBaselinePeerEntity {
  string id = 1;
  storage.NetworkEntityInfo.Type type = 2;
}

message NetworkBaselineStatusPeer {
  // The peer entity of the connection. This can be constructed from the
  // entity object of the networkgraph API. Only the ID and type are required.
  NetworkBaselinePeerEntity entity = 1;
  // The port and protocol of the destination of the given connection.
  uint32 port = 2;
  storage.L4Protocol protocol = 3;

  // A boolean representing whether the query is for an ingress or egress
  // connection. This is defined with respect to the current deployment.
  // Thus:
  //   - If the connection in question is in the outEdges of the current deployment,
  //     this should be false.
  //   - If it is in the outEdges of the peer deployment, this
  //     should be true.
  bool ingress = 4;
}

message NetworkBaselinePeerStatus {
  // Status of this peer connection. As of now we only have two statuses:
  //   - BASELINE: the connection is in the current deployment baseline
  //   - ANOMALOUS: the connection is not recognized by the current deployment baseline
  enum Status {
    BASELINE = 0;
    ANOMALOUS = 1;
  }

  NetworkBaselineStatusPeer peer = 1;
  Status status = 2;
}

message NetworkBaselineStatusRequest {
  string deployment_id = 1;
  repeated NetworkBaselineStatusPeer peers = 2;
}

message NetworkBaselineStatusResponse {
  repeated NetworkBaselinePeerStatus statuses = 1;
}

message ModifyBaselineStatusForPeersRequest {
  string deployment_id = 1;
  repeated NetworkBaselinePeerStatus peers = 2;
}

service NetworkBaselineService {
  rpc GetNetworkBaselineStatusForFlows(NetworkBaselineStatusRequest) returns (NetworkBaselineStatusResponse) {
    option (google.api.http) = {
      post: "/v1/networkbaseline/{deployment_id}/status"
      body: "*"
    };
  }

  rpc GetNetworkBaseline(ResourceByID) returns (storage.NetworkBaseline) {
    option (google.api.http) = {get: "/v1/networkbaseline/{id}"};
  }

  rpc ModifyBaselineStatusForPeers(ModifyBaselineStatusForPeersRequest) returns (Empty) {
    option (google.api.http) = {
      patch: "/v1/networkbaseline/{deployment_id}/peers"
      body: "*"
    };
  }

  rpc LockNetworkBaseline(ResourceByID) returns (Empty) {
    option (google.api.http) = {
      patch: "/v1/networkbaseline/{id}/lock"
      body: "*"
    };
  }

  rpc UnlockNetworkBaseline(ResourceByID) returns (Empty) {
    option (google.api.http) = {
      patch: "/v1/networkbaseline/{id}/unlock"
      body: "*"
    };
  }
}
