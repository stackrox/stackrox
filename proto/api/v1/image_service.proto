syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/search_service.proto";
import "api/v1/empty.proto";
import "storage/image.proto";
import "storage/deployment.proto";

package v1;

message GetImageRequest {
    string id              = 1;
    bool   include_snoozed = 2;
}

message ListImagesResponse {
    repeated storage.ListImage images = 1;
}

message CountImagesResponse {
    int32 count = 1;
}

message ScanImageRequest {
    string image_name      = 1;
    bool   force           = 2;
    bool   include_snoozed = 3;
}

message ScanImageInternalRequest {
    storage.ContainerImage image = 1;
    reserved                       2;
    bool cached_only             = 3;
}

message ScanImageInternalResponse {
    storage.Image image = 1;
}

message DeleteImagesRequest {
    RawQuery query   = 1;
    bool     confirm = 2;
}

message DeleteImagesResponse {
    uint32 num_deleted = 1;
    bool   dry_run     = 2;
}

message WatchImageRequest {
    // The name of the image.
    // This must be fully qualified, including a tag,
    // but must NOT include a SHA.
    string name = 1;
}

message WatchImageResponse {
    // If the image was scanned successfully, this returns the normalized name of the image.
    // This depends on what we get from the registry.
    // For example, "docker.io/wordpress:latest" -> "docker.io/library/wordpress:latest"
    string normalized_name = 1;

    enum ErrorType {
      NO_ERROR              = 0;
      INVALID_IMAGE_NAME    = 1;
      NO_VALID_INTEGRATION  = 2;
      SCAN_FAILED           = 3;
    };

    ErrorType error_type  = 2;

    // Only set if error_type is NOT equal to "NO_ERROR".
    string error_message  = 3;

}

message UnwatchImageRequest {
    // The name of the image to unwatch.
    // Should match the name of a previously watched image.
    string name = 1;
}

message GetWatchedImagesResponse {
    repeated storage.WatchedImage watched_images = 1;
}

// ScanImageInternalResponseDetails contains proto messages that are added to details
// when returning errors from the ScanImageInternal endpoint.
message ScanImageInternalResponseDetails {
    // TooManyParallelScans tells sensor that there are too many parallel scans, and that it will need to
    // retry later.
    message TooManyParallelScans {
    }
}


// ImageService APIs manages image metadata.
service ImageService {

    // GetImage returns the image given its ID.
    rpc GetImage (GetImageRequest) returns (storage.Image) {
        option (google.api.http) = {
            get: "/v1/images/{id}"
        };
    }

    // ListImages returns all the images.
    rpc CountImages (RawQuery) returns (CountImagesResponse) {
        option (google.api.http) = {
            get: "/v1/imagescount"
        };
    }

    // ListImages returns all the images.
    rpc ListImages (RawQuery) returns (ListImagesResponse) {
        option (google.api.http) = {
            get: "/v1/images"
        };
    }

    // ScanImage scans a single image and returns the result
    rpc ScanImage (ScanImageRequest) returns (storage.Image) {
        option (google.api.http) = {
            post: "/v1/images/scan"
            body: "*"
        };
    }

    // ScanImageInternal is used solely by the Sensor to send scan requests
    rpc ScanImageInternal (ScanImageInternalRequest) returns (ScanImageInternalResponse);

    // InvalidateScanAndRegistryCaches removes the image metadata cache.
    rpc InvalidateScanAndRegistryCaches (Empty) returns (Empty) {
        option (google.api.http) = {
            get: "/v1/images/cache/invalidate"
        };
    }

    // DeleteImage removes the images based on a query
    rpc DeleteImages (DeleteImagesRequest) returns (DeleteImagesResponse) {
        option (google.api.http) = {
            delete: "/v1/images"
        };
    }

    // WatchImage marks an image name as to be watched.
    rpc WatchImage (WatchImageRequest) returns (WatchImageResponse) {
      option (google.api.http) = {
          post: "/v1/watchedimages"
          body: "*"
      };
    }

    // UnwatchImage marks an image name to no longer be watched.
    // It returns successfully if the image is no longer being watched
    // after the call, irrespective of whether the image was already being watched.
    rpc UnwatchImage (UnwatchImageRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/watchedimages"
        };
    }

    // GetWatchedImages returns the list of image names that are currently
    // being watched.
    rpc GetWatchedImages (Empty) returns (GetWatchedImagesResponse) {
        option (google.api.http) = {
            get: "/v1/watchedimages"
        };
    }

}
