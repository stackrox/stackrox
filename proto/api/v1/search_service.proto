syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/pagination.proto";

package v1;

// Next available tag: 62
enum SearchCategory {
    SEARCH_UNSET                   = 0;
    ALERTS                         = 1;
    IMAGES                         = 2;
    IMAGE_COMPONENTS               = 20;
    IMAGE_VULN_EDGE                = 27;
    IMAGE_COMPONENT_EDGE           = 23;
    POLICIES                       = 3;
    DEPLOYMENTS                    = 4;
    ACTIVE_COMPONENT               = 30;
    PODS                           = 25;
    SECRETS                        = 5;
    PROCESS_INDICATORS             = 6;
    COMPLIANCE                     = 7;
    CLUSTERS                       = 8;
    NAMESPACES                     = 9;
    NODES                          = 10;
    NODE_COMPONENTS                = 38;
    NODE_VULN_EDGE                 = 28;
    NODE_COMPONENT_EDGE            = 29;
    NODE_COMPONENT_CVE_EDGE        = 33;
    COMPLIANCE_STANDARD            = 11;
    COMPLIANCE_CONTROL_GROUP       = 12;
    COMPLIANCE_CONTROL             = 13;
    SERVICE_ACCOUNTS               = 14;
    ROLES                          = 15;
    ROLEBINDINGS                   = 16;
    REPORT_CONFIGURATIONS          = 37;
    PROCESS_BASELINES              = 17;
    SUBJECTS                       = 18;
    RISKS                          = 19;
    VULNERABILITIES                = 21;
    CLUSTER_VULNERABILITIES        = 34;
    IMAGE_VULNERABILITIES          = 35;
    NODE_VULNERABILITIES           = 36;
    COMPONENT_VULN_EDGE            = 22;
    CLUSTER_VULN_EDGE              = 24;
    NETWORK_ENTITY                 = 26;
    VULN_REQUEST                   = 32;
    NETWORK_BASELINE               = 39;
    NETWORK_POLICIES               = 40;
    PROCESS_BASELINE_RESULTS       = 41;
    COMPLIANCE_METADATA            = 42;
    COMPLIANCE_RESULTS             = 43;
    COMPLIANCE_DOMAIN              = 44;
    CLUSTER_HEALTH                 = 45;
    POLICY_CATEGORIES              = 46;
    IMAGE_INTEGRATIONS             = 47;
    COLLECTIONS                    = 48;
    POLICY_CATEGORY_EDGE           = 49;
    PROCESS_LISTENING_ON_PORT      = 50;
    API_TOKEN                      = 51;
    REPORT_METADATA                = 52;
    REPORT_SNAPSHOT                = 53;
    COMPLIANCE_INTEGRATIONS        = 54;
    COMPLIANCE_SCAN_CONFIG         = 55;
    COMPLIANCE_SCAN                = 56;
    COMPLIANCE_CHECK_RESULTS       = 57;
    BLOB                           = 58;
    // Was PRODUCT_USAGE previously, now replaced with ADMINISTRATION_USAGE
    reserved                         59;
    ADMINISTRATION_EVENTS          = 60;
    COMPLIANCE_SCAN_CONFIG_STATUS  = 61;
    ADMINISTRATION_USAGE           = 62;
}

enum SearchDataType {
    SEARCH_BOOL     = 0;
    SEARCH_NUMERIC  = 1;
    SEARCH_STRING   = 2;
    SEARCH_DATETIME = 3;
    SEARCH_MAP      = 4;
    SEARCH_ENUM     = 5;
}

// RawQuery represents the search query string.
// The format of the query string is "<field name>:<value,value,...>+<field name>:<value, value,...>+..."
// For example:
// To search for deployments named "central" and "sensor" in the namespace "stackrox", the query string would be
// "Deployment:central,sensor+Namespace:stackrox"
// RawQuery is used in ListAPIs to search for a particular object.
message RawQuery {
    string     query      = 1;
    Pagination pagination = 2;
}

// RawSearchRequest is used to scope a given search in a specific category.
// The search categories could be deployments, policies, images etc.
message RawSearchRequest {
    string query                       = 1;
    repeated SearchCategory categories = 2;
}

message QuerySortOption {
    string      field        = 1;
    bool        reversed     = 2;
    oneof search_after_opt {
        // search_after is alternative to offset for pagination.
        // Each value in search_after corresponds to a field. Only results following a record specified by a combination
        // of field+search_after values in specified sorting order will be returned.
        string  search_after = 3;
    }
    AggregateBy aggregate_by = 4;
}

message QueryField {
    string name           = 1;
    string aggregate_func = 2;
    bool   distinct       = 3;
}

message QuerySelectFilter {
    string name = 1;
    Query query = 2;
}

message QuerySelect {
    QueryField        field  = 1;
    QuerySelectFilter filter = 2;
}

message QueryGroupBy {
    repeated string fields = 1;
}

message QueryPagination {
    int32 limit = 1;
    int32 offset = 2;
    repeated QuerySortOption sort_options = 3;
}

message BooleanQuery {
    ConjunctionQuery must     = 1;
    DisjunctionQuery must_not = 2;
}

// next tag: 9
message Query {
    oneof query {
        ConjunctionQuery    conjunction   = 1;
        DisjunctionQuery    disjunction   = 2;
        BaseQuery           base_query    = 3;
        BooleanQuery        boolean_query = 6;
    }
    repeated QuerySelect    selects       = 8;
    QueryGroupBy            group_by      = 7;
    QueryPagination         pagination    = 4;
    reserved 5; // previously SearchOptions
}

// StringQuery represents a query that matches documents that contain the
// query text in _any_ of their fields.
message StringQuery {
    string query = 1;
}

// MatchFieldQuery represents a query that matches documents containing the
// query text in the provided field.
message MatchFieldQuery {
    string field = 1;
    string value = 2;
    bool highlight = 3;
}

// MatchLinkedFieldsQuery represents a query that matches documents which have matches for all the provided
// field values, in corresponding locations.
message MatchLinkedFieldsQuery {
    repeated MatchFieldQuery query = 1;
}

// DocIDQuery represents a query that matches documents with the provided ids.
message DocIDQuery {
    repeated string ids = 1;
}

message BaseQuery {
    oneof query {
        MatchFieldQuery match_field_query = 2;
        MatchLinkedFieldsQuery match_linked_fields_query = 3;
        DocIDQuery doc_id_query = 4;
        MatchNoneQuery match_none_query = 5;
    }
}

message ConjunctionQuery {
    repeated Query queries = 1;
}

message DisjunctionQuery {
    repeated Query queries = 1;
}

message MatchNoneQuery {
}

message SearchResult {
    string id                             = 1;
    string name                           = 2;
    SearchCategory category               = 3;
    message Matches {
        repeated string values = 1;
    }
    map<string, Matches> field_to_matches = 4;
    double score                          = 5;
    // Location is intended to be a unique, yet human readable,
    // identifier for the result. For example, for a deployment,
    // the location will be "$cluster_name/$namespace/$deployment_name.
    // It is displayed in the UI in the global search results, underneath
    // the name for each result.
    string location                       = 6;
}

message SearchResponse {
    repeated SearchResult results = 1;
    message Count {
        SearchCategory category = 1;
        int64 count             = 2;
    }
    repeated Count counts         = 2;
}

message SearchOptionsRequest {
    repeated SearchCategory categories = 1;
}

message SearchOptionsResponse {
    repeated string options = 1;
}

message AutocompleteResponse {
    repeated string values = 1;
}

service SearchService {

    rpc Search (RawSearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            get: "/v1/search"
        };
    }

    rpc Options (SearchOptionsRequest) returns (SearchOptionsResponse) {
        option (google.api.http) = {
            get: "/v1/search/metadata/options"
        };
    }

    rpc Autocomplete (RawSearchRequest) returns (AutocompleteResponse) {
        option (google.api.http) = {
            get: "/v1/search/autocomplete"
        };
    }

}
