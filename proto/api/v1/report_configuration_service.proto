edition = "2023";  // successor to proto2 and proto3

package v1;

import "api/v1/common.proto";
import "api/v1/empty.proto";
import "api/v1/search_service.proto";
import weak "google/api/annotations.proto";
import "storage/report_configuration.proto";
import "google/protobuf/go_features.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";
option features.(pb.go).api_level = API_HYBRID;
option features.field_presence = IMPLICIT;
option features.enum_type = OPEN;
// `packed=false` needs to be transformed to field-level repeated_field_encoding
// features in Editions syntax
option features.json_format = ALLOW;
option features.utf8_validation = VERIFY;

message GetReportConfigurationsResponse {
  repeated storage.ReportConfiguration report_configs = 1 [lazy = true];
}

message GetReportConfigurationResponse {
  storage.ReportConfiguration report_config = 1 [lazy = true];
}

message PostReportConfigurationResponse {
  storage.ReportConfiguration report_config = 1 [lazy = true];
}

message PostReportConfigurationRequest {
  storage.ReportConfiguration report_config = 1 [lazy = true];
}

message UpdateReportConfigurationRequest {
  string id = 1;
  storage.ReportConfiguration report_config = 2 [lazy = true];
}

message CountReportConfigurationsResponse {
  int32 count = 1;
}

service ReportConfigurationService {
  rpc GetReportConfigurations(RawQuery) returns (GetReportConfigurationsResponse) {
    option (google.api.http) = {get: "/v1/report/configurations"};
  }

  rpc GetReportConfiguration(ResourceByID) returns (GetReportConfigurationResponse) {
    option (google.api.http) = {get: "/v1/report/configurations/{id}"};
  }

  // PostReportConfiguration creates a report configuration
  rpc PostReportConfiguration(PostReportConfigurationRequest) returns (PostReportConfigurationResponse) {
    option (google.api.http) = {
      post: "/v1/report/configurations"
      body: "*"
    };
  }

  // UpdateReportConfiguration updates a report configuration
  rpc UpdateReportConfiguration(UpdateReportConfigurationRequest) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/report/configurations/{id}"
      body: "*"
    };
  }

  // DeleteReportConfiguration removes a report configuration given its id
  rpc DeleteReportConfiguration(ResourceByID) returns (Empty) {
    option (google.api.http) = {delete: "/v1/report/configurations/{id}"};
  }

  // CountReportConfigurations returns the number of report configurations.
  rpc CountReportConfigurations(RawQuery) returns (CountReportConfigurationsResponse) {
    option (google.api.http) = {get: "/v1/report-configurations-count"};
  }
}
