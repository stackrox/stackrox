syntax = "proto3";

option go_package = "v1";

option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/common.proto";
import "api/v1/pagination.proto";
import "google/protobuf/timestamp.proto";

package v1;

// CentralEvents are emitted by Central. They are used to create transparency for users
// for asynchronous, background tasks. events are part of Central's system health view.
message CentralEvent {
    // UUID of the event.
    string id                                  = 1;

    // Type of the event.
    CentralEventType type                      = 2;

    // Level associated with the event. The level is categorized into danger, warn, info,
    // success.
    CentralEventLevel level                    = 3;

    // Message associated with the event. The message may include detailed information
    // for this particular event.
    string message                             = 4;

    // Hint associated with the event. The hint may include different information based
    // on the type of event. It can include instructions to resolve a event, or
    // informational hints.
    string hint                                = 5;

    // Domain associated with the event. A event's domain outlines the feature domain where
    // the event was created from. As an example, this might be "Image Scanning".
    // In case of events that cannot be tied to a specific domain, this will be "General".
    string domain                              = 6;

    // Resource type associated with the event. A event may refer to an underlying resource
    // such as a particular image. In that case, the resource type will be filled here.
    string resource_type                       = 7;

    // Resource ID associated with the event. If a event refers to an underlying resource,
    // the resource ID identifies the underlying resource.
    string resource_id                         = 8;

    // Occurrences associated with the event. When events may occur multiple times, the
    // occurrences track the amount.
    int64 num_occurrences                      = 9;

    // Specifies the time when the event has last occurred.
    google.protobuf.Timestamp last_occurred_at = 10;

    // Specifies the time when the event has been created.
    google.protobuf.Timestamp created_at       = 11;
}

// CentralEventType exposes the different types of events.
enum CentralEventType {
    CENTRAL_EVENT_TYPE_UNKNOWN     = 0;
    CENTRAL_EVENT_TYPE_GENERIC     = 1;
    CENTRAL_EVENT_TYPE_LOG_MESSAGE = 2;
}

// CentralEventLevel exposes the different levels of events.
enum CentralEventLevel {
    CENTRAL_EVENT_LEVEL_UNKNOWN = 0;
    CENTRAL_EVENT_LEVEL_INFO    = 1;
    CENTRAL_EVENT_LEVEL_SUCCESS = 2;
    CENTRAL_EVENT_LEVEL_WARN    = 3;
    CENTRAL_EVENT_LEVEL_DANGER  = 4;
}

message CentralEventsFilter {
    // For filtering events starting from a specific timestamp, i.e. the lower boundary.
    google.protobuf.Timestamp from  = 1;

    // For filtering events up until a specific timestamp, i.e. the upper boundary.
    google.protobuf.Timestamp until = 2;

    // For filtering events from a specific domain.
    string domain                   = 3;

    // For filtering events associated with a specific resource type.
    string resource_type            = 4;

    // For filtering events based on their type.
    CentralEventType type        = 5;

    // For filtering events based on their level.
    CentralEventLevel level      = 6;
}

message CountCentralEventsRequest {
    // For filtering the events based on the requested fields.
    CentralEventsFilter filter = 1;
}

message CountCentralEventsResponse {
    // The total number of events after filtering and deduplication.
    int64 count = 1;
}

message GetCentralEventResponse {
    CentralEvent event = 1;
}

message ListCentralEventsRequest {
    // For dividing the events response into chunks.
    Pagination pagination         = 1;

    // For filtering the events based on the requested fields.
    CentralEventsFilter filter = 2;
}

message ListCentralEventsResponse {
    repeated CentralEvent events = 1;
}

service CentralEventService {
    // CountCentralEvents returns the number of events after filtered by requested fields.
    rpc CountCentralEvents(CountCentralEventsRequest) returns (CountCentralEventsResponse) {
        option (google.api.http) = {
            get: "/v1/centraleventscount"
        };
    }

    // GetCentralEvent retrieves a event by ID.
    rpc GetCentralEvent(ResourceByID) returns (GetCentralEventResponse) {
        option(google.api.http) = {
            get: "/v1/centralevents/{id}"
        };
    }

    // ListCentralEvents returns the list of events after filtered by requested fields.
    rpc ListCentralEvents(ListCentralEventsRequest) returns (ListCentralEventsResponse) {
        option (google.api.http) = {
            get: "/v1/centralevents"
        };
    }
}
