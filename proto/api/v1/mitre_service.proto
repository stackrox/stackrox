edition = "2023";  // successor to proto2 and proto3

package v1;

import "api/v1/common.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "storage/mitre.proto";
import "google/protobuf/go_features.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";
option features.(pb.go).api_level = API_HYBRID;
option features.field_presence = IMPLICIT;
option features.enum_type = OPEN;
// `packed=false` needs to be transformed to field-level repeated_field_encoding
// features in Editions syntax
option features.json_format = ALLOW;
option features.utf8_validation = VERIFY;

message ListMitreAttackVectorsResponse {
  repeated storage.MitreAttackVector mitre_attack_vectors = 1 [lazy = true];
}

message GetMitreVectorResponse {
  storage.MitreAttackVector mitre_attack_vector = 1 [lazy = true];
}

// MitreAttackService can be used to retrieve information about MITRE ATT&CK matrix.
service MitreAttackService {
  // ListMitreAttackVectors returns all MITRE ATT&CK vectors.
  rpc ListMitreAttackVectors(Empty) returns (ListMitreAttackVectorsResponse) {
    option (google.api.http) = {get: "/v1/mitreattackvectors"};
  }

  // GetMitreAttackVector returns the full MITRE ATT&CK vector for a tactic with all its techniques.
  rpc GetMitreAttackVector(ResourceByID) returns (GetMitreVectorResponse) {
    option (google.api.http) = {get: "/v1/mitreattackvectors/{id}"};
  }
}
