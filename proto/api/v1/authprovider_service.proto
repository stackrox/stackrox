syntax = "proto3";

package v1;

import "api/v1/auth_service.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "storage/auth_provider.proto";

option go_package = "./;v1";
option java_package = "io.stackrox.proto.api.v1";

message GetAuthProviderRequest {
  string id = 1;
}

message GetAuthProvidersRequest {
  string name = 1;
  string type = 2;
}

message GetLoginAuthProvidersResponse {
  message LoginAuthProvider {
    string id = 1;
    string name = 2;
    string type = 3;
    string login_url = 5;
  }
  repeated LoginAuthProvider auth_providers = 1;
}

message GetAuthProvidersResponse {
  repeated storage.AuthProvider auth_providers = 1;
}

message PostAuthProviderRequest {
  storage.AuthProvider provider = 1;
}

message UpdateAuthProviderRequest {
  string id = 1;

  oneof name_opt {
    string name = 2;
  }
  oneof enabled_opt {
    bool enabled = 3;
  }
}

message ExchangeTokenRequest {
  // The external authentication token. The server will mask the value of this credential in responses and logs.
  string external_token = 1; // @gotags: scrub:"always"
  string type = 2;
  string state = 3;
}

message ExchangeTokenResponse {
  string token = 1;
  string client_state = 2;
  bool test = 3;
  v1.AuthStatus user = 4;
}

message AvailableProviderTypesResponse {
  message AuthProviderType {
    string type = 1;
    repeated string suggested_attributes = 2;
  }
  repeated AuthProviderType auth_provider_types = 1;
}

service AuthProviderService {
  rpc ListAvailableProviderTypes(Empty) returns (AvailableProviderTypesResponse) {
    option (google.api.http) = {get: "/v1/availableAuthProviders"};
  }

  rpc GetAuthProvider(GetAuthProviderRequest) returns (storage.AuthProvider) {
    option (google.api.http) = {get: "/v1/authProviders/{id}"};
  }

  rpc GetLoginAuthProviders(Empty) returns (GetLoginAuthProvidersResponse) {
    option (google.api.http) = {get: "/v1/login/authproviders"};
  }

  rpc GetAuthProviders(GetAuthProvidersRequest) returns (GetAuthProvidersResponse) {
    option (google.api.http) = {get: "/v1/authProviders"};
  }

  rpc PostAuthProvider(PostAuthProviderRequest) returns (storage.AuthProvider) {
    option (google.api.http) = {
      post: "/v1/authProviders"
      body: "provider"
    };
  }

  rpc UpdateAuthProvider(UpdateAuthProviderRequest) returns (storage.AuthProvider) {
    option (google.api.http) = {
      patch: "/v1/authProviders/{id}"
      body: "*"
    };
  }

  rpc PutAuthProvider(storage.AuthProvider) returns (storage.AuthProvider) {
    option (google.api.http) = {
      put: "/v1/authProviders/{id}"
      body: "*"
    };
  }

  rpc DeleteAuthProvider(DeleteByIDWithForce) returns (Empty) {
    option (google.api.http) = {delete: "/v1/authProviders/{id}"};
  }

  rpc ExchangeToken(ExchangeTokenRequest) returns (ExchangeTokenResponse) {
    option (google.api.http) = {
      post: "/v1/authProviders/exchangeToken"
      body: "*"
    };
  }
}
