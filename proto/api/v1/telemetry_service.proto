edition = "2023";  // successor to proto2 and proto3

package v1;

import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "internalapi/central/telemetry.proto";
import "storage/telemetry.proto";
import "google/protobuf/go_features.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";
option features.(pb.go).api_level = API_HYBRID;
option features.field_presence = IMPLICIT;
option features.enum_type = OPEN;
// `packed=false` needs to be transformed to field-level repeated_field_encoding
// features in Editions syntax
option features.json_format = ALLOW;
option features.utf8_validation = VERIFY;

message ConfigureTelemetryRequest {
  bool enabled = 1 [deprecated = true];
}

service TelemetryService {
  rpc GetTelemetryConfiguration(Empty) returns (storage.TelemetryConfiguration) {
    option (google.api.http) = {get: "/v1/telemetry/configure"};
    option deprecated = true;
  }

  rpc ConfigureTelemetry(ConfigureTelemetryRequest) returns (storage.TelemetryConfiguration) {
    option (google.api.http) = {
      put: "/v1/telemetry/configure"
      body: "*"
    };
    option deprecated = true;
  }

  rpc GetConfig(Empty) returns (central.TelemetryConfig) {
    option (google.api.http) = {get: "/v1/telemetry/config"};
  }

  rpc PostConfigReload(Empty) returns (Empty) {
    option (google.api.http) = {post: "/v1/telemetry/config/reload"};
  }
}
