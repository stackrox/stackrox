syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";
import "api/v1/search_service.proto";
import "storage/vuln_requests.proto";

package v1;

message GetVulnerabilityRequestResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message ListVulnerabilityRequestsResponse {
    repeated storage.VulnerabilityRequest request_infos = 1;
}

// next available tag: 7
message DeferVulnRequest {
    enum ExpiryType {
        TIME            = 0;
        ALL_CVE_FIXABLE = 1;
        ANY_CVE_FIXABLE = 2;
    }

    // This field indicates the CVEs requested to be deferred.
    string                             cve                      = 1;
    string                             comment                  = 2;
    storage.VulnerabilityRequest.Scope scope                    = 3;
    oneof expiry {
        bool                           expires_when_fixed       = 4;
        google.protobuf.Timestamp      expires_on               = 5;
    }
    // This field is under development.
    // This field can be used only for deferral requests.
    // This field indicates the type of expiry set for the request.
    // `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
    // `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request are fixable.
    // `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
    ExpiryType                        expiry_type               = 6;
}

message DeferVulnResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message FalsePositiveVulnRequest {
    // This field indicates the CVE requested to be marked as false-positive.
    string                             cve     = 1;
    storage.VulnerabilityRequest.Scope scope   = 2;
    string                             comment = 3;
}

message FalsePositiveVulnResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message ApproveVulnRequest {
    string id      = 1;
    string comment = 2;
}

message ApproveVulnRequestResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message DenyVulnRequest {
    string id      = 1;
    string comment = 2;
}

message DenyVulnRequestResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message UpdateVulnRequest {
    string                  id          = 1;
    string                  comment     = 2;
    storage.RequestExpiry   expiry      = 3;
    // Currently, only expiry can be updated
}

message UpdateVulnRequestResponse {
    storage.VulnerabilityRequest request_info = 1;
}

message UndoVulnRequestResponse {
    storage.VulnerabilityRequest request_info = 1;
}

// VulnerabilityRequestService APIs can be used to manage create and manage vulnerability requests.
service VulnerabilityRequestService {

    // GetVulnerabilityRequest returns the requested vulnerability request by ID.
    rpc GetVulnerabilityRequest (ResourceByID) returns (GetVulnerabilityRequestResponse) {
        option (google.api.http) = {
            get: "/v1/cve/requests/{id}"
        };
    }

    // ListVulnerabilityRequests returns the list of vulnerability requests.
    rpc ListVulnerabilityRequests (RawQuery) returns (ListVulnerabilityRequestsResponse) {
        option (google.api.http) = {
            get: "/v1/cve/requests"
        };
    }

    // DeferVulnerability starts the deferral process for the specified vulnerability.
    rpc DeferVulnerability (DeferVulnRequest) returns (DeferVulnResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/defer"
            body: "*"
        };
    }

    // FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.
    rpc FalsePositiveVulnerability (FalsePositiveVulnRequest) returns (FalsePositiveVulnResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/false-positive"
            body: "*"
        };
    }

    // ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the
    // associated vulnerabilities are not watched in workflows such as policy detection, risk, etc.
    rpc ApproveVulnerabilityRequest (ApproveVulnRequest) returns (ApproveVulnRequestResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/{id}/approve"
            body: "*"
        };
    }

    // DenyVulnRequest denies a vulnerability request.
    rpc DenyVulnerabilityRequest (DenyVulnRequest) returns (DenyVulnRequestResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/{id}/deny"
            body: "*"
        };
    }

    // UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.
    rpc UpdateVulnerabilityRequest (UpdateVulnRequest) returns (UpdateVulnRequestResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/{id}/update"
            body: "*"
        };
    }

    // UndoVulnerabilityRequest undoes a vulnerability request.
    rpc UndoVulnerabilityRequest (ResourceByID) returns (UndoVulnRequestResponse) {
        option (google.api.http) = {
            post: "/v1/cve/requests/{id}/undo"
        };
    }

    // DeleteVulnerabilityRequest deletes a vulnerability request.
    rpc DeleteVulnerabilityRequest (ResourceByID) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/cve/requests/{id}"
        };
    }
}
