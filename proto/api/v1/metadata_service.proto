syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/empty.proto";
import "storage/system_info.proto";

package v1;

message Metadata {
    enum LicenseStatus {
        NONE = 0 [deprecated = true];
        INVALID = 1 [deprecated = true];
        EXPIRED = 2 [deprecated = true];
        RESTARTING = 3 [deprecated = true];
        VALID = 4;
    }

    string version      = 1;
    string build_flavor = 2;
    bool release_build  = 3;

    // Do not use this field. It will always contain "VALID"
    LicenseStatus license_status = 4 [deprecated = true];
}

message TrustInfo {
    // holds the certificate chain hold by central
    repeated bytes cert_chain = 1;
    // sensor challenge string
    string sensor_challenge = 2;
    // central challenge string
    string central_challenge = 3;
    // additional CA certs configured in central in DER format
    repeated bytes additional_cas = 4;
}

message TLSChallengeResponse {
    // signed data which is returned to the caller, is validated against the signature
    bytes trust_info_serialized = 1;
    bytes signature = 2;
}

message TLSChallengeRequest {
    // generated challenge token by the service asking for TLS certs
    string challenge_token = 1;
}

message DatabaseStatus {
    enum DatabaseType {
        Hidden = 0;
        RocksDB = 1;
        PostgresDB = 2;
    }

    // indicates whether or not central can communicate with the database
    bool database_available = 1;
    // type of database serving central
    DatabaseType database_type = 2;
    // version of the database
    string database_version = 3;
}

message DatabaseBackupStatus {
    storage.BackupInfo backup_info = 1;
}

// Provides availability of certain functionality of Central Services in the current configuration.
// The initial intended use is to disable certain functionality that does not make sense in the Cloud Service context.
message CentralServicesCapabilities {
    enum CapabilityStatus {
        // "Unknown" means "not disabled".
        // The reason it's not called "Enabled" is that extended checks might be required to confirm true ability to use
        // e.g. container AWS IAM role or GCP workload identity, and we can't positively say "Enabled" while such checks
        // aren't implemented.
        // This means the user should be allowed to use the capability (both via UI and API) but an attempt may not be
        // successful if the corresponding configuration does not match the actual environment.
        Unknown = 0;

        // Capability is disabled, meaning the corresponding UI should be disabled and attempts to use related APIs
        // should lead to errors.
        Disabled = 1;
    }

    // Ability to use container IAM role for scanning images from Amazon ECR using Scanner deployed as part of Central
    // Services.
    CapabilityStatus central_scanning_use_container_iam_role_for_ecr = 1;

    // Ability to configure and perform Central backups to Amazon S3 or Google Cloud Storage.
    CapabilityStatus central_cloud_backup_integrations = 2;
}

service MetadataService {

    rpc GetMetadata(Empty) returns (Metadata) {
        option (google.api.http) = {
            get: "/v1/metadata"
        };
    }

    rpc TLSChallenge(TLSChallengeRequest) returns (TLSChallengeResponse) {
        option(google.api.http) = {
            get: "/v1/tls-challenge"
        };
    }

    rpc GetDatabaseStatus(Empty) returns (DatabaseStatus) {
        option (google.api.http) = {
            get: "/v1/database/status"
        };
    }

    rpc GetDatabaseBackupStatus(Empty) returns (DatabaseBackupStatus) {
        option (google.api.http) = {
            get: "/v1/backup/status"
        };
    }

    rpc GetCentralCapabilities(Empty) returns (CentralServicesCapabilities) {
        option (google.api.http) = {
            get: "/v1/central-capabilities"
        };
    }
}
