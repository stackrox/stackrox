syntax = "proto3";

package v1;

import "api/v1/pagination.proto";
import weak "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";

// DiscoveredCluster represents a cluster discovered from a cloud source.
message DiscoveredCluster {
  // UUIDv5 generated deterministically from the tuple (metadata.id, metadata.type, source.id).
  string id = 1;

  message Metadata {
    // Represents a unique ID under which the cluster is registered with the
    // cloud provider. Matches storage.ClusterMetadata.id for secured clusters.
    string id = 1;
    // Represents the name under which the cluster is registered with the
    // cloud provider. Matches storage.ClusterMetadata.name for secured clusters.
    string name = 2;
    enum Type {
      UNSPECIFIED = 0;
      AKS = 1;
      ARO = 2;
      EKS = 3;
      GKE = 4;
      OCP = 5;
      OSD = 6;
      ROSA = 7;
    }
    // The cluster type. Matches storage.ClusterMetadata.type for secured clusters.
    Type type = 3;

    enum ProviderType {
      PROVIDER_TYPE_UNSPECIFIED = 0;
      PROVIDER_TYPE_AWS = 1;
      PROVIDER_TYPE_GCP = 2;
      PROVIDER_TYPE_AZURE = 3;
    }
    // The cloud provider type.
    ProviderType provider_type = 4;

    // The region as reported by the cloud provider.
    string region = 5;
    // Timestamp at which the cluster was first discovered by the cloud source.
    google.protobuf.Timestamp first_discovered_at = 6;
  }
  Metadata metadata = 2;

  enum Status {
    // The status of the cluster is unknown. May occur if a secured cluster
    // is missing the metadata for a possible match.
    STATUS_UNSPECIFIED = 0;
    // The discovered cluster was matched with a secured cluster.
    STATUS_SECURED = 1;
    // The discovered cluster was not matched with a secured cluster.
    STATUS_UNSECURED = 2;
  }
  // If an equivalent internal cluster exists, the discovered cluster is
  // considered secured. If an equivalent secured cluster does not exist, the
  // status of the discovered cluster is either unsecured or unknown, depending
  // on the provider details.
  Status status = 3;

  message CloudSource {
    string id = 1;
  }
  // The cloud source integration from which the cluster was discovered.
  CloudSource source = 4;
}

message DiscoveredClustersFilter {
  // Matches discovered clusters of specific names.
  repeated string names = 1;

  // Matches discovered clusters of specific types.
  repeated DiscoveredCluster.Metadata.Type types = 2;

  // Matches discovered clusters of specific statuses.
  repeated DiscoveredCluster.Status statuses = 3;

  // Matches discovered clusters of specific cloud source IDs.
  repeated string source_ids = 4;
}

message CountDiscoveredClustersRequest {
  // Filters discovered clusters based on the requested fields.
  DiscoveredClustersFilter filter = 1;
}

message CountDiscoveredClustersResponse {
  int32 count = 1;
}

message GetDiscoveredClusterRequest {
  string id = 1;
}

message GetDiscoveredClusterResponse {
  DiscoveredCluster cluster = 1;
}

message ListDiscoveredClustersRequest {
  // Divides the response into chunks.
  Pagination pagination = 1;

  // Filters cloud sources based on the requested fields.
  DiscoveredClustersFilter filter = 2;
}

message ListDiscoveredClustersResponse {
  repeated DiscoveredCluster clusters = 1;
}

service DiscoveredClustersService {
  // CountDiscoveredClusters returns the number of discovered clusters after filtering by requested fields.
  rpc CountDiscoveredClusters(CountDiscoveredClustersRequest) returns (CountDiscoveredClustersResponse) {
    option (google.api.http) = {get: "/v1/count/discovered-clusters"};
  }

  // GetDiscoveredCluster retrieves a discovered cluster by ID.
  rpc GetDiscoveredCluster(GetDiscoveredClusterRequest) returns (GetDiscoveredClusterResponse) {
    option (google.api.http) = {get: "/v1/discovered-clusters/{id}"};
  }

  // ListDiscoveredClusters returns the list of discovered clusters after filtered by requested fields.
  rpc ListDiscoveredClusters(ListDiscoveredClustersRequest) returns (ListDiscoveredClustersResponse) {
    option (google.api.http) = {get: "/v1/discovered-clusters"};
  }
}
