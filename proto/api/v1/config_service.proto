syntax = "proto3";

option go_package = "v1";

option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/empty.proto";
import "storage/config.proto";

package v1;

message PutConfigRequest {
    storage.Config config      = 1;
}

message DayOption {
    uint32 num_days = 1;
    bool   enabled  = 2;
}

message VulnerabilityExceptionConfig {
    message FixableCVEOptions {
        // This options allows users to expire the vulnerability deferral request if and only if **all** vulnerabilities
        // in the requests become fixable.
        bool all_fixable = 1;
        // This options allows users to expire the vulnerability deferral request if **any** vulnerability
        // in the requests become fixable.
        bool any_fixable = 2;
    }

    message ExpiryOptions {
        // This allows users to set expiry interval based on number of days.
        repeated DayOption  day_options          = 1;
        // This allows users to set vulnerability request expiry based on the CVEs.
        FixableCVEOptions   fixable_cve_options  = 2;
        // This option, if true, allows UI to show a custom date picker for setting expiry date.
        bool                custom_date          = 3;
    }

    ExpiryOptions expiry_options = 1;
}

message GetVulnerabilityExceptionConfigResponse {
    VulnerabilityExceptionConfig config = 1;
}


message UpdateVulnerabilityExceptionConfigRequest {
    VulnerabilityExceptionConfig config = 1;
}

message UpdateVulnerabilityExceptionConfigResponse {
    VulnerabilityExceptionConfig config = 1;
}

// ConfigService APIs can be used to manage Central config.
service ConfigService {

    rpc GetPublicConfig(Empty) returns (storage.PublicConfig) {
        option (google.api.http) = {
            get: "/v1/config/public"
        };
    }

    rpc GetPrivateConfig(Empty) returns (storage.PrivateConfig) {
        option (google.api.http) = {
            get: "/v1/config/private"
        };
    }

    rpc GetVulnerabilityExceptionConfig(Empty) returns (GetVulnerabilityExceptionConfigResponse) {
        option (google.api.http) = {
            get: "/v1/config/private/exception/vulnerabilities"
        };
    }

    rpc UpdateVulnerabilityExceptionConfig(UpdateVulnerabilityExceptionConfigRequest) returns (UpdateVulnerabilityExceptionConfigResponse) {
        option (google.api.http) = {
            put: "/v1/config/private/exception/vulnerabilities"
            body: "*"
        };
    }

    rpc GetConfig(Empty) returns (storage.Config) {
        option (google.api.http) = {
            get: "/v1/config"
        };
    }

    rpc PutConfig(PutConfigRequest) returns (storage.Config) {
        option (google.api.http) = {
            put: "/v1/config"
            body: "*"
        };
    }

}
