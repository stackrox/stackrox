edition = "2023";  // successor to proto2 and proto3

package v1;

import "api/v1/common.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "storage/signature_integration.proto";
import "google/protobuf/go_features.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";
option features.(pb.go).api_level = API_HYBRID;
option features.field_presence = IMPLICIT;
option features.enum_type = OPEN;
// `packed=false` needs to be transformed to field-level repeated_field_encoding
// features in Editions syntax
option features.json_format = ALLOW;
option features.utf8_validation = VERIFY;

message ListSignatureIntegrationsResponse {
  repeated storage.SignatureIntegration integrations = 1 [lazy = true];
}

service SignatureIntegrationService {
  rpc ListSignatureIntegrations(Empty) returns (ListSignatureIntegrationsResponse) {
    option (google.api.http) = {get: "/v1/signatureintegrations"};
  }

  rpc GetSignatureIntegration(ResourceByID) returns (storage.SignatureIntegration) {
    option (google.api.http) = {get: "/v1/signatureintegrations/{id}"};
  }

  // Integration id should not be set.
  // Returns signature integration with id filled.
  rpc PostSignatureIntegration(storage.SignatureIntegration) returns (storage.SignatureIntegration) {
    option (google.api.http) = {
      post: "/v1/signatureintegrations"
      body: "*"
    };
  }

  rpc PutSignatureIntegration(storage.SignatureIntegration) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/signatureintegrations/{id}"
      body: "*"
    };
  }

  rpc DeleteSignatureIntegration(ResourceByID) returns (Empty) {
    option (google.api.http) = {delete: "/v1/signatureintegrations/{id}"};
  }
}
