syntax = "proto3";

package v1;

import "api/v1/common.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "storage/auth_provider.proto";
import "storage/service_identity.proto";
import "storage/user.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";

message UserAttribute {
  string key = 1;
  repeated string values = 2;
}

message AuthStatus {
  oneof id {
    string user_id = 1;
    storage.ServiceIdentity service_id = 2;
  }
  google.protobuf.Timestamp expires = 3;
  string refresh_url = 4;
  storage.AuthProvider auth_provider = 5;
  storage.UserInfo user_info = 6;
  repeated UserAttribute user_attributes = 7;
  // Token returned to ACS by the underlying identity provider. This field is set only in a few,
  // specific contexts. Do not rely on this field being present in the response.
  string idp_token = 8;
}

// AuthMachineToMachineConfig determines rules for exchanging an identity token from a third party with
// a Central access token. The M2M stands for machine to machine, as this is the intended use-case
// for the config.
message AuthMachineToMachineConfig {
  // UUID of the config.
  // Note that when adding a machine to machine config, this field should not be set.
  string id = 1;

  // The type of the auth machine to machine config.
  // Currently supports GitHub actions or any other generic OIDC provider to use for verifying and
  // exchanging the token.
  enum Type {
    GENERIC = 0;
    GITHUB_ACTIONS = 1;
    KUBE_SERVICE_ACCOUNT = 2;
  }
  Type type = 2;

  // Sets the expiration of the token returned from the ExchangeAuthMachineToMachineToken API call.
  // Possible valid time units are: s, m, h.
  // The maximum allowed expiration duration is 24h.
  // As an example: 2h45m.
  // For additional information on the validation of the duration, see:
  // https://pkg.go.dev/time#ParseDuration.
  string token_expiration_duration = 3;

  // Mappings map an identity token's claim values to a specific role within Central.
  message Mapping {
    // A key within the identity token's claim value to use.
    string key = 1;
    // A regular expression that will be evaluated against values of the identity token claim
    // identified by the specified key.
    // This regular expressions is in RE2 format, see more here:
    // https://github.com/google/re2/wiki/Syntax.
    string value_expression = 2;
    // The role which should be issued when the key and value match for a particular identity token.
    string role = 3;
  }
  // At least one mapping is required to resolve to a valid role for the access token to be successfully generated.
  repeated Mapping mappings = 4;

  // The issuer of the related OIDC provider issuing the ID tokens to exchange.
  //
  // Must be non-empty string containing URL when type is GENERIC.
  // In case of GitHub actions, this must be empty or set to https://token.actions.githubusercontent.com.
  //
  // Issuer is a unique key, therefore there may be at most one GITHUB_ACTIONS config, and each
  // GENERIC config must have a distinct issuer.
  string issuer = 5;
}

message ListAuthMachineToMachineConfigResponse {
  repeated AuthMachineToMachineConfig configs = 1;
}

message GetAuthMachineToMachineConfigResponse {
  AuthMachineToMachineConfig config = 1;
}

message AddAuthMachineToMachineConfigRequest {
  AuthMachineToMachineConfig config = 1;
}

message AddAuthMachineToMachineConfigResponse {
  AuthMachineToMachineConfig config = 1;
}

message UpdateAuthMachineToMachineConfigRequest {
  AuthMachineToMachineConfig config = 1;
}

message ExchangeAuthMachineToMachineTokenRequest {
  // Identity token that is supposed to be exchanged.
  string id_token = 1;
}

message ExchangeAuthMachineToMachineTokenResponse {
  // The exchanged access token.
  string access_token = 1;
}

service AuthService {
  // GetAuthStatus returns the status for the current client.
  rpc GetAuthStatus(Empty) returns (AuthStatus) {
    option (google.api.http) = {get: "/v1/auth/status"};
  }

  // ListAuthMachineToMachineConfigs lists the available auth machine to machine configs.
  rpc ListAuthMachineToMachineConfigs(Empty) returns (ListAuthMachineToMachineConfigResponse) {
    option (google.api.http) = {get: "/v1/auth/m2m"};
  }

  // GetAuthMachineToMachineConfig retrieves the specific auth machine to machine config.
  rpc GetAuthMachineToMachineConfig(ResourceByID) returns (GetAuthMachineToMachineConfigResponse) {
    option (google.api.http) = {get: "/v1/auth/m2m/{id}"};
  }

  // AddAuthMachineToMachineConfig creates a new auth machine to machine config.
  rpc AddAuthMachineToMachineConfig(AddAuthMachineToMachineConfigRequest) returns (AddAuthMachineToMachineConfigResponse) {
    option (google.api.http) = {
      post: "/v1/auth/m2m"
      body: "*"
    };
  }

  // UpdateAuthMachineToMachineConfig updates an existing auth machine to machine config.
  // In case the auth machine to machine config does not exist, a new one will be created.
  rpc UpdateAuthMachineToMachineConfig(UpdateAuthMachineToMachineConfigRequest) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/auth/m2m/{config.id}"
      body: "*"
    };
  }

  // DeleteAuthMachineToMachineConfig deletes the specific auth machine to machine config.
  // In case a specified auth machine to machine config does not exist is deleted, no error will be returned.
  rpc DeleteAuthMachineToMachineConfig(ResourceByID) returns (Empty) {
    option (google.api.http) = {delete: "/v1/auth/m2m/{id}"};
  }

  // ExchangeAuthMachineToMachineToken exchanges a given identity token for a Central access token based on
  // configured auth machine to machine configs.
  rpc ExchangeAuthMachineToMachineToken(ExchangeAuthMachineToMachineTokenRequest) returns (ExchangeAuthMachineToMachineTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/m2m/exchange"
      body: "*"
    };
  }
}
