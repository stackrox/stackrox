syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "storage/alert.proto";
import "storage/deployment.proto";

package v1;

message BuildDetectionRequest {
    oneof Resource {
        storage.ContainerImage image      = 1;
        string                 image_name = 3;
    }
    bool            no_external_metadata = 2;
    bool            send_notifications   = 4;
    bool            force                = 6;
    repeated string policy_categories    = 5;
    // Cluster to delegate scan to, may be the cluster's name or ID.
    string          cluster              = 7;
}

message BuildDetectionResponse {
    repeated storage.Alert alerts = 1;
}

message DeployDetectionRequest {
    oneof Resource {
        storage.Deployment deployment = 1;
    }
    bool no_external_metadata = 2;
    bool enforcement_only     = 3;
    string cluster_id         = 4;
}

message DeployYAMLDetectionRequest {
    string          yaml                 = 1;
    bool            no_external_metadata = 2;
    bool            enforcement_only     = 3;
    bool            force                = 5;
    repeated string policy_categories    = 4;
    // Cluster to delegate scan to, may be the cluster's name or ID.
    string          cluster              = 6;
}

message DeployDetectionResponse {
    message Run {
        string   name                 = 1;
        string   type                 = 2;
        repeated storage.Alert alerts = 3;
    }
    repeated Run runs                   = 1;
    // The reference will be in the format: namespace/name[<group>/<version>, Kind=<kind>].
    repeated string ignored_object_refs = 2;
}

// DetectionService APIs can be used to check for build and deploy time policy violations.
service DetectionService {

    // DetectBuildTime checks if any images violate build time policies.
    rpc DetectBuildTime(BuildDetectionRequest) returns (BuildDetectionResponse) {
        option (google.api.http) = {
            post: "/v1/detect/build"
            body: "*"
        };
    }

    // DetectDeployTime checks if any deployments violate deploy time policies.
    rpc DetectDeployTime(DeployDetectionRequest) returns (DeployDetectionResponse) {
        option (google.api.http) = {
            post: "/v1/detect/deploy"
            body: "*"
        };
    }

    // DetectDeployTimeFromYAML checks if the given deployment yaml violates any deploy time policies.
    rpc DetectDeployTimeFromYAML(DeployYAMLDetectionRequest) returns (DeployDetectionResponse) {
        option (google.api.http) = {
            post: "/v1/detect/deploy/yaml"
            body: "*"
        };
    }

}
