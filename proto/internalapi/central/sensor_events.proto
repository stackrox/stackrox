edition = "2023";  // successor to proto2 and proto3

package central;

import "internalapi/central/compliance_operator.proto";
import "internalapi/compliance/compliance_data.proto";
import "internalapi/scanner/v4/index_report.proto";
import "internalapi/virtualmachine/v1/index_report.proto";
import "internalapi/virtualmachine/v1/virtual_machine.proto";
import "storage/alert.proto";
import "storage/cluster.proto";
import "storage/compliance_operator.proto";
import "storage/deployment.proto";
import "storage/image_integration.proto";
import "storage/namespace_metadata.proto";
import "storage/network_policy.proto";
import "storage/node.proto";
import "storage/policy.proto";
import "storage/process_indicator.proto";
import "storage/rbac.proto";
import "storage/secret.proto";
import "storage/service_account.proto";
import "google/protobuf/go_features.proto";

option go_package = "./internalapi/central;central";
option features.(pb.go).api_level = API_HYBRID;
option features.field_presence = IMPLICIT;
option features.enum_type = OPEN;
// `packed=false` needs to be transformed to field-level repeated_field_encoding
// features in Editions syntax
option features.json_format = ALLOW;
option features.utf8_validation = VERIFY;

enum ResourceAction {
  UNSET_ACTION_RESOURCE = 0;
  CREATE_RESOURCE = 1;
  REMOVE_RESOURCE = 2;
  UPDATE_RESOURCE = 3;
  SYNC_RESOURCE = 4;
}

// Event updates from sensor to central.
////////////////////////////////////////

message ReprocessDeploymentRisk {
  string deployment_id = 1;
}

message AlertResults {
  enum Source {
    DEPLOYMENT_EVENT = 0;
    AUDIT_EVENT = 1;
  }
  // Only relevant if source == DEPLOYMENT.
  string deployment_id = 1;
  repeated storage.Alert alerts = 2 [lazy = true];
  storage.LifecycleStage stage = 3;
  Source source = 4;
}

message Timing {
  string dispatcher = 1;
  string resource = 2;
  int64 nanos = 3;
}

// Next tag: 37.
message SensorEvent {
  // These fields may be duplicated in the individual events, but avoid the need to branch all the time
  string id = 1;
  ResourceAction action = 2;
  Timing timing = 3;
  oneof sensor_hash_oneof {
    uint64 sensor_hash = 26;
  }

  message ResourcesSynced {
    repeated string unchanged_ids = 1;
  }

  oneof resource {
    storage.NetworkPolicy network_policy = 4 [lazy = true];
    storage.Deployment deployment = 5 [lazy = true];
    storage.Pod pod = 19 [lazy = true];
    storage.NamespaceMetadata namespace = 6 [lazy = true];
    storage.Secret secret = 7 [lazy = true];
    storage.Node node = 9 [lazy = true];
    storage.NodeInventory node_inventory = 25 [lazy = true];
    scanner.v4.IndexReport index_report = 34 [lazy = true];
    storage.ServiceAccount service_account = 14 [lazy = true];
    storage.K8sRole role = 15 [lazy = true];
    storage.K8sRoleBinding binding = 16 [lazy = true];

    storage.ProcessIndicator process_indicator = 8 [lazy = true];
    storage.ProviderMetadata provider_metadata = 10 [lazy = true];
    ResourcesSynced synced = 11;
    storage.OrchestratorMetadata orchestrator_metadata = 12 [lazy = true];
    storage.ImageIntegration image_integration = 13 [lazy = true];
    ReprocessDeploymentRisk reprocess_deployment = 17;
    AlertResults alert_results = 18;

    storage.ComplianceOperatorCheckResult compliance_operator_result = 20 [lazy = true];
    storage.ComplianceOperatorProfile compliance_operator_profile = 21 [lazy = true];
    storage.ComplianceOperatorRule compliance_operator_rule = 22 [lazy = true];
    storage.ComplianceOperatorScanSettingBinding compliance_operator_scan_setting_binding = 23 [lazy = true];
    storage.ComplianceOperatorScan compliance_operator_scan = 24 [lazy = true];

    virtualmachine.v1.IndexReportEvent virtual_machine_index_report = 35 [lazy = true];
    virtualmachine.v1.VirtualMachine virtual_machine = 36 [lazy = true];

    // V2 Compliance
    ComplianceOperatorCheckResultV2 compliance_operator_result_v2 = 27;
    ComplianceOperatorProfileV2 compliance_operator_profile_v2 = 28;
    ComplianceOperatorRuleV2 compliance_operator_rule_v2 = 29;
    ComplianceOperatorScanV2 compliance_operator_scan_v2 = 30;
    ComplianceOperatorScanSettingBindingV2 compliance_operator_scan_setting_binding_v2 = 31;
    ComplianceOperatorSuiteV2 compliance_operator_suite_v2 = 32;
    ComplianceOperatorRemediationV2 compliance_operator_remediation_v2 = 33;
  }
}

// Central enforcement through sensor.
//////////////////////////////////////

message SensorEnforcement {
  storage.EnforcementAction enforcement = 1;

  oneof resource {
    DeploymentEnforcement deployment = 2;
    ContainerInstanceEnforcement container_instance = 3;
  }
}

message DeploymentEnforcement {
  string deployment_id = 1;
  string deployment_name = 2;
  string deployment_type = 3;
  string namespace = 4;
  string alert_id = 5;
  string policy_name = 6;
}

message ContainerInstanceEnforcement {
  string pod_id = 2;

  DeploymentEnforcement deployment_enforcement = 3;
}

// Scrape commands sent to sensor.
//////////////////////////////////

message ScrapeCommand {
  string scrape_id = 1;

  oneof command {
    StartScrape start_scrape = 2;
    KillScrape kill_scrape = 3;
  }
}

message StartScrape {
  // Dictates the hosts we expect results from.
  repeated string hostnames = 1;
  // Dictates which standards the compliance pods should run.
  repeated string standards = 2;
}

message KillScrape {}

// Scrape updates received from sensor.
////////////////////////////////////////

message ScrapeUpdate {
  string scrape_id = 1;

  oneof update {
    compliance.ComplianceReturn compliance_return = 2 [lazy = true];
    ScrapeStarted scrape_started = 3;
    ScrapeKilled scrape_killed = 4;
  }
}

message ScrapeStarted {
  string error_message = 1;
}

message ScrapeKilled {
  string error_message = 1;
}

// Network policy application.
////////////////////////////////////////

message NetworkPoliciesCommand {
  message Apply {
    string apply_id = 1;
    storage.NetworkPolicyModification modification = 2 [lazy = true];
  }

  message Payload {
    oneof cmd {
      Apply apply = 1;
    }
  }

  int64 seq_id = 1;
  Payload payload = 2;
}

message NetworkPoliciesResponse {
  message Apply {
    string apply_id = 1;
    storage.NetworkPolicyModification undo_modification = 2 [lazy = true];
  }

  message Error {
    string message = 1;
  }

  message Payload {
    oneof cmd {
      Error error = 1;

      Apply apply = 2;
    }
  }

  int64 seq_id = 1;
  Payload payload = 2;
}
