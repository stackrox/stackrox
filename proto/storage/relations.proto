syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "google/protobuf/timestamp.proto";
import "storage/cve.proto";
import "gogoproto/gogo.proto";

package storage;

//// Image related relations.

message ImageComponentEdge {
  // id is base 64 encoded Image:Component ids.
  string    id                                = 1 [(gogoproto.moretags) = 'sql:"pk,id"'];
  /// Layer that contains this component
  oneof has_layer_index {
    int32   layer_index                       = 2;
  }

  string    location                          = 3 [(gogoproto.moretags) = 'search:"Component Location,store,hidden"'];
  string    image_id                          = 4 [(gogoproto.moretags) = 'sql:"pk,fk(Image:id)"'];
  string    image_component_id                = 5 [(gogoproto.moretags) = 'sql:"pk,fk(ImageComponent:id),no-fk-constraint"'];
}

message ComponentCVEEdge {
  // base 64 encoded Component:CVE ids.
  string     id                               = 1 [(gogoproto.moretags) = 'sql:"pk,id"'];

  bool       is_fixable                       = 2 [(gogoproto.moretags) = 'search:"Fixable,store"'];

  // Whether there is a version the CVE is fixed in the component.
  oneof has_fixed_by {
    string  fixed_by                          = 3 [(gogoproto.moretags) = 'search:"Fixed By,store,hidden"'];
  }
  string    image_component_id                = 4 [(gogoproto.moretags) = 'sql:"pk,fk(ImageComponent:id)"'];
  string    image_cve_id                      = 5 [(gogoproto.moretags) = 'sql:"pk,fk(CVE:id),no-fk-constraint"'];
}

message ImageCVEEdge {
  // base 64 encoded Image:CVE ids.
  string                    id                          = 1 [(gogoproto.moretags) = 'sql:"pk,id"'];
  google.protobuf.Timestamp first_image_occurrence      = 2 [(gogoproto.moretags) = 'search:"First Image Occurrence Timestamp,hidden"'];
  VulnerabilityState        state                       = 3 [(gogoproto.moretags) = 'search:"Vulnerability State"'];
  string                    image_id                    = 4 [(gogoproto.moretags) = 'sql:"pk,fk(Image:id)"'];
  string                    image_cve_id                = 5 [(gogoproto.moretags) = 'sql:"pk,fk(CVE:id),no-fk-constraint"'];
}

//// Node related relations.

message NodeComponentEdge {
  // base 64 encoded Node:Component ids.
  string id                = 1 [(gogoproto.moretags) = 'sql:"pk,id"'];
  string node_id           = 2 [(gogoproto.moretags) = 'sql:"pk,fk(Node:id)"'];
  string node_component_id = 3 [(gogoproto.moretags) = 'sql:"pk,fk(NodeComponent:id),no-fk-constraint"'];
}

message NodeComponentCVEEdge {
  string     id                 = 1 [(gogoproto.moretags) = 'sql:"pk,id"'];
  bool       is_fixable         = 2 [(gogoproto.moretags) = 'search:"Fixable,store"'];
  // Whether there is a version the CVE is fixed in the component.
  oneof has_fixed_by {
    string  fixed_by            = 3 [(gogoproto.moretags) = 'search:"Fixed By,store,hidden"'];
  }
  string    node_component_id   = 4 [(gogoproto.moretags) = 'sql:"pk,fk(NodeComponent:id)"'];
  string    node_cve_id         = 5 [(gogoproto.moretags) = 'sql:"pk,fk(NodeCVE:id),no-fk-constraint"'];
}
