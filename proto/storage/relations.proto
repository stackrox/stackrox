syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";
import "storage/cve.proto";

option go_package = "./storage;storage";
option java_package = "io.stackrox.proto.storage";

//// Image related relations.

message ImageComponentEdge {
  // id is base 64 encoded Image:Component ids.
  string id = 1; // @gotags: sql:"pk,id"
  /// Layer that contains this component
  oneof has_layer_index {
    int32 layer_index = 2;
  }

  string location = 3; // @gotags: search:"Component Location,store,hidden"
  string image_id = 4; // @gotags: sql:"fk(Image:id),index=hash"
  string image_component_id = 5; // @gotags: sql:"fk(ImageComponent:id),no-fk-constraint,index=hash"
}

message ComponentCVEEdge {
  // base 64 encoded Component:CVE ids.
  string id = 1; // @gotags: sql:"pk,id"

  bool is_fixable = 2; // @gotags: search:"Fixable,store"

  // Whether there is a version the CVE is fixed in the component.
  oneof has_fixed_by {
    string fixed_by = 3; // @gotags: search:"Fixed By,store,hidden"
  }
  string image_component_id = 4; // @gotags: sql:"fk(ImageComponent:id),index=hash"
  string image_cve_id = 5; // @gotags: sql:"fk(ImageCVE:id),no-fk-constraint,index=hash"
}

message ImageCVEEdge {
  // base 64 encoded Image:CVE ids.
  string id = 1; // @gotags: sql:"pk,id"
  google.protobuf.Timestamp first_image_occurrence = 2; // @gotags: search:"First Image Occurrence Timestamp,hidden"
  VulnerabilityState state = 3; // @gotags: search:"Vulnerability State"
  string image_id = 4; // @gotags: sql:"fk(Image:id),index=hash"
  string image_cve_id = 5; // @gotags: sql:"fk(ImageCVE:id),no-fk-constraint,index=hash"
}

//// Node related relations.

message NodeComponentEdge {
  // base 64 encoded Node:Component ids.
  string id = 1; // @gotags: sql:"pk,id"
  string node_id = 2; // @gotags: sql:"fk(Node:id),index=hash,type(uuid)"
  string node_component_id = 3; // @gotags: sql:"fk(NodeComponent:id),no-fk-constraint,index=hash"
}

message NodeComponentCVEEdge {
  string id = 1; // @gotags: sql:"pk,id"
  bool is_fixable = 2; // @gotags: search:"Fixable,store"
  // Whether there is a version the CVE is fixed in the component.
  oneof has_fixed_by {
    string fixed_by = 3; // @gotags: search:"Fixed By,store,hidden"
  }
  string node_component_id = 4; // @gotags: sql:"fk(NodeComponent:id),index=hash"
  string node_cve_id = 5; // @gotags: sql:"fk(NodeCVE:id),no-fk-constraint,index=hash"
}

//// Cluster related relations.

message ClusterCVEEdge {
  // base 64 encoded Cluster:CVE ids.
  string id = 1; // @gotags: sql:"pk,id"

  // TODO: search fields `Cluster CVE Fixable` and `Cluster CVE Fixed By` should be renamed to `Fixable` and `Fixed By` resp.
  //  For now we need to keep those for backwards compatibility and the search field transformer handles the transformation.

  bool is_fixable = 2; // @gotags: search:"Cluster CVE Fixable,store,hidden"
  // Whether there is a version the CVE is fixed in the Cluster.
  oneof has_fixed_by {
    string fixed_by = 3; // @gotags: search:"Cluster CVE Fixed By,store,hidden"
  }
  string cluster_id = 4; // @gotags: sql:"fk(Cluster:id),type(uuid)"
  string cve_id = 5; // @gotags: sql:"fk(ClusterCVE:id),no-fk-constraint,index=hash"
}

// Policy relations

message PolicyCategoryEdge {
  string id = 1; // @gotags: sql:"pk,id"
  string policy_id = 2; // @gotags: sql:"fk(Policy:id)" search:"Policy ID,store,hidden"
  string category_id = 3; // @gotags: sql:"fk(PolicyCategory:id)"
}
