syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";
import "storage/deployment.proto";
import "storage/network_flow.proto";
import "storage/policy.proto";
import "storage/process_indicator.proto";

option go_package = "./storage;storage";
option java_package = "io.stackrox.proto.storage";

// Alert represents a security violation detected by StackRox policies.
//
// **Alert Lifecycle:**
// - Created when a policy violation is detected
// - Can be resolved manually or automatically
// - Resolved alerts can be deleted for maintenance
//
// **Alert States:**
// - ACTIVE: Currently active violations requiring attention
// - ATTEMPTED: Enforcement was attempted but failed
// - RESOLVED: Alert has been resolved (can be deleted)
//
// **Entity Types:**
// - DEPLOYMENT: Alert on a Kubernetes deployment
// - CONTAINER_IMAGE: Alert on a container image
// - RESOURCE: Alert on a Kubernetes resource (secrets, configmaps, etc.)
//
// **Performance Considerations:**
// - Maximum 40 violations retained per runtime alert
// - Violations are deduplicated and aggregated
// - Timestamps track first occurrence and latest update

// Next available tag: 24
message Alert {
  message Deployment {
    // Unique identifier for the deployment.
    string id = 1; // @gotags: search:"Deployment ID,store,hidden" sql:"index=hash,type(uuid)"
    
    // Human-readable name of the deployment.
    string name = 2; // @gotags: search:"Deployment,store"
    
    // Type of deployment (e.g., "Deployment", "DaemonSet", "StatefulSet").
    string type = 4;
    
    // Kubernetes namespace containing the deployment.
    // This field has to be duplicated in Alert for scope management and search.
    string namespace = 5; // This field has to be duplicated in Alert for scope management and search.
    
    // Kubernetes labels applied to the deployment.
    map<string, string> labels = 7; // @gotags: sensorhash:"ignore"
    
    // Unique identifier for the cluster containing the deployment.
    // This field has to be duplicated in Alert for scope management and search.
    string cluster_id = 9; // This field has to be duplicated in Alert for scope management and search.
    
    // Human-readable name of the cluster containing the deployment.
    // This field has to be duplicated in Alert for scope management and search.
    string cluster_name = 10; // This field has to be duplicated in Alert for scope management and search.
    
    message Container {
      // Container image information.
      ContainerImage image = 3; // @gotags: search:"-" sql:"ignore-fks,ignore-index"
      
      // Name of the container within the deployment.
      string name = 10;
    }
    
    // List of containers in the deployment.
    repeated Container containers = 11;
    
    // Kubernetes annotations applied to the deployment.
    map<string, string> annotations = 14; // @gotags: sensorhash:"ignore"
    
    // Whether the deployment is currently inactive.
    bool inactive = 15; // @gotags: search:"Inactive Deployment"
  }

  // Represents an alert on a kubernetes resource other than a deployment (configmaps, secrets, etc.)
  message Resource {
    enum ResourceType {
      UNKNOWN = 0;
      SECRETS = 1;
      CONFIGMAPS = 2;
      CLUSTER_ROLES = 3;
      CLUSTER_ROLE_BINDINGS = 4;
      NETWORK_POLICIES = 5;
      SECURITY_CONTEXT_CONSTRAINTS = 6;
      EGRESS_FIREWALLS = 7;
    }

    // Type of Kubernetes resource that triggered the alert.
    ResourceType resource_type = 1; // @gotags: search:"Resource Type,store"
    
    // Name of the resource that triggered the alert.
    string name = 2; // @gotags: search:"Resource"
    
    // Unique identifier for the cluster containing the resource.
    // This field has to be duplicated in Alert for scope management and search.
    string cluster_id = 3; // This field has to be duplicated in Alert for scope management and search.
    
    // Human-readable name of the cluster containing the resource.
    // This field has to be duplicated in Alert for scope management and search.
    string cluster_name = 4; // This field has to be duplicated in Alert for scope management and search.
    
    // Kubernetes namespace containing the resource.
    // This field has to be duplicated in Alert for scope management and search.
    string namespace = 5; // This field has to be duplicated in Alert for scope management and search.
    
    // Unique identifier for the namespace containing the resource.
    // This field has to be duplicated in Alert for scope management and search.
    string namespace_id = 6; // This field has to be duplicated in Alert for scope management and search.
  }

  message Violation {
    enum Type {
      GENERIC = 0;        // Generic policy violation
      K8S_EVENT = 1;      // Kubernetes event violation
      NETWORK_FLOW = 2;   // Network flow violation
      NETWORK_POLICY = 3; // Network policy violation
    }
    
    message KeyValueAttrs {
      message KeyValueAttr {
        string key = 1;
        string value = 2;
      }
      repeated KeyValueAttr attrs = 1;
    }
    
    message NetworkFlowInfo {
      message Entity {
        string name = 1;
        storage.NetworkEntityInfo.Type entity_type = 2;
        string deployment_namespace = 3;
        string deployment_type = 5;
        int32 port = 6;
      }
      storage.L4Protocol protocol = 1;
      Entity source = 2;
      Entity destination = 3;
    }

    // Human-readable message describing the violation.
    string message = 1;
    reserved 2; // formerly link
    reserved 3; // formerly processes
    
    oneof MessageAttributes {
      // Key-value attributes for the violation.
      KeyValueAttrs key_value_attrs = 4;
      
      // Network flow information for network-related violations.
      NetworkFlowInfo network_flow_info = 7; // @gotags: search:"-" sql:"-"
    }
    
    // Type of violation (for internal use only).
    Type type = 5;
    
    // Indicates violation time. This field differs from top-level field 'time' which represents last time the alert
    // occurred in case of multiple occurrences of the policy alert. As of 55.0, this field is set only for kubernetes
    // event violations, but may not be limited to it in future.
    google.protobuf.Timestamp time = 6;
  }

  message ProcessViolation {
    // Human-readable message describing the process violation.
    string message = 1;
    
    // List of processes that violated the policy.
    // Limited to maximum 40 processes per runtime alert.
    repeated ProcessIndicator processes = 2; // @gotags: sql:"ignore-fks"
  }

  message Enforcement {
    // Enforcement action taken or attempted.
    storage.EnforcementAction action = 1; // @gotags: search:"Enforcement"
    
    // Human-readable message describing the enforcement result.
    string message = 2;
  }

  // Unique identifier for the alert.
  string id = 1; // @gotags: search:"Alert ID" sensorhash:"ignore" sql:"pk,type(uuid)"
  
  // Policy that triggered this alert.
  Policy policy = 2; // @gotags: sql:"ignore_pk,ignore_unique,ignore_labels(Lifecycle Stage)"
  
  // Lifecycle stage when the violation occurred.
  LifecycleStage lifecycle_stage = 3; // @gotags: search:"Lifecycle Stage" sql:"index=btree"

  // Scoping information

  // Unique identifier for the cluster containing the alert.
  string cluster_id = 18; // @gotags: search:"Cluster ID,store" sql:"type(uuid)"
  
  // Human-readable name of the cluster containing the alert.
  string cluster_name = 19; // @gotags: search:"Cluster,store"
  
  // Kubernetes namespace containing the alert.
  string namespace = 20; // @gotags: search:"Namespace,store"
  
  // Unique identifier for the namespace containing the alert.
  string namespace_id = 21; // @gotags: search:"Namespace ID" sql:"type(uuid)"

  enum EntityType {
    UNSET = 0;
    DEPLOYMENT = 1;      // Alert on a deployment
    CONTAINER_IMAGE = 2; // Alert on a container image
    RESOURCE = 3;        // Alert on a Kubernetes resource
  }

  oneof Entity {
    // Represents an alert on a deployment
    // An alert cannot be on more than one entity (deployment, container image, resource, etc.)
    Deployment deployment = 4;
    
    // Represents an alert on a container image.
    // An alert cannot be on more than one entity (deployment, container image, resource, etc.)
    ContainerImage image = 15; // @gotags: sql:"ignore-fks,ignore-index"
    
    // Represents an alert on a kubernetes resource (configmaps, secrets, etc.)
    // An alert cannot be on more than one entity (deployment, container image, resource, etc.)
    Resource resource = 16;
  }

  // For run-time phase alert, a maximum of 40 violations are retained.
  repeated Violation violations = 5; // @gotags: search:"-"
  
  // Process violation details (if applicable).
  ProcessViolation process_violation = 13; // @gotags: search:"-"

  // Enforcement action taken or attempted.
  Enforcement enforcement = 6;

  // Timestamp of the last occurrence of this alert.
  // For alerts with multiple violations, this represents the most recent occurrence.
  google.protobuf.Timestamp time = 7; // @gotags: sensorhash:"ignore" search:"Violation Time" sql:"index=btree"
  
  // Timestamp of the first occurrence of this alert.
  google.protobuf.Timestamp first_occurred = 10; // @gotags: sensorhash:"ignore"

  // The time at which the alert was resolved. Only set if ViolationState is RESOLVED.
  google.protobuf.Timestamp resolved_at = 17; // @gotags: sensorhash:"ignore"

  // Current state of the alert.
  ViolationState state = 11; // @gotags: search:"Violation State,store" sql:"index=btree"
  reserved 12;
  reserved "snooze_till";
  reserved 14; // was tags

  // Whether this alert is related to a platform component.
  bool platform_component = 22; // @gotags: search:"Platform Component"
  
  // Type of entity that triggered this alert.
  EntityType entity_type = 23; // @gotags: search:"Entity Type"
}

message ListAlert {
  // Fields common to all entities that an alert might belong to.
  message CommonEntityInfo {
    string cluster_name = 1;
    string namespace = 2;
    string cluster_id = 3;
    string namespace_id = 4;
    ResourceType resource_type = 5;
  }

  // A special ListAlert-only enumeration of all resource types. Unlike Alert.Resource.ResourceType this also includes deployment as a type
  // This must be kept in sync with Alert.Resource.ResourceType (excluding the deployment value)
  enum ResourceType {
    DEPLOYMENT = 0;
    SECRETS = 1;
    CONFIGMAPS = 2;
    CLUSTER_ROLES = 3;
    CLUSTER_ROLE_BINDINGS = 4;
    NETWORK_POLICIES = 5;
    SECURITY_CONTEXT_CONSTRAINTS = 6;
    EGRESS_FIREWALLS = 7;
  }

  message ResourceEntity {
    string name = 1;
  }

  string id = 1;
  LifecycleStage lifecycle_stage = 2;
  google.protobuf.Timestamp time = 3;
  ListAlertPolicy policy = 4;
  ViolationState state = 6;
  int32 enforcement_count = 7;
  reserved 8; // was tags
  storage.EnforcementAction enforcement_action = 9;
  CommonEntityInfo common_entity_info = 10;

  // Tags 5, 11-15 reserved for this oneof. Next available tag: 12
  oneof Entity {
    // Represents an alert on a deployment
    // An alert cannot be on more than one entity (deployment, container image, resource, etc.)
    ListAlertDeployment deployment = 5;
    // Represents an alert on a kubernetes resource (configmaps, secrets, etc.)
    // An alert cannot be on more than one entity (deployment, container image, resource, etc.)
    ResourceEntity resource = 11;
  }

  // Next available tag: 16
}

message ListAlertPolicy {
  string id = 1;
  string name = 2;
  Severity severity = 3;
  string description = 4;
  repeated string categories = 5;

  message DevFields {
    string SORT_name = 6;
  }

  // For internal use only.
  DevFields developer_internal_fields = 6;
}

message ListAlertDeployment {
  string id = 1;
  string name = 2;
  reserved 3; // was: google.protobuf.Timestamp updated_at
  // This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.
  string cluster_name = 4 [deprecated = true]; // This field has moved to CommonEntityInfo
  // This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.
  string namespace = 5 [deprecated = true]; // This field has moved to CommonEntityInfo
  // This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.
  string cluster_id = 6 [deprecated = true]; // This field has moved to CommonEntityInfo
  bool inactive = 7;
  // This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.
  string namespace_id = 8 [deprecated = true]; // This field has moved to CommonEntityInfo
  string deployment_type = 9;
}

enum ViolationState {
  // Alert is currently active and requires attention.
  // This is the default state for new alerts.
  // Active alerts can be resolved but cannot be deleted.
  ACTIVE = 0;
  
  reserved 1;
  reserved "SNOOZED";
  
  // Alert has been resolved (manually or automatically).
  // Resolved alerts can be deleted for maintenance purposes.
  // Only RESOLVED alerts can be deleted via DeleteAlerts API.
  RESOLVED = 2;
  
  // Enforcement action was attempted but failed.
  // These alerts can be resolved to acknowledge the failed enforcement.
  // Common for alerts where enforcement actions are not fully configured.
  ATTEMPTED = 3;
}
