syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";
import "storage/network_flow.proto";
import "storage/process_indicator.proto";

option cc_enable_arenas = true;
option go_package = "./;storage";

// The API returns an array of these
message ProcessListeningOnPort {
  message Endpoint {
    uint32 port = 1;
    L4Protocol protocol = 2;
  }
  Endpoint endpoint = 1;
  string deployment_id = 2;
  string container_name = 3;
  string pod_id = 4;
  string pod_uid = 5;
  ProcessSignal signal = 6;
  string cluster_id = 7;
  string namespace = 8;

  google.protobuf.Timestamp container_start_time = 9;

  string image_id = 10;
}

// This is what sensor sends to central
message ProcessListeningOnPortFromSensor {
  uint32 port = 1;
  L4Protocol protocol = 2;
  ProcessIndicatorUniqueKey process = 3;
  google.protobuf.Timestamp close_timestamp = 4;
  string cluster_id = 6;
  string deployment_id = 7;
  string pod_uid = 8;
  string namespace = 9;
}

// This is what is stored in the database
message ProcessListeningOnPortStorage {
  // Ideally it has to be GENERATED ALWAYS AS IDENTITY, which will make it a
  // bigint with a sequence. Unfortunately at the moment some bits of store
  // generator assume an id has to be a string.
  string id = 1; // @gotags: sql:"pk,type(uuid)"

  uint32 port = 2; // @gotags: search:"Port,store"
  L4Protocol protocol = 3; // @gotags: search:"Port Protocol,store"
  google.protobuf.Timestamp close_timestamp = 4; // @gotags: search:"Closed Time,hidden"

  string process_indicator_id = 5; // @gotags: search:"Process ID,store" sql:"fk(ProcessIndicator:id),no-fk-constraint,index=btree,type(uuid)"

  // XXX: Make it a partial index on only active, not closed, PLOP
  bool closed = 6; // @gotags: search:"Closed,store" sql:"index=btree"

  // ProcessIndicator will be not empty only for those cases when we were not
  // able to find references process in the database
  ProcessIndicatorUniqueKey process = 7;

  string deployment_id = 8; // @gotags: search:"Deployment ID,store" sql:"fk(Deployment:id),no-fk-constraint,index=btree,type(uuid)"

  string pod_uid = 9; // @gotags: search:"Pod UID,hidden" sql:"fk(Pod:id),no-fk-constraint,index=hash,type(uuid)"

  string cluster_id = 10; // @gotags: search:"Cluster ID" sql:"type(uuid)"

  string namespace = 11; // @gotags: search:"Namespace"
}
