syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "gogoproto/gogo.proto";
import "storage/traits.proto";

package storage;

// Next Tag: 13
message AuthProvider {
    string id                   = 1 [(gogoproto.moretags) = 'sql:"pk"'];
    string name                 = 2 [(gogoproto.moretags) = 'sql:"unique"'];
    string type                 = 3;
    string ui_endpoint          = 4;
    bool enabled                = 5;
    map<string, string> config  = 6 [(gogoproto.moretags) = 'scrub:"map-values"'];
    // The login URL will be provided by the backend, and may not be specified in a request.
    string login_url            = 7;
    bool validated              = 8 [deprecated = true];

    // UI endpoints which to allow in addition to `ui_endpoint`. I.e., if a login request
    // is coming from any of these, the auth request will use these for the callback URL,
    // not ui_endpoint.
    repeated string extra_ui_endpoints = 9;
    bool active                 = 10;

    // RequiredAttribute allows to specify a set of attributes which ALL are required to be returned
    // by the auth provider.
    // If any attribute is missing within the external claims of the token issued by Central, the
    // authentication request to this IdP is considered failed.
    message RequiredAttribute {
        string attribute_key   = 1;
        string attribute_value = 2;
    }
    repeated RequiredAttribute required_attributes = 11;

    Traits traits = 12;

    // Specifies claims from IdP token that will be copied to Rox token attributes.
    //
    // Each key in this map contains a path in IdP token we want to map. Path is separated by "." symbol.
    // For example, if IdP token payload looks like:
    //
    //
    // {
    //
    //      "a": {
    //
    //          "b" : "c",
    //
    //          "d": true,
    //
    //          "e": [ "val1", "val2", "val3" ],
    //
    //          "f": [ true, false, false ],
    //
    //          "g": 123.0,
    //
    //          "h": [ 1, 2, 3]
    //
    //      }
    //
    // }
    //
    //
    // then "a.b" would be a valid key and "a.z" is not.
    //
    // We support the following types of claims:
    // * string(path "a.b")
    // * bool(path "a.d")
    // * string array(path "a.e")
    // * bool array (path "a.f.")
    //
    // We do NOT support the following types of claims:
    // * complex claims(path "a")
    // * float/integer claims(path "a.g")
    // * float/integer array claims(path "a.h")
    //
    // Each value in this map contains a Rox token attribute name we want to add claim to.
    // If, for example, value is "groups", claim would be found in "external_user.Attributes.groups" in token.
    //
    // Note: we only support this feature for OIDC auth provider.
    map<string, string> claim_mappings = 13;
}
