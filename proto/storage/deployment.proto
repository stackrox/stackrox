syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";
import "storage/container_runtime.proto";
import "storage/image.proto";
import "storage/labels.proto";
import "storage/rbac.proto";
import "storage/taints.proto";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

// Next available tag: 35
message Deployment {
  string id = 1; // @gotags: search:"Deployment ID,store,hidden" sql:"pk,type(uuid)"
  string name = 2; // @gotags: search:"Deployment,store"
  reserved 3;
  uint64 hash = 26; // @gotags: hash:"ignore" sensorhash:"ignore"
  string type = 4; // @gotags: search:"Deployment Type"
  string namespace = 5; // @gotags: search:"Namespace,store"
  string namespace_id = 23; // @gotags: search:"Namespace ID" sql:"fk(NamespaceMetadata:id),no-fk-constraint,type(uuid)"
  bool orchestrator_component = 33; // @gotags: search:"Orchestrator Component"
  int64 replicas = 6; // @gotags: policy:"Replicas"
  map<string, string> labels = 7; // @gotags: search:"Deployment Label,store"
  map<string, string> pod_labels = 19; // @gotags: search:"Pod Label,store"
  LabelSelector label_selector = 20;
  google.protobuf.Timestamp created = 8; // @gotags: search:"Created,store,hidden" hash:"ignore"
  string cluster_id = 9; // @gotags: search:"Cluster ID,store,hidden" sql:"type(uuid)"
  string cluster_name = 10; // @gotags: search:"Cluster,store"
  repeated Container containers = 11;
  reserved 12;
  map<string, string> annotations = 14; // @gotags: search:"Deployment Annotation"
  int64 priority = 15; // @gotags: search:"Deployment Risk Priority,hidden" hash:"ignore"
  bool inactive = 16;
  repeated string image_pull_secrets = 17; // @gotags: search:"Image Pull Secret"
  string service_account = 18; // @gotags: search:"Service Account"
  PermissionLevel service_account_permission_level = 28; // @gotags: search:"Service Account Permission Level,store"
  bool automount_service_account_token = 25; // @gotags: policy:"Automount Service Account Token"
  bool host_network = 21; // @gotags: policy:"Host Network"
  bool host_pid = 31; // @gotags: policy:"Host PID"
  bool host_ipc = 32; // @gotags: policy:"Host IPC"
  string runtime_class = 34; // @gotags: policy:"Runtime Class"
  repeated Toleration tolerations = 22; // @gotags: search:"-"
  repeated PortConfig ports = 24; // @gotags: policy:"Ports"

  int64 state_timestamp = 27; // Internal use only // @gotags: hash:"ignore" sensorhash:"ignore"
  float risk_score = 29; // @gotags: search:"Deployment Risk Score,hidden" policy:",ignore"

  reserved 30; // was tags
}

// Next tag: 12
message ContainerImage {
  // These tags maintain backwards compatibility with the previously embedded storage.Image
  // Tags after 10 may be used as needed
  reserved 2, 3, 5, 6, 7, 8, 9;
  string id = 4; // @gotags: search:"Image Sha,store,hidden" sql:"fk(Image:id),no-fk-constraint,index=hash"
  ImageName name = 1;
  bool not_pullable = 10;

  bool is_cluster_local = 11;
}

message Container {
  string id = 1;
  ContainerConfig config = 2;

  ContainerImage image = 3;
  SecurityContext security_context = 4;
  repeated Volume volumes = 5; // @gotags: sql:"flag=ROX_DEPLOYMENT_VOLUME_SEARCH" search:"flag=ROX_DEPLOYMENT_VOLUME_SEARCH"
  repeated PortConfig ports = 6; // Policies use the port config on the top-level deployment. // @gotags: policy:",ignore" search:"-"
  repeated EmbeddedSecret secrets = 7; // @gotags: sql:"flag=ROX_DEPLOYMENT_SECRET_SEARCH" search:"flag=ROX_DEPLOYMENT_SECRET_SEARCH"
  Resources resources = 8;

  reserved 9; // previously instances
  string name = 10; // @gotags: policy:"Container Name"

  LivenessProbe liveness_probe = 11;
  ReadinessProbe readiness_probe = 12;
}

message Resources {
  float cpu_cores_request = 1; // @gotags: search:"CPU Cores Request,store"
  float cpu_cores_limit = 2; // @gotags: search:"CPU Cores Limit,store"
  float memory_mb_request = 3; // @gotags: search:"Memory Request (MB),store"
  float memory_mb_limit = 4; // @gotags: search:"Memory Limit (MB),store"
}

message Volume {
  enum MountPropagation {
    NONE = 0;
    HOST_TO_CONTAINER = 1;
    BIDIRECTIONAL = 2;
  }
  string name = 1; // @gotags: search:"Volume Name,store"
  string source = 2; // @gotags: search:"Volume Source,store"
  string destination = 3; // @gotags: search:"Volume Destination,store"
  bool read_only = 4; // @gotags: search:"Volume ReadOnly,store"
  string type = 5; // @gotags: search:"Volume Type,store"
  MountPropagation mount_propagation = 6; // @gotags: policy:"Mount Propagation"
}

message LivenessProbe {
  bool defined = 1; // @gotags: policy:"Liveness Probe Defined"
}

message ReadinessProbe {
  bool defined = 1; // @gotags: policy:"Readiness Probe Defined"
}

// Pod represents information for a currently running pod or deleted pod in an active deployment.
message Pod {
  // Pod UID
  string id = 1; // @gotags: search:"Pod ID,hidden" sql:"pk,type(uuid)"
  string name = 2; // @gotags: search:"Pod Name,hidden"
  string deployment_id = 3; // @gotags: search:"Deployment ID,hidden" sql:"fk(Deployment:id),no-fk-constraint,type(uuid)"
  string namespace = 4; // @gotags: search:"Namespace,store"
  string cluster_id = 5; // @gotags: search:"Cluster ID,store,hidden" sql:"type(uuid)"
  repeated ContainerInstance live_instances = 6;
  // Must be a list of lists, so we can perform search queries (does not work for maps that aren't <string, string>)
  // There is one bucket (list) per container name.
  repeated ContainerInstanceList terminated_instances = 7; // @gotags: search:"-"
  // Time Kubernetes reports the pod was created.
  google.protobuf.Timestamp started = 8;

  message ContainerInstanceList {
    repeated ContainerInstance instances = 1;
  }
}

// ContainerInstanceID allows to uniquely identify a container within a cluster.
message ContainerInstance {
  // The instance ID of this container.
  ContainerInstanceID instance_id = 1;

  // The pod containing this container instance (kubernetes only).
  string containing_pod_id = 2;

  // Container name.
  string container_name = 6;

  // The IP addresses of this container.
  repeated string container_ips = 3;

  // The start time of the container
  google.protobuf.Timestamp started = 4;

  // Image ID
  string image_digest = 5; // @gotags: search:"Container Image Digest,hidden"

  // The finish time of the container, if it finished.
  google.protobuf.Timestamp finished = 7;

  // The exit code of the container. Only valid when finished is populated.
  int32 exit_code = 8;

  // The reason for the container's termination, if it finished.
  string termination_reason = 9;
}

message ContainerInstanceID {
  // The runtime running this container.
  ContainerRuntime container_runtime = 1;
  // The ID of the container, specific to the given runtime.
  string id = 2;
  // The node on which this container runs.
  string node = 3;
}

message EmbeddedSecret {
  string name = 1; // @gotags: search:"Secret"
  string path = 2; // @gotags: search:"Secret Path"
}

// Next Available Tag: 6
message PortConfig {
  enum ExposureLevel {
    UNSET = 0;
    EXTERNAL = 1;
    NODE = 2;
    INTERNAL = 3;
    HOST = 4;
    ROUTE = 5;
  }

  message ExposureInfo {
    ExposureLevel level = 1; // @gotags: search:"Exposure Level,store"

    // only set if level is not HOST
    string service_name = 2; // @gotags: search:"Exposing Service,store"
    string service_id = 3;
    string service_cluster_ip = 4;
    int32 service_port = 5; // @gotags: search:"Exposing Service Port,store"

    // only set if level is HOST, NODE, EXTERNAL or ROUTE
    int32 node_port = 6; // @gotags: search:"Exposed Node Port,store"

    // only set if level is EXTERNAL
    repeated string external_ips = 7; // @gotags: search:"External IP,store"
    // only set if level is EXTERNAL or ROUTE
    repeated string external_hostnames = 8; // @gotags: search:"External Hostname,store"
  }

  string name = 1;
  int32 container_port = 2; // @gotags: search:"Port,store"
  string protocol = 3; // @gotags: search:"Port Protocol,store"

  ExposureLevel exposure = 4; // @gotags: search:"Max Exposure Level,store"
  int32 exposed_port = 5 [deprecated = true];

  repeated ExposureInfo exposure_infos = 6; // @gotags: policy:"Exposure Infos" sensorhash:"set"
}

message ContainerConfig {
  message EnvironmentConfig {
    string key = 1; // @gotags: search:"Environment Key,store"
    string value = 2; // @gotags: search:"Environment Value,store"
    EnvVarSource env_var_source = 3; // @gotags: search:"Environment Variable Source,store"

    // For any update to EnvVarSource, please also update 'ui/src/messages/common.js'
    enum EnvVarSource {
      UNSET = 0;
      RAW = 1;
      SECRET_KEY = 2;
      CONFIG_MAP_KEY = 3;
      FIELD = 4;
      RESOURCE_FIELD = 5;
      UNKNOWN = 6;
    }
  }
  repeated EnvironmentConfig env = 1; // @gotags: sql:"flag=ROX_DEPLOYMENT_ENVVAR_SEARCH" search:"flag=ROX_DEPLOYMENT_ENVVAR_SEARCH"
  repeated string command = 2;
  repeated string args = 3;
  string directory = 4;
  string user = 5;
  int64 uid = 6;
  string app_armor_profile = 7; // @gotags: policy:"AppArmor Profile"
}

message SecurityContext {
  bool privileged = 1; // @gotags: search:"Privileged,store"
  message SELinux {
    string user = 1;
    string role = 2;
    string type = 3;
    string level = 4;
  }
  SELinux selinux = 2;
  repeated string drop_capabilities = 3; // @gotags: search:"Drop Capabilities,store"
  repeated string add_capabilities = 4; // @gotags: search:"Add Capabilities,store"
  bool read_only_root_filesystem = 5; // @gotags: search:"Read Only Root Filesystem,store"

  message SeccompProfile {
    enum ProfileType {
      UNCONFINED = 0;
      RUNTIME_DEFAULT = 1;
      LOCALHOST = 2;
    }
    ProfileType type = 1; // @gotags: policy:"Seccomp Profile Type"
    string localhost_profile = 2;
  }
  SeccompProfile seccomp_profile = 6;
  bool allow_privilege_escalation = 7; // @gotags: policy:"Allow Privilege Escalation"
}

// Next available tag: 9
message ListDeployment {
  string id = 1;
  uint64 hash = 8;
  string name = 2;
  string cluster = 3;
  string cluster_id = 4;
  string namespace = 5;
  google.protobuf.Timestamp created = 6;
  int64 priority = 7;
}
