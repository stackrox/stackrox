syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "storage/user.proto";

package storage;

// ReportMetadata stores details associated with a report job requested for a ReportConfiguration.
// ReportMetadata also stores the status of the report. There can be many ReportMetadatas for a given ReportConfiguration,
// one for each requested report.
message ReportMetadata {
    string       report_id        = 1 [(gogoproto.moretags) = 'sql:"pk,type(uuid)"'];
    string       report_config_id = 2 [(gogoproto.moretags) = 'search:"Report Configuration ID" sql:"fk(ReportConfiguration:id)"'];
    // User who requested the report to be run
    SlimUser     requester        = 3;
    ReportStatus report_status    = 4;
    // only used when report notification method = 'DOWNLOAD'
    bool         is_downloaded    = 5;
}

message ReportStatus {
    enum RunState {
        WAITING = 0;
        PREPARING = 1;
        SUCCESS = 2;
        FAILURE = 3;
    }

    enum NotificationMethod {
        UNSET = 0;
        EMAIL = 1;
        DOWNLOAD = 2;
    }

    enum RunMethod {
        ON_DEMAND = 0;
        SCHEDULED = 1;
    }

    RunState                   run_state                  = 1 [(gogoproto.moretags) = 'search:"Report State"'];
    google.protobuf.Timestamp  queued_at                  = 2 [(gogoproto.moretags) = 'search:"Report Init Time"'];
    google.protobuf.Timestamp  completed_at               = 3 [(gogoproto.moretags) = 'search:"Report Completion Time"'];
    string                     error_msg                  = 4;
    RunMethod                  report_request_type        = 5 [(gogoproto.moretags) = 'search:"Report Request Type"'];
    NotificationMethod         report_notification_method = 6 [(gogoproto.moretags) = 'search:"Report Notification Method"'];
}

