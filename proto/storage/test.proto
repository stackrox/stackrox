syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "./;storage";
option java_package = "io.stackrox.proto.storage";

message TestSingleKeyStruct {
  enum Enum {
    ENUM0 = 0;
    ENUM1 = 1;
    ENUM2 = 2;
  }

  string key = 1; // @gotags: sql:"pk,index=hash" search:"Test Key"
  string name = 2; // @gotags: sql:"unique" search:"Test Name"
  repeated string string_slice = 3; // @gotags: search:"Test String Slice"

  bool bool = 4; // @gotags: search:"Test Bool"
  // repeated bool bool_slice: currently unsupported

  // When using this ensure your precision needs are met and accounted for.  This will use a
  // BigInt which may require you to convert from uint64 to int64 OR update
  // the handling to use numerics.
  uint64 uint64 = 5; // @gotags: search:"Test Uint64"
  // repeated uint64 uint64_slice: currently unsupported

  int64 int64 = 6; // @gotags: search:"Test Int64"
  // repeated int64 int64_slice: currently unsupported

  float float = 7; // @gotags: search:"Test Float"
  // repeated float float_slice: currently unsupported

  map<string, string> labels = 8; // @gotags: search:"Test Labels"
  google.protobuf.Timestamp timestamp = 9; // @gotags: search:"Test Timestamp"

  Enum enum = 10; // @gotags: search:"Test Enum"
  repeated Enum enums = 11; // @gotags: search:"Test Enum Slice"

  message Embedded {
    string embedded = 1;
    message Embedded2 {
      string embedded = 2;
    }
  }
  Embedded embedded = 12;

  message Nested {
    string nested = 1;
    message Nested2 {
      string nested2 = 2;
    }
    Nested2 nested2 = 2;
  }
  repeated Nested nested = 13;

  message OneOfNested {
    string nested = 1;
    message Nested2 {
      string nested2 = 2;
    }
    Nested2 nested2 = 2;
  }
  oneof oneof {
    string oneofstring = 14;
    OneOfNested oneofnested = 15;
  }

  bytes bytess = 16;
}

message TestSingleUUIDKeyStruct {
  enum Enum {
    ENUM0 = 0;
    ENUM1 = 1;
    ENUM2 = 2;
  }

  string key = 1; // @gotags: sql:"pk,index=hash,type(uuid)" search:"Test Key"
  string name = 2; // @gotags: sql:"unique" search:"Test Name"
  repeated string string_slice = 3; // @gotags: search:"Test String Slice"

  bool bool = 4; // @gotags: search:"Test Bool"
  // repeated bool bool_slice: currently unsupported

  // When using this ensure your precision needs are met and accounted for.  This will use a
  // BigInt which may require you to convert from uint64 to int64 OR update
  // the handling to use numerics.
  uint64 uint64 = 5; // @gotags: search:"Test Uint64"
  // repeated uint64 uint64_slice: currently unsupported

  int64 int64 = 6; // @gotags: search:"Test Int64"
  // repeated int64 int64_slice: currently unsupported

  float float = 7; // @gotags: search:"Test Float"
  // repeated float float_slice: currently unsupported

  map<string, string> labels = 8; // @gotags: search:"Test Labels"
  google.protobuf.Timestamp timestamp = 9; // @gotags: search:"Test Timestamp"

  Enum enum = 10; // @gotags: search:"Test Enum"
  repeated Enum enums = 11; // @gotags: search:"Test Enum Slice"

  message Embedded {
    string embedded = 1;
    message Embedded2 {
      string embedded = 2;
    }
  }
  Embedded embedded = 12;

  message Nested {
    string nested = 1;
    message Nested2 {
      string nested2 = 2;
    }
    Nested2 nested2 = 2;
  }
  repeated Nested nested = 13;

  message OneOfNested {
    string nested = 1;
    message Nested2 {
      string nested2 = 2;
    }
    Nested2 nested2 = 2;
  }
  oneof oneof {
    string oneofstring = 14;
    OneOfNested oneofnested = 15;
  }

  bytes bytess = 16;
}

message TestStruct {
  enum Enum {
    ENUM0 = 0;
    ENUM1 = 1;
    ENUM2 = 2;
  }
  string key1 = 1; // @gotags: sql:"pk,id" search:"Test Key"
  string key2 = 2; // @gotags: search:"Test Key 2,store,hidden"

  repeated string string_slice = 3; // @gotags: search:"Test String Slice"

  bool bool = 4; // @gotags: search:"Test Bool"
  // repeated bool bool_slice: currently unsupported

  uint64 uint64 = 5; // @gotags: search:"Test Uint64"
  // repeated uint64 uint64_slice: currently unsupported

  int64 int64 = 6; // @gotags: search:"Test Int64"
  // repeated int64 int64_slice: currently unsupported

  float float = 7; // @gotags: search:"Test Float"
  // repeated float float_slice: currently unsupported

  map<string, string> labels = 8; // @gotags: search:"Test Labels"
  google.protobuf.Timestamp timestamp = 9; // @gotags: search:"Test Timestamp"

  Enum enum = 10; // @gotags: search:"Test Enum"
  repeated Enum enums = 11; // @gotags: search:"Test Enum Slice"

  string string = 16; // @gotags: search:"Test String"

  // repeated int64: currently unsupported
  repeated int64 int_slice_deprecated = 17 [deprecated = true]; // @gotags: sql:"-"

  repeated int32 int32_slice = 18; // @gotags: search:"Test Int32 Slice"

  message Embedded {
    string embedded = 1;
    message Embedded2 {
      string embedded = 2;
    }
  }
  Embedded embedded = 12;

  message Nested {
    string nested = 1; // @gotags: search:"Test Nested String"
    bool is_nested = 3; // @gotags: search:"Test Nested Bool"
    int64 int64 = 4; // @gotags: search:"Test Nested Int64"
    message Nested2 {
      string nested2 = 2; // @gotags: search:"Test Nested String 2"
      bool is_nested = 3; // @gotags: search:"Test Nested Bool 2"
      int64 int64 = 4; // @gotags: search:"Test Nested Int64 2"
    }
    Nested2 nested2 = 2;
  }
  repeated Nested nested = 13;

  message OneOfNested {
    string nested = 1; // @gotags: search:"Test Oneof Nested String"
    message Nested2 {
      string nested2 = 2;
    }
  }
  oneof oneof {
    string oneofstring = 14;
    OneOfNested oneofnested = 15;
  }
}

// The test graph is as below. The numbers next to the edges
// indicate the cardinality of the relationship, either n-1, 1-n or n-n.
// The first element is the child and second is the parent.
//             TestGrandparent
//        (n-1) /      (n-1) |   (n-1) \          \ (n-1) (namespaced search)
//       TestParent1  TestParent2   TestParent3   TestParent4
//       (n-n) |           | (n-1)                   \ (n-1)
//       TestChild1    TestChild2                TestChild1P4
//         (1-n)  |
//       TestGrandChild1
//         (n-1)  |
//       TestGGrandChild1
//         (1-n)   |
//       TestG2GrandChild1
//        (n-1)   |
//        TestG3GrandChild1
message TestGrandparent {
  string id = 1; // @gotags: search:"Test Grandparent ID" sql:"pk"
  string val = 2; // @gotags: search:"Test Grandparent Val"

  message Embedded {
    message Embedded2 {
      string val = 1; // @gotags: search:"Test Grandparent Embedded2"
    }

    string val = 1; // @gotags: search:"Test Grandparent Embedded"
    repeated Embedded2 embedded2 = 2;
  }

  repeated Embedded embedded = 3;

  int64 priority = 4; // @gotags: search:"Test Grandparent Priority"
  float risk_score = 5; // @gotags: search:"Test Grandparent Risk Score"
}

message TestParent1 {
  string id = 1; // @gotags: search:"Test Parent1 ID" sql:"pk"
  string parent_id = 2; // @gotags: sql:"fk(TestGrandparent:id)"

  message Child1Ref {
    string child_id = 1; // @gotags: sql:"fk(TestChild1:id),no-fk-constraint"
  }

  repeated Child1Ref children = 3;

  string val = 4; // @gotags: search:"Test Parent1 Val"
  repeated string string_slice = 5; // @gotags: search:"Test Parent1 String Slice"
}

message TestChild1 {
  string id = 1; // @gotags: search:"Test Child1 ID" sql:"pk"

  string val = 2; // @gotags: search:"Test Child1 Val"
}

message TestGrandChild1 {
  string id = 1; // @gotags: search:"Test Grandchild1 ID" sql:"pk"
  string parent_id = 2; // @gotags: sql:"fk(TestChild1:id)"
  string child_id = 3; // @gotags: sql:"fk(TestGGrandChild1:id),no-fk-constraint"

  string val = 4; // @gotags: search:"Test Grandchild1 Val"
}

message TestGGrandChild1 {
  string id = 1; // @gotags: search:"Test GGrandchild1 ID" sql:"pk"

  string val = 2; // @gotags: search:"Test GGrandchild1 Val"
}

message TestG2GrandChild1 {
  string id = 1; // @gotags: search:"Test G2Grandchild1 ID" sql:"pk"
  string parent_id = 2; // @gotags: sql:"fk(TestGGrandChild1:id)"
  string child_id = 3; // @gotags: sql:"fk(TestG3GrandChild1:id),no-fk-constraint"

  string val = 4; // @gotags: search:"Test G2Grandchild1 Val"
}

message TestG3GrandChild1 {
  string id = 1; // @gotags: search:"Test G3Grandchild1 ID" sql:"pk"

  string val = 2; // @gotags: search:"Test G3Grandchild1 Val"
}

message TestParent2 {
  string id = 1; // @gotags: search:"Test Parent2 ID" sql:"pk,type(uuid)"
  string parent_id = 2; // @gotags: sql:"fk(TestGrandparent:id)"

  string val = 3; // @gotags: search:"Test Parent2 Val"
}

message TestChild2 {
  string id = 1; // @gotags: search:"Test Child2 ID" sql:"pk,type(uuid)"
  string parent_id = 2; // @gotags: sql:"fk(TestParent2:id)"

  // For a potential optimization, insert a direct link from child to grandparent.
  string grandparent_id = 3; // @gotags: sql:"fk(TestGrandparent:id),no-fk-constraint"

  string val = 4; // @gotags: search:"Test Child2 Val"
}

message TestParent3 {
  string id = 1; // @gotags: search:"Test Parent3 ID" sql:"pk"
  string parent_id = 2; // @gotags: sql:"fk(TestGrandparent:id)"

  string val = 3; // @gotags: search:"Test Parent3 Val"
}

message TestParent4 {
  string id = 1; // @gotags: search:"Test Parent4 ID" sql:"pk,type(uuid)"
  string parent_id = 2; // @gotags: sql:"fk(TestGrandparent:id)"

  string val = 3; // @gotags: search:"Test Parent4 Val"
}

message TestChild1P4 {
  string id = 1; // @gotags: search:"Test Child1P4 ID" sql:"pk"
  string parent_id = 2; // @gotags: sql:"fk(TestParent4:id),type(uuid)"

  string val = 3; // @gotags: search:"Test Child1P4 Val"
}

message TestShortCircuit {
  string id = 1; // @gotags: search:"Test ShortCircuit ID" sql:"pk"
  string child_id = 2; // @gotags: search:"Test Child1 ID" sql:"fk(TestChild1:id),no-fk-constraint,directional"
  string g2_grandchild_id = 3; // @gotags: search:"Test G2Grandchild1 ID" sql:"fk(TestG2GrandChild1:id),no-fk-constraint,directional"
}
