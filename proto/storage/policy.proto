syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";
import "storage/image.proto";
import "storage/scope.proto";

option go_package = "./storage;storage";
option java_package = "io.stackrox.proto.storage";

// Note: If you add a new field to the Policy proto, please update the PolicySpec struct
// in `config-controller/api/v1alpha1/policy_types.go` and the ToProtobuf() function
// to account for the new field, and its conversion.

// Policy represents a security policy that defines violation criteria and enforcement actions.
//
// **Validation Requirements:**
// - id: Must be empty for new policies (auto-generated)
// - name: Must be 5-128 characters, no newlines or dollar signs, unique across all policies
// - description: Max 800 characters, no dollar signs
// - severity: Must be set (not UNSET_SEVERITY)
// - lifecycleStages: At least one stage required
// - categories: At least one category required, no duplicates
// - policySections: Must contain valid criteria for lifecycle stages
// - policyVersion: Must be "1.1" (current supported version)
//
// **Lifecycle Stage Compatibility:**
// - BUILD: Image-related criteria only
// - DEPLOY: Cannot contain runtime criteria
// - RUNTIME: Must contain at least one runtime criterion
//
// **Event Source Rules:**
// - Runtime policies: eventSource cannot be NOT_APPLICABLE
// - Build/Deploy policies: eventSource must be NOT_APPLICABLE
// - Audit log policies: No enforcement actions, no label scopes
//
// **Enforcement Action Compatibility:**
// - FAIL_BUILD_ENFORCEMENT: BUILD only
// - SCALE_TO_ZERO_ENFORCEMENT: DEPLOY only
// - UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT: DEPLOY only
// - KILL_POD_ENFORCEMENT: RUNTIME only
// - FAIL_KUBE_REQUEST_ENFORCEMENT: RUNTIME only
// - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: DEPLOY only
// - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: DEPLOY only

//Next tag: 28
message Policy {
  // Unique identifier generated by the system. Must be empty for new policies.
  // Format: UUID v4, auto-generated during creation
  string id = 1; // @gotags: search:"Policy ID,store,hidden" sql:"pk,index=btree" crYaml:"-"
  
  // Name of the policy. Must be unique across all policies.
  // Validation: 5-128 characters, no newlines or dollar signs
  // Pattern: ^[^\n\r\$]{5,128}$
  string name = 2; // @gotags: search:"Policy,store" sql:"unique" crYaml:"policyName"
  
  // Free-form text description of this policy.
  // Validation: Max 800 characters, no dollar signs
  // Pattern: ^[^\$]{0,800}$
  string description = 3; // @gotags: search:"Description" crYaml:",omitempty"
  
  // Business justification for why this policy exists.
  // Used for compliance and audit purposes.
  string rationale = 4; // @gotags: crYaml:",omitempty"
  
  // Describes how to remediate a violation of this policy.
  // Should be actionable and specific to the policy type.
  string remediation = 5; // @gotags: crYaml:",omitempty"
  
  // Toggles whether or not this policy will be executing and actively firing alerts.
  // Default: false
  bool disabled = 6; // @gotags: search:"Disabled" crYaml:",omitempty"
  
  // List of categories that this policy falls under. Category names must already exist in Central.
  // Validation: At least one category required, no duplicates
  repeated string categories = 7; // @gotags: search:"Category,store" crYaml:",omitempty"
  reserved 8; // was PolicyFields fields

  // Describes which policy lifecycle stages this policy applies to. Choices are DEPLOY, BUILD, and RUNTIME.
  // Validation: At least one stage required
  // - BUILD: Must contain image-related criteria only
  // - DEPLOY: Cannot contain runtime criteria
  // - RUNTIME: Must contain at least one runtime criterion
  repeated LifecycleStage lifecycle_stages = 9; // @gotags: search:"Lifecycle Stage,store" crYaml:"lifecycleStages,stringer"
  
  // Describes which events should trigger execution of this policy
  // Validation Rules:
  // - Runtime policies: Cannot be NOT_APPLICABLE
  // - Build/Deploy policies: Must be NOT_APPLICABLE
  // - Audit log policies: No enforcement actions, no label scopes
  EventSource event_source = 22; // @gotags: crYaml:"eventSource,stringer"

  reserved 10; //was repeated Exclusion whitelists
  
  // Define deployments or images that should be excluded from this policy.
  // Validation:
  // - Deployment exclusions: Only valid for DEPLOY and RUNTIME lifecycles
  // - Image exclusions: Only valid for BUILD lifecycle
  // - Must have at least one criteria (name, scope, or image)
  repeated Exclusion exclusions = 21; // @gotags: crYaml:",omitempty"
  
  // Defines clusters, namespaces, and deployments that should be included in this policy.
  // No scopes defined includes everything.
  // Validation: Must have at least one field populated (cluster, namespace, or label)
  repeated Scope scope = 11; // @gotags: crYaml:",omitempty"

  // Defines how severe a violation from this policy is.
  // Validation: Must be set (not UNSET_SEVERITY)
  // Possible values are UNSET_SEVERITY, LOW_SEVERITY, MEDIUM_SEVERITY, HIGH_SEVERITY, and CRITICAL_SEVERITY.
  Severity severity = 12; // @gotags: search:"Severity,store" crYaml:",stringer"
  
  // Lists the enforcement actions to take when a violation from this policy is identified.
  // Validation: Must be compatible with lifecycle stages
  // - FAIL_BUILD_ENFORCEMENT: BUILD lifecycle only
  // - SCALE_TO_ZERO_ENFORCEMENT: DEPLOY lifecycle only
  // - UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT: DEPLOY lifecycle only
  // - KILL_POD_ENFORCEMENT: RUNTIME lifecycle only
  // - FAIL_KUBE_REQUEST_ENFORCEMENT: RUNTIME lifecycle only
  // - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: DEPLOY lifecycle only
  // - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: DEPLOY lifecycle only
  // - Audit log policies: No enforcement actions allowed
  repeated EnforcementAction enforcement_actions = 13; // @gotags: search:"Enforcement" crYaml:"enforcementActions,omitempty,stringer"
  
  // List of IDs of the notifiers that should be triggered when a violation from this policy is identified.
  // IDs should be in the form of a UUID and are found through the Central API.
  // Validation: All notifier IDs must reference existing notifiers
  repeated string notifiers = 14; // @gotags: crYaml:",omitempty"
  
  // Timestamp when the policy was last updated. Auto-generated during creation/update.
  google.protobuf.Timestamp last_updated = 15; // @gotags: search:"Policy Last Updated" crYaml:"-"

  // For internal use only.
  string SORT_name = 16; // @gotags: search:"SORT_Policy,hidden,analyzer=keyword" crYaml:"-"
  // For internal use only.
  string SORT_lifecycleStage = 17; // @gotags: search:"SORT_Lifecycle Stage,hidden" crYaml:"-"
  // For internal use only.
  bool SORT_enforcement = 18; // @gotags: search:"SORT_Enforcement,hidden" crYaml:"-"

  // Policy version. Must be "1.1" (current supported version).
  // Validation: Only version 1.1 is supported
  string policy_version = 19; // @gotags: crYaml:"-"
  
  // PolicySections define the violation criteria for this policy.
  // Validation Requirements:
  // - Each section must have a unique sectionName
  // - Each policy group must have a valid fieldName and at least one value
  // - Field names must be valid for the specified lifecycle stages
  // - Values must match the expected format for each field type
  // - Boolean operators must be compatible with field requirements
  // - Negation must be allowed for the field type
  // - Runtime policies must contain at least one runtime criterion
  // - Runtime criteria must be in separate sections
  // - Audit log policies require both KubeResource and KubeAPIVerb criteria
  repeated PolicySection policy_sections = 20; // @gotags: crYaml:"policySections,omitempty"

  message MitreAttackVectors {
    string tactic = 1;
    repeated string techniques = 2;
  }

  // MITRE ATT&CK framework mappings for this policy.
  // Used for threat intelligence and compliance reporting.
  repeated MitreAttackVectors mitre_attack_vectors = 23; // @gotags: crYaml:"mitreAttackVectors,omitempty"

  // Read-only field. If true, the policy's criteria fields are rendered read-only.
  bool criteria_locked = 24; // @gotags: crYaml:"criteriaLocked"
  // Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only.
  bool mitre_vectors_locked = 25; // @gotags: crYaml:"mitreVectorsLocked"
  // Read-only field. Indicates the policy is a default policy if true and a custom policy if false.
  bool is_default = 26; // @gotags: crYaml:"isDefault"

  PolicySource source = 27; // @gotags: crYaml:"-"
}

enum PolicySource {
  IMPERATIVE = 0;
  DECLARATIVE = 1;
}

enum EventSource {
  NOT_APPLICABLE = 0;
  DEPLOYMENT_EVENT = 1;
  AUDIT_LOG_EVENT = 2;
}

message PolicySection {
  // Name of the policy section. Must be unique within the policy.
  // Used for organizing policy criteria into logical groups.
  string section_name = 1; // @gotags: crYaml:"sectionName,omitempty"
  
  // The set of policy groups that make up this section. Each group can be considered an individual criterion.
  // Validation Requirements:
  // - Each group must have a valid fieldName and at least one value
  // - Field names must be valid for the specified lifecycle stages
  // - Values must match the expected format for each field type
  // - Boolean operators must be compatible with field requirements
  // - Negation must be allowed for the field type
  // - Runtime criteria must be in separate sections
  // - Audit log policies require both KubeResource and KubeAPIVerb criteria
  repeated PolicyGroup policy_groups = 3; // @gotags: crYaml:"policyGroups,omitempty"
}

message PolicyGroup {
  // Defines which field on a deployment or image this PolicyGroup evaluates.
  // See https://docs.openshift.com/acs/operating/manage-security-policies.html#policy-criteria_manage-security-policies for a complete list of possible values.
  // Validation Requirements:
  // - Must be a valid field name for the specified lifecycle stages
  // - Field must support the specified boolean operator
  // - Field must allow negation if negate=true
  // - Field must support multiple values if more than one value is provided
  // - Some fields have special restrictions (e.g., ImageSignatureVerifiedBy cannot use AND operator)
  string field_name = 1; // @gotags: crYaml:"fieldName"
  
  // Determines if the values are combined with an OR or an AND. Defaults to OR.
  // Validation: Must be compatible with the field type
  // - Some fields only support OR (e.g., ImageSignatureVerifiedBy)
  // - Some fields only support single values (operatorsForbidden=true)
  BooleanOperator boolean_operator = 2; // @gotags: crYaml:"booleanOperator,stringer"
  
  // Determines if the evaluation of this PolicyGroup is negated. Default to false.
  // Validation: Must be allowed for the field type
  // - Some fields cannot be negated (negationForbidden=true)
  bool negate = 3; // @gotags: crYaml:",omitempty"
  
  // List of values for the specified field.
  // Validation Requirements:
  // - Must have at least one value
  // - Values must match the expected regex pattern for the field type
  // - Some fields only support single values
  // - Values must be valid for the field's data type and constraints
  // - Environment variable values have special format requirements
  // - Dockerfile line values have special restrictions (e.g., no FROM with strict validation)
  repeated PolicyValue values = 4; // @gotags: crYaml:",omitempty"
}

message PolicyValue {
  // The actual value for the policy criterion.
  // Validation: Must match the expected format for the field type
  // Examples:
  // - CVE: "CVE-2021-1234"
  // - Image Tag: "latest"
  // - Environment Variable: "UNSET=key=value" or "SECRET_KEY=key="
  // - Dockerfile Line: "ADD=." or "RUN=apt-get update"
  // - Process Name: "nginx"
  // - Network Flow: "tcp:80"
  string value = 1;
}

enum BooleanOperator {
  OR = 0;
  AND = 1;
}

message PolicyList {
  repeated Policy policies = 1;
}

message ListPolicy {
  string id = 1;
  string name = 2;
  string description = 3;
  Severity severity = 4;
  bool disabled = 5;
  repeated LifecycleStage lifecycle_stages = 6;
  repeated string notifiers = 7;
  google.protobuf.Timestamp last_updated = 8;
  EventSource event_source = 9;
  bool is_default = 10;
  PolicySource source = 11;
}

// Please ensure any changes to the following are reflected in comment of top-level policy field `enforcement_actions`.

enum EnforcementAction {
  UNSET_ENFORCEMENT = 0;
  SCALE_TO_ZERO_ENFORCEMENT = 1;
  UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT = 2;
  KILL_POD_ENFORCEMENT = 3;
  FAIL_BUILD_ENFORCEMENT = 4;
  // FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
  FAIL_KUBE_REQUEST_ENFORCEMENT = 5;
  // FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.
  FAIL_DEPLOYMENT_CREATE_ENFORCEMENT = 6;
  // FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
  FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT = 7;
}

enum Severity {
  UNSET_SEVERITY = 0;
  LOW_SEVERITY = 1;
  MEDIUM_SEVERITY = 2;
  HIGH_SEVERITY = 3;
  CRITICAL_SEVERITY = 4;
}

enum LifecycleStage {
  DEPLOY = 0;
  BUILD = 1;
  RUNTIME = 2;
}

enum Comparator {
  LESS_THAN = 0;
  LESS_THAN_OR_EQUALS = 1;
  EQUALS = 2;
  GREATER_THAN_OR_EQUALS = 3;
  GREATER_THAN = 4;
}

message Exclusion {
  // Name of the exclusion. Used for identification and documentation.
  string name = 1; // @gotags: crYaml:",omitempty"

  message Container {
    ImageName image_name = 3; // @gotags: search:"-" crYaml:"imageName"
  }
  reserved 2; // formally Container container

  message Deployment {
    // Name of the deployment to exclude. Optional if scope is provided.
    // Validation: Must be provided if scope is not specified
    string name = 3; // @gotags: crYaml:",omitempty"
    
    // Scope-based exclusion criteria. Optional if name is provided.
    // Validation: Must be provided if name is not specified
    // - Must have at least one field populated (cluster, namespace, or label)
    // - For audit log policies: Labels are not permitted
    Scope scope = 4; // @gotags: crYaml:",omitempty"
  }
  Deployment deployment = 5; // @gotags: crYaml:",omitempty"

  message Image {
    // Name of the image to exclude.
    // Validation: Must be non-empty
    string name = 1;
  }
  Image image = 7; // @gotags: crYaml:",omitempty"

  // Expiration timestamp for this exclusion.
  // When expired, the exclusion is automatically removed.
  google.protobuf.Timestamp expiration = 6; // @gotags: crYaml:"timestamp,omitempty"
}

// ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.
// We do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object
message ExportPoliciesResponse {
  repeated storage.Policy policies = 1;
}
