syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

import "storage/image.proto";

package storage;

message ComplianceResource {
    message ClusterName {
        string id   = 1;
        string name = 2;
    }

    message DeploymentName {
        ClusterName cluster = 1;
        string id           = 2;
        string name         = 3;
        string namespace    = 4;
    }

    message NodeName {
        ClusterName cluster = 1;
        string id           = 2;
        string name         = 3;
    }

    oneof resource {
        ClusterName cluster       = 1;
        DeploymentName deployment = 2;
        NodeName node             = 3;
        ImageName image           = 4;
    }
}

enum ComplianceState {
    COMPLIANCE_STATE_UNKNOWN = 0;
    COMPLIANCE_STATE_SKIP    = 1;
    COMPLIANCE_STATE_NOTE    = 2;
    COMPLIANCE_STATE_SUCCESS = 3;
    COMPLIANCE_STATE_FAILURE = 4;
    COMPLIANCE_STATE_ERROR   = 5;
}

message ComplianceResultValue {
    message Evidence {
        ComplianceState state = 1;
        string message        = 2;
        int32 message_id      = 3;
    }
    repeated Evidence evidence    = 1;
    ComplianceState overall_state = 2;
}

message ComplianceControlResult {
    ComplianceResource    resource   = 1;
    string                control_id = 2;
    ComplianceResultValue value      = 3;
}

// Next available tag: 5
message ComplianceDomain {
    string id = 4 [(gogoproto.moretags) = 'sql:"pk" search:"Compliance Domain ID,hidden"'];

    // These must mirror the tags _exactly_ in cluster.proto for backwards compatibility
    message Cluster {
        string id   = 1;
        string name = 2;
    }
    Cluster cluster = 1;

    // These must mirror the tags _exactly_ in node.proto for backwards compatibility
    message Node {
        string id                              = 1;
        string name                            = 2;
        string cluster_id                      = 4;
        string cluster_name                    = 5;
    }
    map<string, Node> nodes = 2;

    // This must mirror the tags _exactly_ in deployment.proto for backwards compatibility
    message Deployment {
        string id                                  = 1;
        string name                                = 2;
        string type                                = 4;
        string namespace                           = 5;
        string namespace_id                        = 23;
        string cluster_id                          = 9;
        string cluster_name                        = 10;
    }
    map<string, Deployment> deployments = 3;
}

// Next available tag: 5
message ComplianceRunMetadata {
    string run_id      = 1 [(gogoproto.moretags) = 'sql:"pk" search:"Compliance Run ID,hidden"'];
    string standard_id = 2 [(gogoproto.moretags) = 'search:"Standard ID,hidden,store"'];
    string cluster_id  = 3 [(gogoproto.moretags) = 'search:"Cluster ID,hidden,store"'];

    google.protobuf.Timestamp start_timestamp  = 4;
    google.protobuf.Timestamp finish_timestamp = 5 [(gogoproto.moretags) = 'search:"Compliance Run Finished Timestamp,hidden,store"'];

    bool success = 6;
    string error_message = 7;

    string domain_id = 8;
}

// Next available tag: 6
message ComplianceRunResults {
    message EntityResults {
        map<string, ComplianceResultValue> control_results = 1;
    }

    ComplianceDomain domain            = 1 [(gogoproto.moretags) = 'sql:"-"'];
    ComplianceRunMetadata run_metadata = 2;

    EntityResults cluster_results                     = 3;
    map<string, EntityResults> node_results           = 4;
    map<string, EntityResults> deployment_results     = 5;
    map<string, EntityResults> machine_config_results = 6;
}

// Next available tag: 2
message ComplianceStrings {
    string          id      = 2 [(gogoproto.moretags) = 'sql:"pk"'];
    repeated string strings = 1;
}

message ComplianceAggregation {
    enum Scope {
        UNKNOWN    = 0;
        STANDARD   = 1;
        CLUSTER    = 2;
        CATEGORY   = 3;
        CONTROL    = 4;
        NAMESPACE  = 5;
        NODE       = 6;
        DEPLOYMENT = 7;
        CHECK      = 8;
    }

    // Next available tag: 3
    message AggregationKey {
        Scope scope = 1;
        string id = 2;
    }

    // Next available tag: 5
    message Result {
        repeated AggregationKey aggregation_keys = 1;
        Scope unit = 2;

        int32 num_passing = 3;
        int32 num_failing = 4;
        int32 num_skipped = 5;
    }

    // Next available tag: 5
    message Source {
        string cluster_id  = 1;
        string standard_id = 2;

        storage.ComplianceRunMetadata successful_run       = 3;
        repeated storage.ComplianceRunMetadata failed_runs = 4;
    }

    // Next available tag: 3
    message Response {
        repeated Result results        = 1;
        repeated Source sources        = 2;
        string          error_message  = 3;
    }
}

message PreComputedComplianceAggregation {
    repeated ComplianceAggregation.Result results         = 1;
    repeated ComplianceAggregation.Source sources         = 2;
    repeated string                       domain_pointers = 3;
}
