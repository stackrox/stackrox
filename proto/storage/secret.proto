syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

package storage;

// We use a graph model of the data in the backend.
//
// A secret is an object that has its own scope-free defined data as well as many relations to other
// objects. To represent this we have a central object with the context free information (Secret), and
// separate objects that represent contextual relationships.
////////////////////////////////////////////////////////////


// Flat secret object.
// Any properties of an individual secret.
// (regardless of time, scope, or context)
//////////////////////////////////////////
message Secret {
    string              id               = 1 [(gogoproto.moretags) = 'search:"Secret ID,store,hidden" sql:"pk"'];
    string              name             = 2 [(gogoproto.moretags) = 'search:"Secret,store"'];
    string              cluster_id       = 3 [(gogoproto.moretags) = 'search:"Cluster ID,store,hidden"'];
    string              cluster_name     = 4 [(gogoproto.moretags) = 'search:"Cluster,store"'];
    string              namespace        = 5 [(gogoproto.moretags) = 'search:"Namespace,store"'];
    string              type             = 6;
    map<string, string> labels           = 7;
    map<string, string> annotations      = 8;
    google.protobuf.Timestamp created_at = 9 [(gogoproto.moretags) = 'search:"Created Time"'];

    // Metadata about the secrets.
    // The secret need not be a file, but rather may be an arbitrary value.
    repeated SecretDataFile files        = 10;
    SecretRelationship relationship      = 11;
}

message ListSecret {
    string                    id           = 1;
    string                    name         = 2;
    string                    cluster_id   = 7;
    string                    cluster_name = 3;
    string                    namespace    = 4;
    repeated SecretType       types        = 5;
    google.protobuf.Timestamp created_at   = 6;
}

// Relationships with other objects.
// This is where scope specific values are stored.
// (per namespace, per cluster, per deployment, per container)
// Generally, you only should put data here if you want to be able to search for secrets
// by it.

// The combined relationships that belong to the secret.
// Next Tag: 6
message SecretRelationship {
    // Secret id
    string id = 1;
    // Container id to relationship.s
    repeated SecretContainerRelationship container_relationships = 4;
    // Deployment id to relationship.
    repeated SecretDeploymentRelationship deployment_relationships = 5;
}


// Secrets can be used by a deployment.
// Next Tag: 3
message SecretDeploymentRelationship {
    // Id of the deployment using the secret within a container.
    string id = 1;
    // Name of the deployment.
    string name = 2;
}

// Secrets can be mounted in a path in a container.
// Next Tag: 3
message SecretContainerRelationship {
    // Id of the container the secret is mounted in.
    string id = 1;

    // Path is a container specific mounting directory.
    string path = 2;
}

message ImagePullSecret {
    message Registry {
        string name     = 1 [(gogoproto.moretags) = 'search:"Image Pull Secret Registry,store"'];
        string username = 2;
    }
    repeated Registry registries = 1;
}

// Metadata about secret. Additional information is presented for a certificate file and
// imagePullSecret, but the "file" may also represent some arbitrary value.
message SecretDataFile {
    string     name = 1;
    SecretType type = 2 [(gogoproto.moretags) = 'search:"Secret Type"'];
    oneof metadata {
        Cert cert = 3;
        ImagePullSecret image_pull_secret = 4;
    }
}

enum SecretType {
    UNDETERMINED             = 0;
    PUBLIC_CERTIFICATE       = 1;
    CERTIFICATE_REQUEST      = 2;
    PRIVACY_ENHANCED_MESSAGE = 3;
    OPENSSH_PRIVATE_KEY      = 4;
    PGP_PRIVATE_KEY          = 5;
    EC_PRIVATE_KEY           = 6;
    RSA_PRIVATE_KEY          = 7;
    DSA_PRIVATE_KEY          = 8;
    CERT_PRIVATE_KEY         = 9;
    ENCRYPTED_PRIVATE_KEY    = 10;
    IMAGE_PULL_SECRET        = 11;
}

message Cert {
    CertName                  subject    = 1;
    CertName                  issuer     = 2;
    repeated string           sans       = 3;
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Timestamp end_date   = 5 [(gogoproto.moretags) = 'search:"Cert Expiration"'];
    string                    algorithm  = 6;
}

message CertName {
    string common_name         = 1;
    string country             = 2;
    string organization        = 3;
    string organization_unit   = 4;
    string locality            = 5;
    string province            = 6;
    string street_address      = 7;
    string postal_code         = 8;
    repeated string names      = 9;
}
