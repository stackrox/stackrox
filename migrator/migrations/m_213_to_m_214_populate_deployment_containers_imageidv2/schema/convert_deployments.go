// Code generated by pg-bindings generator. DO NOT EDIT.
package schema

import (
	"github.com/lib/pq"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/protocompat"
)

// ConvertDeploymentFromProto converts a `*storage.Deployment` to Gorm model
func ConvertDeploymentFromProto(obj *storage.Deployment) (*Deployments, error) {
	serialized, err := obj.MarshalVT()
	if err != nil {
		return nil, err
	}
	model := &Deployments{
		ID:                            obj.GetId(),
		Name:                          obj.GetName(),
		Type:                          obj.GetType(),
		Namespace:                     obj.GetNamespace(),
		NamespaceID:                   obj.GetNamespaceId(),
		OrchestratorComponent:         obj.GetOrchestratorComponent(),
		Labels:                        obj.GetLabels(),
		PodLabels:                     obj.GetPodLabels(),
		Created:                       protocompat.NilOrTime(obj.GetCreated()),
		ClusterID:                     obj.GetClusterId(),
		ClusterName:                   obj.GetClusterName(),
		Annotations:                   obj.GetAnnotations(),
		Priority:                      obj.GetPriority(),
		ImagePullSecrets:              pq.Array(obj.GetImagePullSecrets()).(*pq.StringArray),
		ServiceAccount:                obj.GetServiceAccount(),
		ServiceAccountPermissionLevel: obj.GetServiceAccountPermissionLevel(),
		RiskScore:                     obj.GetRiskScore(),
		PlatformComponent:             obj.GetPlatformComponent(),
		Serialized:                    serialized,
	}
	return model, nil
}

// ConvertContainerFromProto converts a `*storage.Container` to Gorm model
func ConvertContainerFromProto(obj *storage.Container, idx int, deploymentID string) (*DeploymentsContainers, error) {
	model := &DeploymentsContainers{
		DeploymentsID:                         deploymentID,
		Idx:                                   idx,
		ImageID:                               obj.GetImage().GetId(),
		ImageNameRegistry:                     obj.GetImage().GetName().GetRegistry(),
		ImageNameRemote:                       obj.GetImage().GetName().GetRemote(),
		ImageNameTag:                          obj.GetImage().GetName().GetTag(),
		ImageNameFullName:                     obj.GetImage().GetName().GetFullName(),
		ImageIDV2:                             obj.GetImage().GetIdV2(),
		SecurityContextPrivileged:             obj.GetSecurityContext().GetPrivileged(),
		SecurityContextDropCapabilities:       pq.Array(obj.GetSecurityContext().GetDropCapabilities()).(*pq.StringArray),
		SecurityContextAddCapabilities:        pq.Array(obj.GetSecurityContext().GetAddCapabilities()).(*pq.StringArray),
		SecurityContextReadOnlyRootFilesystem: obj.GetSecurityContext().GetReadOnlyRootFilesystem(),
		ResourcesCPUCoresRequest:              obj.GetResources().GetCpuCoresRequest(),
		ResourcesCPUCoresLimit:                obj.GetResources().GetCpuCoresLimit(),
		ResourcesMemoryMbRequest:              obj.GetResources().GetMemoryMbRequest(),
		ResourcesMemoryMbLimit:                obj.GetResources().GetMemoryMbLimit(),
	}
	return model, nil
}

// ConvertContainerConfig_EnvironmentConfigFromProto converts a `*storage.ContainerConfig_EnvironmentConfig` to Gorm model
func ConvertContainerConfig_EnvironmentConfigFromProto(obj *storage.ContainerConfig_EnvironmentConfig, idx int, deploymentID string, deploymentContainerIdx int) (*DeploymentsContainersEnvs, error) {
	model := &DeploymentsContainersEnvs{
		DeploymentsID:            deploymentID,
		DeploymentsContainersIdx: deploymentContainerIdx,
		Idx:                      idx,
		Key:                      obj.GetKey(),
		Value:                    obj.GetValue(),
		EnvVarSource:             obj.GetEnvVarSource(),
	}
	return model, nil
}

// ConvertVolumeFromProto converts a `*storage.Volume` to Gorm model
func ConvertVolumeFromProto(obj *storage.Volume, idx int, deploymentID string, deploymentContainerIdx int) (*DeploymentsContainersVolumes, error) {
	model := &DeploymentsContainersVolumes{
		DeploymentsID:            deploymentID,
		DeploymentsContainersIdx: deploymentContainerIdx,
		Idx:                      idx,
		Name:                     obj.GetName(),
		Source:                   obj.GetSource(),
		Destination:              obj.GetDestination(),
		ReadOnly:                 obj.GetReadOnly(),
		Type:                     obj.GetType(),
	}
	return model, nil
}

// ConvertEmbeddedSecretFromProto converts a `*storage.EmbeddedSecret` to Gorm model
func ConvertEmbeddedSecretFromProto(obj *storage.EmbeddedSecret, idx int, deploymentID string, deploymentContainerIdx int) (*DeploymentsContainersSecrets, error) {
	model := &DeploymentsContainersSecrets{
		DeploymentsID:            deploymentID,
		DeploymentsContainersIdx: deploymentContainerIdx,
		Idx:                      idx,
		Name:                     obj.GetName(),
		Path:                     obj.GetPath(),
	}
	return model, nil
}

// ConvertPortConfigFromProto converts a `*storage.PortConfig` to Gorm model
func ConvertPortConfigFromProto(obj *storage.PortConfig, idx int, deploymentID string) (*DeploymentsPorts, error) {
	model := &DeploymentsPorts{
		DeploymentsID: deploymentID,
		Idx:           idx,
		ContainerPort: obj.GetContainerPort(),
		Protocol:      obj.GetProtocol(),
		Exposure:      obj.GetExposure(),
	}
	return model, nil
}

// ConvertPortConfig_ExposureInfoFromProto converts a `*storage.PortConfig_ExposureInfo` to Gorm model
func ConvertPortConfig_ExposureInfoFromProto(obj *storage.PortConfig_ExposureInfo, idx int, deploymentID string, deploymentPortIdx int) (*DeploymentsPortsExposureInfos, error) {
	model := &DeploymentsPortsExposureInfos{
		DeploymentsID:       deploymentID,
		DeploymentsPortsIdx: deploymentPortIdx,
		Idx:                 idx,
		Level:               obj.GetLevel(),
		ServiceName:         obj.GetServiceName(),
		ServicePort:         obj.GetServicePort(),
		NodePort:            obj.GetNodePort(),
		ExternalIps:         pq.Array(obj.GetExternalIps()).(*pq.StringArray),
		ExternalHostnames:   pq.Array(obj.GetExternalHostnames()).(*pq.StringArray),
	}
	return model, nil
}

// ConvertDeploymentToProto converts Gorm model `Deployments` to its protobuf type object
func ConvertDeploymentToProto(m *Deployments) (*storage.Deployment, error) {
	var msg storage.Deployment
	if err := msg.UnmarshalVTUnsafe(m.Serialized); err != nil {
		return nil, err
	}
	return &msg, nil
}
