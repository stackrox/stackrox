// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package n16ton17

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	legacy "github.com/stackrox/rox/migrator/migrations/n_16_to_n_17_postgres_compliance_operator_scan_setting_bindings/legacy"
	pgStore "github.com/stackrox/rox/migrator/migrations/n_16_to_n_17_postgres_compliance_operator_scan_setting_bindings/postgres"
	pghelper "github.com/stackrox/rox/migrator/migrations/postgreshelper"

	"github.com/stackrox/rox/pkg/env"
	"github.com/stackrox/rox/pkg/rocksdb"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stackrox/rox/pkg/testutils/rocksdbtest"
	"github.com/stretchr/testify/suite"
)

func TestMigration(t *testing.T) {
	suite.Run(t, new(postgresMigrationSuite))
}

type postgresMigrationSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
	ctx         context.Context

	legacyDB   *rocksdb.RocksDB
	postgresDB *pghelper.TestPostgres
}

var _ suite.TearDownTestSuite = (*postgresMigrationSuite)(nil)

func (s *postgresMigrationSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(env.PostgresDatastoreEnabled.EnvVar(), "true")
	if !env.PostgresDatastoreEnabled.BooleanSetting() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}

	var err error
	s.legacyDB, err = rocksdb.NewTemp(s.T().Name())
	s.NoError(err)

	s.Require().NoError(err)

	s.ctx = sac.WithAllAccess(context.Background())
	s.postgresDB = pghelper.ForT(s.T(), true)
}

func (s *postgresMigrationSuite) TearDownTest() {
	rocksdbtest.TearDownRocksDB(s.legacyDB)
	s.postgresDB.Teardown(s.T())
}

func (s *postgresMigrationSuite) TestComplianceOperatorScanSettingBindingMigration() {
	newStore := pgStore.New(s.postgresDB.Pool)
	legacyStore, err := legacy.New(s.legacyDB)
	s.NoError(err)

	// Prepare data and write to legacy DB
	var complianceOperatorScanSettingBindings []*storage.ComplianceOperatorScanSettingBinding
	for i := 0; i < 200; i++ {
		complianceOperatorScanSettingBinding := &storage.ComplianceOperatorScanSettingBinding{}
		s.NoError(testutils.FullInit(complianceOperatorScanSettingBinding, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceOperatorScanSettingBindings = append(complianceOperatorScanSettingBindings, complianceOperatorScanSettingBinding)
	}

	s.NoError(legacyStore.UpsertMany(s.ctx, complianceOperatorScanSettingBindings))

	// Move
	s.NoError(move(s.postgresDB.GetGormDB(), s.postgresDB.Pool, legacyStore))

	// Verify
	count, err := newStore.Count(s.ctx)
	s.NoError(err)
	s.Equal(len(complianceOperatorScanSettingBindings), count)
	for _, complianceOperatorScanSettingBinding := range complianceOperatorScanSettingBindings {
		fetched, exists, err := newStore.Get(s.ctx, complianceOperatorScanSettingBinding.GetId())
		s.NoError(err)
		s.True(exists)
		s.Equal(complianceOperatorScanSettingBinding, fetched)
	}
}
