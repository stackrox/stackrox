// Code originally generated by pg-bindings generator.

package n30ton31

import (
	"context"

	protoTypes "github.com/gogo/protobuf/types"
	"github.com/pkg/errors"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/migrator/migrations"
	frozenSchema "github.com/stackrox/rox/migrator/migrations/frozenschema/v73"
	legacy "github.com/stackrox/rox/migrator/migrations/n_30_to_n_31_postgres_network_flows/legacy"
	pgStore "github.com/stackrox/rox/migrator/migrations/n_30_to_n_31_postgres_network_flows/postgres"
	"github.com/stackrox/rox/migrator/migrations/n_30_to_n_31_postgres_network_flows/store"
	"github.com/stackrox/rox/migrator/types"
	pkgMigrations "github.com/stackrox/rox/pkg/migrations"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/timestamp"
	"gorm.io/gorm"
)

var (
	startingSeqNum = pkgMigrations.BasePostgresDBVersionSeqNum() + 30 // 141

	migration = types.Migration{
		StartingSeqNum: startingSeqNum,
		VersionAfter:   &storage.Version{SeqNum: int32(startingSeqNum + 1)}, // 142
		Run: func(databases *types.Databases) error {
			legacyStore := legacy.NewClusterStore(databases.PkgRocksDB)
			if err := move(databases.DBCtx, databases.GormDB, databases.PostgresDB, legacyStore); err != nil {
				return errors.Wrap(err,
					"moving network_flows from rocksdb to postgres")
			}
			return nil
		},
	}
)

func move(ctx context.Context, gormDB *gorm.DB, postgresDB postgres.DB, legacyStore store.ClusterStore) error {
	pgutils.CreateTableFromModel(context.Background(), gormDB, frozenSchema.CreateTableNetworkFlowsStmt)

	clusterStore := pgStore.NewClusterStore(postgresDB)

	return legacyStore.Walk(ctx, func(clusterID string, ts *protoTypes.Timestamp, allFlows []*storage.NetworkFlow) error {
		store := clusterStore.GetFlowStore(clusterID)
		return store.UpsertFlows(ctx, allFlows, timestamp.FromProtobuf(ts))
	})
}

func init() {
	migrations.MustRegisterMigration(migration)
}
