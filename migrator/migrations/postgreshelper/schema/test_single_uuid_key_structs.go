// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestSingleUUIDKeyStructsStmt holds the create statement for table `test_single_uuid_key_structs`.
	CreateTableTestSingleUUIDKeyStructsStmt = &postgres.CreateStmts{
		GormModel: (*TestSingleUUIDKeyStructs)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// TestSingleUUIDKeyStructsSchema is the go schema for table `test_single_uuid_key_structs`.
	TestSingleUUIDKeyStructsSchema = func() *walker.Schema {
		schema := walker.Walk(reflect.TypeOf((*storage.TestSingleUUIDKeyStruct)(nil)), "test_single_uuid_key_structs")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_SEARCH_UNSET, "testsingleuuidkeystruct", (*storage.TestSingleUUIDKeyStruct)(nil)))
		return schema
	}()
)

const (
	// TestSingleUUIDKeyStructsTableName specifies the name of the table in postgres.
	TestSingleUUIDKeyStructsTableName = "test_single_uuid_key_structs"
)

// TestSingleUUIDKeyStructs holds the Gorm model for Postgres table `test_single_uuid_key_structs`.
type TestSingleUUIDKeyStructs struct {
	Key         string                               `gorm:"column:key;type:uuid;primaryKey;index:testsingleuuidkeystructs_key,type:hash"`
	Name        string                               `gorm:"column:name;type:varchar;unique"`
	StringSlice *pq.StringArray                      `gorm:"column:stringslice;type:text[]"`
	Bool        bool                                 `gorm:"column:bool;type:bool"`
	Uint64      uint64                               `gorm:"column:uint64;type:bigint"`
	Int64       int64                                `gorm:"column:int64;type:bigint"`
	Float       float32                              `gorm:"column:float;type:numeric"`
	Labels      map[string]string                    `gorm:"column:labels;type:jsonb"`
	Timestamp   *time.Time                           `gorm:"column:timestamp;type:timestamp"`
	Enum        storage.TestSingleUUIDKeyStruct_Enum `gorm:"column:enum;type:integer"`
	Enums       *pq.Int32Array                       `gorm:"column:enums;type:int[]"`
	Serialized  []byte                               `gorm:"column:serialized;type:bytea"`
}
