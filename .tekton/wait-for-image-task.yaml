apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for-image
  namespace: rh-acs-tenant
spec:
  description: Waits until the specified image is found and returns its digest.
  params:
  - name: IMAGE
    description: Image reference.
    type: string
  results:
  - name: GIT_REF
    description: Git commit for the image's source code from `vcs-ref` image label.
  - name: GIT_REPO
    description: Git repository URL for the image's source code from `source-location` image label.
  - name: IMAGE_DIGEST
    description: Image digest in the format `sha256:abcdef0123`.
  steps:
  - name: wait-for-image
    image: registry.access.redhat.com/ubi9/skopeo@sha256:f9f5916c4c1c988250b72ce8cc07355bede5c3bc78a082340be53457dfb16922
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      echo "Waiting for image $(params.IMAGE) to become available..."
      while true; do
        if skopeo inspect --raw "docker://$(params.IMAGE)"; then
          break
        fi
        sleep 1m
      done

      echo "Image $(params.IMAGE) found."

      raw_info="$(skopeo inspect \
        --retry-times 10 \
        --format '{{.Digest}} {{ index .Labels "vcs-ref" }} {{ index .Labels "source-location" }}' \
        --no-tags \
        "docker://$(params.IMAGE)")"

      # Turning raw_info into an array for easier handling.
      infos=( $raw_info )
      if [[ "${#infos[@]}" -ne 3 ]]; then
        echo "ERROR: Not all required information was found. Verify that the 'vcs-ref' and 'source-location' labels are set on the image $(params.IMAGE)."
        exit 1
      fi

      echo -n "${infos[0]}" | tee "$(results.IMAGE_DIGEST.path)"
      echo -n "${infos[1]}" | tee "$(results.GIT_REF.path)"
      echo -n "${infos[2]}" | tee "$(results.GIT_REPO.path)"
