apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-image-tag
  namespace: rh-acs-tenant
# TODO(ROX-23812): Refactor to a task bundle
spec:
  description: Determines the tag for the output image using the StackRox convention from 'make tag' output.
  params:
  - name: TAG_SUFFIX
    description: Suffix to append to generated image tag.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with
      the application source code. This should be the result of the git-clone task,
      results from other tasks might fail as dirty.
    type: string
  - name: MAKEFILE_DIRECTORY
    description: Directory in which to run 'make' command.
    type: string
    default: "."
  - name: MAKEFILE_TARGET
    description: Makefile target to run.
    type: string
    default: "tag"
  results:
  - name: IMAGE_TAG
    description: Image Tag determined by custom logic.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: determine-image-tag
    image: registry.access.redhat.com/ubi8:latest
    workingDir: /var/workdir/source
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      dnf -y upgrade --nobest
      dnf -y install git make

      .konflux/scripts/fail-build-if-git-is-dirty.sh

      # Basic protection against running something arbitrary.
      allowed_targets="tag|collector-tag|scanner-tag"
      if [[ "|${allowed_targets}|" != *"|$(params.MAKEFILE_TARGET)|"* ]]; then
        >&2 echo "Error: provided MAKEFILE_TARGET $(params.MAKEFILE_TARGET) is not one of the allowed targets ${allowed_targets}"
        exit 2
      fi

      image_tag="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory "$(params.MAKEFILE_TARGET)")$(params.TAG_SUFFIX)"

      echo -n "$image_tag" | tee "$(results.IMAGE_TAG.path)"
