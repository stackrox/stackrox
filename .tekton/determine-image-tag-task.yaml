apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-image-tag
  namespace: rh-acs-tenant
# TODO(ROX-23812): Refactor to a task bundle
spec:
  description: Determines the tag for input or output image using the StackRox conventions.
  params:
  - name: TAG_SUFFIX
    description: Suffix to append to generated image tag.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with
      the application source code. This should be the result of the git-clone task,
      results from other tasks might fail as dirty.
    type: string
  - name: MAKEFILE_DIRECTORY
    description: Directory in which to run 'make' command.
    type: string
    default: "."
  - name: MAKEFILE_TARGET
    description: Makefile target to run.
    type: string
    default: "tag"
  - name: TARGET_BRANCH
    description: Branch or tag that triggered a build pipeline with this task.
      Must be set to {{ target_branch }} Pipelines as Code variable.
      See https://pipelinesascode.com/docs/guide/authoringprs/#dynamic-variables
    type: string
  - name: SUPPRESS_TAG_SUFFIX_ON_TARGET_BRANCH_REGEX
    description: Regular expression which, when matches TARGET_BRANCH param, prevents TAG_SUFFIX to be appended to the
      resulting tag. Intended for Stable Stream builds where we want to produce image tags without the "-fast" suffix.
      Set to release branches, release and RC tags by default.
    type: string
    default: ^(release-.*|refs/tags/[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?)$
  results:
  - name: IMAGE_TAG
    description: Image Tag determined by custom logic.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: determine-image-tag
    image: registry.access.redhat.com/ubi9:latest
    workingDir: /var/workdir/source
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      dnf -y upgrade --nobest
      dnf -y install git make

      .konflux/scripts/fail-build-if-git-is-dirty.sh

      suffix="$(params.TAG_SUFFIX)"
      target="$(params.MAKEFILE_TARGET)"

      if [[ "${target}" == "collector-tag" || "${target}" == "scanner-tag" ]]; then

        # For dependencies (i.e. scanner and collector) tags, we always take what make returns. Konflux builds of
        # scanner and collector don't replace quay.io/rhacs-eng/ builds that's why we currently locate Konflux images
        # via the suffix.
        image_tag="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory "${target}")${suffix}"

      elif [[ "${target}" != "tag" ]]; then

        >&2 echo "Error: provided MAKEFILE_TARGET ${target} is not recognized."
        exit 2

      else # "${target}" is "tag"

        target_branch="$(params.TARGET_BRANCH)"

        if grep -qE '$(params.SUPPRESS_TAG_SUFFIX_ON_TARGET_BRANCH_REGEX)' <<< "${target_branch}"; then
          echo "Target branch ${target_branch} matches regex, the image tag suffix ${suffix} will be omitted."
          suffix=""
        fi

        if [[ "${target_branch}" == refs/tags/* ]]; then
          echo "${target_branch} seems to be a build of a git tag, will use this git tag."
          image_tag="${target_branch#refs/tags/}"
        else
          # Otherwise, delegate the work to Makefiles.
          image_tag="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory "${target}")"
        fi

        image_tag="${image_tag}${suffix}"

      fi

      echo -n "${image_tag}" | tee "$(results.IMAGE_TAG.path)"
