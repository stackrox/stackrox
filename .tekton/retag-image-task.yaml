apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: retag-image
  namespace: rh-acs-tenant
# TODO(ROX-22196): Refactor to a task bundle
spec:
  description: |
    Copies input image to the desired repo with the desired tag.
    Handles index images that reference per-arch images.
    Copies attached `cosign` and `oras` artifacts.
    Copies source images that are logically linked to the input image digest.
  params:
  - name: INPUT_IMAGE_REPO
    description: Repository of the input image
    type: string
  - name: INPUT_IMAGE_TAG
    description: Tag of the input image
    type: string
  - name: OUTPUT_IMAGE_REPO
    description: Repository of the output image
    type: string
  - name: OUTPUT_IMAGE_TAG
    description: Repository of the output image
    type: string
  - name: TOLERATE_SOURCES_IMAGE_COPY_FAILURE
    # TODO(ROX-26721): delete this param after SCANNER_VERSION is updated to 2.34.x-103-g8c2cc6eb26 or later.
    description: |
      Controls whether a failure during copying image with sources is ok to ignore.
      Exists merely for scanner V2 images until SCANNER_VERSION points at or after
      https://github.com/stackrox/scanner/commit/8c2cc6eb2612da3402267a751f186b1c65703038
    type: string
    default: "false"
  results:
  - name: IMAGE_DIGEST
    description: Digest of the output image; should be the same as of the input one
  - name: IMAGE_URL
    description: Image repository and tag of the output image
  - name: IMAGE_REF
    description: Image reference of the output image containing both the repository and the digest
  steps:
  - name: copy-image
    image: quay.io/konflux-ci/release-service-utils:latest@sha256:48b31c88616f47328da613092e62b54b30cfbc7b3eb972d213db7b696f8edbf7
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      
      SKOPEO_RETRIES=5
      
      function copy_image() {
        local -r input_url="${1}"
        local -r output_url="${2}"

        if [[ "${input_url}" == "${output_url}" ]]; then
          >&2 echo "Will not copy image ${input_url} into itself."
          exit 5
        fi

        echo "Copying image from ${input_url} ..."
        echo "... to ${output_url} ..."

        # cosign copies not just cosign artifacts but also images and it understands and copies index images.
        # --force argument is needed to prevent the command failing when it runs into (partial) previous copies with
        # errors like the following.
        #   Error: image "quay.io/rhacs-eng/collector:sha256-4b509fdf27761150a5a5ce519f087bc6d69af9d886a63f67f70b1e293643ea19" already exists. Use `-f` to overwrite
        cosign copy --force "${input_url}" "${output_url}"

        oras cp --recursive "${input_url}" "${output_url}"
      }

      function get_digest() {
        local -r image_url="${1}"
        skopeo inspect \
          --retry-times="${SKOPEO_RETRIES}" \
          --format '{{.Digest}}' \
          --no-tags \
          "docker://${image_url}"
      }

      INPUT_URL="$(params.INPUT_IMAGE_REPO):$(params.INPUT_IMAGE_TAG)"
      OUTPUT_URL="$(params.OUTPUT_IMAGE_REPO):$(params.OUTPUT_IMAGE_TAG)"
      
      # This copies the images themselves.
      # It also handles the case when the image is index on top of arch-specific containers in which case arch-specific
      # containers are also copied (but not tags of arch-specific containers if they were additionally tagged).
      copy_image "${INPUT_URL}" "${OUTPUT_URL}"

      echo "Figuring the input image digest ..."
      INPUT_DIGEST="$(get_digest "${INPUT_URL}")"

      echo "Figuring the output image digest ..."
      OUTPUT_DIGEST="$(get_digest "${OUTPUT_URL}")"

      echo "Checking if the input image digest ${INPUT_DIGEST} is the same as the output image digest ${OUTPUT_DIGEST} ..."
      [[ "${INPUT_DIGEST}" == "${OUTPUT_DIGEST}" ]]

      # This handles the image with source code, not to be confused with the input image itself.
      echo "Copying the image with sources ..."
      # Tag determination borrowed from
      # https://github.com/konflux-ci/release-service-catalog/blob/92dabb8a31c42669ab9b6ccce831487727514059/tasks/push-snapshot/push-snapshot.yaml#L158
      SOURCES_IMAGE_TAG="${INPUT_DIGEST/:/-}.src"
      INPUT_SOURCES_IMAGE_URL="$(params.INPUT_IMAGE_REPO):${SOURCES_IMAGE_TAG}"
      OUTPUT_SOURCES_IMAGE_URL="$(params.OUTPUT_IMAGE_REPO):${SOURCES_IMAGE_TAG}"
      if [[ "${INPUT_SOURCES_IMAGE_URL}" == "${OUTPUT_SOURCES_IMAGE_URL}" ]]; then
        # This is the case when we retag in the same repo.
        echo "Repo of image with sources would not change and so the image does not need to be copied."
      elif ! copy_image "${INPUT_SOURCES_IMAGE_URL}" "${OUTPUT_SOURCES_IMAGE_URL}"; then
        # TODO(ROX-26721): simplify after SCANNER_VERSION is updated to 2.34.x-103-g8c2cc6eb26 or later.
        if [[ "$(params.TOLERATE_SOURCES_IMAGE_COPY_FAILURE)" == "true" ]]; then
          >&2 echo "Sources image copying failed but TOLERATE_SOURCES_IMAGE_COPY_FAILURE allows to proceed."
        else
          >&2 echo "Sources image copying failed."
          exit 6
        fi
      fi

      echo "Done"
      
      echo -n "${OUTPUT_DIGEST}" | tee "$(results.IMAGE_DIGEST.path)"; echo
      echo -n "${OUTPUT_URL}" | tee "$(results.IMAGE_URL.path)"; echo
      # build-image-index task provides both tag and the digest in the IMAGE_REF. We follow its example.
      echo -n "${OUTPUT_URL}@${OUTPUT_DIGEST}" | tee "$(results.IMAGE_REF.path)"; echo
