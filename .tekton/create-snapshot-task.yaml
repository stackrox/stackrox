apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-snapshot
  namespace: rh-acs-tenant
spec:
  description: Creates snapshot
  params:
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the application source code.
    type: string
  - name: IMAGE_REFS
    description: Image references.
    type: string
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: render-snapshot
    image: registry.access.redhat.com/ubi9/ubi:latest
    workingDir: /var/workdir/source
    env:
      - name: APPLICATION
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['appstudio.openshift.io/application']
      - name: IMAGE_REFS
        value: $(params.IMAGE_REFS)
    script: |
      #!/usr/bin/env python3

      import os
      import json


      def load_image_refs():
          return json.loads(os.getenv("IMAGE_REFS", "[]"))


      def process_component(component):
          return {
              "containerImage": component["ref"],
              "name": component["component"],
              "source": {
                  "git": {
                      "revision": component["revision"],
                      "url": component["repository"]
                  }
              }
          }


      def construct_snapshot(snapshot_name, application, components):
          return {
              "apiVersion": "appstudio.redhat.com/v1alpha1",
              "kind": "Snapshot",
              "metadata": {
                  "name": snapshot_name
              },
              "spec": {
                  "application": application,
                  "components": components
              }
          }


      if __name__ == '__main__':
          image_refs = load_image_refs()
          components = [process_component(c) for c in image_refs]
          snapshot = construct_snapshot(
              "tm-acs-4-6-0",
              os.getenv("APPLICATION", ""),
              components
          )

          print("Snapshot:", snapshot)

          with open("snapshot.json", "w") as f:
              json.dump(snapshot, f)

  - name: apply-snapshot
    image: registry.access.redhat.com/ubi9/ubi:latest
    workingDir: /var/workdir/source
    script: |
      #!/usr/bin/env bash

      set -euo pipefail
      dnf -y upgrade --nobest
      dnf -y install jq

      cat snapshot.json | jq
