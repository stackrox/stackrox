name: Cut RC
on:
  milestone:
    types:
      - closed

  workflow_dispatch:
    inputs:
      version:
        description: Full RC version (A.B.C[-N]-rc.D)
        required: true
        default: 0.0.0-test-rc.1
        type: string
      dry-run:
        description: Dry-run
        required: false
        default: true
        type: boolean
      create-k8s-cluster:
        description: Create a GKE demo cluster
        required: true
        default: true
        type: boolean
      create-os4-cluster:
        description: Create an Openshift 4 demo cluster
        required: true
        default: true
        type: boolean
      create-long-cluster:
        description: Create a long-running cluster on RC1
        required: true
        default: true
        type: boolean
      check-jira-issues:
        description: Check Jira issues for current release
        required: true
        default: true
        type: boolean

env:
  main_branch: ${{github.event.repository.default_branch}}
  script_url: /repos/${{github.repository}}/contents/.github/workflows/scripts/common.sh?ref=${{ github.ref_name }}
  DRY_RUN: ${{ fromJSON('["true", "false"]')[github.event.inputs.dry-run != 'true'] }}
  ACCEPT_RAW: "Accept: application/vnd.github.v3.raw"
  GH_TOKEN: ${{ github.token }}
  GH_NO_UPDATE_NOTIFIER: 1

run-name: >-
  ${{
    format('Cut {0}{1}{2}',
      github.event.milestone.title,
      inputs.version,
      fromJSON('[" (dry-run)", ""]')[inputs.dry-run != true]
    )
  }}

# Ensure that only a single release automation workflow can run at a time.
concurrency: Release automation

jobs:
  properties:
    runs-on: ubuntu-latest
    outputs:
      slack-channel: ${{ fromJSON(format('["{0}","{1}"]', steps.fetch.outputs.dry-slack-channel, steps.fetch.outputs.slack-channel))[github.event.inputs.dry-run != 'true'] }}
      jira-projects: ${{ steps.fetch.outputs.jira-projects }}
    steps:
      - name: Read workflow properties file
        id: fetch
        env:
          PROPERTIES_URL: /repos/${{ github.repository }}/contents/.github/properties?ref=${{ github.ref_name }}
        run: gh api -H "$ACCEPT_RAW" "$PROPERTIES_URL" >> "$GITHUB_OUTPUT"

  run-parameters:
    name: Run parameters
    runs-on: ubuntu-latest
    steps:
      - run: |
          [ "$DRY_RUN" = "true" ] && echo "::warning::This is a dry run"
          echo "Event: ${{github.event_name}}" >>"$GITHUB_STEP_SUMMARY"
          if [ "${{github.event_name}}" = "workflow_dispatch" ]; then
            cat <<EOF >>"$GITHUB_STEP_SUMMARY"
          \`\`\`
          ${{toJSON(inputs)}}
          \`\`\`
          EOF
          fi

  variables:
    name: Setup variables
    uses: ./.github/workflows/variables.yml
    with:
      version: ${{format('{0}{1}', github.event.milestone.title, github.event.inputs.version)}}
      assert-format: A.B.C[-N]-rc.D

  check-jira:
    name: Check Jira tickets for release
    if: github.event.inputs.check-jira-issues == 'true'
    needs: [variables, properties]
    runs-on: ubuntu-latest
    steps:
      - name: Query JIRA
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            check-jira-issues \
            "${{needs.properties.outputs.jira-projects}}" \
            "${{needs.variables.outputs.release}}" \
            "${{needs.variables.outputs.patch}}" \
            "${{needs.variables.outputs.named-release-patch}}"

  postpone-prs:
    name: Postpone open PRs
    needs: variables
    runs-on: ubuntu-latest
    steps:
      - name: Check open PRs
        id: check
        run: |
          set -u
          PRs=$(gh pr list -s open \
          --repo "${{github.repository}}" \
          --search "milestone:${{needs.variables.outputs.milestone}}" \
          --json number \
          --jq length)
          if [ "$PRs" -gt 0 ]; then
            echo "open-issues=$PRs" >> "$GITHUB_OUTPUT"
          fi

      - name: Create next milestone
        if: env.DRY_RUN == 'false' && steps.check.outputs.open-issues != ''
        run: |
          set -u
          if ! RESPONSE=$(gh api -X POST \
            "repos/${{github.repository}}/milestones" \
            -f title="${{needs.variables.outputs.next-milestone}}" \
            2>&1); then
            if grep "HTTP 422" <<< "$RESPONSE"; then
              echo "Milestone ${{needs.variables.outputs.next-milestone}} already exists." >> "$GITHUB_STEP_SUMMARY"
            else
              echo "::error::Couldn't create milestone ${{needs.variables.outputs.next-milestone}}: $RESPONSE"
              exit 1
            fi
          else
            NEXT_MILESTONE_URL=$(echo "${RESPONSE}" | jq -r '.html_url')
            echo ":arrow_right: Close the newly created [milestone ${{ needs.variables.outputs.next-milestone }}](${NEXT_MILESTONE_URL}) when ready, or delete it when finishing the release." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Move open PRs
        run: |
          set -u
          PRS=$(gh pr list -s open \
            --repo "${{github.repository}}" \
            --search "milestone:${{needs.variables.outputs.milestone}}" \
            --json number \
            --jq ".[] | .number")

          echo "The following PRs are still open: $PRS"

          for PR in $PRS; do
            [ "$DRY_RUN" = "false" ] && \
            gh pr edit "$PR" \
              --milestone "${{needs.variables.outputs.next-milestone}}" \
              --repo "${{github.repository}}"

            echo "PR $PR has been moved to milestone ${{needs.variables.outputs.next-milestone}}." >> "$GITHUB_STEP_SUMMARY"
          done

  cut-rc:
    name: Tag RC for milestone ${{needs.variables.outputs.milestone}}
    runs-on: ubuntu-latest
    needs: [variables, properties, postpone-prs, check-jira]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{needs.variables.outputs.branch}}
          token: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
      - name: Initialize mandatory git config
        run: |
          git config user.name "${{github.event.sender.login}}"
          git config user.email noreply@github.com
      - run: |
          # Could be optimized: done only if there are closed PRs to cherry-pick
          git fetch origin ${{env.main_branch}}:${{env.main_branch}} --unshallow
      - name: Cherry-pick commits from the main branch
        id: cherry-pick
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            cherry-pick \
            "${{needs.variables.outputs.milestone}}" \
            "${{needs.variables.outputs.branch}}" \
            "${{needs.variables.outputs.named-release-patch}}"

      - name: Post to Slack about picked cherries
        if: failure() && steps.cherry-pick.outputs.bad-cherries != ''
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":${{ fromJSON('["desert", "red_circle"]')[github.event.inputs.dry-run != 'true'] }}:
            *Couldn't close upstream milestone ${{needs.variables.outputs.milestone}} on <${{github.server_url}}/${{github.repository}}|${{github.repository}}>.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            "*Couldn't cherry-pick the following PRs
            to the release branch:*\n\n${{steps.cherry-pick.outputs.bad-cherries}}" }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":arrow_right: *Please assist the PR assignees in merging their changes to `${{needs.variables.outputs.branch}}` branch
            and then re-run failed jobs of the <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|workflow run>.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ">
            Repository: <${{github.server_url}}/${{github.repository}}|${{github.repository}}>\n>
            Milestone: <${{github.event.milestone.html_url}}|${{needs.variables.outputs.milestone}}>\n>
            Workflow: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>" }}
            ]}

      - name: Tag release branch with "${{needs.variables.outputs.milestone}}"
        id: tag
        env:
          GH_TOKEN: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            tag-rc \
            "${{needs.variables.outputs.milestone}}"

      - name: Create next milestone
        if: env.DRY_RUN == 'false'
        env:
          GH_TOKEN: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
        run: |
          set -u
          if ! http_code=$(gh api --silent -X POST \
            "repos/${{github.repository}}/milestones" \
            -f title="${{needs.variables.outputs.next-milestone}}" \
            2>&1); then

            if grep "HTTP 422" <<< "$http_code"; then
              echo "Milestone ${{needs.variables.outputs.next-milestone}} already exists." >> "$GITHUB_STEP_SUMMARY"
            else
              echo "::error::Couldn't create milestone ${{needs.variables.outputs.next-milestone}}: $http_code"
              exit 1
            fi
          else
            echo ":arrow_right: Close the newly created milestone [${{needs.variables.outputs.next-milestone}}](${{github.event.milestone.html_url}}) when ready." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Create GitHub Pre-release
        id: pre-release
        if: env.DRY_RUN == 'false'
        env:
          GH_TOKEN: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            create-release \
            "${{ needs.variables.outputs.milestone }}" \
            "true"

      - run: |
          echo "Created GitHub pre-release [${{needs.variables.outputs.milestone}}](${{steps.pre-release.outputs.url}})" >> "$GITHUB_STEP_SUMMARY"
      - name: Post to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":${{ fromJSON('["desert", "white_check_mark"]')[github.event.inputs.dry-run != 'true'] }}:
            *Upstream release candidate <${{steps.pre-release.outputs.url}}|${{needs.variables.outputs.milestone}}>
            of <${{github.server_url}}/${{github.repository}}|${{github.repository}}> has been published on GitHub*" }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":arrow_right: Once all checks pass and you're ready for release,
            run the <${{ github.server_url }}/${{ github.repository }}/actions/workflows/finish-release.yml|Finish Release>
            workflow and delete the `${{ needs.variables.outputs.next-milestone }}`
            milestone to avoid confusion." }}
            ]}

  wait-for-images:
    name: Wait for images on Quay.io
    needs: [variables, cut-rc]
    runs-on: ubuntu-latest
    if: >- # Skip if no clusters are going to be created.
      github.event.inputs.create-k8s-cluster != 'false' ||
      github.event.inputs.create-os4-cluster != 'false' ||
      needs.variables.outputs.rc == '1' &&
      github.event.inputs.create-long-cluster != 'false'
    strategy:
      matrix:
        image: [main, scanner, scanner-db, collector]
    steps:
      - name: Wait for the ${{matrix.image}} image
        uses: stackrox/actions/release/wait-for-image@v1
        with:
          token: "${{ secrets.QUAY_RHACS_ENG_BEARER_TOKEN }}"
          image: "rhacs-eng/${{ matrix.image }}:${{ needs.variables.outputs.milestone }}"
          # Do not wait if running dry
          interval: ${{ fromJSON('["30", "0"]')[env.DRY_RUN == 'true'] }}

  create-k8s-cluster:
    name: Create k8s cluster
    needs: [variables, wait-for-images]
    # Cannot use env.DRY_RUN here. `github.event.inputs.*` can be 'true', 'false' or empty.
    if: github.event.inputs.dry-run != 'true' && github.event.inputs.create-k8s-cluster != 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: stackrox/actions/infra/create-cluster@v1
      with:
        token: ${{ secrets.INFRA_TOKEN }}
        flavor: qa-demo
        name: qa-k8s-${{ needs.variables.outputs.milestone }}
        args: main-image=quay.io/rhacs-eng/main:${{ needs.variables.outputs.milestone }}
        lifespan: 48h

  notify-k8s-cluster:
    name: Notify about K8s cluster creation
    needs: [variables, properties, create-k8s-cluster]
    runs-on: ubuntu-latest
    env:
      NAME: qa-k8s-${{ needs.variables.outputs.milestone }}
    steps:
      - name: Determine demo url and cluster name
        id: get_demo_artifacts
        run: |
          echo "cluster-name=${NAME//./-}" >> "$GITHUB_OUTPUT"
          echo "url=https://${NAME//[.-]/}.demo.stackrox.com/login" >> "$GITHUB_OUTPUT"
      - name: Post to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada: *<https://infra.rox.systems/cluster/${{ steps.get_demo_artifacts.outputs.cluster-name }}|QA demo cluster> `${{ steps.get_demo_artifacts.outputs.cluster-name }}` is being created for ${{ needs.variables.outputs.milestone }} milestone of <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>.*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":arrow_right: When it is ready in ca. 20 minutes, a notification will be posted in #infra-notifications channel, and the cluster will be accessible at ${{ steps.get_demo_artifacts.outputs.url }} with your @stackrox.com Google account."
                  }
                }
              ]
            }

  create-os4-cluster:
    name: Create OS4 cluster
    needs: [variables, wait-for-images]
    # Cannot use env.DRY_RUN here. `github.event.inputs.*` can be 'true', 'false' or empty.
    if: github.event.inputs.dry-run != 'true' && github.event.inputs.create-os4-cluster != 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: stackrox/actions/infra/create-cluster@v1
      with:
        token: ${{ secrets.INFRA_TOKEN }}
        flavor: openshift-4-demo
        name: openshift-4-demo-${{ needs.variables.outputs.milestone }}
        args: openshift-version=ocp/stable-4.10
        lifespan: 48h
        wait: true

  patch-os4-cluster:
    name: Patch OS4 cluster
    needs: [variables, create-os4-cluster]
    runs-on: ubuntu-latest
    env:
      NAME: openshift-4-demo-${{needs.variables.outputs.milestone}}
      TAG: ${{needs.variables.outputs.milestone}}
      KUBECONFIG: artifacts/kubeconfig
      INFRA_TOKEN: ${{secrets.INFRA_TOKEN}}
    steps:
      - uses: stackrox/actions/infra/install-infractl@v1
      - name: Test readiness
        run: |
          STATUS=$(infractl get "${NAME//./-}" --json | jq -r .Status)
          if [ "$STATUS" != "READY" ]; then
            exit 1
          fi
      - name: Download artifacts
        id: artifacts
        run: |
          infractl artifacts "${NAME//./-}" -d artifacts >> "$GITHUB_STEP_SUMMARY"
      - name: Download Openshift CLI
        run: |
          URL=$(sed "s/console-/downloads-/" artifacts/url-openshift)
          curl --fail -o oc.tar -k -L "$URL/amd64/linux/oc.tar"
          tar xf oc.tar
      - name: Patch central
        run: |
          ./oc -n stackrox set image deploy/central central="quay.io/rhacs-eng/main:$TAG"
      - name: Patch scanner
        run: |
          ./oc -n stackrox patch hpa/scanner -p '{"spec":{"minReplicas":2}}'
          ./oc -n stackrox set image deploy/scanner scanner="quay.io/rhacs-eng/scanner:$TAG"
          ./oc -n stackrox set image deploy/scanner-db db="quay.io/rhacs-eng/scanner-db:$TAG"
          ./oc -n stackrox set image deploy/scanner-db init-db="quay.io/rhacs-eng/scanner-db:$TAG"
      - name: Patch sensor
        env:
          PATCH: >-
            {
              "spec": {
                "template": {
                  "spec": {
                    "containers": [ {
                      "name":"sensor",
                      "env": [ {
                        "name": "POD_NAMESPACE",
                        "valueFrom": { "fieldRef": { "fieldPath": "metadata.namespace"}}
                      } ],
                      "volumeMounts": [
                        { "name": "cache", "mountPath": "/var/cache/stackrox" }
                      ]
                    } ],
                    "volumes": [ {
                      "name": "cache","emptyDir": {}
                    } ]
                  }
                }
              }
            }
        run: |
          ./oc -n stackrox patch deploy/sensor -p '${{env.PATCH}}'
          ./oc -n stackrox set image deploy/sensor sensor="quay.io/rhacs-eng/main:$TAG"
      - name: Patch collector
        run: |
          ./oc -n stackrox set image ds/collector compliance="quay.io/rhacs-eng/main:$TAG"
          ./oc -n stackrox set image ds/collector collector="quay.io/rhacs-eng/collector:$TAG"
          ./oc -n stackrox set image deploy/admission-control admission-control="quay.io/rhacs-eng/main:$TAG"

  notify-os4-cluster:
    name: Notify about Openshift cluster creation
    needs: [variables, properties, patch-os4-cluster]
    runs-on: ubuntu-latest
    env:
      NAME: openshift-4-demo-${{ needs.variables.outputs.milestone }}
    steps:
      - name: Determine demo url and cluster name
        id: get_demo_artifacts
        run: |
          echo "cluster-name=${NAME//./-}" >> "$GITHUB_OUTPUT"
          echo "url=https://central-stackrox.apps.${NAME//./-}.openshift.infra.rox.systems/login" >> "$GITHUB_OUTPUT"
      - name: Post to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada: *<https://infra.rox.systems/cluster/${{ steps.get_demo_artifacts.outputs.cluster-name }}|Openshift 4 Demo cluster> `${{ steps.get_demo_artifacts.outputs.cluster-name }}` was created for ${{ needs.variables.outputs.milestone }} milestone of <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>.*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":arrow_right: The cluster is accessible at ${{ steps.get_demo_artifacts.outputs.url }}. You can find the admin password and kubeconfig with `infractl artifacts ${{ steps.get_demo_artifacts.outputs.cluster-name }}`."
                  }
                }
              ]
            }

  create-long-running-cluster:
    name: Create GKE long-running cluster
    needs: [variables, wait-for-images]
    # Cannot use env.DRY_RUN here. `github.event.inputs.*` can be 'true', 'false' or empty.
    if: >-
      github.event.inputs.dry-run != 'true' &&
      needs.variables.outputs.rc == '1' &&
      github.event.inputs.create-long-cluster != 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: stackrox/actions/infra/create-cluster@v1
      with:
        token: ${{ secrets.INFRA_TOKEN }}
        flavor: gke-default
        name: gke-long-running-${{ needs.variables.outputs.milestone }}
        lifespan: 168h
        args: nodes=5,machine-type=e2-standard-8
        wait: true

  patch-long-running-cluster:
    name: Patch long-running cluster
    needs: [variables, properties, create-long-running-cluster]
    runs-on: ubuntu-latest
    env:
      NAME: gke-long-running-${{ needs.variables.outputs.milestone }}
      TAG: ${{needs.variables.outputs.milestone}}
      KUBECONFIG: artifacts/kubeconfig
      INFRA_TOKEN: ${{secrets.INFRA_TOKEN}}
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
    steps:
      - uses: stackrox/actions/infra/install-infractl@v1
      - name: Test readiness
        run: |
          STATUS=$(infractl get "${NAME//./-}" --json | jq -r .Status)
          if [ "$STATUS" != "READY" ]; then
            exit 1
          fi
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{needs.variables.outputs.milestone}}
          repository: stackrox/stackrox
      - uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_RELEASE_AUTOMATION_SA }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          install_components: "gke-gcloud-auth-plugin"
      - name: Download artifacts
        id: artifacts
        run: |
          infractl artifacts "${NAME//./-}" -d artifacts >> "$GITHUB_STEP_SUMMARY"
      - name: Launch central
        id: launch_central
        env:
          MAIN_IMAGE_TAG: ${{needs.variables.outputs.milestone}} # Release version, e.g. 3.63.0-rc.2.
          API_ENDPOINT: localhost:8000
          STORAGE: pvc # Backing storage
          STORAGE_CLASS: faster # Runs on an SSD type
          STORAGE_SIZE: 100 # 100G
          MONITORING_SUPPORT: true # Runs monitoring
          LOAD_BALANCER: lb
          ROX_ADMIN_USERNAME: admin
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.RELEASE_MANAGEMENT_PAGERDUTY_INTEGRATION_KEY }}
          REGISTRY_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
        run: |
          set -uo pipefail
          ./deploy/k8s/central.sh
          kubectl -n stackrox port-forward deploy/central 8000:8443 > /dev/null 2>&1 &
          sleep 20

          ./deploy/k8s/sensor.sh

          kubectl -n stackrox set env deploy/sensor MUTEX_WATCHDOG_TIMEOUT_SECS=0
          kubectl -n stackrox set env deploy/sensor ROX_FAKE_KUBERNETES_WORKLOAD=long-running
          kubectl -n stackrox patch deploy/sensor -p '{"spec":{"template":{"spec":{"containers":[{"name":"sensor","resources":{"requests":{"memory":"3Gi","cpu":"2"},"limits":{"memory":"12Gi","cpu":"4"}}}]}}}}'

          kubectl -n stackrox set env deploy/central MUTEX_WATCHDOG_TIMEOUT_SECS=0
          kubectl -n stackrox patch deploy/central -p '{"spec":{"template":{"spec":{"containers":[{"name":"central","resources":{"requests":{"memory":"3Gi","cpu":"2"},"limits":{"memory":"12Gi","cpu":"4"}}}]}}}}'

          ROX_ADMIN_PASSWORD=$(cat deploy/k8s/central-deploy/password)
          echo "::add-mask::$ROX_ADMIN_PASSWORD"
          CENTRAL_IP=$(kubectl -n stackrox get svc/central-loadbalancer -o json | jq -r '.status.loadBalancer.ingress[0] | .ip // .hostname')
          kubectl -n stackrox create secret generic access-rhacs --from-literal="username=${ROX_ADMIN_USERNAME}" --from-literal="password=${ROX_ADMIN_PASSWORD}" --from-literal="central_url=https://${CENTRAL_IP}"
          echo "rox_password=${ROX_ADMIN_PASSWORD}" >> "$GITHUB_OUTPUT"
          echo "cluster_name=${NAME//./-}" >> "$GITHUB_OUTPUT"

          printf "Long-running GKE cluster %s has been patched.\nAccess it by running \`./scripts/release-tools/setup-central-access.sh %s\` from your local machine." "${NAME//./-}" "${NAME//./-}" >> "$GITHUB_STEP_SUMMARY"

      - name: Post to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada: *Long-running cluster `${{ steps.launch_central.outputs.cluster_name }}` created for ${{ needs.variables.outputs.milestone }} milestone of <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>.*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":arrow_right: Setup your local access to Central by running:\n```curl -L https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/release-tools/setup-central-access.sh | bash -s -- ${{ steps.launch_central.outputs.cluster_name }}```"
                  }
                }
              ]
            }

      - name: Start fake workload
        env:
          API_ENDPOINT: localhost:8000
          ROX_PASSWORD: ${{ steps.launch_central.outputs.rox_password }}
        run: |
          echo "::add-mask::$ROX_PASSWORD"
          kubectl -n stackrox port-forward deploy/central 8000:8443 > /dev/null 2>&1 &
          sleep 20
          ./scale/launch_workload.sh np-load
          echo "Fake workload has been deployed to the long-running cluster" >> "$GITHUB_STEP_SUMMARY"

  notify-failed-clusters:
    name: Notify about failed cluster creation
    needs:
      [
        variables,
        properties,
        create-k8s-cluster,
        create-os4-cluster,
        create-long-running-cluster,
      ]
    if: >- # Required as create-*-cluster jobs could be skipped while other jobs could fail.
      always() && (
        needs.create-k8s-cluster.result == 'failure' ||
        needs.create-os4-cluster.result == 'failure' ||
        needs.create-long-running-cluster.result == 'failure'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Post to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [
              { "type": "section", "text": { "type": "mrkdwn", "text":
              ":red_circle: *Couldn't create test clusters for ${{needs.variables.outputs.milestone}} milestone of <${{github.server_url}}/${{github.repository}}|${{github.repository}}>.*" }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":arrow_right: *Please investigate the output of the
            <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>
            workflow run and then restart the workflow.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ">
            Repository: <${{github.server_url}}/${{github.repository}}|${{github.repository}}>\n>
            Milestone: ${{needs.variables.outputs.milestone}}\n>
            Workflow: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>" }}
            ]}
