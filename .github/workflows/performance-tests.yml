name: Performance tests
on:
  workflow_dispatch:
  push:
    branches:
      - hack2023/k6-ci-pipeline-tests
jobs:
  run-parameters:
    name: Run parameters
    runs-on: ubuntu-latest
    steps:
      - run: |
          {
            echo "Event: ${{ github.event_name }}"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo '```'
              echo "${{ toJSON(inputs) }}"
              echo '```'
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  run-k6-performance-tests:
    name: Run k6 performance tests
    runs-on: ubuntu-latest
    env:
      # TODO: dynamic name should be used
      NAME: k6-test
      SCALE_CLUSTER_NAME: k6-test-gke
      KUBECONFIG: artifacts/kubeconfig
      INFRA_TOKEN: ${{secrets.INFRA_TOKEN}}
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      TERM: xterm
      DEFAULT_IMAGE_REGISTRY: "quay.io/rhacs-eng"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TODO: Wait for image built in PR!

      # Create cluster
      - uses: stackrox/actions/infra/create-cluster@main
        with:
          token: ${{ secrets.INFRA_TOKEN }}
          flavor: demo
          name: k6-test
          lifespan: 24h
          wait: "true"

      # Fetch artifacts
      - uses: stackrox/actions/infra/install-infractl@v1
      - uses: "google-github-actions/auth@v1"
        with:
          # TODO: Add new service account
          credentials_json: "${{ secrets.GCP_RELEASE_AUTOMATION_SA }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          install_components: "gke-gcloud-auth-plugin"
      - name: Download artifacts
        run: |
          infractl artifacts "${NAME//./-}" --download-dir artifacts >> "$GITHUB_STEP_SUMMARY"

          # Debug if we can access cluster and if central is running.
          kubectl get pods --namespace stackrox

          # Required for k6 tests to run.
          echo "HOST=$(cat artifacts/url)" >> "$GITHUB_ENV"
          echo "ROX_ADMIN_PASSWORD=$(cat artifacts/admin-password)" >> "$GITHUB_ENV"

      # -- checkpoint - cluster is running and ACS is running, we have artifacts downloaded
      - name: Run local k6 test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/tests/testK6Integration.js
          flags: --out json=results.json

      - name: Output results
        run: |
          cat results.json

      #######################################
      # Scale cluster with generic workload #
      #######################################

      # Create scale cluster with larger nodes.
      - uses: stackrox/actions/infra/create-cluster@main
        with:
          token: ${{ secrets.INFRA_TOKEN }}
          flavor: gke-default
          name: ${{ env.SCALE_CLUSTER_NAME }}
          lifespan: 12h
          args: nodes=3,machine-type=e2-standard-32
          wait: true

      # Fetch artifacts
      - uses: stackrox/actions/infra/install-infractl@v1
      - name: Test cluster readiness
        run: |
          STATUS=$(infractl get "${NAME//./-}" --json | jq -r .Status)
          if [ "$STATUS" != "READY" ]; then
            exit 1
          fi
      - uses: "google-github-actions/auth@v1"
        with:
          # TODO: Add new service account
          credentials_json: "${{ secrets.GCP_RELEASE_AUTOMATION_SA }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          install_components: "gke-gcloud-auth-plugin"
      - name: Download artifacts
        run: |
          infractl artifacts "${NAME//./-}" --download-dir artifacts >> "$GITHUB_STEP_SUMMARY"

      # Install Central + CentralDB
      # - uses: stackrox/actions/release/wait-for-image@main
      #   with:
      #     token: ${{ secrets.QUAY_BEARER_TOKEN }}
      #     image: rhacs-eng/main:4.2.0

      - name: Checkout workflow scripts
        uses: actions/checkout@v4
        with:
          repository: "stackrox/workflow"
          path: workflow

      - name: Docker login
        env:
          QUAY_RHACS_ENG_RO_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
          QUAY_RHACS_ENG_RO_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
        run: |
          docker login -u "${QUAY_RHACS_ENG_RO_USERNAME}" --password-stdin quay.io <<<"${QUAY_RHACS_ENG_RO_PASSWORD}"

      - name: Fetch infra artifacts
        run: |
          infractl artifacts "${SCALE_CLUSTER_NAME//./-}" --download-dir artifacts >> "$GITHUB_STEP_SUMMARY"

      # TODO: wait for PR image to be created
      # action: stackrox/actions/release/wait-for-image@main

      - name: Launch central services
        env:
          # TODO: use PR tag!
          MAIN_IMAGE_TAG: "4.2.0"
          ROX_POSTGRES_DATASTORE: "true"
          MONITORING_SUPPORT: "false"
          REGISTRY_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
        run: |
          source "${{ github.workspace }}"/workflow/env.sh
          "${{ github.workspace }}"/scale/dev/launch_central.sh

          # Required for k6 tests to run.
          echo "ROX_ADMIN_PASSWORD=$(cat ${{ github.workspace }}/deploy/k8s/central-deploy/password)" >> "$GITHUB_ENV"
          echo "ROX_PASSWORD=$(cat ${{ github.workspace }}/deploy/k8s/central-deploy/password)" >> "$GITHUB_ENV"

      # TODO: Find better way to wait for finished workload generation.
      - name: Generate workload
        env:
          MAIN_IMAGE_TAG: "4.2.0"
          ROX_POSTGRES_DATASTORE: "true"
          MONITORING_SUPPORT: "false"
          API_ENDPOINT: 'localhost:8000'
          REGISTRY_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
        run: |
          source "${{ github.workspace }}"/workflow/env.sh
          "${{ github.workspace }}"/scale/dev/run-many.sh default 1
          sleep 120

      - name: Setup Kubernetes port-forward
        uses: vbem/k8s-port-forward@v1
        with:
          workload: 'svc/central'
          mappings: '8000:443'
          options: '--namespace=stackrox'
          sleep: 20

      - name: Run local k6 test
        uses: grafana/k6-action@v0.3.0
        env:
          HOST: "https://localhost:8000"
        with:
          filename: tests/performance/tests/testK6Integration.js
          flags: --out json=results.json --iterations 10 --duration 20m

      - name: Output full results
        run: |
          cat results.json

      # TODO: with generic clusters add step to cleanup cluster after run!!!
