name: Scanner functional tests

on:
  workflow_dispatch:
  pull_request:
    types:
    - opened
    - reopened
    - synchronize

jobs:
  scanner-ft-images:
    name: Wait for images
    if: >
      github.event_name != 'pull_request'
      || contains(github.event.pull_request.labels.*.name, 'scanner-functional-tests')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - scanner-v4
          - scanner-v4-db
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - name: Get tag
        run: |
          echo "tag=$(make tag)" >> "$GITHUB_ENV"
      - name: Wait for image ${{ matrix.image }}
        uses: stackrox/actions/release/wait-for-image@v1
        with:
          token: ${{ secrets.QUAY_RHACS_ENG_BEARER_TOKEN }}
          image: rhacs-eng/${{ matrix.image }}:${{ env.tag }}

  scanner-ft-run:
    name: Deploy and run
    needs:
      - scanner-ft-images
    runs-on: ubuntu-latest
    env:
      SCANNER_E2E_QUAY_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
      SCANNER_E2E_QUAY_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
      # TODO Add registry.redhat.io secrets.
      SCANNER_E2E_REDHAT_USERNAME: ${{ secrets.REDHAT_USERNAME }}
      SCANNER_E2E_REDHAT_PASSWORD: ${{ secrets.REDHAT_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"

      - uses: ./.github/actions/job-preamble
        with:
          gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}

      - name: Create cluster (minikube)
        uses: medyagh/setup-minikube@latest
        with:
          driver: docker
          cpus: max
          memory: max
          mount-path: ${{ runner.temp }}:/runner
          container-runtime: cri-o

      - name: Deploy scanner
        run: |
          mkdir -m 777 "${{ runner.temp }}"/pgdata
          # TODO(ROX-28174) Rename the targets and charts to "scanner functional
          # tests".
          make -C scanner e2e-deploy db-host-path="/runner/pgdata"

      - name: Wait for deployments
        run: |
          info() { echo >&2 ">>> INFO (Wait for deployments): $*"; }
          timeout=1m
          while : ; do
              info "Waiting for deployments to become ready (in $timeout)..."
              kubectl -n stackrox wait pod --for=condition=Ready --all --timeout="$timeout" && break
              info "Deployments are not ready yet"
              info "Describing all pods:"
              kubectl -n stackrox describe pods
              for app in scanner-v4-db scanner-v4; do
                  info "Showing deployment logs ($app):"
                  kubectl -n stackrox logs -l app="$app" --all-containers=true
              done
              info "Abort if any pod has failed or containers have restarted:"
              kubectl \
                  -n stackrox get pods \
                  -o jsonpath='{range .items[*]}{.metadata.name} status={.status.phase}{range .status.containerStatuses[*]} restart={.restartCount}/{.name}{end}{"\n"}{end}' \
              | grep -E '(status=Failed|restart=[1-9])' && exit 1
          done

      - name: Run tests
        run: |
          kubectl -n stackrox expose deployment scanner-v4
          kubectl -n stackrox get svc
          while true; do
              kubectl -n stackrox port-forward \
                  "$(kubectl -n stackrox get pods \
                             -l app=scanner-v4 \
                             -o jsonpath="{.items[*].metadata.name}")" \
                  8443:8443 || continue
          done &
          trap 'kill $!' EXIT
          # TODO(ROX-28174) Rename the targets and charts to "scanner functional
          # tests".
          make -C scanner e2e-run NODEPS=1

      - name: Describe and show logs
        if: failure() || success()
        run: |
          info() { echo >&2 ">>> INFO (Describe and show logs): $*"; }
          info "Describing all pods:"
          kubectl -n stackrox describe pods
          for app in scanner-v4-db scanner-v4; do
              info "Showing deployment logs ($app):"
              kubectl -n stackrox logs -l app="$app" --all-containers=true
          done
