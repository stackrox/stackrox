name: Start Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: Release version (A.B.C[-N])
        required: true
        default: 0.0.0
        type: string
      ref:
        description: Release base ref (for non-patch releases)
        required: false
        default: ""
        type: string
      dry-run:
        description: Dry-run
        required: false
        default: false
        type: boolean

env:
  REF: ${{ fromJSON(format('["{0}","{1}"]', inputs.ref, github.event.repository.default_branch))[inputs.ref == ''] }}
  main_branch: ${{github.event.repository.default_branch}}
  script_url: /repos/${{ github.repository }}/contents/.github/workflows/scripts/common.sh?ref=${{ github.ref_name }}
  DRY_RUN: ${{ fromJSON('["true", "false"]')[github.event.inputs.dry-run != 'true'] }}
  ACCEPT_RAW: "Accept: application/vnd.github.v3.raw"
  GH_TOKEN: ${{ github.token }}
  GH_NO_UPDATE_NOTIFIER: 1

run-name: >-
  ${{
    format('Start release {0} from {1}{2}',
      inputs.version,
      fromJSON(format('["{0}","{1}"]', inputs.ref, github.event.repository.default_branch))[inputs.ref == ''],
      fromJSON('[" (dry-run)", ""]')[inputs.dry-run != true]
    )
  }}

# Ensure that only a single release automation workflow can run at a time.
concurrency: Release automation

jobs:
  properties:
    name: Read repository properties
    runs-on: ubuntu-latest
    outputs:
      docs-repository: ${{ steps.properties.outputs.docs-repository }}
      slack-channel: ${{ fromJSON(format('["{0}","{1}"]', steps.properties.outputs.dry-slack-channel, steps.properties.outputs.slack-channel))[github.event.inputs.dry-run != 'true'] }}
      jira-project: ${{ steps.properties.outputs.jira-project }}
    steps:
      - name: Read workflow properties file
        id: properties
        env:
          PROPERTIES_URL: /repos/${{ github.repository }}/contents/.github/properties?ref=${{ github.ref_name }}
        run: gh api -H "$ACCEPT_RAW" "$PROPERTIES_URL" >> "$GITHUB_OUTPUT"

  run-parameters:
    name: Run parameters
    runs-on: ubuntu-latest
    steps:
      - run: |
          [ "$DRY_RUN" = "true" ] && echo "::warning::This is a dry run"
          echo "Event: ${{github.event_name}}" >>"$GITHUB_STEP_SUMMARY"
          cat <<EOF >>"$GITHUB_STEP_SUMMARY"
          \`\`\`
          ${{toJSON(inputs)}}
          \`\`\`
          EOF

  variables:
    name: Setup variables
    uses: ./.github/workflows/variables.yml
    with:
      version: ${{github.event.inputs.version}}

  check-jira:
    name: Check Jira release
    needs: [variables, properties]
    runs-on: ubuntu-latest
    outputs:
      release-date: ${{steps.check-jira-release.outputs.date}}
    steps:
      - name: Check that Jira release ${{needs.variables.outputs.release}}.${{needs.variables.outputs.patch}} is not released
        id: check-jira-release
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            check-jira-release \
            "${{needs.variables.outputs.release}}.${{needs.variables.outputs.patch}}" \
            "${{needs.properties.outputs.jira-project}}"

  check-docs-branch:
    name: Check documentation branch
    needs: [variables, properties]
    runs-on: ubuntu-latest
    steps:
      - name: Test if branch ${{needs.variables.outputs.docs-branch}} exists
        id: check
        env:
          # required to access internal test-gh-docs repository
          GH_TOKEN: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
        run: |
          gh api "repos/${{needs.properties.outputs.docs-repository}}/git/refs/heads/${{needs.variables.outputs.docs-branch}}"
      - name: Post to Slack
        if: failure() && steps.check.conclusion == 'failure'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":${{ fromJSON('["desert", "red_circle"]')[inputs.dry-run != 'true'] }}:
            *Cannot proceed with upstream release ${{needs.variables.outputs.release-patch}} on <${{github.server_url}}/${{github.repository}}|${{github.repository}}>.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            "There has been no documentation branch created in
            `${{needs.properties.outputs.docs-repository}}` repository." }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":arrow_right: *Create branch
            `${{needs.variables.outputs.docs-branch}}` from the `rhacs-docs`
            branch in `${{needs.properties.outputs.docs-repository}}` repository and then restart the workflow.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ">
            Repository: <${{github.server_url}}/${{github.repository}}|${{github.repository}}>\n>
            Release: ${{needs.variables.outputs.release-patch}}\n>
            Workflow: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>" }}
            ]}

  branch:
    name: Prepare release branch
    needs: [variables, check-docs-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code (normal release)
        if: needs.variables.outputs.patch == 0
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF }}
          # required to access internal test-gh-docs repository
          token: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
          submodules: true
      - name: Check out code (patch release)
        if: needs.variables.outputs.patch != 0
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.variables.outputs.branch }}
          # required to access internal test-gh-docs repository
          token: ${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}
          submodules: true
      - name: Check remote branch exists
        id: check-existing
        run: |
          if git ls-remote --quiet --exit-code origin "${{needs.variables.outputs.branch}}"; then
            echo "branch-exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "branch-exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Fail if there is no branch for patch release
        if: steps.check-existing.outputs.branch-exists == 'false' && needs.variables.outputs.patch != 0
        run: exit 1
      - name: Initialize mandatory git config
        run: |
          git config user.name "${{github.event.sender.login}}"
          git config user.email noreply@github.com
      - name: Switch to ${{needs.variables.outputs.branch}} branch
        if: steps.check-existing.outputs.branch-exists == 'false'
        run: |
          git switch --create "${{needs.variables.outputs.branch}}"
          # Tagging the branching point so that the commits on the main branch
          # be correctly described.
          git tag --annotate --message "Upstream automation" \
            "${{needs.variables.outputs.release}}.x" HEAD

          # TODO: tag the first commit on the release branch with the current
          #       release version when main branch versioning is changed to
          #       'next.version-dev'.
      - name: Update docs submodule
        run: |
          git -C docs/content config remote.origin.fetch "+refs/heads/${{needs.variables.outputs.docs-branch}}:refs/remotes/origin/${{needs.variables.outputs.docs-branch}}"
          git submodule set-branch --branch "${{needs.variables.outputs.docs-branch}}" -- docs/content
          git submodule update --init --remote -- docs/content
          git add .gitmodules docs/content
          if ! git diff-index --quiet HEAD; then
            git commit -am "Docs update for release ${{needs.variables.outputs.milestone}}"
            echo "Documents submodule has been updated on the release branch." >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Update the changelog
        if: steps.check-existing.outputs.branch-exists == 'false'
        run: |
          sed -i "s/## \[NEXT RELEASE\]/## [${{inputs.version}}]/" CHANGELOG.md
          git add CHANGELOG.md
          if ! git diff-index --quiet HEAD; then
            git commit --message "Changelog for ${{inputs.version}}"
            echo "\`CHANGELOG.md\` has been updated on the release branch." >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Push changes
        if: env.DRY_RUN == 'false' && steps.check-existing.outputs.branch-exists == 'false'
        run: |
          git push --follow-tags --set-upstream origin "${{needs.variables.outputs.branch}}"
      - name: Push changes
        if: env.DRY_RUN == 'false' && steps.check-existing.outputs.branch-exists == 'true'
        run: |
          git push --follow-tags

  ci:
    name: Configure OpenShift CI jobs
    needs: [variables, branch]
    if: needs.variables.outputs.patch == 0
    runs-on: ubuntu-latest
    env:
      RELEASE: "${{needs.variables.outputs.release}}"
      BRANCH: "stackrox-release-${{needs.variables.outputs.release}}"
    steps:
      - name: Check out stackrox/openshift-release
        uses: actions/checkout@v3
        with:
          repository: stackrox/openshift-release
          token: "${{ secrets.ROBOT_ROX_GITHUB_TOKEN }}"
      - name: Check remote branch exists
        id: check-existing
        run: |
          if git ls-remote --quiet --exit-code origin "$BRANCH"; then
            echo "branch-exists=true" >> "$GITHUB_OUTPUT"
            echo "::notice::OpenShift CI configuration branch exists. Assuming CI is ready."
          else
            echo "branch-exists=false" >> "$GITHUB_OUTPUT"
            git switch --create "$BRANCH"
          fi
      - name: Initialize mandatory git config
        if: steps.check-existing.outputs.branch-exists == 'false'
        run: |
          git config user.name "${{github.event.sender.login}}"
          git config user.email noreply@github.com
      - name: Make configuration
        if: steps.check-existing.outputs.branch-exists == 'false'
        env:
          CFG_DIR: "ci-operator/config/stackrox/stackrox"
        run: |
          # Duplicate the main config and keep only postsubmit jobs.
          yq "del(.tests[] | select(.postsubmit != true or has(\"cron\"))) |
              .promotion.tag=\"$RELEASE\" |
              .zz_generated_metadata.branch=\"release-$RELEASE\"" \
            "$CFG_DIR/stackrox-stackrox-master.yaml" \
            > "$CFG_DIR/stackrox-$BRANCH.yaml"

          # Duplicate the opensource images config and keep only postsubmit jobs.
          yq "del(.tests[] | select(.postsubmit != true or has(\"cron\"))) |
              .promotion.tag=\"$RELEASE-stackrox-branding\" |
              .zz_generated_metadata.branch=\"release-$RELEASE\"" \
            "$CFG_DIR/stackrox-stackrox-master__stackrox_branding.yaml" \
            > "$CFG_DIR/stackrox-${BRANCH}__stackrox_branding.yaml"
      - name: Make update
        if: steps.check-existing.outputs.branch-exists == 'false'
        run: |
          make update

          git add ci-operator
          git commit -m "Release $RELEASE files" >> "$GITHUB_STEP_SUMMARY"
      - name: Push and create PR
        if: env.DRY_RUN == 'false' && steps.check-existing.outputs.branch-exists == 'false'
        run: |
          git push --set-upstream origin "$BRANCH"

          PR_URL=$(gh pr create --repo openshift/release \
            --title "Stackrox release $RELEASE" \
            --base "master" \
            --body "CI configuration files to support Stackrox release \`$RELEASE\`." \
            --assignee "$GITHUB_ACTOR")

          echo ":arrow_right: Review and merge the [PR]($PR_URL) that has been created for the \`openshift/release\` repository." >> "$GITHUB_STEP_SUMMARY"

  patch-changelog:
    name: Patch CHANGELOG.md
    needs: [variables, branch]
    if: needs.variables.outputs.patch == 0
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Working on `inputs.ref` instead of `env.main_branch` may help
          # to spot changes happened to CHANGELOG.md after `inputs.ref`.
          ref: ${{ env.REF }}
      - name: Initialize mandatory git config
        run: |
          git config user.name "${{github.event.sender.login}}"
          git config user.email noreply@github.com
      - name: Patch CHANGELOG.md on ${{ env.REF }}
        run: |
          set -uo pipefail
          gh api -H "$ACCEPT_RAW" "${{env.script_url}}" | bash -s -- \
            patch-changelog \
            "${{needs.variables.outputs.release}}.${{needs.variables.outputs.patch}}" \
            "$REF" \
            "${{needs.variables.outputs.branch}}"

  milestone:
    name: Create milestone
    needs: [variables]
    runs-on: ubuntu-latest
    steps:
      - name: Create ${{needs.variables.outputs.milestone}} milestone
        if: env.DRY_RUN == 'false'
        run: |
          set -u
          if ! http_code=$(gh api --silent -X POST \
            "repos/${{github.repository}}/milestones" \
            -f title="${{needs.variables.outputs.milestone}}" \
            2>&1); then

            if grep "HTTP 422" <<< "$http_code"; then
              echo ":arrow_right: Milestone ${{needs.variables.outputs.milestone}} already exists." \
                "**Close it once it's finished.**" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "::error::Couldn't create milestone ${{needs.variables.outputs.milestone}}: $http_code"
              exit 1
            fi
          else
            echo ":arrow_right: Milestone ${{needs.variables.outputs.milestone}} has been created." \
              "**Close it once it's finished.**" >> "$GITHUB_STEP_SUMMARY"
          fi

  notify:
    name: Notify everybody
    needs: [variables, properties, branch, milestone]
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Post to Slack (normal release)
        if: needs.variables.outputs.patch == 0
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":${{ fromJSON('["desert", "white_check_mark"]')[github.event.inputs.dry-run != 'true'] }}:
            *Upstream release ${{needs.variables.outputs.release-patch}}
            has been triggered on <${{github.server_url}}/${{github.repository}}|${{github.repository}}> by ${{ github.event.sender.login }}.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            "Branch `${{needs.variables.outputs.branch}}`
            and milestone `${{needs.variables.outputs.milestone}}`
            have been created.\n\nPRs merged to the ${{env.main_branch}} branch
            and assigned to RC milestones will be cherry-picked when closing the respective milestones.
            For the urgent fixes that must go exclusively to this release
            open PRs to the `${{needs.variables.outputs.branch}}` branch." }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ">
            Repository: <${{github.server_url}}/${{github.repository}}|${{github.repository}}>\n>
            Release: ${{needs.variables.outputs.release-patch}}\n>
            Workflow: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>" }}
            ]}
      - name: Post to Slack (patch release)
        if: needs.variables.outputs.patch != 0
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ needs.properties.outputs.slack-channel }}
          payload: >-
            { "blocks": [

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ":${{ fromJSON('["desert", "white_check_mark"]')[github.event.inputs.dry-run != 'true'] }}:
            *Upstream patch release ${{needs.variables.outputs.release-patch}}
            has been triggered on <${{github.server_url}}/${{github.repository}}|${{github.repository}}> by ${{ github.event.sender.login }}.*" }},

            { "type": "section", "text": { "type": "mrkdwn", "text":
            "Milestone `${{needs.variables.outputs.milestone}}`
            has been created.\n\nPRs merged to the ${{env.main_branch}} branch
            and assigned to RC milestones will be cherry-picked when closing the respective milestones.
            For the urgent fixes that must go exclusively to this release
            open PRs to the `${{needs.variables.outputs.branch}}` branch." }},

            { "type": "divider" },

            { "type": "section", "text": { "type": "mrkdwn", "text":
            ">
            Repository: <${{github.server_url}}/${{github.repository}}|${{github.repository}}>\n>
            Release: ${{needs.variables.outputs.release-patch}}\n>
            Workflow: <${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.workflow}}>" }}
            ]}
