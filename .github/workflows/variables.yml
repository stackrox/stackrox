name: Parse Version
on:
  workflow_call:
    inputs:
      version:
        description: Version (A.B.C[-N][-rc.D])
        type: string
        required: true

    outputs:
      release:
        description: Release number (A.B)
        value: ${{jobs.parse.outputs.release}}
      patch:
        description: Patch number (C)
        value: ${{jobs.parse.outputs.patch}}
      rc:
        description: RC number (D)
        value: ${{jobs.parse.outputs.rc}}
      name:
        description: Release name (N)
        value: ${{jobs.parse.outputs.name}}
      release-patch:
        description: Release.patch numbers (A.B.C[-N])
        value: ${{format('{0}.{1}{2}', jobs.parse.outputs.release, jobs.parse.outputs.patch, jobs.parse.outputs.dash-name)}}
      branch:
        description: Release branch name (release/A.B.x[-N])
        value: ${{format('release/{0}.x{1}', jobs.parse.outputs.release, jobs.parse.outputs.dash-name)}}
      docs-branch:
        description: Documentation branch name
        value: ${{format('rhacs-docs-{0}.{1}', jobs.parse.outputs.release, jobs.parse.outputs.patch)}}
      milestone:
        description: Milestone (A.B.C[-N]-rc.D)
        value: ${{format('{0}.{1}{2}-rc.{3}', jobs.parse.outputs.release, jobs.parse.outputs.patch, jobs.parse.outputs.dash-name, jobs.parse.outputs.rc)}}
      next-milestone:
        description: Next milestone (A.B.C[-N]-rc.`D+1`)
        value: ${{format('{0}.{1}{2}-rc.{3}', jobs.parse.outputs.release, jobs.parse.outputs.patch, jobs.parse.outputs.dash-name, jobs.parse.outputs.next-rc)}}

jobs:
  parse:
    name: Parse ${{inputs.version}}
    runs-on: ubuntu-latest
    outputs:
      release: ${{steps.parse.outputs.release}}
      patch: ${{steps.parse.outputs.patch}}
      rc: ${{steps.parse.outputs.rc}}
      name: ${{steps.parse.outputs.name}}
      next-rc: ${{steps.parse.outputs.next-rc}}
      dash-name: ${{steps.parse.outputs.dash-name}}
    steps:
      - id: parse
        env:
          REGEX: 's/^([0-9]+\.[0-9]+)\.([0-9]+)(-([[:alnum:]]+(-[[:alnum:]]+)*))?(-rc\.([0-9]+))?$/\1 \2 \4 \7/p'
        run: |
          set -u
          # Allowed versions examples:
          # 1.2.3
          # 1.2.3-rc.4
          # 1.2.3-alnum
          # 1.2.3-alnum-alnum
          # 1.2.3-alnum-rc.4
          read -r RELEASE PATCH_NUMBER RELEASE_NAME RC_NUMBER <<<"$(sed -rn "$REGEX" <<<"${{inputs.version}}")"
          if [ -z "$RELEASE" ] || [ -z "$PATCH_NUMBER" ]; then
            echo "::error::Cannot parse ${{inputs.version}}: should be in a form of \`X.X.X[-name][-rc.X]\`, where \`X\` is a decimal number."
            exit 1
          fi
          if [ -z "$RC_NUMBER" ]; then RC_NUMBER=1; fi
          NEXT_RC_NUMBER=$((RC_NUMBER+1))
          echo "::set-output name=release::$RELEASE"
          echo "::set-output name=patch::$PATCH_NUMBER"
          echo "::set-output name=rc::$RC_NUMBER"
          echo "::set-output name=name::$RELEASE_NAME"
          echo "::set-output name=next-rc::$NEXT_RC_NUMBER"

          if [ -n "$RELEASE_NAME" ]; then
            echo "::set-output name=dash-name::-$RELEASE_NAME"
          fi
