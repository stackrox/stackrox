name: Scanner build and push images

on:
  workflow_call:
  push:
    tags:
    - '*-nightly-*'
    branches:
    - master
  pull_request:
    types:
    - opened
    - reopened
    - synchronize

defaults:
  run:
    # This enables `-o pipefail` for all jobs as compared to when shell isn't set.
    # See https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#defaultsrunshell
    shell: bash

jobs:
  define-scanner-job-matrix:
    outputs:
      matrix: ${{ steps.define-scanner-job-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Define the matrix for build jobs
      id: define-scanner-job-matrix
      run: |
        source './scripts/ci/lib.sh'

        # If goarch is updated, be sure to update architectures in "push-scanner-manifests" below.
        matrix='{
          "pre_build_scanner_go_binary": { "name":["default"], "goos":["linux"], "goarch":["amd64", "arm64"] },
          "build_and_push_scanner": { },
          "push_scanner_manifests": { "name":["default"], "registry":["quay.io/stackrox-io", "quay.io/rhacs-eng"] },
          "scan_images_with_roxctl": { "image":["scanner-v4", "scanner-v4-db"], "registry":["quay.io/stackrox-io", "quay.io/rhacs-eng"] }
        }'

        if ! is_in_PR_context || pr_has_label ci-build-all-arch; then
          matrix="$(jq '.pre_build_scanner_go_binary.goarch += ["ppc64le", "s390x"]' <<< "$matrix")"
        fi;

        # Conditionally add a prerelease build (binaries built with GOTAGS=release)
        if ! is_tagged; then
          if ! is_in_PR_context || pr_has_label ci-build-prerelease; then
            matrix="$(jq '.pre_build_scanner_go_binary.name += ["prerelease"]' <<< "$matrix")"
            matrix="$(jq '.push_scanner_manifests.name += ["prerelease"]' <<< "$matrix")"
          fi
        fi

        # Conditionally add a -race debug build (binaries built with -race)
        if ! is_in_PR_context || pr_has_label ci-build-race-condition-debug; then
          matrix="$(jq '.pre_build_scanner_go_binary.name += ["race-condition-debug"]' <<< "$matrix")"
          matrix="$(jq '.push_scanner_manifests.name += ["race-condition-debug"]' <<< "$matrix")"
        fi

        matrix="$(jq '.build_and_push_scanner = .pre_build_scanner_go_binary' <<< "$matrix")"
        matrix="$(jq '.build_and_push_scanner.registry = .push_scanner_manifests.registry' <<< "$matrix")"

        echo "Job matrix after conditionals:"
        jq <<< "$matrix"

        condensed="$(jq -c <<< "$matrix")"
        echo "matrix=$condensed" >> "$GITHUB_OUTPUT"

  pre-build-scanner-go-binary:
    needs: define-scanner-job-matrix
    runs-on: ubuntu-latest
    strategy:
      # Supports three go binary builds:
      # default              - built with environment defaults (see handle-tagged-build & env.mk)
      # prerelease           - built with GOTAGS=release
      # race-condition-debug - built with -race
      matrix: ${{ fromJson(needs.define-scanner-job-matrix.outputs.matrix).pre_build_scanner_go_binary }}
    container:
      image: quay.io/stackrox-io/apollo-ci:scanner-test-0.4.5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: ./.github/actions/job-preamble
      with:
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}

    - name: Cache Go dependencies
      uses: ./.github/actions/cache-go-dependencies

    - uses: ./.github/actions/handle-tagged-build

    - name: Setup Go build environment for release
      if: |
        contains(github.event.pull_request.labels.*.name, 'ci-release-build')
          ||
        matrix.name == 'prerelease'
      run: echo "GOTAGS=release" >> "$GITHUB_ENV"

    - name: Setup Go build environment for -race
      if: |
        matrix.arch == 'amd64'
          &&
        (
          contains(github.event.pull_request.labels.*.name, 'ci-race-tests')
            ||
          matrix.name == 'race-condition-debug'
        )
      run: echo "RACE=true" >> "$GITHUB_ENV"

    - name: Build Go binary
      run: |
        if [[ "${{ matrix.goarch }}" != "amd64" ]]; then
          echo "Building non-amd binary (CGO_ENABLED=0)"
          make -C scanner CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} image/scanner/bin/scanner
        else
          echo "Building amd binary (CGO_ENABLED=1)"
          make -C scanner CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} image/scanner/bin/scanner
        fi

    - name: Archive Go binary to preserve permissions
      run: tar -cvzf go-binary.tgz scanner/image/scanner/bin/scanner

    - uses: ./.github/actions/upload-artifact-with-retry
      with:
        name: go-binary-${{ matrix.name }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: go-binary.tgz

  scan-scanner-go-binary:
    needs: pre-build-scanner-go-binary
    runs-on: ubuntu-latest
    container:
      image: quay.io/stackrox-io/apollo-ci:scanner-test-0.4.5
    if: contains(github.event.pull_request.labels.*.name, 'scan-go-binaries')
    env:
      ARTIFACT_DIR: junit-reports/
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: ./.github/actions/job-preamble
      with:
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}

    - uses: ./.github/actions/download-artifact-with-retry
      with:
        name: go-binary-default-linux-amd64

    - name: Unpack Go binary
      run: |
        tar xvzf go-binary.tgz

    - name: Scan
      run: |
        ./scripts/ci/govulncheck.sh scanner/image/scanner/bin/scanner

    - name: Publish Test Report
      uses: test-summary/action@v2
      if: always()
      with:
        paths: 'junit-reports/**/*.xml'

    - name: Report junit failures in jira
      uses: ./.github/actions/junit2jira
      if: always()
      with:
        jira-token: ${{ secrets.JIRA_TOKEN }}
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}
        directory: 'junit-reports'

  build-and-push-scanner:
    needs:
    - define-scanner-job-matrix
    - pre-build-scanner-go-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Supports three go binary and image builds:
      # default              - built with environment defaults (see handle-tagged-build & env.mk)
      # prerelease           - built with GOTAGS=release
      # race-condition-debug - built with -race
      matrix: ${{ fromJson(needs.define-scanner-job-matrix.outputs.matrix).build_and_push_scanner }}
    container:
      image: quay.io/stackrox-io/apollo-ci:scanner-test-0.4.5
      env:
        QUAY_RHACS_ENG_RW_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
        QUAY_RHACS_ENG_RW_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}
        QUAY_STACKROX_IO_RW_USERNAME: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
        QUAY_STACKROX_IO_RW_PASSWORD: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: ./.github/actions/job-preamble
      with:
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}


    - name: Login to docker.io to mitigate rate limiting on downloading images
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_CI_ACCOUNT_USERNAME }}
        password: ${{ secrets.DOCKERHUB_CI_ACCOUNT_PASSWORD }}

    - name: Set up QEMU
      if: matrix.goarch != 'amd64'
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - uses: ./.github/actions/handle-tagged-build

    - uses: ./.github/actions/download-artifact-with-retry
      with:
        name: go-binary-${{ matrix.name }}-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Unpack Go binary
      run: tar xvzf go-binary.tgz

    - name: Set build tag for prerelease images
      if: matrix.name == 'prerelease'
      run: echo "BUILD_TAG=$(make -C scanner --quiet --no-print-directory tag)-prerelease" >> "$GITHUB_ENV"

    - name: Set build tag for race condition images
      if: matrix.name == 'race-condition-debug'
      run: echo "BUILD_TAG=$(make -C scanner --quiet --no-print-directory tag)-rcd" >> "$GITHUB_ENV"

    - name: Build Scanner and ScannerDB images
      run: scripts/lib.sh retry 6 true make -C scanner GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} images

    - name: Push Scanner and ScannerDB images
      # Skip for external contributions.
      if: |
        github.event_name == 'push' || !github.event.pull_request.head.repo.fork
      run: |
        source ./scripts/ci/lib.sh
        push_scanner_image_set "${{ matrix.registry }}" "${{ matrix.goarch }}"

  push-scanner-manifests:
    needs:
    - define-scanner-job-matrix
    - build-and-push-scanner
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Supports three image builds:
      # default
      # prerelease
      # race-condition-debug
      matrix: ${{ fromJson(needs.define-scanner-job-matrix.outputs.matrix).push_scanner_manifests }}
    container:
      image: quay.io/stackrox-io/apollo-ci:scanner-test-0.4.5
      env:
        QUAY_RHACS_ENG_RW_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
        QUAY_RHACS_ENG_RW_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}
        QUAY_STACKROX_IO_RW_USERNAME: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
        QUAY_STACKROX_IO_RW_PASSWORD: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Ignore dubious repository ownership
      run: |
        # Prevent fatal error "detected dubious ownership in repository" from recent git.
        git config --global --add safe.directory "$(pwd)"

    - uses: ./.github/actions/handle-tagged-build

    - name: Set build tag for prerelease images
      if: matrix.name == 'prerelease'
      run: echo "BUILD_TAG=$(make -C scanner --quiet --no-print-directory tag)-prerelease" >> "$GITHUB_ENV"

    - name: Set build tag for race condition images
      if: matrix.name == 'race-condition-debug'
      run: echo "BUILD_TAG=$(make -C scanner --quiet --no-print-directory tag)-rcd" >> "$GITHUB_ENV"

    - name: Push Scanner and ScannerDB image manifests
      # Skip for external contributions.
      if: |
        github.event_name == 'push' || !github.event.pull_request.head.repo.fork
      run: |
        source ./scripts/ci/lib.sh

        # If this is updated, be sure to update goarch in define-scanner-job-matrix above.
        architectures="amd64,arm64"
        if ! is_in_PR_context || pr_has_label ci-build-all-arch; then
          architectures="amd64,arm64,ppc64le,s390x"
        fi
        if [[ "${{ matrix.name }}" == "race-condition-debug" ]]; then
          architectures="amd64"
        fi

        push_scanner_image_manifest_lists "${{ matrix.registry }}" "$architectures"

  scan-images-with-roxctl:
    if: github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'scan-images-with-roxctl')
    needs:
    - define-scanner-job-matrix
    - build-and-push-scanner
    - push-scanner-manifests
    name: Check images for vulnerabilities
    runs-on: ubuntu-latest
    permissions:
      # Needed for stackrox/central-login to create the JWT token.
      id-token: write
      security-events: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.define-scanner-job-matrix.outputs.matrix).scan_images_with_roxctl }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: ./.github/actions/job-preamble
      with:
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}

    - uses: ./.github/actions/handle-tagged-build

    - name: Central login
      uses: stackrox/central-login@v1
      with:
        endpoint: ${{ vars.ACS_DOGFOODING_CENTRAL_URL }}

    - name: Install roxctl
      uses: stackrox/roxctl-installer-action@v1
      with:
        central-endpoint: ${{ vars.ACS_DOGFOODING_CENTRAL_URL }}
        central-token: ${{ env.ROX_API_TOKEN }}

    - name: Scan images for vulnerabilities
      run: |
        release_tag="$(make --quiet --no-print-directory tag)"
        roxctl image scan --retries=10 --retry-delay=15 --force --severity=IMPORTANT,CRITICAL --output=sarif \
          --image="${{ matrix.registry }}/${{ matrix.image }}:${release_tag}" \
          | tee results.sarif

    # TODO: re-enable roxctl scan results upload once quota issue has been resolved
    # - name: Upload roxctl scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     category: ${{ matrix.image }}
    #     sarif_file: results.sarif
