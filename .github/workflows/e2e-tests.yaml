name: E2E tests
on:
  pull_request:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit SHA of tests'
        required: true
        type: string
      tested_commit:
        description: 'Commit SHA to test'
        required: true
        type: string
  workflow_call:
env:
  ROX_PRODUCT_BRANDING: stackrox

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    env:
      INFRA_TOKEN: ${{ secrets.INFRA_TOKEN }}
      POD_SECURITY_POLICIES: "false"
      ROX_VULN_MGMT_UNIFIED_CVE_DEFERRAL: "true"
      ROX_PROCESSES_LISTENING_ON_PORT: "false"
      REGISTRY_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
      GOOGLE_CREDENTIALS_GCR_SCANNER_V2: ${{ secrets.GOOGLE_CREDENTIALS_GCR_SCANNER_V2 }}
      GCP_SERVICE_ACCOUNT_STACKROX_CI: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}
      QUAY_RHACS_ENG_RO_PASSWORD: ${{ secrets.QUAY_RHACS_ENG_RO_PASSWORD }}
      QUAY_RHACS_ENG_RO_USERNAME: ${{ secrets.QUAY_RHACS_ENG_RO_USERNAME }}
      QUAY_RHACS_ENG_BEARER_TOKEN: ${{ secrets.QUAY_RHACS_ENG_BEARER_TOKEN }}
      MAIN_IMAGE_TAG: ${{ inputs.tested_commit || github.event.pull_request.base.sha }}
      TAG: ${{ inputs.tested_commit || github.event.pull_request.base.sha }}
      GATHER_QA_TEST_DEBUG_LOGS: "false"
      QA_TEST_DEBUG_LOGS: ""
      SHARED_DIR: "/tmp"
      CLUSTER: 'OPENSHIFT'
      SENSOR_HELM_DEPLOY: "false"
      ROX_SCANNER_V4: "false"
      ORCHESTRATOR_FLAVOR: "openshift"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ${{ github.event.pull_request.commits }}
          # TODO: clone both test and tested as repo's?
          fetch-tags: false
          show-progress: false
          ref: ${{ inputs.commit || github.event.pull_request.head.sha }}

      - uses: ./.github/actions/job-preamble
        if: ${{ !env.ACT }}
        with:
          gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}

      - name: Check tag lookup
        run: |
          git describe --tags --abbrev=10 --dirty --long --exclude '*-nightly-*' || true

      - name: Env variables
        run: |
          set -x

          # example: 4.9.x-457-g9867327a52
          MAIN_IMAGE_TAG=$(git describe --tags --abbrev=10 --long --exclude '*-nightly-*' "${MAIN_IMAGE_TAG:-master}")

          JOB_NAME="${JOB_NAME:-ocp-4-19-qa-e2e-tests}"

          ARTIFACT_DIR="${ARTIFACT_DIR:-${SHARED_DIR}/tmp/}"
          mkdir -p "$ARTIFACT_DIR"

          tee -a "$GITHUB_ENV" <<EOF
          MAIN_IMAGE_TAG=${MAIN_IMAGE_TAG}
          TAG=${MAIN_IMAGE_TAG}

          CI=true
          SHARED_DIR=${SHARED_DIR:-/tmp}

          CI_JOB_NAME=${JOB_NAME}
          JOB_NAME=${JOB_NAME}
          JOB_NAME_SAFE=qa-e2e-tests
          GRADLE_USER_HOME=${HOME}

          ARTIFACT_DIR=${ARTIFACT_DIR}
          EOF

      - name: Check if testing on Infra cluster
        id: cluster-exists
        timeout-minutes: 5
        continue-on-error: true
        run: |
          source scripts/ci/lib.sh
          test_on_infra | tee -a "$GITHUB_ENV"

      - name: Determine cluster flavor
        if: ${{ steps.cluster-exists.outcome != 'failure' }}
        timeout-minutes: 5
        continue-on-error: true
        run: |
          set -x
          # groovy tests require CLUSTER='OPENSHIFT' for ocp or ='K8S' for GKE.
          if [[ "$(infractl get "$CLUSTER_NAME" --json | jq -r '.Flavor')" == *"openshift"* ]]; then
            echo "CLUSTER=OPENSHIFT" | tee -a "$GITHUB_ENV"
            # default is "K8S"
          fi

      - name: Find or Deploy Stackrox
        if: ${{ steps.cluster-exists.outcome != 'failure' }}
        env:
          DEPLOY_STACKROX_VIA_OPERATOR: "false"
          # LOAD_BALANCER: "lb"
          # SCANNER_SUPPORT: "true"
          MONITORING_SUPPORT: "false"
          LOCAL_DEPLOYMENT: "true"
          ROX_BASELINE_GENERATION_DURATION: "1m"
          ROX_NETWORK_BASELINE_OBSERVATION_PERIOD: "2m"
        run: |
          kubectl get namespace stackrox \
            || ./deploy/k8s/deploy.sh

      - name: Stackrox service and auth lookup
        id: stackrox-api
        timeout-minutes: 5
        continue-on-error: true
        run: |
          set +e
          set -x
          if [[ -e "${KUBECONFIG:-}" ]]; then
            if [[ -z "${ROX_ADMIN_PASSWORD:+set}" ]]; then
              password="${ROX_ADMIN_PASSWORD:-$(find "${KUBECONFIG%%kubeconfig}" -name admin-pass -exec cat)}"
              password="${ROX_ADMIN_PASSWORD:-$(kubectl -n stackrox get secret admin-pass -o json | jq -r '.data.password' | base64 -d)}"
              password="${password:-$(kubectl -n stackrox get secret central-htpasswd -o json | jq -er '.data.password' | base64 -d)}"
              echo "ROX_USERNAME=admin" | tee -a "$GITHUB_ENV"
              echo "ROX_ADMIN_PASSWORD=${password}" >> "$GITHUB_ENV"
            fi
            if [[ -z "${API_HOSTNAME:-}" || ( $API_HOSTNAME == 'localhost' && -z "$(pgrep -F /tmp/forward.pid)" ) ]]; then
              API_HOSTNAME=$(kubectl -n stackrox get route central -o jsonpath='{.status.ingress[0].host}')
              API_HOSTNAME=${API_HOSTNAME:-$(kubectl -n stackrox get service central-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}')}
              API_HOSTNAME=${API_HOSTNAME:-localhost}
              echo "API_HOSTNAME=${API_HOSTNAME}" | tee -a "$GITHUB_ENV"
              API_PORT=${API_PORT:-$(kubectl -n stackrox get route central -o jsonpath='{.spec.port.targetPort}')}
              API_PORT=${API_PORT:-$(kubectl -n stackrox get service central-loadbalancer -o jsonpath='{.status.loadBalancer.ingress[0].port}')}
              API_PORT=${API_PORT//https/443}
              if [[ "$API_HOSTNAME" == 'localhost' ]]; then
                nohup kubectl -n stackrox port-forward svc/central 8000:443 &
                echo $! | tee /tmp/forward.pid
                API_PORT=8000
              fi
              echo "API_HOSTNAME=${API_HOSTNAME}" | tee -a "$GITHUB_ENV"
              echo "API_PORT=${API_PORT}" | tee -a "$GITHUB_ENV"
            fi
          fi
          echo "API_ENDPOINT=${API_HOSTNAME:-localhost}:${API_PORT:-8000}" | tee -a "$GITHUB_ENV"

      - name: Stackrox API test
        if: ${{ steps.stackrox-api.outcome != 'failure' }}
        run: |
          if [[ "${API_HOSTNAME:-}" == 'localhost' && -e /tmp/forward.pid ]]; then 
            cat /tmp/forward.pid
            ps -ef | grep kube || true
          fi

          curl -sk -u "${ROX_USERNAME}:${ROX_ADMIN_PASSWORD}" "https://${API_ENDPOINT}/v1/clusters" | jq '.' || true

      - name: Get secured cluster name
        if: ${{ steps.stackrox-api.outcome != 'failure' }}
        run: |
          echo "Groovy tests expect a secured cluster. Default name is 'remote' but the Infra demo clusters set names like 'production'. Look up what secured clusters exist:"
          set -x
          CLUSTER_INFO=$(curl -sk -u "${ROX_USERNAME}:${ROX_ADMIN_PASSWORD}" "https://${API_ENDPOINT}/v1/clusters")
          echo "REMOTE_CLUSTER_NAME=$(jq -r '(.clusters[] | select(.name == "production") | .name) // .clusters[0].name' <<<"$CLUSTER_INFO")" | tee -a "$GITHUB_ENV"

      - run: go get github.com/stackrox/scanner

      - name: install oc cli
        if: ${{ env.CLUSTER == 'OPENSHIFT' }}
        run: |
          # Some tests require `oc`.
          curl --retry 5 --retry-all-errors -L -o /tmp/openshift-client-linux.tar.gz \
            https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
          tar -C /tmp -xzf /tmp/openshift-client-linux.tar.gz
          install --mode 755 /tmp/oc /usr/local/bin/
          install --mode 755 /tmp/kubectl /usr/local/bin/

      - timeout-minutes: 10
        continue-on-error: true
        run: |
          make -C qa-tests-backend compile

      - timeout-minutes: 35
        continue-on-error: true
        run: |
          make -C qa-tests-backend smoke-test

      - timeout-minutes: 35
        continue-on-error: true
        run: |
          make -C qa-tests-backend bat-test
          # TEST_TARGET=bat-test ./gradlew testBegin testParallelBAT testBAT --fail-fast

      - timeout-minutes: 35
        continue-on-error: true
        run: |
          make -C qa-tests-backend test
