// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/generated/internalapi/sensor (interfaces: VirtualMachineIndexReportServiceClient)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/github.com/stackrox/rox/generated/internalapi/sensor/mocks/mocks.go github.com/stackrox/rox/generated/internalapi/sensor VirtualMachineIndexReportServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sensor "github.com/stackrox/rox/generated/internalapi/sensor"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVirtualMachineIndexReportServiceClient is a mock of VirtualMachineIndexReportServiceClient interface.
type MockVirtualMachineIndexReportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineIndexReportServiceClientMockRecorder
	isgomock struct{}
}

// MockVirtualMachineIndexReportServiceClientMockRecorder is the mock recorder for MockVirtualMachineIndexReportServiceClient.
type MockVirtualMachineIndexReportServiceClientMockRecorder struct {
	mock *MockVirtualMachineIndexReportServiceClient
}

// NewMockVirtualMachineIndexReportServiceClient creates a new mock instance.
func NewMockVirtualMachineIndexReportServiceClient(ctrl *gomock.Controller) *MockVirtualMachineIndexReportServiceClient {
	mock := &MockVirtualMachineIndexReportServiceClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineIndexReportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineIndexReportServiceClient) EXPECT() *MockVirtualMachineIndexReportServiceClientMockRecorder {
	return m.recorder
}

// UpsertVirtualMachineIndexReport mocks base method.
func (m *MockVirtualMachineIndexReportServiceClient) UpsertVirtualMachineIndexReport(ctx context.Context, in *sensor.UpsertVirtualMachineIndexReportRequest, opts ...grpc.CallOption) (*sensor.UpsertVirtualMachineIndexReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVirtualMachineIndexReport", varargs...)
	ret0, _ := ret[0].(*sensor.UpsertVirtualMachineIndexReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertVirtualMachineIndexReport indicates an expected call of UpsertVirtualMachineIndexReport.
func (mr *MockVirtualMachineIndexReportServiceClientMockRecorder) UpsertVirtualMachineIndexReport(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMachineIndexReport", reflect.TypeOf((*MockVirtualMachineIndexReportServiceClient)(nil).UpsertVirtualMachineIndexReport), varargs...)
}
