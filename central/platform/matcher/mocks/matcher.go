// Code generated by MockGen. DO NOT EDIT.
// Source: matcher.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/matcher.go -source matcher.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockPlatformMatcher is a mock of PlatformMatcher interface.
type MockPlatformMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformMatcherMockRecorder
	isgomock struct{}
}

// MockPlatformMatcherMockRecorder is the mock recorder for MockPlatformMatcher.
type MockPlatformMatcherMockRecorder struct {
	mock *MockPlatformMatcher
}

// NewMockPlatformMatcher creates a new mock instance.
func NewMockPlatformMatcher(ctrl *gomock.Controller) *MockPlatformMatcher {
	mock := &MockPlatformMatcher{ctrl: ctrl}
	mock.recorder = &MockPlatformMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformMatcher) EXPECT() *MockPlatformMatcherMockRecorder {
	return m.recorder
}

// MatchAlert mocks base method.
func (m *MockPlatformMatcher) MatchAlert(alert *storage.Alert) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchAlert", alert)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchAlert indicates an expected call of MatchAlert.
func (mr *MockPlatformMatcherMockRecorder) MatchAlert(alert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchAlert", reflect.TypeOf((*MockPlatformMatcher)(nil).MatchAlert), alert)
}

// MatchDeployment mocks base method.
func (m *MockPlatformMatcher) MatchDeployment(deployment *storage.Deployment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchDeployment", deployment)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchDeployment indicates an expected call of MatchDeployment.
func (mr *MockPlatformMatcherMockRecorder) MatchDeployment(deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchDeployment", reflect.TypeOf((*MockPlatformMatcher)(nil).MatchDeployment), deployment)
}
