// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ActiveComponentsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestActiveComponentsStore(t *testing.T) {
	suite.Run(t, new(ActiveComponentsStoreSuite))
}

func (s *ActiveComponentsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ActiveComponentsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE active_components CASCADE")
	s.T().Log("active_components", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *ActiveComponentsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ActiveComponentsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	activeComponent := &storage.ActiveComponent{}
	s.NoError(testutils.FullInit(activeComponent, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundActiveComponent, exists, err := store.Get(ctx, activeComponent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundActiveComponent)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, activeComponent))
	foundActiveComponent, exists, err = store.Get(ctx, activeComponent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(activeComponent, foundActiveComponent)

	activeComponentCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, activeComponentCount)
	activeComponentCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(activeComponentCount)

	activeComponentExists, err := store.Exists(ctx, activeComponent.GetId())
	s.NoError(err)
	s.True(activeComponentExists)
	s.NoError(store.Upsert(ctx, activeComponent))
	s.ErrorIs(store.Upsert(withNoAccessCtx, activeComponent), sac.ErrResourceAccessDenied)

	foundActiveComponent, exists, err = store.Get(ctx, activeComponent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(activeComponent, foundActiveComponent)

	s.NoError(store.Delete(ctx, activeComponent.GetId()))
	foundActiveComponent, exists, err = store.Get(ctx, activeComponent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundActiveComponent)
	s.NoError(store.Delete(withNoAccessCtx, activeComponent.GetId()))

	var activeComponents []*storage.ActiveComponent
	var activeComponentIDs []string
	for i := 0; i < 200; i++ {
		activeComponent := &storage.ActiveComponent{}
		s.NoError(testutils.FullInit(activeComponent, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		activeComponents = append(activeComponents, activeComponent)
		activeComponentIDs = append(activeComponentIDs, activeComponent.GetId())
	}

	s.NoError(store.UpsertMany(ctx, activeComponents))

	activeComponentCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, activeComponentCount)

	s.NoError(store.DeleteMany(ctx, activeComponentIDs))

	activeComponentCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, activeComponentCount)
}
