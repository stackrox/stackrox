// Code generated by MockGen. DO NOT EDIT.
// Source: process_aggregator.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/process_aggregator.go -source process_aggregator.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	aggregator "github.com/stackrox/rox/central/activecomponent/updater/aggregator"
	storage "github.com/stackrox/rox/generated/storage"
	set "github.com/stackrox/rox/pkg/set"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessAggregator is a mock of ProcessAggregator interface.
type MockProcessAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAggregatorMockRecorder
}

// MockProcessAggregatorMockRecorder is the mock recorder for MockProcessAggregator.
type MockProcessAggregatorMockRecorder struct {
	mock *MockProcessAggregator
}

// NewMockProcessAggregator creates a new mock instance.
func NewMockProcessAggregator(ctrl *gomock.Controller) *MockProcessAggregator {
	mock := &MockProcessAggregator{ctrl: ctrl}
	mock.recorder = &MockProcessAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAggregator) EXPECT() *MockProcessAggregatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProcessAggregator) Add(indicators []*storage.ProcessIndicator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", indicators)
}

// Add indicates an expected call of Add.
func (mr *MockProcessAggregatorMockRecorder) Add(indicators any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProcessAggregator)(nil).Add), indicators)
}

// GetAndPrune mocks base method.
func (m *MockProcessAggregator) GetAndPrune(imageScanned func(string) bool, deploymentIDSet set.StringSet) map[string][]*aggregator.ProcessUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndPrune", imageScanned, deploymentIDSet)
	ret0, _ := ret[0].(map[string][]*aggregator.ProcessUpdate)
	return ret0
}

// GetAndPrune indicates an expected call of GetAndPrune.
func (mr *MockProcessAggregatorMockRecorder) GetAndPrune(imageScanned, deploymentIDSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndPrune", reflect.TypeOf((*MockProcessAggregator)(nil).GetAndPrune), imageScanned, deploymentIDSet)
}

// RefreshDeployment mocks base method.
func (m *MockProcessAggregator) RefreshDeployment(deployment *storage.Deployment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshDeployment", deployment)
}

// RefreshDeployment indicates an expected call of RefreshDeployment.
func (mr *MockProcessAggregatorMockRecorder) RefreshDeployment(deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDeployment", reflect.TypeOf((*MockProcessAggregator)(nil).RefreshDeployment), deployment)
}
