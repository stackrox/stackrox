// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddReportConfiguration mocks base method.
func (m *MockDataStore) AddReportConfiguration(ctx context.Context, reportConfig *storage.ReportConfiguration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReportConfiguration", ctx, reportConfig)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReportConfiguration indicates an expected call of AddReportConfiguration.
func (mr *MockDataStoreMockRecorder) AddReportConfiguration(ctx, reportConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReportConfiguration", reflect.TypeOf((*MockDataStore)(nil).AddReportConfiguration), ctx, reportConfig)
}

// Count mocks base method.
func (m *MockDataStore) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDataStoreMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDataStore)(nil).Count), ctx, q)
}

// GetReportConfiguration mocks base method.
func (m *MockDataStore) GetReportConfiguration(ctx context.Context, id string) (*storage.ReportConfiguration, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportConfiguration", ctx, id)
	ret0, _ := ret[0].(*storage.ReportConfiguration)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReportConfiguration indicates an expected call of GetReportConfiguration.
func (mr *MockDataStoreMockRecorder) GetReportConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportConfiguration", reflect.TypeOf((*MockDataStore)(nil).GetReportConfiguration), ctx, id)
}

// GetReportConfigurations mocks base method.
func (m *MockDataStore) GetReportConfigurations(ctx context.Context, query *v1.Query) ([]*storage.ReportConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportConfigurations", ctx, query)
	ret0, _ := ret[0].([]*storage.ReportConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportConfigurations indicates an expected call of GetReportConfigurations.
func (mr *MockDataStoreMockRecorder) GetReportConfigurations(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportConfigurations", reflect.TypeOf((*MockDataStore)(nil).GetReportConfigurations), ctx, query)
}

// RemoveReportConfiguration mocks base method.
func (m *MockDataStore) RemoveReportConfiguration(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReportConfiguration", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReportConfiguration indicates an expected call of RemoveReportConfiguration.
func (mr *MockDataStoreMockRecorder) RemoveReportConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReportConfiguration", reflect.TypeOf((*MockDataStore)(nil).RemoveReportConfiguration), ctx, id)
}

// Search mocks base method.
func (m *MockDataStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDataStoreMockRecorder) Search(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), ctx, q)
}

// UpdateReportConfiguration mocks base method.
func (m *MockDataStore) UpdateReportConfiguration(ctx context.Context, reportConfig *storage.ReportConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReportConfiguration", ctx, reportConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReportConfiguration indicates an expected call of UpdateReportConfiguration.
func (mr *MockDataStoreMockRecorder) UpdateReportConfiguration(ctx, reportConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportConfiguration", reflect.TypeOf((*MockDataStore)(nil).UpdateReportConfiguration), ctx, reportConfig)
}

// Walk mocks base method.
func (m *MockDataStore) Walk(ctx context.Context, fn func(*storage.ReportConfiguration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockDataStoreMockRecorder) Walk(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockDataStore)(nil).Walk), ctx, fn)
}
