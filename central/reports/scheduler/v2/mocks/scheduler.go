// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/scheduler.go -source scheduler.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	reportgenerator "github.com/stackrox/rox/central/reports/scheduler/v2/reportgenerator"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CanSubmitReportRequest mocks base method.
func (m *MockScheduler) CanSubmitReportRequest(user *storage.SlimUser, reportConfig *storage.ReportConfiguration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSubmitReportRequest", user, reportConfig)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSubmitReportRequest indicates an expected call of CanSubmitReportRequest.
func (mr *MockSchedulerMockRecorder) CanSubmitReportRequest(user, reportConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSubmitReportRequest", reflect.TypeOf((*MockScheduler)(nil).CanSubmitReportRequest), user, reportConfig)
}

// CancelReportRequest mocks base method.
func (m *MockScheduler) CancelReportRequest(ctx context.Context, reportID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReportRequest", ctx, reportID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReportRequest indicates an expected call of CancelReportRequest.
func (mr *MockSchedulerMockRecorder) CancelReportRequest(ctx, reportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReportRequest", reflect.TypeOf((*MockScheduler)(nil).CancelReportRequest), ctx, reportID)
}

// RemoveReportSchedule mocks base method.
func (m *MockScheduler) RemoveReportSchedule(reportConfigID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveReportSchedule", reportConfigID)
}

// RemoveReportSchedule indicates an expected call of RemoveReportSchedule.
func (mr *MockSchedulerMockRecorder) RemoveReportSchedule(reportConfigID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReportSchedule", reflect.TypeOf((*MockScheduler)(nil).RemoveReportSchedule), reportConfigID)
}

// Start mocks base method.
func (m *MockScheduler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start))
}

// Stop mocks base method.
func (m *MockScheduler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScheduler)(nil).Stop))
}

// SubmitReportRequest mocks base method.
func (m *MockScheduler) SubmitReportRequest(ctx context.Context, request *reportgenerator.ReportRequest, reSubmission bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReportRequest", ctx, request, reSubmission)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitReportRequest indicates an expected call of SubmitReportRequest.
func (mr *MockSchedulerMockRecorder) SubmitReportRequest(ctx, request, reSubmission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReportRequest", reflect.TypeOf((*MockScheduler)(nil).SubmitReportRequest), ctx, request, reSubmission)
}

// UpsertReportSchedule mocks base method.
func (m *MockScheduler) UpsertReportSchedule(reportConfig *storage.ReportConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertReportSchedule", reportConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertReportSchedule indicates an expected call of UpsertReportSchedule.
func (mr *MockSchedulerMockRecorder) UpsertReportSchedule(reportConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertReportSchedule", reflect.TypeOf((*MockScheduler)(nil).UpsertReportSchedule), reportConfig)
}
