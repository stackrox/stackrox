// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/stackrox/rox/central/views/common"
	deployments "github.com/stackrox/rox/central/views/deployments"
	v1 "github.com/stackrox/rox/generated/api/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockDeploymentCore is a mock of DeploymentCore interface.
type MockDeploymentCore struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentCoreMockRecorder
	isgomock struct{}
}

// MockDeploymentCoreMockRecorder is the mock recorder for MockDeploymentCore.
type MockDeploymentCoreMockRecorder struct {
	mock *MockDeploymentCore
}

// NewMockDeploymentCore creates a new mock instance.
func NewMockDeploymentCore(ctrl *gomock.Controller) *MockDeploymentCore {
	mock := &MockDeploymentCore{ctrl: ctrl}
	mock.recorder = &MockDeploymentCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentCore) EXPECT() *MockDeploymentCoreMockRecorder {
	return m.recorder
}

// GetDeploymentCVEsBySeverity mocks base method.
func (m *MockDeploymentCore) GetDeploymentCVEsBySeverity() common.ResourceCountByCVESeverity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentCVEsBySeverity")
	ret0, _ := ret[0].(common.ResourceCountByCVESeverity)
	return ret0
}

// GetDeploymentCVEsBySeverity indicates an expected call of GetDeploymentCVEsBySeverity.
func (mr *MockDeploymentCoreMockRecorder) GetDeploymentCVEsBySeverity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentCVEsBySeverity", reflect.TypeOf((*MockDeploymentCore)(nil).GetDeploymentCVEsBySeverity))
}

// GetDeploymentID mocks base method.
func (m *MockDeploymentCore) GetDeploymentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeploymentID indicates an expected call of GetDeploymentID.
func (mr *MockDeploymentCoreMockRecorder) GetDeploymentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentID", reflect.TypeOf((*MockDeploymentCore)(nil).GetDeploymentID))
}

// MockDeploymentView is a mock of DeploymentView interface.
type MockDeploymentView struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentViewMockRecorder
	isgomock struct{}
}

// MockDeploymentViewMockRecorder is the mock recorder for MockDeploymentView.
type MockDeploymentViewMockRecorder struct {
	mock *MockDeploymentView
}

// NewMockDeploymentView creates a new mock instance.
func NewMockDeploymentView(ctrl *gomock.Controller) *MockDeploymentView {
	mock := &MockDeploymentView{ctrl: ctrl}
	mock.recorder = &MockDeploymentViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentView) EXPECT() *MockDeploymentViewMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDeploymentView) Get(ctx context.Context, q *v1.Query) ([]deployments.DeploymentCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, q)
	ret0, _ := ret[0].([]deployments.DeploymentCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeploymentViewMockRecorder) Get(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeploymentView)(nil).Get), ctx, q)
}
