// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	views "github.com/stackrox/rox/central/views"
	imagecveflat "github.com/stackrox/rox/central/views/imagecveflat"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockCveFlat is a mock of CveFlat interface.
type MockCveFlat struct {
	ctrl     *gomock.Controller
	recorder *MockCveFlatMockRecorder
	isgomock struct{}
}

// MockCveFlatMockRecorder is the mock recorder for MockCveFlat.
type MockCveFlatMockRecorder struct {
	mock *MockCveFlat
}

// NewMockCveFlat creates a new mock instance.
func NewMockCveFlat(ctrl *gomock.Controller) *MockCveFlat {
	mock := &MockCveFlat{ctrl: ctrl}
	mock.recorder = &MockCveFlatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCveFlat) EXPECT() *MockCveFlatMockRecorder {
	return m.recorder
}

// GetAffectedImageCount mocks base method.
func (m *MockCveFlat) GetAffectedImageCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffectedImageCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAffectedImageCount indicates an expected call of GetAffectedImageCount.
func (mr *MockCveFlatMockRecorder) GetAffectedImageCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffectedImageCount", reflect.TypeOf((*MockCveFlat)(nil).GetAffectedImageCount))
}

// GetCVE mocks base method.
func (m *MockCveFlat) GetCVE() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVE")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCVE indicates an expected call of GetCVE.
func (mr *MockCveFlatMockRecorder) GetCVE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVE", reflect.TypeOf((*MockCveFlat)(nil).GetCVE))
}

// GetCVEIDs mocks base method.
func (m *MockCveFlat) GetCVEIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVEIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCVEIDs indicates an expected call of GetCVEIDs.
func (mr *MockCveFlatMockRecorder) GetCVEIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVEIDs", reflect.TypeOf((*MockCveFlat)(nil).GetCVEIDs))
}

// GetFirstDiscoveredInSystem mocks base method.
func (m *MockCveFlat) GetFirstDiscoveredInSystem() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstDiscoveredInSystem")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetFirstDiscoveredInSystem indicates an expected call of GetFirstDiscoveredInSystem.
func (mr *MockCveFlatMockRecorder) GetFirstDiscoveredInSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstDiscoveredInSystem", reflect.TypeOf((*MockCveFlat)(nil).GetFirstDiscoveredInSystem))
}

// GetFirstImageOccurrence mocks base method.
func (m *MockCveFlat) GetFirstImageOccurrence() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstImageOccurrence")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetFirstImageOccurrence indicates an expected call of GetFirstImageOccurrence.
func (mr *MockCveFlatMockRecorder) GetFirstImageOccurrence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstImageOccurrence", reflect.TypeOf((*MockCveFlat)(nil).GetFirstImageOccurrence))
}

// GetPublishDate mocks base method.
func (m *MockCveFlat) GetPublishDate() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishDate")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetPublishDate indicates an expected call of GetPublishDate.
func (mr *MockCveFlatMockRecorder) GetPublishDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishDate", reflect.TypeOf((*MockCveFlat)(nil).GetPublishDate))
}

// GetSeverity mocks base method.
func (m *MockCveFlat) GetSeverity() *storage.VulnerabilitySeverity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeverity")
	ret0, _ := ret[0].(*storage.VulnerabilitySeverity)
	return ret0
}

// GetSeverity indicates an expected call of GetSeverity.
func (mr *MockCveFlatMockRecorder) GetSeverity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeverity", reflect.TypeOf((*MockCveFlat)(nil).GetSeverity))
}

// GetState mocks base method.
func (m *MockCveFlat) GetState() *storage.VulnerabilityState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*storage.VulnerabilityState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockCveFlatMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockCveFlat)(nil).GetState))
}

// GetTopCVSS mocks base method.
func (m *MockCveFlat) GetTopCVSS() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopCVSS")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetTopCVSS indicates an expected call of GetTopCVSS.
func (mr *MockCveFlatMockRecorder) GetTopCVSS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopCVSS", reflect.TypeOf((*MockCveFlat)(nil).GetTopCVSS))
}

// GetTopNVDCVSS mocks base method.
func (m *MockCveFlat) GetTopNVDCVSS() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopNVDCVSS")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetTopNVDCVSS indicates an expected call of GetTopNVDCVSS.
func (mr *MockCveFlatMockRecorder) GetTopNVDCVSS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopNVDCVSS", reflect.TypeOf((*MockCveFlat)(nil).GetTopNVDCVSS))
}

// MockCveFlatView is a mock of CveFlatView interface.
type MockCveFlatView struct {
	ctrl     *gomock.Controller
	recorder *MockCveFlatViewMockRecorder
	isgomock struct{}
}

// MockCveFlatViewMockRecorder is the mock recorder for MockCveFlatView.
type MockCveFlatViewMockRecorder struct {
	mock *MockCveFlatView
}

// NewMockCveFlatView creates a new mock instance.
func NewMockCveFlatView(ctrl *gomock.Controller) *MockCveFlatView {
	mock := &MockCveFlatView{ctrl: ctrl}
	mock.recorder = &MockCveFlatViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCveFlatView) EXPECT() *MockCveFlatViewMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCveFlatView) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCveFlatViewMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCveFlatView)(nil).Count), ctx, q)
}

// Get mocks base method.
func (m *MockCveFlatView) Get(ctx context.Context, q *v1.Query, options views.ReadOptions) ([]imagecveflat.CveFlat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, q, options)
	ret0, _ := ret[0].([]imagecveflat.CveFlat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCveFlatViewMockRecorder) Get(ctx, q, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCveFlatView)(nil).Get), ctx, q, options)
}
