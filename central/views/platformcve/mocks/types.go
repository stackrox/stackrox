// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/types.go -source types.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	platformcve "github.com/stackrox/rox/central/views/platformcve"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockCveCore is a mock of CveCore interface.
type MockCveCore struct {
	ctrl     *gomock.Controller
	recorder *MockCveCoreMockRecorder
}

// MockCveCoreMockRecorder is the mock recorder for MockCveCore.
type MockCveCoreMockRecorder struct {
	mock *MockCveCore
}

// NewMockCveCore creates a new mock instance.
func NewMockCveCore(ctrl *gomock.Controller) *MockCveCore {
	mock := &MockCveCore{ctrl: ctrl}
	mock.recorder = &MockCveCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCveCore) EXPECT() *MockCveCoreMockRecorder {
	return m.recorder
}

// GetCVE mocks base method.
func (m *MockCveCore) GetCVE() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVE")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCVE indicates an expected call of GetCVE.
func (mr *MockCveCoreMockRecorder) GetCVE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVE", reflect.TypeOf((*MockCveCore)(nil).GetCVE))
}

// GetCVEID mocks base method.
func (m *MockCveCore) GetCVEID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVEID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCVEID indicates an expected call of GetCVEID.
func (mr *MockCveCoreMockRecorder) GetCVEID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVEID", reflect.TypeOf((*MockCveCore)(nil).GetCVEID))
}

// GetCVEType mocks base method.
func (m *MockCveCore) GetCVEType() storage.CVE_CVEType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVEType")
	ret0, _ := ret[0].(storage.CVE_CVEType)
	return ret0
}

// GetCVEType indicates an expected call of GetCVEType.
func (mr *MockCveCoreMockRecorder) GetCVEType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVEType", reflect.TypeOf((*MockCveCore)(nil).GetCVEType))
}

// GetCVSS mocks base method.
func (m *MockCveCore) GetCVSS() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVSS")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetCVSS indicates an expected call of GetCVSS.
func (mr *MockCveCoreMockRecorder) GetCVSS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVSS", reflect.TypeOf((*MockCveCore)(nil).GetCVSS))
}

// GetClusterCount mocks base method.
func (m *MockCveCore) GetClusterCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetClusterCount indicates an expected call of GetClusterCount.
func (mr *MockCveCoreMockRecorder) GetClusterCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCount", reflect.TypeOf((*MockCveCore)(nil).GetClusterCount))
}

// GetClusterCountByPlatformType mocks base method.
func (m *MockCveCore) GetClusterCountByPlatformType() platformcve.ClusterCountByPlatformType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterCountByPlatformType")
	ret0, _ := ret[0].(platformcve.ClusterCountByPlatformType)
	return ret0
}

// GetClusterCountByPlatformType indicates an expected call of GetClusterCountByPlatformType.
func (mr *MockCveCoreMockRecorder) GetClusterCountByPlatformType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCountByPlatformType", reflect.TypeOf((*MockCveCore)(nil).GetClusterCountByPlatformType))
}

// GetFirstDiscoveredTime mocks base method.
func (m *MockCveCore) GetFirstDiscoveredTime() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstDiscoveredTime")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetFirstDiscoveredTime indicates an expected call of GetFirstDiscoveredTime.
func (mr *MockCveCoreMockRecorder) GetFirstDiscoveredTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstDiscoveredTime", reflect.TypeOf((*MockCveCore)(nil).GetFirstDiscoveredTime))
}

// GetFixability mocks base method.
func (m *MockCveCore) GetFixability() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFixability")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetFixability indicates an expected call of GetFixability.
func (mr *MockCveCoreMockRecorder) GetFixability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFixability", reflect.TypeOf((*MockCveCore)(nil).GetFixability))
}

// MockCveView is a mock of CveView interface.
type MockCveView struct {
	ctrl     *gomock.Controller
	recorder *MockCveViewMockRecorder
}

// MockCveViewMockRecorder is the mock recorder for MockCveView.
type MockCveViewMockRecorder struct {
	mock *MockCveView
}

// NewMockCveView creates a new mock instance.
func NewMockCveView(ctrl *gomock.Controller) *MockCveView {
	mock := &MockCveView{ctrl: ctrl}
	mock.recorder = &MockCveViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCveView) EXPECT() *MockCveViewMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCveView) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCveViewMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCveView)(nil).Count), ctx, q)
}

// Get mocks base method.
func (m *MockCveView) Get(ctx context.Context, q *v1.Query) ([]platformcve.CveCore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, q)
	ret0, _ := ret[0].([]platformcve.CveCore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCveViewMockRecorder) Get(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCveView)(nil).Get), ctx, q)
}

// GetClusterIDs mocks base method.
func (m *MockCveView) GetClusterIDs(ctx context.Context, q *v1.Query) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDs", ctx, q)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterIDs indicates an expected call of GetClusterIDs.
func (mr *MockCveViewMockRecorder) GetClusterIDs(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDs", reflect.TypeOf((*MockCveView)(nil).GetClusterIDs), ctx, q)
}

// MockClusterCountByPlatformType is a mock of ClusterCountByPlatformType interface.
type MockClusterCountByPlatformType struct {
	ctrl     *gomock.Controller
	recorder *MockClusterCountByPlatformTypeMockRecorder
}

// MockClusterCountByPlatformTypeMockRecorder is the mock recorder for MockClusterCountByPlatformType.
type MockClusterCountByPlatformTypeMockRecorder struct {
	mock *MockClusterCountByPlatformType
}

// NewMockClusterCountByPlatformType creates a new mock instance.
func NewMockClusterCountByPlatformType(ctrl *gomock.Controller) *MockClusterCountByPlatformType {
	mock := &MockClusterCountByPlatformType{ctrl: ctrl}
	mock.recorder = &MockClusterCountByPlatformTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterCountByPlatformType) EXPECT() *MockClusterCountByPlatformTypeMockRecorder {
	return m.recorder
}

// GetGenericClusterCount mocks base method.
func (m *MockClusterCountByPlatformType) GetGenericClusterCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenericClusterCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGenericClusterCount indicates an expected call of GetGenericClusterCount.
func (mr *MockClusterCountByPlatformTypeMockRecorder) GetGenericClusterCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenericClusterCount", reflect.TypeOf((*MockClusterCountByPlatformType)(nil).GetGenericClusterCount))
}

// GetKubernetesClusterCount mocks base method.
func (m *MockClusterCountByPlatformType) GetKubernetesClusterCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesClusterCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKubernetesClusterCount indicates an expected call of GetKubernetesClusterCount.
func (mr *MockClusterCountByPlatformTypeMockRecorder) GetKubernetesClusterCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesClusterCount", reflect.TypeOf((*MockClusterCountByPlatformType)(nil).GetKubernetesClusterCount))
}

// GetOpenshift4ClusterCount mocks base method.
func (m *MockClusterCountByPlatformType) GetOpenshift4ClusterCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshift4ClusterCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOpenshift4ClusterCount indicates an expected call of GetOpenshift4ClusterCount.
func (mr *MockClusterCountByPlatformTypeMockRecorder) GetOpenshift4ClusterCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshift4ClusterCount", reflect.TypeOf((*MockClusterCountByPlatformType)(nil).GetOpenshift4ClusterCount))
}

// GetOpenshiftClusterCount mocks base method.
func (m *MockClusterCountByPlatformType) GetOpenshiftClusterCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshiftClusterCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOpenshiftClusterCount indicates an expected call of GetOpenshiftClusterCount.
func (mr *MockClusterCountByPlatformTypeMockRecorder) GetOpenshiftClusterCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshiftClusterCount", reflect.TypeOf((*MockClusterCountByPlatformType)(nil).GetOpenshiftClusterCount))
}
