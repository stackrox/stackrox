// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ComplianceOperatorScansStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestComplianceOperatorScansStore(t *testing.T) {
	suite.Run(t, new(ComplianceOperatorScansStoreSuite))
}

func (s *ComplianceOperatorScansStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ComplianceOperatorScansStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE compliance_operator_scans CASCADE")
	s.T().Log("compliance_operator_scans", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *ComplianceOperatorScansStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ComplianceOperatorScansStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	complianceOperatorScan := &storage.ComplianceOperatorScan{}
	s.NoError(testutils.FullInit(complianceOperatorScan, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundComplianceOperatorScan, exists, err := store.Get(ctx, complianceOperatorScan.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceOperatorScan)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, complianceOperatorScan))
	foundComplianceOperatorScan, exists, err = store.Get(ctx, complianceOperatorScan.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceOperatorScan, foundComplianceOperatorScan)

	complianceOperatorScanCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, complianceOperatorScanCount)
	complianceOperatorScanCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(complianceOperatorScanCount)

	complianceOperatorScanExists, err := store.Exists(ctx, complianceOperatorScan.GetId())
	s.NoError(err)
	s.True(complianceOperatorScanExists)
	s.NoError(store.Upsert(ctx, complianceOperatorScan))
	s.ErrorIs(store.Upsert(withNoAccessCtx, complianceOperatorScan), sac.ErrResourceAccessDenied)

	foundComplianceOperatorScan, exists, err = store.Get(ctx, complianceOperatorScan.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceOperatorScan, foundComplianceOperatorScan)

	s.NoError(store.Delete(ctx, complianceOperatorScan.GetId()))
	foundComplianceOperatorScan, exists, err = store.Get(ctx, complianceOperatorScan.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceOperatorScan)
	s.ErrorIs(store.Delete(withNoAccessCtx, complianceOperatorScan.GetId()), sac.ErrResourceAccessDenied)

	var complianceOperatorScans []*storage.ComplianceOperatorScan
	var complianceOperatorScanIDs []string
	for i := 0; i < 200; i++ {
		complianceOperatorScan := &storage.ComplianceOperatorScan{}
		s.NoError(testutils.FullInit(complianceOperatorScan, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceOperatorScans = append(complianceOperatorScans, complianceOperatorScan)
		complianceOperatorScanIDs = append(complianceOperatorScanIDs, complianceOperatorScan.GetId())
	}

	s.NoError(store.UpsertMany(ctx, complianceOperatorScans))

	complianceOperatorScanCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, complianceOperatorScanCount)

	s.NoError(store.DeleteMany(ctx, complianceOperatorScanIDs))

	complianceOperatorScanCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, complianceOperatorScanCount)
}
