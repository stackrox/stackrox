// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddProfile mocks base method.
func (m *MockManager) AddProfile(profile *storage.ComplianceOperatorProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfile indicates an expected call of AddProfile.
func (mr *MockManagerMockRecorder) AddProfile(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockManager)(nil).AddProfile), profile)
}

// AddRule mocks base method.
func (m *MockManager) AddRule(rule *storage.ComplianceOperatorRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRule", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRule indicates an expected call of AddRule.
func (mr *MockManagerMockRecorder) AddRule(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRule", reflect.TypeOf((*MockManager)(nil).AddRule), rule)
}

// AddScan mocks base method.
func (m *MockManager) AddScan(scan *storage.ComplianceOperatorScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScan", scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScan indicates an expected call of AddScan.
func (mr *MockManagerMockRecorder) AddScan(scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScan", reflect.TypeOf((*MockManager)(nil).AddScan), scan)
}

// DeleteProfile mocks base method.
func (m *MockManager) DeleteProfile(profile *storage.ComplianceOperatorProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockManagerMockRecorder) DeleteProfile(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockManager)(nil).DeleteProfile), profile)
}

// DeleteRule mocks base method.
func (m *MockManager) DeleteRule(rule *storage.ComplianceOperatorRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockManagerMockRecorder) DeleteRule(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockManager)(nil).DeleteRule), rule)
}

// DeleteScan mocks base method.
func (m *MockManager) DeleteScan(scan *storage.ComplianceOperatorScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScan", scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScan indicates an expected call of DeleteScan.
func (mr *MockManagerMockRecorder) DeleteScan(scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScan", reflect.TypeOf((*MockManager)(nil).DeleteScan), scan)
}

// GetMachineConfigs mocks base method.
func (m *MockManager) GetMachineConfigs(clusterID string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineConfigs", clusterID)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineConfigs indicates an expected call of GetMachineConfigs.
func (mr *MockManagerMockRecorder) GetMachineConfigs(clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineConfigs", reflect.TypeOf((*MockManager)(nil).GetMachineConfigs), clusterID)
}

// IsStandardActive mocks base method.
func (m *MockManager) IsStandardActive(standardID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStandardActive", standardID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStandardActive indicates an expected call of IsStandardActive.
func (mr *MockManagerMockRecorder) IsStandardActive(standardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStandardActive", reflect.TypeOf((*MockManager)(nil).IsStandardActive), standardID)
}

// IsStandardActiveForCluster mocks base method.
func (m *MockManager) IsStandardActiveForCluster(standardID, clusterID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStandardActiveForCluster", standardID, clusterID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStandardActiveForCluster indicates an expected call of IsStandardActiveForCluster.
func (mr *MockManagerMockRecorder) IsStandardActiveForCluster(standardID, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStandardActiveForCluster", reflect.TypeOf((*MockManager)(nil).IsStandardActiveForCluster), standardID, clusterID)
}

// IsStandardHidden mocks base method.
func (m *MockManager) IsStandardHidden(ctx context.Context, standardID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStandardHidden", ctx, standardID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStandardHidden indicates an expected call of IsStandardHidden.
func (mr *MockManagerMockRecorder) IsStandardHidden(ctx, standardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStandardHidden", reflect.TypeOf((*MockManager)(nil).IsStandardHidden), ctx, standardID)
}
