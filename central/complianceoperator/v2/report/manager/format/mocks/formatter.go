// Code generated by MockGen. DO NOT EDIT.
// Source: formatter.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/formatter.go -source formatter.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	csv "github.com/stackrox/rox/pkg/csv"
	gomock "go.uber.org/mock/gomock"
)

// MockCSVWriter is a mock of CSVWriter interface.
type MockCSVWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCSVWriterMockRecorder
	isgomock struct{}
}

// MockCSVWriterMockRecorder is the mock recorder for MockCSVWriter.
type MockCSVWriterMockRecorder struct {
	mock *MockCSVWriter
}

// NewMockCSVWriter creates a new mock instance.
func NewMockCSVWriter(ctrl *gomock.Controller) *MockCSVWriter {
	mock := &MockCSVWriter{ctrl: ctrl}
	mock.recorder = &MockCSVWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVWriter) EXPECT() *MockCSVWriterMockRecorder {
	return m.recorder
}

// AddValue mocks base method.
func (m *MockCSVWriter) AddValue(arg0 csv.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValue", arg0)
}

// AddValue indicates an expected call of AddValue.
func (mr *MockCSVWriterMockRecorder) AddValue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValue", reflect.TypeOf((*MockCSVWriter)(nil).AddValue), arg0)
}

// WriteCSV mocks base method.
func (m *MockCSVWriter) WriteCSV(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCSV", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCSV indicates an expected call of WriteCSV.
func (mr *MockCSVWriterMockRecorder) WriteCSV(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCSV", reflect.TypeOf((*MockCSVWriter)(nil).WriteCSV), arg0)
}

// MockZipWriter is a mock of ZipWriter interface.
type MockZipWriter struct {
	ctrl     *gomock.Controller
	recorder *MockZipWriterMockRecorder
	isgomock struct{}
}

// MockZipWriterMockRecorder is the mock recorder for MockZipWriter.
type MockZipWriterMockRecorder struct {
	mock *MockZipWriter
}

// NewMockZipWriter creates a new mock instance.
func NewMockZipWriter(ctrl *gomock.Controller) *MockZipWriter {
	mock := &MockZipWriter{ctrl: ctrl}
	mock.recorder = &MockZipWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZipWriter) EXPECT() *MockZipWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockZipWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockZipWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZipWriter)(nil).Close))
}

// Create mocks base method.
func (m *MockZipWriter) Create(arg0 string) (io.Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockZipWriterMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZipWriter)(nil).Create), arg0)
}
