// Code generated by MockGen. DO NOT EDIT.
// Source: email_formatter.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/email_formatter.go -source email_formatter.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailFormatter is a mock of EmailFormatter interface.
type MockEmailFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockEmailFormatterMockRecorder
	isgomock struct{}
}

// MockEmailFormatterMockRecorder is the mock recorder for MockEmailFormatter.
type MockEmailFormatterMockRecorder struct {
	mock *MockEmailFormatter
}

// NewMockEmailFormatter creates a new mock instance.
func NewMockEmailFormatter(ctrl *gomock.Controller) *MockEmailFormatter {
	mock := &MockEmailFormatter{ctrl: ctrl}
	mock.recorder = &MockEmailFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailFormatter) EXPECT() *MockEmailFormatterMockRecorder {
	return m.recorder
}

// FormatWithDetails mocks base method.
func (m *MockEmailFormatter) FormatWithDetails(arg0, arg1 string, arg2 any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatWithDetails indicates an expected call of FormatWithDetails.
func (mr *MockEmailFormatterMockRecorder) FormatWithDetails(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithDetails", reflect.TypeOf((*MockEmailFormatter)(nil).FormatWithDetails), arg0, arg1, arg2)
}
