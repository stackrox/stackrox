// Code generated by MockGen. DO NOT EDIT.
// Source: report_gen.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/report_gen.go -source report_gen.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	report "github.com/stackrox/rox/central/complianceoperator/v2/report"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockComplianceReportGenerator is a mock of ComplianceReportGenerator interface.
type MockComplianceReportGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceReportGeneratorMockRecorder
	isgomock struct{}
}

// MockComplianceReportGeneratorMockRecorder is the mock recorder for MockComplianceReportGenerator.
type MockComplianceReportGeneratorMockRecorder struct {
	mock *MockComplianceReportGenerator
}

// NewMockComplianceReportGenerator creates a new mock instance.
func NewMockComplianceReportGenerator(ctrl *gomock.Controller) *MockComplianceReportGenerator {
	mock := &MockComplianceReportGenerator{ctrl: ctrl}
	mock.recorder = &MockComplianceReportGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceReportGenerator) EXPECT() *MockComplianceReportGeneratorMockRecorder {
	return m.recorder
}

// ProcessReportRequest mocks base method.
func (m *MockComplianceReportGenerator) ProcessReportRequest(req *report.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReportRequest", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReportRequest indicates an expected call of ProcessReportRequest.
func (mr *MockComplianceReportGeneratorMockRecorder) ProcessReportRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReportRequest", reflect.TypeOf((*MockComplianceReportGenerator)(nil).ProcessReportRequest), req)
}

// Stop mocks base method.
func (m *MockComplianceReportGenerator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockComplianceReportGeneratorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockComplianceReportGenerator)(nil).Stop))
}

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
	isgomock struct{}
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// FormatCSVReport mocks base method.
func (m *MockFormatter) FormatCSVReport(arg0 map[string][]*report.ResultRow) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatCSVReport", arg0)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatCSVReport indicates an expected call of FormatCSVReport.
func (mr *MockFormatterMockRecorder) FormatCSVReport(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatCSVReport", reflect.TypeOf((*MockFormatter)(nil).FormatCSVReport), arg0)
}

// MockResultsAggregator is a mock of ResultsAggregator interface.
type MockResultsAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockResultsAggregatorMockRecorder
	isgomock struct{}
}

// MockResultsAggregatorMockRecorder is the mock recorder for MockResultsAggregator.
type MockResultsAggregatorMockRecorder struct {
	mock *MockResultsAggregator
}

// NewMockResultsAggregator creates a new mock instance.
func NewMockResultsAggregator(ctrl *gomock.Controller) *MockResultsAggregator {
	mock := &MockResultsAggregator{ctrl: ctrl}
	mock.recorder = &MockResultsAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultsAggregator) EXPECT() *MockResultsAggregatorMockRecorder {
	return m.recorder
}

// GetReportData mocks base method.
func (m *MockResultsAggregator) GetReportData(arg0 *report.Request) *report.Results {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportData", arg0)
	ret0, _ := ret[0].(*report.Results)
	return ret0
}

// GetReportData indicates an expected call of GetReportData.
func (mr *MockResultsAggregatorMockRecorder) GetReportData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportData", reflect.TypeOf((*MockResultsAggregator)(nil).GetReportData), arg0)
}

// MockReportSender is a mock of ReportSender interface.
type MockReportSender struct {
	ctrl     *gomock.Controller
	recorder *MockReportSenderMockRecorder
	isgomock struct{}
}

// MockReportSenderMockRecorder is the mock recorder for MockReportSender.
type MockReportSenderMockRecorder struct {
	mock *MockReportSender
}

// NewMockReportSender creates a new mock instance.
func NewMockReportSender(ctrl *gomock.Controller) *MockReportSender {
	mock := &MockReportSender{ctrl: ctrl}
	mock.recorder = &MockReportSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportSender) EXPECT() *MockReportSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockReportSender) SendEmail(arg0 context.Context, arg1 string, arg2 *bytes.Buffer, arg3 *report.Results, arg4 []*storage.NotifierConfiguration) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockReportSenderMockRecorder) SendEmail(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockReportSender)(nil).SendEmail), arg0, arg1, arg2, arg3, arg4)
}
