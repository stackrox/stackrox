// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteBenchmark mocks base method.
func (m *MockDataStore) DeleteBenchmark(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBenchmark", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBenchmark indicates an expected call of DeleteBenchmark.
func (mr *MockDataStoreMockRecorder) DeleteBenchmark(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBenchmark", reflect.TypeOf((*MockDataStore)(nil).DeleteBenchmark), ctx, id)
}

// GetBenchmark mocks base method.
func (m *MockDataStore) GetBenchmark(ctx context.Context, id string) (*storage.ComplianceOperatorBenchmarkV2, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBenchmark", ctx, id)
	ret0, _ := ret[0].(*storage.ComplianceOperatorBenchmarkV2)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBenchmark indicates an expected call of GetBenchmark.
func (mr *MockDataStoreMockRecorder) GetBenchmark(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBenchmark", reflect.TypeOf((*MockDataStore)(nil).GetBenchmark), ctx, id)
}

// GetBenchmarksByProfileName mocks base method.
func (m *MockDataStore) GetBenchmarksByProfileName(ctx context.Context, profileName string) ([]*storage.ComplianceOperatorBenchmarkV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBenchmarksByProfileName", ctx, profileName)
	ret0, _ := ret[0].([]*storage.ComplianceOperatorBenchmarkV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBenchmarksByProfileName indicates an expected call of GetBenchmarksByProfileName.
func (mr *MockDataStoreMockRecorder) GetBenchmarksByProfileName(ctx, profileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBenchmarksByProfileName", reflect.TypeOf((*MockDataStore)(nil).GetBenchmarksByProfileName), ctx, profileName)
}

// UpsertBenchmark mocks base method.
func (m *MockDataStore) UpsertBenchmark(ctx context.Context, result *storage.ComplianceOperatorBenchmarkV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBenchmark", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBenchmark indicates an expected call of UpsertBenchmark.
func (mr *MockDataStoreMockRecorder) UpsertBenchmark(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBenchmark", reflect.TypeOf((*MockDataStore)(nil).UpsertBenchmark), ctx, result)
}
