// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// DeleteScan mocks base method.
func (m *MockManager) DeleteScan(ctx context.Context, deleteScanRequest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScan", ctx, deleteScanRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScan indicates an expected call of DeleteScan.
func (mr *MockManagerMockRecorder) DeleteScan(ctx, deleteScanRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScan", reflect.TypeOf((*MockManager)(nil).DeleteScan), ctx, deleteScanRequest)
}

// HandleScanRequestResponse mocks base method.
func (m *MockManager) HandleScanRequestResponse(ctx context.Context, requestID, clusterID, responsePayload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScanRequestResponse", ctx, requestID, clusterID, responsePayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleScanRequestResponse indicates an expected call of HandleScanRequestResponse.
func (mr *MockManagerMockRecorder) HandleScanRequestResponse(ctx, requestID, clusterID, responsePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScanRequestResponse", reflect.TypeOf((*MockManager)(nil).HandleScanRequestResponse), ctx, requestID, clusterID, responsePayload)
}

// ProcessComplianceOperatorInfo mocks base method.
func (m *MockManager) ProcessComplianceOperatorInfo(ctx context.Context, complianceIntegration *storage.ComplianceIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessComplianceOperatorInfo", ctx, complianceIntegration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessComplianceOperatorInfo indicates an expected call of ProcessComplianceOperatorInfo.
func (mr *MockManagerMockRecorder) ProcessComplianceOperatorInfo(ctx, complianceIntegration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessComplianceOperatorInfo", reflect.TypeOf((*MockManager)(nil).ProcessComplianceOperatorInfo), ctx, complianceIntegration)
}

// ProcessRescanRequest mocks base method.
func (m *MockManager) ProcessRescanRequest(ctx context.Context, rescanRequest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRescanRequest", ctx, rescanRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRescanRequest indicates an expected call of ProcessRescanRequest.
func (mr *MockManagerMockRecorder) ProcessRescanRequest(ctx, rescanRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRescanRequest", reflect.TypeOf((*MockManager)(nil).ProcessRescanRequest), ctx, rescanRequest)
}

// ProcessScanRequest mocks base method.
func (m *MockManager) ProcessScanRequest(ctx context.Context, scanRequest *storage.ComplianceOperatorScanConfigurationV2, clusters []string) (*storage.ComplianceOperatorScanConfigurationV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScanRequest", ctx, scanRequest, clusters)
	ret0, _ := ret[0].(*storage.ComplianceOperatorScanConfigurationV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessScanRequest indicates an expected call of ProcessScanRequest.
func (mr *MockManagerMockRecorder) ProcessScanRequest(ctx, scanRequest, clusters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScanRequest", reflect.TypeOf((*MockManager)(nil).ProcessScanRequest), ctx, scanRequest, clusters)
}

// Sync mocks base method.
func (m *MockManager) Sync(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync", ctx)
}

// Sync indicates an expected call of Sync.
func (mr *MockManagerMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManager)(nil).Sync), ctx)
}
