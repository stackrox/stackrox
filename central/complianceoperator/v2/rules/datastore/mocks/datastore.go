// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteRule mocks base method.
func (m *MockDataStore) DeleteRule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockDataStoreMockRecorder) DeleteRule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockDataStore)(nil).DeleteRule), ctx, id)
}

// UpsertRule mocks base method.
func (m *MockDataStore) UpsertRule(ctx context.Context, result *storage.ComplianceOperatorRuleV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRule", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRule indicates an expected call of UpsertRule.
func (mr *MockDataStoreMockRecorder) UpsertRule(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRule", reflect.TypeOf((*MockDataStore)(nil).UpsertRule), ctx, result)
}

// UpsertRules mocks base method.
func (m *MockDataStore) UpsertRules(ctx context.Context, result []*storage.ComplianceOperatorRuleV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRules", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRules indicates an expected call of UpsertRules.
func (mr *MockDataStoreMockRecorder) UpsertRules(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRules", reflect.TypeOf((*MockDataStore)(nil).UpsertRules), ctx, result)
}
