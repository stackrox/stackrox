// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteRemediation mocks base method.
func (m *MockDataStore) DeleteRemediation(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemediation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemediation indicates an expected call of DeleteRemediation.
func (mr *MockDataStoreMockRecorder) DeleteRemediation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemediation", reflect.TypeOf((*MockDataStore)(nil).DeleteRemediation), ctx, id)
}

// DeleteRemediationsByCluster mocks base method.
func (m *MockDataStore) DeleteRemediationsByCluster(ctx context.Context, clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemediationsByCluster", ctx, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemediationsByCluster indicates an expected call of DeleteRemediationsByCluster.
func (mr *MockDataStoreMockRecorder) DeleteRemediationsByCluster(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemediationsByCluster", reflect.TypeOf((*MockDataStore)(nil).DeleteRemediationsByCluster), ctx, clusterID)
}

// GetRemediation mocks base method.
func (m *MockDataStore) GetRemediation(ctx context.Context, id string) (*storage.ComplianceOperatorRemediationV2, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemediation", ctx, id)
	ret0, _ := ret[0].(*storage.ComplianceOperatorRemediationV2)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRemediation indicates an expected call of GetRemediation.
func (mr *MockDataStoreMockRecorder) GetRemediation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemediation", reflect.TypeOf((*MockDataStore)(nil).GetRemediation), ctx, id)
}

// GetRemediationsByCluster mocks base method.
func (m *MockDataStore) GetRemediationsByCluster(ctx context.Context, clusterID string) ([]*storage.ComplianceOperatorRemediationV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemediationsByCluster", ctx, clusterID)
	ret0, _ := ret[0].([]*storage.ComplianceOperatorRemediationV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemediationsByCluster indicates an expected call of GetRemediationsByCluster.
func (mr *MockDataStoreMockRecorder) GetRemediationsByCluster(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemediationsByCluster", reflect.TypeOf((*MockDataStore)(nil).GetRemediationsByCluster), ctx, clusterID)
}

// SearchRemediations mocks base method.
func (m *MockDataStore) SearchRemediations(ctx context.Context, query *v1.Query) ([]*storage.ComplianceOperatorRemediationV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRemediations", ctx, query)
	ret0, _ := ret[0].([]*storage.ComplianceOperatorRemediationV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRemediations indicates an expected call of SearchRemediations.
func (mr *MockDataStoreMockRecorder) SearchRemediations(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRemediations", reflect.TypeOf((*MockDataStore)(nil).SearchRemediations), ctx, query)
}

// UpsertRemediation mocks base method.
func (m *MockDataStore) UpsertRemediation(ctx context.Context, result *storage.ComplianceOperatorRemediationV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRemediation", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRemediation indicates an expected call of UpsertRemediation.
func (mr *MockDataStoreMockRecorder) UpsertRemediation(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRemediation", reflect.TypeOf((*MockDataStore)(nil).UpsertRemediation), ctx, result)
}
