// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteProfileForCluster mocks base method.
func (m *MockDataStore) DeleteProfileForCluster(ctx context.Context, uid, clusterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileForCluster", ctx, uid, clusterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfileForCluster indicates an expected call of DeleteProfileForCluster.
func (mr *MockDataStoreMockRecorder) DeleteProfileForCluster(ctx, uid, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileForCluster", reflect.TypeOf((*MockDataStore)(nil).DeleteProfileForCluster), ctx, uid, clusterID)
}

// GetProfileEdgesByCluster mocks base method.
func (m *MockDataStore) GetProfileEdgesByCluster(ctx context.Context, clusterID string) ([]*storage.ComplianceOperatorProfileClusterEdge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileEdgesByCluster", ctx, clusterID)
	ret0, _ := ret[0].([]*storage.ComplianceOperatorProfileClusterEdge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileEdgesByCluster indicates an expected call of GetProfileEdgesByCluster.
func (mr *MockDataStoreMockRecorder) GetProfileEdgesByCluster(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileEdgesByCluster", reflect.TypeOf((*MockDataStore)(nil).GetProfileEdgesByCluster), ctx, clusterID)
}

// UpsertProfile mocks base method.
func (m *MockDataStore) UpsertProfile(ctx context.Context, result *storage.ComplianceOperatorProfileV2, clusterID, profileUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProfile", ctx, result, clusterID, profileUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertProfile indicates an expected call of UpsertProfile.
func (mr *MockDataStoreMockRecorder) UpsertProfile(ctx, result, clusterID, profileUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProfile", reflect.TypeOf((*MockDataStore)(nil).UpsertProfile), ctx, result, clusterID, profileUID)
}
