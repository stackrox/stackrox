package resolvers

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/set"
	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/proto"
)

func mapImagesToVulnerabilityCounter(images []*storage.Image) *VulnerabilityCounterResolver {
	var vulns []*storage.EmbeddedVulnerability
	seenVulns := set.NewStringSet()
	for _, image := range images {
		for _, component := range image.GetScan().GetComponents() {
			for _, vuln := range component.GetVulns() {
				if seenVulns.Contains(vuln.GetCve()) {
					continue
				}
				seenVulns.Add(vuln.GetCve())
				vulns = append(vulns, vuln)
			}
		}
	}
	return mapVulnsToVulnerabilityCounter(vulns)
}

func TestMapImagesToVulnerabilityCounterResolver(t *testing.T) {
	images := testImages()
	eisc := &storage.EmbeddedImageScanComponent{}
	eisc.SetName("comp1")
	eisc.SetVersion("0.9")
	eisc.SetVulns([]*storage.EmbeddedVulnerability{
		storage.EmbeddedVulnerability_builder{
			Cve:      "cve-2018-4",
			FixedBy:  proto.String("1.1"),
			Cvss:     10.0,
			Severity: storage.VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY,
		}.Build(),
	})
	images[0].GetScan().SetComponents(append(images[0].GetScan().GetComponents(), eisc))
	eisc2 := &storage.EmbeddedImageScanComponent{}
	eisc2.SetName("comp1")
	eisc2.SetVersion("0.9")
	eisc2.SetVulns([]*storage.EmbeddedVulnerability{
		storage.EmbeddedVulnerability_builder{
			Cve:      "cve-2018-6",
			FixedBy:  proto.String("1.1"),
			Cvss:     1.9,
			Severity: storage.VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY,
		}.Build(),
	})
	images[1].GetScan().SetComponents(append(images[1].GetScan().GetComponents(), eisc2))

	counterResolver := mapImagesToVulnerabilityCounter(images)
	assert.Equal(t, int32(7), counterResolver.all.total)
	assert.Equal(t, int32(3), counterResolver.all.fixable)
	assert.Equal(t, int32(2), counterResolver.low.total)
	assert.Equal(t, int32(1), counterResolver.low.fixable)
	assert.Equal(t, int32(1), counterResolver.moderate.total)
	assert.Equal(t, int32(0), counterResolver.moderate.fixable)
	assert.Equal(t, int32(2), counterResolver.important.total)
	assert.Equal(t, int32(0), counterResolver.important.fixable)
	assert.Equal(t, int32(2), counterResolver.critical.total)
	assert.Equal(t, int32(2), counterResolver.critical.fixable)
}
