// Code generated by MockGen. DO NOT EDIT.
// Source: azlogsclient.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/azlogsclient.go -source azlogsclient.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	azlogs "github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs"
	gomock "go.uber.org/mock/gomock"
)

// MockazureLogsClient is a mock of azureLogsClient interface.
type MockazureLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockazureLogsClientMockRecorder
}

// MockazureLogsClientMockRecorder is the mock recorder for MockazureLogsClient.
type MockazureLogsClientMockRecorder struct {
	mock *MockazureLogsClient
}

// NewMockazureLogsClient creates a new mock instance.
func NewMockazureLogsClient(ctrl *gomock.Controller) *MockazureLogsClient {
	mock := &MockazureLogsClient{ctrl: ctrl}
	mock.recorder = &MockazureLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureLogsClient) EXPECT() *MockazureLogsClientMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockazureLogsClient) Upload(ctx context.Context, ruleID, streamName string, logs []byte, options *azlogs.UploadOptions) (azlogs.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, ruleID, streamName, logs, options)
	ret0, _ := ret[0].(azlogs.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockazureLogsClientMockRecorder) Upload(ctx, ruleID, streamName, logs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockazureLogsClient)(nil).Upload), ctx, ruleID, streamName, logs, options)
}
