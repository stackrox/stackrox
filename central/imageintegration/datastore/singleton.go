package datastore

import (
	"context"

	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/imageintegration/search"
	"github.com/stackrox/rox/central/imageintegration/store"
	pgStore "github.com/stackrox/rox/central/imageintegration/store/postgres"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/env"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/sync"
	"github.com/stackrox/rox/pkg/utils"
)

var (
	once sync.Once

	dataStore DataStore
)

func initializeIntegrations(iiStore store.Store) {
	ctx := sac.WithGlobalAccessScopeChecker(context.Background(), sac.AllowAllAccessScopeChecker())
	iis, err := iiStore.GetAll(ctx)
	utils.CrashOnError(err)
	// If we are starting from scratch in online-mode, add the default image integrations.
	if !env.OfflineModeEnv.BooleanSetting() && len(iis) == 0 {
		// Add default integrations
		for _, ii := range store.DefaultImageIntegrations {
			utils.Should(iiStore.Upsert(ctx, ii))
		}
	}

	deleteAutogeneratedRegistries(ctx, iiStore, iis)
}

func deleteAutogeneratedRegistries(ctx context.Context, iiStore store.Store, iis []*storage.ImageIntegration) {
	autogenDisabled := env.AutogeneratedRegistriesDisabled.BooleanSetting()
	sourcedAutogenDisabled := !features.SourcedAutogeneratedIntegrations.Enabled()

	if !autogenDisabled && !sourcedAutogenDisabled {
		// Both autogenerated registry types are enabled, short-circuit.
		return
	}

	if len(iis) == 0 {
		// No integrations to process, short-circuit.
		return
	}

	log.Infof("[STARTUP] Starting deletion of autogenerated image integrations (autogen disabled [%t], 'sourced' autogen disabled [%t])", autogenDisabled, sourcedAutogenDisabled)

	var attempted, deleted int
	for _, ii := range iis {
		if !ii.GetAutogenerated() {
			continue
		}

		if autogenDisabled || (sourcedAutogenDisabled && ii.GetSource() != nil) {
			attempted++
			// Use Should so release versions do not panic.
			if err := utils.ShouldErr(iiStore.Delete(ctx, ii.GetId())); err == nil {
				deleted++
			}
		}
	}
	if attempted > 0 {
		log.Infof("Successfully deleted %d out of %d image integration(s)", deleted, attempted)
	} else {
		log.Info("No eligible autogenerated image integrations found for deletion")
	}

	log.Info("Completed deletion of image integrations")
}

func initialize() {
	// Create underlying store and datastore.
	storage := pgStore.New(globaldb.GetPostgres())

	initializeIntegrations(storage)
	searcher := search.New(storage, pgStore.NewIndexer(globaldb.GetPostgres()))
	dataStore = New(storage, searcher)
}

// Singleton provides the interface for non-service external interaction.
func Singleton() DataStore {
	once.Do(initialize)
	return dataStore
}
