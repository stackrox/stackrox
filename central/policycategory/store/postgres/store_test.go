// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type PolicyCategoriesStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestPolicyCategoriesStore(t *testing.T) {
	suite.Run(t, new(PolicyCategoriesStoreSuite))
}

func (s *PolicyCategoriesStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *PolicyCategoriesStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE policy_categories CASCADE")
	s.T().Log("policy_categories", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *PolicyCategoriesStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *PolicyCategoriesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	policyCategory := &storage.PolicyCategory{}
	s.NoError(testutils.FullInit(policyCategory, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundPolicyCategory, exists, err := store.Get(ctx, policyCategory.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundPolicyCategory)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, policyCategory))
	foundPolicyCategory, exists, err = store.Get(ctx, policyCategory.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(policyCategory, foundPolicyCategory)

	policyCategoryCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, policyCategoryCount)
	policyCategoryCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(policyCategoryCount)

	policyCategoryExists, err := store.Exists(ctx, policyCategory.GetId())
	s.NoError(err)
	s.True(policyCategoryExists)
	s.NoError(store.Upsert(ctx, policyCategory))
	s.ErrorIs(store.Upsert(withNoAccessCtx, policyCategory), sac.ErrResourceAccessDenied)

	foundPolicyCategory, exists, err = store.Get(ctx, policyCategory.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(policyCategory, foundPolicyCategory)

	s.NoError(store.Delete(ctx, policyCategory.GetId()))
	foundPolicyCategory, exists, err = store.Get(ctx, policyCategory.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundPolicyCategory)
	s.ErrorIs(store.Delete(withNoAccessCtx, policyCategory.GetId()), sac.ErrResourceAccessDenied)

	var policyCategorys []*storage.PolicyCategory
	var policyCategoryIDs []string
	for i := 0; i < 200; i++ {
		policyCategory := &storage.PolicyCategory{}
		s.NoError(testutils.FullInit(policyCategory, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		policyCategorys = append(policyCategorys, policyCategory)
		policyCategoryIDs = append(policyCategoryIDs, policyCategory.GetId())
	}

	s.NoError(store.UpsertMany(ctx, policyCategorys))
	allPolicyCategory, err := store.GetAll(ctx)
	s.NoError(err)
	s.ElementsMatch(policyCategorys, allPolicyCategory)

	policyCategoryCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, policyCategoryCount)

	s.NoError(store.DeleteMany(ctx, policyCategoryIDs))

	policyCategoryCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, policyCategoryCount)
}
