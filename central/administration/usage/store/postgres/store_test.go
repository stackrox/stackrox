// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type SecuredUnitsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestSecuredUnitsStore(t *testing.T) {
	suite.Run(t, new(SecuredUnitsStoreSuite))
}

func (s *SecuredUnitsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *SecuredUnitsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE secured_units CASCADE")
	s.T().Log("secured_units", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *SecuredUnitsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *SecuredUnitsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	securedUnits := &storage.SecuredUnits{}
	s.NoError(testutils.FullInit(securedUnits, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundSecuredUnits, exists, err := store.Get(ctx, securedUnits.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundSecuredUnits)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, securedUnits))
	foundSecuredUnits, exists, err = store.Get(ctx, securedUnits.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(securedUnits, foundSecuredUnits)

	securedUnitsCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, securedUnitsCount)
	securedUnitsCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(securedUnitsCount)

	securedUnitsExists, err := store.Exists(ctx, securedUnits.GetId())
	s.NoError(err)
	s.True(securedUnitsExists)
	s.NoError(store.Upsert(ctx, securedUnits))
	s.ErrorIs(store.Upsert(withNoAccessCtx, securedUnits), sac.ErrResourceAccessDenied)

	foundSecuredUnits, exists, err = store.Get(ctx, securedUnits.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(securedUnits, foundSecuredUnits)

	s.NoError(store.Delete(ctx, securedUnits.GetId()))
	foundSecuredUnits, exists, err = store.Get(ctx, securedUnits.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundSecuredUnits)
	s.ErrorIs(store.Delete(withNoAccessCtx, securedUnits.GetId()), sac.ErrResourceAccessDenied)

	var securedUnitss []*storage.SecuredUnits
	var securedUnitsIDs []string
	for i := 0; i < 200; i++ {
		securedUnits := &storage.SecuredUnits{}
		s.NoError(testutils.FullInit(securedUnits, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		securedUnitss = append(securedUnitss, securedUnits)
		securedUnitsIDs = append(securedUnitsIDs, securedUnits.GetId())
	}

	s.NoError(store.UpsertMany(ctx, securedUnitss))

	securedUnitsCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, securedUnitsCount)

	s.NoError(store.DeleteMany(ctx, securedUnitsIDs))

	securedUnitsCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, securedUnitsCount)
}
