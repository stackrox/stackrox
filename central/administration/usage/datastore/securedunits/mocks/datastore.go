// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDataStore) Add(ctx context.Context, metrics *storage.SecuredUnits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDataStoreMockRecorder) Add(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDataStore)(nil).Add), ctx, metrics)
}

// AggregateAndReset mocks base method.
func (m *MockDataStore) AggregateAndReset(ctx context.Context) (*storage.SecuredUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateAndReset", ctx)
	ret0, _ := ret[0].(*storage.SecuredUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateAndReset indicates an expected call of AggregateAndReset.
func (mr *MockDataStoreMockRecorder) AggregateAndReset(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateAndReset", reflect.TypeOf((*MockDataStore)(nil).AggregateAndReset), ctx)
}

// GetCurrentUsage mocks base method.
func (m *MockDataStore) GetCurrentUsage(ctx context.Context) (*storage.SecuredUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUsage", ctx)
	ret0, _ := ret[0].(*storage.SecuredUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUsage indicates an expected call of GetCurrentUsage.
func (mr *MockDataStoreMockRecorder) GetCurrentUsage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUsage", reflect.TypeOf((*MockDataStore)(nil).GetCurrentUsage), ctx)
}

// GetMaxNumCPUUnits mocks base method.
func (m *MockDataStore) GetMaxNumCPUUnits(ctx context.Context, from, to time.Time) (*storage.SecuredUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxNumCPUUnits", ctx, from, to)
	ret0, _ := ret[0].(*storage.SecuredUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxNumCPUUnits indicates an expected call of GetMaxNumCPUUnits.
func (mr *MockDataStoreMockRecorder) GetMaxNumCPUUnits(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxNumCPUUnits", reflect.TypeOf((*MockDataStore)(nil).GetMaxNumCPUUnits), ctx, from, to)
}

// GetMaxNumNodes mocks base method.
func (m *MockDataStore) GetMaxNumNodes(ctx context.Context, from, to time.Time) (*storage.SecuredUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxNumNodes", ctx, from, to)
	ret0, _ := ret[0].(*storage.SecuredUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxNumNodes indicates an expected call of GetMaxNumNodes.
func (mr *MockDataStoreMockRecorder) GetMaxNumNodes(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxNumNodes", reflect.TypeOf((*MockDataStore)(nil).GetMaxNumNodes), ctx, from, to)
}

// UpdateUsage mocks base method.
func (m *MockDataStore) UpdateUsage(ctx context.Context, clusterID string, metrics *storage.SecuredUnits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsage", ctx, clusterID, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsage indicates an expected call of UpdateUsage.
func (mr *MockDataStoreMockRecorder) UpdateUsage(ctx, clusterID, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsage", reflect.TypeOf((*MockDataStore)(nil).UpdateUsage), ctx, clusterID, metrics)
}

// Walk mocks base method.
func (m *MockDataStore) Walk(ctx context.Context, from, to time.Time, fn func(*storage.SecuredUnits) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, from, to, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockDataStoreMockRecorder) Walk(ctx, from, to, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockDataStore)(nil).Walk), ctx, from, to, fn)
}
