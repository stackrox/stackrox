// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type AdministrationEventsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestAdministrationEventsStore(t *testing.T) {
	suite.Run(t, new(AdministrationEventsStoreSuite))
}

func (s *AdministrationEventsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *AdministrationEventsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE administration_events CASCADE")
	s.T().Log("administration_events", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *AdministrationEventsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *AdministrationEventsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	administrationEvent := &storage.AdministrationEvent{}
	s.NoError(testutils.FullInit(administrationEvent, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundAdministrationEvent, exists, err := store.Get(ctx, administrationEvent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAdministrationEvent)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, administrationEvent))
	foundAdministrationEvent, exists, err = store.Get(ctx, administrationEvent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(administrationEvent, foundAdministrationEvent)

	administrationEventCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, administrationEventCount)
	administrationEventCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(administrationEventCount)

	administrationEventExists, err := store.Exists(ctx, administrationEvent.GetId())
	s.NoError(err)
	s.True(administrationEventExists)
	s.NoError(store.Upsert(ctx, administrationEvent))
	s.ErrorIs(store.Upsert(withNoAccessCtx, administrationEvent), sac.ErrResourceAccessDenied)

	foundAdministrationEvent, exists, err = store.Get(ctx, administrationEvent.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(administrationEvent, foundAdministrationEvent)

	s.NoError(store.Delete(ctx, administrationEvent.GetId()))
	foundAdministrationEvent, exists, err = store.Get(ctx, administrationEvent.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAdministrationEvent)
	s.ErrorIs(store.Delete(withNoAccessCtx, administrationEvent.GetId()), sac.ErrResourceAccessDenied)

	var administrationEvents []*storage.AdministrationEvent
	var administrationEventIDs []string
	for i := 0; i < 200; i++ {
		administrationEvent := &storage.AdministrationEvent{}
		s.NoError(testutils.FullInit(administrationEvent, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		administrationEvents = append(administrationEvents, administrationEvent)
		administrationEventIDs = append(administrationEventIDs, administrationEvent.GetId())
	}

	s.NoError(store.UpsertMany(ctx, administrationEvents))

	administrationEventCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, administrationEventCount)

	s.NoError(store.DeleteMany(ctx, administrationEventIDs))

	administrationEventCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, administrationEventCount)
}
