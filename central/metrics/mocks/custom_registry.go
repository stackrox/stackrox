// Code generated by MockGen. DO NOT EDIT.
// Source: custom_registry.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/custom_registry.go -source custom_registry.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomRegistry is a mock of CustomRegistry interface.
type MockCustomRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockCustomRegistryMockRecorder
	isgomock struct{}
}

// MockCustomRegistryMockRecorder is the mock recorder for MockCustomRegistry.
type MockCustomRegistryMockRecorder struct {
	mock *MockCustomRegistry
}

// NewMockCustomRegistry creates a new mock instance.
func NewMockCustomRegistry(ctrl *gomock.Controller) *MockCustomRegistry {
	mock := &MockCustomRegistry{ctrl: ctrl}
	mock.recorder = &MockCustomRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomRegistry) EXPECT() *MockCustomRegistryMockRecorder {
	return m.recorder
}

// RegisterMetric mocks base method.
func (m *MockCustomRegistry) RegisterMetric(metricName, category string, period time.Duration, labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMetric", metricName, category, period, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMetric indicates an expected call of RegisterMetric.
func (mr *MockCustomRegistryMockRecorder) RegisterMetric(metricName, category, period, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMetric", reflect.TypeOf((*MockCustomRegistry)(nil).RegisterMetric), metricName, category, period, labels)
}

// SetTotal mocks base method.
func (m *MockCustomRegistry) SetTotal(metricName string, labels prometheus.Labels, total int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotal", metricName, labels, total)
}

// SetTotal indicates an expected call of SetTotal.
func (mr *MockCustomRegistryMockRecorder) SetTotal(metricName, labels, total any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotal", reflect.TypeOf((*MockCustomRegistry)(nil).SetTotal), metricName, labels, total)
}

// UnregisterMetric mocks base method.
func (m *MockCustomRegistry) UnregisterMetric(metricName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterMetric", metricName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnregisterMetric indicates an expected call of UnregisterMetric.
func (mr *MockCustomRegistryMockRecorder) UnregisterMetric(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterMetric", reflect.TypeOf((*MockCustomRegistry)(nil).UnregisterMetric), metricName)
}
