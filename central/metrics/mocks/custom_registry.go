// Code generated by MockGen. DO NOT EDIT.
// Source: custom_registry.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/custom_registry.go -source custom_registry.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"
	time "time"

	prometheus "github.com/prometheus/client_golang/prometheus"
	io_prometheus_client "github.com/prometheus/client_model/go"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomRegistry is a mock of CustomRegistry interface.
type MockCustomRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockCustomRegistryMockRecorder
	isgomock struct{}
}

// MockCustomRegistryMockRecorder is the mock recorder for MockCustomRegistry.
type MockCustomRegistryMockRecorder struct {
	mock *MockCustomRegistry
}

// NewMockCustomRegistry creates a new mock instance.
func NewMockCustomRegistry(ctrl *gomock.Controller) *MockCustomRegistry {
	mock := &MockCustomRegistry{ctrl: ctrl}
	mock.recorder = &MockCustomRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomRegistry) EXPECT() *MockCustomRegistryMockRecorder {
	return m.recorder
}

// Gather mocks base method.
func (m *MockCustomRegistry) Gather() ([]*io_prometheus_client.MetricFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gather")
	ret0, _ := ret[0].([]*io_prometheus_client.MetricFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gather indicates an expected call of Gather.
func (mr *MockCustomRegistryMockRecorder) Gather() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gather", reflect.TypeOf((*MockCustomRegistry)(nil).Gather))
}

// Lock mocks base method.
func (m *MockCustomRegistry) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockCustomRegistryMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockCustomRegistry)(nil).Lock))
}

// RegisterMetric mocks base method.
func (m *MockCustomRegistry) RegisterMetric(metricName, category string, period time.Duration, labels []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMetric", metricName, category, period, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMetric indicates an expected call of RegisterMetric.
func (mr *MockCustomRegistryMockRecorder) RegisterMetric(metricName, category, period, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMetric", reflect.TypeOf((*MockCustomRegistry)(nil).RegisterMetric), metricName, category, period, labels)
}

// Reset mocks base method.
func (m *MockCustomRegistry) Reset(metricName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", metricName)
}

// Reset indicates an expected call of Reset.
func (mr *MockCustomRegistryMockRecorder) Reset(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCustomRegistry)(nil).Reset), metricName)
}

// ServeHTTP mocks base method.
func (m *MockCustomRegistry) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockCustomRegistryMockRecorder) ServeHTTP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockCustomRegistry)(nil).ServeHTTP), arg0, arg1)
}

// SetTotal mocks base method.
func (m *MockCustomRegistry) SetTotal(metricName string, labels prometheus.Labels, total int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotal", metricName, labels, total)
}

// SetTotal indicates an expected call of SetTotal.
func (mr *MockCustomRegistryMockRecorder) SetTotal(metricName, labels, total any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotal", reflect.TypeOf((*MockCustomRegistry)(nil).SetTotal), metricName, labels, total)
}

// Unlock mocks base method.
func (m *MockCustomRegistry) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockCustomRegistryMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockCustomRegistry)(nil).Unlock))
}

// UnregisterMetric mocks base method.
func (m *MockCustomRegistry) UnregisterMetric(metricName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterMetric", metricName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnregisterMetric indicates an expected call of UnregisterMetric.
func (mr *MockCustomRegistryMockRecorder) UnregisterMetric(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterMetric", reflect.TypeOf((*MockCustomRegistry)(nil).UnregisterMetric), metricName)
}
