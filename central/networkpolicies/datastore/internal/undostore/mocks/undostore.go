// Code generated by MockGen. DO NOT EDIT.
// Source: undostore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/undostore.go -source undostore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockUndoStore is a mock of UndoStore interface.
type MockUndoStore struct {
	ctrl     *gomock.Controller
	recorder *MockUndoStoreMockRecorder
}

// MockUndoStoreMockRecorder is the mock recorder for MockUndoStore.
type MockUndoStoreMockRecorder struct {
	mock *MockUndoStore
}

// NewMockUndoStore creates a new mock instance.
func NewMockUndoStore(ctrl *gomock.Controller) *MockUndoStore {
	mock := &MockUndoStore{ctrl: ctrl}
	mock.recorder = &MockUndoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUndoStore) EXPECT() *MockUndoStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUndoStore) Get(ctx context.Context, clusterID string) (*storage.NetworkPolicyApplicationUndoRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, clusterID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUndoStoreMockRecorder) Get(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUndoStore)(nil).Get), ctx, clusterID)
}

// Upsert mocks base method.
func (m *MockUndoStore) Upsert(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUndoStoreMockRecorder) Upsert(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUndoStore)(nil).Upsert), ctx, undoRecord)
}
