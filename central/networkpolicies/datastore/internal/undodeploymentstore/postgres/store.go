// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/metrics"
	pkgSchema "github.com/stackrox/rox/central/postgres/schema"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/search/postgres"
	"github.com/stackrox/rox/pkg/sync"
)

const (
	baseTable = "networkpoliciesundodeployments"

	existsStmt = "SELECT EXISTS(SELECT 1 FROM networkpoliciesundodeployments WHERE DeploymentId = $1 AND UndoRecord_ClusterId = $2)"
	getStmt    = "SELECT serialized FROM networkpoliciesundodeployments WHERE DeploymentId = $1 AND UndoRecord_ClusterId = $2"
	deleteStmt = "DELETE FROM networkpoliciesundodeployments WHERE DeploymentId = $1 AND UndoRecord_ClusterId = $2"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	log    = logging.LoggerForModule()
	schema = pkgSchema.NetworkpoliciesundodeploymentsSchema
)

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, deploymentId string, undoRecordClusterId string) (bool, error)
	Get(ctx context.Context, deploymentId string, undoRecordClusterId string) (*storage.NetworkPolicyApplicationUndoDeploymentRecord, bool, error)
	Upsert(ctx context.Context, obj *storage.NetworkPolicyApplicationUndoDeploymentRecord) error
	UpsertMany(ctx context.Context, objs []*storage.NetworkPolicyApplicationUndoDeploymentRecord) error
	Delete(ctx context.Context, deploymentId string, undoRecordClusterId string) error

	Walk(ctx context.Context, fn func(obj *storage.NetworkPolicyApplicationUndoDeploymentRecord) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db    *pgxpool.Pool
	mutex sync.Mutex
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	pgutils.CreateTable(ctx, db, pkgSchema.CreateTableNetworkpoliciesundodeploymentsStmt)

	return &storeImpl{
		db: db,
	}
}

func insertIntoNetworkpoliciesundodeployments(ctx context.Context, tx pgx.Tx, obj *storage.NetworkPolicyApplicationUndoDeploymentRecord) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetDeploymentId(),
		obj.GetUndoRecord().GetClusterId(),
		serialized,
	}

	finalStr := "INSERT INTO networkpoliciesundodeployments (DeploymentId, UndoRecord_ClusterId, serialized) VALUES($1, $2, $3) ON CONFLICT(DeploymentId, UndoRecord_ClusterId) DO UPDATE SET DeploymentId = EXCLUDED.DeploymentId, UndoRecord_ClusterId = EXCLUDED.UndoRecord_ClusterId, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyFromNetworkpoliciesundodeployments(ctx context.Context, tx pgx.Tx, objs ...*storage.NetworkPolicyApplicationUndoDeploymentRecord) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"deploymentid",

		"undorecord_clusterid",

		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{

			obj.GetDeploymentId(),

			obj.GetUndoRecord().GetClusterId(),

			serialized,
		})

		if err := s.Delete(ctx, obj.GetDeploymentId(), obj.GetUndoRecord().GetClusterId()); err != nil {
			return err
		}

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"networkpoliciesundodeployments"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	conn, release, err := s.acquireConn(ctx, ops.Get, "NetworkPolicyApplicationUndoDeploymentRecord")
	if err != nil {
		return err
	}
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyFromNetworkpoliciesundodeployments(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	conn, release, err := s.acquireConn(ctx, ops.Get, "NetworkPolicyApplicationUndoDeploymentRecord")
	if err != nil {
		return err
	}
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoNetworkpoliciesundodeployments(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "NetworkPolicyApplicationUndoDeploymentRecord")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "NetworkPolicyApplicationUndoDeploymentRecord")

	// Lock since copyFrom requires a delete first before being executed.  If multiple processes are updating
	// same subset of rows, both deletes could occur before the copyFrom resulting in unique constraint
	// violations
	s.mutex.Lock()
	defer s.mutex.Unlock()

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "NetworkPolicyApplicationUndoDeploymentRecord")

	var sacQueryFilter *v1.Query

	return postgres.RunCountRequestForSchema(schema, sacQueryFilter, s.db)
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, deploymentId string, undoRecordClusterId string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "NetworkPolicyApplicationUndoDeploymentRecord")

	row := s.db.QueryRow(ctx, existsStmt, deploymentId, undoRecordClusterId)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, deploymentId string, undoRecordClusterId string) (*storage.NetworkPolicyApplicationUndoDeploymentRecord, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "NetworkPolicyApplicationUndoDeploymentRecord")

	conn, release, err := s.acquireConn(ctx, ops.Get, "NetworkPolicyApplicationUndoDeploymentRecord")
	if err != nil {
		return nil, false, err
	}
	defer release()

	row := conn.QueryRow(ctx, getStmt, deploymentId, undoRecordClusterId)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.NetworkPolicyApplicationUndoDeploymentRecord
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func(), error) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		return nil, nil, err
	}
	return conn, conn.Release, nil
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, deploymentId string, undoRecordClusterId string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "NetworkPolicyApplicationUndoDeploymentRecord")

	conn, release, err := s.acquireConn(ctx, ops.Remove, "NetworkPolicyApplicationUndoDeploymentRecord")
	if err != nil {
		return err
	}
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, deploymentId, undoRecordClusterId); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.NetworkPolicyApplicationUndoDeploymentRecord) error) error {
	var sacQueryFilter *v1.Query
	rows, err := postgres.RunGetManyQueryForSchema(ctx, schema, sacQueryFilter, s.db)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	for _, data := range rows {
		var msg storage.NetworkPolicyApplicationUndoDeploymentRecord
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableNetworkpoliciesundodeployments(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS networkpoliciesundodeployments CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableNetworkpoliciesundodeployments(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
