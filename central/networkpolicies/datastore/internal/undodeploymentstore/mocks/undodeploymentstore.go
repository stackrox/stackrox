// Code generated by MockGen. DO NOT EDIT.
// Source: undodeploymentstore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/undodeploymentstore.go -source undodeploymentstore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockUndoDeploymentStore is a mock of UndoDeploymentStore interface.
type MockUndoDeploymentStore struct {
	ctrl     *gomock.Controller
	recorder *MockUndoDeploymentStoreMockRecorder
}

// MockUndoDeploymentStoreMockRecorder is the mock recorder for MockUndoDeploymentStore.
type MockUndoDeploymentStoreMockRecorder struct {
	mock *MockUndoDeploymentStore
}

// NewMockUndoDeploymentStore creates a new mock instance.
func NewMockUndoDeploymentStore(ctrl *gomock.Controller) *MockUndoDeploymentStore {
	mock := &MockUndoDeploymentStore{ctrl: ctrl}
	mock.recorder = &MockUndoDeploymentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUndoDeploymentStore) EXPECT() *MockUndoDeploymentStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUndoDeploymentStore) Get(ctx context.Context, deploymentID string) (*storage.NetworkPolicyApplicationUndoDeploymentRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, deploymentID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoDeploymentRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUndoDeploymentStoreMockRecorder) Get(ctx, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUndoDeploymentStore)(nil).Get), ctx, deploymentID)
}

// Upsert mocks base method.
func (m *MockUndoDeploymentStore) Upsert(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUndoDeploymentStoreMockRecorder) Upsert(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUndoDeploymentStore)(nil).Upsert), ctx, undoRecord)
}
