// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockUndoDataStore is a mock of UndoDataStore interface.
type MockUndoDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockUndoDataStoreMockRecorder
}

// MockUndoDataStoreMockRecorder is the mock recorder for MockUndoDataStore.
type MockUndoDataStoreMockRecorder struct {
	mock *MockUndoDataStore
}

// NewMockUndoDataStore creates a new mock instance.
func NewMockUndoDataStore(ctrl *gomock.Controller) *MockUndoDataStore {
	mock := &MockUndoDataStore{ctrl: ctrl}
	mock.recorder = &MockUndoDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUndoDataStore) EXPECT() *MockUndoDataStoreMockRecorder {
	return m.recorder
}

// GetUndoRecord mocks base method.
func (m *MockUndoDataStore) GetUndoRecord(ctx context.Context, clusterID string) (*storage.NetworkPolicyApplicationUndoRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUndoRecord", ctx, clusterID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUndoRecord indicates an expected call of GetUndoRecord.
func (mr *MockUndoDataStoreMockRecorder) GetUndoRecord(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoRecord", reflect.TypeOf((*MockUndoDataStore)(nil).GetUndoRecord), ctx, clusterID)
}

// UpsertUndoRecord mocks base method.
func (m *MockUndoDataStore) UpsertUndoRecord(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUndoRecord", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUndoRecord indicates an expected call of UpsertUndoRecord.
func (mr *MockUndoDataStoreMockRecorder) UpsertUndoRecord(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUndoRecord", reflect.TypeOf((*MockUndoDataStore)(nil).UpsertUndoRecord), ctx, undoRecord)
}

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountMatchingNetworkPolicies mocks base method.
func (m *MockDataStore) CountMatchingNetworkPolicies(ctx context.Context, clusterID, namespace string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMatchingNetworkPolicies", ctx, clusterID, namespace)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMatchingNetworkPolicies indicates an expected call of CountMatchingNetworkPolicies.
func (mr *MockDataStoreMockRecorder) CountMatchingNetworkPolicies(ctx, clusterID, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMatchingNetworkPolicies", reflect.TypeOf((*MockDataStore)(nil).CountMatchingNetworkPolicies), ctx, clusterID, namespace)
}

// GetNetworkPolicies mocks base method.
func (m *MockDataStore) GetNetworkPolicies(ctx context.Context, clusterID, namespace string) ([]*storage.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicies", ctx, clusterID, namespace)
	ret0, _ := ret[0].([]*storage.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicies indicates an expected call of GetNetworkPolicies.
func (mr *MockDataStoreMockRecorder) GetNetworkPolicies(ctx, clusterID, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicies", reflect.TypeOf((*MockDataStore)(nil).GetNetworkPolicies), ctx, clusterID, namespace)
}

// GetNetworkPolicy mocks base method.
func (m *MockDataStore) GetNetworkPolicy(ctx context.Context, id string) (*storage.NetworkPolicy, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicy", ctx, id)
	ret0, _ := ret[0].(*storage.NetworkPolicy)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkPolicy indicates an expected call of GetNetworkPolicy.
func (mr *MockDataStoreMockRecorder) GetNetworkPolicy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).GetNetworkPolicy), ctx, id)
}

// GetUndoDeploymentRecord mocks base method.
func (m *MockDataStore) GetUndoDeploymentRecord(ctx context.Context, deploymentID string) (*storage.NetworkPolicyApplicationUndoDeploymentRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUndoDeploymentRecord", ctx, deploymentID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoDeploymentRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUndoDeploymentRecord indicates an expected call of GetUndoDeploymentRecord.
func (mr *MockDataStoreMockRecorder) GetUndoDeploymentRecord(ctx, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoDeploymentRecord", reflect.TypeOf((*MockDataStore)(nil).GetUndoDeploymentRecord), ctx, deploymentID)
}

// GetUndoRecord mocks base method.
func (m *MockDataStore) GetUndoRecord(ctx context.Context, clusterID string) (*storage.NetworkPolicyApplicationUndoRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUndoRecord", ctx, clusterID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUndoRecord indicates an expected call of GetUndoRecord.
func (mr *MockDataStoreMockRecorder) GetUndoRecord(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoRecord", reflect.TypeOf((*MockDataStore)(nil).GetUndoRecord), ctx, clusterID)
}

// RemoveNetworkPolicy mocks base method.
func (m *MockDataStore) RemoveNetworkPolicy(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNetworkPolicy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNetworkPolicy indicates an expected call of RemoveNetworkPolicy.
func (mr *MockDataStoreMockRecorder) RemoveNetworkPolicy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).RemoveNetworkPolicy), ctx, id)
}

// UpsertNetworkPolicy mocks base method.
func (m *MockDataStore) UpsertNetworkPolicy(ctx context.Context, np *storage.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNetworkPolicy", ctx, np)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNetworkPolicy indicates an expected call of UpsertNetworkPolicy.
func (mr *MockDataStoreMockRecorder) UpsertNetworkPolicy(ctx, np any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNetworkPolicy", reflect.TypeOf((*MockDataStore)(nil).UpsertNetworkPolicy), ctx, np)
}

// UpsertUndoDeploymentRecord mocks base method.
func (m *MockDataStore) UpsertUndoDeploymentRecord(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUndoDeploymentRecord", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUndoDeploymentRecord indicates an expected call of UpsertUndoDeploymentRecord.
func (mr *MockDataStoreMockRecorder) UpsertUndoDeploymentRecord(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUndoDeploymentRecord", reflect.TypeOf((*MockDataStore)(nil).UpsertUndoDeploymentRecord), ctx, undoRecord)
}

// UpsertUndoRecord mocks base method.
func (m *MockDataStore) UpsertUndoRecord(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUndoRecord", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUndoRecord indicates an expected call of UpsertUndoRecord.
func (mr *MockDataStoreMockRecorder) UpsertUndoRecord(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUndoRecord", reflect.TypeOf((*MockDataStore)(nil).UpsertUndoRecord), ctx, undoRecord)
}

// MockUndoDeploymentDataStore is a mock of UndoDeploymentDataStore interface.
type MockUndoDeploymentDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockUndoDeploymentDataStoreMockRecorder
}

// MockUndoDeploymentDataStoreMockRecorder is the mock recorder for MockUndoDeploymentDataStore.
type MockUndoDeploymentDataStoreMockRecorder struct {
	mock *MockUndoDeploymentDataStore
}

// NewMockUndoDeploymentDataStore creates a new mock instance.
func NewMockUndoDeploymentDataStore(ctrl *gomock.Controller) *MockUndoDeploymentDataStore {
	mock := &MockUndoDeploymentDataStore{ctrl: ctrl}
	mock.recorder = &MockUndoDeploymentDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUndoDeploymentDataStore) EXPECT() *MockUndoDeploymentDataStoreMockRecorder {
	return m.recorder
}

// GetUndoDeploymentRecord mocks base method.
func (m *MockUndoDeploymentDataStore) GetUndoDeploymentRecord(ctx context.Context, deploymentID string) (*storage.NetworkPolicyApplicationUndoDeploymentRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUndoDeploymentRecord", ctx, deploymentID)
	ret0, _ := ret[0].(*storage.NetworkPolicyApplicationUndoDeploymentRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUndoDeploymentRecord indicates an expected call of GetUndoDeploymentRecord.
func (mr *MockUndoDeploymentDataStoreMockRecorder) GetUndoDeploymentRecord(ctx, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUndoDeploymentRecord", reflect.TypeOf((*MockUndoDeploymentDataStore)(nil).GetUndoDeploymentRecord), ctx, deploymentID)
}

// UpsertUndoDeploymentRecord mocks base method.
func (m *MockUndoDeploymentDataStore) UpsertUndoDeploymentRecord(ctx context.Context, undoRecord *storage.NetworkPolicyApplicationUndoDeploymentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUndoDeploymentRecord", ctx, undoRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUndoDeploymentRecord indicates an expected call of UpsertUndoDeploymentRecord.
func (mr *MockUndoDeploymentDataStoreMockRecorder) UpsertUndoDeploymentRecord(ctx, undoRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUndoDeploymentRecord", reflect.TypeOf((*MockUndoDeploymentDataStore)(nil).UpsertUndoDeploymentRecord), ctx, undoRecord)
}
