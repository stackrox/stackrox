// Code generated by MockGen. DO NOT EDIT.
// Source: directory.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/directory.go -source directory.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDirectoryGenerator is a mock of DirectoryGenerator interface.
type MockDirectoryGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryGeneratorMockRecorder
}

// MockDirectoryGeneratorMockRecorder is the mock recorder for MockDirectoryGenerator.
type MockDirectoryGeneratorMockRecorder struct {
	mock *MockDirectoryGenerator
}

// NewMockDirectoryGenerator creates a new mock instance.
func NewMockDirectoryGenerator(ctrl *gomock.Controller) *MockDirectoryGenerator {
	mock := &MockDirectoryGenerator{ctrl: ctrl}
	mock.recorder = &MockDirectoryGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryGenerator) EXPECT() *MockDirectoryGeneratorMockRecorder {
	return m.recorder
}

// WriteDirectory mocks base method.
func (m *MockDirectoryGenerator) WriteDirectory(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDirectory", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteDirectory indicates an expected call of WriteDirectory.
func (mr *MockDirectoryGeneratorMockRecorder) WriteDirectory(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDirectory", reflect.TypeOf((*MockDirectoryGenerator)(nil).WriteDirectory), ctx)
}
