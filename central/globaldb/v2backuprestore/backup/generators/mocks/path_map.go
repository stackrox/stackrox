// Code generated by MockGen. DO NOT EDIT.
// Source: path_map.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/path_map.go -source path_map.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPathMapGenerator is a mock of PathMapGenerator interface.
type MockPathMapGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPathMapGeneratorMockRecorder
}

// MockPathMapGeneratorMockRecorder is the mock recorder for MockPathMapGenerator.
type MockPathMapGeneratorMockRecorder struct {
	mock *MockPathMapGenerator
}

// NewMockPathMapGenerator creates a new mock instance.
func NewMockPathMapGenerator(ctrl *gomock.Controller) *MockPathMapGenerator {
	mock := &MockPathMapGenerator{ctrl: ctrl}
	mock.recorder = &MockPathMapGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMapGenerator) EXPECT() *MockPathMapGeneratorMockRecorder {
	return m.recorder
}

// GeneratePathMap mocks base method.
func (m *MockPathMapGenerator) GeneratePathMap(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePathMap", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePathMap indicates an expected call of GeneratePathMap.
func (mr *MockPathMapGeneratorMockRecorder) GeneratePathMap(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePathMap", reflect.TypeOf((*MockPathMapGenerator)(nil).GeneratePathMap), ctx)
}
