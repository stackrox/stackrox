// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type DeclarativeConfigHealthsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestDeclarativeConfigHealthsStore(t *testing.T) {
	suite.Run(t, new(DeclarativeConfigHealthsStoreSuite))
}

func (s *DeclarativeConfigHealthsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *DeclarativeConfigHealthsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE declarative_config_healths CASCADE")
	s.T().Log("declarative_config_healths", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *DeclarativeConfigHealthsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *DeclarativeConfigHealthsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	declarativeConfigHealth := &storage.DeclarativeConfigHealth{}
	s.NoError(testutils.FullInit(declarativeConfigHealth, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundDeclarativeConfigHealth, exists, err := store.Get(ctx, declarativeConfigHealth.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundDeclarativeConfigHealth)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, declarativeConfigHealth))
	foundDeclarativeConfigHealth, exists, err = store.Get(ctx, declarativeConfigHealth.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(declarativeConfigHealth, foundDeclarativeConfigHealth)

	declarativeConfigHealthCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, declarativeConfigHealthCount)
	declarativeConfigHealthCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(declarativeConfigHealthCount)

	declarativeConfigHealthExists, err := store.Exists(ctx, declarativeConfigHealth.GetId())
	s.NoError(err)
	s.True(declarativeConfigHealthExists)
	s.NoError(store.Upsert(ctx, declarativeConfigHealth))
	s.ErrorIs(store.Upsert(withNoAccessCtx, declarativeConfigHealth), sac.ErrResourceAccessDenied)

	foundDeclarativeConfigHealth, exists, err = store.Get(ctx, declarativeConfigHealth.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(declarativeConfigHealth, foundDeclarativeConfigHealth)

	s.NoError(store.Delete(ctx, declarativeConfigHealth.GetId()))
	foundDeclarativeConfigHealth, exists, err = store.Get(ctx, declarativeConfigHealth.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundDeclarativeConfigHealth)
	s.ErrorIs(store.Delete(withNoAccessCtx, declarativeConfigHealth.GetId()), sac.ErrResourceAccessDenied)

	var declarativeConfigHealths []*storage.DeclarativeConfigHealth
	var declarativeConfigHealthIDs []string
	for i := 0; i < 200; i++ {
		declarativeConfigHealth := &storage.DeclarativeConfigHealth{}
		s.NoError(testutils.FullInit(declarativeConfigHealth, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		declarativeConfigHealths = append(declarativeConfigHealths, declarativeConfigHealth)
		declarativeConfigHealthIDs = append(declarativeConfigHealthIDs, declarativeConfigHealth.GetId())
	}

	s.NoError(store.UpsertMany(ctx, declarativeConfigHealths))

	declarativeConfigHealthCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, declarativeConfigHealthCount)

	s.NoError(store.DeleteMany(ctx, declarativeConfigHealthIDs))

	declarativeConfigHealthCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, declarativeConfigHealthCount)
}
