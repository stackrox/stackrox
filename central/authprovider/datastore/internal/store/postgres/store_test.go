// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type AuthProvidersStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestAuthProvidersStore(t *testing.T) {
	suite.Run(t, new(AuthProvidersStoreSuite))
}

func (s *AuthProvidersStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *AuthProvidersStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE auth_providers CASCADE")
	s.T().Log("auth_providers", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *AuthProvidersStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *AuthProvidersStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	authProvider := &storage.AuthProvider{}
	s.NoError(testutils.FullInit(authProvider, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundAuthProvider, exists, err := store.Get(ctx, authProvider.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAuthProvider)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, authProvider))
	foundAuthProvider, exists, err = store.Get(ctx, authProvider.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(authProvider, foundAuthProvider)

	authProviderCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, authProviderCount)
	authProviderCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(authProviderCount)

	authProviderExists, err := store.Exists(ctx, authProvider.GetId())
	s.NoError(err)
	s.True(authProviderExists)
	s.NoError(store.Upsert(ctx, authProvider))
	s.ErrorIs(store.Upsert(withNoAccessCtx, authProvider), sac.ErrResourceAccessDenied)

	foundAuthProvider, exists, err = store.Get(ctx, authProvider.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(authProvider, foundAuthProvider)

	s.NoError(store.Delete(ctx, authProvider.GetId()))
	foundAuthProvider, exists, err = store.Get(ctx, authProvider.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAuthProvider)
	s.ErrorIs(store.Delete(withNoAccessCtx, authProvider.GetId()), sac.ErrResourceAccessDenied)

	var authProviders []*storage.AuthProvider
	var authProviderIDs []string
	for i := 0; i < 200; i++ {
		authProvider := &storage.AuthProvider{}
		s.NoError(testutils.FullInit(authProvider, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		authProviders = append(authProviders, authProvider)
		authProviderIDs = append(authProviderIDs, authProvider.GetId())
	}

	s.NoError(store.UpsertMany(ctx, authProviders))
	allAuthProvider, err := store.GetAll(ctx)
	s.NoError(err)
	s.ElementsMatch(authProviders, allAuthProvider)

	authProviderCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, authProviderCount)

	s.NoError(store.DeleteMany(ctx, authProviderIDs))

	authProviderCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, authProviderCount)
}
