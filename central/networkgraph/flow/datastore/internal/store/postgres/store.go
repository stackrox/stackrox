// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"strings"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
)

const (
	countStmt  = "SELECT COUNT(*) FROM networkflow"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM networkflow WHERE Props_SrcEntity_Id = $1 AND Props_DstEntity_Id = $2 AND Props_DstPort = $3)"

	getStmt    = "SELECT serialized FROM networkflow WHERE Props_SrcEntity_Id = $1 AND Props_DstEntity_Id = $2 AND Props_DstPort = $3"
	deleteStmt = "DELETE FROM networkflow WHERE Props_SrcEntity_Id = $1 AND Props_DstEntity_Id = $2 AND Props_DstPort = $3"
	walkStmt   = "SELECT serialized FROM networkflow"
)

var (
	log = logging.LoggerForModule()

	table = "networkflow"

	// We begin to process in batches after this number of records
	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 1000
)

func init() {
	globaldb.RegisterTable(table, "NetworkFlow")
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) (bool, error)
	Get(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) (*storage.NetworkFlow, bool, error)
	Upsert(ctx context.Context, obj *storage.NetworkFlow) error
	UpsertMany(ctx context.Context, objs []*storage.NetworkFlow) error
	Delete(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) error

	Walk(ctx context.Context, fn func(obj *storage.NetworkFlow) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableNetworkflow(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists networkflow (
    Props_SrcEntity_Type integer,
    Props_SrcEntity_Id varchar,
    Props_SrcEntity_Deployment_Name varchar,
    Props_SrcEntity_Deployment_Namespace varchar,
    Props_SrcEntity_Deployment_Cluster varchar,
    Props_SrcEntity_ExternalSource_Name varchar,
    Props_SrcEntity_ExternalSource_Cidr varchar,
    Props_SrcEntity_ExternalSource_Default bool,
    Props_DstEntity_Type integer,
    Props_DstEntity_Id varchar,
    Props_DstEntity_Deployment_Name varchar,
    Props_DstEntity_Deployment_Namespace varchar,
    Props_DstEntity_Deployment_Cluster varchar,
    Props_DstEntity_ExternalSource_Name varchar,
    Props_DstEntity_ExternalSource_Cidr varchar,
    Props_DstEntity_ExternalSource_Default bool,
    Props_DstPort integer,
    Props_L4Protocol integer,
    LastSeenTimestamp timestamp,
    serialized bytea,
    PRIMARY KEY(Props_SrcEntity_Id, Props_DstEntity_Id, Props_DstPort)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists networkflow_LastSeenTimestamp on networkflow using brin(LastSeenTimestamp) WITH (pages_per_range = 32)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}
}

func insertIntoNetworkflow(ctx context.Context, tx pgx.Tx, obj *storage.NetworkFlow) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetProps().GetSrcEntity().GetType(),
		obj.GetProps().GetSrcEntity().GetId(),
		obj.GetProps().GetSrcEntity().GetDeployment().GetName(),
		obj.GetProps().GetSrcEntity().GetDeployment().GetNamespace(),
		obj.GetProps().GetSrcEntity().GetDeployment().GetCluster(),
		obj.GetProps().GetSrcEntity().GetExternalSource().GetName(),
		obj.GetProps().GetSrcEntity().GetExternalSource().GetCidr(),
		obj.GetProps().GetSrcEntity().GetExternalSource().GetDefault(),
		obj.GetProps().GetDstEntity().GetType(),
		obj.GetProps().GetDstEntity().GetId(),
		obj.GetProps().GetDstEntity().GetDeployment().GetName(),
		obj.GetProps().GetDstEntity().GetDeployment().GetNamespace(),
		obj.GetProps().GetDstEntity().GetDeployment().GetCluster(),
		obj.GetProps().GetDstEntity().GetExternalSource().GetName(),
		obj.GetProps().GetDstEntity().GetExternalSource().GetCidr(),
		obj.GetProps().GetDstEntity().GetExternalSource().GetDefault(),
		obj.GetProps().GetDstPort(),
		obj.GetProps().GetL4Protocol(),
		pgutils.NilOrTime(obj.GetLastSeenTimestamp()),
		serialized,
	}

	finalStr := "INSERT INTO networkflow (Props_SrcEntity_Type, Props_SrcEntity_Id, Props_SrcEntity_Deployment_Name, Props_SrcEntity_Deployment_Namespace, Props_SrcEntity_Deployment_Cluster, Props_SrcEntity_ExternalSource_Name, Props_SrcEntity_ExternalSource_Cidr, Props_SrcEntity_ExternalSource_Default, Props_DstEntity_Type, Props_DstEntity_Id, Props_DstEntity_Deployment_Name, Props_DstEntity_Deployment_Namespace, Props_DstEntity_Deployment_Cluster, Props_DstEntity_ExternalSource_Name, Props_DstEntity_ExternalSource_Cidr, Props_DstEntity_ExternalSource_Default, Props_DstPort, Props_L4Protocol, LastSeenTimestamp, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) ON CONFLICT(Props_SrcEntity_Id, Props_DstEntity_Id, Props_DstPort) DO UPDATE SET Props_SrcEntity_Type = EXCLUDED.Props_SrcEntity_Type, Props_SrcEntity_Id = EXCLUDED.Props_SrcEntity_Id, Props_SrcEntity_Deployment_Name = EXCLUDED.Props_SrcEntity_Deployment_Name, Props_SrcEntity_Deployment_Namespace = EXCLUDED.Props_SrcEntity_Deployment_Namespace, Props_SrcEntity_Deployment_Cluster = EXCLUDED.Props_SrcEntity_Deployment_Cluster, Props_SrcEntity_ExternalSource_Name = EXCLUDED.Props_SrcEntity_ExternalSource_Name, Props_SrcEntity_ExternalSource_Cidr = EXCLUDED.Props_SrcEntity_ExternalSource_Cidr, Props_SrcEntity_ExternalSource_Default = EXCLUDED.Props_SrcEntity_ExternalSource_Default, Props_DstEntity_Type = EXCLUDED.Props_DstEntity_Type, Props_DstEntity_Id = EXCLUDED.Props_DstEntity_Id, Props_DstEntity_Deployment_Name = EXCLUDED.Props_DstEntity_Deployment_Name, Props_DstEntity_Deployment_Namespace = EXCLUDED.Props_DstEntity_Deployment_Namespace, Props_DstEntity_Deployment_Cluster = EXCLUDED.Props_DstEntity_Deployment_Cluster, Props_DstEntity_ExternalSource_Name = EXCLUDED.Props_DstEntity_ExternalSource_Name, Props_DstEntity_ExternalSource_Cidr = EXCLUDED.Props_DstEntity_ExternalSource_Cidr, Props_DstEntity_ExternalSource_Default = EXCLUDED.Props_DstEntity_ExternalSource_Default, Props_DstPort = EXCLUDED.Props_DstPort, Props_L4Protocol = EXCLUDED.Props_L4Protocol, LastSeenTimestamp = EXCLUDED.LastSeenTimestamp, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyIntoNetworkflow(ctx context.Context, tx pgx.Tx, objs ...*storage.NetworkFlow) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := strings.Split("props_srcentity_type,props_srcentity_id,props_srcentity_deployment_name,props_srcentity_deployment_namespace,props_srcentity_deployment_cluster,props_srcentity_externalsource_name,props_srcentity_externalsource_cidr,props_srcentity_externalsource_default,props_dstentity_type,props_dstentity_id,props_dstentity_deployment_name,props_dstentity_deployment_namespace,props_dstentity_deployment_cluster,props_dstentity_externalsource_name,props_dstentity_externalsource_cidr,props_dstentity_externalsource_default,props_dstport,props_l4protocol,lastseentimestamp,serialized", ",")

	for idx, obj := range objs {
		// Todo: Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj.String())

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{

			obj.GetProps().GetSrcEntity().GetType(),

			obj.GetProps().GetSrcEntity().GetId(),

			obj.GetProps().GetSrcEntity().GetDeployment().GetName(),

			obj.GetProps().GetSrcEntity().GetDeployment().GetNamespace(),

			obj.GetProps().GetSrcEntity().GetDeployment().GetCluster(),

			obj.GetProps().GetSrcEntity().GetExternalSource().GetName(),

			obj.GetProps().GetSrcEntity().GetExternalSource().GetCidr(),

			obj.GetProps().GetSrcEntity().GetExternalSource().GetDefault(),

			obj.GetProps().GetDstEntity().GetType(),

			obj.GetProps().GetDstEntity().GetId(),

			obj.GetProps().GetDstEntity().GetDeployment().GetName(),

			obj.GetProps().GetDstEntity().GetDeployment().GetNamespace(),

			obj.GetProps().GetDstEntity().GetDeployment().GetCluster(),

			obj.GetProps().GetDstEntity().GetExternalSource().GetName(),

			obj.GetProps().GetDstEntity().GetExternalSource().GetCidr(),

			obj.GetProps().GetDstEntity().GetExternalSource().GetDefault(),

			obj.GetProps().GetDstPort(),

			obj.GetProps().GetL4Protocol(),

			pgutils.NilOrTime(obj.GetLastSeenTimestamp()),

			serialized,
		})

		err = s.Delete(ctx, obj.GetProps().GetSrcEntity().GetId(), obj.GetProps().GetDstEntity().GetId(), int(obj.GetProps().GetDstPort()))
		if err != nil {
			return err
		}

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{strings.ToLower("networkflow")}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = [][]interface{}{}
		}
	}

	return nil
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableNetworkflow(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.NetworkFlow) error {
	conn, release := s.acquireConn(ctx, ops.Get, "NetworkFlow")
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyIntoNetworkflow(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.NetworkFlow) error {
	conn, release := s.acquireConn(ctx, ops.Get, "NetworkFlow")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoNetworkflow(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.NetworkFlow) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "NetworkFlow")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.NetworkFlow) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "NetworkFlow")

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "NetworkFlow")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "NetworkFlow")

	row := s.db.QueryRow(ctx, existsStmt, propsSrcEntityId, propsDstEntityId, propsDstPort)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) (*storage.NetworkFlow, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "NetworkFlow")

	conn, release := s.acquireConn(ctx, ops.Get, "NetworkFlow")
	defer release()

	row := conn.QueryRow(ctx, getStmt, propsSrcEntityId, propsDstEntityId, propsDstPort)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.NetworkFlow
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, propsSrcEntityId string, propsDstEntityId string, propsDstPort int) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "NetworkFlow")

	conn, release := s.acquireConn(ctx, ops.Remove, "NetworkFlow")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, propsSrcEntityId, propsDstEntityId, propsDstPort); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.NetworkFlow) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.NetworkFlow
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableNetworkflow(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS networkflow CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableNetworkflow(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
