// Code generated by MockGen. DO NOT EDIT.
// Source: datastore_impl.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore_impl.go -source datastore_impl.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetworkEntityPusher is a mock of NetworkEntityPusher interface.
type MockNetworkEntityPusher struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkEntityPusherMockRecorder
	isgomock struct{}
}

// MockNetworkEntityPusherMockRecorder is the mock recorder for MockNetworkEntityPusher.
type MockNetworkEntityPusherMockRecorder struct {
	mock *MockNetworkEntityPusher
}

// NewMockNetworkEntityPusher creates a new mock instance.
func NewMockNetworkEntityPusher(ctrl *gomock.Controller) *MockNetworkEntityPusher {
	mock := &MockNetworkEntityPusher{ctrl: ctrl}
	mock.recorder = &MockNetworkEntityPusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkEntityPusher) EXPECT() *MockNetworkEntityPusherMockRecorder {
	return m.recorder
}

// DoPushExternalNetworkEntitiesToSensor mocks base method.
func (m *MockNetworkEntityPusher) DoPushExternalNetworkEntitiesToSensor(clusters ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range clusters {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DoPushExternalNetworkEntitiesToSensor", varargs...)
}

// DoPushExternalNetworkEntitiesToSensor indicates an expected call of DoPushExternalNetworkEntitiesToSensor.
func (mr *MockNetworkEntityPusherMockRecorder) DoPushExternalNetworkEntitiesToSensor(clusters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPushExternalNetworkEntitiesToSensor", reflect.TypeOf((*MockNetworkEntityPusher)(nil).DoPushExternalNetworkEntitiesToSensor), clusters...)
}
