// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/factory.go -source factory.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	framework "github.com/stackrox/rox/central/compliance/framework"
	compliance "github.com/stackrox/rox/generated/internalapi/compliance"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	gomock "go.uber.org/mock/gomock"
)

// MockScrapeFactory is a mock of ScrapeFactory interface.
type MockScrapeFactory struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeFactoryMockRecorder
}

// MockScrapeFactoryMockRecorder is the mock recorder for MockScrapeFactory.
type MockScrapeFactoryMockRecorder struct {
	mock *MockScrapeFactory
}

// NewMockScrapeFactory creates a new mock instance.
func NewMockScrapeFactory(ctrl *gomock.Controller) *MockScrapeFactory {
	mock := &MockScrapeFactory{ctrl: ctrl}
	mock.recorder = &MockScrapeFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeFactory) EXPECT() *MockScrapeFactoryMockRecorder {
	return m.recorder
}

// RunScrape mocks base method.
func (m *MockScrapeFactory) RunScrape(domain framework.ComplianceDomain, kill concurrency.Waitable, standardIDs []string) (map[string]*compliance.ComplianceReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScrape", domain, kill, standardIDs)
	ret0, _ := ret[0].(map[string]*compliance.ComplianceReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScrape indicates an expected call of RunScrape.
func (mr *MockScrapeFactoryMockRecorder) RunScrape(domain, kill, standardIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScrape", reflect.TypeOf((*MockScrapeFactory)(nil).RunScrape), domain, kill, standardIDs)
}
