// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type DiscoveredClustersStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestDiscoveredClustersStore(t *testing.T) {
	suite.Run(t, new(DiscoveredClustersStoreSuite))
}

func (s *DiscoveredClustersStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *DiscoveredClustersStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE discovered_clusters CASCADE")
	s.T().Log("discovered_clusters", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *DiscoveredClustersStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *DiscoveredClustersStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	discoveredCluster := &storage.DiscoveredCluster{}
	s.NoError(testutils.FullInit(discoveredCluster, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundDiscoveredCluster, exists, err := store.Get(ctx, discoveredCluster.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundDiscoveredCluster)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, discoveredCluster))
	foundDiscoveredCluster, exists, err = store.Get(ctx, discoveredCluster.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), discoveredCluster, foundDiscoveredCluster)

	discoveredClusterCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, discoveredClusterCount)
	discoveredClusterCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(discoveredClusterCount)

	discoveredClusterExists, err := store.Exists(ctx, discoveredCluster.GetId())
	s.NoError(err)
	s.True(discoveredClusterExists)
	s.NoError(store.Upsert(ctx, discoveredCluster))
	s.ErrorIs(store.Upsert(withNoAccessCtx, discoveredCluster), sac.ErrResourceAccessDenied)

	foundDiscoveredCluster, exists, err = store.Get(ctx, discoveredCluster.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), discoveredCluster, foundDiscoveredCluster)

	s.NoError(store.Delete(ctx, discoveredCluster.GetId()))
	foundDiscoveredCluster, exists, err = store.Get(ctx, discoveredCluster.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundDiscoveredCluster)
	s.ErrorIs(store.Delete(withNoAccessCtx, discoveredCluster.GetId()), sac.ErrResourceAccessDenied)

	var discoveredClusters []*storage.DiscoveredCluster
	var discoveredClusterIDs []string
	for i := 0; i < 200; i++ {
		discoveredCluster := &storage.DiscoveredCluster{}
		s.NoError(testutils.FullInit(discoveredCluster, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		discoveredClusters = append(discoveredClusters, discoveredCluster)
		discoveredClusterIDs = append(discoveredClusterIDs, discoveredCluster.GetId())
	}

	s.NoError(store.UpsertMany(ctx, discoveredClusters))

	discoveredClusterCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, discoveredClusterCount)

	s.NoError(store.DeleteMany(ctx, discoveredClusterIDs))

	discoveredClusterCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, discoveredClusterCount)
}
