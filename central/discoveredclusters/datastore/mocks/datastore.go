// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	discoveredclusters "github.com/stackrox/rox/pkg/cloudsources/discoveredclusters"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountDiscoveredClusters mocks base method.
func (m *MockDataStore) CountDiscoveredClusters(ctx context.Context, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDiscoveredClusters", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDiscoveredClusters indicates an expected call of CountDiscoveredClusters.
func (mr *MockDataStoreMockRecorder) CountDiscoveredClusters(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDiscoveredClusters", reflect.TypeOf((*MockDataStore)(nil).CountDiscoveredClusters), ctx, query)
}

// DeleteDiscoveredClusters mocks base method.
func (m *MockDataStore) DeleteDiscoveredClusters(ctx context.Context, query *v1.Query) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscoveredClusters", ctx, query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscoveredClusters indicates an expected call of DeleteDiscoveredClusters.
func (mr *MockDataStoreMockRecorder) DeleteDiscoveredClusters(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoveredClusters", reflect.TypeOf((*MockDataStore)(nil).DeleteDiscoveredClusters), ctx, query)
}

// GetDiscoveredCluster mocks base method.
func (m *MockDataStore) GetDiscoveredCluster(ctx context.Context, id string) (*storage.DiscoveredCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredCluster", ctx, id)
	ret0, _ := ret[0].(*storage.DiscoveredCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredCluster indicates an expected call of GetDiscoveredCluster.
func (mr *MockDataStoreMockRecorder) GetDiscoveredCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredCluster", reflect.TypeOf((*MockDataStore)(nil).GetDiscoveredCluster), ctx, id)
}

// ListDiscoveredClusters mocks base method.
func (m *MockDataStore) ListDiscoveredClusters(ctx context.Context, query *v1.Query) ([]*storage.DiscoveredCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoveredClusters", ctx, query)
	ret0, _ := ret[0].([]*storage.DiscoveredCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredClusters indicates an expected call of ListDiscoveredClusters.
func (mr *MockDataStoreMockRecorder) ListDiscoveredClusters(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredClusters", reflect.TypeOf((*MockDataStore)(nil).ListDiscoveredClusters), ctx, query)
}

// UpsertDiscoveredClusters mocks base method.
func (m *MockDataStore) UpsertDiscoveredClusters(ctx context.Context, discoveredClusters ...*discoveredclusters.DiscoveredCluster) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range discoveredClusters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDiscoveredClusters", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertDiscoveredClusters indicates an expected call of UpsertDiscoveredClusters.
func (mr *MockDataStoreMockRecorder) UpsertDiscoveredClusters(ctx any, discoveredClusters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, discoveredClusters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDiscoveredClusters", reflect.TypeOf((*MockDataStore)(nil).UpsertDiscoveredClusters), varargs...)
}
