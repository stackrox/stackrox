// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type BaseImageLayersStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestBaseImageLayersStore(t *testing.T) {
	suite.Run(t, new(BaseImageLayersStoreSuite))
}

func (s *BaseImageLayersStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *BaseImageLayersStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE base_image_layers CASCADE")
	s.T().Log("base_image_layers", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *BaseImageLayersStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	baseImageLayer := &storage.BaseImageLayer{}
	s.NoError(testutils.FullInit(baseImageLayer, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundBaseImageLayer, exists, err := store.Get(ctx, baseImageLayer.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundBaseImageLayer)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, baseImageLayer))
	foundBaseImageLayer, exists, err = store.Get(ctx, baseImageLayer.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), baseImageLayer, foundBaseImageLayer)

	baseImageLayerCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, baseImageLayerCount)
	baseImageLayerCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(baseImageLayerCount)

	baseImageLayerExists, err := store.Exists(ctx, baseImageLayer.GetId())
	s.NoError(err)
	s.True(baseImageLayerExists)
	s.NoError(store.Upsert(ctx, baseImageLayer))
	s.ErrorIs(store.Upsert(withNoAccessCtx, baseImageLayer), sac.ErrResourceAccessDenied)

	s.NoError(store.Delete(ctx, baseImageLayer.GetId()))
	foundBaseImageLayer, exists, err = store.Get(ctx, baseImageLayer.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundBaseImageLayer)
	s.ErrorIs(store.Delete(withNoAccessCtx, baseImageLayer.GetId()), sac.ErrResourceAccessDenied)

	var baseImageLayers []*storage.BaseImageLayer
	var baseImageLayerIDs []string
	for i := 0; i < 200; i++ {
		baseImageLayer := &storage.BaseImageLayer{}
		s.NoError(testutils.FullInit(baseImageLayer, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		baseImageLayers = append(baseImageLayers, baseImageLayer)
		baseImageLayerIDs = append(baseImageLayerIDs, baseImageLayer.GetId())
	}

	s.NoError(store.UpsertMany(ctx, baseImageLayers))

	baseImageLayerCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, baseImageLayerCount)

	s.NoError(store.DeleteMany(ctx, baseImageLayerIDs))

	baseImageLayerCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, baseImageLayerCount)
}
