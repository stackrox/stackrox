// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddProcessBaseline mocks base method.
func (m *MockDataStore) AddProcessBaseline(ctx context.Context, baseline *storage.ProcessBaseline) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessBaseline", ctx, baseline)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessBaseline indicates an expected call of AddProcessBaseline.
func (mr *MockDataStoreMockRecorder) AddProcessBaseline(ctx, baseline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).AddProcessBaseline), ctx, baseline)
}

// ClearProcessBaselines mocks base method.
func (m *MockDataStore) ClearProcessBaselines(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearProcessBaselines", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearProcessBaselines indicates an expected call of ClearProcessBaselines.
func (mr *MockDataStoreMockRecorder) ClearProcessBaselines(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearProcessBaselines", reflect.TypeOf((*MockDataStore)(nil).ClearProcessBaselines), ctx, ids)
}

// CreateUnlockedProcessBaseline mocks base method.
func (m *MockDataStore) CreateUnlockedProcessBaseline(ctx context.Context, key *storage.ProcessBaselineKey) (*storage.ProcessBaseline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnlockedProcessBaseline", ctx, key)
	ret0, _ := ret[0].(*storage.ProcessBaseline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnlockedProcessBaseline indicates an expected call of CreateUnlockedProcessBaseline.
func (mr *MockDataStoreMockRecorder) CreateUnlockedProcessBaseline(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnlockedProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).CreateUnlockedProcessBaseline), ctx, key)
}

// GetProcessBaseline mocks base method.
func (m *MockDataStore) GetProcessBaseline(ctx context.Context, key *storage.ProcessBaselineKey) (*storage.ProcessBaseline, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessBaseline", ctx, key)
	ret0, _ := ret[0].(*storage.ProcessBaseline)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessBaseline indicates an expected call of GetProcessBaseline.
func (mr *MockDataStoreMockRecorder) GetProcessBaseline(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).GetProcessBaseline), ctx, key)
}

// RemoveProcessBaseline mocks base method.
func (m *MockDataStore) RemoveProcessBaseline(ctx context.Context, key *storage.ProcessBaselineKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessBaseline", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessBaseline indicates an expected call of RemoveProcessBaseline.
func (mr *MockDataStoreMockRecorder) RemoveProcessBaseline(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessBaseline), ctx, key)
}

// RemoveProcessBaselinesByDeployment mocks base method.
func (m *MockDataStore) RemoveProcessBaselinesByDeployment(ctx context.Context, deploymentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessBaselinesByDeployment", ctx, deploymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessBaselinesByDeployment indicates an expected call of RemoveProcessBaselinesByDeployment.
func (mr *MockDataStoreMockRecorder) RemoveProcessBaselinesByDeployment(ctx, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessBaselinesByDeployment", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessBaselinesByDeployment), ctx, deploymentID)
}

// RemoveProcessBaselinesByIDs mocks base method.
func (m *MockDataStore) RemoveProcessBaselinesByIDs(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessBaselinesByIDs", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessBaselinesByIDs indicates an expected call of RemoveProcessBaselinesByIDs.
func (mr *MockDataStoreMockRecorder) RemoveProcessBaselinesByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessBaselinesByIDs", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessBaselinesByIDs), ctx, ids)
}

// Search mocks base method.
func (m *MockDataStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDataStoreMockRecorder) Search(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), ctx, q)
}

// SearchRawProcessBaselines mocks base method.
func (m *MockDataStore) SearchRawProcessBaselines(ctx context.Context, q *v1.Query) ([]*storage.ProcessBaseline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRawProcessBaselines", ctx, q)
	ret0, _ := ret[0].([]*storage.ProcessBaseline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawProcessBaselines indicates an expected call of SearchRawProcessBaselines.
func (mr *MockDataStoreMockRecorder) SearchRawProcessBaselines(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawProcessBaselines", reflect.TypeOf((*MockDataStore)(nil).SearchRawProcessBaselines), ctx, q)
}

// UpdateProcessBaselineElements mocks base method.
func (m *MockDataStore) UpdateProcessBaselineElements(ctx context.Context, key *storage.ProcessBaselineKey, addElements, removeElements []*storage.BaselineItem, auto bool) (*storage.ProcessBaseline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcessBaselineElements", ctx, key, addElements, removeElements, auto)
	ret0, _ := ret[0].(*storage.ProcessBaseline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProcessBaselineElements indicates an expected call of UpdateProcessBaselineElements.
func (mr *MockDataStoreMockRecorder) UpdateProcessBaselineElements(ctx, key, addElements, removeElements, auto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcessBaselineElements", reflect.TypeOf((*MockDataStore)(nil).UpdateProcessBaselineElements), ctx, key, addElements, removeElements, auto)
}

// UpsertProcessBaseline mocks base method.
func (m *MockDataStore) UpsertProcessBaseline(ctx context.Context, key *storage.ProcessBaselineKey, addElements []*storage.BaselineItem, auto, lock bool) (*storage.ProcessBaseline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProcessBaseline", ctx, key, addElements, auto, lock)
	ret0, _ := ret[0].(*storage.ProcessBaseline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProcessBaseline indicates an expected call of UpsertProcessBaseline.
func (mr *MockDataStoreMockRecorder) UpsertProcessBaseline(ctx, key, addElements, auto, lock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).UpsertProcessBaseline), ctx, key, addElements, auto, lock)
}

// UserLockProcessBaseline mocks base method.
func (m *MockDataStore) UserLockProcessBaseline(ctx context.Context, key *storage.ProcessBaselineKey, locked bool) (*storage.ProcessBaseline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLockProcessBaseline", ctx, key, locked)
	ret0, _ := ret[0].(*storage.ProcessBaseline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLockProcessBaseline indicates an expected call of UserLockProcessBaseline.
func (mr *MockDataStoreMockRecorder) UserLockProcessBaseline(ctx, key, locked any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLockProcessBaseline", reflect.TypeOf((*MockDataStore)(nil).UserLockProcessBaseline), ctx, key, locked)
}

// WalkAll mocks base method.
func (m *MockDataStore) WalkAll(ctx context.Context, fn func(*storage.ProcessBaseline) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkAll", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkAll indicates an expected call of WalkAll.
func (mr *MockDataStoreMockRecorder) WalkAll(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkAll", reflect.TypeOf((*MockDataStore)(nil).WalkAll), ctx, fn)
}
