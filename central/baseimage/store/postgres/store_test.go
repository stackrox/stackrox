// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type BaseImagesStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestBaseImagesStore(t *testing.T) {
	suite.Run(t, new(BaseImagesStoreSuite))
}

func (s *BaseImagesStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *BaseImagesStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE base_images CASCADE")
	s.T().Log("base_images", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *BaseImagesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	baseImage := &storage.BaseImage{}
	s.NoError(testutils.FullInit(baseImage, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundBaseImage, exists, err := store.Get(ctx, baseImage.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundBaseImage)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, baseImage))
	foundBaseImage, exists, err = store.Get(ctx, baseImage.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), baseImage, foundBaseImage)

	baseImageCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, baseImageCount)
	baseImageCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(baseImageCount)

	baseImageExists, err := store.Exists(ctx, baseImage.GetId())
	s.NoError(err)
	s.True(baseImageExists)
	s.NoError(store.Upsert(ctx, baseImage))
	s.ErrorIs(store.Upsert(withNoAccessCtx, baseImage), sac.ErrResourceAccessDenied)

	s.NoError(store.Delete(ctx, baseImage.GetId()))
	foundBaseImage, exists, err = store.Get(ctx, baseImage.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundBaseImage)
	s.ErrorIs(store.Delete(withNoAccessCtx, baseImage.GetId()), sac.ErrResourceAccessDenied)

	var baseImages []*storage.BaseImage
	var baseImageIDs []string
	for i := 0; i < 200; i++ {
		baseImage := &storage.BaseImage{}
		s.NoError(testutils.FullInit(baseImage, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		baseImages = append(baseImages, baseImage)
		baseImageIDs = append(baseImageIDs, baseImage.GetId())
	}

	s.NoError(store.UpsertMany(ctx, baseImages))

	baseImageCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, baseImageCount)

	s.NoError(store.DeleteMany(ctx, baseImageIDs))

	baseImageCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, baseImageCount)
}
