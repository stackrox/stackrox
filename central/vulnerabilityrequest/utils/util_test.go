package utils

import (
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/fixtures"
	"github.com/stretchr/testify/assert"
)

func TestScopeCoverage(t *testing.T) {
	globalCVE1DefReq := fixtures.GetGlobalDeferralRequest("cve-1")
	globalCVE1FPReq := fixtures.GetGlobalFPRequest("cve-1")
	imageScopedCVE1Req := fixtures.GetImageScopeDeferralRequest("reg1", "img1", "1.0", "cve-1")
	allTagCVE1Req := fixtures.GetImageScopeDeferralRequest("reg1", "img1", ".*", "cve-1")
	otherImageReq := fixtures.GetImageScopeDeferralRequest("reg2", "img1", "1.0", "cve-1")

	existingReqs := []*storage.VulnerabilityRequest{
		globalCVE1DefReq,
		globalCVE1FPReq,
		imageScopedCVE1Req,
		allTagCVE1Req,
		otherImageReq,
	}
	for _, tc := range []struct {
		desc               string
		toMatch            *storage.VulnerabilityRequest
		expectedMatches    []*storage.VulnerabilityRequest
		expectedFirstIndex int
	}{
		{
			desc:               "match cve-1 requests in covered scopes; global, all tags, specific tag",
			toMatch:            globalCVE1DefReq,
			expectedMatches:    existingReqs,
			expectedFirstIndex: 0,
		},
		{
			desc:               "match cve-1 requests in covered scopes; all tags, specific tag",
			toMatch:            allTagCVE1Req,
			expectedMatches:    []*storage.VulnerabilityRequest{allTagCVE1Req, imageScopedCVE1Req},
			expectedFirstIndex: 2,
		},
		{
			desc:               "match cve-1 requests in covered scopes; specific tag",
			toMatch:            imageScopedCVE1Req,
			expectedMatches:    []*storage.VulnerabilityRequest{imageScopedCVE1Req},
			expectedFirstIndex: 2,
		},
		{
			desc:               "none matched",
			toMatch:            fixtures.GetImageScopeDeferralRequest("reg3", "img1", "1.0", "cve-1"),
			expectedFirstIndex: -1,
		},
	} {
		t.Run(tc.desc, func(t *testing.T) {
			covered := RequestsWithCoveredScope(tc.toMatch, existingReqs)
			assert.ElementsMatch(t, tc.expectedMatches, covered)

			idx := FirstIndexMatchingScope(tc.toMatch, existingReqs)
			assert.Equal(t, tc.expectedFirstIndex, idx)
		})
	}
}
