// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/cache.go -source cache.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockVulnReqCache is a mock of VulnReqCache interface.
type MockVulnReqCache struct {
	ctrl     *gomock.Controller
	recorder *MockVulnReqCacheMockRecorder
}

// MockVulnReqCacheMockRecorder is the mock recorder for MockVulnReqCache.
type MockVulnReqCacheMockRecorder struct {
	mock *MockVulnReqCache
}

// NewMockVulnReqCache creates a new mock instance.
func NewMockVulnReqCache(ctrl *gomock.Controller) *MockVulnReqCache {
	mock := &MockVulnReqCache{ctrl: ctrl}
	mock.recorder = &MockVulnReqCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnReqCache) EXPECT() *MockVulnReqCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVulnReqCache) Add(request *storage.VulnerabilityRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", request)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockVulnReqCacheMockRecorder) Add(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVulnReqCache)(nil).Add), request)
}

// AddMany mocks base method.
func (m *MockVulnReqCache) AddMany(requests ...*storage.VulnerabilityRequest) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range requests {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMany", varargs...)
}

// AddMany indicates an expected call of AddMany.
func (mr *MockVulnReqCacheMockRecorder) AddMany(requests ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockVulnReqCache)(nil).AddMany), requests...)
}

// GetEffectiveVulnReqIDForImage mocks base method.
func (m *MockVulnReqCache) GetEffectiveVulnReqIDForImage(registry, remote, tag, cve string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveVulnReqIDForImage", registry, remote, tag, cve)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEffectiveVulnReqIDForImage indicates an expected call of GetEffectiveVulnReqIDForImage.
func (mr *MockVulnReqCacheMockRecorder) GetEffectiveVulnReqIDForImage(registry, remote, tag, cve any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveVulnReqIDForImage", reflect.TypeOf((*MockVulnReqCache)(nil).GetEffectiveVulnReqIDForImage), registry, remote, tag, cve)
}

// GetEffectiveVulnStateForImage mocks base method.
func (m *MockVulnReqCache) GetEffectiveVulnStateForImage(cves []string, registry, remote, tag string) map[string]storage.VulnerabilityState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveVulnStateForImage", cves, registry, remote, tag)
	ret0, _ := ret[0].(map[string]storage.VulnerabilityState)
	return ret0
}

// GetEffectiveVulnStateForImage indicates an expected call of GetEffectiveVulnStateForImage.
func (mr *MockVulnReqCacheMockRecorder) GetEffectiveVulnStateForImage(cves, registry, remote, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveVulnStateForImage", reflect.TypeOf((*MockVulnReqCache)(nil).GetEffectiveVulnStateForImage), cves, registry, remote, tag)
}

// GetVulnsWithState mocks base method.
func (m *MockVulnReqCache) GetVulnsWithState(registry, remote, tag string) map[string]storage.VulnerabilityState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnsWithState", registry, remote, tag)
	ret0, _ := ret[0].(map[string]storage.VulnerabilityState)
	return ret0
}

// GetVulnsWithState indicates an expected call of GetVulnsWithState.
func (mr *MockVulnReqCacheMockRecorder) GetVulnsWithState(registry, remote, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnsWithState", reflect.TypeOf((*MockVulnReqCache)(nil).GetVulnsWithState), registry, remote, tag)
}

// Remove mocks base method.
func (m *MockVulnReqCache) Remove(requestID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", requestID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockVulnReqCacheMockRecorder) Remove(requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockVulnReqCache)(nil).Remove), requestID)
}

// RemoveMany mocks base method.
func (m *MockVulnReqCache) RemoveMany(requestIDs ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range requestIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMany", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveMany indicates an expected call of RemoveMany.
func (mr *MockVulnReqCacheMockRecorder) RemoveMany(requestIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMany", reflect.TypeOf((*MockVulnReqCache)(nil).RemoveMany), requestIDs...)
}
