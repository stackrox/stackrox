// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/stackrox/rox/central/vulnerabilityrequest/common"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddRequest mocks base method.
func (m *MockDataStore) AddRequest(ctx context.Context, request *storage.VulnerabilityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRequest indicates an expected call of AddRequest.
func (mr *MockDataStoreMockRecorder) AddRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequest", reflect.TypeOf((*MockDataStore)(nil).AddRequest), ctx, request)
}

// Count mocks base method.
func (m *MockDataStore) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDataStoreMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDataStore)(nil).Count), ctx, q)
}

// Exists mocks base method.
func (m *MockDataStore) Exists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDataStoreMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDataStore)(nil).Exists), ctx, id)
}

// Get mocks base method.
func (m *MockDataStore) Get(ctx context.Context, id string) (*storage.VulnerabilityRequest, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDataStoreMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataStore)(nil).Get), ctx, id)
}

// GetMany mocks base method.
func (m *MockDataStore) GetMany(ctx context.Context, ids []string) ([]*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, ids)
	ret0, _ := ret[0].([]*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockDataStoreMockRecorder) GetMany(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockDataStore)(nil).GetMany), ctx, ids)
}

// MarkRequestInactive mocks base method.
func (m *MockDataStore) MarkRequestInactive(ctx context.Context, id, comment string) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestInactive", ctx, id, comment)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRequestInactive indicates an expected call of MarkRequestInactive.
func (mr *MockDataStoreMockRecorder) MarkRequestInactive(ctx, id, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestInactive", reflect.TypeOf((*MockDataStore)(nil).MarkRequestInactive), ctx, id, comment)
}

// RemoveRequest mocks base method.
func (m *MockDataStore) RemoveRequest(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRequest", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRequest indicates an expected call of RemoveRequest.
func (mr *MockDataStoreMockRecorder) RemoveRequest(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRequest", reflect.TypeOf((*MockDataStore)(nil).RemoveRequest), ctx, id)
}

// RemoveRequestsInternal mocks base method.
func (m *MockDataStore) RemoveRequestsInternal(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRequestsInternal", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRequestsInternal indicates an expected call of RemoveRequestsInternal.
func (mr *MockDataStoreMockRecorder) RemoveRequestsInternal(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRequestsInternal", reflect.TypeOf((*MockDataStore)(nil).RemoveRequestsInternal), ctx, ids)
}

// Search mocks base method.
func (m *MockDataStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDataStoreMockRecorder) Search(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), ctx, q)
}

// SearchRawRequests mocks base method.
func (m *MockDataStore) SearchRawRequests(ctx context.Context, q *v1.Query) ([]*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRawRequests", ctx, q)
	ret0, _ := ret[0].([]*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawRequests indicates an expected call of SearchRawRequests.
func (mr *MockDataStoreMockRecorder) SearchRawRequests(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawRequests", reflect.TypeOf((*MockDataStore)(nil).SearchRawRequests), ctx, q)
}

// SearchRequests mocks base method.
func (m *MockDataStore) SearchRequests(ctx context.Context, q *v1.Query) ([]*v1.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRequests", ctx, q)
	ret0, _ := ret[0].([]*v1.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRequests indicates an expected call of SearchRequests.
func (mr *MockDataStoreMockRecorder) SearchRequests(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRequests", reflect.TypeOf((*MockDataStore)(nil).SearchRequests), ctx, q)
}

// UpdateRequest mocks base method.
func (m *MockDataStore) UpdateRequest(ctx context.Context, id string, update *common.UpdateRequest) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", ctx, id, update)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockDataStoreMockRecorder) UpdateRequest(ctx, id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockDataStore)(nil).UpdateRequest), ctx, id, update)
}

// UpdateRequestExpiry mocks base method.
func (m *MockDataStore) UpdateRequestExpiry(ctx context.Context, id, message string, updatedExpiry *storage.RequestExpiry) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestExpiry", ctx, id, message, updatedExpiry)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequestExpiry indicates an expected call of UpdateRequestExpiry.
func (mr *MockDataStoreMockRecorder) UpdateRequestExpiry(ctx, id, message, updatedExpiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestExpiry", reflect.TypeOf((*MockDataStore)(nil).UpdateRequestExpiry), ctx, id, message, updatedExpiry)
}

// UpdateRequestStatus mocks base method.
func (m *MockDataStore) UpdateRequestStatus(ctx context.Context, id, comment string, status storage.RequestStatus) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestStatus", ctx, id, comment, status)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequestStatus indicates an expected call of UpdateRequestStatus.
func (mr *MockDataStoreMockRecorder) UpdateRequestStatus(ctx, id, comment, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestStatus", reflect.TypeOf((*MockDataStore)(nil).UpdateRequestStatus), ctx, id, comment, status)
}
