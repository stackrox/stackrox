package datastore

import (
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/vulnerabilityrequest/cache"
	"github.com/stackrox/rox/central/vulnerabilityrequest/datastore/internal/searcher"
	pgStore "github.com/stackrox/rox/central/vulnerabilityrequest/datastore/internal/store/postgres"
	"github.com/stackrox/rox/pkg/logging"
	"github.com/stackrox/rox/pkg/sync"
)

var (
	once sync.Once

	ds DataStore

	log = logging.LoggerForModule()
)

func initialize() {
	storage := pgStore.New(globaldb.GetPostgres())
	var err error
	ds, err = New(storage, searcher.New(storage), cache.PendingReqsCacheSingleton(), cache.ActiveReqsCacheSingleton())
	if err != nil {
		log.Panicf("Failed to initialize vulnerability requests datastore: %s", err)
	}
}

// Singleton provides the interface for non-service external interaction.
func Singleton() DataStore {
	once.Do(initialize)
	return ds
}
