// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type VulnerabilityRequestsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestVulnerabilityRequestsStore(t *testing.T) {
	suite.Run(t, new(VulnerabilityRequestsStoreSuite))
}

func (s *VulnerabilityRequestsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *VulnerabilityRequestsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE vulnerability_requests CASCADE")
	s.T().Log("vulnerability_requests", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *VulnerabilityRequestsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *VulnerabilityRequestsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	vulnerabilityRequest := &storage.VulnerabilityRequest{}
	s.NoError(testutils.FullInit(vulnerabilityRequest, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundVulnerabilityRequest, exists, err := store.Get(ctx, vulnerabilityRequest.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundVulnerabilityRequest)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, vulnerabilityRequest))
	foundVulnerabilityRequest, exists, err = store.Get(ctx, vulnerabilityRequest.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(vulnerabilityRequest, foundVulnerabilityRequest)

	vulnerabilityRequestCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, vulnerabilityRequestCount)
	vulnerabilityRequestCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(vulnerabilityRequestCount)

	vulnerabilityRequestExists, err := store.Exists(ctx, vulnerabilityRequest.GetId())
	s.NoError(err)
	s.True(vulnerabilityRequestExists)
	s.NoError(store.Upsert(ctx, vulnerabilityRequest))
	s.ErrorIs(store.Upsert(withNoAccessCtx, vulnerabilityRequest), sac.ErrResourceAccessDenied)

	foundVulnerabilityRequest, exists, err = store.Get(ctx, vulnerabilityRequest.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(vulnerabilityRequest, foundVulnerabilityRequest)

	s.NoError(store.Delete(ctx, vulnerabilityRequest.GetId()))
	foundVulnerabilityRequest, exists, err = store.Get(ctx, vulnerabilityRequest.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundVulnerabilityRequest)
	s.ErrorIs(store.Delete(withNoAccessCtx, vulnerabilityRequest.GetId()), sac.ErrResourceAccessDenied)

	var vulnerabilityRequests []*storage.VulnerabilityRequest
	var vulnerabilityRequestIDs []string
	for i := 0; i < 200; i++ {
		vulnerabilityRequest := &storage.VulnerabilityRequest{}
		s.NoError(testutils.FullInit(vulnerabilityRequest, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		vulnerabilityRequests = append(vulnerabilityRequests, vulnerabilityRequest)
		vulnerabilityRequestIDs = append(vulnerabilityRequestIDs, vulnerabilityRequest.GetId())
	}

	s.NoError(store.UpsertMany(ctx, vulnerabilityRequests))

	vulnerabilityRequestCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, vulnerabilityRequestCount)

	s.NoError(store.DeleteMany(ctx, vulnerabilityRequestIDs))

	vulnerabilityRequestCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, vulnerabilityRequestCount)
}
