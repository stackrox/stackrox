// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/stackrox/rox/central/metrics"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/sac/resources"
	pgSearch "github.com/stackrox/rox/pkg/search/postgres"
	"gorm.io/gorm"
)

const (
	baseTable = "vulnerability_requests"
	storeName = "VulnerabilityRequest"
)

var (
	log    = logging.LoggerForModule()
	schema = pkgSchema.VulnerabilityRequestsSchema
)

type storeType = storage.VulnerabilityRequest

// Store is the interface to interact with the storage for storage.VulnerabilityRequest
type Store interface {
	Upsert(ctx context.Context, obj *storeType) error
	UpsertMany(ctx context.Context, objs []*storeType) error
	Delete(ctx context.Context, id string) error
	DeleteByQuery(ctx context.Context, q *v1.Query) error
	DeleteMany(ctx context.Context, identifiers []string) error

	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)

	Get(ctx context.Context, id string) (*storeType, bool, error)
	GetByQuery(ctx context.Context, query *v1.Query) ([]*storeType, error)
	GetMany(ctx context.Context, identifiers []string) ([]*storeType, []int, error)
	GetIDs(ctx context.Context) ([]string, error)

	Walk(ctx context.Context, fn func(obj *storeType) error) error
}

// New returns a new Store instance using the provided sql instance.
func New(db postgres.DB) Store {
	return pgSearch.NewGenericStoreWithPermissionChecker[storeType, *storeType](
		db,
		schema,
		pkGetter,
		insertIntoVulnerabilityRequests,
		copyFromVulnerabilityRequests,
		metricsSetAcquireDBConnDuration,
		metricsSetPostgresOperationDurationTime,
		sac.NewAnyGlobalResourceAllowedPermissionChecker(resources.VulnerabilityManagementRequests, resources.VulnerabilityManagementApprovals),
	)
}

// region Helper functions

func pkGetter(obj *storeType) string {
	return obj.GetId()
}

func metricsSetPostgresOperationDurationTime(start time.Time, op ops.Op) {
	metrics.SetPostgresOperationDurationTime(start, op, storeName)
}

func metricsSetAcquireDBConnDuration(start time.Time, op ops.Op) {
	metrics.SetAcquireDBConnDuration(start, op, storeName)
}

func insertIntoVulnerabilityRequests(batch *pgx.Batch, obj *storage.VulnerabilityRequest) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName(),
		obj.GetTargetState(),
		obj.GetStatus(),
		obj.GetExpired(),
		obj.GetRequestor().GetName(),
		pgutils.NilOrTime(obj.GetCreatedAt()),
		pgutils.NilOrTime(obj.GetLastUpdated()),
		obj.GetScope().GetImageScope().GetRegistry(),
		obj.GetScope().GetImageScope().GetRemote(),
		obj.GetScope().GetImageScope().GetTag(),
		obj.GetRequesterV2().GetId(),
		obj.GetRequesterV2().GetName(),
		obj.GetDeferralReq().GetExpiry().GetExpiresWhenFixed(),
		pgutils.NilOrTime(obj.GetDeferralReq().GetExpiry().GetExpiresOn()),
		obj.GetDeferralReq().GetExpiry().GetExpiryType(),
		obj.GetCves().GetCves(),
		serialized,
	}

	finalStr := "INSERT INTO vulnerability_requests (Id, Name, TargetState, Status, Expired, Requestor_Name, CreatedAt, LastUpdated, Scope_ImageScope_Registry, Scope_ImageScope_Remote, Scope_ImageScope_Tag, RequesterV2_Id, RequesterV2_Name, DeferralReq_Expiry_ExpiresWhenFixed, DeferralReq_Expiry_ExpiresOn, DeferralReq_Expiry_ExpiryType, Cves_Cves, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) ON CONFLICT(Id) DO UPDATE SET Id = EXCLUDED.Id, Name = EXCLUDED.Name, TargetState = EXCLUDED.TargetState, Status = EXCLUDED.Status, Expired = EXCLUDED.Expired, Requestor_Name = EXCLUDED.Requestor_Name, CreatedAt = EXCLUDED.CreatedAt, LastUpdated = EXCLUDED.LastUpdated, Scope_ImageScope_Registry = EXCLUDED.Scope_ImageScope_Registry, Scope_ImageScope_Remote = EXCLUDED.Scope_ImageScope_Remote, Scope_ImageScope_Tag = EXCLUDED.Scope_ImageScope_Tag, RequesterV2_Id = EXCLUDED.RequesterV2_Id, RequesterV2_Name = EXCLUDED.RequesterV2_Name, DeferralReq_Expiry_ExpiresWhenFixed = EXCLUDED.DeferralReq_Expiry_ExpiresWhenFixed, DeferralReq_Expiry_ExpiresOn = EXCLUDED.DeferralReq_Expiry_ExpiresOn, DeferralReq_Expiry_ExpiryType = EXCLUDED.DeferralReq_Expiry_ExpiryType, Cves_Cves = EXCLUDED.Cves_Cves, serialized = EXCLUDED.serialized"
	batch.Queue(finalStr, values...)

	var query string

	for childIndex, child := range obj.GetApprovers() {
		if err := insertIntoVulnerabilityRequestsApprovers(batch, child, obj.GetId(), childIndex); err != nil {
			return err
		}
	}

	query = "delete from vulnerability_requests_approvers where vulnerability_requests_Id = $1 AND idx >= $2"
	batch.Queue(query, obj.GetId(), len(obj.GetApprovers()))

	for childIndex, child := range obj.GetComments() {
		if err := insertIntoVulnerabilityRequestsComments(batch, child, obj.GetId(), childIndex); err != nil {
			return err
		}
	}

	query = "delete from vulnerability_requests_comments where vulnerability_requests_Id = $1 AND idx >= $2"
	batch.Queue(query, obj.GetId(), len(obj.GetComments()))

	for childIndex, child := range obj.GetApproversV2() {
		if err := insertIntoVulnerabilityRequestsApproversV2(batch, child, obj.GetId(), childIndex); err != nil {
			return err
		}
	}

	query = "delete from vulnerability_requests_approvers_v2 where vulnerability_requests_Id = $1 AND idx >= $2"
	batch.Queue(query, obj.GetId(), len(obj.GetApproversV2()))
	return nil
}

func insertIntoVulnerabilityRequestsApprovers(batch *pgx.Batch, obj *storage.SlimUser, vulnerabilityRequestID string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		vulnerabilityRequestID,
		idx,
		obj.GetName(),
	}

	finalStr := "INSERT INTO vulnerability_requests_approvers (vulnerability_requests_Id, idx, Name) VALUES($1, $2, $3) ON CONFLICT(vulnerability_requests_Id, idx) DO UPDATE SET vulnerability_requests_Id = EXCLUDED.vulnerability_requests_Id, idx = EXCLUDED.idx, Name = EXCLUDED.Name"
	batch.Queue(finalStr, values...)

	return nil
}

func insertIntoVulnerabilityRequestsComments(batch *pgx.Batch, obj *storage.RequestComment, vulnerabilityRequestID string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		vulnerabilityRequestID,
		idx,
		obj.GetUser().GetName(),
	}

	finalStr := "INSERT INTO vulnerability_requests_comments (vulnerability_requests_Id, idx, User_Name) VALUES($1, $2, $3) ON CONFLICT(vulnerability_requests_Id, idx) DO UPDATE SET vulnerability_requests_Id = EXCLUDED.vulnerability_requests_Id, idx = EXCLUDED.idx, User_Name = EXCLUDED.User_Name"
	batch.Queue(finalStr, values...)

	return nil
}

func insertIntoVulnerabilityRequestsApproversV2(batch *pgx.Batch, obj *storage.Approver, vulnerabilityRequestID string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		vulnerabilityRequestID,
		idx,
		obj.GetId(),
		obj.GetName(),
	}

	finalStr := "INSERT INTO vulnerability_requests_approvers_v2 (vulnerability_requests_Id, idx, Id, Name) VALUES($1, $2, $3, $4) ON CONFLICT(vulnerability_requests_Id, idx) DO UPDATE SET vulnerability_requests_Id = EXCLUDED.vulnerability_requests_Id, idx = EXCLUDED.idx, Id = EXCLUDED.Id, Name = EXCLUDED.Name"
	batch.Queue(finalStr, values...)

	return nil
}

func copyFromVulnerabilityRequests(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, objs ...*storage.VulnerabilityRequest) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	// This is a copy so first we must delete the rows and re-add them
	// Which is essentially the desired behaviour of an upsert.
	deletes := make([]string, 0, batchSize)

	copyCols := []string{
		"id",
		"name",
		"targetstate",
		"status",
		"expired",
		"requestor_name",
		"createdat",
		"lastupdated",
		"scope_imagescope_registry",
		"scope_imagescope_remote",
		"scope_imagescope_tag",
		"requesterv2_id",
		"requesterv2_name",
		"deferralreq_expiry_expireswhenfixed",
		"deferralreq_expiry_expireson",
		"deferralreq_expiry_expirytype",
		"cves_cves",
		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		serialized, marshalErr := obj.Marshal()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{
			obj.GetId(),
			obj.GetName(),
			obj.GetTargetState(),
			obj.GetStatus(),
			obj.GetExpired(),
			obj.GetRequestor().GetName(),
			pgutils.NilOrTime(obj.GetCreatedAt()),
			pgutils.NilOrTime(obj.GetLastUpdated()),
			obj.GetScope().GetImageScope().GetRegistry(),
			obj.GetScope().GetImageScope().GetRemote(),
			obj.GetScope().GetImageScope().GetTag(),
			obj.GetRequesterV2().GetId(),
			obj.GetRequesterV2().GetName(),
			obj.GetDeferralReq().GetExpiry().GetExpiresWhenFixed(),
			pgutils.NilOrTime(obj.GetDeferralReq().GetExpiry().GetExpiresOn()),
			obj.GetDeferralReq().GetExpiry().GetExpiryType(),
			obj.GetCves().GetCves(),
			serialized,
		})

		// Add the ID to be deleted.
		deletes = append(deletes, obj.GetId())

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if err := s.DeleteMany(ctx, deletes); err != nil {
				return err
			}
			// clear the inserts and vals for the next batch
			deletes = deletes[:0]

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"vulnerability_requests"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for idx, obj := range objs {
		_ = idx // idx may or may not be used depending on how nested we are, so avoid compile-time errors.

		if err := copyFromVulnerabilityRequestsApprovers(ctx, s, tx, obj.GetId(), obj.GetApprovers()...); err != nil {
			return err
		}
		if err := copyFromVulnerabilityRequestsComments(ctx, s, tx, obj.GetId(), obj.GetComments()...); err != nil {
			return err
		}
		if err := copyFromVulnerabilityRequestsApproversV2(ctx, s, tx, obj.GetId(), obj.GetApproversV2()...); err != nil {
			return err
		}
	}

	return nil
}

func copyFromVulnerabilityRequestsApprovers(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, vulnerabilityRequestID string, objs ...*storage.SlimUser) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	copyCols := []string{
		"vulnerability_requests_id",
		"idx",
		"name",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{
			vulnerabilityRequestID,
			idx,
			obj.GetName(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"vulnerability_requests_approvers"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return nil
}

func copyFromVulnerabilityRequestsComments(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, vulnerabilityRequestID string, objs ...*storage.RequestComment) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	copyCols := []string{
		"vulnerability_requests_id",
		"idx",
		"user_name",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{
			vulnerabilityRequestID,
			idx,
			obj.GetUser().GetName(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"vulnerability_requests_comments"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return nil
}

func copyFromVulnerabilityRequestsApproversV2(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, vulnerabilityRequestID string, objs ...*storage.Approver) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	copyCols := []string{
		"vulnerability_requests_id",
		"idx",
		"id",
		"name",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{
			vulnerabilityRequestID,
			idx,
			obj.GetId(),
			obj.GetName(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"vulnerability_requests_approvers_v2"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return nil
}

// endregion Helper functions

// region Used for testing

// CreateTableAndNewStore returns a new Store instance for testing.
func CreateTableAndNewStore(ctx context.Context, db postgres.DB, gormDB *gorm.DB) Store {
	pkgSchema.ApplySchemaForTable(ctx, gormDB, baseTable)
	return New(db)
}

// Destroy drops the tables associated with the target object type.
func Destroy(ctx context.Context, db postgres.DB) {
	dropTableVulnerabilityRequests(ctx, db)
}

func dropTableVulnerabilityRequests(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS vulnerability_requests CASCADE")
	dropTableVulnerabilityRequestsApprovers(ctx, db)
	dropTableVulnerabilityRequestsComments(ctx, db)
	dropTableVulnerabilityRequestsApproversV2(ctx, db)

}

func dropTableVulnerabilityRequestsApprovers(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS vulnerability_requests_approvers CASCADE")

}

func dropTableVulnerabilityRequestsComments(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS vulnerability_requests_comments CASCADE")

}

func dropTableVulnerabilityRequestsApproversV2(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS vulnerability_requests_approvers_v2 CASCADE")

}

// endregion Used for testing
