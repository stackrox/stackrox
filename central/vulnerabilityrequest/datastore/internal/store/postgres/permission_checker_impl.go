package postgres

import (
	"context"

	"github.com/stackrox/rox/central/role/resources"
	"github.com/stackrox/rox/pkg/sac"
	pgSearch "github.com/stackrox/rox/pkg/search/postgres"
	"github.com/stackrox/rox/pkg/sync"
)

// TODO(ROX-9887): Implement SAC logic from datastore
type permissionChecker struct{}

var (
	once     sync.Once
	instance pgSearch.PermissionChecker

	requesterOrApproverSAC = sac.ForResources(sac.ForResource(resources.VulnerabilityManagementRequests), sac.ForResource(resources.VulnerabilityManagementApprovals))
)

func permissionCheckerSingleton() pgSearch.PermissionChecker {
	once.Do(func() {
		instance = permissionChecker{}
	})
	return instance
}

func (permissionChecker) ReadAllowed(ctx context.Context) (bool, error) {
	return requesterOrApproverSAC.ReadAllowedToAny(ctx)
}

func (permissionChecker) WriteAllowed(ctx context.Context) (bool, error) {
	return requesterOrApproverSAC.WriteAllowedToAny(ctx)
}
