package manager

import (
	"context"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
)

//go:generate mockgen-wrapper
// The Manager manages snoozing, unsnoozing vulnerabilities based on a request as well as re-observing vulnerabilities
// if the original request has expired
type Manager interface {
	// SnoozeVulnerabilityOnRequest snoozes the CVE for the scope specified by the request
	// Snoozed vulns won't result in a policy violation nor will it be included in risk calculation.
	SnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error
	// UnSnoozeVulnerabilityOnRequest unsnoozes the CVE for the scope specified by the request
	// unless there is another request that is still active that causes this CVE to remain snoozed
	UnSnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error

	DeploymentCount(ctx context.Context, requestID string, query *v1.Query) (int, error)
	ImageCount(ctx context.Context, requestID string, query *v1.Query) (int, error)
	Deployments(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Deployment, error)
	Images(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Image, error)
	VulnsWithState(ctx context.Context, registry, remote, tag string) (map[string]storage.VulnerabilityState, error)

	// Start the loop that manages re-observing vulnerabilities if the deferral requests have expired
	Start()
	// Stop the loop that manages re-observing vulnerabilities if the deferral requests have expired
	Stop()
}
