package manager

import (
	componentCVEEdgeDataStore "github.com/stackrox/rox/central/componentcveedge/datastore"
	cveDataStore "github.com/stackrox/rox/central/cve/datastore"
	deploymentDataStore "github.com/stackrox/rox/central/deployment/datastore"
	imageDataStore "github.com/stackrox/rox/central/image/datastore"
	imageCVEDataStore "github.com/stackrox/rox/central/imagecveedge/datastore"
	riskManager "github.com/stackrox/rox/central/risk/manager"
	"github.com/stackrox/rox/central/sensor/service/connection"
	vulnReqDataStore "github.com/stackrox/rox/central/vulnerabilityrequest/datastore"
	"github.com/stackrox/rox/pkg/concurrency"
	"github.com/stackrox/rox/pkg/env"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/logging"
	"github.com/stackrox/rox/pkg/sync"
)

var (
	once     sync.Once
	instance Manager

	log = logging.LoggerForModule()
)

func initialize() {
	instance = New(
		deploymentDataStore.Singleton(),
		vulnReqDataStore.Singleton(),
		imageDataStore.Singleton(),
		imageCVEDataStore.Singleton(),
		cveDataStore.Singleton(),
		componentCVEEdgeDataStore.Singleton(),
		connection.ManagerSingleton(),
		riskManager.Singleton(),
	)
}

// Singleton provides the instance of Manager to use.
func Singleton() Manager {
	if !features.VulnRiskManagement.Enabled() {
		return nil
	}
	once.Do(initialize)
	return instance
}

// New returns an initialized manager, and starts the manager's processing loop in the background.
func New(
	deployments deploymentDataStore.DataStore,
	vulnReqs vulnReqDataStore.DataStore,
	images imageDataStore.DataStore,
	imageCVEEdges imageCVEDataStore.DataStore,
	cves cveDataStore.DataStore,
	componentCVEEdges componentCVEEdgeDataStore.DataStore,
	sensorConnMgr connection.Manager,
	riskMgr riskManager.Manager,
) Manager {
	return &managerImpl{
		deployments:       deployments,
		images:            images,
		imageCVEEdges:     imageCVEEdges,
		cves:              cves,
		componentCVEEdges: componentCVEEdges,
		vulnReqs:          vulnReqs,
		connManager:       sensorConnMgr,
		riskManager:       riskMgr,
		cache:             newVulnReqCache(),

		reObserveTimedDeferralsTickerDuration:     env.VulnDeferralTimedReObserveInterval.DurationSetting(),
		reObserveWhenFixedDeferralsTickerDuration: env.VulnDeferralFixableReObserveInterval.DurationSetting(),
		stopSig: concurrency.NewSignal(),
		stopped: concurrency.NewSignal(),
	}
}
