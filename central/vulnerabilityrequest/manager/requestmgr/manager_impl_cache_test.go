package requestmgr

import (
	"testing"

	"github.com/golang/mock/gomock"
	imageMock "github.com/stackrox/rox/central/image/datastore/mocks"
	vulnReqCacheMocks "github.com/stackrox/rox/central/vulnerabilityrequest/cache/mocks"
	"github.com/stackrox/rox/central/vulnerabilityrequest/common"
	"github.com/stackrox/rox/central/vulnerabilityrequest/common/actions"
	dsMock "github.com/stackrox/rox/central/vulnerabilityrequest/datastore/mocks"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/fixtures"
	"github.com/stretchr/testify/assert"
)

func TestVulnReqCacheUpdatesForApproval(t *testing.T) {
	t.Parallel()
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	pendingReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)
	activeReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)

	vulnReqDS := dsMock.NewMockDataStore(mockCtrl)
	imageDS := imageMock.NewMockDataStore(mockCtrl)

	manager := &managerImpl{
		images:          imageDS,
		vulnReqs:        vulnReqDS,
		pendingReqCache: pendingReqCache,
		activeReqCache:  activeReqCache,
	}

	// Test unexpired request.
	expected := fixtures.GetImageScopeDeferralRequest("r", "r", "g", "cve")
	vulnReqDS.EXPECT().UpdateRequestStatus(allAccessCtx, expected.GetId(), "approved", storage.RequestStatus_APPROVED).
		Return(expected, nil)
	expected.Status = storage.RequestStatus_APPROVED
	pendingReqCache.EXPECT().Remove(expected.GetId())
	activeReqCache.EXPECT().Add(expected)
	imageDS.EXPECT().Search(allAccessCtx, gomock.Any()).Return(nil, nil)

	req, err := manager.ProcessVulnRequestAction(allAccessCtx, expected.GetId(), actions.Approve, &common.RequestParams{
		Comment: "approved",
	})
	assert.NoError(t, err)
	assert.Equal(t, expected.GetId(), req.GetId())

	// Test expired request does not lead to cache (snooze workflow).
	expected.Expired = true
	vulnReqDS.EXPECT().UpdateRequestStatus(allAccessCtx, expected.GetId(), "approved", storage.RequestStatus_APPROVED).
		Return(expected, nil)

	req, err = manager.ProcessVulnRequestAction(allAccessCtx, expected.GetId(), actions.Approve, &common.RequestParams{
		Comment: "approved",
	})
	assert.Error(t, err)
	assert.Nil(t, req)
}

func TestVulnReqCacheUpdatesForDenial(t *testing.T) {
	t.Parallel()
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	pendingReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)
	activeReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)

	vulnReqDS := dsMock.NewMockDataStore(mockCtrl)
	imageDS := imageMock.NewMockDataStore(mockCtrl)

	manager := &managerImpl{
		images:          imageDS,
		vulnReqs:        vulnReqDS,
		pendingReqCache: pendingReqCache,
		activeReqCache:  activeReqCache,
	}

	expected := fixtures.GetImageScopeDeferralRequest("r", "r", "g", "cve")
	vulnReqDS.EXPECT().UpdateRequestStatus(allAccessCtx, expected.GetId(), "denied", storage.RequestStatus_DENIED).
		Return(expected, nil)
	expected.Status = storage.RequestStatus_DENIED
	pendingReqCache.EXPECT().Remove(expected.GetId())

	req, err := manager.ProcessVulnRequestAction(allAccessCtx, expected.GetId(), actions.Deny, &common.RequestParams{
		Comment: "denied",
	})
	assert.NoError(t, err)
	assert.Equal(t, expected.GetId(), req.GetId())
}

func TestVulnReqCacheUpdatesForDelete(t *testing.T) {
	t.Parallel()
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	pendingReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)
	activeReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)

	vulnReqDS := dsMock.NewMockDataStore(mockCtrl)
	imageDS := imageMock.NewMockDataStore(mockCtrl)

	manager := &managerImpl{
		images:          imageDS,
		vulnReqs:        vulnReqDS,
		pendingReqCache: pendingReqCache,
		activeReqCache:  activeReqCache,
	}

	expected := fixtures.GetImageScopeDeferralRequest("r", "r", "g", "cve")
	vulnReqDS.EXPECT().RemoveRequest(allAccessCtx, expected.GetId()).Return(nil)
	pendingReqCache.EXPECT().Remove(expected.GetId())

	_, err := manager.ProcessVulnRequestAction(allAccessCtx, expected.GetId(), actions.Delete, &common.RequestParams{})
	assert.NoError(t, err)
}

func TestVulnReqCacheUpdatesForUndo(t *testing.T) {
	t.Parallel()
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	pendingReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)
	activeReqCache := vulnReqCacheMocks.NewMockVulnReqCache(mockCtrl)

	vulnReqDS := dsMock.NewMockDataStore(mockCtrl)
	imageDS := imageMock.NewMockDataStore(mockCtrl)

	manager := &managerImpl{
		images:          imageDS,
		vulnReqs:        vulnReqDS,
		pendingReqCache: pendingReqCache,
		activeReqCache:  activeReqCache,
	}

	expected := fixtures.GetImageScopeDeferralRequest("r", "r", "g", "cve")
	vulnReqDS.EXPECT().MarkRequestInactive(allAccessCtx, expected.GetId(), gomock.Any()).Return(expected, nil)
	pendingReqCache.EXPECT().Remove(expected.GetId())
	activeReqCache.EXPECT().Remove(expected.GetId())
	imageDS.EXPECT().Search(allAccessCtx, gomock.Any()).Return(nil, nil)

	req, err := manager.ProcessVulnRequestAction(allAccessCtx, expected.GetId(), actions.Undo, &common.RequestParams{})
	assert.NoError(t, err)
	assert.Equal(t, expected.GetId(), req.GetId())
}
