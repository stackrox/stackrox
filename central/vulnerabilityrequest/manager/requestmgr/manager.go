package requestmgr

import (
	"context"

	"github.com/stackrox/rox/central/vulnerabilityrequest/common"
	"github.com/stackrox/rox/central/vulnerabilityrequest/common/actions"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
)

//go:generate mockgen-wrapper
// The Manager manages snoozing and unsnoozing vulnerabilities based on a request as well as re-observing vulnerabilities
// if the original request has expired.
type Manager interface {
	// ProcessNewVulnRequest process a new deferral or false-positive vuln request.
	// This is the entry point to vuln request workflow from service layerâ€”rest or graphql.
	ProcessNewVulnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error
	// ProcessVulnRequestAction handles an action to be performed on a vuln request.
	// This includes updates to DB and cache and/or triggering policy and risk workflow, etc.
	ProcessVulnRequestAction(ctx context.Context, requestID string, action actions.VulnReqAction, requestParams *common.RequestParams) (*storage.VulnerabilityRequest, error)

	// SnoozeVulnerabilityOnRequest snoozes the CVE for the scope specified by the request.
	// Snoozed vulns won't result in a policy violation nor will it be included in risk calculation.
	SnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error
	// UnSnoozeVulnerabilityOnRequest unsnoozes the CVE for the scope specified by the request
	// unless there is another request that is still active that causes this CVE to remain snoozed.
	UnSnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error

	// Start the loop that manages re-observing vulnerabilities if the deferral requests have expired
	Start()
	// Stop the loop that manages re-observing vulnerabilities if the deferral requests have expired
	Stop()
}

//go:generate mockgen-wrapper
// VulnReqQueryManager provides functionality to answer derived field queries related to vulnerability requests.
type VulnReqQueryManager interface {
	DeploymentCount(ctx context.Context, requestID string, query *v1.Query) (int, error)
	ImageCount(ctx context.Context, requestID string, query *v1.Query) (int, error)
	Deployments(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Deployment, error)
	Images(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Image, error)
	VulnsWithState(ctx context.Context, scope common.Scope) (map[string]storage.VulnerabilityState, error)
	EffectiveVulnReq(ctx context.Context, cve string, scope common.Scope) (*storage.VulnerabilityRequest, error)
}
