// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/stackrox/rox/central/vulnerabilityrequest/common"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockManager) Approve(ctx context.Context, requestID string, requestParams *common.VulnRequestParams) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", ctx, requestID, requestParams)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Approve indicates an expected call of Approve.
func (mr *MockManagerMockRecorder) Approve(ctx, requestID, requestParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockManager)(nil).Approve), ctx, requestID, requestParams)
}

// Cancel mocks base method.
func (m *MockManager) Cancel(ctx context.Context, requestID string) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, requestID)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockManagerMockRecorder) Cancel(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockManager)(nil).Cancel), ctx, requestID)
}

// Create mocks base method.
func (m *MockManager) Create(ctx context.Context, request *storage.VulnerabilityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockManagerMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockManager)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockManager) Delete(ctx context.Context, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockManagerMockRecorder) Delete(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockManager)(nil).Delete), ctx, requestID)
}

// Deny mocks base method.
func (m *MockManager) Deny(ctx context.Context, requestID string, requestParams *common.VulnRequestParams) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deny", ctx, requestID, requestParams)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deny indicates an expected call of Deny.
func (mr *MockManagerMockRecorder) Deny(ctx, requestID, requestParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deny", reflect.TypeOf((*MockManager)(nil).Deny), ctx, requestID, requestParams)
}

// SnoozeVulnerabilityOnRequest mocks base method.
func (m *MockManager) SnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnoozeVulnerabilityOnRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnoozeVulnerabilityOnRequest indicates an expected call of SnoozeVulnerabilityOnRequest.
func (mr *MockManagerMockRecorder) SnoozeVulnerabilityOnRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnoozeVulnerabilityOnRequest", reflect.TypeOf((*MockManager)(nil).SnoozeVulnerabilityOnRequest), ctx, request)
}

// Start mocks base method.
func (m *MockManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}

// UnSnoozeVulnerabilityOnRequest mocks base method.
func (m *MockManager) UnSnoozeVulnerabilityOnRequest(ctx context.Context, request *storage.VulnerabilityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSnoozeVulnerabilityOnRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSnoozeVulnerabilityOnRequest indicates an expected call of UnSnoozeVulnerabilityOnRequest.
func (mr *MockManagerMockRecorder) UnSnoozeVulnerabilityOnRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSnoozeVulnerabilityOnRequest", reflect.TypeOf((*MockManager)(nil).UnSnoozeVulnerabilityOnRequest), ctx, request)
}

// Undo mocks base method.
func (m *MockManager) Undo(ctx context.Context, requestID string, requestParams *common.VulnRequestParams) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undo", ctx, requestID, requestParams)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undo indicates an expected call of Undo.
func (mr *MockManagerMockRecorder) Undo(ctx, requestID, requestParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undo", reflect.TypeOf((*MockManager)(nil).Undo), ctx, requestID, requestParams)
}

// UpdateException mocks base method.
func (m *MockManager) UpdateException(ctx context.Context, requestID string, requestParams *common.UpdateRequest) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateException", ctx, requestID, requestParams)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateException indicates an expected call of UpdateException.
func (mr *MockManagerMockRecorder) UpdateException(ctx, requestID, requestParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateException", reflect.TypeOf((*MockManager)(nil).UpdateException), ctx, requestID, requestParams)
}

// UpdateExpiry mocks base method.
func (m *MockManager) UpdateExpiry(ctx context.Context, requestID string, requestParams *common.VulnRequestParams) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpiry", ctx, requestID, requestParams)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpiry indicates an expected call of UpdateExpiry.
func (mr *MockManagerMockRecorder) UpdateExpiry(ctx, requestID, requestParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpiry", reflect.TypeOf((*MockManager)(nil).UpdateExpiry), ctx, requestID, requestParams)
}
