package requestmgr

import (
	"context"
	"fmt"
	"math/rand"
	"testing"

	vulnReqCache "github.com/stackrox/rox/central/vulnerabilityrequest/cache"
	vulnReqDS "github.com/stackrox/rox/central/vulnerabilityrequest/datastore"
	"github.com/stackrox/rox/pkg/fixtures"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stretchr/testify/assert"
)

func BenchmarkCreate(b *testing.B) {
	testDB := *pgtest.ForT(b)
	defer testDB.Teardown(b)

	pendingCache, activeCache := vulnReqCache.New(), vulnReqCache.New()
	vulnReqDataStore := vulnReqDS.GetTestPostgresDataStore(b, testDB, pendingCache, activeCache)

	ctx := sac.WithAllAccess(context.Background())
	numExistingReqs := 10000
	for i := 0; i < numExistingReqs; i++ {
		req := fixtures.GetImageScopeDeferralRequest("registry", "remote", fmt.Sprintf("%d", i), "cve-2023-xyz")
		err := vulnReqDataStore.AddRequest(ctx, req)
		assert.NoError(b, err)
	}

	manager := New(nil, vulnReqDataStore, pendingCache, nil, nil, nil, nil, nil)

	b.Run("create", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			tag := fmt.Sprintf("%d", rand.Intn(numExistingReqs))
			req := fixtures.GetImageScopeDeferralRequest("registry", "remote", tag, "cve-2023-xyz")
			req.Id = ""

			assert.NoError(b, manager.Create(ctx, req))
		}
	})
}
