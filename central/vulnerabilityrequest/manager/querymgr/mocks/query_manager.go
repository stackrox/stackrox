// Code generated by MockGen. DO NOT EDIT.
// Source: query_manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/query_manager.go -source query_manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/stackrox/rox/central/vulnerabilityrequest/common"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockVulnReqQueryManager is a mock of VulnReqQueryManager interface.
type MockVulnReqQueryManager struct {
	ctrl     *gomock.Controller
	recorder *MockVulnReqQueryManagerMockRecorder
}

// MockVulnReqQueryManagerMockRecorder is the mock recorder for MockVulnReqQueryManager.
type MockVulnReqQueryManagerMockRecorder struct {
	mock *MockVulnReqQueryManager
}

// NewMockVulnReqQueryManager creates a new mock instance.
func NewMockVulnReqQueryManager(ctrl *gomock.Controller) *MockVulnReqQueryManager {
	mock := &MockVulnReqQueryManager{ctrl: ctrl}
	mock.recorder = &MockVulnReqQueryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnReqQueryManager) EXPECT() *MockVulnReqQueryManagerMockRecorder {
	return m.recorder
}

// DeploymentCount mocks base method.
func (m *MockVulnReqQueryManager) DeploymentCount(ctx context.Context, requestID string, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploymentCount", ctx, requestID, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploymentCount indicates an expected call of DeploymentCount.
func (mr *MockVulnReqQueryManagerMockRecorder) DeploymentCount(ctx, requestID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentCount", reflect.TypeOf((*MockVulnReqQueryManager)(nil).DeploymentCount), ctx, requestID, query)
}

// Deployments mocks base method.
func (m *MockVulnReqQueryManager) Deployments(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments", ctx, requestID, query)
	ret0, _ := ret[0].([]*storage.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployments indicates an expected call of Deployments.
func (mr *MockVulnReqQueryManagerMockRecorder) Deployments(ctx, requestID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockVulnReqQueryManager)(nil).Deployments), ctx, requestID, query)
}

// EffectiveVulnReq mocks base method.
func (m *MockVulnReqQueryManager) EffectiveVulnReq(ctx context.Context, cve string, scope common.VulnReqScope) (*storage.VulnerabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveVulnReq", ctx, cve, scope)
	ret0, _ := ret[0].(*storage.VulnerabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EffectiveVulnReq indicates an expected call of EffectiveVulnReq.
func (mr *MockVulnReqQueryManagerMockRecorder) EffectiveVulnReq(ctx, cve, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveVulnReq", reflect.TypeOf((*MockVulnReqQueryManager)(nil).EffectiveVulnReq), ctx, cve, scope)
}

// ImageCount mocks base method.
func (m *MockVulnReqQueryManager) ImageCount(ctx context.Context, requestID string, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageCount", ctx, requestID, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageCount indicates an expected call of ImageCount.
func (mr *MockVulnReqQueryManagerMockRecorder) ImageCount(ctx, requestID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageCount", reflect.TypeOf((*MockVulnReqQueryManager)(nil).ImageCount), ctx, requestID, query)
}

// Images mocks base method.
func (m *MockVulnReqQueryManager) Images(ctx context.Context, requestID string, query *v1.Query) ([]*storage.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", ctx, requestID, query)
	ret0, _ := ret[0].([]*storage.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images.
func (mr *MockVulnReqQueryManagerMockRecorder) Images(ctx, requestID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockVulnReqQueryManager)(nil).Images), ctx, requestID, query)
}

// VulnsWithState mocks base method.
func (m *MockVulnReqQueryManager) VulnsWithState(ctx context.Context, scope common.VulnReqScope) (map[string]storage.VulnerabilityState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnsWithState", ctx, scope)
	ret0, _ := ret[0].(map[string]storage.VulnerabilityState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnsWithState indicates an expected call of VulnsWithState.
func (mr *MockVulnReqQueryManagerMockRecorder) VulnsWithState(ctx, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnsWithState", reflect.TypeOf((*MockVulnReqQueryManager)(nil).VulnsWithState), ctx, scope)
}
