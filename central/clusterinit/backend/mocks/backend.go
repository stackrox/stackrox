// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/backend.go -source backend.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	backend "github.com/stackrox/rox/central/clusterinit/backend"
	storage "github.com/stackrox/rox/generated/storage"
	mtls "github.com/stackrox/rox/pkg/mtls"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CheckRevoked mocks base method.
func (m *MockBackend) CheckRevoked(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevoked", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevoked indicates an expected call of CheckRevoked.
func (mr *MockBackendMockRecorder) CheckRevoked(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevoked", reflect.TypeOf((*MockBackend)(nil).CheckRevoked), ctx, id)
}

// GetAll mocks base method.
func (m *MockBackend) GetAll(ctx context.Context) ([]*storage.InitBundleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*storage.InitBundleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBackendMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBackend)(nil).GetAll), ctx)
}

// GetAllCRS mocks base method.
func (m *MockBackend) GetAllCRS(ctx context.Context) ([]*storage.InitBundleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCRS", ctx)
	ret0, _ := ret[0].([]*storage.InitBundleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCRS indicates an expected call of GetAllCRS.
func (mr *MockBackendMockRecorder) GetAllCRS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCRS", reflect.TypeOf((*MockBackend)(nil).GetAllCRS), ctx)
}

// GetCAConfig mocks base method.
func (m *MockBackend) GetCAConfig(ctx context.Context) (*backend.CAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCAConfig", ctx)
	ret0, _ := ret[0].(*backend.CAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCAConfig indicates an expected call of GetCAConfig.
func (mr *MockBackendMockRecorder) GetCAConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCAConfig", reflect.TypeOf((*MockBackend)(nil).GetCAConfig), ctx)
}

// Issue mocks base method.
func (m *MockBackend) Issue(ctx context.Context, name string) (*backend.InitBundleWithMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", ctx, name)
	ret0, _ := ret[0].(*backend.InitBundleWithMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockBackendMockRecorder) Issue(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockBackend)(nil).Issue), ctx, name)
}

// IssueCRS mocks base method.
func (m *MockBackend) IssueCRS(ctx context.Context, name string) (*backend.CRSWithMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCRS", ctx, name)
	ret0, _ := ret[0].(*backend.CRSWithMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCRS indicates an expected call of IssueCRS.
func (mr *MockBackendMockRecorder) IssueCRS(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCRS", reflect.TypeOf((*MockBackend)(nil).IssueCRS), ctx, name)
}

// Revoke mocks base method.
func (m *MockBackend) Revoke(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockBackendMockRecorder) Revoke(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockBackend)(nil).Revoke), ctx, id)
}

// ValidateClientCertificate mocks base method.
func (m *MockBackend) ValidateClientCertificate(arg0 context.Context, arg1 []mtls.CertInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClientCertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateClientCertificate indicates an expected call of ValidateClientCertificate.
func (mr *MockBackendMockRecorder) ValidateClientCertificate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClientCertificate", reflect.TypeOf((*MockBackend)(nil).ValidateClientCertificate), arg0, arg1)
}
