// Code generated by MockGen. DO NOT EDIT.
// Source: certprovider.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/certprovider.go -source certprovider.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	clusters "github.com/stackrox/rox/central/clusters"
	mtls "github.com/stackrox/rox/pkg/mtls"
	uuid "github.com/stackrox/rox/pkg/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetBundle mocks base method.
func (m *MockProvider) GetBundle() (clusters.CertBundle, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle")
	ret0, _ := ret[0].(clusters.CertBundle)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBundle indicates an expected call of GetBundle.
func (mr *MockProviderMockRecorder) GetBundle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockProvider)(nil).GetBundle))
}

// GetCA mocks base method.
func (m *MockProvider) GetCA() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCA")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCA indicates an expected call of GetCA.
func (mr *MockProviderMockRecorder) GetCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCA", reflect.TypeOf((*MockProvider)(nil).GetCA))
}

// GetCRSCert mocks base method.
func (m *MockProvider) GetCRSCert() (*mtls.IssuedCert, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRSCert")
	ret0, _ := ret[0].(*mtls.IssuedCert)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCRSCert indicates an expected call of GetCRSCert.
func (mr *MockProviderMockRecorder) GetCRSCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRSCert", reflect.TypeOf((*MockProvider)(nil).GetCRSCert))
}
