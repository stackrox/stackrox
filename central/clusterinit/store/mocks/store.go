// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/store.go -source store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStore) Add(ctx context.Context, bundleMeta *storage.InitBundleMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, bundleMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStoreMockRecorder) Add(ctx, bundleMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStore)(nil).Add), ctx, bundleMeta)
}

// Get mocks base method.
func (m *MockStore) Get(ctx context.Context, id string) (*storage.InitBundleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.InitBundleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockStore) GetAll(ctx context.Context) ([]*storage.InitBundleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*storage.InitBundleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll), ctx)
}

// GetAllCRS mocks base method.
func (m *MockStore) GetAllCRS(ctx context.Context) ([]*storage.InitBundleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCRS", ctx)
	ret0, _ := ret[0].([]*storage.InitBundleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCRS indicates an expected call of GetAllCRS.
func (mr *MockStoreMockRecorder) GetAllCRS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCRS", reflect.TypeOf((*MockStore)(nil).GetAllCRS), ctx)
}

// RecordCompletedRegistration mocks base method.
func (m *MockStore) RecordCompletedRegistration(ctx context.Context, id, clusterId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCompletedRegistration", ctx, id, clusterId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCompletedRegistration indicates an expected call of RecordCompletedRegistration.
func (mr *MockStoreMockRecorder) RecordCompletedRegistration(ctx, id, clusterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCompletedRegistration", reflect.TypeOf((*MockStore)(nil).RecordCompletedRegistration), ctx, id, clusterId)
}

// RecordInitiatedRegistration mocks base method.
func (m *MockStore) RecordInitiatedRegistration(ctx context.Context, id, clusterId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInitiatedRegistration", ctx, id, clusterId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordInitiatedRegistration indicates an expected call of RecordInitiatedRegistration.
func (mr *MockStoreMockRecorder) RecordInitiatedRegistration(ctx, id, clusterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInitiatedRegistration", reflect.TypeOf((*MockStore)(nil).RecordInitiatedRegistration), ctx, id, clusterId)
}

// RegistrationPossible mocks base method.
func (m *MockStore) RegistrationPossible(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrationPossible", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrationPossible indicates an expected call of RegistrationPossible.
func (mr *MockStoreMockRecorder) RegistrationPossible(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrationPossible", reflect.TypeOf((*MockStore)(nil).RegistrationPossible), ctx, id)
}

// Revoke mocks base method.
func (m *MockStore) Revoke(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockStoreMockRecorder) Revoke(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockStore)(nil).Revoke), ctx, id)
}

// Upsert mocks base method.
func (m *MockStore) Upsert(ctx context.Context, crs *storage.InitBundleMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, crs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStoreMockRecorder) Upsert(ctx, crs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStore)(nil).Upsert), ctx, crs)
}

// MockUnderlyingStore is a mock of UnderlyingStore interface.
type MockUnderlyingStore struct {
	ctrl     *gomock.Controller
	recorder *MockUnderlyingStoreMockRecorder
	isgomock struct{}
}

// MockUnderlyingStoreMockRecorder is the mock recorder for MockUnderlyingStore.
type MockUnderlyingStoreMockRecorder struct {
	mock *MockUnderlyingStore
}

// NewMockUnderlyingStore creates a new mock instance.
func NewMockUnderlyingStore(ctrl *gomock.Controller) *MockUnderlyingStore {
	mock := &MockUnderlyingStore{ctrl: ctrl}
	mock.recorder = &MockUnderlyingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnderlyingStore) EXPECT() *MockUnderlyingStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUnderlyingStore) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUnderlyingStoreMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUnderlyingStore)(nil).Delete), ctx, id)
}

// Exists mocks base method.
func (m *MockUnderlyingStore) Exists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUnderlyingStoreMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUnderlyingStore)(nil).Exists), ctx, id)
}

// Get mocks base method.
func (m *MockUnderlyingStore) Get(ctx context.Context, id string) (*storage.InitBundleMeta, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.InitBundleMeta)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUnderlyingStoreMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUnderlyingStore)(nil).Get), ctx, id)
}

// Upsert mocks base method.
func (m *MockUnderlyingStore) Upsert(ctx context.Context, obj *storage.InitBundleMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUnderlyingStoreMockRecorder) Upsert(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUnderlyingStore)(nil).Upsert), ctx, obj)
}

// Walk mocks base method.
func (m *MockUnderlyingStore) Walk(ctx context.Context, fn func(*storage.InitBundleMeta) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockUnderlyingStoreMockRecorder) Walk(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockUnderlyingStore)(nil).Walk), ctx, fn)
}
