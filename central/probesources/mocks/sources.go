// Code generated by MockGen. DO NOT EDIT.
// Source: sources.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/sources.go -source sources.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	probeupload "github.com/stackrox/rox/pkg/probeupload"
	gomock "go.uber.org/mock/gomock"
)

// MockProbeSources is a mock of ProbeSources interface.
type MockProbeSources struct {
	ctrl     *gomock.Controller
	recorder *MockProbeSourcesMockRecorder
}

// MockProbeSourcesMockRecorder is the mock recorder for MockProbeSources.
type MockProbeSourcesMockRecorder struct {
	mock *MockProbeSources
}

// NewMockProbeSources creates a new mock instance.
func NewMockProbeSources(ctrl *gomock.Controller) *MockProbeSources {
	mock := &MockProbeSources{ctrl: ctrl}
	mock.recorder = &MockProbeSourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProbeSources) EXPECT() *MockProbeSourcesMockRecorder {
	return m.recorder
}

// AnyAvailable mocks base method.
func (m *MockProbeSources) AnyAvailable(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnyAvailable", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnyAvailable indicates an expected call of AnyAvailable.
func (mr *MockProbeSourcesMockRecorder) AnyAvailable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyAvailable", reflect.TypeOf((*MockProbeSources)(nil).AnyAvailable), ctx)
}

// CopyAsSlice mocks base method.
func (m *MockProbeSources) CopyAsSlice() []probeupload.ProbeSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyAsSlice")
	ret0, _ := ret[0].([]probeupload.ProbeSource)
	return ret0
}

// CopyAsSlice indicates an expected call of CopyAsSlice.
func (mr *MockProbeSourcesMockRecorder) CopyAsSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyAsSlice", reflect.TypeOf((*MockProbeSources)(nil).CopyAsSlice))
}
