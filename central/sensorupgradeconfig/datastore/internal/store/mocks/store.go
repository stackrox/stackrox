// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetSensorUpgradeConfig mocks base method.
func (m *MockStore) GetSensorUpgradeConfig() (*storage.SensorUpgradeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorUpgradeConfig")
	ret0, _ := ret[0].(*storage.SensorUpgradeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorUpgradeConfig indicates an expected call of GetSensorUpgradeConfig.
func (mr *MockStoreMockRecorder) GetSensorUpgradeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorUpgradeConfig", reflect.TypeOf((*MockStore)(nil).GetSensorUpgradeConfig))
}

// UpsertSensorUpgradeConfig mocks base method.
func (m *MockStore) UpsertSensorUpgradeConfig(sensorupgradeconfig *storage.SensorUpgradeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSensorUpgradeConfig", sensorupgradeconfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSensorUpgradeConfig indicates an expected call of UpsertSensorUpgradeConfig.
func (mr *MockStoreMockRecorder) UpsertSensorUpgradeConfig(sensorupgradeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSensorUpgradeConfig", reflect.TypeOf((*MockStore)(nil).UpsertSensorUpgradeConfig), sensorupgradeconfig)
}
