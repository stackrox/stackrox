// Code generated by MockGen. DO NOT EDIT.
// Source: context.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/context.go -source context.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	framework "github.com/stackrox/rox/central/compliance/framework"
	gomock "go.uber.org/mock/gomock"
)

// MockComplianceContext is a mock of ComplianceContext interface.
type MockComplianceContext struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceContextMockRecorder
}

// MockComplianceContextMockRecorder is the mock recorder for MockComplianceContext.
type MockComplianceContextMockRecorder struct {
	mock *MockComplianceContext
}

// NewMockComplianceContext creates a new mock instance.
func NewMockComplianceContext(ctrl *gomock.Controller) *MockComplianceContext {
	mock := &MockComplianceContext{ctrl: ctrl}
	mock.recorder = &MockComplianceContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceContext) EXPECT() *MockComplianceContextMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockComplianceContext) Data() framework.ComplianceDataRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(framework.ComplianceDataRepository)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockComplianceContextMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockComplianceContext)(nil).Data))
}

// Domain mocks base method.
func (m *MockComplianceContext) Domain() framework.ComplianceDomain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(framework.ComplianceDomain)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockComplianceContextMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockComplianceContext)(nil).Domain))
}

// Finalize mocks base method.
func (m *MockComplianceContext) Finalize(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize", err)
}

// Finalize indicates an expected call of Finalize.
func (mr *MockComplianceContextMockRecorder) Finalize(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockComplianceContext)(nil).Finalize), err)
}

// ForObject mocks base method.
func (m *MockComplianceContext) ForObject(target framework.ComplianceTarget) framework.ComplianceContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForObject", target)
	ret0, _ := ret[0].(framework.ComplianceContext)
	return ret0
}

// ForObject indicates an expected call of ForObject.
func (mr *MockComplianceContextMockRecorder) ForObject(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForObject", reflect.TypeOf((*MockComplianceContext)(nil).ForObject), target)
}

// RecordEvidence mocks base method.
func (m *MockComplianceContext) RecordEvidence(status framework.Status, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEvidence", status, message)
}

// RecordEvidence indicates an expected call of RecordEvidence.
func (mr *MockComplianceContextMockRecorder) RecordEvidence(status, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEvidence", reflect.TypeOf((*MockComplianceContext)(nil).RecordEvidence), status, message)
}

// StandardName mocks base method.
func (m *MockComplianceContext) StandardName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StandardName indicates an expected call of StandardName.
func (mr *MockComplianceContextMockRecorder) StandardName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardName", reflect.TypeOf((*MockComplianceContext)(nil).StandardName))
}

// Target mocks base method.
func (m *MockComplianceContext) Target() framework.ComplianceTarget {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(framework.ComplianceTarget)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockComplianceContextMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockComplianceContext)(nil).Target))
}
