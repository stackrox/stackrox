// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ComplianceConfigsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestComplianceConfigsStore(t *testing.T) {
	suite.Run(t, new(ComplianceConfigsStoreSuite))
}

func (s *ComplianceConfigsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ComplianceConfigsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE compliance_configs CASCADE")
	s.T().Log("compliance_configs", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *ComplianceConfigsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ComplianceConfigsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	complianceConfig := &storage.ComplianceConfig{}
	s.NoError(testutils.FullInit(complianceConfig, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundComplianceConfig, exists, err := store.Get(ctx, complianceConfig.GetStandardId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceConfig)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, complianceConfig))
	foundComplianceConfig, exists, err = store.Get(ctx, complianceConfig.GetStandardId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceConfig, foundComplianceConfig)

	complianceConfigCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, complianceConfigCount)
	complianceConfigCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(complianceConfigCount)

	complianceConfigExists, err := store.Exists(ctx, complianceConfig.GetStandardId())
	s.NoError(err)
	s.True(complianceConfigExists)
	s.NoError(store.Upsert(ctx, complianceConfig))
	s.ErrorIs(store.Upsert(withNoAccessCtx, complianceConfig), sac.ErrResourceAccessDenied)

	foundComplianceConfig, exists, err = store.Get(ctx, complianceConfig.GetStandardId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceConfig, foundComplianceConfig)

	s.NoError(store.Delete(ctx, complianceConfig.GetStandardId()))
	foundComplianceConfig, exists, err = store.Get(ctx, complianceConfig.GetStandardId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceConfig)
	s.NoError(store.Delete(withNoAccessCtx, complianceConfig.GetStandardId()))

	var complianceConfigs []*storage.ComplianceConfig
	var complianceConfigIDs []string
	for i := 0; i < 200; i++ {
		complianceConfig := &storage.ComplianceConfig{}
		s.NoError(testutils.FullInit(complianceConfig, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceConfigs = append(complianceConfigs, complianceConfig)
		complianceConfigIDs = append(complianceConfigIDs, complianceConfig.GetStandardId())
	}

	s.NoError(store.UpsertMany(ctx, complianceConfigs))

	complianceConfigCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, complianceConfigCount)

	s.NoError(store.DeleteMany(ctx, complianceConfigIDs))

	complianceConfigCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, complianceConfigCount)
}
