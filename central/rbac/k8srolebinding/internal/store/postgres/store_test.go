// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type RolebindingsStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
}

func TestRolebindingsStore(t *testing.T) {
	suite.Run(t, new(RolebindingsStoreSuite))
}

func (s *RolebindingsStoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}
}

func (s *RolebindingsStoreSuite) TearDownTest() {
	s.envIsolator.RestoreAll()
}

func (s *RolebindingsStoreSuite) TestStore() {
	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(context.Background(), config)
	s.NoError(err)
	defer pool.Close()

	Destroy(pool)
	store := New(pool)

	k8SRoleBinding := &storage.K8SRoleBinding{}
	s.NoError(testutils.FullInit(k8SRoleBinding, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundK8SRoleBinding, exists, err := store.Get(k8SRoleBinding.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundK8SRoleBinding)

	s.NoError(store.Upsert(k8SRoleBinding))
	foundK8SRoleBinding, exists, err = store.Get(k8SRoleBinding.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(k8SRoleBinding, foundK8SRoleBinding)

	k8SRoleBindingCount, err := store.Count()
	s.NoError(err)
	s.Equal(k8SRoleBindingCount, 1)

	k8SRoleBindingExists, err := store.Exists(k8SRoleBinding.GetId())
	s.NoError(err)
	s.True(k8SRoleBindingExists)
	s.NoError(store.Upsert(k8SRoleBinding))

	foundK8SRoleBinding, exists, err = store.Get(k8SRoleBinding.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(k8SRoleBinding, foundK8SRoleBinding)

	s.NoError(store.Delete(k8SRoleBinding.GetId()))
	foundK8SRoleBinding, exists, err = store.Get(k8SRoleBinding.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundK8SRoleBinding)
}
