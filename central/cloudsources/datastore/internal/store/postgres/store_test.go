// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type CloudSourcesStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestCloudSourcesStore(t *testing.T) {
	suite.Run(t, new(CloudSourcesStoreSuite))
}

func (s *CloudSourcesStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *CloudSourcesStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE cloud_sources CASCADE")
	s.T().Log("cloud_sources", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *CloudSourcesStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *CloudSourcesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	cloudSource := &storage.CloudSource{}
	s.NoError(testutils.FullInit(cloudSource, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundCloudSource, exists, err := store.Get(ctx, cloudSource.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundCloudSource)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, cloudSource))
	foundCloudSource, exists, err = store.Get(ctx, cloudSource.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), cloudSource, foundCloudSource)

	cloudSourceCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, cloudSourceCount)
	cloudSourceCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(cloudSourceCount)

	cloudSourceExists, err := store.Exists(ctx, cloudSource.GetId())
	s.NoError(err)
	s.True(cloudSourceExists)
	s.NoError(store.Upsert(ctx, cloudSource))
	s.ErrorIs(store.Upsert(withNoAccessCtx, cloudSource), sac.ErrResourceAccessDenied)

	s.NoError(store.Delete(ctx, cloudSource.GetId()))
	foundCloudSource, exists, err = store.Get(ctx, cloudSource.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundCloudSource)
	s.ErrorIs(store.Delete(withNoAccessCtx, cloudSource.GetId()), sac.ErrResourceAccessDenied)

	var cloudSources []*storage.CloudSource
	var cloudSourceIDs []string
	for i := 0; i < 200; i++ {
		cloudSource := &storage.CloudSource{}
		s.NoError(testutils.FullInit(cloudSource, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		cloudSources = append(cloudSources, cloudSource)
		cloudSourceIDs = append(cloudSourceIDs, cloudSource.GetId())
	}

	s.NoError(store.UpsertMany(ctx, cloudSources))
	allCloudSource, err := store.GetAll(ctx)
	s.NoError(err)
	protoassert.ElementsMatch(s.T(), cloudSources, allCloudSource)

	cloudSourceCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, cloudSourceCount)

	s.NoError(store.DeleteMany(ctx, cloudSourceIDs))

	cloudSourceCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, cloudSourceCount)
}
