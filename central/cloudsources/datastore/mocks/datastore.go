// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountCloudSources mocks base method.
func (m *MockDataStore) CountCloudSources(ctx context.Context, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCloudSources", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCloudSources indicates an expected call of CountCloudSources.
func (mr *MockDataStoreMockRecorder) CountCloudSources(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCloudSources", reflect.TypeOf((*MockDataStore)(nil).CountCloudSources), ctx, query)
}

// DeleteCloudSource mocks base method.
func (m *MockDataStore) DeleteCloudSource(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudSource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudSource indicates an expected call of DeleteCloudSource.
func (mr *MockDataStoreMockRecorder) DeleteCloudSource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudSource", reflect.TypeOf((*MockDataStore)(nil).DeleteCloudSource), ctx, id)
}

// GetCloudSource mocks base method.
func (m *MockDataStore) GetCloudSource(ctx context.Context, id string) (*storage.CloudSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudSource", ctx, id)
	ret0, _ := ret[0].(*storage.CloudSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudSource indicates an expected call of GetCloudSource.
func (mr *MockDataStoreMockRecorder) GetCloudSource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudSource", reflect.TypeOf((*MockDataStore)(nil).GetCloudSource), ctx, id)
}

// ListCloudSources mocks base method.
func (m *MockDataStore) ListCloudSources(ctx context.Context, query *v1.Query) ([]*storage.CloudSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudSources", ctx, query)
	ret0, _ := ret[0].([]*storage.CloudSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudSources indicates an expected call of ListCloudSources.
func (mr *MockDataStoreMockRecorder) ListCloudSources(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudSources", reflect.TypeOf((*MockDataStore)(nil).ListCloudSources), ctx, query)
}

// UpsertCloudSource mocks base method.
func (m *MockDataStore) UpsertCloudSource(ctx context.Context, cloudSource *storage.CloudSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCloudSource", ctx, cloudSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudSource indicates an expected call of UpsertCloudSource.
func (mr *MockDataStoreMockRecorder) UpsertCloudSource(ctx, cloudSource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudSource", reflect.TypeOf((*MockDataStore)(nil).UpsertCloudSource), ctx, cloudSource)
}
