// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	m2m "github.com/stackrox/rox/central/auth/m2m"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// ForEachAuthM2MConfig mocks base method.
func (m *MockDataStore) ForEachAuthM2MConfig(ctx context.Context, fn func(*storage.AuthMachineToMachineConfig) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachAuthM2MConfig", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachAuthM2MConfig indicates an expected call of ForEachAuthM2MConfig.
func (mr *MockDataStoreMockRecorder) ForEachAuthM2MConfig(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachAuthM2MConfig", reflect.TypeOf((*MockDataStore)(nil).ForEachAuthM2MConfig), ctx, fn)
}

// GetAuthM2MConfig mocks base method.
func (m *MockDataStore) GetAuthM2MConfig(ctx context.Context, id string) (*storage.AuthMachineToMachineConfig, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthM2MConfig", ctx, id)
	ret0, _ := ret[0].(*storage.AuthMachineToMachineConfig)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuthM2MConfig indicates an expected call of GetAuthM2MConfig.
func (mr *MockDataStoreMockRecorder) GetAuthM2MConfig(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthM2MConfig", reflect.TypeOf((*MockDataStore)(nil).GetAuthM2MConfig), ctx, id)
}

// GetTokenExchanger mocks base method.
func (m *MockDataStore) GetTokenExchanger(ctx context.Context, issuer string) (m2m.TokenExchanger, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenExchanger", ctx, issuer)
	ret0, _ := ret[0].(m2m.TokenExchanger)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTokenExchanger indicates an expected call of GetTokenExchanger.
func (mr *MockDataStoreMockRecorder) GetTokenExchanger(ctx, issuer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenExchanger", reflect.TypeOf((*MockDataStore)(nil).GetTokenExchanger), ctx, issuer)
}

// InitializeTokenExchangers mocks base method.
func (m *MockDataStore) InitializeTokenExchangers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeTokenExchangers")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeTokenExchangers indicates an expected call of InitializeTokenExchangers.
func (mr *MockDataStoreMockRecorder) InitializeTokenExchangers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeTokenExchangers", reflect.TypeOf((*MockDataStore)(nil).InitializeTokenExchangers))
}

// RemoveAuthM2MConfig mocks base method.
func (m *MockDataStore) RemoveAuthM2MConfig(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAuthM2MConfig", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAuthM2MConfig indicates an expected call of RemoveAuthM2MConfig.
func (mr *MockDataStoreMockRecorder) RemoveAuthM2MConfig(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthM2MConfig", reflect.TypeOf((*MockDataStore)(nil).RemoveAuthM2MConfig), ctx, id)
}

// UpsertAuthM2MConfig mocks base method.
func (m *MockDataStore) UpsertAuthM2MConfig(ctx context.Context, config *storage.AuthMachineToMachineConfig) (*storage.AuthMachineToMachineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthM2MConfig", ctx, config)
	ret0, _ := ret[0].(*storage.AuthMachineToMachineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAuthM2MConfig indicates an expected call of UpsertAuthM2MConfig.
func (mr *MockDataStoreMockRecorder) UpsertAuthM2MConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthM2MConfig", reflect.TypeOf((*MockDataStore)(nil).UpsertAuthM2MConfig), ctx, config)
}
