// Code generated by MockGen. DO NOT EDIT.
// Source: kube_service_account.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/kube_service_account.go -source kube_service_account.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceAccountIssuerFetcher is a mock of ServiceAccountIssuerFetcher interface.
type MockServiceAccountIssuerFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountIssuerFetcherMockRecorder
}

// MockServiceAccountIssuerFetcherMockRecorder is the mock recorder for MockServiceAccountIssuerFetcher.
type MockServiceAccountIssuerFetcherMockRecorder struct {
	mock *MockServiceAccountIssuerFetcher
}

// NewMockServiceAccountIssuerFetcher creates a new mock instance.
func NewMockServiceAccountIssuerFetcher(ctrl *gomock.Controller) *MockServiceAccountIssuerFetcher {
	mock := &MockServiceAccountIssuerFetcher{ctrl: ctrl}
	mock.recorder = &MockServiceAccountIssuerFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountIssuerFetcher) EXPECT() *MockServiceAccountIssuerFetcherMockRecorder {
	return m.recorder
}

// GetServiceAccountIssuer mocks base method.
func (m *MockServiceAccountIssuerFetcher) GetServiceAccountIssuer() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountIssuer")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountIssuer indicates an expected call of GetServiceAccountIssuer.
func (mr *MockServiceAccountIssuerFetcherMockRecorder) GetServiceAccountIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountIssuer", reflect.TypeOf((*MockServiceAccountIssuerFetcher)(nil).GetServiceAccountIssuer))
}

// MockserviceAccountTokenReader is a mock of serviceAccountTokenReader interface.
type MockserviceAccountTokenReader struct {
	ctrl     *gomock.Controller
	recorder *MockserviceAccountTokenReaderMockRecorder
}

// MockserviceAccountTokenReaderMockRecorder is the mock recorder for MockserviceAccountTokenReader.
type MockserviceAccountTokenReaderMockRecorder struct {
	mock *MockserviceAccountTokenReader
}

// NewMockserviceAccountTokenReader creates a new mock instance.
func NewMockserviceAccountTokenReader(ctrl *gomock.Controller) *MockserviceAccountTokenReader {
	mock := &MockserviceAccountTokenReader{ctrl: ctrl}
	mock.recorder = &MockserviceAccountTokenReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceAccountTokenReader) EXPECT() *MockserviceAccountTokenReaderMockRecorder {
	return m.recorder
}

// readToken mocks base method.
func (m *MockserviceAccountTokenReader) readToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// readToken indicates an expected call of readToken.
func (mr *MockserviceAccountTokenReaderMockRecorder) readToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readToken", reflect.TypeOf((*MockserviceAccountTokenReader)(nil).readToken))
}
