// Code generated by MockGen. DO NOT EDIT.
// Source: set.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/set.go -source set.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	m2m "github.com/stackrox/rox/central/auth/m2m"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenExchangerSet is a mock of TokenExchangerSet interface.
type MockTokenExchangerSet struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExchangerSetMockRecorder
}

// MockTokenExchangerSetMockRecorder is the mock recorder for MockTokenExchangerSet.
type MockTokenExchangerSetMockRecorder struct {
	mock *MockTokenExchangerSet
}

// NewMockTokenExchangerSet creates a new mock instance.
func NewMockTokenExchangerSet(ctrl *gomock.Controller) *MockTokenExchangerSet {
	mock := &MockTokenExchangerSet{ctrl: ctrl}
	mock.recorder = &MockTokenExchangerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExchangerSet) EXPECT() *MockTokenExchangerSetMockRecorder {
	return m.recorder
}

// GetTokenExchanger mocks base method.
func (m *MockTokenExchangerSet) GetTokenExchanger(issuer string) (m2m.TokenExchanger, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenExchanger", issuer)
	ret0, _ := ret[0].(m2m.TokenExchanger)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTokenExchanger indicates an expected call of GetTokenExchanger.
func (mr *MockTokenExchangerSetMockRecorder) GetTokenExchanger(issuer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenExchanger", reflect.TypeOf((*MockTokenExchangerSet)(nil).GetTokenExchanger), issuer)
}

// NewTokenExchangerFromConfig mocks base method.
func (m *MockTokenExchangerSet) NewTokenExchangerFromConfig(ctx context.Context, config *storage.AuthMachineToMachineConfig) (m2m.TokenExchanger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTokenExchangerFromConfig", ctx, config)
	ret0, _ := ret[0].(m2m.TokenExchanger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTokenExchangerFromConfig indicates an expected call of NewTokenExchangerFromConfig.
func (mr *MockTokenExchangerSetMockRecorder) NewTokenExchangerFromConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTokenExchangerFromConfig", reflect.TypeOf((*MockTokenExchangerSet)(nil).NewTokenExchangerFromConfig), ctx, config)
}

// RemoveTokenExchanger mocks base method.
func (m *MockTokenExchangerSet) RemoveTokenExchanger(issuer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTokenExchanger", issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTokenExchanger indicates an expected call of RemoveTokenExchanger.
func (mr *MockTokenExchangerSetMockRecorder) RemoveTokenExchanger(issuer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTokenExchanger", reflect.TypeOf((*MockTokenExchangerSet)(nil).RemoveTokenExchanger), issuer)
}

// UpsertTokenExchanger mocks base method.
func (m *MockTokenExchangerSet) UpsertTokenExchanger(exchanger m2m.TokenExchanger, issuer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTokenExchanger", exchanger, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTokenExchanger indicates an expected call of UpsertTokenExchanger.
func (mr *MockTokenExchangerSetMockRecorder) UpsertTokenExchanger(exchanger, issuer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTokenExchanger", reflect.TypeOf((*MockTokenExchangerSet)(nil).UpsertTokenExchanger), exchanger, issuer)
}
