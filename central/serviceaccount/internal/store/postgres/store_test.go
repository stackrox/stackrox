// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type ServiceaccountsStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
}

func TestServiceaccountsStore(t *testing.T) {
	suite.Run(t, new(ServiceaccountsStoreSuite))
}

func (s *ServiceaccountsStoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}
}

func (s *ServiceaccountsStoreSuite) TearDownTest() {
	s.envIsolator.RestoreAll()
}

func (s *ServiceaccountsStoreSuite) TestStore() {
	ctx := context.Background()

	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(ctx, config)
	s.NoError(err)
	defer pool.Close()

	Destroy(ctx, pool)
	store := New(ctx, pool)

	serviceAccount := &storage.ServiceAccount{}
	s.NoError(testutils.FullInit(serviceAccount, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundServiceAccount, exists, err := store.Get(ctx, serviceAccount.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundServiceAccount)

	s.NoError(store.Upsert(ctx, serviceAccount))
	foundServiceAccount, exists, err = store.Get(ctx, serviceAccount.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(serviceAccount, foundServiceAccount)

	serviceAccountCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(serviceAccountCount, 1)

	serviceAccountExists, err := store.Exists(ctx, serviceAccount.GetId())
	s.NoError(err)
	s.True(serviceAccountExists)
	s.NoError(store.Upsert(ctx, serviceAccount))

	foundServiceAccount, exists, err = store.Get(ctx, serviceAccount.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(serviceAccount, foundServiceAccount)

	s.NoError(store.Delete(ctx, serviceAccount.GetId()))
	foundServiceAccount, exists, err = store.Get(ctx, serviceAccount.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundServiceAccount)
}
