// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type NamespacesStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
	store       Store
	pool        *pgxpool.Pool
}

func TestNamespacesStore(t *testing.T) {
	suite.Run(t, new(NamespacesStoreSuite))
}

func (s *NamespacesStoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}

	ctx := sac.WithAllAccess(context.Background())

	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(ctx, config)
	s.Require().NoError(err)

	Destroy(ctx, pool)

	s.pool = pool
	s.store = New(ctx, pool)
}

func (s *NamespacesStoreSuite) TearDownTest() {
	s.pool.Close()
	s.envIsolator.RestoreAll()
}

func (s *NamespacesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	namespaceMetadata := &storage.NamespaceMetadata{}
	s.NoError(testutils.FullInit(namespaceMetadata, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundNamespaceMetadata, exists, err := store.Get(ctx, namespaceMetadata.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundNamespaceMetadata)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, namespaceMetadata))
	foundNamespaceMetadata, exists, err = store.Get(ctx, namespaceMetadata.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(namespaceMetadata, foundNamespaceMetadata)

	namespaceMetadataCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, namespaceMetadataCount)

	namespaceMetadataExists, err := store.Exists(ctx, namespaceMetadata.GetId())
	s.NoError(err)
	s.True(namespaceMetadataExists)
	s.NoError(store.Upsert(ctx, namespaceMetadata))
	s.ErrorIs(store.Upsert(withNoAccessCtx, namespaceMetadata), sac.ErrResourceAccessDenied)

	foundNamespaceMetadata, exists, err = store.Get(ctx, namespaceMetadata.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(namespaceMetadata, foundNamespaceMetadata)

	s.NoError(store.Delete(ctx, namespaceMetadata.GetId()))
	foundNamespaceMetadata, exists, err = store.Get(ctx, namespaceMetadata.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundNamespaceMetadata)

	var namespaceMetadatas []*storage.NamespaceMetadata
	for i := 0; i < 200; i++ {
		namespaceMetadata := &storage.NamespaceMetadata{}
		s.NoError(testutils.FullInit(namespaceMetadata, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		namespaceMetadatas = append(namespaceMetadatas, namespaceMetadata)
	}

	s.NoError(store.UpsertMany(ctx, namespaceMetadatas))

	namespaceMetadataCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, namespaceMetadataCount)
}
func (s *NamespacesStoreSuite) TestSAC() {
	obj := &storage.NamespaceMetadata{}
	s.NoError(testutils.FullInit(obj, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	withAllAccessCtx := sac.WithAllAccess(context.Background())
	withNoAccessCtx := sac.WithNoAccess(context.Background())
	withAccessToDifferentNsCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(obj.GetClusterId()),
			sac.NamespaceScopeKeys("unknown ns"),
		))
	withAccessCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(obj.GetClusterId()),
			sac.NamespaceScopeKeys(obj.GetId()),
		))
	withAccessToClusterCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(obj.GetClusterId()),
		))
	withNoAccessToClusterCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys("unknown cluster"),
		))

	store := s.store

	for ctx, expectedErr := range map[context.Context]error{
		withAllAccessCtx:           nil,
		withNoAccessCtx:            sac.ErrResourceAccessDenied,
		withNoAccessToClusterCtx:   sac.ErrResourceAccessDenied,
		withAccessToDifferentNsCtx: sac.ErrResourceAccessDenied,
		withAccessCtx:              nil,
		withAccessToClusterCtx:     nil,
	} {
		s.T().Run("Upsert", func(t *testing.T) {
			assert.ErrorIs(t, store.Upsert(ctx, obj), expectedErr)
		})
		s.T().Run("UpsertMany", func(t *testing.T) {
			assert.ErrorIs(t, store.UpsertMany(ctx, []*storage.NamespaceMetadata{obj}), expectedErr)
		})
	}
}
