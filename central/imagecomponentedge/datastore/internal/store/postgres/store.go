// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "image_component_relation"
	countStmt  = "SELECT COUNT(*) FROM image_component_relation"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM image_component_relation WHERE ImageId = $1 AND OperatingName = $2 AND ComponentName = $3 AND ComponentVersion = $4)"

	getStmt    = "SELECT serialized FROM image_component_relation WHERE ImageId = $1 AND OperatingName = $2 AND ComponentName = $3 AND ComponentVersion = $4"
	deleteStmt = "DELETE FROM image_component_relation WHERE ImageId = $1 AND OperatingName = $2 AND ComponentName = $3 AND ComponentVersion = $4"
	walkStmt   = "SELECT serialized FROM image_component_relation"

	batchAfter = 100

	// using copyFrom, we may not even want to batch.  It would probably be simpler
	// to deal with failures if we just sent it all.  Something to think about as we
	// proceed and move into more e2e and larger performance testing
	batchSize = 10000
)

var (
	log    = logging.LoggerForModule()
	schema = walker.Walk(reflect.TypeOf((*storage.ImageComponentEdge)(nil)), baseTable).
		WithReference(walker.Walk(reflect.TypeOf((*storage.Image)(nil)), "images")).
		WithReference(walker.Walk(reflect.TypeOf((*storage.ImageComponent)(nil)), "image_component"))
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, imageId string, operatingName string, componentName string, componentVersion string) (bool, error)
	Get(ctx context.Context, imageId string, operatingName string, componentName string, componentVersion string) (*storage.ImageComponentEdge, bool, error)

	Walk(ctx context.Context, fn func(obj *storage.ImageComponentEdge) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableImageComponentRelation(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists image_component_relation (
    image_component_Id varchar,
    image_component_Name varchar,
    image_component_Version varchar,
    Id varchar,
    LayerIndex integer,
    Location varchar,
    ImageId varchar,
    OperatingName varchar,
    ComponentName varchar,
    ComponentVersion varchar,
        
    PRIMARY KEY(ImageId, OperatingName, ComponentName, ComponentVersion),
    CONSTRAINT fk_parent_table FOREIGN KEY (images_Id, images_Scan_OperatingSystem) REFERENCES images(Id, Scan_OperatingSystem) ON DELETE CASCADE
    CONSTRAINT fk_parent_table FOREIGN KEY (image_component_Id, image_component_Name, image_component_Version) REFERENCES image_component(Id, Name, Version) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		log.Panicf("Error creating table %s: %v", table, err)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			log.Panicf("Error creating index %s: %v", index, err)
		}
	}

}

<<<<<<< HEAD
func insertIntoImageComponentRelation(ctx context.Context, tx pgx.Tx, obj *storage.ImageComponentEdge, images_Id string, images_OperatingSystem string, image_component_Id string, image_component_Name string, image_component_Version string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		image_component_Id,
		image_component_Name,
		image_component_Version,
		obj.GetId(),
		obj.GetLayerIndex(),
		obj.GetLocation(),
		obj.GetImageId(),
		obj.GetOperatingName(),
		obj.GetComponentName(),
		obj.GetComponentVersion(),
	}

	finalStr := "INSERT INTO image_component_relation (image_component_Id, image_component_Name, image_component_Version, Id, LayerIndex, Location, ImageId, OperatingName, ComponentName, ComponentVersion) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT(image_component_Id, image_component_Name, image_component_Version, images_Id, images_Scan_OperatingSystem, ImageId, OperatingName, ComponentName, ComponentVersion) DO UPDATE SET image_component_Id = EXCLUDED.image_component_Id, image_component_Name = EXCLUDED.image_component_Name, image_component_Version = EXCLUDED.image_component_Version, Id = EXCLUDED.Id, LayerIndex = EXCLUDED.LayerIndex, Location = EXCLUDED.Location, ImageId = EXCLUDED.ImageId, OperatingName = EXCLUDED.OperatingName, ComponentName = EXCLUDED.ComponentName, ComponentVersion = EXCLUDED.ComponentVersion"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func (s *storeImpl) copyFromImageComponentRelation(ctx context.Context, tx pgx.Tx, images_Id string, images_OperatingSystem string, image_component_Id string, image_component_Name string, image_component_Version string, objs ...*storage.ImageComponentEdge) error {

	inputRows := [][]interface{}{}

	var err error

	copyCols := []string{

		"image_component_id",

		"image_component_name",

		"image_component_version",

		"id",

		"layerindex",

		"location",

		"imageid",

		"operatingname",

		"componentname",

		"componentversion",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj in the loop is not used as it only consists of the parent id and the idx.  Putting this here as a stop gap to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{

			image_component_Id,

			image_component_Name,

			image_component_Version,

			obj.GetId(),

			obj.GetLayerIndex(),

			obj.GetLocation(),

			obj.GetImageId(),

			obj.GetOperatingName(),

			obj.GetComponentName(),

			obj.GetComponentVersion(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			_, err = tx.CopyFrom(ctx, pgx.Identifier{"image_component_relation"}, copyCols, pgx.CopyFromRows(inputRows))

			if err != nil {
				return err
			}

			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return err
}

=======
>>>>>>> 4cabd0fe2 (skip mutators on relations)
// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableImageComponentRelation(ctx, db)

	return &storeImpl{
		db: db,
	}
}

<<<<<<< HEAD
func (s *storeImpl) copyFrom(ctx context.Context, objs ...*storage.ImageComponentEdge) error {
	conn, release := s.acquireConn(ctx, ops.Get, "ImageComponentEdge")
	defer release()

	tx, err := conn.Begin(ctx)
	if err != nil {
		return err
	}

	if err := s.copyFromImageComponentRelation(ctx, tx, objs...); err != nil {
		if err := tx.Rollback(ctx); err != nil {
			return err
		}
		return err
	}
	if err := tx.Commit(ctx); err != nil {
		return err
	}
	return nil
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.ImageComponentEdge) error {
	conn, release := s.acquireConn(ctx, ops.Get, "ImageComponentEdge")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoImageComponentRelation(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.ImageComponentEdge) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "ImageComponentEdge")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.ImageComponentEdge) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "ImageComponentEdge")

	if len(objs) < batchAfter {
		return s.upsert(ctx, objs...)
	} else {
		return s.copyFrom(ctx, objs...)
	}
}

=======
>>>>>>> 4cabd0fe2 (skip mutators on relations)
// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "ImageComponentEdge")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, imageId string, operatingName string, componentName string, componentVersion string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "ImageComponentEdge")

	row := s.db.QueryRow(ctx, existsStmt, imageId, operatingName, componentName, componentVersion)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, imageId string, operatingName string, componentName string, componentVersion string) (*storage.ImageComponentEdge, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "ImageComponentEdge")

	conn, release := s.acquireConn(ctx, ops.Get, "ImageComponentEdge")
	defer release()

	row := conn.QueryRow(ctx, getStmt, imageId, operatingName, componentName, componentVersion)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.ImageComponentEdge
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.ImageComponentEdge) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.ImageComponentEdge
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableImageComponentRelation(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS image_component_relation CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableImageComponentRelation(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
