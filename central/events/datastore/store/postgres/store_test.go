// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type EventsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestEventsStore(t *testing.T) {
	suite.Run(t, new(EventsStoreSuite))
}

func (s *EventsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *EventsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE events CASCADE")
	s.T().Log("events", tag)
	s.NoError(err)
}

func (s *EventsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *EventsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	event := &storage.Event{}
	s.NoError(testutils.FullInit(event, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundEvent, exists, err := store.Get(ctx, event.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundEvent)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, event))
	foundEvent, exists, err = store.Get(ctx, event.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(event, foundEvent)

	eventCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, eventCount)
	eventCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(eventCount)

	eventExists, err := store.Exists(ctx, event.GetId())
	s.NoError(err)
	s.True(eventExists)
	s.NoError(store.Upsert(ctx, event))
	s.ErrorIs(store.Upsert(withNoAccessCtx, event), sac.ErrResourceAccessDenied)

	foundEvent, exists, err = store.Get(ctx, event.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(event, foundEvent)

	s.NoError(store.Delete(ctx, event.GetId()))
	foundEvent, exists, err = store.Get(ctx, event.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundEvent)
	s.ErrorIs(store.Delete(withNoAccessCtx, event.GetId()), sac.ErrResourceAccessDenied)

	var events []*storage.Event
	var eventIDs []string
	for i := 0; i < 200; i++ {
		event := &storage.Event{}
		s.NoError(testutils.FullInit(event, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		events = append(events, event)
		eventIDs = append(eventIDs, event.GetId())
	}

	s.NoError(store.UpsertMany(ctx, events))

	eventCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, eventCount)

	s.NoError(store.DeleteMany(ctx, eventIDs))

	eventCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, eventCount)
}
