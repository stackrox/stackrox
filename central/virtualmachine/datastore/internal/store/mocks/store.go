// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/store.go -source store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockVirtualMachineStore is a mock of VirtualMachineStore interface.
type MockVirtualMachineStore struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineStoreMockRecorder
	isgomock struct{}
}

// MockVirtualMachineStoreMockRecorder is the mock recorder for MockVirtualMachineStore.
type MockVirtualMachineStoreMockRecorder struct {
	mock *MockVirtualMachineStore
}

// NewMockVirtualMachineStore creates a new mock instance.
func NewMockVirtualMachineStore(ctrl *gomock.Controller) *MockVirtualMachineStore {
	mock := &MockVirtualMachineStore{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineStore) EXPECT() *MockVirtualMachineStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockVirtualMachineStore) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockVirtualMachineStoreMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockVirtualMachineStore)(nil).Count), ctx, q)
}

// DeleteMany mocks base method.
func (m *MockVirtualMachineStore) DeleteMany(ctx context.Context, identifiers []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, identifiers)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockVirtualMachineStoreMockRecorder) DeleteMany(ctx, identifiers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockVirtualMachineStore)(nil).DeleteMany), ctx, identifiers)
}

// Exists mocks base method.
func (m *MockVirtualMachineStore) Exists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockVirtualMachineStoreMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockVirtualMachineStore)(nil).Exists), ctx, id)
}

// Get mocks base method.
func (m *MockVirtualMachineStore) Get(ctx context.Context, id string) (*storage.VirtualMachine, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.VirtualMachine)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineStoreMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineStore)(nil).Get), ctx, id)
}

// UpsertMany mocks base method.
func (m *MockVirtualMachineStore) UpsertMany(ctx context.Context, objs []*storage.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockVirtualMachineStoreMockRecorder) UpsertMany(ctx, objs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockVirtualMachineStore)(nil).UpsertMany), ctx, objs)
}

// Walk mocks base method.
func (m *MockVirtualMachineStore) Walk(ctx context.Context, fn func(*storage.VirtualMachine) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockVirtualMachineStoreMockRecorder) Walk(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockVirtualMachineStore)(nil).Walk), ctx, fn)
}
