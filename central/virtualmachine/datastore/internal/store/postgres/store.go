// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"strings"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/pkg/errors"
	"github.com/stackrox/rox/central/metrics"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	pgSearch "github.com/stackrox/rox/pkg/search/postgres"
	"gorm.io/gorm"
)

const (
	baseTable = "virtual_machines"
	storeName = "VirtualMachine"
)

var (
	log            = logging.LoggerForModule()
	schema         = pkgSchema.VirtualMachinesSchema
	targetResource = resources.VirtualMachine
)

type (
	storeType = storage.VirtualMachine
	callback  = func(obj *storeType) error
)

// Store is the interface to interact with the storage for storage.VirtualMachine
type Store interface {
	Upsert(ctx context.Context, obj *storeType) error
	UpsertMany(ctx context.Context, objs []*storeType) error
	Delete(ctx context.Context, id string) error
	DeleteByQuery(ctx context.Context, q *v1.Query) ([]string, error)
	DeleteMany(ctx context.Context, identifiers []string) error
	PruneMany(ctx context.Context, identifiers []string) error

	Count(ctx context.Context, q *v1.Query) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Search(ctx context.Context, q *v1.Query) ([]search.Result, error)

	Get(ctx context.Context, id string) (*storeType, bool, error)
	// Deprecated: use GetByQueryFn instead
	GetByQuery(ctx context.Context, query *v1.Query) ([]*storeType, error)
	GetByQueryFn(ctx context.Context, query *v1.Query, fn callback) error
	GetMany(ctx context.Context, identifiers []string) ([]*storeType, []int, error)
	GetIDs(ctx context.Context) ([]string, error)

	Walk(ctx context.Context, fn callback) error
	WalkByQuery(ctx context.Context, query *v1.Query, fn callback) error
}

// New returns a new Store instance using the provided sql instance.
func New(db postgres.DB) Store {
	return pgSearch.NewGenericStore[storeType, *storeType](
		db,
		schema,
		pkGetter,
		insertIntoVirtualMachines,
		copyFromVirtualMachines,
		metricsSetAcquireDBConnDuration,
		metricsSetPostgresOperationDurationTime,
		isUpsertAllowed,
		targetResource,
		nil,
		nil,
	)
}

// region Helper functions

func pkGetter(obj *storeType) string {
	return obj.GetId()
}

func metricsSetPostgresOperationDurationTime(start time.Time, op ops.Op) {
	metrics.SetPostgresOperationDurationTime(start, op, storeName)
}

func metricsSetAcquireDBConnDuration(start time.Time, op ops.Op) {
	metrics.SetAcquireDBConnDuration(start, op, storeName)
}
func isUpsertAllowed(ctx context.Context, objs ...*storeType) error {
	scopeChecker := sac.GlobalAccessScopeChecker(ctx).AccessMode(storage.Access_READ_WRITE_ACCESS).Resource(targetResource)
	if scopeChecker.IsAllowed() {
		return nil
	}
	var deniedIDs []string
	for _, obj := range objs {
		subScopeChecker := scopeChecker.ClusterID(obj.GetClusterId()).Namespace(obj.GetNamespace())
		if !subScopeChecker.IsAllowed() {
			deniedIDs = append(deniedIDs, obj.GetId())
		}
	}
	if len(deniedIDs) != 0 {
		return errors.Wrapf(sac.ErrResourceAccessDenied, "modifying virtualMachines with IDs [%s] was denied", strings.Join(deniedIDs, ", "))
	}
	return nil
}

func insertIntoVirtualMachines(batch *pgx.Batch, obj *storage.VirtualMachine) error {

	serialized, marshalErr := obj.MarshalVT()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		pgutils.NilOrUUID(obj.GetId()),
		obj.GetNamespace(),
		pgutils.NilOrUUID(obj.GetClusterId()),
		serialized,
	}

	finalStr := "INSERT INTO virtual_machines (Id, Namespace, ClusterId, serialized) VALUES($1, $2, $3, $4) ON CONFLICT(Id) DO UPDATE SET Id = EXCLUDED.Id, Namespace = EXCLUDED.Namespace, ClusterId = EXCLUDED.ClusterId, serialized = EXCLUDED.serialized"
	batch.Queue(finalStr, values...)

	var query string

	for childIndex, child := range obj.GetScan().GetComponents() {
		if err := insertIntoVirtualMachinesComponents(batch, child, obj.GetId(), childIndex); err != nil {
			return err
		}
	}

	query = "delete from virtual_machines_components where virtual_machines_Id = $1 AND idx >= $2"
	batch.Queue(query, pgutils.NilOrUUID(obj.GetId()), len(obj.GetScan().GetComponents()))
	return nil
}

func insertIntoVirtualMachinesComponents(batch *pgx.Batch, obj *storage.EmbeddedVirtualMachineScanComponent, virtualMachineID string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		pgutils.NilOrUUID(virtualMachineID),
		idx,
	}

	finalStr := "INSERT INTO virtual_machines_components (virtual_machines_Id, idx) VALUES($1, $2) ON CONFLICT(virtual_machines_Id, idx) DO UPDATE SET virtual_machines_Id = EXCLUDED.virtual_machines_Id, idx = EXCLUDED.idx"
	batch.Queue(finalStr, values...)

	var query string

	for childIndex, child := range obj.GetVulns() {
		if err := insertIntoVirtualMachinesComponentsVulns(batch, child, virtualMachineID, idx, childIndex); err != nil {
			return err
		}
	}

	query = "delete from virtual_machines_components_vulns where virtual_machines_Id = $1 AND virtual_machines_components_idx = $2 AND idx >= $3"
	batch.Queue(query, pgutils.NilOrUUID(virtualMachineID), idx, len(obj.GetVulns()))
	return nil
}

func insertIntoVirtualMachinesComponentsVulns(batch *pgx.Batch, obj *storage.EmbeddedVirtualMachineVulnerability, virtualMachineID string, virtualMachineComponentIdx int, idx int) error {

	values := []interface{}{
		// parent primary keys start
		pgutils.NilOrUUID(virtualMachineID),
		virtualMachineComponentIdx,
		idx,
		obj.GetAdvisory().GetName(),
		obj.GetAdvisory().GetLink(),
		obj.GetEpss().GetEpssProbability(),
	}

	finalStr := "INSERT INTO virtual_machines_components_vulns (virtual_machines_Id, virtual_machines_components_idx, idx, Advisory_Name, Advisory_Link, Epss_EpssProbability) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(virtual_machines_Id, virtual_machines_components_idx, idx) DO UPDATE SET virtual_machines_Id = EXCLUDED.virtual_machines_Id, virtual_machines_components_idx = EXCLUDED.virtual_machines_components_idx, idx = EXCLUDED.idx, Advisory_Name = EXCLUDED.Advisory_Name, Advisory_Link = EXCLUDED.Advisory_Link, Epss_EpssProbability = EXCLUDED.Epss_EpssProbability"
	batch.Queue(finalStr, values...)

	return nil
}

func copyFromVirtualMachines(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, objs ...*storage.VirtualMachine) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	// This is a copy so first we must delete the rows and re-add them
	// Which is essentially the desired behaviour of an upsert.
	deletes := make([]string, 0, batchSize)

	copyCols := []string{
		"id",
		"namespace",
		"clusterid",
		"serialized",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		serialized, marshalErr := obj.MarshalVT()
		if marshalErr != nil {
			return marshalErr
		}

		inputRows = append(inputRows, []interface{}{
			pgutils.NilOrUUID(obj.GetId()),
			obj.GetNamespace(),
			pgutils.NilOrUUID(obj.GetClusterId()),
			serialized,
		})

		// Add the ID to be deleted.
		deletes = append(deletes, obj.GetId())

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if err := s.DeleteMany(ctx, deletes); err != nil {
				return err
			}
			// clear the inserts and vals for the next batch
			deletes = deletes[:0]

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"virtual_machines"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for idx, obj := range objs {
		_ = idx // idx may or may not be used depending on how nested we are, so avoid compile-time errors.

		if err := copyFromVirtualMachinesComponents(ctx, s, tx, obj.GetId(), obj.GetScan().GetComponents()...); err != nil {
			return err
		}
	}

	return nil
}

func copyFromVirtualMachinesComponents(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, virtualMachineID string, objs ...*storage.EmbeddedVirtualMachineScanComponent) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	copyCols := []string{
		"virtual_machines_id",
		"idx",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{
			pgutils.NilOrUUID(virtualMachineID),
			idx,
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"virtual_machines_components"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	for idx, obj := range objs {
		_ = idx // idx may or may not be used depending on how nested we are, so avoid compile-time errors.

		if err := copyFromVirtualMachinesComponentsVulns(ctx, s, tx, virtualMachineID, idx, obj.GetVulns()...); err != nil {
			return err
		}
	}

	return nil
}

func copyFromVirtualMachinesComponentsVulns(ctx context.Context, s pgSearch.Deleter, tx *postgres.Tx, virtualMachineID string, virtualMachineComponentIdx int, objs ...*storage.EmbeddedVirtualMachineVulnerability) error {
	batchSize := pgSearch.MaxBatchSize
	if len(objs) < batchSize {
		batchSize = len(objs)
	}
	inputRows := make([][]interface{}, 0, batchSize)

	copyCols := []string{
		"virtual_machines_id",
		"virtual_machines_components_idx",
		"idx",
		"advisory_name",
		"advisory_link",
		"epss_epssprobability",
	}

	for idx, obj := range objs {
		// Todo: ROX-9499 Figure out how to more cleanly template around this issue.
		log.Debugf("This is here for now because there is an issue with pods_TerminatedInstances where the obj "+
			"in the loop is not used as it only consists of the parent ID and the index.  Putting this here as a stop gap "+
			"to simply use the object.  %s", obj)

		inputRows = append(inputRows, []interface{}{
			pgutils.NilOrUUID(virtualMachineID),
			virtualMachineComponentIdx,
			idx,
			obj.GetAdvisory().GetName(),
			obj.GetAdvisory().GetLink(),
			obj.GetEpss().GetEpssProbability(),
		})

		// if we hit our batch size we need to push the data
		if (idx+1)%batchSize == 0 || idx == len(objs)-1 {
			// copy does not upsert so have to delete first.  parent deletion cascades so only need to
			// delete for the top level parent

			if _, err := tx.CopyFrom(ctx, pgx.Identifier{"virtual_machines_components_vulns"}, copyCols, pgx.CopyFromRows(inputRows)); err != nil {
				return err
			}
			// clear the input rows for the next batch
			inputRows = inputRows[:0]
		}
	}

	return nil
}

// endregion Helper functions

// region Used for testing

// CreateTableAndNewStore returns a new Store instance for testing.
func CreateTableAndNewStore(ctx context.Context, db postgres.DB, gormDB *gorm.DB) Store {
	pkgSchema.ApplySchemaForTable(ctx, gormDB, baseTable)
	return New(db)
}

// Destroy drops the tables associated with the target object type.
func Destroy(ctx context.Context, db postgres.DB) {
	dropTableVirtualMachines(ctx, db)
}

func dropTableVirtualMachines(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS virtual_machines CASCADE")
	dropTableVirtualMachinesComponents(ctx, db)

}

func dropTableVirtualMachinesComponents(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS virtual_machines_components CASCADE")
	dropTableVirtualMachinesComponentsVulns(ctx, db)

}

func dropTableVirtualMachinesComponentsVulns(ctx context.Context, db postgres.DB) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS virtual_machines_components_vulns CASCADE")

}

// endregion Used for testing
