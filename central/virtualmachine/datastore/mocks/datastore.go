// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CountVirtualMachines mocks base method.
func (m *MockDataStore) CountVirtualMachines(ctx context.Context, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVirtualMachines", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVirtualMachines indicates an expected call of CountVirtualMachines.
func (mr *MockDataStoreMockRecorder) CountVirtualMachines(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVirtualMachines", reflect.TypeOf((*MockDataStore)(nil).CountVirtualMachines), ctx, query)
}

// DeleteVirtualMachines mocks base method.
func (m *MockDataStore) DeleteVirtualMachines(ctx context.Context, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMachines", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachines indicates an expected call of DeleteVirtualMachines.
func (mr *MockDataStoreMockRecorder) DeleteVirtualMachines(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachines", reflect.TypeOf((*MockDataStore)(nil).DeleteVirtualMachines), varargs...)
}

// Exists mocks base method.
func (m *MockDataStore) Exists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDataStoreMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDataStore)(nil).Exists), ctx, id)
}

// GetVirtualMachine mocks base method.
func (m *MockDataStore) GetVirtualMachine(ctx context.Context, id string) (*storage.VirtualMachine, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", ctx, id)
	ret0, _ := ret[0].(*storage.VirtualMachine)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine.
func (mr *MockDataStoreMockRecorder) GetVirtualMachine(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockDataStore)(nil).GetVirtualMachine), ctx, id)
}

// SearchRawVirtualMachines mocks base method.
func (m *MockDataStore) SearchRawVirtualMachines(ctx context.Context, query *v1.Query) ([]*storage.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRawVirtualMachines", ctx, query)
	ret0, _ := ret[0].([]*storage.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawVirtualMachines indicates an expected call of SearchRawVirtualMachines.
func (mr *MockDataStoreMockRecorder) SearchRawVirtualMachines(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawVirtualMachines", reflect.TypeOf((*MockDataStore)(nil).SearchRawVirtualMachines), ctx, query)
}

// UpsertVirtualMachine mocks base method.
func (m *MockDataStore) UpsertVirtualMachine(ctx context.Context, virtualMachine *storage.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertVirtualMachine", ctx, virtualMachine)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVirtualMachine indicates an expected call of UpsertVirtualMachine.
func (mr *MockDataStoreMockRecorder) UpsertVirtualMachine(ctx, virtualMachine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVirtualMachine", reflect.TypeOf((*MockDataStore)(nil).UpsertVirtualMachine), ctx, virtualMachine)
}
