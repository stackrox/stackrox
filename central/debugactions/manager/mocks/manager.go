// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v2 "github.com/stackrox/rox/generated/api/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// DeleteAction mocks base method.
func (m *MockManager) DeleteAction(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockManagerMockRecorder) DeleteAction(identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockManager)(nil).DeleteAction), identifier)
}

// ExecRegisteredAction mocks base method.
func (m *MockManager) ExecRegisteredAction(identifier string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecRegisteredAction", identifier)
}

// ExecRegisteredAction indicates an expected call of ExecRegisteredAction.
func (mr *MockManagerMockRecorder) ExecRegisteredAction(identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecRegisteredAction", reflect.TypeOf((*MockManager)(nil).ExecRegisteredAction), identifier)
}

// GetActionStatus mocks base method.
func (m *MockManager) GetActionStatus(identifier string) (*v2.ActionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionStatus", identifier)
	ret0, _ := ret[0].(*v2.ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionStatus indicates an expected call of GetActionStatus.
func (mr *MockManagerMockRecorder) GetActionStatus(identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionStatus", reflect.TypeOf((*MockManager)(nil).GetActionStatus), identifier)
}

// ProceedAll mocks base method.
func (m *MockManager) ProceedAll(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedAll", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProceedAll indicates an expected call of ProceedAll.
func (mr *MockManagerMockRecorder) ProceedAll(identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedAll", reflect.TypeOf((*MockManager)(nil).ProceedAll), identifier)
}

// ProceedOldest mocks base method.
func (m *MockManager) ProceedOldest(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedOldest", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProceedOldest indicates an expected call of ProceedOldest.
func (mr *MockManagerMockRecorder) ProceedOldest(identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedOldest", reflect.TypeOf((*MockManager)(nil).ProceedOldest), identifier)
}

// RegisterAction mocks base method.
func (m *MockManager) RegisterAction(action *v2.DebugAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAction", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAction indicates an expected call of RegisterAction.
func (mr *MockManagerMockRecorder) RegisterAction(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAction", reflect.TypeOf((*MockManager)(nil).RegisterAction), action)
}

// Start mocks base method.
func (m *MockManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}
