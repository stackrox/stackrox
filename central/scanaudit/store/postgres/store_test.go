// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ScanAuditsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestScanAuditsStore(t *testing.T) {
	suite.Run(t, new(ScanAuditsStoreSuite))
}

func (s *ScanAuditsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ScanAuditsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE scan_audits CASCADE")
	s.T().Log("scan_audits", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *ScanAuditsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ScanAuditsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	scanAudit := &storage.ScanAudit{}
	s.NoError(testutils.FullInit(scanAudit, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundScanAudit, exists, err := store.Get(ctx, scanAudit.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundScanAudit)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, scanAudit))
	foundScanAudit, exists, err = store.Get(ctx, scanAudit.GetId())
	s.NoError(err)
	s.True(exists)
	protoassert.Equal(s.T(), scanAudit, foundScanAudit)

	scanAuditCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, scanAuditCount)
	scanAuditCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(scanAuditCount)

	scanAuditExists, err := store.Exists(ctx, scanAudit.GetId())
	s.NoError(err)
	s.True(scanAuditExists)
	s.NoError(store.Upsert(ctx, scanAudit))
	s.ErrorIs(store.Upsert(withNoAccessCtx, scanAudit), sac.ErrResourceAccessDenied)

	s.NoError(store.Delete(ctx, scanAudit.GetId()))
	foundScanAudit, exists, err = store.Get(ctx, scanAudit.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundScanAudit)
	s.NoError(store.Delete(withNoAccessCtx, scanAudit.GetId()))

	var scanAudits []*storage.ScanAudit
	var scanAuditIDs []string
	for i := 0; i < 200; i++ {
		scanAudit := &storage.ScanAudit{}
		s.NoError(testutils.FullInit(scanAudit, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		scanAudits = append(scanAudits, scanAudit)
		scanAuditIDs = append(scanAuditIDs, scanAudit.GetId())
	}

	s.NoError(store.UpsertMany(ctx, scanAudits))
	allScanAudit, err := store.GetAll(ctx)
	s.NoError(err)
	protoassert.ElementsMatch(s.T(), scanAudits, allScanAudit)

	scanAuditCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, scanAuditCount)

	s.NoError(store.DeleteMany(ctx, scanAuditIDs))

	scanAuditCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, scanAuditCount)
}
