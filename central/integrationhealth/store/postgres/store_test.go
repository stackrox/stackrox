// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type IntegrationHealthsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestIntegrationHealthsStore(t *testing.T) {
	suite.Run(t, new(IntegrationHealthsStoreSuite))
}

func (s *IntegrationHealthsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *IntegrationHealthsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE integration_healths CASCADE")
	s.T().Log("integration_healths", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *IntegrationHealthsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *IntegrationHealthsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	integrationHealth := &storage.IntegrationHealth{}
	s.NoError(testutils.FullInit(integrationHealth, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundIntegrationHealth, exists, err := store.Get(ctx, integrationHealth.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundIntegrationHealth)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, integrationHealth))
	foundIntegrationHealth, exists, err = store.Get(ctx, integrationHealth.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(integrationHealth, foundIntegrationHealth)

	integrationHealthCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, integrationHealthCount)
	integrationHealthCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(integrationHealthCount)

	integrationHealthExists, err := store.Exists(ctx, integrationHealth.GetId())
	s.NoError(err)
	s.True(integrationHealthExists)
	s.NoError(store.Upsert(ctx, integrationHealth))
	s.ErrorIs(store.Upsert(withNoAccessCtx, integrationHealth), sac.ErrResourceAccessDenied)

	foundIntegrationHealth, exists, err = store.Get(ctx, integrationHealth.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(integrationHealth, foundIntegrationHealth)

	s.NoError(store.Delete(ctx, integrationHealth.GetId()))
	foundIntegrationHealth, exists, err = store.Get(ctx, integrationHealth.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundIntegrationHealth)
	s.ErrorIs(store.Delete(withNoAccessCtx, integrationHealth.GetId()), sac.ErrResourceAccessDenied)

	var integrationHealths []*storage.IntegrationHealth
	var integrationHealthIDs []string
	for i := 0; i < 200; i++ {
		integrationHealth := &storage.IntegrationHealth{}
		s.NoError(testutils.FullInit(integrationHealth, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		integrationHealths = append(integrationHealths, integrationHealth)
		integrationHealthIDs = append(integrationHealthIDs, integrationHealth.GetId())
	}

	s.NoError(store.UpsertMany(ctx, integrationHealths))

	integrationHealthCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, integrationHealthCount)

	s.NoError(store.DeleteMany(ctx, integrationHealthIDs))

	integrationHealthCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, integrationHealthCount)
}
