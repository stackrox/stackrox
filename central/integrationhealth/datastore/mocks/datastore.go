// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetBackupPlugins mocks base method.
func (m *MockDataStore) GetBackupPlugins(ctx context.Context) ([]*storage.IntegrationHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPlugins", ctx)
	ret0, _ := ret[0].([]*storage.IntegrationHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupPlugins indicates an expected call of GetBackupPlugins.
func (mr *MockDataStoreMockRecorder) GetBackupPlugins(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPlugins", reflect.TypeOf((*MockDataStore)(nil).GetBackupPlugins), ctx)
}

// GetDeclarativeConfigs mocks base method.
func (m *MockDataStore) GetDeclarativeConfigs(ctx context.Context) ([]*storage.IntegrationHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeclarativeConfigs", ctx)
	ret0, _ := ret[0].([]*storage.IntegrationHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeclarativeConfigs indicates an expected call of GetDeclarativeConfigs.
func (mr *MockDataStoreMockRecorder) GetDeclarativeConfigs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeclarativeConfigs", reflect.TypeOf((*MockDataStore)(nil).GetDeclarativeConfigs), ctx)
}

// GetIntegrationHealth mocks base method.
func (m *MockDataStore) GetIntegrationHealth(ctx context.Context, id string) (*storage.IntegrationHealth, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationHealth", ctx, id)
	ret0, _ := ret[0].(*storage.IntegrationHealth)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIntegrationHealth indicates an expected call of GetIntegrationHealth.
func (mr *MockDataStoreMockRecorder) GetIntegrationHealth(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationHealth", reflect.TypeOf((*MockDataStore)(nil).GetIntegrationHealth), ctx, id)
}

// GetNotifierPlugins mocks base method.
func (m *MockDataStore) GetNotifierPlugins(ctx context.Context) ([]*storage.IntegrationHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifierPlugins", ctx)
	ret0, _ := ret[0].([]*storage.IntegrationHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifierPlugins indicates an expected call of GetNotifierPlugins.
func (mr *MockDataStoreMockRecorder) GetNotifierPlugins(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifierPlugins", reflect.TypeOf((*MockDataStore)(nil).GetNotifierPlugins), ctx)
}

// GetRegistriesAndScanners mocks base method.
func (m *MockDataStore) GetRegistriesAndScanners(ctx context.Context) ([]*storage.IntegrationHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistriesAndScanners", ctx)
	ret0, _ := ret[0].([]*storage.IntegrationHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistriesAndScanners indicates an expected call of GetRegistriesAndScanners.
func (mr *MockDataStoreMockRecorder) GetRegistriesAndScanners(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistriesAndScanners", reflect.TypeOf((*MockDataStore)(nil).GetRegistriesAndScanners), ctx)
}

// RemoveIntegrationHealth mocks base method.
func (m *MockDataStore) RemoveIntegrationHealth(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIntegrationHealth", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIntegrationHealth indicates an expected call of RemoveIntegrationHealth.
func (mr *MockDataStoreMockRecorder) RemoveIntegrationHealth(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIntegrationHealth", reflect.TypeOf((*MockDataStore)(nil).RemoveIntegrationHealth), ctx, id)
}

// UpsertIntegrationHealth mocks base method.
func (m *MockDataStore) UpsertIntegrationHealth(ctx context.Context, integrationHealth *storage.IntegrationHealth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertIntegrationHealth", ctx, integrationHealth)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIntegrationHealth indicates an expected call of UpsertIntegrationHealth.
func (mr *MockDataStoreMockRecorder) UpsertIntegrationHealth(ctx, integrationHealth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIntegrationHealth", reflect.TypeOf((*MockDataStore)(nil).UpsertIntegrationHealth), ctx, integrationHealth)
}
