package v2tostorage

import (
	"github.com/pkg/errors"
	v2 "github.com/stackrox/rox/generated/api/v2"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/utils"
)

func convertVulnerabilityState(state v2.VulnerabilityState) storage.VulnerabilityState {
	switch state {
	case v2.VulnerabilityState_OBSERVED:
		return storage.VulnerabilityState_OBSERVED
	case v2.VulnerabilityState_DEFERRED:
		return storage.VulnerabilityState_DEFERRED
	case v2.VulnerabilityState_FALSE_POSITIVE:
		return storage.VulnerabilityState_FALSE_POSITIVE
	default:
		utils.Should(errors.Errorf("unhandled vulnerability state encountered %s", state))
		return storage.VulnerabilityState_OBSERVED
	}
}

func EmbeddedVulnerabilities(vulns []*v2.EmbeddedVulnerability) []*storage.EmbeddedVulnerability {
	if len(vulns) == 0 {
		return nil
	}

	var ret []*storage.EmbeddedVulnerability
	for _, vuln := range vulns {
		if vuln == nil {
			continue
		}
		ret = append(ret, EmbeddedVulnerability(vuln))
	}

	return ret
}

func EmbeddedVulnerability(vuln *v2.EmbeddedVulnerability) *storage.EmbeddedVulnerability {
	if vuln == nil {
		return nil
	}

	result := &storage.EmbeddedVulnerability{
		Cve:               vuln.GetCve(),
		Summary:           vuln.GetSummary(),
		Link:              vuln.GetLink(),
		VulnerabilityType: convertVulnerabilityType(vuln.GetVulnerabilityType()),
		Severity:          convertSeverity(vuln.GetSeverity()),
		// CvssV2 is not available in v2 API
		CvssV3:       CvssV3(vuln.GetCvssV3()),
		PublishedOn:  vuln.GetPublishedOn(),
		LastModified: vuln.GetLastModified(),
	}

	if vuln.GetFixedBy() != "" {
		result.SetFixedBy = &storage.EmbeddedVulnerability_FixedBy{
			FixedBy: vuln.GetFixedBy(),
		}
	}

	return result
}

func CvssV3(cvss *v2.CVSSV3) *storage.CVSSV3 {
	if cvss == nil {
		return nil
	}

	return &storage.CVSSV3{
		Vector:              cvss.GetVector(),
		ExploitabilityScore: cvss.GetExploitabilityScore(),
		ImpactScore:         cvss.GetImpactScore(),
		AttackVector:        convertAttackVectorV3(cvss.GetAttackVector()),
		AttackComplexity:    convertComplexity(cvss.GetAttackComplexity()),
		PrivilegesRequired:  convertPrivileges(cvss.GetPrivilegesRequired()),
		UserInteraction:     convertUserInteraction(cvss.GetUserInteraction()),
		Scope:               convertScope(cvss.GetScope()),
		Confidentiality:     convertImpactV3(cvss.GetConfidentiality()),
		Integrity:           convertImpactV3(cvss.GetIntegrity()),
		Availability:        convertImpactV3(cvss.GetAvailability()),
		Score:               cvss.GetScore(),
		Severity:            convertCVSSV3Severity(cvss.GetSeverity()),
	}
}

func convertVulnerabilityType(vt v2.VulnerabilityType) storage.EmbeddedVulnerability_VulnerabilityType {
	// These enum mappings work as-is at the time of this writing
	// Any new enums will need to be reflected accordingly
	return storage.EmbeddedVulnerability_VulnerabilityType(vt)
}

func convertSeverity(severity v2.VulnerabilitySeverity) storage.VulnerabilitySeverity {
	return storage.VulnerabilitySeverity(severity)
}

func convertCVSSV3Severity(severity v2.CVSSV3_Severity) storage.CVSSV3_Severity {
	return storage.CVSSV3_Severity(severity)
}

func convertAttackVectorV3(av v2.CVSSV3_AttackVector) storage.CVSSV3_AttackVector {
	return storage.CVSSV3_AttackVector(av)
}

func convertComplexity(ac v2.CVSSV3_Complexity) storage.CVSSV3_Complexity {
	return storage.CVSSV3_Complexity(ac)
}

func convertPrivileges(pr v2.CVSSV3_Privileges) storage.CVSSV3_Privileges {
	return storage.CVSSV3_Privileges(pr)
}

func convertUserInteraction(ui v2.CVSSV3_UserInteraction) storage.CVSSV3_UserInteraction {
	return storage.CVSSV3_UserInteraction(ui)
}

func convertScope(scope v2.CVSSV3_Scope) storage.CVSSV3_Scope {
	return storage.CVSSV3_Scope(scope)
}

func convertImpactV3(impact v2.CVSSV3_Impact) storage.CVSSV3_Impact {
	return storage.CVSSV3_Impact(impact)
}
