package v2tostorage

import (
	"testing"
	"time"

	v2 "github.com/stackrox/rox/generated/api/v2"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/protoassert"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func TestEmbeddedVulnerability(t *testing.T) {
	publishedOn := timestamppb.New(time.Now().Add(-24 * time.Hour))
	lastModified := timestamppb.New(time.Now())

	tests := []struct {
		name     string
		input    *v2.EmbeddedVulnerability
		expected *storage.EmbeddedVulnerability
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name: "vulnerability with fixed by",
			input: &v2.EmbeddedVulnerability{
				Cve:     "CVE-2023-1234",
				Summary: "Test vulnerability",
				Link:    "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1234",
				SetFixedBy: &v2.EmbeddedVulnerability_FixedBy{
					FixedBy: "1.2.4",
				},
				VulnerabilityType: v2.VulnerabilityType_IMAGE_VULNERABILITY,
				Severity:          v2.VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY,
				CvssV3: &v2.CVSSV3{
					Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Score:  9.8,
				},
				PublishedOn:  publishedOn,
				LastModified: lastModified,
			},
			expected: &storage.EmbeddedVulnerability{
				Cve:     "CVE-2023-1234",
				Summary: "Test vulnerability",
				Link:    "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1234",
				SetFixedBy: &storage.EmbeddedVulnerability_FixedBy{
					FixedBy: "1.2.4",
				},
				VulnerabilityType: storage.EmbeddedVulnerability_IMAGE_VULNERABILITY,
				Severity:          storage.VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY,
				CvssV3: &storage.CVSSV3{
					Vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Score:  9.8,
				},
				PublishedOn:  publishedOn,
				LastModified: lastModified,
			},
		},
		{
			name: "vulnerability without fixed by",
			input: &v2.EmbeddedVulnerability{
				Cve:               "CVE-2023-5678",
				Summary:           "Another test vulnerability",
				VulnerabilityType: v2.VulnerabilityType_NODE_VULNERABILITY,
				Severity:          v2.VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY,
			},
			expected: &storage.EmbeddedVulnerability{
				Cve:               "CVE-2023-5678",
				Summary:           "Another test vulnerability",
				VulnerabilityType: storage.EmbeddedVulnerability_NODE_VULNERABILITY,
				Severity:          storage.VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := EmbeddedVulnerability(tt.input)
			protoassert.Equal(t, tt.expected, result)
		})
	}
}

func TestCvssV3(t *testing.T) {
	tests := []struct {
		name     string
		input    *v2.CVSSV3
		expected *storage.CVSSV3
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name: "complete cvss v3",
			input: &v2.CVSSV3{
				Vector:              "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				ExploitabilityScore: 3.9,
				ImpactScore:         5.9,
				AttackVector:        v2.CVSSV3_ATTACK_NETWORK,
				AttackComplexity:    v2.CVSSV3_COMPLEXITY_LOW,
				PrivilegesRequired:  v2.CVSSV3_PRIVILEGE_NONE,
				UserInteraction:     v2.CVSSV3_UI_NONE,
				Scope:               v2.CVSSV3_UNCHANGED,
				Confidentiality:     v2.CVSSV3_IMPACT_HIGH,
				Integrity:           v2.CVSSV3_IMPACT_HIGH,
				Availability:        v2.CVSSV3_IMPACT_HIGH,
				Score:               9.8,
				Severity:            v2.CVSSV3_CRITICAL,
			},
			expected: &storage.CVSSV3{
				Vector:              "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				ExploitabilityScore: 3.9,
				ImpactScore:         5.9,
				AttackVector:        storage.CVSSV3_ATTACK_NETWORK,
				AttackComplexity:    storage.CVSSV3_COMPLEXITY_LOW,
				PrivilegesRequired:  storage.CVSSV3_PRIVILEGE_NONE,
				UserInteraction:     storage.CVSSV3_UI_NONE,
				Scope:               storage.CVSSV3_UNCHANGED,
				Confidentiality:     storage.CVSSV3_IMPACT_HIGH,
				Integrity:           storage.CVSSV3_IMPACT_HIGH,
				Availability:        storage.CVSSV3_IMPACT_HIGH,
				Score:               9.8,
				Severity:            storage.CVSSV3_CRITICAL,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := CvssV3(tt.input)
			protoassert.Equal(t, tt.expected, result)
		})
	}
}

func TestEmbeddedVulnerabilities(t *testing.T) {
	tests := []struct {
		name     string
		input    []*v2.EmbeddedVulnerability
		expected []*storage.EmbeddedVulnerability
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name:     "empty input",
			input:    []*v2.EmbeddedVulnerability{},
			expected: nil,
		},
		{
			name: "multiple vulnerabilities",
			input: []*v2.EmbeddedVulnerability{
				{
					Cve:     "CVE-2023-1234",
					Summary: "Test vulnerability 1",
				},
				{
					Cve:     "CVE-2023-5678",
					Summary: "Test vulnerability 2",
				},
			},
			expected: []*storage.EmbeddedVulnerability{
				{
					Cve:     "CVE-2023-1234",
					Summary: "Test vulnerability 1",
				},
				{
					Cve:     "CVE-2023-5678",
					Summary: "Test vulnerability 2",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := EmbeddedVulnerabilities(tt.input)
			protoassert.SlicesEqual(t, tt.expected, result)
		})
	}
}
