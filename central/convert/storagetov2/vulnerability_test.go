package storagetov2

import (
	"testing"
	"time"

	v2 "github.com/stackrox/rox/generated/api/v2"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/protoassert"
	"github.com/stackrox/rox/pkg/protocompat"
)

const (
	cveName    = "CVE-2025-23459"
	cveSummary = "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in NotFound NS Simple Intro Loader allows Reflected XSS. This issue affects NS Simple Intro Loader: from n/a through 2.2.3."
	cveLink    = "https://nvd.nist.gov/vuln/detail/CVE-2025-23459"
)

var (
	publishedOn     = time.Date(2025, time.March, 26, 0, 0, 0, 0, time.UTC)
	firstOccurrence = time.Date(2025, time.March, 26, 12, 34, 56, 789012345, time.UTC)
	lastModified    = time.Date(2025, time.March, 27, 0, 0, 0, 0, time.UTC)

	storageVirtualMachineTestVuln = &storage.VirtualMachineVulnerability{
		CveBaseInfo: &storage.VirtualMachineCVEInfo{
			Cve:          cveName,
			Summary:      cveSummary,
			Link:         cveLink,
			PublishedOn:  protocompat.ConvertTimeToTimestampOrNil(&publishedOn),
			CreatedAt:    protocompat.ConvertTimeToTimestampOrNil(&firstOccurrence),
			LastModified: protocompat.ConvertTimeToTimestampOrNil(&lastModified),
			CvssV3: &storage.CVSSV3{
				Vector:             "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L",
				AttackVector:       storage.CVSSV3_ATTACK_NETWORK,
				AttackComplexity:   storage.CVSSV3_COMPLEXITY_LOW,
				PrivilegesRequired: storage.CVSSV3_PRIVILEGE_NONE,
				UserInteraction:    storage.CVSSV3_UI_REQUIRED,
				Scope:              storage.CVSSV3_CHANGED,
				Confidentiality:    storage.CVSSV3_IMPACT_LOW,
				Integrity:          storage.CVSSV3_IMPACT_LOW,
				Availability:       storage.CVSSV3_IMPACT_LOW,
				Score:              7.1,
				Severity:           storage.CVSSV3_HIGH,
			},
		},
	}
	v2VirtualMachineTestVuln = &v2.EmbeddedVulnerability{
		Cve:     cveName,
		Summary: cveSummary,
		Link:    cveLink,
		CvssV3: &v2.CVSSV3{
			Vector:             "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L",
			AttackVector:       v2.CVSSV3_ATTACK_NETWORK,
			AttackComplexity:   v2.CVSSV3_COMPLEXITY_LOW,
			PrivilegesRequired: v2.CVSSV3_PRIVILEGE_NONE,
			UserInteraction:    v2.CVSSV3_UI_REQUIRED,
			Scope:              v2.CVSSV3_CHANGED,
			Confidentiality:    v2.CVSSV3_IMPACT_LOW,
			Integrity:          v2.CVSSV3_IMPACT_LOW,
			Availability:       v2.CVSSV3_IMPACT_LOW,
			Score:              7.1,
			Severity:           v2.CVSSV3_HIGH,
		},
		PublishedOn:           protocompat.ConvertTimeToTimestampOrNil(&publishedOn),
		LastModified:          protocompat.ConvertTimeToTimestampOrNil(&lastModified),
		FirstSystemOccurrence: protocompat.ConvertTimeToTimestampOrNil(&firstOccurrence),
	}
)

func TestVirtualMachineVulnerabilities(t *testing.T) {
	tests := []struct {
		name     string
		input    []*storage.VirtualMachineVulnerability
		expected []*v2.EmbeddedVulnerability
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name:     "vector without nil item",
			input:    []*storage.VirtualMachineVulnerability{storageVirtualMachineTestVuln},
			expected: []*v2.EmbeddedVulnerability{v2VirtualMachineTestVuln},
		},
		{
			name:     "nil items in input vector are skipped",
			input:    []*storage.VirtualMachineVulnerability{nil, storageVirtualMachineTestVuln, nil},
			expected: []*v2.EmbeddedVulnerability{v2VirtualMachineTestVuln},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(it *testing.T) {
			result := VirtualMachineVulnerabilities(tc.input)
			protoassert.SlicesEqual(it, tc.expected, result)
		})
	}
}

func TestVirtualMachineVulnerability(t *testing.T) {
	tests := []struct {
		name     string
		input    *storage.VirtualMachineVulnerability
		expected *v2.EmbeddedVulnerability
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name:     "vulnerability without cve info",
			input:    &storage.VirtualMachineVulnerability{},
			expected: &v2.EmbeddedVulnerability{},
		},
		{
			name:     "Vulnerability with CVE info",
			input:    storageVirtualMachineTestVuln,
			expected: v2VirtualMachineTestVuln,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(it *testing.T) {
			result := VirtualMachineVulnerability(tc.input)
			protoassert.Equal(it, tc.expected, result)
		})
	}
}

func TestCvssV3(t *testing.T) {
	tests := []struct {
		name     string
		input    *storage.CVSSV3
		expected *v2.CVSSV3
	}{
		{
			name:     "nil input",
			input:    nil,
			expected: nil,
		},
		{
			name: "complete cvss v3",
			input: &storage.CVSSV3{
				Vector:              "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				ExploitabilityScore: 3.9,
				ImpactScore:         5.9,
				AttackVector:        storage.CVSSV3_ATTACK_NETWORK,
				AttackComplexity:    storage.CVSSV3_COMPLEXITY_LOW,
				PrivilegesRequired:  storage.CVSSV3_PRIVILEGE_NONE,
				UserInteraction:     storage.CVSSV3_UI_NONE,
				Scope:               storage.CVSSV3_UNCHANGED,
				Confidentiality:     storage.CVSSV3_IMPACT_HIGH,
				Integrity:           storage.CVSSV3_IMPACT_HIGH,
				Availability:        storage.CVSSV3_IMPACT_HIGH,
				Score:               9.8,
				Severity:            storage.CVSSV3_CRITICAL,
			},
			expected: &v2.CVSSV3{
				Vector:              "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				ExploitabilityScore: 3.9,
				ImpactScore:         5.9,
				AttackVector:        v2.CVSSV3_ATTACK_NETWORK,
				AttackComplexity:    v2.CVSSV3_COMPLEXITY_LOW,
				PrivilegesRequired:  v2.CVSSV3_PRIVILEGE_NONE,
				UserInteraction:     v2.CVSSV3_UI_NONE,
				Scope:               v2.CVSSV3_UNCHANGED,
				Confidentiality:     v2.CVSSV3_IMPACT_HIGH,
				Integrity:           v2.CVSSV3_IMPACT_HIGH,
				Availability:        v2.CVSSV3_IMPACT_HIGH,
				Score:               9.8,
				Severity:            v2.CVSSV3_CRITICAL,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := CvssV3(tt.input)
			protoassert.Equal(t, tt.expected, result)
		})
	}
}
