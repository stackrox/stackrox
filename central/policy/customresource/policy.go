// Code generated by config-as-code-helper generator. DO NOT EDIT.

package customresource

import (
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/sliceutils"
)

// Scope represents storage.Scope in the Custom Resource.
type Scope struct {
	Cluster   string               `yaml:",omitempty"`
	Namespace string               `yaml:",omitempty"`
	Label     *storage.Scope_Label `yaml:",omitempty"`
}

// convertScope Converts storage.Scope to *Scope
func convertScope(p *storage.Scope) *Scope {
	if p == nil {
		return nil
	}

	return &Scope{
		Cluster:   p.GetCluster(),
		Namespace: p.GetNamespace(),
		Label:     p.GetLabel(),
	}
}

// Exclusion_Deployment represents storage.Exclusion_Deployment in the Custom Resource.
type Exclusion_Deployment struct {
	Name  string `yaml:",omitempty"`
	Scope *Scope `yaml:",omitempty"`
}

// convertExclusion_Deployment Converts storage.Exclusion_Deployment to *Exclusion_Deployment
func convertExclusion_Deployment(p *storage.Exclusion_Deployment) *Exclusion_Deployment {
	if p == nil {
		return nil
	}

	return &Exclusion_Deployment{
		Name:  p.GetName(),
		Scope: convertScope(p.GetScope()),
	}
}

// Exclusion represents storage.Exclusion in the Custom Resource.
type Exclusion struct {
	Name       string                   `yaml:",omitempty"`
	Deployment *Exclusion_Deployment    `yaml:",omitempty"`
	Image      *storage.Exclusion_Image `yaml:",omitempty"`
	Expiration string                   `yaml:",omitempty"`
}

// convertExclusion Converts storage.Exclusion to *Exclusion
func convertExclusion(p *storage.Exclusion) *Exclusion {
	if p == nil {
		return nil
	}

	return &Exclusion{
		Name:       p.GetName(),
		Deployment: convertExclusion_Deployment(p.GetDeployment()),
		Image:      p.GetImage(),
		Expiration: timestampToFormatRFC3339(p.GetExpiration()),
	}
}

// PolicyGroup represents storage.PolicyGroup in the Custom Resource.
type PolicyGroup struct {
	FieldName       string                 `yaml:"fieldName"`
	BooleanOperator string                 `yaml:"booleanOperator"`
	Negate          bool                   `yaml:",omitempty"`
	Values          []*storage.PolicyValue `yaml:",omitempty"`
}

// convertPolicyGroup Converts storage.PolicyGroup to *PolicyGroup
func convertPolicyGroup(p *storage.PolicyGroup) *PolicyGroup {
	if p == nil {
		return nil
	}

	return &PolicyGroup{
		FieldName:       p.GetFieldName(),
		BooleanOperator: p.GetBooleanOperator().String(),
		Negate:          p.GetNegate(),
		Values:          p.GetValues(),
	}
}

// PolicySection represents storage.PolicySection in the Custom Resource.
type PolicySection struct {
	SectionName  string         `yaml:"sectionName,omitempty"`
	PolicyGroups []*PolicyGroup `yaml:"policyGroups,omitempty"`
}

// convertPolicySection Converts storage.PolicySection to *PolicySection
func convertPolicySection(p *storage.PolicySection) *PolicySection {
	if p == nil {
		return nil
	}

	return &PolicySection{
		SectionName:  p.GetSectionName(),
		PolicyGroups: sliceutils.ConvertSlice(p.GetPolicyGroups(), convertPolicyGroup),
	}
}

// Policy represents storage.Policy in the Custom Resource.
type Policy struct {
	Name               string       `yaml:"policyName"`
	Description        string       `yaml:",omitempty"`
	Rationale          string       `yaml:",omitempty"`
	Remediation        string       `yaml:",omitempty"`
	Disabled           bool         `yaml:",omitempty"`
	Categories         []string     `yaml:",omitempty"`
	LifecycleStages    []string     `yaml:"lifecycleStages"`
	EventSource        string       `yaml:"eventSource"`
	Exclusions         []*Exclusion `yaml:",omitempty"`
	Scope              []*Scope     `yaml:",omitempty"`
	Severity           string
	EnforcementActions []string                             `yaml:"enforcementActions,omitempty"`
	Notifiers          []string                             `yaml:",omitempty"`
	PolicySections     []*PolicySection                     `yaml:"policySections,omitempty"`
	MitreAttackVectors []*storage.Policy_MitreAttackVectors `yaml:"mitreAttackVectors,omitempty"`
	CriteriaLocked     bool                                 `yaml:"criteriaLocked"`
	MitreVectorsLocked bool                                 `yaml:"mitreVectorsLocked"`
	IsDefault          bool                                 `yaml:"isDefault"`
}

// convertPolicy Converts storage.Policy to *Policy
func convertPolicy(p *storage.Policy) *Policy {
	if p == nil {
		return nil
	}

	return &Policy{
		Name:               p.GetName(),
		Description:        p.GetDescription(),
		Rationale:          p.GetRationale(),
		Remediation:        p.GetRemediation(),
		Disabled:           p.GetDisabled(),
		Categories:         p.GetCategories(),
		LifecycleStages:    sliceutils.StringSlice(p.GetLifecycleStages()...),
		EventSource:        p.GetEventSource().String(),
		Exclusions:         sliceutils.ConvertSlice(p.GetExclusions(), convertExclusion),
		Scope:              sliceutils.ConvertSlice(p.GetScope(), convertScope),
		Severity:           p.GetSeverity().String(),
		EnforcementActions: sliceutils.StringSlice(p.GetEnforcementActions()...),
		Notifiers:          p.GetNotifiers(),
		PolicySections:     sliceutils.ConvertSlice(p.GetPolicySections(), convertPolicySection),
		MitreAttackVectors: p.GetMitreAttackVectors(),
		CriteriaLocked:     p.GetCriteriaLocked(),
		MitreVectorsLocked: p.GetMitreVectorsLocked(),
		IsDefault:          p.GetIsDefault(),
	}
}

// ConvertPolicyToCustomResource converts a storage.Policy to a SecurityPolicy custom resource
func ConvertPolicyToCustomResource(p *storage.Policy) *CustomResource {
	if p == nil {
		return nil
	}
	return &CustomResource{
		APIVersion:         "config.stackrox.io/v1alpha1",
		Kind:               "SecurityPolicy",
		Metadata:           map[string]interface{}{"name": toDNSSubdomainName(p.GetName())},
		SecurityPolicySpec: convertPolicy(p),
	}
}
