// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
)

const (
	baseTable  = "policy"
	countStmt  = "SELECT COUNT(*) FROM policy"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM policy WHERE Id = $1)"

	getStmt     = "SELECT serialized FROM policy WHERE Id = $1"
	deleteStmt  = "DELETE FROM policy WHERE Id = $1"
	walkStmt    = "SELECT serialized FROM policy"
	getIDsStmt  = "SELECT Id FROM policy"
	getManyStmt = "SELECT serialized FROM policy WHERE Id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM policy WHERE Id = ANY($1::text[])"
)

func init() {
	globaldb.RegisterTable(baseTable, "Policy")
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.Policy, bool, error)
	Upsert(ctx context.Context, obj *storage.Policy) error
	UpsertMany(ctx context.Context, objs []*storage.Policy) error
	Delete(ctx context.Context, id string) error
	GetIDs(ctx context.Context) ([]string, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.Policy, []int, error)
	DeleteMany(ctx context.Context, ids []string) error

	Walk(ctx context.Context, fn func(obj *storage.Policy) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTablePolicy(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy (
    Id varchar,
    Name varchar UNIQUE,
    Description varchar,
    Rationale varchar,
    Remediation varchar,
    Disabled bool,
    Categories text[],
    LifecycleStages int[],
    EventSource integer,
    Severity integer,
    EnforcementActions int[],
    Notifiers text[],
    LastUpdated timestamp,
    SORTName varchar,
    SORTLifecycleStage varchar,
    SORTEnforcement bool,
    PolicyVersion varchar,
    CriteriaLocked bool,
    MitreVectorsLocked bool,
    IsDefault bool,
    serialized bytea,
    PRIMARY KEY(Id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

	createTablePolicyWhitelists(ctx, db)
	createTablePolicyExclusions(ctx, db)
	createTablePolicyScope(ctx, db)
	createTablePolicyPolicySections(ctx, db)
	createTablePolicyMitreAttackVectors(ctx, db)
}

func createTablePolicyWhitelists(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Whitelists (
    policy_Id varchar,
    idx integer,
    Name varchar,
    Deployment_Name varchar,
    Deployment_Scope_Cluster varchar,
    Deployment_Scope_Namespace varchar,
    Deployment_Scope_Label_Key varchar,
    Deployment_Scope_Label_Value varchar,
    Image_Name varchar,
    Expiration timestamp,
    PRIMARY KEY(policy_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id) REFERENCES policy(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyWhitelists_idx on policy_Whitelists using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTablePolicyExclusions(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Exclusions (
    policy_Id varchar,
    idx integer,
    Name varchar,
    Deployment_Name varchar,
    Deployment_Scope_Cluster varchar,
    Deployment_Scope_Namespace varchar,
    Deployment_Scope_Label_Key varchar,
    Deployment_Scope_Label_Value varchar,
    Image_Name varchar,
    Expiration timestamp,
    PRIMARY KEY(policy_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id) REFERENCES policy(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyExclusions_idx on policy_Exclusions using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTablePolicyScope(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_Scope (
    policy_Id varchar,
    idx integer,
    Cluster varchar,
    Namespace varchar,
    Label_Key varchar,
    Label_Value varchar,
    PRIMARY KEY(policy_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id) REFERENCES policy(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyScope_idx on policy_Scope using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTablePolicyPolicySections(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections (
    policy_Id varchar,
    idx integer,
    SectionName varchar,
    PRIMARY KEY(policy_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id) REFERENCES policy(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyPolicySections_idx on policy_PolicySections using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

	createTablePolicyPolicySectionsPolicyGroups(ctx, db)
}

func createTablePolicyPolicySectionsPolicyGroups(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections_PolicyGroups (
    policy_Id varchar,
    policy_PolicySections_idx integer,
    idx integer,
    FieldName varchar,
    BooleanOperator integer,
    Negate bool,
    PRIMARY KEY(policy_Id, policy_PolicySections_idx, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id, policy_PolicySections_idx) REFERENCES policy_PolicySections(policy_Id, idx) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyPolicySectionsPolicyGroups_idx on policy_PolicySections_PolicyGroups using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

	createTablePolicyPolicySectionsPolicyGroupsValues(ctx, db)
}

func createTablePolicyPolicySectionsPolicyGroupsValues(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_PolicySections_PolicyGroups_Values (
    policy_Id varchar,
    policy_PolicySections_idx integer,
    policy_PolicySections_PolicyGroups_idx integer,
    idx integer,
    Value varchar,
    PRIMARY KEY(policy_Id, policy_PolicySections_idx, policy_PolicySections_PolicyGroups_idx, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id, policy_PolicySections_idx, policy_PolicySections_PolicyGroups_idx) REFERENCES policy_PolicySections_PolicyGroups(policy_Id, policy_PolicySections_idx, idx) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyPolicySectionsPolicyGroupsValues_idx on policy_PolicySections_PolicyGroups_Values using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTablePolicyMitreAttackVectors(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists policy_MitreAttackVectors (
    policy_Id varchar,
    idx integer,
    Tactic varchar,
    Techniques text[],
    PRIMARY KEY(policy_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (policy_Id) REFERENCES policy(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists policyMitreAttackVectors_idx on policy_MitreAttackVectors using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func insertIntoPolicy(ctx context.Context, tx pgx.Tx, obj *storage.Policy) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName(),
		obj.GetDescription(),
		obj.GetRationale(),
		obj.GetRemediation(),
		obj.GetDisabled(),
		obj.GetCategories(),
		obj.GetLifecycleStages(),
		obj.GetEventSource(),
		obj.GetSeverity(),
		obj.GetEnforcementActions(),
		obj.GetNotifiers(),
		pgutils.NilOrStringTimestamp(obj.GetLastUpdated()),
		obj.GetSORTName(),
		obj.GetSORTLifecycleStage(),
		obj.GetSORTEnforcement(),
		obj.GetPolicyVersion(),
		obj.GetCriteriaLocked(),
		obj.GetMitreVectorsLocked(),
		obj.GetIsDefault(),
		serialized,
	}

	finalStr := "INSERT INTO policy (Id, Name, Description, Rationale, Remediation, Disabled, Categories, LifecycleStages, EventSource, Severity, EnforcementActions, Notifiers, LastUpdated, SORTName, SORTLifecycleStage, SORTEnforcement, PolicyVersion, CriteriaLocked, MitreVectorsLocked, IsDefault, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) ON CONFLICT(Id) DO UPDATE SET Id = EXCLUDED.Id, Name = EXCLUDED.Name, Description = EXCLUDED.Description, Rationale = EXCLUDED.Rationale, Remediation = EXCLUDED.Remediation, Disabled = EXCLUDED.Disabled, Categories = EXCLUDED.Categories, LifecycleStages = EXCLUDED.LifecycleStages, EventSource = EXCLUDED.EventSource, Severity = EXCLUDED.Severity, EnforcementActions = EXCLUDED.EnforcementActions, Notifiers = EXCLUDED.Notifiers, LastUpdated = EXCLUDED.LastUpdated, SORTName = EXCLUDED.SORTName, SORTLifecycleStage = EXCLUDED.SORTLifecycleStage, SORTEnforcement = EXCLUDED.SORTEnforcement, PolicyVersion = EXCLUDED.PolicyVersion, CriteriaLocked = EXCLUDED.CriteriaLocked, MitreVectorsLocked = EXCLUDED.MitreVectorsLocked, IsDefault = EXCLUDED.IsDefault, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetWhitelists() {
		if err := insertIntoPolicyWhitelists(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Whitelists where policy_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetWhitelists()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetExclusions() {
		if err := insertIntoPolicyExclusions(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Exclusions where policy_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetExclusions()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetScope() {
		if err := insertIntoPolicyScope(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_Scope where policy_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetScope()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetPolicySections() {
		if err := insertIntoPolicyPolicySections(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections where policy_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetPolicySections()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetMitreAttackVectors() {
		if err := insertIntoPolicyMitreAttackVectors(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_MitreAttackVectors where policy_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetMitreAttackVectors()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyWhitelists(ctx context.Context, tx pgx.Tx, obj *storage.Exclusion, policy_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		idx,
		obj.GetName(),
		obj.GetDeployment().GetName(),
		obj.GetDeployment().GetScope().GetCluster(),
		obj.GetDeployment().GetScope().GetNamespace(),
		obj.GetDeployment().GetScope().GetLabel().GetKey(),
		obj.GetDeployment().GetScope().GetLabel().GetValue(),
		obj.GetImage().GetName(),
		pgutils.NilOrStringTimestamp(obj.GetExpiration()),
	}

	finalStr := "INSERT INTO policy_Whitelists (policy_Id, idx, Name, Deployment_Name, Deployment_Scope_Cluster, Deployment_Scope_Namespace, Deployment_Scope_Label_Key, Deployment_Scope_Label_Value, Image_Name, Expiration) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT(policy_Id, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, idx = EXCLUDED.idx, Name = EXCLUDED.Name, Deployment_Name = EXCLUDED.Deployment_Name, Deployment_Scope_Cluster = EXCLUDED.Deployment_Scope_Cluster, Deployment_Scope_Namespace = EXCLUDED.Deployment_Scope_Namespace, Deployment_Scope_Label_Key = EXCLUDED.Deployment_Scope_Label_Key, Deployment_Scope_Label_Value = EXCLUDED.Deployment_Scope_Label_Value, Image_Name = EXCLUDED.Image_Name, Expiration = EXCLUDED.Expiration"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyExclusions(ctx context.Context, tx pgx.Tx, obj *storage.Exclusion, policy_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		idx,
		obj.GetName(),
		obj.GetDeployment().GetName(),
		obj.GetDeployment().GetScope().GetCluster(),
		obj.GetDeployment().GetScope().GetNamespace(),
		obj.GetDeployment().GetScope().GetLabel().GetKey(),
		obj.GetDeployment().GetScope().GetLabel().GetValue(),
		obj.GetImage().GetName(),
		pgutils.NilOrStringTimestamp(obj.GetExpiration()),
	}

	finalStr := "INSERT INTO policy_Exclusions (policy_Id, idx, Name, Deployment_Name, Deployment_Scope_Cluster, Deployment_Scope_Namespace, Deployment_Scope_Label_Key, Deployment_Scope_Label_Value, Image_Name, Expiration) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT(policy_Id, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, idx = EXCLUDED.idx, Name = EXCLUDED.Name, Deployment_Name = EXCLUDED.Deployment_Name, Deployment_Scope_Cluster = EXCLUDED.Deployment_Scope_Cluster, Deployment_Scope_Namespace = EXCLUDED.Deployment_Scope_Namespace, Deployment_Scope_Label_Key = EXCLUDED.Deployment_Scope_Label_Key, Deployment_Scope_Label_Value = EXCLUDED.Deployment_Scope_Label_Value, Image_Name = EXCLUDED.Image_Name, Expiration = EXCLUDED.Expiration"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyScope(ctx context.Context, tx pgx.Tx, obj *storage.Scope, policy_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		idx,
		obj.GetCluster(),
		obj.GetNamespace(),
		obj.GetLabel().GetKey(),
		obj.GetLabel().GetValue(),
	}

	finalStr := "INSERT INTO policy_Scope (policy_Id, idx, Cluster, Namespace, Label_Key, Label_Value) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(policy_Id, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, idx = EXCLUDED.idx, Cluster = EXCLUDED.Cluster, Namespace = EXCLUDED.Namespace, Label_Key = EXCLUDED.Label_Key, Label_Value = EXCLUDED.Label_Value"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyPolicySections(ctx context.Context, tx pgx.Tx, obj *storage.PolicySection, policy_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		idx,
		obj.GetSectionName(),
	}

	finalStr := "INSERT INTO policy_PolicySections (policy_Id, idx, SectionName) VALUES($1, $2, $3) ON CONFLICT(policy_Id, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, idx = EXCLUDED.idx, SectionName = EXCLUDED.SectionName"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetPolicyGroups() {
		if err := insertIntoPolicyPolicySectionsPolicyGroups(ctx, tx, child, policy_Id, idx, childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections_PolicyGroups where policy_Id = $1 AND policy_PolicySections_idx = $2 AND idx >= $3"
	_, err = tx.Exec(ctx, query, policy_Id, idx, len(obj.GetPolicyGroups()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyPolicySectionsPolicyGroups(ctx context.Context, tx pgx.Tx, obj *storage.PolicyGroup, policy_Id string, policy_PolicySections_idx int, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		policy_PolicySections_idx,
		idx,
		obj.GetFieldName(),
		obj.GetBooleanOperator(),
		obj.GetNegate(),
	}

	finalStr := "INSERT INTO policy_PolicySections_PolicyGroups (policy_Id, policy_PolicySections_idx, idx, FieldName, BooleanOperator, Negate) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(policy_Id, policy_PolicySections_idx, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, policy_PolicySections_idx = EXCLUDED.policy_PolicySections_idx, idx = EXCLUDED.idx, FieldName = EXCLUDED.FieldName, BooleanOperator = EXCLUDED.BooleanOperator, Negate = EXCLUDED.Negate"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetValues() {
		if err := insertIntoPolicyPolicySectionsPolicyGroupsValues(ctx, tx, child, policy_Id, policy_PolicySections_idx, idx, childIdx); err != nil {
			return err
		}
	}

	query = "delete from policy_PolicySections_PolicyGroups_Values where policy_Id = $1 AND policy_PolicySections_idx = $2 AND policy_PolicySections_PolicyGroups_idx = $3 AND idx >= $4"
	_, err = tx.Exec(ctx, query, policy_Id, policy_PolicySections_idx, idx, len(obj.GetValues()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoPolicyPolicySectionsPolicyGroupsValues(ctx context.Context, tx pgx.Tx, obj *storage.PolicyValue, policy_Id string, policy_PolicySections_idx int, policy_PolicySections_PolicyGroups_idx int, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		policy_PolicySections_idx,
		policy_PolicySections_PolicyGroups_idx,
		idx,
		obj.GetValue(),
	}

	finalStr := "INSERT INTO policy_PolicySections_PolicyGroups_Values (policy_Id, policy_PolicySections_idx, policy_PolicySections_PolicyGroups_idx, idx, Value) VALUES($1, $2, $3, $4, $5) ON CONFLICT(policy_Id, policy_PolicySections_idx, policy_PolicySections_PolicyGroups_idx, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, policy_PolicySections_idx = EXCLUDED.policy_PolicySections_idx, policy_PolicySections_PolicyGroups_idx = EXCLUDED.policy_PolicySections_PolicyGroups_idx, idx = EXCLUDED.idx, Value = EXCLUDED.Value"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoPolicyMitreAttackVectors(ctx context.Context, tx pgx.Tx, obj *storage.Policy_MitreAttackVectors, policy_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		policy_Id,
		idx,
		obj.GetTactic(),
		obj.GetTechniques(),
	}

	finalStr := "INSERT INTO policy_MitreAttackVectors (policy_Id, idx, Tactic, Techniques) VALUES($1, $2, $3, $4) ON CONFLICT(policy_Id, idx) DO UPDATE SET policy_Id = EXCLUDED.policy_Id, idx = EXCLUDED.idx, Tactic = EXCLUDED.Tactic, Techniques = EXCLUDED.Techniques"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTablePolicy(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.Policy) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Policy")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoPolicy(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Policy) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Policy")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.Policy) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "Policy")

	return s.upsert(ctx, objs...)
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Policy")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Policy")

	row := s.db.QueryRow(ctx, existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, id string) (*storage.Policy, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Policy")

	conn, release := s.acquireConn(ctx, ops.Get, "Policy")
	defer release()

	row := conn.QueryRow(ctx, getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.Policy
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Policy")

	conn, release := s.acquireConn(ctx, ops.Remove, "Policy")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs(ctx context.Context) ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.PolicyIDs")

	rows, err := s.db.Query(ctx, getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ctx context.Context, ids []string) ([]*storage.Policy, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Policy")

	conn, release := s.acquireConn(ctx, ops.GetMany, "Policy")
	defer release()

	rows, err := conn.Query(ctx, getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	elems := make([]*storage.Policy, 0, len(ids))
	foundSet := make(map[string]struct{})
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		var msg storage.Policy
		if err := proto.Unmarshal(data, &msg); err != nil {
			return nil, nil, err
		}
		foundSet[msg.GetId()] = struct{}{}
		elems = append(elems, &msg)
	}
	missingIndices := make([]int, 0, len(ids)-len(foundSet))
	for i, id := range ids {
		if _, ok := foundSet[id]; !ok {
			missingIndices = append(missingIndices, i)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ctx context.Context, ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Policy")

	conn, release := s.acquireConn(ctx, ops.RemoveMany, "Policy")
	defer release()
	if _, err := conn.Exec(ctx, deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.Policy) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Policy
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTablePolicy(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy CASCADE")
	dropTablePolicyWhitelists(ctx, db)
	dropTablePolicyExclusions(ctx, db)
	dropTablePolicyScope(ctx, db)
	dropTablePolicyPolicySections(ctx, db)
	dropTablePolicyMitreAttackVectors(ctx, db)

}

func dropTablePolicyWhitelists(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Whitelists CASCADE")

}

func dropTablePolicyExclusions(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Exclusions CASCADE")

}

func dropTablePolicyScope(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_Scope CASCADE")

}

func dropTablePolicyPolicySections(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections CASCADE")
	dropTablePolicyPolicySectionsPolicyGroups(ctx, db)

}

func dropTablePolicyPolicySectionsPolicyGroups(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections_PolicyGroups CASCADE")
	dropTablePolicyPolicySectionsPolicyGroupsValues(ctx, db)

}

func dropTablePolicyPolicySectionsPolicyGroupsValues(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_PolicySections_PolicyGroups_Values CASCADE")

}

func dropTablePolicyMitreAttackVectors(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS policy_MitreAttackVectors CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTablePolicy(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
