// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type PoliciesStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestPoliciesStore(t *testing.T) {
	suite.Run(t, new(PoliciesStoreSuite))
}

func (s *PoliciesStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *PoliciesStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE policies CASCADE")
	s.T().Log("policies", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *PoliciesStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *PoliciesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	policy := &storage.Policy{}
	s.NoError(testutils.FullInit(policy, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundPolicy, exists, err := store.Get(ctx, policy.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundPolicy)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, policy))
	foundPolicy, exists, err = store.Get(ctx, policy.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(policy, foundPolicy)

	policyCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, policyCount)
	policyCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(policyCount)

	policyExists, err := store.Exists(ctx, policy.GetId())
	s.NoError(err)
	s.True(policyExists)
	s.NoError(store.Upsert(ctx, policy))
	s.ErrorIs(store.Upsert(withNoAccessCtx, policy), sac.ErrResourceAccessDenied)

	foundPolicy, exists, err = store.Get(ctx, policy.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(policy, foundPolicy)

	s.NoError(store.Delete(ctx, policy.GetId()))
	foundPolicy, exists, err = store.Get(ctx, policy.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundPolicy)
	s.ErrorIs(store.Delete(withNoAccessCtx, policy.GetId()), sac.ErrResourceAccessDenied)

	var policys []*storage.Policy
	var policyIDs []string
	for i := 0; i < 200; i++ {
		policy := &storage.Policy{}
		s.NoError(testutils.FullInit(policy, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		policys = append(policys, policy)
		policyIDs = append(policyIDs, policy.GetId())
	}

	s.NoError(store.UpsertMany(ctx, policys))
	allPolicy, err := store.GetAll(ctx)
	s.NoError(err)
	s.ElementsMatch(policys, allPolicy)

	policyCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, policyCount)

	s.NoError(store.DeleteMany(ctx, policyIDs))

	policyCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, policyCount)
}
