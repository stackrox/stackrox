// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/store.go -source store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	search "github.com/stackrox/rox/pkg/search"
	gomock "go.uber.org/mock/gomock"
)

// MockSignatureIntegrationStore is a mock of SignatureIntegrationStore interface.
type MockSignatureIntegrationStore struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureIntegrationStoreMockRecorder
}

// MockSignatureIntegrationStoreMockRecorder is the mock recorder for MockSignatureIntegrationStore.
type MockSignatureIntegrationStoreMockRecorder struct {
	mock *MockSignatureIntegrationStore
}

// NewMockSignatureIntegrationStore creates a new mock instance.
func NewMockSignatureIntegrationStore(ctrl *gomock.Controller) *MockSignatureIntegrationStore {
	mock := &MockSignatureIntegrationStore{ctrl: ctrl}
	mock.recorder = &MockSignatureIntegrationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureIntegrationStore) EXPECT() *MockSignatureIntegrationStoreMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockSignatureIntegrationStore) Count(ctx context.Context, q *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, q)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSignatureIntegrationStoreMockRecorder) Count(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Count), ctx, q)
}

// Delete mocks base method.
func (m *MockSignatureIntegrationStore) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSignatureIntegrationStoreMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Delete), ctx, id)
}

// Exists mocks base method.
func (m *MockSignatureIntegrationStore) Exists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSignatureIntegrationStoreMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Exists), ctx, id)
}

// Get mocks base method.
func (m *MockSignatureIntegrationStore) Get(ctx context.Context, id string) (*storage.SignatureIntegration, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.SignatureIntegration)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockSignatureIntegrationStoreMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Get), ctx, id)
}

// Search mocks base method.
func (m *MockSignatureIntegrationStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSignatureIntegrationStoreMockRecorder) Search(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Search), ctx, q)
}

// Upsert mocks base method.
func (m *MockSignatureIntegrationStore) Upsert(ctx context.Context, obj *storage.SignatureIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSignatureIntegrationStoreMockRecorder) Upsert(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Upsert), ctx, obj)
}

// Walk mocks base method.
func (m *MockSignatureIntegrationStore) Walk(ctx context.Context, fn func(*storage.SignatureIntegration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockSignatureIntegrationStoreMockRecorder) Walk(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockSignatureIntegrationStore)(nil).Walk), ctx, fn)
}
