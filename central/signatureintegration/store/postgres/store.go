// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/logging"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
)

const (
	countStmt  = "SELECT COUNT(*) FROM signatureintegrations"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM signatureintegrations WHERE Id = $1)"

	getStmt     = "SELECT serialized FROM signatureintegrations WHERE Id = $1"
	deleteStmt  = "DELETE FROM signatureintegrations WHERE Id = $1"
	walkStmt    = "SELECT serialized FROM signatureintegrations"
	getIDsStmt  = "SELECT Id FROM signatureintegrations"
	getManyStmt = "SELECT serialized FROM signatureintegrations WHERE Id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM signatureintegrations WHERE Id = ANY($1::text[])"
)

var (
	log = logging.LoggerForModule()

	table = "signatureintegrations"
)

func init() {
	globaldb.RegisterTable(table, "SignatureIntegration")
}

type Store interface {
	Count() (int, error)
	Exists(id string) (bool, error)
	Get(id string) (*storage.SignatureIntegration, bool, error)
	Upsert(obj *storage.SignatureIntegration) error
	UpsertMany(objs []*storage.SignatureIntegration) error
	Delete(id string) error
	GetIDs() ([]string, error)
	GetMany(ids []string) ([]*storage.SignatureIntegration, []int, error)
	DeleteMany(ids []string) error

	Walk(fn func(obj *storage.SignatureIntegration) error) error

	AckKeysIndexed(keys ...string) error
	GetKeysToIndex() ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableSignatureintegrations(db *pgxpool.Pool) {
	table := `
create table if not exists signatureintegrations (
    Id varchar,
    Name varchar UNIQUE,
    serialized bytea,
    PRIMARY KEY(Id)
)
`

	_, err := db.Exec(context.Background(), table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(context.Background(), index); err != nil {
			panic(err)
		}
	}

	createTableSignatureintegrationsPublicKeys(db)
}

func createTableSignatureintegrationsPublicKeys(db *pgxpool.Pool) {
	table := `
create table if not exists signatureintegrations_PublicKeys (
    signatureintegrations_Id varchar,
    idx numeric,
    Name varchar,
    PublicKeyPemEnc varchar,
    PRIMARY KEY(signatureintegrations_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (signatureintegrations_Id) REFERENCES signatureintegrations(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(context.Background(), table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists signatureintegrationsPublicKeys_idx on signatureintegrations_PublicKeys using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(context.Background(), index); err != nil {
			panic(err)
		}
	}

}

func insertIntoSignatureintegrations(tx pgx.Tx, obj *storage.SignatureIntegration) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start

		obj.GetId(),

		obj.GetName(),

		serialized,
	}

	finalStr := "INSERT INTO signatureintegrations (Id, Name, serialized) VALUES($1, $2, $3) ON CONFLICT(Id) DO UPDATE SET Id = EXCLUDED.Id, Name = EXCLUDED.Name, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(context.Background(), finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetCosign().GetPublicKeys() {
		if err := insertIntoSignatureintegrationsPublicKeys(tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from signatureintegrations_PublicKeys where signatureintegrations_Id = $1 AND idx >= $2"
	_, err = tx.Exec(context.Background(), query, obj.GetId(), len(obj.GetCosign().GetPublicKeys()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoSignatureintegrationsPublicKeys(tx pgx.Tx, obj *storage.CosignPublicKeyVerification_PublicKey, signatureintegrations_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start

		signatureintegrations_Id,

		idx,

		obj.GetName(),

		obj.GetPublicKeyPemEnc(),
	}

	finalStr := "INSERT INTO signatureintegrations_PublicKeys (signatureintegrations_Id, idx, Name, PublicKeyPemEnc) VALUES($1, $2, $3, $4) ON CONFLICT(signatureintegrations_Id, idx) DO UPDATE SET signatureintegrations_Id = EXCLUDED.signatureintegrations_Id, idx = EXCLUDED.idx, Name = EXCLUDED.Name, PublicKeyPemEnc = EXCLUDED.PublicKeyPemEnc"
	_, err := tx.Exec(context.Background(), finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

// New returns a new Store instance using the provided sql instance.
func New(db *pgxpool.Pool) Store {
	createTableSignatureintegrations(db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) upsert(objs ...*storage.SignatureIntegration) error {
	conn, release := s.acquireConn(ops.Get, "SignatureIntegration")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(context.Background())
		if err != nil {
			return err
		}

		if err := insertIntoSignatureintegrations(tx, obj); err != nil {
			if err := tx.Rollback(context.Background()); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(context.Background()); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(obj *storage.SignatureIntegration) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "SignatureIntegration")

	return s.upsert(obj)
}

func (s *storeImpl) UpsertMany(objs []*storage.SignatureIntegration) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "SignatureIntegration")

	return s.upsert(objs...)
}

// Count returns the number of objects in the store
func (s *storeImpl) Count() (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "SignatureIntegration")

	row := s.db.QueryRow(context.Background(), countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "SignatureIntegration")

	row := s.db.QueryRow(context.Background(), existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(id string) (*storage.SignatureIntegration, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "SignatureIntegration")

	conn, release := s.acquireConn(ops.Get, "SignatureIntegration")
	defer release()

	row := conn.QueryRow(context.Background(), getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.SignatureIntegration
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(context.Background())
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "SignatureIntegration")

	conn, release := s.acquireConn(ops.Remove, "SignatureIntegration")
	defer release()

	if _, err := conn.Exec(context.Background(), deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs() ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.SignatureIntegrationIDs")

	rows, err := s.db.Query(context.Background(), getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ids []string) ([]*storage.SignatureIntegration, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "SignatureIntegration")

	conn, release := s.acquireConn(ops.GetMany, "SignatureIntegration")
	defer release()

	rows, err := conn.Query(context.Background(), getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	elems := make([]*storage.SignatureIntegration, 0, len(ids))
	foundSet := make(map[string]struct{})
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		var msg storage.SignatureIntegration
		if err := proto.Unmarshal(data, &msg); err != nil {
			return nil, nil, err
		}
		foundSet[msg.GetId()] = struct{}{}
		elems = append(elems, &msg)
	}
	missingIndices := make([]int, 0, len(ids)-len(foundSet))
	for i, id := range ids {
		if _, ok := foundSet[id]; !ok {
			missingIndices = append(missingIndices, i)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "SignatureIntegration")

	conn, release := s.acquireConn(ops.RemoveMany, "SignatureIntegration")
	defer release()
	if _, err := conn.Exec(context.Background(), deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(fn func(obj *storage.SignatureIntegration) error) error {
	rows, err := s.db.Query(context.Background(), walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.SignatureIntegration
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableSignatureintegrations(db *pgxpool.Pool) {
	_, _ = db.Exec(context.Background(), "DROP TABLE IF EXISTS signatureintegrations CASCADE")
	dropTableSignatureintegrationsPublicKeys(db)

}

func dropTableSignatureintegrationsPublicKeys(db *pgxpool.Pool) {
	_, _ = db.Exec(context.Background(), "DROP TABLE IF EXISTS signatureintegrations_PublicKeys CASCADE")

}

func Destroy(db *pgxpool.Pool) {
	dropTableSignatureintegrations(db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex() ([]string, error) {
	return nil, nil
}
