// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddNotification mocks base method.
func (m *MockDataStore) AddNotification(ctx context.Context, notification *storage.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockDataStoreMockRecorder) AddNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockDataStore)(nil).AddNotification), ctx, notification)
}

// CountNotifications mocks base method.
func (m *MockDataStore) CountNotifications(ctx context.Context, query *v1.Query) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNotifications", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNotifications indicates an expected call of CountNotifications.
func (mr *MockDataStoreMockRecorder) CountNotifications(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNotifications", reflect.TypeOf((*MockDataStore)(nil).CountNotifications), ctx, query)
}

// Flush mocks base method.
func (m *MockDataStore) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockDataStoreMockRecorder) Flush(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDataStore)(nil).Flush), ctx)
}

// GetNotificationByID mocks base method.
func (m *MockDataStore) GetNotificationByID(ctx context.Context, id string) (*storage.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, id)
	ret0, _ := ret[0].(*storage.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockDataStoreMockRecorder) GetNotificationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockDataStore)(nil).GetNotificationByID), ctx, id)
}

// ListNotifications mocks base method.
func (m *MockDataStore) ListNotifications(ctx context.Context, query *v1.Query) ([]*storage.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx, query)
	ret0, _ := ret[0].([]*storage.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockDataStoreMockRecorder) ListNotifications(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockDataStore)(nil).ListNotifications), ctx, query)
}
