// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type NotificationsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestNotificationsStore(t *testing.T) {
	suite.Run(t, new(NotificationsStoreSuite))
}

func (s *NotificationsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *NotificationsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE notifications CASCADE")
	s.T().Log("notifications", tag)
	s.NoError(err)
}

func (s *NotificationsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *NotificationsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	notification := &storage.Notification{}
	s.NoError(testutils.FullInit(notification, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundNotification, exists, err := store.Get(ctx, notification.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundNotification)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, notification))
	foundNotification, exists, err = store.Get(ctx, notification.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(notification, foundNotification)

	notificationCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, notificationCount)
	notificationCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(notificationCount)

	notificationExists, err := store.Exists(ctx, notification.GetId())
	s.NoError(err)
	s.True(notificationExists)
	s.NoError(store.Upsert(ctx, notification))
	s.ErrorIs(store.Upsert(withNoAccessCtx, notification), sac.ErrResourceAccessDenied)

	foundNotification, exists, err = store.Get(ctx, notification.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(notification, foundNotification)

	s.NoError(store.Delete(ctx, notification.GetId()))
	foundNotification, exists, err = store.Get(ctx, notification.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundNotification)
	s.ErrorIs(store.Delete(withNoAccessCtx, notification.GetId()), sac.ErrResourceAccessDenied)

	var notifications []*storage.Notification
	var notificationIDs []string
	for i := 0; i < 200; i++ {
		notification := &storage.Notification{}
		s.NoError(testutils.FullInit(notification, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		notifications = append(notifications, notification)
		notificationIDs = append(notificationIDs, notification.GetId())
	}

	s.NoError(store.UpsertMany(ctx, notifications))

	notificationCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, notificationCount)

	s.NoError(store.DeleteMany(ctx, notificationIDs))

	notificationCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, notificationCount)
}
