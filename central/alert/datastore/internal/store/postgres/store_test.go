// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type AlertsStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
}

func TestAlertsStore(t *testing.T) {
	suite.Run(t, new(AlertsStoreSuite))
}

func (s *AlertsStoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}
}

func (s *AlertsStoreSuite) TearDownTest() {
	s.envIsolator.RestoreAll()
}

func (s *AlertsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(ctx, config)
	s.NoError(err)
	defer pool.Close()

	Destroy(ctx, pool)
	store := New(ctx, pool)

	alert := &storage.Alert{}
	s.NoError(testutils.FullInit(alert, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundAlert, exists, err := store.Get(ctx, alert.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAlert)

	withNoAccessCtx := sac.WithNoAccess(ctx)
	withAccessToDifferentNsCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(alert.GetClusterId()),
			sac.NamespaceScopeKeys("unknown ns"),
		))
	withAccessCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(alert.GetClusterId()),
			sac.NamespaceScopeKeys(alert.GetNamespace()),
		))
	withAccessToClusterCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys(alert.GetClusterId()),
		))
	withNoAccessToClusterCtx := sac.WithGlobalAccessScopeChecker(context.Background(),
		sac.AllowFixedScopes(
			sac.AccessModeScopeKeys(storage.Access_READ_WRITE_ACCESS),
			sac.ResourceScopeKeys(targetResource),
			sac.ClusterScopeKeys("unknown cluster"),
		))

	s.NoError(store.Upsert(ctx, alert))
	foundAlert, exists, err = store.Get(ctx, alert.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(alert, foundAlert)

	alertCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(alertCount, 1)

	alertExists, err := store.Exists(ctx, alert.GetId())
	s.NoError(err)
	s.True(alertExists)
	s.NoError(store.Upsert(ctx, alert))
	s.ErrorIs(store.Upsert(withNoAccessCtx, alert), sac.ErrResourceAccessDenied)
	s.ErrorIs(store.Upsert(withNoAccessToClusterCtx, alert), sac.ErrResourceAccessDenied)
	s.ErrorIs(store.Upsert(withAccessToDifferentNsCtx, alert), sac.ErrResourceAccessDenied)
	s.NoError(store.Upsert(withAccessCtx, alert))
	s.NoError(store.Upsert(withAccessToClusterCtx, alert))
	s.ErrorIs(store.UpsertMany(withAccessToDifferentNsCtx, []*storage.Alert{alert}), sac.ErrResourceAccessDenied)
	s.ErrorIs(store.UpsertMany(withNoAccessToClusterCtx, []*storage.Alert{alert}), sac.ErrResourceAccessDenied)
	s.NoError(store.UpsertMany(withAccessCtx, []*storage.Alert{alert}))
	s.NoError(store.UpsertMany(withAccessToClusterCtx, []*storage.Alert{alert}))

	foundAlert, exists, err = store.Get(ctx, alert.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(alert, foundAlert)

	s.NoError(store.Delete(ctx, alert.GetId()))
	foundAlert, exists, err = store.Get(ctx, alert.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundAlert)

	var alerts []*storage.Alert
	for i := 0; i < 200; i++ {
		alert := &storage.Alert{}
		s.NoError(testutils.FullInit(alert, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		alerts = append(alerts, alert)
	}
	s.ErrorIs(store.UpsertMany(withAccessToDifferentNsCtx, alerts), sac.ErrResourceAccessDenied)
	s.NoError(store.UpsertMany(ctx, alerts))

	alertCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(alertCount, 200)
}
