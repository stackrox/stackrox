// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

var (
	// CreateTableNetworkpolicyapplicationundorecordStmt holds the create statement for table `networkpolicyapplicationundorecord`.
	CreateTableNetworkpolicyapplicationundorecordStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists networkpolicyapplicationundorecord (
                   ClusterId varchar,
                   serialized bytea,
                   PRIMARY KEY(ClusterId)
               )
               `,
		GormModel: (*Networkpolicyapplicationundorecord)(nil),
		Indexes:   []string{},
		Children:  []*postgres.CreateStmts{},
	}

	// NetworkpolicyapplicationundorecordSchema is the go schema for table `networkpolicyapplicationundorecord`.
	NetworkpolicyapplicationundorecordSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("networkpolicyapplicationundorecord")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.NetworkPolicyApplicationUndoRecord)(nil)), "networkpolicyapplicationundorecord")
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	NetworkpolicyapplicationundorecordTableName = "networkpolicyapplicationundorecord"
)

// Networkpolicyapplicationundorecord holds the Gorm model for Postgres table `networkpolicyapplicationundorecord`.
type Networkpolicyapplicationundorecord struct {
	ClusterId  string `gorm:"column:clusterid;type:varchar;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
