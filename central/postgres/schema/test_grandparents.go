// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestGrandparentsStmt holds the create statement for table `test_grandparents`.
	CreateTableTestGrandparentsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists test_grandparents (
                   Id varchar,
                   Val varchar,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists test_grandparents_embeddeds (
                   test_grandparents_Id varchar,
                   idx integer,
                   Val varchar,
                   PRIMARY KEY(test_grandparents_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (test_grandparents_Id) REFERENCES test_grandparents(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists testGrandparentsEmbeddeds_idx on test_grandparents_embeddeds using btree(idx)",
				},
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						Table: `
               create table if not exists test_grandparents_embeddeds_embedded2 (
                   test_grandparents_Id varchar,
                   test_grandparents_embeddeds_idx integer,
                   idx integer,
                   Val varchar,
                   PRIMARY KEY(test_grandparents_Id, test_grandparents_embeddeds_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (test_grandparents_Id, test_grandparents_embeddeds_idx) REFERENCES test_grandparents_embeddeds(test_grandparents_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists testGrandparentsEmbeddedsEmbedded2_idx on test_grandparents_embeddeds_embedded2 using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// TestGrandparentsSchema is the go schema for table `test_grandparents`.
	TestGrandparentsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("test_grandparents")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestGrandparent)(nil)), "test_grandparents")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory(61), "testgrandparent", (*storage.TestGrandparent)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
