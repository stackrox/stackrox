// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTablePolicyStmt holds the create statement for table `policy`.
	CreateTablePolicyStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists policy (
                   Id varchar,
                   Name varchar UNIQUE,
                   Description varchar,
                   Disabled bool,
                   Categories text[],
                   LifecycleStages int[],
                   Severity integer,
                   EnforcementActions int[],
                   LastUpdated timestamp,
                   SORTName varchar,
                   SORTLifecycleStage varchar,
                   SORTEnforcement bool,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// PolicySchema is the go schema for table `policy`.
	PolicySchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("policy")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.Policy)(nil)), "policy")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_POLICIES, "policy", (*storage.Policy)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	PolicyTableName = "policy"
)

// Policy holds the Gorm model for Postgres table `policy`.
type Policy struct {
	Id                 string           `gorm:"column:id;type:varchar;primaryKey"`
	Name               string           `gorm:"column:name;type:varchar;unique"`
	Description        string           `gorm:"column:description;type:varchar"`
	Disabled           bool             `gorm:"column:disabled;type:bool"`
	Categories         *pq.StringArray  `gorm:"column:categories;type:text[]"`
	LifecycleStages    *pq.Int32Array   `gorm:"column:lifecyclestages;type:int[]"`
	Severity           storage.Severity `gorm:"column:severity;type:integer"`
	EnforcementActions *pq.Int32Array   `gorm:"column:enforcementactions;type:int[]"`
	LastUpdated        *time.Time       `gorm:"column:lastupdated;type:timestamp"`
	SORTName           string           `gorm:"column:sortname;type:varchar"`
	SORTLifecycleStage string           `gorm:"column:sortlifecyclestage;type:varchar"`
	SORTEnforcement    bool             `gorm:"column:sortenforcement;type:bool"`
	serialized         []byte           `gorm:"column:serialized;type:bytea"`
}
