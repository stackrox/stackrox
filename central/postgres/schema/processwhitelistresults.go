// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

var (
	// CreateTableProcesswhitelistresultsStmt holds the create statement for table `processwhitelistresults`.
	CreateTableProcesswhitelistresultsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists processwhitelistresults (
                   DeploymentId varchar,
                   serialized bytea,
                   PRIMARY KEY(DeploymentId)
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// ProcesswhitelistresultsSchema is the go schema for table `processwhitelistresults`.
	ProcesswhitelistresultsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("processwhitelistresults")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ProcessBaselineResults)(nil)), "processwhitelistresults")
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	ProcesswhitelistresultsTableName = "processwhitelistresults"
)

// ProcessBaselineResults holds the Gorm model for Postgres table `processwhitelistresults`.
type Processwhitelistresults struct {
	DeploymentId string `gorm:"column:deploymentid;type:varchar;primaryKey"`
	serialized   []byte `gorm:"column:serialized;type:bytea"`
}
