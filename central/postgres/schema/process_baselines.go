// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableProcessBaselinesStmt holds the create statement for table `process_baselines`.
	CreateTableProcessBaselinesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists process_baselines (
                   Id varchar,
                   Key_DeploymentId varchar,
                   Key_ClusterId varchar,
                   Key_Namespace varchar,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// ProcessBaselinesSchema is the go schema for table `process_baselines`.
	ProcessBaselinesSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("process_baselines")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ProcessBaseline)(nil)), "process_baselines")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_PROCESS_BASELINES, "processbaseline", (*storage.ProcessBaseline)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
