// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"
	"time"

	"github.com/lib/pq"
	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableDeploymentsStmt holds the create statement for table `deployments`.
	CreateTableDeploymentsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists deployments (
                   Id varchar,
                   Name varchar,
                   Type varchar,
                   Namespace varchar,
                   NamespaceId varchar,
                   OrchestratorComponent bool,
                   Labels jsonb,
                   PodLabels jsonb,
                   Created timestamp,
                   ClusterId varchar,
                   ClusterName varchar,
                   Annotations jsonb,
                   Priority integer,
                   ImagePullSecrets text[],
                   ServiceAccount varchar,
                   ServiceAccountPermissionLevel integer,
                   RiskScore numeric,
                   ProcessTags text[],
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists deployments_Containers (
                   deployments_Id varchar,
                   idx integer,
                   Image_Id varchar,
                   Image_Name_Registry varchar,
                   Image_Name_Remote varchar,
                   Image_Name_Tag varchar,
                   Image_Name_FullName varchar,
                   SecurityContext_Privileged bool,
                   SecurityContext_DropCapabilities text[],
                   SecurityContext_AddCapabilities text[],
                   SecurityContext_ReadOnlyRootFilesystem bool,
                   Resources_CpuCoresRequest numeric,
                   Resources_CpuCoresLimit numeric,
                   Resources_MemoryMbRequest numeric,
                   Resources_MemoryMbLimit numeric,
                   PRIMARY KEY(deployments_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id) REFERENCES deployments(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists deploymentsContainers_idx on deployments_Containers using btree(idx)",
				},
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						Table: `
               create table if not exists deployments_Containers_Env (
                   deployments_Id varchar,
                   deployments_Containers_idx integer,
                   idx integer,
                   Key varchar,
                   Value varchar,
                   EnvVarSource integer,
                   PRIMARY KEY(deployments_Id, deployments_Containers_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id, deployments_Containers_idx) REFERENCES deployments_Containers(deployments_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists deploymentsContainersEnv_idx on deployments_Containers_Env using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
					&postgres.CreateStmts{
						Table: `
               create table if not exists deployments_Containers_Volumes (
                   deployments_Id varchar,
                   deployments_Containers_idx integer,
                   idx integer,
                   Name varchar,
                   Source varchar,
                   Destination varchar,
                   ReadOnly bool,
                   Type varchar,
                   PRIMARY KEY(deployments_Id, deployments_Containers_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id, deployments_Containers_idx) REFERENCES deployments_Containers(deployments_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists deploymentsContainersVolumes_idx on deployments_Containers_Volumes using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
					&postgres.CreateStmts{
						Table: `
               create table if not exists deployments_Containers_Secrets (
                   deployments_Id varchar,
                   deployments_Containers_idx integer,
                   idx integer,
                   Name varchar,
                   Path varchar,
                   PRIMARY KEY(deployments_Id, deployments_Containers_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id, deployments_Containers_idx) REFERENCES deployments_Containers(deployments_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists deploymentsContainersSecrets_idx on deployments_Containers_Secrets using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
				},
			},
			&postgres.CreateStmts{
				Table: `
               create table if not exists deployments_Ports (
                   deployments_Id varchar,
                   idx integer,
                   ContainerPort integer,
                   Protocol varchar,
                   Exposure integer,
                   PRIMARY KEY(deployments_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id) REFERENCES deployments(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists deploymentsPorts_idx on deployments_Ports using btree(idx)",
				},
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						Table: `
               create table if not exists deployments_Ports_ExposureInfos (
                   deployments_Id varchar,
                   deployments_Ports_idx integer,
                   idx integer,
                   Level integer,
                   ServiceName varchar,
                   ServicePort integer,
                   NodePort integer,
                   ExternalIps text[],
                   ExternalHostnames text[],
                   PRIMARY KEY(deployments_Id, deployments_Ports_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (deployments_Id, deployments_Ports_idx) REFERENCES deployments_Ports(deployments_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists deploymentsPortsExposureInfos_idx on deployments_Ports_ExposureInfos using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// DeploymentsSchema is the go schema for table `deployments`.
	DeploymentsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("deployments")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.Deployment)(nil)), "deployments")
		referencedSchemas := map[string]*walker.Schema{
			"storage.Image":             ImagesSchema,
			"storage.NamespaceMetadata": NamespacesSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_DEPLOYMENTS, "deployments", (*storage.Deployment)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	DeploymentsTableName           = "deployments"
	DeploymentsContainersTableName = "deployments_Containers"
	DeploymentsPortsTableName      = "deployments_Ports"
)

// Deployment holds the Gorm model for Postgres table `deployments`.
type Deployments struct {
	Id                            string                  `gorm:"column:id;type:varchar;primaryKey"`
	Name                          string                  `gorm:"column:name;type:varchar"`
	Type                          string                  `gorm:"column:type;type:varchar"`
	Namespace                     string                  `gorm:"column:namespace;type:varchar"`
	NamespaceId                   string                  `gorm:"column:namespaceid;type:varchar"`
	OrchestratorComponent         bool                    `gorm:"column:orchestratorcomponent;type:bool"`
	Labels                        map[string]string       `gorm:"column:labels;type:jsonb"`
	PodLabels                     map[string]string       `gorm:"column:podlabels;type:jsonb"`
	Created                       *time.Time              `gorm:"column:created;type:timestamp"`
	ClusterId                     string                  `gorm:"column:clusterid;type:varchar"`
	ClusterName                   string                  `gorm:"column:clustername;type:varchar"`
	Annotations                   map[string]string       `gorm:"column:annotations;type:jsonb"`
	Priority                      int64                   `gorm:"column:priority;type:integer"`
	ImagePullSecrets              *pq.StringArray         `gorm:"column:imagepullsecrets;type:text[]"`
	ServiceAccount                string                  `gorm:"column:serviceaccount;type:varchar"`
	ServiceAccountPermissionLevel storage.PermissionLevel `gorm:"column:serviceaccountpermissionlevel;type:integer"`
	RiskScore                     float32                 `gorm:"column:riskscore;type:numeric"`
	ProcessTags                   *pq.StringArray         `gorm:"column:processtags;type:text[]"`
	serialized                    []byte                  `gorm:"column:serialized;type:bytea"`
}

// Container holds the Gorm model for Postgres table `deployments_Containers`.
type DeploymentsContainers struct {
	deployments_Id                         string          `gorm:"column:deployments_id;type:varchar;primaryKey"`
	idx                                    int             `gorm:"column:idx;type:integer;primaryKey;index:deploymentsContainers_idx,type:btree"`
	Image_Id                               string          `gorm:"column:image_id;type:varchar"`
	Image_Name_Registry                    string          `gorm:"column:image_name_registry;type:varchar"`
	Image_Name_Remote                      string          `gorm:"column:image_name_remote;type:varchar"`
	Image_Name_Tag                         string          `gorm:"column:image_name_tag;type:varchar"`
	Image_Name_FullName                    string          `gorm:"column:image_name_fullname;type:varchar"`
	SecurityContext_Privileged             bool            `gorm:"column:securitycontext_privileged;type:bool"`
	SecurityContext_DropCapabilities       *pq.StringArray `gorm:"column:securitycontext_dropcapabilities;type:text[]"`
	SecurityContext_AddCapabilities        *pq.StringArray `gorm:"column:securitycontext_addcapabilities;type:text[]"`
	SecurityContext_ReadOnlyRootFilesystem bool            `gorm:"column:securitycontext_readonlyrootfilesystem;type:bool"`
	Resources_CpuCoresRequest              float32         `gorm:"column:resources_cpucoresrequest;type:numeric"`
	Resources_CpuCoresLimit                float32         `gorm:"column:resources_cpucoreslimit;type:numeric"`
	Resources_MemoryMbRequest              float32         `gorm:"column:resources_memorymbrequest;type:numeric"`
	Resources_MemoryMbLimit                float32         `gorm:"column:resources_memorymblimit;type:numeric"`
	DeploymentsRef                         Deployments     `gorm:"foreignKey:deployments_Id;references:Id;constraint:OnDelete:CASCADE"`
}

// PortConfig holds the Gorm model for Postgres table `deployments_Ports`.
type DeploymentsPorts struct {
	deployments_Id string                           `gorm:"column:deployments_id;type:varchar;primaryKey"`
	idx            int                              `gorm:"column:idx;type:integer;primaryKey;index:deploymentsPorts_idx,type:btree"`
	ContainerPort  int32                            `gorm:"column:containerport;type:integer"`
	Protocol       string                           `gorm:"column:protocol;type:varchar"`
	Exposure       storage.PortConfig_ExposureLevel `gorm:"column:exposure;type:integer"`
	DeploymentsRef Deployments                      `gorm:"foreignKey:deployments_Id;references:Id;constraint:OnDelete:CASCADE"`
}
