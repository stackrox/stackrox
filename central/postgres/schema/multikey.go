// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableMultikeyStmt holds the create statement for table `multikey`.
	CreateTableMultikeyStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists multikey (
                   Key1 varchar,
                   Key2 varchar,
                   StringSlice text[],
                   Bool bool,
                   Uint64 integer,
                   Int64 integer,
                   Float numeric,
                   Labels jsonb,
                   Timestamp timestamp,
                   Enum integer,
                   Enums int[],
                   String_ varchar,
                   IntSlice int[],
                   Oneofnested_Nested varchar,
                   serialized bytea,
                   PRIMARY KEY(Key1, Key2)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists multikey_Nested (
                   multikey_Key1 varchar,
                   multikey_Key2 varchar,
                   idx integer,
                   Nested varchar,
                   IsNested bool,
                   Int64 integer,
                   Nested2_Nested2 varchar,
                   Nested2_IsNested bool,
                   Nested2_Int64 integer,
                   PRIMARY KEY(multikey_Key1, multikey_Key2, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (multikey_Key1, multikey_Key2) REFERENCES multikey(Key1, Key2) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists multikeyNested_idx on multikey_Nested using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// MultikeySchema is the go schema for table `multikey`.
	MultikeySchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("multikey")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestMultiKeyStruct)(nil)), "multikey")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_SEARCH_UNSET, "multikey", (*storage.TestMultiKeyStruct)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	MultikeyTableName       = "multikey"
	MultikeyNestedTableName = "multikey_nested"
	/*
			MultikeyTableName = "multikey"
		       MultikeyNestedTableName = "multikey_nested"
	*/
)

// TestMultiKeyStruct holds the Gorm model for Postgres table `multikey`.
type Multikey struct {
	Key1              string                          `gorm:"column:key1;type:varchar;primaryKey"`
	Key2              string                          `gorm:"column:key2;type:varchar;primaryKey"`
	StringSlice       *pq.StringArray                 `gorm:"column:stringslice;type:text[]"`
	Bool              bool                            `gorm:"column:bool;type:bool"`
	Uint64            uint64                          `gorm:"column:uint64;type:integer"`
	Int64             int64                           `gorm:"column:int64;type:integer"`
	Float             float32                         `gorm:"column:float;type:numeric"`
	Labels            map[string]string               `gorm:"column:labels;type:jsonb"`
	Timestamp         *time.Time                      `gorm:"column:timestamp;type:timestamp"`
	Enum              storage.TestMultiKeyStruct_Enum `gorm:"column:enum;type:integer"`
	Enums             *pq.Int32Array                  `gorm:"column:enums;type:int[]"`
	String            string                          `gorm:"column:string_;type:varchar"`
	IntSlice          *pq.Int32Array                  `gorm:"column:intslice;type:int[]"`
	OneofnestedNested string                          `gorm:"column:oneofnested_nested;type:varchar"`
	Serialized        []byte                          `gorm:"column:serialized;type:bytea"`
}

// TestMultiKeyStruct_Nested holds the Gorm model for Postgres table `multikey_Nested`.
type MultikeyNested struct {
	MultikeyKey1    string   `gorm:"column:multikey_key1;type:varchar;primaryKey"`
	MultikeyKey2    string   `gorm:"column:multikey_key2;type:varchar;primaryKey"`
	Idx             int      `gorm:"column:idx;type:integer;primaryKey;index:multikeynested_idx,type:btree"`
	Nested          string   `gorm:"column:nested;type:varchar"`
	IsNested        bool     `gorm:"column:isnested;type:bool"`
	Int64           int64    `gorm:"column:int64;type:integer"`
	Nested2Nested2  string   `gorm:"column:nested2_nested2;type:varchar"`
	Nested2IsNested bool     `gorm:"column:nested2_isnested;type:bool"`
	Nested2Int64    int64    `gorm:"column:nested2_int64;type:integer"`
	MultikeyRef     Multikey `gorm:"foreignKey:multikey_key1,multikey_key2;references:key1,key2;constraint:OnDelete:CASCADE"`
}
