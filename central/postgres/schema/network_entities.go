// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableNetworkEntitiesStmt holds the create statement for table `network_entities`.
	CreateTableNetworkEntitiesStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists network_entities (
                   Info_Id varchar,
                   Info_ExternalSource_Default bool,
                   serialized bytea,
                   PRIMARY KEY(Info_Id)
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// NetworkEntitiesSchema is the go schema for table `network_entities`.
	NetworkEntitiesSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("network_entities")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.NetworkEntity)(nil)), "network_entities")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_NETWORK_ENTITY, "networkentity", (*storage.NetworkEntity)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
