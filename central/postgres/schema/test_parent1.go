// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestParent1Stmt holds the create statement for table `test_parent1`.
	CreateTableTestParent1Stmt = &postgres.CreateStmts{
		Table: `
               create table if not exists test_parent1 (
                   Id varchar,
                   ParentId varchar,
                   Val varchar,
                   serialized bytea,
                   PRIMARY KEY(Id),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (ParentId) REFERENCES test_grandparents(Id) ON DELETE CASCADE
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists test_parent1_childrens (
                   test_parent1_Id varchar,
                   idx integer,
                   ChildId varchar,
                   PRIMARY KEY(test_parent1_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (test_parent1_Id) REFERENCES test_parent1(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists testParent1Childrens_idx on test_parent1_childrens using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// TestParent1Schema is the go schema for table `test_parent1`.
	TestParent1Schema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("test_parent1")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestParent1)(nil)), "test_parent1")
		referencedSchemas := map[string]*walker.Schema{
			"storage.TestGrandparent": TestGrandparentsSchema,
			"storage.TestChild1":      TestChild1Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory(62), "testparent1", (*storage.TestParent1)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
