// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestgrandparentStmt holds the create statement for table `testgrandparent`.
	CreateTableTestgrandparentStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists testgrandparent (
                   Id varchar,
                   Val varchar,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists testgrandparent_Embedded (
                   testgrandparent_Id varchar,
                   idx integer,
                   Val varchar,
                   PRIMARY KEY(testgrandparent_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (testgrandparent_Id) REFERENCES testgrandparent(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists testgrandparentEmbedded_idx on testgrandparent_Embedded using btree(idx)",
				},
				Children: []*postgres.CreateStmts{
					&postgres.CreateStmts{
						Table: `
               create table if not exists testgrandparent_Embedded_Embedded2 (
                   testgrandparent_Id varchar,
                   testgrandparent_Embedded_idx integer,
                   idx integer,
                   Val varchar,
                   PRIMARY KEY(testgrandparent_Id, testgrandparent_Embedded_idx, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (testgrandparent_Id, testgrandparent_Embedded_idx) REFERENCES testgrandparent_Embedded(testgrandparent_Id, idx) ON DELETE CASCADE
               )
               `,
						Indexes: []string{
							"create index if not exists testgrandparentEmbeddedEmbedded2_idx on testgrandparent_Embedded_Embedded2 using btree(idx)",
						},
						Children: []*postgres.CreateStmts{},
					},
				},
			},
		},
	}

	// TestgrandparentSchema is the go schema for table `testgrandparent`.
	TestgrandparentSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("testgrandparent")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestGrandparent)(nil)), "testgrandparent")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory(61), "testgrandparent", (*storage.TestGrandparent)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	TestgrandparentTableName                  = "testgrandparent"
	TestgrandparentEmbeddedTableName          = "testgrandparent_embedded"
	TestgrandparentEmbeddedEmbedded2TableName = "testgrandparent_embedded_embedded2"
	/*
			TestgrandparentTableName = "testgrandparent"
		       TestgrandparentEmbeddedTableName = "testgrandparent_embedded"
	*/
)

// TestGrandparent holds the Gorm model for Postgres table `testgrandparent`.
type Testgrandparent struct {
	Id         string `gorm:"column:id;type:varchar;primaryKey"`
	Val        string `gorm:"column:val;type:varchar"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}

// TestGrandparent_Embedded holds the Gorm model for Postgres table `testgrandparent_Embedded`.
type TestgrandparentEmbedded struct {
	TestgrandparentId  string          `gorm:"column:testgrandparent_id;type:varchar;primaryKey"`
	Idx                int             `gorm:"column:idx;type:integer;primaryKey;index:testgrandparentembedded_idx,type:btree"`
	Val                string          `gorm:"column:val;type:varchar"`
	TestgrandparentRef Testgrandparent `gorm:"foreignKey:testgrandparent_id;references:id;constraint:OnDelete:CASCADE"`
}

// TestGrandparent_Embedded_Embedded2 holds the Gorm model for Postgres table `testgrandparent_Embedded_Embedded2`.
type TestgrandparentEmbeddedEmbedded2 struct {
	TestgrandparentId          string                  `gorm:"column:testgrandparent_id;type:varchar;primaryKey"`
	TestgrandparentEmbeddedIdx int                     `gorm:"column:testgrandparent_embedded_idx;type:integer;primaryKey"`
	Idx                        int                     `gorm:"column:idx;type:integer;primaryKey;index:testgrandparentembeddedembedded2_idx,type:btree"`
	Val                        string                  `gorm:"column:val;type:varchar"`
	TestgrandparentEmbeddedRef TestgrandparentEmbedded `gorm:"foreignKey:testgrandparent_id,testgrandparent_embedded_idx;references:testgrandparent_id,idx;constraint:OnDelete:CASCADE"`
}
