// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableSinglekeyStmt holds the create statement for table `singlekey`.
	CreateTableSinglekeyStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists singlekey (
                   Key varchar,
                   Name varchar UNIQUE,
                   StringSlice text[],
                   Bool bool,
                   Uint64 integer,
                   Int64 integer,
                   Float numeric,
                   Labels jsonb,
                   Timestamp timestamp,
                   Enum integer,
                   Enums int[],
                   serialized bytea,
                   PRIMARY KEY(Key)
               )
               `,
		Indexes: []string{
			"create index if not exists singlekey_Key on singlekey using hash(Key)",
		},
		Children: []*postgres.CreateStmts{},
	}

	// SinglekeySchema is the go schema for table `singlekey`.
	SinglekeySchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("singlekey")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestSingleKeyStruct)(nil)), "singlekey")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_SEARCH_UNSET, "singlekey", (*storage.TestSingleKeyStruct)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	SinglekeyTableName = "singlekey"
	/*
		SinglekeyTableName = "singlekey"
	*/
)

// TestSingleKeyStruct holds the Gorm model for Postgres table `singlekey`.
type Singlekey struct {
	Key         string                           `gorm:"column:key;type:varchar;primaryKey;index:singlekey_key,type:hash"`
	Name        string                           `gorm:"column:name;type:varchar;unique"`
	StringSlice *pq.StringArray                  `gorm:"column:stringslice;type:text[]"`
	Bool        bool                             `gorm:"column:bool;type:bool"`
	Uint64      uint64                           `gorm:"column:uint64;type:integer"`
	Int64       int64                            `gorm:"column:int64;type:integer"`
	Float       float32                          `gorm:"column:float;type:numeric"`
	Labels      map[string]string                `gorm:"column:labels;type:jsonb"`
	Timestamp   *time.Time                       `gorm:"column:timestamp;type:timestamp"`
	Enum        storage.TestSingleKeyStruct_Enum `gorm:"column:enum;type:integer"`
	Enums       *pq.Int32Array                   `gorm:"column:enums;type:int[]"`
	Serialized  []byte                           `gorm:"column:serialized;type:bytea"`
}
