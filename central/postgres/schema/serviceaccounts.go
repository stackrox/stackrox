// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableServiceaccountsStmt holds the create statement for table `serviceaccounts`.
	CreateTableServiceaccountsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists serviceaccounts (
                   Id varchar,
                   Name varchar,
                   Namespace varchar,
                   ClusterName varchar,
                   ClusterId varchar,
                   Labels jsonb,
                   Annotations jsonb,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// ServiceaccountsSchema is the go schema for table `serviceaccounts`.
	ServiceaccountsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("serviceaccounts")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ServiceAccount)(nil)), "serviceaccounts")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_SERVICE_ACCOUNTS, "serviceaccounts", (*storage.ServiceAccount)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	ServiceaccountsTableName = "serviceaccounts"
)

// ServiceAccount holds the Gorm model for Postgres table `serviceaccounts`.
type Serviceaccounts struct {
	Id          string            `gorm:"column:id;type:varchar;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar"`
	Namespace   string            `gorm:"column:namespace;type:varchar"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	ClusterId   string            `gorm:"column:clusterid;type:varchar"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	serialized  []byte            `gorm:"column:serialized;type:bytea"`
}
