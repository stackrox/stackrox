// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"
	"time"

	"github.com/lib/pq"
	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableVulnreqStmt holds the create statement for table `vulnreq`.
	CreateTableVulnreqStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists vulnreq (
                   Id varchar,
                   TargetState integer,
                   Status integer,
                   Expired bool,
                   Requestor_Name varchar,
                   CreatedAt timestamp,
                   LastUpdated timestamp,
                   DeferralReq_Expiry_ExpiresWhenFixed bool,
                   DeferralReq_Expiry_ExpiresOn timestamp,
                   Cves_Ids text[],
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists vulnreq_Approvers (
                   vulnreq_Id varchar,
                   idx integer,
                   Name varchar,
                   PRIMARY KEY(vulnreq_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (vulnreq_Id) REFERENCES vulnreq(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists vulnreqApprovers_idx on vulnreq_Approvers using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				Table: `
               create table if not exists vulnreq_Comments (
                   vulnreq_Id varchar,
                   idx integer,
                   User_Name varchar,
                   PRIMARY KEY(vulnreq_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (vulnreq_Id) REFERENCES vulnreq(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists vulnreqComments_idx on vulnreq_Comments using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// VulnreqSchema is the go schema for table `vulnreq`.
	VulnreqSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("vulnreq")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.VulnerabilityRequest)(nil)), "vulnreq")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_VULN_REQUEST, "vulnreq", (*storage.VulnerabilityRequest)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	VulnreqTableName          = "vulnreq"
	VulnreqApproversTableName = "vulnreq_Approvers"
	VulnreqCommentsTableName  = "vulnreq_Comments"
)

// VulnerabilityRequest holds the Gorm model for Postgres table `vulnreq`.
type Vulnreq struct {
	Id                                  string                     `gorm:"column:id;type:varchar;primaryKey"`
	TargetState                         storage.VulnerabilityState `gorm:"column:targetstate;type:integer"`
	Status                              storage.RequestStatus      `gorm:"column:status;type:integer"`
	Expired                             bool                       `gorm:"column:expired;type:bool"`
	Requestor_Name                      string                     `gorm:"column:requestor_name;type:varchar"`
	CreatedAt                           *time.Time                 `gorm:"column:createdat;type:timestamp"`
	LastUpdated                         *time.Time                 `gorm:"column:lastupdated;type:timestamp"`
	DeferralReq_Expiry_ExpiresWhenFixed bool                       `gorm:"column:deferralreq_expiry_expireswhenfixed;type:bool"`
	DeferralReq_Expiry_ExpiresOn        *time.Time                 `gorm:"column:deferralreq_expiry_expireson;type:timestamp"`
	Cves_Ids                            *pq.StringArray            `gorm:"column:cves_ids;type:text[]"`
	serialized                          []byte                     `gorm:"column:serialized;type:bytea"`
}

// SlimUser holds the Gorm model for Postgres table `vulnreq_Approvers`.
type VulnreqApprovers struct {
	vulnreq_Id string  `gorm:"column:vulnreq_id;type:varchar;primaryKey"`
	idx        int     `gorm:"column:idx;type:integer;primaryKey;index:vulnreqApprovers_idx,type:btree"`
	Name       string  `gorm:"column:name;type:varchar"`
	VulnreqRef Vulnreq `gorm:"foreignKey:vulnreq_Id;references:Id;constraint:OnDelete:CASCADE"`
}

// RequestComment holds the Gorm model for Postgres table `vulnreq_Comments`.
type VulnreqComments struct {
	vulnreq_Id string  `gorm:"column:vulnreq_id;type:varchar;primaryKey"`
	idx        int     `gorm:"column:idx;type:integer;primaryKey;index:vulnreqComments_idx,type:btree"`
	User_Name  string  `gorm:"column:user_name;type:varchar"`
	VulnreqRef Vulnreq `gorm:"foreignKey:vulnreq_Id;references:Id;constraint:OnDelete:CASCADE"`
}
