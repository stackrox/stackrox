// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableTestparent1Stmt holds the create statement for table `testparent1`.
	CreateTableTestparent1Stmt = &postgres.CreateStmts{
		Table: `
               create table if not exists testparent1 (
                   Id varchar,
                   ParentId varchar,
                   Val varchar,
                   serialized bytea,
                   PRIMARY KEY(Id),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (ParentId) REFERENCES testgrandparent(Id) ON DELETE CASCADE
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists testparent1_Children (
                   testparent1_Id varchar,
                   idx integer,
                   ChildId varchar,
                   PRIMARY KEY(testparent1_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (testparent1_Id) REFERENCES testparent1(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists testparent1Children_idx on testparent1_Children using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// Testparent1Schema is the go schema for table `testparent1`.
	Testparent1Schema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("testparent1")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestParent1)(nil)), "testparent1")
		referencedSchemas := map[string]*walker.Schema{
			"storage.TestGrandparent": TestgrandparentSchema,
			"storage.TestChild1":      Testchild1Schema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory(62), "testparent1", (*storage.TestParent1)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	Testparent1TableName         = "testparent1"
	Testparent1ChildrenTableName = "testparent1_Children"
)

// TestParent1 holds the Gorm model for Postgres table `testparent1`.
type Testparent1 struct {
	Id                 string          `gorm:"column:id;type:varchar;primaryKey"`
	ParentId           string          `gorm:"column:parentid;type:varchar"`
	Val                string          `gorm:"column:val;type:varchar"`
	serialized         []byte          `gorm:"column:serialized;type:bytea"`
	TestgrandparentRef Testgrandparent `gorm:"foreignKey:ParentId;references:Id;constraint:OnDelete:CASCADE"`
}

// TestParent1_Child1Ref holds the Gorm model for Postgres table `testparent1_Children`.
type Testparent1Children struct {
	testparent1_Id string      `gorm:"column:testparent1_id;type:varchar;primaryKey"`
	idx            int         `gorm:"column:idx;type:integer;primaryKey;index:testparent1Children_idx,type:btree"`
	ChildId        string      `gorm:"column:childid;type:varchar"`
	Testparent1Ref Testparent1 `gorm:"foreignKey:testparent1_Id;references:Id;constraint:OnDelete:CASCADE"`
}
