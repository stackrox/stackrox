// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableRolebindingsStmt holds the create statement for table `rolebindings`.
	CreateTableRolebindingsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists rolebindings (
                   Id varchar,
                   Name varchar,
                   Namespace varchar,
                   ClusterId varchar,
                   ClusterName varchar,
                   ClusterRole bool,
                   Labels jsonb,
                   Annotations jsonb,
                   RoleId varchar,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists rolebindings_Subjects (
                   rolebindings_Id varchar,
                   idx integer,
                   Kind integer,
                   Name varchar,
                   PRIMARY KEY(rolebindings_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (rolebindings_Id) REFERENCES rolebindings(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists rolebindingsSubjects_idx on rolebindings_Subjects using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// RolebindingsSchema is the go schema for table `rolebindings`.
	RolebindingsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("rolebindings")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.K8SRoleBinding)(nil)), "rolebindings")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_ROLEBINDINGS, "rolebindings", (*storage.K8SRoleBinding)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)

const (
	RolebindingsTableName         = "rolebindings"
	RolebindingsSubjectsTableName = "rolebindings_Subjects"
)

// K8SRoleBinding holds the Gorm model for Postgres table `rolebindings`.
type Rolebindings struct {
	Id          string            `gorm:"column:id;type:varchar;primaryKey"`
	Name        string            `gorm:"column:name;type:varchar"`
	Namespace   string            `gorm:"column:namespace;type:varchar"`
	ClusterId   string            `gorm:"column:clusterid;type:varchar"`
	ClusterName string            `gorm:"column:clustername;type:varchar"`
	ClusterRole bool              `gorm:"column:clusterrole;type:bool"`
	Labels      map[string]string `gorm:"column:labels;type:jsonb"`
	Annotations map[string]string `gorm:"column:annotations;type:jsonb"`
	RoleId      string            `gorm:"column:roleid;type:varchar"`
	serialized  []byte            `gorm:"column:serialized;type:bytea"`
}

// Subject holds the Gorm model for Postgres table `rolebindings_Subjects`.
type RolebindingsSubjects struct {
	rolebindings_Id string              `gorm:"column:rolebindings_id;type:varchar;primaryKey"`
	idx             int                 `gorm:"column:idx;type:integer;primaryKey;index:rolebindingsSubjects_idx,type:btree"`
	Kind            storage.SubjectKind `gorm:"column:kind;type:integer"`
	Name            string              `gorm:"column:name;type:varchar"`
	RolebindingsRef Rolebindings        `gorm:"foreignKey:rolebindings_Id;references:Id;constraint:OnDelete:CASCADE"`
}
