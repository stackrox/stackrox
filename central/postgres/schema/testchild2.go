// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

var (
	// CreateTableTestchild2Stmt holds the create statement for table `testchild2`.
	CreateTableTestchild2Stmt = &postgres.CreateStmts{
		Table: `
               create table if not exists testchild2 (
                   Id varchar,
                   ParentId varchar,
                   GrandparentId varchar,
                   Val varchar,
                   serialized bytea,
                   PRIMARY KEY(Id),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (ParentId) REFERENCES testparent2(Id) ON DELETE CASCADE
               )
               `,
		Indexes:  []string{},
		Children: []*postgres.CreateStmts{},
	}

	// Testchild2Schema is the go schema for table `testchild2`.
	Testchild2Schema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("testchild2")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.TestChild2)(nil)), "testchild2").
			WithReference(Testparent2Schema).
			WithReference(TestgrandparentSchema)
		globaldb.RegisterTable(schema)
		return schema
	}()
)
