// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableVulnerabilityRequestsStmt holds the create statement for table `vulnerability_requests`.
	CreateTableVulnerabilityRequestsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists vulnerability_requests (
                   Id varchar,
                   TargetState integer,
                   Status integer,
                   Expired bool,
                   Requestor_Name varchar,
                   CreatedAt timestamp,
                   LastUpdated timestamp,
                   DeferralReq_Expiry_ExpiresWhenFixed bool,
                   DeferralReq_Expiry_ExpiresOn timestamp,
                   Cves_Ids text[],
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{},
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				Table: `
               create table if not exists vulnerability_requests_approvers (
                   vulnerability_requests_Id varchar,
                   idx integer,
                   Name varchar,
                   PRIMARY KEY(vulnerability_requests_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (vulnerability_requests_Id) REFERENCES vulnerability_requests(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists vulnerabilityRequestsApprovers_idx on vulnerability_requests_approvers using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
			&postgres.CreateStmts{
				Table: `
               create table if not exists vulnerability_requests_comments (
                   vulnerability_requests_Id varchar,
                   idx integer,
                   User_Name varchar,
                   PRIMARY KEY(vulnerability_requests_Id, idx),
                   CONSTRAINT fk_parent_table_0 FOREIGN KEY (vulnerability_requests_Id) REFERENCES vulnerability_requests(Id) ON DELETE CASCADE
               )
               `,
				Indexes: []string{
					"create index if not exists vulnerabilityRequestsComments_idx on vulnerability_requests_comments using btree(idx)",
				},
				Children: []*postgres.CreateStmts{},
			},
		},
	}

	// VulnerabilityRequestsSchema is the go schema for table `vulnerability_requests`.
	VulnerabilityRequestsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("vulnerability_requests")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.VulnerabilityRequest)(nil)), "vulnerability_requests")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_VULN_REQUEST, "vulnerabilityrequest", (*storage.VulnerabilityRequest)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
