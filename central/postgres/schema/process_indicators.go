// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"reflect"

	"github.com/stackrox/rox/central/globaldb"
	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/search"
)

var (
	// CreateTableProcessIndicatorsStmt holds the create statement for table `process_indicators`.
	CreateTableProcessIndicatorsStmt = &postgres.CreateStmts{
		Table: `
               create table if not exists process_indicators (
                   Id varchar,
                   DeploymentId varchar,
                   ContainerName varchar,
                   PodId varchar,
                   PodUid varchar,
                   Signal_ContainerId varchar,
                   Signal_Name varchar,
                   Signal_Args varchar,
                   Signal_ExecFilePath varchar,
                   Signal_Uid integer,
                   ClusterId varchar,
                   Namespace varchar,
                   serialized bytea,
                   PRIMARY KEY(Id)
               )
               `,
		Indexes: []string{
			"create index if not exists processIndicators_DeploymentId on process_indicators using hash(DeploymentId)",
			"create index if not exists processIndicators_PodUid on process_indicators using hash(PodUid)",
		},
		Children: []*postgres.CreateStmts{},
	}

	// ProcessIndicatorsSchema is the go schema for table `process_indicators`.
	ProcessIndicatorsSchema = func() *walker.Schema {
		schema := globaldb.GetSchemaForTable("process_indicators")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ProcessIndicator)(nil)), "process_indicators")
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_PROCESS_INDICATORS, "process_indicators", (*storage.ProcessIndicator)(nil)))
		globaldb.RegisterTable(schema)
		return schema
	}()
)
