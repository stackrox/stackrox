// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddServiceIdentity mocks base method.
func (m *MockDataStore) AddServiceIdentity(ctx context.Context, identity *storage.ServiceIdentity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceIdentity", ctx, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceIdentity indicates an expected call of AddServiceIdentity.
func (mr *MockDataStoreMockRecorder) AddServiceIdentity(ctx, identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceIdentity", reflect.TypeOf((*MockDataStore)(nil).AddServiceIdentity), ctx, identity)
}

// ForEachServiceIdentity mocks base method.
func (m *MockDataStore) ForEachServiceIdentity(arg0 context.Context, arg1 func(*storage.ServiceIdentity) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachServiceIdentity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachServiceIdentity indicates an expected call of ForEachServiceIdentity.
func (mr *MockDataStoreMockRecorder) ForEachServiceIdentity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachServiceIdentity", reflect.TypeOf((*MockDataStore)(nil).ForEachServiceIdentity), arg0, arg1)
}
