// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	analystnotes "github.com/stackrox/rox/central/analystnotes"
	v1 "github.com/stackrox/rox/generated/api/v1"
	storage "github.com/stackrox/rox/generated/storage"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	search "github.com/stackrox/rox/pkg/search"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddProcessComment mocks base method.
func (m *MockDataStore) AddProcessComment(ctx context.Context, processKey *analystnotes.ProcessNoteKey, comment *storage.Comment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessComment", ctx, processKey, comment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessComment indicates an expected call of AddProcessComment.
func (mr *MockDataStoreMockRecorder) AddProcessComment(ctx, processKey, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessComment", reflect.TypeOf((*MockDataStore)(nil).AddProcessComment), ctx, processKey, comment)
}

// AddProcessIndicators mocks base method.
func (m *MockDataStore) AddProcessIndicators(arg0 context.Context, arg1 ...*storage.ProcessIndicator) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProcessIndicators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcessIndicators indicates an expected call of AddProcessIndicators.
func (mr *MockDataStoreMockRecorder) AddProcessIndicators(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).AddProcessIndicators), varargs...)
}

// GetCommentsCountForProcess mocks base method.
func (m *MockDataStore) GetCommentsCountForProcess(ctx context.Context, processKey *analystnotes.ProcessNoteKey) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsCountForProcess", ctx, processKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsCountForProcess indicates an expected call of GetCommentsCountForProcess.
func (mr *MockDataStoreMockRecorder) GetCommentsCountForProcess(ctx, processKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsCountForProcess", reflect.TypeOf((*MockDataStore)(nil).GetCommentsCountForProcess), ctx, processKey)
}

// GetCommentsForProcess mocks base method.
func (m *MockDataStore) GetCommentsForProcess(ctx context.Context, processKey *analystnotes.ProcessNoteKey) ([]*storage.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForProcess", ctx, processKey)
	ret0, _ := ret[0].([]*storage.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForProcess indicates an expected call of GetCommentsForProcess.
func (mr *MockDataStoreMockRecorder) GetCommentsForProcess(ctx, processKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForProcess", reflect.TypeOf((*MockDataStore)(nil).GetCommentsForProcess), ctx, processKey)
}

// GetProcessIndicator mocks base method.
func (m *MockDataStore) GetProcessIndicator(ctx context.Context, id string) (*storage.ProcessIndicator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessIndicator", ctx, id)
	ret0, _ := ret[0].(*storage.ProcessIndicator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessIndicator indicates an expected call of GetProcessIndicator.
func (mr *MockDataStoreMockRecorder) GetProcessIndicator(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicator", reflect.TypeOf((*MockDataStore)(nil).GetProcessIndicator), ctx, id)
}

// GetProcessIndicators mocks base method.
func (m *MockDataStore) GetProcessIndicators(ctx context.Context, ids []string) ([]*storage.ProcessIndicator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessIndicators", ctx, ids)
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProcessIndicators indicates an expected call of GetProcessIndicators.
func (mr *MockDataStoreMockRecorder) GetProcessIndicators(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).GetProcessIndicators), ctx, ids)
}

// RemoveProcessComment mocks base method.
func (m *MockDataStore) RemoveProcessComment(ctx context.Context, processKey *analystnotes.ProcessNoteKey, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessComment", ctx, processKey, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessComment indicates an expected call of RemoveProcessComment.
func (mr *MockDataStoreMockRecorder) RemoveProcessComment(ctx, processKey, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessComment", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessComment), ctx, processKey, commentID)
}

// RemoveProcessIndicators mocks base method.
func (m *MockDataStore) RemoveProcessIndicators(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessIndicators", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicators indicates an expected call of RemoveProcessIndicators.
func (mr *MockDataStoreMockRecorder) RemoveProcessIndicators(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessIndicators), ctx, ids)
}

// RemoveProcessIndicatorsByPod mocks base method.
func (m *MockDataStore) RemoveProcessIndicatorsByPod(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessIndicatorsByPod", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcessIndicatorsByPod indicates an expected call of RemoveProcessIndicatorsByPod.
func (mr *MockDataStoreMockRecorder) RemoveProcessIndicatorsByPod(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessIndicatorsByPod", reflect.TypeOf((*MockDataStore)(nil).RemoveProcessIndicatorsByPod), ctx, id)
}

// Search mocks base method.
func (m *MockDataStore) Search(ctx context.Context, q *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDataStoreMockRecorder) Search(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), ctx, q)
}

// SearchRawProcessIndicators mocks base method.
func (m *MockDataStore) SearchRawProcessIndicators(ctx context.Context, q *v1.Query) ([]*storage.ProcessIndicator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRawProcessIndicators", ctx, q)
	ret0, _ := ret[0].([]*storage.ProcessIndicator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRawProcessIndicators indicates an expected call of SearchRawProcessIndicators.
func (mr *MockDataStoreMockRecorder) SearchRawProcessIndicators(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRawProcessIndicators", reflect.TypeOf((*MockDataStore)(nil).SearchRawProcessIndicators), ctx, q)
}

// Stop mocks base method.
func (m *MockDataStore) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDataStoreMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDataStore)(nil).Stop))
}

// UpdateProcessComment mocks base method.
func (m *MockDataStore) UpdateProcessComment(ctx context.Context, processKey *analystnotes.ProcessNoteKey, comment *storage.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcessComment", ctx, processKey, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcessComment indicates an expected call of UpdateProcessComment.
func (mr *MockDataStoreMockRecorder) UpdateProcessComment(ctx, processKey, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcessComment", reflect.TypeOf((*MockDataStore)(nil).UpdateProcessComment), ctx, processKey, comment)
}

// Wait mocks base method.
func (m *MockDataStore) Wait(cancelWhen concurrency.Waitable) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", cancelWhen)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockDataStoreMockRecorder) Wait(cancelWhen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockDataStore)(nil).Wait), cancelWhen)
}

// WalkAll mocks base method.
func (m *MockDataStore) WalkAll(ctx context.Context, fn func(*storage.ProcessIndicator) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkAll", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkAll indicates an expected call of WalkAll.
func (mr *MockDataStoreMockRecorder) WalkAll(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkAll", reflect.TypeOf((*MockDataStore)(nil).WalkAll), ctx, fn)
}
