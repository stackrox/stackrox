// Code generated by MockGen. DO NOT EDIT.
// Source: deduper.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/deduper.go -source deduper.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	gomock "go.uber.org/mock/gomock"
)

// MockDeduper is a mock of Deduper interface.
type MockDeduper struct {
	ctrl     *gomock.Controller
	recorder *MockDeduperMockRecorder
}

// MockDeduperMockRecorder is the mock recorder for MockDeduper.
type MockDeduperMockRecorder struct {
	mock *MockDeduper
}

// NewMockDeduper creates a new mock instance.
func NewMockDeduper(ctrl *gomock.Controller) *MockDeduper {
	mock := &MockDeduper{ctrl: ctrl}
	mock.recorder = &MockDeduperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeduper) EXPECT() *MockDeduperMockRecorder {
	return m.recorder
}

// GetSuccessfulHashes mocks base method.
func (m *MockDeduper) GetSuccessfulHashes() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessfulHashes")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// GetSuccessfulHashes indicates an expected call of GetSuccessfulHashes.
func (mr *MockDeduperMockRecorder) GetSuccessfulHashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessfulHashes", reflect.TypeOf((*MockDeduper)(nil).GetSuccessfulHashes))
}

// MarkSuccessful mocks base method.
func (m *MockDeduper) MarkSuccessful(msg *central.MsgFromSensor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSuccessful", msg)
}

// MarkSuccessful indicates an expected call of MarkSuccessful.
func (mr *MockDeduperMockRecorder) MarkSuccessful(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSuccessful", reflect.TypeOf((*MockDeduper)(nil).MarkSuccessful), msg)
}

// ProcessSync mocks base method.
func (m *MockDeduper) ProcessSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessSync")
}

// ProcessSync indicates an expected call of ProcessSync.
func (mr *MockDeduperMockRecorder) ProcessSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSync", reflect.TypeOf((*MockDeduper)(nil).ProcessSync))
}

// ShouldProcess mocks base method.
func (m *MockDeduper) ShouldProcess(msg *central.MsgFromSensor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldProcess", msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldProcess indicates an expected call of ShouldProcess.
func (mr *MockDeduperMockRecorder) ShouldProcess(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldProcess", reflect.TypeOf((*MockDeduper)(nil).ShouldProcess), msg)
}

// StartSync mocks base method.
func (m *MockDeduper) StartSync() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSync")
}

// StartSync indicates an expected call of StartSync.
func (mr *MockDeduperMockRecorder) StartSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockDeduper)(nil).StartSync))
}
