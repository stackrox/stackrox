// Code generated by pg-bindings generator. DO NOT EDIT.

package postgres

import (
	"context"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/stackrox/rox/central/globaldb"
	"github.com/stackrox/rox/central/metrics"
	"github.com/stackrox/rox/generated/storage"
	ops "github.com/stackrox/rox/pkg/metrics"
	"github.com/stackrox/rox/pkg/postgres/pgutils"
	"github.com/stackrox/rox/pkg/postgres/walker"
)

const (
	baseTable  = "images"
	countStmt  = "SELECT COUNT(*) FROM images"
	existsStmt = "SELECT EXISTS(SELECT 1 FROM images WHERE Id = $1)"

	getStmt     = "SELECT serialized FROM images WHERE Id = $1"
	deleteStmt  = "DELETE FROM images WHERE Id = $1"
	walkStmt    = "SELECT serialized FROM images"
	getIDsStmt  = "SELECT Id FROM images"
	getManyStmt = "SELECT serialized FROM images WHERE Id = ANY($1::text[])"

	deleteManyStmt = "DELETE FROM images WHERE Id = ANY($1::text[])"
)

var (
	schema = walker.Walk(reflect.TypeOf((*storage.Image)(nil)), baseTable)
)

func init() {
	globaldb.RegisterTable(schema)
}

type Store interface {
	Count(ctx context.Context) (int, error)
	Exists(ctx context.Context, id string) (bool, error)
	Get(ctx context.Context, id string) (*storage.Image, bool, error)
	Upsert(ctx context.Context, obj *storage.Image) error
	UpsertMany(ctx context.Context, objs []*storage.Image) error
	Delete(ctx context.Context, id string) error
	GetIDs(ctx context.Context) ([]string, error)
	GetMany(ctx context.Context, ids []string) ([]*storage.Image, []int, error)
	DeleteMany(ctx context.Context, ids []string) error

	Walk(ctx context.Context, fn func(obj *storage.Image) error) error

	AckKeysIndexed(ctx context.Context, keys ...string) error
	GetKeysToIndex(ctx context.Context) ([]string, error)
}

type storeImpl struct {
	db *pgxpool.Pool
}

func createTableImages(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images (
    Id varchar,
    Name_Registry varchar,
    Name_Remote varchar,
    Name_Tag varchar,
    Name_FullName varchar,
    Metadata_V1_Digest varchar,
    Metadata_V1_Created timestamp,
    Metadata_V1_Author varchar,
    Metadata_V1_User varchar,
    Metadata_V1_Command text[],
    Metadata_V1_Entrypoint text[],
    Metadata_V1_Volumes text[],
    Metadata_V1_Labels jsonb,
    Metadata_V2_Digest varchar,
    Metadata_LayerShas text[],
    Metadata_DataSource_Id varchar,
    Metadata_DataSource_Name varchar,
    Metadata_Version integer,
    Scan_ScannerVersion varchar,
    Scan_ScanTime timestamp,
    Scan_OperatingSystem varchar,
    Scan_DataSource_Id varchar,
    Scan_DataSource_Name varchar,
    Scan_Notes int[],
    Components integer,
    Cves integer,
    FixableCves integer,
    LastUpdated timestamp,
    NotPullable bool,
    IsClusterLocal bool,
    Priority integer,
    RiskScore numeric,
    TopCvss numeric,
    Notes int[],
    serialized bytea,
    PRIMARY KEY(Id)
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

	createTableImagesLayers(ctx, db)
	createTableImagesResults(ctx, db)
	createTableImagesSignatures(ctx, db)
}

func createTableImagesLayers(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Layers (
    images_Id varchar,
    idx integer,
    Instruction varchar,
    Value varchar,
    Created timestamp,
    Author varchar,
    Empty bool,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists imagesLayers_idx on images_Layers using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTableImagesResults(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Results (
    images_Id varchar,
    idx integer,
    VerificationTime timestamp,
    VerifierId varchar,
    Status integer,
    Description varchar,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists imagesResults_idx on images_Results using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func createTableImagesSignatures(ctx context.Context, db *pgxpool.Pool) {
	table := `
create table if not exists images_Signatures (
    images_Id varchar,
    idx integer,
    Cosign_RawSignature varchar,
    Cosign_SignaturePayload varchar,
    PRIMARY KEY(images_Id, idx),
    CONSTRAINT fk_parent_table FOREIGN KEY (images_Id) REFERENCES images(Id) ON DELETE CASCADE
)
`

	_, err := db.Exec(ctx, table)
	if err != nil {
		panic("error creating table: " + table)
	}

	indexes := []string{

		"create index if not exists imagesSignatures_idx on images_Signatures using btree(idx)",
	}
	for _, index := range indexes {
		if _, err := db.Exec(ctx, index); err != nil {
			panic(err)
		}
	}

}

func insertIntoImages(ctx context.Context, tx pgx.Tx, obj *storage.Image) error {

	serialized, marshalErr := obj.Marshal()
	if marshalErr != nil {
		return marshalErr
	}

	values := []interface{}{
		// parent primary keys start
		obj.GetId(),
		obj.GetName().GetRegistry(),
		obj.GetName().GetRemote(),
		obj.GetName().GetTag(),
		obj.GetName().GetFullName(),
		obj.GetMetadata().GetV1().GetDigest(),
		pgutils.NilOrStringTimestamp(obj.GetMetadata().GetV1().GetCreated()),
		obj.GetMetadata().GetV1().GetAuthor(),
		obj.GetMetadata().GetV1().GetUser(),
		obj.GetMetadata().GetV1().GetCommand(),
		obj.GetMetadata().GetV1().GetEntrypoint(),
		obj.GetMetadata().GetV1().GetVolumes(),
		obj.GetMetadata().GetV1().GetLabels(),
		obj.GetMetadata().GetV2().GetDigest(),
		obj.GetMetadata().GetLayerShas(),
		obj.GetMetadata().GetDataSource().GetId(),
		obj.GetMetadata().GetDataSource().GetName(),
		obj.GetMetadata().GetVersion(),
		obj.GetScan().GetScannerVersion(),
		pgutils.NilOrStringTimestamp(obj.GetScan().GetScanTime()),
		obj.GetScan().GetOperatingSystem(),
		obj.GetScan().GetDataSource().GetId(),
		obj.GetScan().GetDataSource().GetName(),
		obj.GetScan().GetNotes(),
		obj.GetComponents(),
		obj.GetCves(),
		obj.GetFixableCves(),
		pgutils.NilOrStringTimestamp(obj.GetLastUpdated()),
		obj.GetNotPullable(),
		obj.GetIsClusterLocal(),
		obj.GetPriority(),
		obj.GetRiskScore(),
		obj.GetTopCvss(),
		obj.GetNotes(),
		serialized,
	}

	finalStr := "INSERT INTO images (Id, Name_Registry, Name_Remote, Name_Tag, Name_FullName, Metadata_V1_Digest, Metadata_V1_Created, Metadata_V1_Author, Metadata_V1_User, Metadata_V1_Command, Metadata_V1_Entrypoint, Metadata_V1_Volumes, Metadata_V1_Labels, Metadata_V2_Digest, Metadata_LayerShas, Metadata_DataSource_Id, Metadata_DataSource_Name, Metadata_Version, Scan_ScannerVersion, Scan_ScanTime, Scan_OperatingSystem, Scan_DataSource_Id, Scan_DataSource_Name, Scan_Notes, Components, Cves, FixableCves, LastUpdated, NotPullable, IsClusterLocal, Priority, RiskScore, TopCvss, Notes, serialized) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35) ON CONFLICT(Id) DO UPDATE SET Id = EXCLUDED.Id, Name_Registry = EXCLUDED.Name_Registry, Name_Remote = EXCLUDED.Name_Remote, Name_Tag = EXCLUDED.Name_Tag, Name_FullName = EXCLUDED.Name_FullName, Metadata_V1_Digest = EXCLUDED.Metadata_V1_Digest, Metadata_V1_Created = EXCLUDED.Metadata_V1_Created, Metadata_V1_Author = EXCLUDED.Metadata_V1_Author, Metadata_V1_User = EXCLUDED.Metadata_V1_User, Metadata_V1_Command = EXCLUDED.Metadata_V1_Command, Metadata_V1_Entrypoint = EXCLUDED.Metadata_V1_Entrypoint, Metadata_V1_Volumes = EXCLUDED.Metadata_V1_Volumes, Metadata_V1_Labels = EXCLUDED.Metadata_V1_Labels, Metadata_V2_Digest = EXCLUDED.Metadata_V2_Digest, Metadata_LayerShas = EXCLUDED.Metadata_LayerShas, Metadata_DataSource_Id = EXCLUDED.Metadata_DataSource_Id, Metadata_DataSource_Name = EXCLUDED.Metadata_DataSource_Name, Metadata_Version = EXCLUDED.Metadata_Version, Scan_ScannerVersion = EXCLUDED.Scan_ScannerVersion, Scan_ScanTime = EXCLUDED.Scan_ScanTime, Scan_OperatingSystem = EXCLUDED.Scan_OperatingSystem, Scan_DataSource_Id = EXCLUDED.Scan_DataSource_Id, Scan_DataSource_Name = EXCLUDED.Scan_DataSource_Name, Scan_Notes = EXCLUDED.Scan_Notes, Components = EXCLUDED.Components, Cves = EXCLUDED.Cves, FixableCves = EXCLUDED.FixableCves, LastUpdated = EXCLUDED.LastUpdated, NotPullable = EXCLUDED.NotPullable, IsClusterLocal = EXCLUDED.IsClusterLocal, Priority = EXCLUDED.Priority, RiskScore = EXCLUDED.RiskScore, TopCvss = EXCLUDED.TopCvss, Notes = EXCLUDED.Notes, serialized = EXCLUDED.serialized"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	var query string

	for childIdx, child := range obj.GetMetadata().GetV1().GetLayers() {
		if err := insertIntoImagesLayers(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Layers where images_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetMetadata().GetV1().GetLayers()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetSignatureVerificationData().GetResults() {
		if err := insertIntoImagesResults(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Results where images_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetSignatureVerificationData().GetResults()))
	if err != nil {
		return err
	}
	for childIdx, child := range obj.GetSignature().GetSignatures() {
		if err := insertIntoImagesSignatures(ctx, tx, child, obj.GetId(), childIdx); err != nil {
			return err
		}
	}

	query = "delete from images_Signatures where images_Id = $1 AND idx >= $2"
	_, err = tx.Exec(ctx, query, obj.GetId(), len(obj.GetSignature().GetSignatures()))
	if err != nil {
		return err
	}
	return nil
}

func insertIntoImagesLayers(ctx context.Context, tx pgx.Tx, obj *storage.ImageLayer, images_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		images_Id,
		idx,
		obj.GetInstruction(),
		obj.GetValue(),
		pgutils.NilOrStringTimestamp(obj.GetCreated()),
		obj.GetAuthor(),
		obj.GetEmpty(),
	}

	finalStr := "INSERT INTO images_Layers (images_Id, idx, Instruction, Value, Created, Author, Empty) VALUES($1, $2, $3, $4, $5, $6, $7) ON CONFLICT(images_Id, idx) DO UPDATE SET images_Id = EXCLUDED.images_Id, idx = EXCLUDED.idx, Instruction = EXCLUDED.Instruction, Value = EXCLUDED.Value, Created = EXCLUDED.Created, Author = EXCLUDED.Author, Empty = EXCLUDED.Empty"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoImagesResults(ctx context.Context, tx pgx.Tx, obj *storage.ImageSignatureVerificationResult, images_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		images_Id,
		idx,
		pgutils.NilOrStringTimestamp(obj.GetVerificationTime()),
		obj.GetVerifierId(),
		obj.GetStatus(),
		obj.GetDescription(),
	}

	finalStr := "INSERT INTO images_Results (images_Id, idx, VerificationTime, VerifierId, Status, Description) VALUES($1, $2, $3, $4, $5, $6) ON CONFLICT(images_Id, idx) DO UPDATE SET images_Id = EXCLUDED.images_Id, idx = EXCLUDED.idx, VerificationTime = EXCLUDED.VerificationTime, VerifierId = EXCLUDED.VerifierId, Status = EXCLUDED.Status, Description = EXCLUDED.Description"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

func insertIntoImagesSignatures(ctx context.Context, tx pgx.Tx, obj *storage.Signature, images_Id string, idx int) error {

	values := []interface{}{
		// parent primary keys start
		images_Id,
		idx,
		obj.GetCosign().GetRawSignature(),
		obj.GetCosign().GetSignaturePayload(),
	}

	finalStr := "INSERT INTO images_Signatures (images_Id, idx, Cosign_RawSignature, Cosign_SignaturePayload) VALUES($1, $2, $3, $4) ON CONFLICT(images_Id, idx) DO UPDATE SET images_Id = EXCLUDED.images_Id, idx = EXCLUDED.idx, Cosign_RawSignature = EXCLUDED.Cosign_RawSignature, Cosign_SignaturePayload = EXCLUDED.Cosign_SignaturePayload"
	_, err := tx.Exec(ctx, finalStr, values...)
	if err != nil {
		return err
	}

	return nil
}

// New returns a new Store instance using the provided sql instance.
func New(ctx context.Context, db *pgxpool.Pool) Store {
	createTableImages(ctx, db)

	return &storeImpl{
		db: db,
	}
}

func (s *storeImpl) upsert(ctx context.Context, objs ...*storage.Image) error {
	conn, release := s.acquireConn(ctx, ops.Get, "Image")
	defer release()

	for _, obj := range objs {
		tx, err := conn.Begin(ctx)
		if err != nil {
			return err
		}

		if err := insertIntoImages(ctx, tx, obj); err != nil {
			if err := tx.Rollback(ctx); err != nil {
				return err
			}
			return err
		}
		if err := tx.Commit(ctx); err != nil {
			return err
		}
	}
	return nil
}

func (s *storeImpl) Upsert(ctx context.Context, obj *storage.Image) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Upsert, "Image")

	return s.upsert(ctx, obj)
}

func (s *storeImpl) UpsertMany(ctx context.Context, objs []*storage.Image) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.UpdateMany, "Image")

	return s.upsert(ctx, objs...)
}

// Count returns the number of objects in the store
func (s *storeImpl) Count(ctx context.Context) (int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Count, "Image")

	row := s.db.QueryRow(ctx, countStmt)
	var count int
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

// Exists returns if the id exists in the store
func (s *storeImpl) Exists(ctx context.Context, id string) (bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Exists, "Image")

	row := s.db.QueryRow(ctx, existsStmt, id)
	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, pgutils.ErrNilIfNoRows(err)
	}
	return exists, nil
}

// Get returns the object, if it exists from the store
func (s *storeImpl) Get(ctx context.Context, id string) (*storage.Image, bool, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Get, "Image")

	conn, release := s.acquireConn(ctx, ops.Get, "Image")
	defer release()

	row := conn.QueryRow(ctx, getStmt, id)
	var data []byte
	if err := row.Scan(&data); err != nil {
		return nil, false, pgutils.ErrNilIfNoRows(err)
	}

	var msg storage.Image
	if err := proto.Unmarshal(data, &msg); err != nil {
		return nil, false, err
	}
	return &msg, true, nil
}

func (s *storeImpl) acquireConn(ctx context.Context, op ops.Op, typ string) (*pgxpool.Conn, func()) {
	defer metrics.SetAcquireDBConnDuration(time.Now(), op, typ)
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		panic(err)
	}
	return conn, conn.Release
}

// Delete removes the specified ID from the store
func (s *storeImpl) Delete(ctx context.Context, id string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.Remove, "Image")

	conn, release := s.acquireConn(ctx, ops.Remove, "Image")
	defer release()

	if _, err := conn.Exec(ctx, deleteStmt, id); err != nil {
		return err
	}
	return nil
}

// GetIDs returns all the IDs for the store
func (s *storeImpl) GetIDs(ctx context.Context) ([]string, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetAll, "storage.ImageIDs")

	rows, err := s.db.Query(ctx, getIDsStmt)
	if err != nil {
		return nil, pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	var ids []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		ids = append(ids, id)
	}
	return ids, nil
}

// GetMany returns the objects specified by the IDs or the index in the missing indices slice
func (s *storeImpl) GetMany(ctx context.Context, ids []string) ([]*storage.Image, []int, error) {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.GetMany, "Image")

	conn, release := s.acquireConn(ctx, ops.GetMany, "Image")
	defer release()

	rows, err := conn.Query(ctx, getManyStmt, ids)
	if err != nil {
		if err == pgx.ErrNoRows {
			missingIndices := make([]int, 0, len(ids))
			for i := range ids {
				missingIndices = append(missingIndices, i)
			}
			return nil, missingIndices, nil
		}
		return nil, nil, err
	}
	defer rows.Close()
	resultsByID := make(map[string]*storage.Image)
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return nil, nil, err
		}
		msg := &storage.Image{}
		if err := proto.Unmarshal(data, msg); err != nil {
			return nil, nil, err
		}
		resultsByID[msg.GetId()] = msg
	}
	missingIndices := make([]int, 0, len(ids)-len(resultsByID))
	// It is important that the elems are populated in the same order as the input ids
	// slice, since some calling code relies on that to maintain order.
	elems := make([]*storage.Image, 0, len(resultsByID))
	for i, id := range ids {
		if result, ok := resultsByID[id]; !ok {
			missingIndices = append(missingIndices, i)
		} else {
			elems = append(elems, result)
		}
	}
	return elems, missingIndices, nil
}

// Delete removes the specified IDs from the store
func (s *storeImpl) DeleteMany(ctx context.Context, ids []string) error {
	defer metrics.SetPostgresOperationDurationTime(time.Now(), ops.RemoveMany, "Image")

	conn, release := s.acquireConn(ctx, ops.RemoveMany, "Image")
	defer release()
	if _, err := conn.Exec(ctx, deleteManyStmt, ids); err != nil {
		return err
	}
	return nil
}

// Walk iterates over all of the objects in the store and applies the closure
func (s *storeImpl) Walk(ctx context.Context, fn func(obj *storage.Image) error) error {
	rows, err := s.db.Query(ctx, walkStmt)
	if err != nil {
		return pgutils.ErrNilIfNoRows(err)
	}
	defer rows.Close()
	for rows.Next() {
		var data []byte
		if err := rows.Scan(&data); err != nil {
			return err
		}
		var msg storage.Image
		if err := proto.Unmarshal(data, &msg); err != nil {
			return err
		}
		if err := fn(&msg); err != nil {
			return err
		}
	}
	return nil
}

//// Used for testing

func dropTableImages(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images CASCADE")
	dropTableImagesLayers(ctx, db)
	dropTableImagesResults(ctx, db)
	dropTableImagesSignatures(ctx, db)

}

func dropTableImagesLayers(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Layers CASCADE")

}

func dropTableImagesResults(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Results CASCADE")

}

func dropTableImagesSignatures(ctx context.Context, db *pgxpool.Pool) {
	_, _ = db.Exec(ctx, "DROP TABLE IF EXISTS images_Signatures CASCADE")

}

func Destroy(ctx context.Context, db *pgxpool.Pool) {
	dropTableImages(ctx, db)
}

//// Stubs for satisfying legacy interfaces

// AckKeysIndexed acknowledges the passed keys were indexed
func (s *storeImpl) AckKeysIndexed(ctx context.Context, keys ...string) error {
	return nil
}

// GetKeysToIndex returns the keys that need to be indexed
func (s *storeImpl) GetKeysToIndex(ctx context.Context) ([]string, error) {
	return nil, nil
}
