// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CalculateRiskAndUpsertImage mocks base method.
func (m *MockManager) CalculateRiskAndUpsertImage(image *storage.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRiskAndUpsertImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateRiskAndUpsertImage indicates an expected call of CalculateRiskAndUpsertImage.
func (mr *MockManagerMockRecorder) CalculateRiskAndUpsertImage(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRiskAndUpsertImage", reflect.TypeOf((*MockManager)(nil).CalculateRiskAndUpsertImage), image)
}

// CalculateRiskAndUpsertNode mocks base method.
func (m *MockManager) CalculateRiskAndUpsertNode(node *storage.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRiskAndUpsertNode", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateRiskAndUpsertNode indicates an expected call of CalculateRiskAndUpsertNode.
func (mr *MockManagerMockRecorder) CalculateRiskAndUpsertNode(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRiskAndUpsertNode", reflect.TypeOf((*MockManager)(nil).CalculateRiskAndUpsertNode), node)
}

// ReprocessDeploymentRisk mocks base method.
func (m *MockManager) ReprocessDeploymentRisk(deployment *storage.Deployment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReprocessDeploymentRisk", deployment)
}

// ReprocessDeploymentRisk indicates an expected call of ReprocessDeploymentRisk.
func (mr *MockManagerMockRecorder) ReprocessDeploymentRisk(deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprocessDeploymentRisk", reflect.TypeOf((*MockManager)(nil).ReprocessDeploymentRisk), deployment)
}
