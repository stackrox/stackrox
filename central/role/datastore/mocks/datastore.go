// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	permissions "github.com/stackrox/rox/pkg/auth/permissions"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AccessScopeExists mocks base method.
func (m *MockDataStore) AccessScopeExists(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessScopeExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessScopeExists indicates an expected call of AccessScopeExists.
func (mr *MockDataStoreMockRecorder) AccessScopeExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessScopeExists", reflect.TypeOf((*MockDataStore)(nil).AccessScopeExists), ctx, id)
}

// AddAccessScope mocks base method.
func (m *MockDataStore) AddAccessScope(ctx context.Context, scope *storage.SimpleAccessScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccessScope", ctx, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccessScope indicates an expected call of AddAccessScope.
func (mr *MockDataStoreMockRecorder) AddAccessScope(ctx, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccessScope", reflect.TypeOf((*MockDataStore)(nil).AddAccessScope), ctx, scope)
}

// AddPermissionSet mocks base method.
func (m *MockDataStore) AddPermissionSet(ctx context.Context, permissionSet *storage.PermissionSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionSet", ctx, permissionSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissionSet indicates an expected call of AddPermissionSet.
func (mr *MockDataStoreMockRecorder) AddPermissionSet(ctx, permissionSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionSet", reflect.TypeOf((*MockDataStore)(nil).AddPermissionSet), ctx, permissionSet)
}

// AddRole mocks base method.
func (m *MockDataStore) AddRole(ctx context.Context, role *storage.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockDataStoreMockRecorder) AddRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockDataStore)(nil).AddRole), ctx, role)
}

// CountAccessScopes mocks base method.
func (m *MockDataStore) CountAccessScopes(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAccessScopes", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAccessScopes indicates an expected call of CountAccessScopes.
func (mr *MockDataStoreMockRecorder) CountAccessScopes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAccessScopes", reflect.TypeOf((*MockDataStore)(nil).CountAccessScopes), ctx)
}

// CountPermissionSets mocks base method.
func (m *MockDataStore) CountPermissionSets(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPermissionSets", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPermissionSets indicates an expected call of CountPermissionSets.
func (mr *MockDataStoreMockRecorder) CountPermissionSets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPermissionSets", reflect.TypeOf((*MockDataStore)(nil).CountPermissionSets), ctx)
}

// CountRoles mocks base method.
func (m *MockDataStore) CountRoles(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRoles", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRoles indicates an expected call of CountRoles.
func (mr *MockDataStoreMockRecorder) CountRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRoles", reflect.TypeOf((*MockDataStore)(nil).CountRoles), ctx)
}

// GetAccessScope mocks base method.
func (m *MockDataStore) GetAccessScope(ctx context.Context, id string) (*storage.SimpleAccessScope, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessScope", ctx, id)
	ret0, _ := ret[0].(*storage.SimpleAccessScope)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessScope indicates an expected call of GetAccessScope.
func (mr *MockDataStoreMockRecorder) GetAccessScope(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessScope", reflect.TypeOf((*MockDataStore)(nil).GetAccessScope), ctx, id)
}

// GetAccessScopesFiltered mocks base method.
func (m *MockDataStore) GetAccessScopesFiltered(ctx context.Context, filter func(*storage.SimpleAccessScope) bool) ([]*storage.SimpleAccessScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessScopesFiltered", ctx, filter)
	ret0, _ := ret[0].([]*storage.SimpleAccessScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessScopesFiltered indicates an expected call of GetAccessScopesFiltered.
func (mr *MockDataStoreMockRecorder) GetAccessScopesFiltered(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessScopesFiltered", reflect.TypeOf((*MockDataStore)(nil).GetAccessScopesFiltered), ctx, filter)
}

// GetAllAccessScopes mocks base method.
func (m *MockDataStore) GetAllAccessScopes(ctx context.Context) ([]*storage.SimpleAccessScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccessScopes", ctx)
	ret0, _ := ret[0].([]*storage.SimpleAccessScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccessScopes indicates an expected call of GetAllAccessScopes.
func (mr *MockDataStoreMockRecorder) GetAllAccessScopes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccessScopes", reflect.TypeOf((*MockDataStore)(nil).GetAllAccessScopes), ctx)
}

// GetAllPermissionSets mocks base method.
func (m *MockDataStore) GetAllPermissionSets(ctx context.Context) ([]*storage.PermissionSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionSets", ctx)
	ret0, _ := ret[0].([]*storage.PermissionSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPermissionSets indicates an expected call of GetAllPermissionSets.
func (mr *MockDataStoreMockRecorder) GetAllPermissionSets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionSets", reflect.TypeOf((*MockDataStore)(nil).GetAllPermissionSets), ctx)
}

// GetAllResolvedRoles mocks base method.
func (m *MockDataStore) GetAllResolvedRoles(ctx context.Context) ([]permissions.ResolvedRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResolvedRoles", ctx)
	ret0, _ := ret[0].([]permissions.ResolvedRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResolvedRoles indicates an expected call of GetAllResolvedRoles.
func (mr *MockDataStoreMockRecorder) GetAllResolvedRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResolvedRoles", reflect.TypeOf((*MockDataStore)(nil).GetAllResolvedRoles), ctx)
}

// GetAllRoles mocks base method.
func (m *MockDataStore) GetAllRoles(ctx context.Context) ([]*storage.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]*storage.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockDataStoreMockRecorder) GetAllRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockDataStore)(nil).GetAllRoles), ctx)
}

// GetAndResolveRole mocks base method.
func (m *MockDataStore) GetAndResolveRole(ctx context.Context, name string) (permissions.ResolvedRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndResolveRole", ctx, name)
	ret0, _ := ret[0].(permissions.ResolvedRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndResolveRole indicates an expected call of GetAndResolveRole.
func (mr *MockDataStoreMockRecorder) GetAndResolveRole(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndResolveRole", reflect.TypeOf((*MockDataStore)(nil).GetAndResolveRole), ctx, name)
}

// GetPermissionSet mocks base method.
func (m *MockDataStore) GetPermissionSet(ctx context.Context, id string) (*storage.PermissionSet, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionSet", ctx, id)
	ret0, _ := ret[0].(*storage.PermissionSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPermissionSet indicates an expected call of GetPermissionSet.
func (mr *MockDataStoreMockRecorder) GetPermissionSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionSet", reflect.TypeOf((*MockDataStore)(nil).GetPermissionSet), ctx, id)
}

// GetPermissionSetsFiltered mocks base method.
func (m *MockDataStore) GetPermissionSetsFiltered(ctx context.Context, filter func(*storage.PermissionSet) bool) ([]*storage.PermissionSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionSetsFiltered", ctx, filter)
	ret0, _ := ret[0].([]*storage.PermissionSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionSetsFiltered indicates an expected call of GetPermissionSetsFiltered.
func (mr *MockDataStoreMockRecorder) GetPermissionSetsFiltered(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionSetsFiltered", reflect.TypeOf((*MockDataStore)(nil).GetPermissionSetsFiltered), ctx, filter)
}

// GetRole mocks base method.
func (m *MockDataStore) GetRole(ctx context.Context, name string) (*storage.Role, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, name)
	ret0, _ := ret[0].(*storage.Role)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRole indicates an expected call of GetRole.
func (mr *MockDataStoreMockRecorder) GetRole(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockDataStore)(nil).GetRole), ctx, name)
}

// GetRolesFiltered mocks base method.
func (m *MockDataStore) GetRolesFiltered(ctx context.Context, filter func(*storage.Role) bool) ([]*storage.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesFiltered", ctx, filter)
	ret0, _ := ret[0].([]*storage.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesFiltered indicates an expected call of GetRolesFiltered.
func (mr *MockDataStoreMockRecorder) GetRolesFiltered(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesFiltered", reflect.TypeOf((*MockDataStore)(nil).GetRolesFiltered), ctx, filter)
}

// RemoveAccessScope mocks base method.
func (m *MockDataStore) RemoveAccessScope(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccessScope", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccessScope indicates an expected call of RemoveAccessScope.
func (mr *MockDataStoreMockRecorder) RemoveAccessScope(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessScope", reflect.TypeOf((*MockDataStore)(nil).RemoveAccessScope), ctx, id)
}

// RemovePermissionSet mocks base method.
func (m *MockDataStore) RemovePermissionSet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionSet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissionSet indicates an expected call of RemovePermissionSet.
func (mr *MockDataStoreMockRecorder) RemovePermissionSet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionSet", reflect.TypeOf((*MockDataStore)(nil).RemovePermissionSet), ctx, id)
}

// RemoveRole mocks base method.
func (m *MockDataStore) RemoveRole(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockDataStoreMockRecorder) RemoveRole(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockDataStore)(nil).RemoveRole), ctx, name)
}

// UpdateAccessScope mocks base method.
func (m *MockDataStore) UpdateAccessScope(ctx context.Context, scope *storage.SimpleAccessScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessScope", ctx, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccessScope indicates an expected call of UpdateAccessScope.
func (mr *MockDataStoreMockRecorder) UpdateAccessScope(ctx, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessScope", reflect.TypeOf((*MockDataStore)(nil).UpdateAccessScope), ctx, scope)
}

// UpdatePermissionSet mocks base method.
func (m *MockDataStore) UpdatePermissionSet(ctx context.Context, permissionSet *storage.PermissionSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionSet", ctx, permissionSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermissionSet indicates an expected call of UpdatePermissionSet.
func (mr *MockDataStoreMockRecorder) UpdatePermissionSet(ctx, permissionSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionSet", reflect.TypeOf((*MockDataStore)(nil).UpdatePermissionSet), ctx, permissionSet)
}

// UpdateRole mocks base method.
func (m *MockDataStore) UpdateRole(ctx context.Context, role *storage.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockDataStoreMockRecorder) UpdateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockDataStore)(nil).UpdateRole), ctx, role)
}

// UpsertAccessScope mocks base method.
func (m *MockDataStore) UpsertAccessScope(ctx context.Context, scope *storage.SimpleAccessScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAccessScope", ctx, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAccessScope indicates an expected call of UpsertAccessScope.
func (mr *MockDataStoreMockRecorder) UpsertAccessScope(ctx, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccessScope", reflect.TypeOf((*MockDataStore)(nil).UpsertAccessScope), ctx, scope)
}

// UpsertPermissionSet mocks base method.
func (m *MockDataStore) UpsertPermissionSet(ctx context.Context, permissionSet *storage.PermissionSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPermissionSet", ctx, permissionSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPermissionSet indicates an expected call of UpsertPermissionSet.
func (mr *MockDataStoreMockRecorder) UpsertPermissionSet(ctx, permissionSet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPermissionSet", reflect.TypeOf((*MockDataStore)(nil).UpsertPermissionSet), ctx, permissionSet)
}

// UpsertRole mocks base method.
func (m *MockDataStore) UpsertRole(ctx context.Context, role *storage.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRole indicates an expected call of UpsertRole.
func (mr *MockDataStoreMockRecorder) UpsertRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockDataStore)(nil).UpsertRole), ctx, role)
}
