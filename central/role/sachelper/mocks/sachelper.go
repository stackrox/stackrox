// Code generated by MockGen. DO NOT EDIT.
// Source: sachelper.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/sachelper.go -source sachelper.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	permissions "github.com/stackrox/rox/pkg/auth/permissions"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterSacHelper is a mock of ClusterSacHelper interface.
type MockClusterSacHelper struct {
	ctrl     *gomock.Controller
	recorder *MockClusterSacHelperMockRecorder
}

// MockClusterSacHelperMockRecorder is the mock recorder for MockClusterSacHelper.
type MockClusterSacHelperMockRecorder struct {
	mock *MockClusterSacHelper
}

// NewMockClusterSacHelper creates a new mock instance.
func NewMockClusterSacHelper(ctrl *gomock.Controller) *MockClusterSacHelper {
	mock := &MockClusterSacHelper{ctrl: ctrl}
	mock.recorder = &MockClusterSacHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterSacHelper) EXPECT() *MockClusterSacHelperMockRecorder {
	return m.recorder
}

// GetClustersForPermissions mocks base method.
func (m *MockClusterSacHelper) GetClustersForPermissions(ctx context.Context, requestedPermissions []string, pagination *v1.Pagination) ([]*v1.ScopeObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClustersForPermissions", ctx, requestedPermissions, pagination)
	ret0, _ := ret[0].([]*v1.ScopeObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClustersForPermissions indicates an expected call of GetClustersForPermissions.
func (mr *MockClusterSacHelperMockRecorder) GetClustersForPermissions(ctx, requestedPermissions, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClustersForPermissions", reflect.TypeOf((*MockClusterSacHelper)(nil).GetClustersForPermissions), ctx, requestedPermissions, pagination)
}

// IsClusterVisibleForPermissions mocks base method.
func (m *MockClusterSacHelper) IsClusterVisibleForPermissions(ctx context.Context, clusterID string, resourcesWithAccess []permissions.ResourceWithAccess) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClusterVisibleForPermissions", ctx, clusterID, resourcesWithAccess)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClusterVisibleForPermissions indicates an expected call of IsClusterVisibleForPermissions.
func (mr *MockClusterSacHelperMockRecorder) IsClusterVisibleForPermissions(ctx, clusterID, resourcesWithAccess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClusterVisibleForPermissions", reflect.TypeOf((*MockClusterSacHelper)(nil).IsClusterVisibleForPermissions), ctx, clusterID, resourcesWithAccess)
}

// MockClusterNamespaceSacHelper is a mock of ClusterNamespaceSacHelper interface.
type MockClusterNamespaceSacHelper struct {
	ctrl     *gomock.Controller
	recorder *MockClusterNamespaceSacHelperMockRecorder
}

// MockClusterNamespaceSacHelperMockRecorder is the mock recorder for MockClusterNamespaceSacHelper.
type MockClusterNamespaceSacHelperMockRecorder struct {
	mock *MockClusterNamespaceSacHelper
}

// NewMockClusterNamespaceSacHelper creates a new mock instance.
func NewMockClusterNamespaceSacHelper(ctrl *gomock.Controller) *MockClusterNamespaceSacHelper {
	mock := &MockClusterNamespaceSacHelper{ctrl: ctrl}
	mock.recorder = &MockClusterNamespaceSacHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterNamespaceSacHelper) EXPECT() *MockClusterNamespaceSacHelperMockRecorder {
	return m.recorder
}

// GetNamespacesForClusterAndPermissions mocks base method.
func (m *MockClusterNamespaceSacHelper) GetNamespacesForClusterAndPermissions(ctx context.Context, clusterID string, requestedPermissions []string) ([]*v1.ScopeObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacesForClusterAndPermissions", ctx, clusterID, requestedPermissions)
	ret0, _ := ret[0].([]*v1.ScopeObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacesForClusterAndPermissions indicates an expected call of GetNamespacesForClusterAndPermissions.
func (mr *MockClusterNamespaceSacHelperMockRecorder) GetNamespacesForClusterAndPermissions(ctx, clusterID, requestedPermissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacesForClusterAndPermissions", reflect.TypeOf((*MockClusterNamespaceSacHelper)(nil).GetNamespacesForClusterAndPermissions), ctx, clusterID, requestedPermissions)
}
