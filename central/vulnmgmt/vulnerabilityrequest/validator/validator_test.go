package validator

import (
	"testing"

	"github.com/stackrox/rox/central/vulnmgmt/vulnerabilityrequest/common"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/proto"
)

func TestValidateNewSuppressVulnRequest(t *testing.T) {
	req := storage.VulnerabilityRequest_builder{
		Comments: []*storage.RequestComment{
			storage.RequestComment_builder{
				Message: "message",
			}.Build(),
		},
		Status:      storage.RequestStatus_PENDING,
		TargetState: storage.VulnerabilityState_DEFERRED,
		Scope:       getImageScope("docker.io", "stackrox/main", "latest"),
		Cves: storage.VulnerabilityRequest_CVEs_builder{
			Cves: []string{"cve1"},
		}.Build(),
		DeferralReq: storage.DeferralRequest_builder{
			Expiry: storage.RequestExpiry_builder{
				ExpiresWhenFixed: proto.Bool(true),
			}.Build(),
		}.Build(),
		Requestor: storage.SlimUser_builder{
			Id:   "user",
			Name: "user",
		}.Build(),
		Expired: false,
	}.Build()

	// Correct request is valid
	assert.NoError(t, ValidateNewSuppressVulnRequest(req))

	// Cannot create a request in observed state
	cloned := req.CloneVT()
	cloned.SetTargetState(storage.VulnerabilityState_OBSERVED)
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: request to suppress vulnerability must be a deferral or false-positive request")

	// Cannot create an empty request
	cloned = req.CloneVT()
	cloned.ClearReq()
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: vulnerability deferral request invalid. Deferral expiry not provided")

	// Requests require comment
	cloned = req.CloneVT()
	cloned.SetComments(nil)
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: vulnerability exception must have at least one comment")

	// Requests cannot start out approved
	cloned = req.CloneVT()
	cloned.SetStatus(storage.RequestStatus_APPROVED)
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: new vulnerability exception must not be in approved state")

	// Requests cannot start out in APPROVED_PENDING_UPDATE state
	cloned = req.CloneVT()
	cloned.SetStatus(storage.RequestStatus_APPROVED_PENDING_UPDATE)
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: new vulnerability exception must not be in approved state")

	// Cannot have an updated request
	cloned = req.CloneVT()
	cloned.SetUpdatedDeferralReq(proto.ValueOrDefault(cloned.GetDeferralReq().CloneVT()))
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: expected new vulnerability exception, not an updated one")

	// Requestor must be set
	cloned = req.CloneVT()
	cloned.ClearRequestor()
	assert.EqualError(t, ValidateNewSuppressVulnRequest(cloned), "invalid arguments:  error: vulnerability exception must have a requestor")
}

func TestValidateScope(t *testing.T) {
	// Empty image scope
	vs := &storage.VulnerabilityRequest_Scope{}
	vs.Info = &storage.VulnerabilityRequest_Scope_ImageScope{}
	req := &storage.VulnerabilityRequest{}
	req.SetScope(vs)
	assert.Error(t, validateScope(req))

	// No registry
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("", "stackrox/main", "latest"))
	assert.Error(t, validateScope(req))

	// Invalid image name
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "+stackrox/main", "latest"))
	assert.Error(t, validateScope(req))

	// Valid image name
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "stackrox-acs/main", "latest"))
	assert.NoError(t, validateScope(req))

	// Invalid image tag
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "stackrox/main", "+3.60"))
	assert.Error(t, validateScope(req))

	// Valid image tag
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "stackrox/main", "3.60"))
	assert.NoError(t, validateScope(req))

	// Supported image tag regex
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "stackrox/main", ".*"))
	assert.NoError(t, validateScope(req))

	// Empty image tag
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope("docker.io", "stackrox/main", ""))
	assert.NoError(t, validateScope(req))

	// v1 global scope
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getGlobalScope())
	assert.NoError(t, validateScope(req))

	// v2 global scope
	req = &storage.VulnerabilityRequest{}
	req.SetScope(getImageScope(".*", ".*", ".*"))
	assert.NoError(t, validateScope(req))
}

func TestUpdate(t *testing.T) {
	// no comment
	du := &storage.DeferralUpdate{}
	du.SetCVEs([]string{"cve-1"})
	du.SetExpiry(storage.RequestExpiry_builder{ExpiresWhenFixed: proto.Bool(true)}.Build())
	update := &common.UpdateRequest{
		DeferralUpdate: du,
	}
	assert.Error(t, ValidateUpdate(update))

	// no cve
	du2 := &storage.DeferralUpdate{}
	du2.SetExpiry(storage.RequestExpiry_builder{ExpiresWhenFixed: proto.Bool(true)}.Build())
	update = &common.UpdateRequest{
		Comment:        "update",
		DeferralUpdate: du2,
	}
	assert.Error(t, ValidateUpdate(update))

	// no message
	update = &common.UpdateRequest{
		Comment: "update",
	}
	assert.Error(t, ValidateUpdate(update))

	// valid deferral update
	du3 := &storage.DeferralUpdate{}
	du3.SetCVEs([]string{"cve-1"})
	du3.SetExpiry(storage.RequestExpiry_builder{ExpiresWhenFixed: proto.Bool(true)}.Build())
	update = &common.UpdateRequest{
		Comment:        "update",
		DeferralUpdate: du3,
	}
	assert.NoError(t, ValidateUpdate(update))

	// valid false positive update
	fpu := &storage.FalsePositiveUpdate{}
	fpu.SetCVEs([]string{"cve-1"})
	update = &common.UpdateRequest{
		Comment:             "update",
		FalsePositiveUpdate: fpu,
	}
	assert.NoError(t, ValidateUpdate(update))
}

func getImageScope(imageRegistry, imageName, tagRegex string) *storage.VulnerabilityRequest_Scope {
	vsi := &storage.VulnerabilityRequest_Scope_Image{}
	vsi.SetRegistry(imageRegistry)
	vsi.SetRemote(imageName)
	vsi.SetTag(tagRegex)
	vs := &storage.VulnerabilityRequest_Scope{}
	vs.SetImageScope(proto.ValueOrDefault(vsi))
	return vs
}

func getGlobalScope() *storage.VulnerabilityRequest_Scope {
	vs := &storage.VulnerabilityRequest_Scope{}
	vs.SetGlobalScope(&storage.VulnerabilityRequest_Scope_Global{})
	return vs
}
