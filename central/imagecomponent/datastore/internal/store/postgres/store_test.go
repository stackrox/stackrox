// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	storage "github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/features"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stackrox/rox/pkg/testutils/envisolator"
	"github.com/stretchr/testify/suite"
)

type ImageComponentsStoreSuite struct {
	suite.Suite
	envIsolator *envisolator.EnvIsolator
}

func TestImageComponentsStore(t *testing.T) {
	suite.Run(t, new(ImageComponentsStoreSuite))
}

func (s *ImageComponentsStoreSuite) SetupTest() {
	s.envIsolator = envisolator.NewEnvIsolator(s.T())
	s.envIsolator.Setenv(features.PostgresDatastore.EnvVar(), "true")

	if !features.PostgresDatastore.Enabled() {
		s.T().Skip("Skip postgres store tests")
		s.T().SkipNow()
	}
}

func (s *ImageComponentsStoreSuite) TearDownTest() {
	s.envIsolator.RestoreAll()
}

func (s *ImageComponentsStoreSuite) TestStore() {
	ctx := context.Background()

	source := pgtest.GetConnectionString(s.T())
	config, err := pgxpool.ParseConfig(source)
	s.Require().NoError(err)
	pool, err := pgxpool.ConnectConfig(ctx, config)
	s.NoError(err)
	defer pool.Close()

	Destroy(ctx, pool)
	store := New(ctx, pool)

	imageComponent := &storage.ImageComponent{}
	s.NoError(testutils.FullInit(imageComponent, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundImageComponent, exists, err := store.Get(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundImageComponent)

	s.NoError(store.Upsert(ctx, imageComponent))
	foundImageComponent, exists, err = store.Get(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem())
	s.NoError(err)
	s.True(exists)
	s.Equal(imageComponent, foundImageComponent)

	imageComponentCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(imageComponentCount, 1)

	imageComponentExists, err := store.Exists(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem())
	s.NoError(err)
	s.True(imageComponentExists)
	s.NoError(store.Upsert(ctx, imageComponent))

	foundImageComponent, exists, err = store.Get(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem())
	s.NoError(err)
	s.True(exists)
	s.Equal(imageComponent, foundImageComponent)

	s.NoError(store.Delete(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem()))
	foundImageComponent, exists, err = store.Get(ctx, imageComponent.GetId(), imageComponent.GetOperatingSystem())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundImageComponent)

	var imageComponents []*storage.ImageComponent
	for i := 0; i < 200; i++ {
		imageComponent := &storage.ImageComponent{}
		s.NoError(testutils.FullInit(imageComponent, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		imageComponents = append(imageComponents, imageComponent)
	}

	s.NoError(store.UpsertMany(ctx, imageComponents))

	imageComponentCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(imageComponentCount, 200)
}
