// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/stackrox/rox/generated/storage"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteAuthzPluginConfig mocks base method.
func (m *MockStore) DeleteAuthzPluginConfig(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthzPluginConfig", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthzPluginConfig indicates an expected call of DeleteAuthzPluginConfig.
func (mr *MockStoreMockRecorder) DeleteAuthzPluginConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).DeleteAuthzPluginConfig), id)
}

// GetAuthzPluginConfig mocks base method.
func (m *MockStore) GetAuthzPluginConfig(id string) (*storage.AuthzPluginConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthzPluginConfig", id)
	ret0, _ := ret[0].(*storage.AuthzPluginConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthzPluginConfig indicates an expected call of GetAuthzPluginConfig.
func (mr *MockStoreMockRecorder) GetAuthzPluginConfig(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).GetAuthzPluginConfig), id)
}

// ListAuthzPluginConfigs mocks base method.
func (m *MockStore) ListAuthzPluginConfigs() ([]*storage.AuthzPluginConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthzPluginConfigs")
	ret0, _ := ret[0].([]*storage.AuthzPluginConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthzPluginConfigs indicates an expected call of ListAuthzPluginConfigs.
func (mr *MockStoreMockRecorder) ListAuthzPluginConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthzPluginConfigs", reflect.TypeOf((*MockStore)(nil).ListAuthzPluginConfigs))
}

// UpsertAuthzPluginConfig mocks base method.
func (m *MockStore) UpsertAuthzPluginConfig(authzpluginconfig *storage.AuthzPluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthzPluginConfig", authzpluginconfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAuthzPluginConfig indicates an expected call of UpsertAuthzPluginConfig.
func (mr *MockStoreMockRecorder) UpsertAuthzPluginConfig(authzpluginconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthzPluginConfig", reflect.TypeOf((*MockStore)(nil).UpsertAuthzPluginConfig), authzpluginconfig)
}

// UpsertAuthzPluginConfigs mocks base method.
func (m *MockStore) UpsertAuthzPluginConfigs(authzpluginconfigs []*storage.AuthzPluginConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthzPluginConfigs", authzpluginconfigs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAuthzPluginConfigs indicates an expected call of UpsertAuthzPluginConfigs.
func (mr *MockStoreMockRecorder) UpsertAuthzPluginConfigs(authzpluginconfigs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthzPluginConfigs", reflect.TypeOf((*MockStore)(nil).UpsertAuthzPluginConfigs), authzpluginconfigs)
}
