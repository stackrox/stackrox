// Code generated by MockGen. DO NOT EDIT.
// Source: plugin_client_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/stackrox/rox/pkg/sac/client"
)

// MockAuthPluginClientManger is a mock of AuthPluginClientManger interface.
type MockAuthPluginClientManger struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPluginClientMangerMockRecorder
}

// MockAuthPluginClientMangerMockRecorder is the mock recorder for MockAuthPluginClientManger.
type MockAuthPluginClientMangerMockRecorder struct {
	mock *MockAuthPluginClientManger
}

// NewMockAuthPluginClientManger creates a new mock instance.
func NewMockAuthPluginClientManger(ctrl *gomock.Controller) *MockAuthPluginClientManger {
	mock := &MockAuthPluginClientManger{ctrl: ctrl}
	mock.recorder = &MockAuthPluginClientMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPluginClientManger) EXPECT() *MockAuthPluginClientMangerMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockAuthPluginClientManger) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockAuthPluginClientMangerMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockAuthPluginClientManger)(nil).GetClient))
}

// SetClient mocks base method.
func (m *MockAuthPluginClientManger) SetClient(newClient client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", newClient)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockAuthPluginClientMangerMockRecorder) SetClient(newClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockAuthPluginClientManger)(nil).SetClient), newClient)
}
