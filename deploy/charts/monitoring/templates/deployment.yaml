apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: stackrox
    app: monitoring
  annotations:
    owner: stackrox
    email: support@stackrox.com
spec:
  replicas: 1
  minReadySeconds: 15
  selector:
    matchLabels:
      app: monitoring
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/name: stackrox
        app: monitoring
    spec:
      {{ if .Values.nodeSelector -}}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{ else if .Capabilities.APIVersions.Has "apps.openshift.io/v1" }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 25
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/compute
                    operator: Exists
            - weight: 75
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/infra
                    operator: DoesNotExist
            # From v1.20 node-role.kubernetes.io/control-plane replaces node-role.kubernetes.io/master (removed in
            # v1.25). We apply both because our goal is not to run pods on control plane nodes for any version of k8s.
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: DoesNotExist
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: DoesNotExist
      {{- end}}
      serviceAccount: monitoring
      # The uid and gid are set to make `/var/prometheus` writable. See https://github.com/prometheus/prometheus/issues/5976.
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: grafana
        image: {{ required "A Grafana image is required" .Values.grafanaImage }}
        securityContext:
          capabilities:
            drop: ["NET_RAW"]
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        volumeMounts:
          - name: grafana-config-volume
            mountPath: /etc/grafana
            readOnly: true
          - name: grafana-datasources-volume
            mountPath: /etc/grafana/provisioning/datasources
            readOnly: true
          - name: grafana-dashboards-volume
            mountPath: /etc/grafana/provisioning/dashboards
            readOnly: true
          - name: monitoring-ui-volume
            mountPath: /run/secrets/stackrox.io/monitoring/certs/
            readOnly: true
          - name: grafana-var-volume
            mountPath: /var/lib/grafana
      - name: prometheus
        image: {{ required "A Prometheus image is required" .Values.prometheusImage }}
        command: ["/bin/prometheus"]
        # The arguments are set explicitly such that the data path is `/var/prometheus`,
        # because it allows write access under read only root file systems.
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/var/prometheus"
          - "--web.console.libraries=/usr/share/prometheus/console_libraries"
          - "--web.console.templates=/usr/share/prometheus/consoles"
        securityContext:
          capabilities:
            drop: ["NET_RAW"]
          readOnlyRootFilesystem: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
          - name: prometheus-config-volume
            mountPath: /etc/prometheus
            readOnly: true
          - name: prometheus-data-volume
            mountPath: /var/prometheus
      volumes:
      - name: monitoring-ui-volume
        secret:
          secretName: monitoring
          items:
            - key: monitoring-ui-cert.pem
              path: cert.pem
            - key: monitoring-ui-key.pem
              path: key.pem
      - name: grafana-config-volume
        configMap:
          name: grafana-config
      - name: grafana-datasources-volume
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-volume
        configMap:
          name: grafana-dashboards
      - name: grafana-var-volume
        emptyDir: {}
      - name: prometheus-config-volume
        configMap:
          name: prometheus
      - name: prometheus-data-volume
        {{- if eq .Values.persistence.type "hostpath" }}
        hostPath:
          path: {{ required "A persistence host path must be specified" .Values.persistence.hostPath }}
        {{ else if eq .Values.persistence.type "pvc" }}
        persistentVolumeClaim:
          claimName: stackrox-monitoring
        {{ else if eq .Values.persistence.type "none" }}
        emptyDir: {}
        {{ else }}
        {{ fail (printf "Invalid persistence type %s" .Values.persistence.type) }}
        {{ end }}
