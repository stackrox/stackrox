---
# Persistent Volume Claim for ML model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-risk-service-models-pvc
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Configure based on your cluster's storage classes
---
# ConfigMap for ML Risk Service configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ml-risk-service-config
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: config
data:
  feature_config.yaml: |
    model:
      algorithm: lightgbm_ranker
      validation_split: 0.2
      random_state: 42
      lightgbm_params:
        objective: lambdarank
        metric: ndcg
        num_leaves: 31
        learning_rate: 0.1
        feature_fraction: 0.9
        bagging_fraction: 0.8
        bagging_freq: 5
        verbose: 0
        force_row_wise: true
      explainability:
        shap_enabled: true
        top_features: 10
    training:
      batch_size: 1000
      max_iterations: 100
      early_stopping_rounds: 10
    storage:
      backend: local
      base_path: /app/models
      encryption_enabled: false
      compression_enabled: true
      backup_enabled: true
      backup_frequency: daily
    deployment:
      auto_deploy_enabled: false
      deployment_threshold: 0.85
      health_check_enabled: true
      health_check_interval: 5m
  logging.yaml: |
    version: 1
    formatters:
      default:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: INFO
        formatter: default
        stream: ext://sys.stdout
      file:
        class: logging.handlers.RotatingFileHandler
        level: INFO
        formatter: default
        filename: /app/logs/ml-risk-service.log
        maxBytes: 10485760
        backupCount: 5
    loggers:
      '':
        level: INFO
        handlers: [console, file]
        propagate: no
---
# Secret for cloud storage credentials (optional)
apiVersion: v1
kind: Secret
metadata:
  name: ml-risk-service-storage-secret
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: credentials
type: Opaque
data:
  # GCS service account key (base64 encoded JSON file)
  # gcs-service-account-key: ""
---
# Service for ML Risk Service
apiVersion: v1
kind: Service
metadata:
  name: ml-risk-service
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: service
spec:
  selector:
    app: ml-risk-service
  ports:
    - name: grpc
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: health
      port: 8081
      targetPort: 8081
      protocol: TCP
  type: ClusterIP
---
# Deployment for ML Risk Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-risk-service
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: service
spec:
  replicas: 1  # Single replica for now, can be scaled with proper model synchronization
  selector:
    matchLabels:
      app: ml-risk-service
  template:
    metadata:
      labels:
        app: ml-risk-service
        component: service
      annotations:
        # Force restart on config change
        checksum/config: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: ml-risk-service
          image: stackrox/ml-risk-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          env:
            # Service configuration
            - name: GRPC_PORT
              value: "8080"
            - name: HEALTH_PORT
              value: "8081"
            - name: LOG_LEVEL
              value: "INFO"
            - name: CONFIG_FILE
              value: "/app/config/feature_config.yaml"

            # Model storage configuration
            - name: ROX_ML_MODEL_STORAGE_BACKEND
              value: "local"
            - name: ROX_ML_MODEL_STORAGE_BASE_PATH
              value: "/app/models"
            - name: ROX_ML_MODEL_BACKUP_ENABLED
              value: "true"
            - name: ROX_ML_MODEL_BACKUP_FREQUENCY
              value: "daily"
            - name: ROX_ML_MODEL_ENCRYPTION_ENABLED
              value: "false"
            - name: ROX_ML_MODEL_COMPRESSION_ENABLED
              value: "true"
            - name: ROX_ML_MODEL_VERSIONING_ENABLED
              value: "true"
            - name: ROX_ML_MAX_MODEL_VERSIONS
              value: "10"

            # Health and monitoring
            - name: ROX_ML_MODEL_HEALTH_CHECK_ENABLED
              value: "true"
            - name: ROX_ML_MODEL_HEALTH_CHECK_INTERVAL
              value: "5m"

            # Drift monitoring configuration
            - name: ROX_ML_MODEL_DRIFT_DETECTION_ENABLED
              value: "true"
            - name: ROX_ML_MODEL_DATA_DRIFT_THRESHOLD
              value: "0.3"
            - name: ROX_ML_MODEL_PREDICTION_DRIFT_THRESHOLD
              value: "0.3"
            - name: ROX_ML_MODEL_PERFORMANCE_DRIFT_THRESHOLD
              value: "0.2"
            - name: ROX_ML_MODEL_BASELINE_RETENTION_DAYS
              value: "30"

            # Alerting configuration
            - name: ROX_ML_ALERTING_ENABLED
              value: "true"
            - name: ROX_ML_ALERTING_WEBHOOK_ENABLED
              value: "true"
            - name: ROX_ML_ALERTING_WEBHOOK_URL
              value: "https://your-webhook-endpoint.com/alerts"
            - name: ROX_ML_ALERTING_WEBHOOK_TIMEOUT
              value: "10"
            - name: ROX_ML_ALERTING_SLACK_ENABLED
              value: "false"
            - name: ROX_ML_ALERTING_EMAIL_ENABLED
              value: "false"

            # GCS storage configuration (if using GCS storage)
            # - name: ROX_ML_GCS_PROJECT_ID
            #   value: "your-gcs-project-id"
            # - name: ROX_ML_GCS_BUCKET_NAME
            #   value: "stackrox-ml-models"
            # - name: ROX_ML_GCS_CREDENTIALS_PATH
            #   value: "/app/secrets/gcs-service-account-key.json"

          volumeMounts:
            - name: models-storage
              mountPath: /app/models
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs
            # Uncomment if using GCS storage
            # - name: gcs-credentials-volume
            #   mountPath: /app/secrets
            #   readOnly: true

          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 12

      volumes:
        - name: models-storage
          persistentVolumeClaim:
            claimName: ml-risk-service-models-pvc
        - name: config-volume
          configMap:
            name: ml-risk-service-config
        - name: logs-volume
          emptyDir: {}
        # Uncomment if using GCS storage
        # - name: gcs-credentials-volume
        #   secret:
        #     secretName: ml-risk-service-storage-secret
        #     items:
        #       - key: gcs-service-account-key
        #         path: gcs-service-account-key.json

      # Affinity rules for optimal scheduling
      affinity:
        # Prefer scheduling on nodes with SSD storage
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values: ["m5.xlarge", "m5.2xlarge", "c5.xlarge", "c5.2xlarge"]
        # Anti-affinity to avoid scheduling multiple replicas on same node
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["ml-risk-service"]
                topologyKey: kubernetes.io/hostname

      # Tolerations for dedicated ML nodes (optional)
      # tolerations:
      #   - key: "ml-workload"
      #     operator: "Equal"
      #     value: "true"
      #     effect: "NoSchedule"
---
# ServiceMonitor for Prometheus monitoring (if Prometheus operator is available)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ml-risk-service
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: monitoring
spec:
  selector:
    matchLabels:
      app: ml-risk-service
  endpoints:
    - port: health
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
---
# NetworkPolicy for ML Risk Service (optional, for enhanced security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ml-risk-service-netpol
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: security
spec:
  podSelector:
    matchLabels:
      app: ml-risk-service
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from StackRox Central
    - from:
        - podSelector:
            matchLabels:
              app: central
      ports:
        - protocol: TCP
          port: 8080
    # Allow health checks from monitoring
    - from: []
      ports:
        - protocol: TCP
          port: 8081
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow HTTPS for cloud storage access (if needed)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow communication with Central database (if needed)
    - to:
        - podSelector:
            matchLabels:
              app: central-db
      ports:
        - protocol: TCP
          port: 5432
---
# HorizontalPodAutoscaler for ML Risk Service (optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-risk-service-hpa
  namespace: stackrox
  labels:
    app: ml-risk-service
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-risk-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60