# PatternFly Styling Standards for StackRox UI

## PatternFly Component Usage

### Component Selection Priority

1. **PatternFly components** - Use first for consistency and accessibility
2. **PatternFly utilities** - Use for spacing, colors, layout when components don't provide the needed styling
3. **Custom PatternFly wrappers** - Use for common patterns not covered by base components
4. **Custom CSS with PatternFly variables** - Only when PatternFly doesn't provide functionality

### Common PatternFly Patterns

#### Layout Components

```typescript
// ✅ Good - Use PatternFly layout components
import {
    Page,
    PageSection,
    Card,
    CardBody,
    CardHeader,
    Title,
    Gallery,
    GalleryItem,
    Flex,
    FlexItem,
    Grid,
    GridItem
} from '@patternfly/react-core';

function AuthProviderPage() {
    return (
        <Page>
            <PageSection variant="light">
                <Title headingLevel="h1">Authentication Providers</Title>
            </PageSection>
            <PageSection>
                <Card>
                    <CardHeader>
                        <Title headingLevel="h2">Provider List</Title>
                    </CardHeader>
                    <CardBody>
                        <AuthProviderList />
                    </CardBody>
                </Card>
            </PageSection>
        </Page>
    );
}

// ✅ Good - Use PatternFly layout utilities
function AuthProviderLayout({ providers }: { providers: AuthProvider[] }) {
    return (
        <Gallery hasGutter minWidths={{ default: '300px' }}>
            {providers.map((provider) => (
                <GalleryItem key={provider.id}>
                    <AuthProviderCard provider={provider} />
                </GalleryItem>
            ))}
        </Gallery>
    );
}

// ✅ Good - Use PatternFly Flex for alignment
function AuthProviderHeader({ provider }: { provider: AuthProvider }) {
    return (
        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>
            <FlexItem>
                <Title headingLevel="h3" size="md">
                    {provider.name}
                </Title>
            </FlexItem>
            <FlexItem>
                <Label color={provider.enabled ? 'green' : 'red'}>
                    {provider.enabled ? 'Enabled' : 'Disabled'}
                </Label>
            </FlexItem>
        </Flex>
    );
}

// ❌ Bad - Custom divs instead of PatternFly components
function AuthProviderPage() {
    return (
        <div className="page">
            <div className="page-section">
                <h1>Authentication Providers</h1>
            </div>
        </div>
    );
}
```

#### Form Components

```typescript
// ✅ Good - PatternFly form components
import {
    Form,
    FormGroup,
    TextInput,
    FormSelect,
    FormSelectOption,
    Switch,
    ActionGroup,
    Button,
    Grid,
    GridItem
} from '@patternfly/react-core';

function AuthProviderForm({ provider, onSubmit }: AuthProviderFormProps) {
    const [name, setName] = useState(provider?.name || '');
    const [type, setType] = useState(provider?.type || 'oidc');
    const [enabled, setEnabled] = useState(provider?.enabled || true);
    const [validated, setValidated] = useState<'default' | 'error' | 'success'>('default');

    return (
        <Form onSubmit={handleSubmit}>
            <Grid hasGutter>
                <GridItem span={6}>
                    <FormGroup
                        label="Provider Name"
                        isRequired
                        fieldId="provider-name"
                        validated={validated}
                        helperTextInvalid="Name is required"
                    >
                        <TextInput
                            value={name}
                            onChange={(value) => setName(value)}
                            id="provider-name"
                            name="provider-name"
                            validated={validated}
                            isRequired
                        />
                    </FormGroup>
                </GridItem>

                <GridItem span={6}>
                    <FormGroup label="Provider Type" fieldId="provider-type">
                        <FormSelect
                            value={type}
                            onChange={(value) => setType(value as AuthProviderType)}
                            id="provider-type"
                            name="provider-type"
                        >
                            <FormSelectOption value="oidc" label="OpenID Connect" />
                            <FormSelectOption value="saml" label="SAML" />
                            <FormSelectOption value="oauth" label="OAuth" />
                        </FormSelect>
                    </FormGroup>
                </GridItem>

                <GridItem span={12}>
                    <FormGroup label="Enabled" fieldId="provider-enabled">
                        <Switch
                            id="provider-enabled"
                            label="Enabled"
                            labelOff="Disabled"
                            isChecked={enabled}
                            onChange={(checked) => setEnabled(checked)}
                        />
                    </FormGroup>
                </GridItem>
            </Grid>

            <ActionGroup>
                <Button variant="primary" type="submit">
                    Save
                </Button>
                <Button variant="link" onClick={onCancel}>
                    Cancel
                </Button>
            </ActionGroup>
        </Form>
    );
}
```

#### Table Components

```typescript
// ✅ Good - PatternFly table
import {
    Table,
    Thead,
    Tr,
    Th,
    Tbody,
    Td,
    ActionsColumn,
    IAction
} from '@patternfly/react-table';

function AuthProviderTable({ providers, onEdit, onDelete }: AuthProviderTableProps) {
    const actions = (provider: AuthProvider): IAction[] => [
        {
            title: 'Edit',
            onClick: () => onEdit(provider)
        },
        {
            title: 'Delete',
            onClick: () => onDelete(provider.id)
        }
    ];

    return (
        <Table aria-label="Authentication Providers">
            <Thead>
                <Tr>
                    <Th>Name</Th>
                    <Th>Type</Th>
                    <Th>Status</Th>
                    <Th>Last Updated</Th>
                    <Th screenReaderText="Actions" />
                </Tr>
            </Thead>
            <Tbody>
                {providers.map((provider) => (
                    <Tr key={provider.id}>
                        <Td dataLabel="Name">{provider.name}</Td>
                        <Td dataLabel="Type">{provider.type}</Td>
                        <Td dataLabel="Status">
                            <Label color={provider.enabled ? 'green' : 'red'}>
                                {provider.enabled ? 'Enabled' : 'Disabled'}
                            </Label>
                        </Td>
                        <Td dataLabel="Last Updated">
                            {formatDate(provider.lastUpdated)}
                        </Td>
                        <Td>
                            <ActionsColumn items={actions(provider)} />
                        </Td>
                    </Tr>
                ))}
            </Tbody>
        </Table>
    );
}
```

#### Navigation Components

```typescript
// ✅ Good - PatternFly navigation
import { Nav, NavItem, NavList, NavGroup } from '@patternfly/react-core';

function SideNavigation() {
    return (
        <Nav>
            <NavList>
                <NavGroup title="Platform Configuration">
                    <NavItem to="/auth-providers" isActive={isAuthProvidersActive}>
                        Authentication Providers
                    </NavItem>
                    <NavItem to="/access-scopes" isActive={isAccessScopesActive}>
                        Access Scopes
                    </NavItem>
                    <NavItem to="/roles" isActive={isRolesActive}>
                        Roles
                    </NavItem>
                </NavGroup>
            </NavList>
        </Nav>
    );
}
```

### PatternFly Customization Guidelines

#### Custom CSS Classes

- **Prefix custom classes** with `rox-` to avoid conflicts
- **Use CSS variables** for theming
- **Avoid overriding PatternFly classes** directly

```css
/* ✅ Good - Custom classes with prefix */
.rox-auth-provider-card {
    --pf-v5-c-card--BackgroundColor: var(--pf-v5-global--BackgroundColor--100);
    border: 1px solid var(--pf-v5-global--BorderColor--300);
}

.rox-auth-provider-card--disabled {
    opacity: 0.6;
}

.rox-auth-provider-card--elevated {
    box-shadow: var(--pf-v5-global--BoxShadow--lg);
}

/* ❌ Bad - Overriding PatternFly classes */
.pf-v5-c-card {
    background-color: #f0f0f0;
}
```

#### Component Extension

```typescript
// ✅ Good - Extend PatternFly components
interface CustomCardProps extends CardProps {
    variant?: 'default' | 'compact' | 'elevated';
    isDisabled?: boolean;
}

function CustomCard({ variant = 'default', isDisabled, className, ...props }: CustomCardProps) {
    const customClasses = classNames(
        'rox-custom-card',
        {
            'rox-custom-card--compact': variant === 'compact',
            'rox-custom-card--elevated': variant === 'elevated',
            'rox-custom-card--disabled': isDisabled,
        },
        className
    );

    return <Card className={customClasses} {...props} />;
}
```

## PatternFly Layout Utilities

### Spacing with PatternFly

```typescript
// ✅ Good - Use PatternFly spacing utilities
import { Stack, StackItem, Flex, FlexItem } from '@patternfly/react-core';

function AuthProviderCard({ provider }: { provider: AuthProvider }) {
    return (
        <Card>
            <CardBody>
                <Stack hasGutter>
                    <StackItem>
                        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>
                            <FlexItem>
                                <Title headingLevel="h3" size="md">
                                    {provider.name}
                                </Title>
                            </FlexItem>
                            <FlexItem>
                                <Label color={provider.enabled ? 'green' : 'red'}>
                                    {provider.enabled ? 'Enabled' : 'Disabled'}
                                </Label>
                            </FlexItem>
                        </Flex>
                    </StackItem>
                    <StackItem>
                        <Grid hasGutter>
                            <GridItem span={6}>
                                <Text component="small">Type</Text>
                                <Text>{provider.type}</Text>
                            </GridItem>
                            <GridItem span={6}>
                                <Text component="small">Groups</Text>
                                <Text>{provider.groups?.length || 0} groups</Text>
                            </GridItem>
                        </Grid>
                    </StackItem>
                </Stack>
            </CardBody>
        </Card>
    );
}

// ❌ Bad - Custom spacing instead of PatternFly utilities
function AuthProviderCard({ provider }: { provider: AuthProvider }) {
    return (
        <div style={{ marginBottom: '16px' }}>
            <div style={{ padding: '16px', backgroundColor: 'white', border: '1px solid #ccc' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                    <h3>{provider.name}</h3>
                    <span>{provider.enabled ? 'Enabled' : 'Disabled'}</span>
                </div>
            </div>
        </div>
    );
}
```

### Responsive Design with PatternFly

```typescript
// ✅ Good - PatternFly responsive utilities
import { Gallery, GalleryItem, Grid, GridItem } from '@patternfly/react-core';

function AuthProviderGrid({ providers }: { providers: AuthProvider[] }) {
    return (
        <Gallery hasGutter minWidths={{ default: '300px', md: '400px', lg: '500px' }}>
            {providers.map((provider) => (
                <GalleryItem key={provider.id}>
                    <AuthProviderCard provider={provider} />
                </GalleryItem>
            ))}
        </Gallery>
    );
}

// ✅ Good - Responsive Grid
function AuthProviderDetails({ provider }: { provider: AuthProvider }) {
    return (
        <Grid hasGutter>
            <GridItem span={12} md={6} lg={4}>
                <Text component="small">Provider Name</Text>
                <Text>{provider.name}</Text>
            </GridItem>
            <GridItem span={12} md={6} lg={4}>
                <Text component="small">Provider Type</Text>
                <Text>{provider.type}</Text>
            </GridItem>
            <GridItem span={12} md={12} lg={4}>
                <Text component="small">Status</Text>
                <Label color={provider.enabled ? 'green' : 'red'}>
                    {provider.enabled ? 'Enabled' : 'Disabled'}
                </Label>
            </GridItem>
        </Grid>
    );
}

// ✅ Good - Responsive navigation with PatternFly
function ResponsiveNavigation() {
    const [isNavOpen, setIsNavOpen] = useState(false);

    return (
        <Page
            header={
                <PageHeader
                    logo={<Brand src="/logo.svg" alt="StackRox" />}
                    showNavToggle
                    isNavOpen={isNavOpen}
                    onNavToggle={() => setIsNavOpen(!isNavOpen)}
                />
            }
            sidebar={
                <PageSidebar
                    nav={<SideNavigation />}
                    isNavOpen={isNavOpen}
                />
            }
        >
            <PageSection>
                {/* Main content */}
            </PageSection>
        </Page>
    );
}
```

## CSS Variables and Theming

### Using PatternFly CSS Variables

```css
/* ✅ Good - Use PatternFly CSS variables */
.rox-custom-component {
    background-color: var(--pf-v5-global--BackgroundColor--100);
    color: var(--pf-v5-global--Color--100);
    border: 1px solid var(--pf-v5-global--BorderColor--300);
    padding: var(--pf-v5-global--spacer--md);
    border-radius: var(--pf-v5-global--BorderRadius--sm);
}

.rox-custom-component--primary {
    background-color: var(--pf-v5-global--primary-color--100);
    color: var(--pf-v5-global--primary-color--200);
}

.rox-custom-component--danger {
    background-color: var(--pf-v5-global--danger-color--100);
    color: var(--pf-v5-global--danger-color--200);
}

/* ✅ Good - Custom spacing using PatternFly variables */
.rox-custom-spacing {
    margin-bottom: var(--pf-v5-global--spacer--md);
    padding: var(--pf-v5-global--spacer--sm) var(--pf-v5-global--spacer--md);
}

.rox-custom-spacing--large {
    margin-bottom: var(--pf-v5-global--spacer--lg);
    padding: var(--pf-v5-global--spacer--md) var(--pf-v5-global--spacer--lg);
}

/* ❌ Bad - Hardcoded values */
.rox-custom-component {
    background-color: #ffffff;
    color: #151515;
    border: 1px solid #d2d2d2;
    padding: 16px;
    border-radius: 4px;
}
```

### Theme Support

```typescript
// ✅ Good - Theme-aware component
function ThemedCard({ children, variant = 'default' }: ThemedCardProps) {
    const cardClasses = classNames(
        'rox-themed-card',
        `rox-themed-card--${variant}`,
        {
            'rox-themed-card--dark': isDarkTheme,
        }
    );

    return (
        <Card className={cardClasses}>
            {children}
        </Card>
    );
}
```

## Accessibility Standards

### ARIA Labels and Descriptions

```typescript
// ✅ Good - Proper ARIA labels
function AuthProviderActions({ provider, onEdit, onDelete }: AuthProviderActionsProps) {
    return (
        <Dropdown
            toggle={
                <DropdownToggle
                    aria-label={`Actions for ${provider.name}`}
                    id={`actions-${provider.id}`}
                >
                    <EllipsisVIcon />
                </DropdownToggle>
            }
            isPlain
        >
            <DropdownItem
                key="edit"
                onClick={() => onEdit(provider)}
                aria-describedby={`edit-${provider.id}-description`}
            >
                Edit
                <span id={`edit-${provider.id}-description`} className="pf-v5-screen-reader">
                    Edit authentication provider {provider.name}
                </span>
            </DropdownItem>
            <DropdownItem
                key="delete"
                onClick={() => onDelete(provider.id)}
                aria-describedby={`delete-${provider.id}-description`}
            >
                Delete
                <span id={`delete-${provider.id}-description`} className="pf-v5-screen-reader">
                    Delete authentication provider {provider.name}
                </span>
            </DropdownItem>
        </Dropdown>
    );
}
```

### Keyboard Navigation

```typescript
// ✅ Good - Keyboard accessible
function AuthProviderList({ providers }: { providers: AuthProvider[] }) {
    const [selectedIndex, setSelectedIndex] = useState(-1);

    const handleKeyDown = (event: KeyboardEvent) => {
        switch (event.key) {
            case 'ArrowDown':
                event.preventDefault();
                setSelectedIndex((prev) =>
                    prev < providers.length - 1 ? prev + 1 : 0
                );
                break;
            case 'ArrowUp':
                event.preventDefault();
                setSelectedIndex((prev) =>
                    prev > 0 ? prev - 1 : providers.length - 1
                );
                break;
            case 'Enter':
            case ' ':
                event.preventDefault();
                if (selectedIndex >= 0) {
                    handleSelectProvider(providers[selectedIndex]);
                }
                break;
        }
    };

    return (
        <div
            role="listbox"
            aria-label="Authentication Providers"
            onKeyDown={handleKeyDown}
            tabIndex={0}
        >
            {providers.map((provider, index) => (
                <div
                    key={provider.id}
                    role="option"
                    aria-selected={index === selectedIndex}
                    className={`rox-provider-item ${
                        index === selectedIndex ? 'rox-provider-item--selected' : ''
                    }`}
                    onClick={() => handleSelectProvider(provider)}
                >
                    {provider.name}
                </div>
            ))}
        </div>
    );
}
```

## Loading States and Feedback

### Loading Patterns

```typescript
// ✅ Good - Consistent loading states
function AuthProviderList() {
    const { providers, isLoading, error } = useAuthProviders();

    if (error) {
        return (
            <EmptyState variant="large">
                <EmptyStateIcon icon={ExclamationTriangleIcon} />
                <Title headingLevel="h2" size="lg">
                    Unable to load providers
                </Title>
                <EmptyStateBody>
                    {error}
                </EmptyStateBody>
                <EmptyStateActions>
                    <Button variant="primary" onClick={() => window.location.reload()}>
                        Retry
                    </Button>
                </EmptyStateActions>
            </EmptyState>
        );
    }

    if (isLoading) {
        return (
            <Bullseye>
                <Spinner size="xl" />
            </Bullseye>
        );
    }

    if (providers.length === 0) {
        return (
            <EmptyState variant="large">
                <EmptyStateIcon icon={CubesIcon} />
                <Title headingLevel="h2" size="lg">
                    No authentication providers
                </Title>
                <EmptyStateBody>
                    Create your first authentication provider to get started.
                </EmptyStateBody>
                <EmptyStateActions>
                    <Button variant="primary" onClick={handleCreateProvider}>
                        Create Provider
                    </Button>
                </EmptyStateActions>
            </EmptyState>
        );
    }

    return (
        <Stack hasGutter>
            {providers.map((provider) => (
                <StackItem key={provider.id}>
                    <AuthProviderCard provider={provider} />
                </StackItem>
            ))}
        </Stack>
    );
}
```

### Toast Notifications

```typescript
// ✅ Good - Toast notifications
import { useAlert } from 'hooks/useAlert';

function AuthProviderForm({ provider, onSubmit }: AuthProviderFormProps) {
    const { addAlert } = useAlert();

    const handleSubmit = async (formData: AuthProvider) => {
        try {
            await onSubmit(formData);
            addAlert({
                title: 'Success',
                variant: 'success',
                description: `Authentication provider ${formData.name} has been saved.`,
            });
        } catch (error) {
            addAlert({
                title: 'Error',
                variant: 'danger',
                description: error instanceof Error ? error.message : 'Failed to save provider',
            });
        }
    };

    // ... rest of component
}
```

## Performance Considerations

### Component Optimization

```typescript
// ✅ Good - Optimized list rendering
import { FixedSizeList as List } from 'react-window';

interface VirtualizedListProps {
    items: AuthProvider[];
    height: number;
    itemHeight: number;
}

function VirtualizedAuthProviderList({ items, height, itemHeight }: VirtualizedListProps) {
    const ItemRenderer = ({ index, style }) => (
        <div style={style}>
            <AuthProviderCard provider={items[index]} />
        </div>
    );

    return (
        <List
            height={height}
            itemCount={items.length}
            itemSize={itemHeight}
            itemData={items}
        >
            {ItemRenderer}
        </List>
    );
}
```

### Efficient CSS

```css
/* ✅ Good - Efficient CSS selectors */
.rox-auth-provider-card {
    /* Direct class selector */
}

.rox-auth-provider-card__header {
    /* BEM methodology */
}

.rox-auth-provider-card--disabled {
    /* Modifier class */
}

/* ❌ Bad - Inefficient selectors */
.rox-auth-provider-card div div span {
    /* Overly specific */
}

.rox-auth-provider-card * {
    /* Universal selector */
}
```

## Common Styling Pitfalls

### 1. Color Inconsistencies

```typescript
// ❌ Bad - Hardcoded colors
<div style={{ backgroundColor: '#ff0000', color: '#ffffff' }}>Error message</div>

// ✅ Good - PatternFly semantic colors
<Alert variant="danger" title="Error" />
<Label color="red">Error</Label>
```

### 2. Spacing Inconsistencies

```typescript
// ❌ Bad - Inconsistent spacing
<div style={{ marginBottom: '15px' }}>
    <div style={{ padding: '10px 12px' }}>Content</div>
</div>

// ✅ Good - PatternFly spacing utilities
<Stack hasGutter>
    <StackItem>
        <Card>
            <CardBody>Content</CardBody>
        </Card>
    </StackItem>
</Stack>
```

### 3. Missing Responsive Design

```typescript
// ❌ Bad - Not responsive
<div style={{ width: '256px' }}>
    <AuthProviderCard />
</div>

// ✅ Good - Responsive with PatternFly
<Gallery hasGutter minWidths={{ default: '300px', md: '400px', lg: '500px' }}>
    <GalleryItem>
        <AuthProviderCard />
    </GalleryItem>
</Gallery>
```

### 4. Bypassing PatternFly Components

```typescript
// ❌ Bad - Custom implementation
<div className="custom-button" onClick={handleClick}>
    Click me
</div>

// ✅ Good - Use PatternFly components
<Button variant="primary" onClick={handleClick}>
    Click me
</Button>
```

## PatternFly Utility Classes

### Available Utility Classes

```typescript
// ✅ Good - Use PatternFly utility classes when needed
<div className="pf-v5-u-mb-md pf-v5-u-p-md">
    <Title headingLevel="h3" className="pf-v5-u-mb-sm">
        Provider Details
    </Title>
    <Text className="pf-v5-u-color-400">
        Configuration details for the authentication provider
    </Text>
</div>

// Common utility classes:
// Spacing: pf-v5-u-m-* (margin), pf-v5-u-p-* (padding)
// Colors: pf-v5-u-color-*, pf-v5-u-background-color-*
// Typography: pf-v5-u-font-size-*, pf-v5-u-font-weight-*
// Display: pf-v5-u-display-*, pf-v5-u-flex-*, pf-v5-u-align-*
```

### When to Use Utility Classes

- **Spacing adjustments** that don't warrant a custom component
- **Quick responsive tweaks** for specific use cases
- **Accessibility improvements** like screen reader only text
- **Minor styling** that doesn't justify custom CSS

```typescript
// ✅ Good - Utility classes for minor adjustments
<Card className="pf-v5-u-mb-lg">
    <CardBody className="pf-v5-u-p-lg">
        <Flex className="pf-v5-u-align-items-center pf-v5-u-justify-content-space-between">
            <FlexItem>
                <Title headingLevel="h4" className="pf-v5-u-mb-0">
                    {provider.name}
                </Title>
            </FlexItem>
            <FlexItem>
                <Label>{provider.type}</Label>
            </FlexItem>
        </Flex>
    </CardBody>
</Card>
```
