import { severityRankings } from 'constants/vulnerabilities';
import { VulnerabilitySeverity, isVulnerabilitySeverity } from 'types/cve.proto';

/**
 * Get the highest severity of any vulnerability in the component array.
 */
export function getHighestVulnerabilitySeverity(
    vulnerabilities: { severity: string }[]
): VulnerabilitySeverity {
    let topSeverity: VulnerabilitySeverity = 'UNKNOWN_VULNERABILITY_SEVERITY';
    vulnerabilities.forEach(({ severity }) => {
        if (
            isVulnerabilitySeverity(severity) &&
            severityRankings[severity] > severityRankings[topSeverity]
        ) {
            topSeverity = severity;
        }
    });
    return topSeverity;
}

/**
 * Get whether or not any component has any fixable vulnerabilities.
 */
export function getIsSomeVulnerabilityFixable(
    vulnerabilities: { fixedByVersion: string }[]
): boolean {
    return vulnerabilities.some(({ fixedByVersion }) => fixedByVersion !== '');
}

/**
 * Gets the highest CVSS score and its score version from all vulnerabilities in the component array.
 */
export function getHighestCvssScore(vulnerabilities: { cvss: number; scoreVersion: string }[]): {
    cvss: number;
    scoreVersion: string;
} {
    let topCvss = 0;
    let topScoreVersion = 'N/A';
    vulnerabilities.forEach(({ cvss, scoreVersion }) => {
        if (cvss > topCvss) {
            topCvss = cvss;
            topScoreVersion = scoreVersion;
        }
    });
    return { cvss: topCvss, scoreVersion: topScoreVersion };
}
