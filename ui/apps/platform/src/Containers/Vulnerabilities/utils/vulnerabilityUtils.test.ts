import {
    getHighestVulnerabilitySeverity,
    getIsSomeVulnerabilityFixable,
    getHighestCvssScore,
} from './vulnerabilityUtils';

const CRITICAL = 'CRITICAL_VULNERABILITY_SEVERITY';
const IMPORTANT = 'IMPORTANT_VULNERABILITY_SEVERITY';
const MODERATE = 'MODERATE_VULNERABILITY_SEVERITY';
const LOW = 'LOW_VULNERABILITY_SEVERITY';
const UNKNOWN = 'UNKNOWN_VULNERABILITY_SEVERITY';

function makeVuln(severity, fixedByVersion, cvss, scoreVersion) {
    return { severity, fixedByVersion, cvss, scoreVersion };
}

describe('vulnerability utils', () => {
    describe('getHighestVulnerabilitySeverity', () => {
        it('returns the highest severity of any vulnerability in the component array', () => {
            const vulnerabilities = [makeVuln(LOW, '', 0, '')];
            expect(getHighestVulnerabilitySeverity(vulnerabilities)).toEqual(LOW);

            vulnerabilities.push(makeVuln(MODERATE, '', 0, ''));

            expect(getHighestVulnerabilitySeverity(vulnerabilities)).toEqual(MODERATE);

            vulnerabilities.push(makeVuln(IMPORTANT, '', 0, ''));

            expect(getHighestVulnerabilitySeverity(vulnerabilities)).toEqual(IMPORTANT);

            vulnerabilities.push(makeVuln(CRITICAL, '', 0, ''));

            expect(getHighestVulnerabilitySeverity(vulnerabilities)).toEqual(CRITICAL);

            const allSeverityVulns = [
                makeVuln('bogus', '', 0, ''),
                makeVuln(UNKNOWN, '', 0, ''),
                makeVuln(CRITICAL, '', 0, ''),
                makeVuln(IMPORTANT, '', 0, ''),
                makeVuln(MODERATE, '', 0, ''),
                makeVuln(LOW, '', 0, ''),
            ];
            expect(getHighestVulnerabilitySeverity(allSeverityVulns)).toEqual(CRITICAL);
        });

        it('returns UNKNOWN_VULNERABILITY_SEVERITY if no valid vulnerabilities are found', () => {
            const vulnerabilities = [];
            expect(getHighestVulnerabilitySeverity(vulnerabilities)).toEqual(
                'UNKNOWN_VULNERABILITY_SEVERITY'
            );

            const bogusVulns = [makeVuln('bogus', '', 0, '')];
            expect(getHighestVulnerabilitySeverity(bogusVulns)).toEqual(
                'UNKNOWN_VULNERABILITY_SEVERITY'
            );
        });
    });

    describe('getAnyVulnerabilityIsFixable', () => {
        it('returns true if the image has any fixable vulnerabilities', () => {
            const vulnerabilities = [
                makeVuln('', '', 0, ''),
                makeVuln('', '1.0.0', 0, ''),
                makeVuln('', '', 0, ''),
            ];
            expect(getIsSomeVulnerabilityFixable(vulnerabilities)).toEqual(true);
        });

        it('returns false if the image has no fixable vulnerabilities', () => {
            const vulnerabilities = [makeVuln('', '', 0, ''), makeVuln('', '', 0, '')];
            expect(getIsSomeVulnerabilityFixable(vulnerabilities)).toEqual(false);
        });
    });

    describe('getHighestCvssScore', () => {
        it('returns the highest CVSS score and the corresponding score version of any vulnerability in the image', () => {
            const vulnerabilities = [
                makeVuln('', '', 5.0, '3.0'),
                makeVuln('', '', 3.0, '3.0'),
                makeVuln('', '', 4.0, '2.0'),
                makeVuln('', '', 6.0, '2.0'),
                makeVuln('', '', 1.0, '3.0'),
            ];
            expect(getHighestCvssScore(vulnerabilities)).toEqual({
                cvss: 6.0,
                scoreVersion: '2.0',
            });
        });
    });
});
