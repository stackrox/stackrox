// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nvdloader

import (
	json "encoding/json"
	schema "github.com/facebookincubator/nvdtools/cvefeed/nvd/schema"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader(in *jlexer.Lexer, out *itemWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cve":
			if in.IsNull() {
				in.Skip()
				out.CVE = nil
			} else {
				if out.CVE == nil {
					out.CVE = new(schema.CVEJSON40)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(in, out.CVE)
			}
		case "configurations":
			if in.IsNull() {
				in.Skip()
				out.Configurations = nil
			} else {
				if out.Configurations == nil {
					out.Configurations = new(schema.NVDCVEFeedJSON10DefConfigurations)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(in, out.Configurations)
			}
		case "impact":
			if in.IsNull() {
				in.Skip()
				out.Impact = nil
			} else {
				if out.Impact == nil {
					out.Impact = new(schema.NVDCVEFeedJSON10DefImpact)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(in, out.Impact)
			}
		case "lastModifiedDate":
			out.LastModifiedDate = string(in.String())
		case "publishedDate":
			out.PublishedDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader(out *jwriter.Writer, in itemWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cve\":"
		out.RawString(prefix[1:])
		if in.CVE == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(out, *in.CVE)
		}
	}
	if in.Configurations != nil {
		const prefix string = ",\"configurations\":"
		out.RawString(prefix)
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(out, *in.Configurations)
	}
	if in.Impact != nil {
		const prefix string = ",\"impact\":"
		out.RawString(prefix)
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(out, *in.Impact)
	}
	if in.LastModifiedDate != "" {
		const prefix string = ",\"lastModifiedDate\":"
		out.RawString(prefix)
		out.String(string(in.LastModifiedDate))
	}
	if in.PublishedDate != "" {
		const prefix string = ",\"publishedDate\":"
		out.RawString(prefix)
		out.String(string(in.PublishedDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v itemWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v itemWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *itemWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *itemWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader(l, v)
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefImpact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "baseMetricV2":
			if in.IsNull() {
				in.Skip()
				out.BaseMetricV2 = nil
			} else {
				if out.BaseMetricV2 == nil {
					out.BaseMetricV2 = new(schema.NVDCVEFeedJSON10DefImpactBaseMetricV2)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema3(in, out.BaseMetricV2)
			}
		case "baseMetricV3":
			if in.IsNull() {
				in.Skip()
				out.BaseMetricV3 = nil
			} else {
				if out.BaseMetricV3 == nil {
					out.BaseMetricV3 = new(schema.NVDCVEFeedJSON10DefImpactBaseMetricV3)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema4(in, out.BaseMetricV3)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefImpact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BaseMetricV2 != nil {
		const prefix string = ",\"baseMetricV2\":"
		first = false
		out.RawString(prefix[1:])
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema3(out, *in.BaseMetricV2)
	}
	if in.BaseMetricV3 != nil {
		const prefix string = ",\"baseMetricV3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema4(out, *in.BaseMetricV3)
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema4(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefImpactBaseMetricV3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cvssV3":
			if in.IsNull() {
				in.Skip()
				out.CVSSV3 = nil
			} else {
				if out.CVSSV3 == nil {
					out.CVSSV3 = new(schema.CVSSV30)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema5(in, out.CVSSV3)
			}
		case "exploitabilityScore":
			out.ExploitabilityScore = float64(in.Float64())
		case "impactScore":
			out.ImpactScore = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema4(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefImpactBaseMetricV3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CVSSV3 != nil {
		const prefix string = ",\"cvssV3\":"
		first = false
		out.RawString(prefix[1:])
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema5(out, *in.CVSSV3)
	}
	if in.ExploitabilityScore != 0 {
		const prefix string = ",\"exploitabilityScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ExploitabilityScore))
	}
	if in.ImpactScore != 0 {
		const prefix string = ",\"impactScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ImpactScore))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema5(in *jlexer.Lexer, out *schema.CVSSV30) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attackComplexity":
			out.AttackComplexity = string(in.String())
		case "attackVector":
			out.AttackVector = string(in.String())
		case "availabilityImpact":
			out.AvailabilityImpact = string(in.String())
		case "availabilityRequirement":
			out.AvailabilityRequirement = string(in.String())
		case "baseScore":
			out.BaseScore = float64(in.Float64())
		case "baseSeverity":
			out.BaseSeverity = string(in.String())
		case "confidentialityImpact":
			out.ConfidentialityImpact = string(in.String())
		case "confidentialityRequirement":
			out.ConfidentialityRequirement = string(in.String())
		case "environmentalScore":
			out.EnvironmentalScore = float64(in.Float64())
		case "environmentalSeverity":
			out.EnvironmentalSeverity = string(in.String())
		case "exploitCodeMaturity":
			out.ExploitCodeMaturity = string(in.String())
		case "integrityImpact":
			out.IntegrityImpact = string(in.String())
		case "integrityRequirement":
			out.IntegrityRequirement = string(in.String())
		case "modifiedAttackComplexity":
			out.ModifiedAttackComplexity = string(in.String())
		case "modifiedAttackVector":
			out.ModifiedAttackVector = string(in.String())
		case "modifiedAvailabilityImpact":
			out.ModifiedAvailabilityImpact = string(in.String())
		case "modifiedConfidentialityImpact":
			out.ModifiedConfidentialityImpact = string(in.String())
		case "modifiedIntegrityImpact":
			out.ModifiedIntegrityImpact = string(in.String())
		case "modifiedPrivilegesRequired":
			out.ModifiedPrivilegesRequired = string(in.String())
		case "modifiedScope":
			out.ModifiedScope = string(in.String())
		case "modifiedUserInteraction":
			out.ModifiedUserInteraction = string(in.String())
		case "privilegesRequired":
			out.PrivilegesRequired = string(in.String())
		case "remediationLevel":
			out.RemediationLevel = string(in.String())
		case "reportConfidence":
			out.ReportConfidence = string(in.String())
		case "scope":
			out.Scope = string(in.String())
		case "temporalScore":
			out.TemporalScore = float64(in.Float64())
		case "temporalSeverity":
			out.TemporalSeverity = string(in.String())
		case "userInteraction":
			out.UserInteraction = string(in.String())
		case "vectorString":
			out.VectorString = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema5(out *jwriter.Writer, in schema.CVSSV30) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AttackComplexity != "" {
		const prefix string = ",\"attackComplexity\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AttackComplexity))
	}
	if in.AttackVector != "" {
		const prefix string = ",\"attackVector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AttackVector))
	}
	if in.AvailabilityImpact != "" {
		const prefix string = ",\"availabilityImpact\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvailabilityImpact))
	}
	if in.AvailabilityRequirement != "" {
		const prefix string = ",\"availabilityRequirement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvailabilityRequirement))
	}
	{
		const prefix string = ",\"baseScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BaseScore))
	}
	{
		const prefix string = ",\"baseSeverity\":"
		out.RawString(prefix)
		out.String(string(in.BaseSeverity))
	}
	if in.ConfidentialityImpact != "" {
		const prefix string = ",\"confidentialityImpact\":"
		out.RawString(prefix)
		out.String(string(in.ConfidentialityImpact))
	}
	if in.ConfidentialityRequirement != "" {
		const prefix string = ",\"confidentialityRequirement\":"
		out.RawString(prefix)
		out.String(string(in.ConfidentialityRequirement))
	}
	if in.EnvironmentalScore != 0 {
		const prefix string = ",\"environmentalScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnvironmentalScore))
	}
	if in.EnvironmentalSeverity != "" {
		const prefix string = ",\"environmentalSeverity\":"
		out.RawString(prefix)
		out.String(string(in.EnvironmentalSeverity))
	}
	if in.ExploitCodeMaturity != "" {
		const prefix string = ",\"exploitCodeMaturity\":"
		out.RawString(prefix)
		out.String(string(in.ExploitCodeMaturity))
	}
	if in.IntegrityImpact != "" {
		const prefix string = ",\"integrityImpact\":"
		out.RawString(prefix)
		out.String(string(in.IntegrityImpact))
	}
	if in.IntegrityRequirement != "" {
		const prefix string = ",\"integrityRequirement\":"
		out.RawString(prefix)
		out.String(string(in.IntegrityRequirement))
	}
	if in.ModifiedAttackComplexity != "" {
		const prefix string = ",\"modifiedAttackComplexity\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedAttackComplexity))
	}
	if in.ModifiedAttackVector != "" {
		const prefix string = ",\"modifiedAttackVector\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedAttackVector))
	}
	if in.ModifiedAvailabilityImpact != "" {
		const prefix string = ",\"modifiedAvailabilityImpact\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedAvailabilityImpact))
	}
	if in.ModifiedConfidentialityImpact != "" {
		const prefix string = ",\"modifiedConfidentialityImpact\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedConfidentialityImpact))
	}
	if in.ModifiedIntegrityImpact != "" {
		const prefix string = ",\"modifiedIntegrityImpact\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedIntegrityImpact))
	}
	if in.ModifiedPrivilegesRequired != "" {
		const prefix string = ",\"modifiedPrivilegesRequired\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedPrivilegesRequired))
	}
	if in.ModifiedScope != "" {
		const prefix string = ",\"modifiedScope\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedScope))
	}
	if in.ModifiedUserInteraction != "" {
		const prefix string = ",\"modifiedUserInteraction\":"
		out.RawString(prefix)
		out.String(string(in.ModifiedUserInteraction))
	}
	if in.PrivilegesRequired != "" {
		const prefix string = ",\"privilegesRequired\":"
		out.RawString(prefix)
		out.String(string(in.PrivilegesRequired))
	}
	if in.RemediationLevel != "" {
		const prefix string = ",\"remediationLevel\":"
		out.RawString(prefix)
		out.String(string(in.RemediationLevel))
	}
	if in.ReportConfidence != "" {
		const prefix string = ",\"reportConfidence\":"
		out.RawString(prefix)
		out.String(string(in.ReportConfidence))
	}
	if in.Scope != "" {
		const prefix string = ",\"scope\":"
		out.RawString(prefix)
		out.String(string(in.Scope))
	}
	if in.TemporalScore != 0 {
		const prefix string = ",\"temporalScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.TemporalScore))
	}
	if in.TemporalSeverity != "" {
		const prefix string = ",\"temporalSeverity\":"
		out.RawString(prefix)
		out.String(string(in.TemporalSeverity))
	}
	if in.UserInteraction != "" {
		const prefix string = ",\"userInteraction\":"
		out.RawString(prefix)
		out.String(string(in.UserInteraction))
	}
	{
		const prefix string = ",\"vectorString\":"
		out.RawString(prefix)
		out.String(string(in.VectorString))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema3(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefImpactBaseMetricV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acInsufInfo":
			out.AcInsufInfo = bool(in.Bool())
		case "cvssV2":
			if in.IsNull() {
				in.Skip()
				out.CVSSV2 = nil
			} else {
				if out.CVSSV2 == nil {
					out.CVSSV2 = new(schema.CVSSV20)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema6(in, out.CVSSV2)
			}
		case "exploitabilityScore":
			out.ExploitabilityScore = float64(in.Float64())
		case "impactScore":
			out.ImpactScore = float64(in.Float64())
		case "obtainAllPrivilege":
			out.ObtainAllPrivilege = bool(in.Bool())
		case "obtainOtherPrivilege":
			out.ObtainOtherPrivilege = bool(in.Bool())
		case "obtainUserPrivilege":
			out.ObtainUserPrivilege = bool(in.Bool())
		case "severity":
			out.Severity = string(in.String())
		case "userInteractionRequired":
			out.UserInteractionRequired = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema3(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefImpactBaseMetricV2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AcInsufInfo {
		const prefix string = ",\"acInsufInfo\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.AcInsufInfo))
	}
	if in.CVSSV2 != nil {
		const prefix string = ",\"cvssV2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema6(out, *in.CVSSV2)
	}
	if in.ExploitabilityScore != 0 {
		const prefix string = ",\"exploitabilityScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ExploitabilityScore))
	}
	if in.ImpactScore != 0 {
		const prefix string = ",\"impactScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ImpactScore))
	}
	if in.ObtainAllPrivilege {
		const prefix string = ",\"obtainAllPrivilege\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ObtainAllPrivilege))
	}
	if in.ObtainOtherPrivilege {
		const prefix string = ",\"obtainOtherPrivilege\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ObtainOtherPrivilege))
	}
	if in.ObtainUserPrivilege {
		const prefix string = ",\"obtainUserPrivilege\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ObtainUserPrivilege))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Severity))
	}
	if in.UserInteractionRequired {
		const prefix string = ",\"userInteractionRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.UserInteractionRequired))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema6(in *jlexer.Lexer, out *schema.CVSSV20) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessComplexity":
			out.AccessComplexity = string(in.String())
		case "accessVector":
			out.AccessVector = string(in.String())
		case "authentication":
			out.Authentication = string(in.String())
		case "availabilityImpact":
			out.AvailabilityImpact = string(in.String())
		case "availabilityRequirement":
			out.AvailabilityRequirement = string(in.String())
		case "baseScore":
			out.BaseScore = float64(in.Float64())
		case "collateralDamagePotential":
			out.CollateralDamagePotential = string(in.String())
		case "confidentialityImpact":
			out.ConfidentialityImpact = string(in.String())
		case "confidentialityRequirement":
			out.ConfidentialityRequirement = string(in.String())
		case "environmentalScore":
			out.EnvironmentalScore = float64(in.Float64())
		case "exploitability":
			out.Exploitability = string(in.String())
		case "integrityImpact":
			out.IntegrityImpact = string(in.String())
		case "integrityRequirement":
			out.IntegrityRequirement = string(in.String())
		case "remediationLevel":
			out.RemediationLevel = string(in.String())
		case "reportConfidence":
			out.ReportConfidence = string(in.String())
		case "targetDistribution":
			out.TargetDistribution = string(in.String())
		case "temporalScore":
			out.TemporalScore = float64(in.Float64())
		case "vectorString":
			out.VectorString = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema6(out *jwriter.Writer, in schema.CVSSV20) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccessComplexity != "" {
		const prefix string = ",\"accessComplexity\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AccessComplexity))
	}
	if in.AccessVector != "" {
		const prefix string = ",\"accessVector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessVector))
	}
	if in.Authentication != "" {
		const prefix string = ",\"authentication\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Authentication))
	}
	if in.AvailabilityImpact != "" {
		const prefix string = ",\"availabilityImpact\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvailabilityImpact))
	}
	if in.AvailabilityRequirement != "" {
		const prefix string = ",\"availabilityRequirement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvailabilityRequirement))
	}
	{
		const prefix string = ",\"baseScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BaseScore))
	}
	if in.CollateralDamagePotential != "" {
		const prefix string = ",\"collateralDamagePotential\":"
		out.RawString(prefix)
		out.String(string(in.CollateralDamagePotential))
	}
	if in.ConfidentialityImpact != "" {
		const prefix string = ",\"confidentialityImpact\":"
		out.RawString(prefix)
		out.String(string(in.ConfidentialityImpact))
	}
	if in.ConfidentialityRequirement != "" {
		const prefix string = ",\"confidentialityRequirement\":"
		out.RawString(prefix)
		out.String(string(in.ConfidentialityRequirement))
	}
	if in.EnvironmentalScore != 0 {
		const prefix string = ",\"environmentalScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnvironmentalScore))
	}
	if in.Exploitability != "" {
		const prefix string = ",\"exploitability\":"
		out.RawString(prefix)
		out.String(string(in.Exploitability))
	}
	if in.IntegrityImpact != "" {
		const prefix string = ",\"integrityImpact\":"
		out.RawString(prefix)
		out.String(string(in.IntegrityImpact))
	}
	if in.IntegrityRequirement != "" {
		const prefix string = ",\"integrityRequirement\":"
		out.RawString(prefix)
		out.String(string(in.IntegrityRequirement))
	}
	if in.RemediationLevel != "" {
		const prefix string = ",\"remediationLevel\":"
		out.RawString(prefix)
		out.String(string(in.RemediationLevel))
	}
	if in.ReportConfidence != "" {
		const prefix string = ",\"reportConfidence\":"
		out.RawString(prefix)
		out.String(string(in.ReportConfidence))
	}
	if in.TargetDistribution != "" {
		const prefix string = ",\"targetDistribution\":"
		out.RawString(prefix)
		out.String(string(in.TargetDistribution))
	}
	if in.TemporalScore != 0 {
		const prefix string = ",\"temporalScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.TemporalScore))
	}
	{
		const prefix string = ",\"vectorString\":"
		out.RawString(prefix)
		out.String(string(in.VectorString))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefConfigurations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CVE_data_version":
			out.CVEDataVersion = string(in.String())
		case "nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]*schema.NVDCVEFeedJSON10DefNode, 0, 8)
					} else {
						out.Nodes = []*schema.NVDCVEFeedJSON10DefNode{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *schema.NVDCVEFeedJSON10DefNode
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(schema.NVDCVEFeedJSON10DefNode)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(in, v1)
					}
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefConfigurations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CVE_data_version\":"
		out.RawString(prefix[1:])
		out.String(string(in.CVEDataVersion))
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Nodes {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cpe_match":
			if in.IsNull() {
				in.Skip()
				out.CPEMatch = nil
			} else {
				in.Delim('[')
				if out.CPEMatch == nil {
					if !in.IsDelim(']') {
						out.CPEMatch = make([]*schema.NVDCVEFeedJSON10DefCPEMatch, 0, 8)
					} else {
						out.CPEMatch = []*schema.NVDCVEFeedJSON10DefCPEMatch{}
					}
				} else {
					out.CPEMatch = (out.CPEMatch)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *schema.NVDCVEFeedJSON10DefCPEMatch
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(schema.NVDCVEFeedJSON10DefCPEMatch)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema8(in, v4)
					}
					out.CPEMatch = append(out.CPEMatch, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]*schema.NVDCVEFeedJSON10DefNode, 0, 8)
					} else {
						out.Children = []*schema.NVDCVEFeedJSON10DefNode{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *schema.NVDCVEFeedJSON10DefNode
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(schema.NVDCVEFeedJSON10DefNode)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(in, v5)
					}
					out.Children = append(out.Children, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "negate":
			out.Negate = bool(in.Bool())
		case "operator":
			out.Operator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefNode) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.CPEMatch) != 0 {
		const prefix string = ",\"cpe_match\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v6, v7 := range in.CPEMatch {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema8(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Children) != 0 {
		const prefix string = ",\"children\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Children {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema7(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Negate {
		const prefix string = ",\"negate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Negate))
	}
	if in.Operator != "" {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema8(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefCPEMatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cpe_name":
			if in.IsNull() {
				in.Skip()
				out.CPEName = nil
			} else {
				in.Delim('[')
				if out.CPEName == nil {
					if !in.IsDelim(']') {
						out.CPEName = make([]*schema.NVDCVEFeedJSON10DefCPEName, 0, 8)
					} else {
						out.CPEName = []*schema.NVDCVEFeedJSON10DefCPEName{}
					}
				} else {
					out.CPEName = (out.CPEName)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *schema.NVDCVEFeedJSON10DefCPEName
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(schema.NVDCVEFeedJSON10DefCPEName)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema9(in, v10)
					}
					out.CPEName = append(out.CPEName, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cpe22Uri":
			out.Cpe22Uri = string(in.String())
		case "cpe23Uri":
			out.Cpe23Uri = string(in.String())
		case "versionEndExcluding":
			out.VersionEndExcluding = string(in.String())
		case "versionEndIncluding":
			out.VersionEndIncluding = string(in.String())
		case "versionStartExcluding":
			out.VersionStartExcluding = string(in.String())
		case "versionStartIncluding":
			out.VersionStartIncluding = string(in.String())
		case "vulnerable":
			out.Vulnerable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema8(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefCPEMatch) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.CPEName) != 0 {
		const prefix string = ",\"cpe_name\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.CPEName {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema9(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Cpe22Uri != "" {
		const prefix string = ",\"cpe22Uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cpe22Uri))
	}
	{
		const prefix string = ",\"cpe23Uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cpe23Uri))
	}
	if in.VersionEndExcluding != "" {
		const prefix string = ",\"versionEndExcluding\":"
		out.RawString(prefix)
		out.String(string(in.VersionEndExcluding))
	}
	if in.VersionEndIncluding != "" {
		const prefix string = ",\"versionEndIncluding\":"
		out.RawString(prefix)
		out.String(string(in.VersionEndIncluding))
	}
	if in.VersionStartExcluding != "" {
		const prefix string = ",\"versionStartExcluding\":"
		out.RawString(prefix)
		out.String(string(in.VersionStartExcluding))
	}
	if in.VersionStartIncluding != "" {
		const prefix string = ",\"versionStartIncluding\":"
		out.RawString(prefix)
		out.String(string(in.VersionStartIncluding))
	}
	{
		const prefix string = ",\"vulnerable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Vulnerable))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema9(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefCPEName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cpe22Uri":
			out.Cpe22Uri = string(in.String())
		case "cpe23Uri":
			out.Cpe23Uri = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema9(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefCPEName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Cpe22Uri != "" {
		const prefix string = ",\"cpe22Uri\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Cpe22Uri))
	}
	{
		const prefix string = ",\"cpe23Uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cpe23Uri))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(in *jlexer.Lexer, out *schema.CVEJSON40) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "affects":
			if in.IsNull() {
				in.Skip()
				out.Affects = nil
			} else {
				if out.Affects == nil {
					out.Affects = new(schema.CVEJSON40Affects)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema10(in, out.Affects)
			}
		case "CVE_data_meta":
			if in.IsNull() {
				in.Skip()
				out.CVEDataMeta = nil
			} else {
				if out.CVEDataMeta == nil {
					out.CVEDataMeta = new(schema.CVEJSON40CVEDataMeta)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema11(in, out.CVEDataMeta)
			}
		case "data_format":
			out.DataFormat = string(in.String())
		case "data_type":
			out.DataType = string(in.String())
		case "data_version":
			out.DataVersion = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(schema.CVEJSON40Description)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema12(in, out.Description)
			}
		case "problemtype":
			if in.IsNull() {
				in.Skip()
				out.Problemtype = nil
			} else {
				if out.Problemtype == nil {
					out.Problemtype = new(schema.CVEJSON40Problemtype)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema13(in, out.Problemtype)
			}
		case "references":
			if in.IsNull() {
				in.Skip()
				out.References = nil
			} else {
				if out.References == nil {
					out.References = new(schema.CVEJSON40References)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema14(in, out.References)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(out *jwriter.Writer, in schema.CVEJSON40) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"affects\":"
		out.RawString(prefix[1:])
		if in.Affects == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema10(out, *in.Affects)
		}
	}
	{
		const prefix string = ",\"CVE_data_meta\":"
		out.RawString(prefix)
		if in.CVEDataMeta == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema11(out, *in.CVEDataMeta)
		}
	}
	{
		const prefix string = ",\"data_format\":"
		out.RawString(prefix)
		out.String(string(in.DataFormat))
	}
	{
		const prefix string = ",\"data_type\":"
		out.RawString(prefix)
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_version\":"
		out.RawString(prefix)
		out.String(string(in.DataVersion))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema12(out, *in.Description)
		}
	}
	{
		const prefix string = ",\"problemtype\":"
		out.RawString(prefix)
		if in.Problemtype == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema13(out, *in.Problemtype)
		}
	}
	{
		const prefix string = ",\"references\":"
		out.RawString(prefix)
		if in.References == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema14(out, *in.References)
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema14(in *jlexer.Lexer, out *schema.CVEJSON40References) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reference_data":
			if in.IsNull() {
				in.Skip()
				out.ReferenceData = nil
			} else {
				in.Delim('[')
				if out.ReferenceData == nil {
					if !in.IsDelim(']') {
						out.ReferenceData = make([]*schema.CVEJSON40Reference, 0, 8)
					} else {
						out.ReferenceData = []*schema.CVEJSON40Reference{}
					}
				} else {
					out.ReferenceData = (out.ReferenceData)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *schema.CVEJSON40Reference
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(schema.CVEJSON40Reference)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema15(in, v13)
					}
					out.ReferenceData = append(out.ReferenceData, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema14(out *jwriter.Writer, in schema.CVEJSON40References) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reference_data\":"
		out.RawString(prefix[1:])
		if in.ReferenceData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.ReferenceData {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema15(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema15(in *jlexer.Lexer, out *schema.CVEJSON40Reference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "refsource":
			out.Refsource = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Tags = append(out.Tags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema15(out *jwriter.Writer, in schema.CVEJSON40Reference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Refsource != "" {
		const prefix string = ",\"refsource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Refsource))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Tags {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema13(in *jlexer.Lexer, out *schema.CVEJSON40Problemtype) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "problemtype_data":
			if in.IsNull() {
				in.Skip()
				out.ProblemtypeData = nil
			} else {
				in.Delim('[')
				if out.ProblemtypeData == nil {
					if !in.IsDelim(']') {
						out.ProblemtypeData = make([]*schema.CVEJSON40ProblemtypeProblemtypeData, 0, 8)
					} else {
						out.ProblemtypeData = []*schema.CVEJSON40ProblemtypeProblemtypeData{}
					}
				} else {
					out.ProblemtypeData = (out.ProblemtypeData)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *schema.CVEJSON40ProblemtypeProblemtypeData
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(schema.CVEJSON40ProblemtypeProblemtypeData)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema16(in, v19)
					}
					out.ProblemtypeData = append(out.ProblemtypeData, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema13(out *jwriter.Writer, in schema.CVEJSON40Problemtype) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"problemtype_data\":"
		out.RawString(prefix[1:])
		if in.ProblemtypeData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.ProblemtypeData {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema16(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema16(in *jlexer.Lexer, out *schema.CVEJSON40ProblemtypeProblemtypeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				in.Delim('[')
				if out.Description == nil {
					if !in.IsDelim(']') {
						out.Description = make([]*schema.CVEJSON40LangString, 0, 8)
					} else {
						out.Description = []*schema.CVEJSON40LangString{}
					}
				} else {
					out.Description = (out.Description)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *schema.CVEJSON40LangString
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(schema.CVEJSON40LangString)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(in, v22)
					}
					out.Description = append(out.Description, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema16(out *jwriter.Writer, in schema.CVEJSON40ProblemtypeProblemtypeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		if in.Description == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Description {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(out, *v24)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(in *jlexer.Lexer, out *schema.CVEJSON40LangString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lang":
			out.Lang = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(out *jwriter.Writer, in schema.CVEJSON40LangString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix[1:])
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema12(in *jlexer.Lexer, out *schema.CVEJSON40Description) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description_data":
			if in.IsNull() {
				in.Skip()
				out.DescriptionData = nil
			} else {
				in.Delim('[')
				if out.DescriptionData == nil {
					if !in.IsDelim(']') {
						out.DescriptionData = make([]*schema.CVEJSON40LangString, 0, 8)
					} else {
						out.DescriptionData = []*schema.CVEJSON40LangString{}
					}
				} else {
					out.DescriptionData = (out.DescriptionData)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *schema.CVEJSON40LangString
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(schema.CVEJSON40LangString)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(in, v25)
					}
					out.DescriptionData = append(out.DescriptionData, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema12(out *jwriter.Writer, in schema.CVEJSON40Description) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description_data\":"
		out.RawString(prefix[1:])
		if in.DescriptionData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.DescriptionData {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema17(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema11(in *jlexer.Lexer, out *schema.CVEJSON40CVEDataMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ASSIGNER":
			out.ASSIGNER = string(in.String())
		case "ID":
			out.ID = string(in.String())
		case "STATE":
			out.STATE = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema11(out *jwriter.Writer, in schema.CVEJSON40CVEDataMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ASSIGNER\":"
		out.RawString(prefix[1:])
		out.String(string(in.ASSIGNER))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.STATE != "" {
		const prefix string = ",\"STATE\":"
		out.RawString(prefix)
		out.String(string(in.STATE))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema10(in *jlexer.Lexer, out *schema.CVEJSON40Affects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vendor":
			if in.IsNull() {
				in.Skip()
				out.Vendor = nil
			} else {
				if out.Vendor == nil {
					out.Vendor = new(schema.CVEJSON40AffectsVendor)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema18(in, out.Vendor)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema10(out *jwriter.Writer, in schema.CVEJSON40Affects) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vendor\":"
		out.RawString(prefix[1:])
		if in.Vendor == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema18(out, *in.Vendor)
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema18(in *jlexer.Lexer, out *schema.CVEJSON40AffectsVendor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vendor_data":
			if in.IsNull() {
				in.Skip()
				out.VendorData = nil
			} else {
				in.Delim('[')
				if out.VendorData == nil {
					if !in.IsDelim(']') {
						out.VendorData = make([]*schema.CVEJSON40AffectsVendorVendorData, 0, 8)
					} else {
						out.VendorData = []*schema.CVEJSON40AffectsVendorVendorData{}
					}
				} else {
					out.VendorData = (out.VendorData)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *schema.CVEJSON40AffectsVendorVendorData
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(schema.CVEJSON40AffectsVendorVendorData)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema19(in, v28)
					}
					out.VendorData = append(out.VendorData, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema18(out *jwriter.Writer, in schema.CVEJSON40AffectsVendor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vendor_data\":"
		out.RawString(prefix[1:])
		if in.VendorData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.VendorData {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema19(out, *v30)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema19(in *jlexer.Lexer, out *schema.CVEJSON40AffectsVendorVendorData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product":
			if in.IsNull() {
				in.Skip()
				out.Product = nil
			} else {
				if out.Product == nil {
					out.Product = new(schema.CVEJSON40AffectsVendorVendorDataProduct)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema20(in, out.Product)
			}
		case "vendor_name":
			out.VendorName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema19(out *jwriter.Writer, in schema.CVEJSON40AffectsVendorVendorData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix[1:])
		if in.Product == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema20(out, *in.Product)
		}
	}
	{
		const prefix string = ",\"vendor_name\":"
		out.RawString(prefix)
		out.String(string(in.VendorName))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema20(in *jlexer.Lexer, out *schema.CVEJSON40AffectsVendorVendorDataProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_data":
			if in.IsNull() {
				in.Skip()
				out.ProductData = nil
			} else {
				in.Delim('[')
				if out.ProductData == nil {
					if !in.IsDelim(']') {
						out.ProductData = make([]*schema.CVEJSON40Product, 0, 8)
					} else {
						out.ProductData = []*schema.CVEJSON40Product{}
					}
				} else {
					out.ProductData = (out.ProductData)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *schema.CVEJSON40Product
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(schema.CVEJSON40Product)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema21(in, v31)
					}
					out.ProductData = append(out.ProductData, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema20(out *jwriter.Writer, in schema.CVEJSON40AffectsVendorVendorDataProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_data\":"
		out.RawString(prefix[1:])
		if in.ProductData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.ProductData {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema21(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema21(in *jlexer.Lexer, out *schema.CVEJSON40Product) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_name":
			out.ProductName = string(in.String())
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(schema.CVEJSON40ProductVersion)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema22(in, out.Version)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema21(out *jwriter.Writer, in schema.CVEJSON40Product) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		if in.Version == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema22(out, *in.Version)
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema22(in *jlexer.Lexer, out *schema.CVEJSON40ProductVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version_data":
			if in.IsNull() {
				in.Skip()
				out.VersionData = nil
			} else {
				in.Delim('[')
				if out.VersionData == nil {
					if !in.IsDelim(']') {
						out.VersionData = make([]*schema.CVEJSON40ProductVersionVersionData, 0, 8)
					} else {
						out.VersionData = []*schema.CVEJSON40ProductVersionVersionData{}
					}
				} else {
					out.VersionData = (out.VersionData)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *schema.CVEJSON40ProductVersionVersionData
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(schema.CVEJSON40ProductVersionVersionData)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema23(in, v34)
					}
					out.VersionData = append(out.VersionData, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema22(out *jwriter.Writer, in schema.CVEJSON40ProductVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version_data\":"
		out.RawString(prefix[1:])
		if in.VersionData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.VersionData {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema23(out, *v36)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema23(in *jlexer.Lexer, out *schema.CVEJSON40ProductVersionVersionData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version_affected":
			out.VersionAffected = string(in.String())
		case "version_value":
			out.VersionValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema23(out *jwriter.Writer, in schema.CVEJSON40ProductVersionVersionData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VersionAffected != "" {
		const prefix string = ",\"version_affected\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.VersionAffected))
	}
	{
		const prefix string = ",\"version_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionValue))
	}
	out.RawByte('}')
}
func easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader1(in *jlexer.Lexer, out *feedWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CVE_data_format":
			out.CVEDataFormat = string(in.String())
		case "CVE_data_numberOfCVEs":
			out.CVEDataNumberOfCVEs = string(in.String())
		case "CVE_data_timestamp":
			out.CVEDataTimestamp = string(in.String())
		case "CVE_data_type":
			out.CVEDataType = string(in.String())
		case "CVE_data_version":
			out.CVEDataVersion = string(in.String())
		case "CVE_Items":
			if in.IsNull() {
				in.Skip()
				out.CVEItems = nil
			} else {
				in.Delim('[')
				if out.CVEItems == nil {
					if !in.IsDelim(']') {
						out.CVEItems = make([]*schema.NVDCVEFeedJSON10DefCVEItem, 0, 8)
					} else {
						out.CVEItems = []*schema.NVDCVEFeedJSON10DefCVEItem{}
					}
				} else {
					out.CVEItems = (out.CVEItems)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *schema.NVDCVEFeedJSON10DefCVEItem
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(schema.NVDCVEFeedJSON10DefCVEItem)
						}
						easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema24(in, v37)
					}
					out.CVEItems = append(out.CVEItems, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader1(out *jwriter.Writer, in feedWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CVE_data_format\":"
		out.RawString(prefix[1:])
		out.String(string(in.CVEDataFormat))
	}
	if in.CVEDataNumberOfCVEs != "" {
		const prefix string = ",\"CVE_data_numberOfCVEs\":"
		out.RawString(prefix)
		out.String(string(in.CVEDataNumberOfCVEs))
	}
	if in.CVEDataTimestamp != "" {
		const prefix string = ",\"CVE_data_timestamp\":"
		out.RawString(prefix)
		out.String(string(in.CVEDataTimestamp))
	}
	{
		const prefix string = ",\"CVE_data_type\":"
		out.RawString(prefix)
		out.String(string(in.CVEDataType))
	}
	{
		const prefix string = ",\"CVE_data_version\":"
		out.RawString(prefix)
		out.String(string(in.CVEDataVersion))
	}
	{
		const prefix string = ",\"CVE_Items\":"
		out.RawString(prefix)
		if in.CVEItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.CVEItems {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema24(out, *v39)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v feedWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v feedWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson77cee5bfEncodeGithubComStackroxScannerPkgVulnloaderNvdloader1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *feedWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *feedWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson77cee5bfDecodeGithubComStackroxScannerPkgVulnloaderNvdloader1(l, v)
}
func easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema24(in *jlexer.Lexer, out *schema.NVDCVEFeedJSON10DefCVEItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cve":
			if in.IsNull() {
				in.Skip()
				out.CVE = nil
			} else {
				if out.CVE == nil {
					out.CVE = new(schema.CVEJSON40)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(in, out.CVE)
			}
		case "configurations":
			if in.IsNull() {
				in.Skip()
				out.Configurations = nil
			} else {
				if out.Configurations == nil {
					out.Configurations = new(schema.NVDCVEFeedJSON10DefConfigurations)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(in, out.Configurations)
			}
		case "impact":
			if in.IsNull() {
				in.Skip()
				out.Impact = nil
			} else {
				if out.Impact == nil {
					out.Impact = new(schema.NVDCVEFeedJSON10DefImpact)
				}
				easyjson77cee5bfDecodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(in, out.Impact)
			}
		case "lastModifiedDate":
			out.LastModifiedDate = string(in.String())
		case "publishedDate":
			out.PublishedDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema24(out *jwriter.Writer, in schema.NVDCVEFeedJSON10DefCVEItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cve\":"
		out.RawString(prefix[1:])
		if in.CVE == nil {
			out.RawString("null")
		} else {
			easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema(out, *in.CVE)
		}
	}
	if in.Configurations != nil {
		const prefix string = ",\"configurations\":"
		out.RawString(prefix)
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema1(out, *in.Configurations)
	}
	if in.Impact != nil {
		const prefix string = ",\"impact\":"
		out.RawString(prefix)
		easyjson77cee5bfEncodeGithubComFacebookincubatorNvdtoolsCvefeedNvdSchema2(out, *in.Impact)
	}
	if in.LastModifiedDate != "" {
		const prefix string = ",\"lastModifiedDate\":"
		out.RawString(prefix)
		out.String(string(in.LastModifiedDate))
	}
	if in.PublishedDate != "" {
		const prefix string = ",\"publishedDate\":"
		out.RawString(prefix)
		out.String(string(in.PublishedDate))
	}
	out.RawByte('}')
}
