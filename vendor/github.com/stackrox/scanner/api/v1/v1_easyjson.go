// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	_v1 "github.com/stackrox/scanner/generated/scanner/api/v1"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson102f8a2fDecodeGithubComStackroxScannerApiV1(in *jlexer.Lexer, out *LayerEnvelope) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ScannerVersion":
			out.ScannerVersion = string(in.String())
		case "Layer":
			if in.IsNull() {
				in.Skip()
				out.Layer = nil
			} else {
				if out.Layer == nil {
					out.Layer = new(Layer)
				}
				easyjson102f8a2fDecodeGithubComStackroxScannerApiV11(in, out.Layer)
			}
		case "Notes":
			if in.IsNull() {
				in.Skip()
				out.Notes = nil
			} else {
				in.Delim('[')
				if out.Notes == nil {
					if !in.IsDelim(']') {
						out.Notes = make([]Note, 0, 8)
					} else {
						out.Notes = []Note{}
					}
				} else {
					out.Notes = (out.Notes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Note
					v1 = Note(in.Int())
					out.Notes = append(out.Notes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				easyjson102f8a2fDecodeGithubComStackroxScannerApiV12(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerApiV1(out *jwriter.Writer, in LayerEnvelope) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScannerVersion != "" {
		const prefix string = ",\"ScannerVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ScannerVersion))
	}
	if in.Layer != nil {
		const prefix string = ",\"Layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson102f8a2fEncodeGithubComStackroxScannerApiV11(out, *in.Layer)
	}
	if len(in.Notes) != 0 {
		const prefix string = ",\"Notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Notes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	if in.Error != nil {
		const prefix string = ",\"Error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson102f8a2fEncodeGithubComStackroxScannerApiV12(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LayerEnvelope) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComStackroxScannerApiV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LayerEnvelope) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComStackroxScannerApiV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LayerEnvelope) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComStackroxScannerApiV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LayerEnvelope) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComStackroxScannerApiV1(l, v)
}
func easyjson102f8a2fDecodeGithubComStackroxScannerApiV12(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerApiV12(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}
func easyjson102f8a2fDecodeGithubComStackroxScannerApiV11(in *jlexer.Lexer, out *Layer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "NamespaceName":
			out.NamespaceName = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(map[string]string)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Headers)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ParentName":
			out.ParentName = string(in.String())
		case "Format":
			out.Format = string(in.String())
		case "IndexedByVersion":
			out.IndexedByVersion = int(in.Int())
		case "Features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]Feature, 0, 0)
					} else {
						out.Features = []Feature{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Feature
					easyjson102f8a2fDecodeGithubComStackroxScannerApiV13(in, &v5)
					out.Features = append(out.Features, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerApiV11(out *jwriter.Writer, in Layer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.NamespaceName != "" {
		const prefix string = ",\"NamespaceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NamespaceName))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"Headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Headers {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if in.ParentName != "" {
		const prefix string = ",\"ParentName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentName))
	}
	if in.Format != "" {
		const prefix string = ",\"Format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Format))
	}
	if in.IndexedByVersion != 0 {
		const prefix string = ",\"IndexedByVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IndexedByVersion))
	}
	if len(in.Features) != 0 {
		const prefix string = ",\"Features\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Features {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson102f8a2fEncodeGithubComStackroxScannerApiV13(out, v8)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson102f8a2fDecodeGithubComStackroxScannerApiV13(in *jlexer.Lexer, out *Feature) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "NamespaceName":
			out.NamespaceName = string(in.String())
		case "VersionFormat":
			out.VersionFormat = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Vulnerabilities":
			if in.IsNull() {
				in.Skip()
				out.Vulnerabilities = nil
			} else {
				in.Delim('[')
				if out.Vulnerabilities == nil {
					if !in.IsDelim(']') {
						out.Vulnerabilities = make([]Vulnerability, 0, 0)
					} else {
						out.Vulnerabilities = []Vulnerability{}
					}
				} else {
					out.Vulnerabilities = (out.Vulnerabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Vulnerability
					easyjson102f8a2fDecodeGithubComStackroxScannerApiV14(in, &v9)
					out.Vulnerabilities = append(out.Vulnerabilities, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AddedBy":
			out.AddedBy = string(in.String())
		case "Location":
			out.Location = string(in.String())
		case "FixedBy":
			out.FixedBy = string(in.String())
		case "Executables":
			if in.IsNull() {
				in.Skip()
				out.Executables = nil
			} else {
				in.Delim('[')
				if out.Executables == nil {
					if !in.IsDelim(']') {
						out.Executables = make([]*_v1.Executable, 0, 8)
					} else {
						out.Executables = []*_v1.Executable{}
					}
				} else {
					out.Executables = (out.Executables)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *_v1.Executable
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(_v1.Executable)
						}
						easyjson102f8a2fDecodeGithubComStackroxScannerGeneratedScannerApiV1(in, v10)
					}
					out.Executables = append(out.Executables, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerApiV13(out *jwriter.Writer, in Feature) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.NamespaceName != "" {
		const prefix string = ",\"NamespaceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NamespaceName))
	}
	if in.VersionFormat != "" {
		const prefix string = ",\"VersionFormat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VersionFormat))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Vulnerabilities) != 0 {
		const prefix string = ",\"Vulnerabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Vulnerabilities {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson102f8a2fEncodeGithubComStackroxScannerApiV14(out, v12)
			}
			out.RawByte(']')
		}
	}
	if in.AddedBy != "" {
		const prefix string = ",\"AddedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddedBy))
	}
	if in.Location != "" {
		const prefix string = ",\"Location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	if in.FixedBy != "" {
		const prefix string = ",\"FixedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FixedBy))
	}
	if len(in.Executables) != 0 {
		const prefix string = ",\"Executables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Executables {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjson102f8a2fEncodeGithubComStackroxScannerGeneratedScannerApiV1(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson102f8a2fDecodeGithubComStackroxScannerGeneratedScannerApiV1(in *jlexer.Lexer, out *_v1.Executable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "required_features":
			if in.IsNull() {
				in.Skip()
				out.RequiredFeatures = nil
			} else {
				in.Delim('[')
				if out.RequiredFeatures == nil {
					if !in.IsDelim(']') {
						out.RequiredFeatures = make([]*_v1.FeatureNameVersion, 0, 8)
					} else {
						out.RequiredFeatures = []*_v1.FeatureNameVersion{}
					}
				} else {
					out.RequiredFeatures = (out.RequiredFeatures)[:0]
				}
				for !in.IsDelim(']') {
					var v15 *_v1.FeatureNameVersion
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(_v1.FeatureNameVersion)
						}
						easyjson102f8a2fDecodeGithubComStackroxScannerGeneratedScannerApiV11(in, v15)
					}
					out.RequiredFeatures = append(out.RequiredFeatures, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerGeneratedScannerApiV1(out *jwriter.Writer, in _v1.Executable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if len(in.RequiredFeatures) != 0 {
		const prefix string = ",\"required_features\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.RequiredFeatures {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					easyjson102f8a2fEncodeGithubComStackroxScannerGeneratedScannerApiV11(out, *v17)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson102f8a2fDecodeGithubComStackroxScannerGeneratedScannerApiV11(in *jlexer.Lexer, out *_v1.FeatureNameVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerGeneratedScannerApiV11(out *jwriter.Writer, in _v1.FeatureNameVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjson102f8a2fDecodeGithubComStackroxScannerApiV14(in *jlexer.Lexer, out *Vulnerability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "NamespaceName":
			out.NamespaceName = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Link":
			out.Link = string(in.String())
		case "Severity":
			out.Severity = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]interface{})
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					(out.Metadata)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FixedBy":
			out.FixedBy = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComStackroxScannerApiV14(out *jwriter.Writer, in Vulnerability) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.NamespaceName != "" {
		const prefix string = ",\"NamespaceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NamespaceName))
	}
	if in.Description != "" {
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Link != "" {
		const prefix string = ",\"Link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Link))
	}
	if in.Severity != "" {
		const prefix string = ",\"Severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Severity))
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"Metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Metadata {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if m, ok := v19Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.FixedBy != "" {
		const prefix string = ",\"FixedBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FixedBy))
	}
	out.RawByte('}')
}
