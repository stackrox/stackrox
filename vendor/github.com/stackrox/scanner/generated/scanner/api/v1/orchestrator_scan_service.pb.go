// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scanner/api/v1/orchestrator_scan_service.proto

package scannerV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetKubeVulnerabilitiesRequest struct {
	KubernetesVersion    string   `protobuf:"bytes,1,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKubeVulnerabilitiesRequest) Reset()         { *m = GetKubeVulnerabilitiesRequest{} }
func (m *GetKubeVulnerabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetKubeVulnerabilitiesRequest) ProtoMessage()    {}
func (*GetKubeVulnerabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac93c27c111ff4a6, []int{0}
}
func (m *GetKubeVulnerabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKubeVulnerabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKubeVulnerabilitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetKubeVulnerabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKubeVulnerabilitiesRequest.Merge(m, src)
}
func (m *GetKubeVulnerabilitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetKubeVulnerabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKubeVulnerabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetKubeVulnerabilitiesRequest proto.InternalMessageInfo

func (m *GetKubeVulnerabilitiesRequest) GetKubernetesVersion() string {
	if m != nil {
		return m.KubernetesVersion
	}
	return ""
}

func (m *GetKubeVulnerabilitiesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetKubeVulnerabilitiesRequest) Clone() *GetKubeVulnerabilitiesRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetKubeVulnerabilitiesRequest)
	*cloned = *m

	return cloned
}

// Next tag: 7
type GetKubeVulnerabilitiesResponse struct {
	ScannerVersion                   string           `protobuf:"bytes,6,opt,name=scanner_version,json=scannerVersion,proto3" json:"scanner_version,omitempty"`
	AggregatorVulnerabilities        []*Vulnerability `protobuf:"bytes,1,rep,name=aggregator_vulnerabilities,json=aggregatorVulnerabilities,proto3" json:"aggregator_vulnerabilities,omitempty"`
	ApiserverVulnerabilities         []*Vulnerability `protobuf:"bytes,2,rep,name=apiserver_vulnerabilities,json=apiserverVulnerabilities,proto3" json:"apiserver_vulnerabilities,omitempty"`
	ControllerManagerVulnerabilities []*Vulnerability `protobuf:"bytes,3,rep,name=controller_manager_vulnerabilities,json=controllerManagerVulnerabilities,proto3" json:"controller_manager_vulnerabilities,omitempty"`
	SchedulerVulnerabilities         []*Vulnerability `protobuf:"bytes,4,rep,name=scheduler_vulnerabilities,json=schedulerVulnerabilities,proto3" json:"scheduler_vulnerabilities,omitempty"`
	GenericVulnerabilities           []*Vulnerability `protobuf:"bytes,5,rep,name=generic_vulnerabilities,json=genericVulnerabilities,proto3" json:"generic_vulnerabilities,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}         `json:"-"`
	XXX_unrecognized                 []byte           `json:"-"`
	XXX_sizecache                    int32            `json:"-"`
}

func (m *GetKubeVulnerabilitiesResponse) Reset()         { *m = GetKubeVulnerabilitiesResponse{} }
func (m *GetKubeVulnerabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetKubeVulnerabilitiesResponse) ProtoMessage()    {}
func (*GetKubeVulnerabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac93c27c111ff4a6, []int{1}
}
func (m *GetKubeVulnerabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKubeVulnerabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKubeVulnerabilitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetKubeVulnerabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKubeVulnerabilitiesResponse.Merge(m, src)
}
func (m *GetKubeVulnerabilitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetKubeVulnerabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKubeVulnerabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetKubeVulnerabilitiesResponse proto.InternalMessageInfo

func (m *GetKubeVulnerabilitiesResponse) GetScannerVersion() string {
	if m != nil {
		return m.ScannerVersion
	}
	return ""
}

func (m *GetKubeVulnerabilitiesResponse) GetAggregatorVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.AggregatorVulnerabilities
	}
	return nil
}

func (m *GetKubeVulnerabilitiesResponse) GetApiserverVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.ApiserverVulnerabilities
	}
	return nil
}

func (m *GetKubeVulnerabilitiesResponse) GetControllerManagerVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.ControllerManagerVulnerabilities
	}
	return nil
}

func (m *GetKubeVulnerabilitiesResponse) GetSchedulerVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.SchedulerVulnerabilities
	}
	return nil
}

func (m *GetKubeVulnerabilitiesResponse) GetGenericVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.GenericVulnerabilities
	}
	return nil
}

func (m *GetKubeVulnerabilitiesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetKubeVulnerabilitiesResponse) Clone() *GetKubeVulnerabilitiesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetKubeVulnerabilitiesResponse)
	*cloned = *m

	if m.AggregatorVulnerabilities != nil {
		cloned.AggregatorVulnerabilities = make([]*Vulnerability, len(m.AggregatorVulnerabilities))
		for idx, v := range m.AggregatorVulnerabilities {
			cloned.AggregatorVulnerabilities[idx] = v.Clone()
		}
	}
	if m.ApiserverVulnerabilities != nil {
		cloned.ApiserverVulnerabilities = make([]*Vulnerability, len(m.ApiserverVulnerabilities))
		for idx, v := range m.ApiserverVulnerabilities {
			cloned.ApiserverVulnerabilities[idx] = v.Clone()
		}
	}
	if m.ControllerManagerVulnerabilities != nil {
		cloned.ControllerManagerVulnerabilities = make([]*Vulnerability, len(m.ControllerManagerVulnerabilities))
		for idx, v := range m.ControllerManagerVulnerabilities {
			cloned.ControllerManagerVulnerabilities[idx] = v.Clone()
		}
	}
	if m.SchedulerVulnerabilities != nil {
		cloned.SchedulerVulnerabilities = make([]*Vulnerability, len(m.SchedulerVulnerabilities))
		for idx, v := range m.SchedulerVulnerabilities {
			cloned.SchedulerVulnerabilities[idx] = v.Clone()
		}
	}
	if m.GenericVulnerabilities != nil {
		cloned.GenericVulnerabilities = make([]*Vulnerability, len(m.GenericVulnerabilities))
		for idx, v := range m.GenericVulnerabilities {
			cloned.GenericVulnerabilities[idx] = v.Clone()
		}
	}
	return cloned
}

type GetOpenShiftVulnerabilitiesRequest struct {
	OpenShiftVersion     string   `protobuf:"bytes,1,opt,name=openShift_version,json=openShiftVersion,proto3" json:"openShift_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOpenShiftVulnerabilitiesRequest) Reset()         { *m = GetOpenShiftVulnerabilitiesRequest{} }
func (m *GetOpenShiftVulnerabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetOpenShiftVulnerabilitiesRequest) ProtoMessage()    {}
func (*GetOpenShiftVulnerabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac93c27c111ff4a6, []int{2}
}
func (m *GetOpenShiftVulnerabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenShiftVulnerabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenShiftVulnerabilitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenShiftVulnerabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenShiftVulnerabilitiesRequest.Merge(m, src)
}
func (m *GetOpenShiftVulnerabilitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenShiftVulnerabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenShiftVulnerabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenShiftVulnerabilitiesRequest proto.InternalMessageInfo

func (m *GetOpenShiftVulnerabilitiesRequest) GetOpenShiftVersion() string {
	if m != nil {
		return m.OpenShiftVersion
	}
	return ""
}

func (m *GetOpenShiftVulnerabilitiesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetOpenShiftVulnerabilitiesRequest) Clone() *GetOpenShiftVulnerabilitiesRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetOpenShiftVulnerabilitiesRequest)
	*cloned = *m

	return cloned
}

type GetOpenShiftVulnerabilitiesResponse struct {
	ScannerVersion       string           `protobuf:"bytes,2,opt,name=scanner_version,json=scannerVersion,proto3" json:"scanner_version,omitempty"`
	Vulnerabilities      []*Vulnerability `protobuf:"bytes,1,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetOpenShiftVulnerabilitiesResponse) Reset()         { *m = GetOpenShiftVulnerabilitiesResponse{} }
func (m *GetOpenShiftVulnerabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetOpenShiftVulnerabilitiesResponse) ProtoMessage()    {}
func (*GetOpenShiftVulnerabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac93c27c111ff4a6, []int{3}
}
func (m *GetOpenShiftVulnerabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenShiftVulnerabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenShiftVulnerabilitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenShiftVulnerabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenShiftVulnerabilitiesResponse.Merge(m, src)
}
func (m *GetOpenShiftVulnerabilitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenShiftVulnerabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenShiftVulnerabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenShiftVulnerabilitiesResponse proto.InternalMessageInfo

func (m *GetOpenShiftVulnerabilitiesResponse) GetScannerVersion() string {
	if m != nil {
		return m.ScannerVersion
	}
	return ""
}

func (m *GetOpenShiftVulnerabilitiesResponse) GetVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.Vulnerabilities
	}
	return nil
}

func (m *GetOpenShiftVulnerabilitiesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetOpenShiftVulnerabilitiesResponse) Clone() *GetOpenShiftVulnerabilitiesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetOpenShiftVulnerabilitiesResponse)
	*cloned = *m

	if m.Vulnerabilities != nil {
		cloned.Vulnerabilities = make([]*Vulnerability, len(m.Vulnerabilities))
		for idx, v := range m.Vulnerabilities {
			cloned.Vulnerabilities[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*GetKubeVulnerabilitiesRequest)(nil), "scannerV1.GetKubeVulnerabilitiesRequest")
	proto.RegisterType((*GetKubeVulnerabilitiesResponse)(nil), "scannerV1.GetKubeVulnerabilitiesResponse")
	proto.RegisterType((*GetOpenShiftVulnerabilitiesRequest)(nil), "scannerV1.GetOpenShiftVulnerabilitiesRequest")
	proto.RegisterType((*GetOpenShiftVulnerabilitiesResponse)(nil), "scannerV1.GetOpenShiftVulnerabilitiesResponse")
}

func init() {
	proto.RegisterFile("scanner/api/v1/orchestrator_scan_service.proto", fileDescriptor_ac93c27c111ff4a6)
}

var fileDescriptor_ac93c27c111ff4a6 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7b, 0x69, 0xa9, 0xd4, 0x43, 0xa2, 0xf4, 0x86, 0x36, 0x35, 0x60, 0x45, 0x46, 0xa8,
	0xe1, 0x4f, 0x6c, 0x25, 0xcc, 0x2c, 0x5d, 0x3a, 0x20, 0xa8, 0x9a, 0x88, 0x80, 0x58, 0xa2, 0x8b,
	0x79, 0xeb, 0x9c, 0x6a, 0xee, 0xcc, 0xdd, 0xd9, 0xa2, 0x2b, 0x2b, 0x1b, 0x2c, 0x0c, 0x7c, 0x08,
	0x3e, 0x06, 0x23, 0x12, 0x5f, 0x00, 0x05, 0x36, 0xbe, 0x04, 0xb2, 0x9d, 0x38, 0xe9, 0xc5, 0x89,
	0xc3, 0xea, 0xf7, 0x79, 0x7e, 0xf7, 0xf8, 0xbd, 0xf7, 0x3d, 0xec, 0x2a, 0x9f, 0x72, 0x0e, 0xd2,
	0xa3, 0x11, 0xf3, 0x92, 0xb6, 0x27, 0xa4, 0x3f, 0x02, 0xa5, 0x25, 0xd5, 0x42, 0x0e, 0xd2, 0xda,
	0x40, 0x81, 0x4c, 0x98, 0x0f, 0x6e, 0x24, 0x85, 0x16, 0x64, 0x67, 0xa2, 0xef, 0xb7, 0xad, 0xdb,
	0x81, 0x10, 0x41, 0x08, 0x99, 0x93, 0x72, 0x2e, 0x34, 0xd5, 0x4c, 0x70, 0x95, 0x0b, 0x2d, 0xc7,
	0x00, 0x27, 0x71, 0xc8, 0x41, 0xd2, 0x21, 0x0b, 0x99, 0xbe, 0xcc, 0x35, 0xce, 0x73, 0x7c, 0xe7,
	0x04, 0xf4, 0xd3, 0x78, 0x08, 0xfd, 0xb9, 0x2a, 0x03, 0xd5, 0x85, 0x77, 0x31, 0x28, 0x4d, 0x5a,
	0x98, 0x5c, 0xc4, 0x43, 0x90, 0x1c, 0x34, 0xa8, 0x41, 0x02, 0x52, 0x31, 0xc1, 0xeb, 0xa8, 0x81,
	0x9a, 0x3b, 0xdd, 0xbd, 0x59, 0xa5, 0x9f, 0x17, 0x9c, 0x8f, 0x5b, 0xd8, 0x5e, 0x06, 0x54, 0x91,
	0xe0, 0x0a, 0xc8, 0x11, 0xde, 0x9d, 0x04, 0x2b, 0x70, 0xdb, 0x19, 0xee, 0xc6, 0xf4, 0xc7, 0xf2,
	0xaf, 0xe4, 0x25, 0xb6, 0x68, 0x10, 0x48, 0x08, 0xb2, 0x4e, 0x24, 0x57, 0x71, 0x75, 0xd4, 0xd8,
	0x6c, 0x5e, 0xef, 0xd4, 0xdd, 0xa2, 0x1b, 0xee, 0xfc, 0x81, 0x97, 0xdd, 0xc3, 0x99, 0xd7, 0x48,
	0x42, 0x5e, 0xe0, 0x43, 0x1a, 0xb1, 0xb4, 0xab, 0xb0, 0xc8, 0xad, 0x55, 0x70, 0xeb, 0x85, 0xd5,
	0xc4, 0x9e, 0x63, 0xc7, 0x17, 0x5c, 0x4b, 0x11, 0x86, 0x20, 0x07, 0x6f, 0x29, 0xa7, 0x41, 0x09,
	0x7f, 0xb3, 0x82, 0xdf, 0x98, 0x31, 0x9e, 0xe5, 0x88, 0x92, 0xf8, 0xca, 0x1f, 0xc1, 0x9b, 0x38,
	0x2c, 0xc1, 0x6f, 0x55, 0xc5, 0x2f, 0xac, 0x26, 0xf6, 0x0c, 0x1f, 0x04, 0xc0, 0x41, 0x32, 0x7f,
	0x01, 0x7a, 0xad, 0x02, 0xba, 0x3f, 0x31, 0x1a, 0x48, 0xe7, 0x0c, 0x3b, 0x27, 0xa0, 0x4f, 0x23,
	0xe0, 0xbd, 0x11, 0x3b, 0xd7, 0x4b, 0x46, 0xec, 0x21, 0xde, 0x13, 0x53, 0x89, 0x31, 0x61, 0x37,
	0x8b, 0xc2, 0x74, 0xc0, 0x3e, 0x21, 0x7c, 0x77, 0x25, 0x73, 0xf9, 0x94, 0xd5, 0x4a, 0xa7, 0xec,
	0x18, 0xef, 0xfe, 0xef, 0x68, 0x99, 0x86, 0xce, 0xdf, 0x1a, 0x3e, 0x38, 0x9d, 0x5b, 0xdb, 0x9e,
	0x4f, 0x79, 0x2f, 0x5f, 0x5a, 0xf2, 0x15, 0xe1, 0xfd, 0xf2, 0x8d, 0x20, 0xcd, 0xb9, 0x13, 0x56,
	0x6e, 0xa1, 0x75, 0x7f, 0x0d, 0x65, 0xfe, 0xe3, 0x4e, 0xeb, 0xc3, 0xcf, 0x3f, 0x9f, 0x6b, 0x47,
	0xe4, 0x9e, 0xf9, 0x96, 0x78, 0xe9, 0xb6, 0x7a, 0x46, 0x74, 0xf2, 0x0d, 0xe1, 0x5b, 0x2b, 0xfa,
	0x49, 0x5a, 0x57, 0x4f, 0xae, 0xb8, 0x4b, 0xcb, 0x5d, 0x57, 0x3e, 0x49, 0xdb, 0xc9, 0xd2, 0x3e,
	0x22, 0x0f, 0x16, 0xd2, 0xa6, 0x37, 0xaf, 0x52, 0xab, 0x19, 0xf9, 0xf8, 0xc9, 0xf7, 0xb1, 0x8d,
	0x7e, 0x8c, 0x6d, 0xf4, 0x6b, 0x6c, 0xa3, 0x2f, 0xbf, 0xed, 0x0d, 0xdc, 0x60, 0xc2, 0x55, 0x9a,
	0xfa, 0x17, 0x52, 0xbc, 0xcf, 0x1f, 0x36, 0x97, 0x46, 0x6c, 0x1a, 0xc5, 0x4d, 0xda, 0xaf, 0x67,
	0x8f, 0xe6, 0xab, 0x8d, 0xe1, 0x76, 0x26, 0x79, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x30, 0xd0,
	0x69, 0x25, 0x7a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrchestratorScanServiceClient is the client API for OrchestratorScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type OrchestratorScanServiceClient interface {
	GetKubeVulnerabilities(ctx context.Context, in *GetKubeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetKubeVulnerabilitiesResponse, error)
	GetOpenShiftVulnerabilities(ctx context.Context, in *GetOpenShiftVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetOpenShiftVulnerabilitiesResponse, error)
}

type orchestratorScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorScanServiceClient(cc grpc.ClientConnInterface) OrchestratorScanServiceClient {
	return &orchestratorScanServiceClient{cc}
}

func (c *orchestratorScanServiceClient) GetKubeVulnerabilities(ctx context.Context, in *GetKubeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetKubeVulnerabilitiesResponse, error) {
	out := new(GetKubeVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.OrchestratorScanService/GetKubeVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorScanServiceClient) GetOpenShiftVulnerabilities(ctx context.Context, in *GetOpenShiftVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetOpenShiftVulnerabilitiesResponse, error) {
	out := new(GetOpenShiftVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.OrchestratorScanService/GetOpenShiftVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorScanServiceServer is the server API for OrchestratorScanService service.
type OrchestratorScanServiceServer interface {
	GetKubeVulnerabilities(context.Context, *GetKubeVulnerabilitiesRequest) (*GetKubeVulnerabilitiesResponse, error)
	GetOpenShiftVulnerabilities(context.Context, *GetOpenShiftVulnerabilitiesRequest) (*GetOpenShiftVulnerabilitiesResponse, error)
}

// UnimplementedOrchestratorScanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrchestratorScanServiceServer struct {
}

func (*UnimplementedOrchestratorScanServiceServer) GetKubeVulnerabilities(ctx context.Context, req *GetKubeVulnerabilitiesRequest) (*GetKubeVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeVulnerabilities not implemented")
}
func (*UnimplementedOrchestratorScanServiceServer) GetOpenShiftVulnerabilities(ctx context.Context, req *GetOpenShiftVulnerabilitiesRequest) (*GetOpenShiftVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenShiftVulnerabilities not implemented")
}

func RegisterOrchestratorScanServiceServer(s *grpc.Server, srv OrchestratorScanServiceServer) {
	s.RegisterService(&_OrchestratorScanService_serviceDesc, srv)
}

func _OrchestratorScanService_GetKubeVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorScanServiceServer).GetKubeVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.OrchestratorScanService/GetKubeVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorScanServiceServer).GetKubeVulnerabilities(ctx, req.(*GetKubeVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorScanService_GetOpenShiftVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenShiftVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorScanServiceServer).GetOpenShiftVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.OrchestratorScanService/GetOpenShiftVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorScanServiceServer).GetOpenShiftVulnerabilities(ctx, req.(*GetOpenShiftVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrchestratorScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.OrchestratorScanService",
	HandlerType: (*OrchestratorScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKubeVulnerabilities",
			Handler:    _OrchestratorScanService_GetKubeVulnerabilities_Handler,
		},
		{
			MethodName: "GetOpenShiftVulnerabilities",
			Handler:    _OrchestratorScanService_GetOpenShiftVulnerabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/orchestrator_scan_service.proto",
}

func (m *GetKubeVulnerabilitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeVulnerabilitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetKubeVulnerabilitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KubernetesVersion) > 0 {
		i -= len(m.KubernetesVersion)
		copy(dAtA[i:], m.KubernetesVersion)
		i = encodeVarintOrchestratorScanService(dAtA, i, uint64(len(m.KubernetesVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetKubeVulnerabilitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeVulnerabilitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetKubeVulnerabilitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScannerVersion) > 0 {
		i -= len(m.ScannerVersion)
		copy(dAtA[i:], m.ScannerVersion)
		i = encodeVarintOrchestratorScanService(dAtA, i, uint64(len(m.ScannerVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenericVulnerabilities) > 0 {
		for iNdEx := len(m.GenericVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GenericVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SchedulerVulnerabilities) > 0 {
		for iNdEx := len(m.SchedulerVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchedulerVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ControllerManagerVulnerabilities) > 0 {
		for iNdEx := len(m.ControllerManagerVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ControllerManagerVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ApiserverVulnerabilities) > 0 {
		for iNdEx := len(m.ApiserverVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiserverVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AggregatorVulnerabilities) > 0 {
		for iNdEx := len(m.AggregatorVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregatorVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenShiftVulnerabilitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenShiftVulnerabilitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOpenShiftVulnerabilitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenShiftVersion) > 0 {
		i -= len(m.OpenShiftVersion)
		copy(dAtA[i:], m.OpenShiftVersion)
		i = encodeVarintOrchestratorScanService(dAtA, i, uint64(len(m.OpenShiftVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenShiftVulnerabilitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenShiftVulnerabilitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOpenShiftVulnerabilitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScannerVersion) > 0 {
		i -= len(m.ScannerVersion)
		copy(dAtA[i:], m.ScannerVersion)
		i = encodeVarintOrchestratorScanService(dAtA, i, uint64(len(m.ScannerVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vulnerabilities) > 0 {
		for iNdEx := len(m.Vulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrchestratorScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrchestratorScanService(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrchestratorScanService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetKubeVulnerabilitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KubernetesVersion)
	if l > 0 {
		n += 1 + l + sovOrchestratorScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetKubeVulnerabilitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatorVulnerabilities) > 0 {
		for _, e := range m.AggregatorVulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	if len(m.ApiserverVulnerabilities) > 0 {
		for _, e := range m.ApiserverVulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	if len(m.ControllerManagerVulnerabilities) > 0 {
		for _, e := range m.ControllerManagerVulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	if len(m.SchedulerVulnerabilities) > 0 {
		for _, e := range m.SchedulerVulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	if len(m.GenericVulnerabilities) > 0 {
		for _, e := range m.GenericVulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	l = len(m.ScannerVersion)
	if l > 0 {
		n += 1 + l + sovOrchestratorScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOpenShiftVulnerabilitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OpenShiftVersion)
	if l > 0 {
		n += 1 + l + sovOrchestratorScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOpenShiftVulnerabilitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vulnerabilities) > 0 {
		for _, e := range m.Vulnerabilities {
			l = e.Size()
			n += 1 + l + sovOrchestratorScanService(uint64(l))
		}
	}
	l = len(m.ScannerVersion)
	if l > 0 {
		n += 1 + l + sovOrchestratorScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrchestratorScanService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrchestratorScanService(x uint64) (n int) {
	return sovOrchestratorScanService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetKubeVulnerabilitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestratorScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestratorScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKubeVulnerabilitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestratorScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorVulnerabilities = append(m.AggregatorVulnerabilities, &Vulnerability{})
			if err := m.AggregatorVulnerabilities[len(m.AggregatorVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiserverVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiserverVulnerabilities = append(m.ApiserverVulnerabilities, &Vulnerability{})
			if err := m.ApiserverVulnerabilities[len(m.ApiserverVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerManagerVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerManagerVulnerabilities = append(m.ControllerManagerVulnerabilities, &Vulnerability{})
			if err := m.ControllerManagerVulnerabilities[len(m.ControllerManagerVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerVulnerabilities = append(m.SchedulerVulnerabilities, &Vulnerability{})
			if err := m.SchedulerVulnerabilities[len(m.SchedulerVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericVulnerabilities = append(m.GenericVulnerabilities, &Vulnerability{})
			if err := m.GenericVulnerabilities[len(m.GenericVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScannerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestratorScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenShiftVulnerabilitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestratorScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenShiftVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenShiftVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestratorScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenShiftVulnerabilitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrchestratorScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerabilities = append(m.Vulnerabilities, &Vulnerability{})
			if err := m.Vulnerabilities[len(m.Vulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScannerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrchestratorScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrchestratorScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrchestratorScanService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrchestratorScanService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrchestratorScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrchestratorScanService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrchestratorScanService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrchestratorScanService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrchestratorScanService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrchestratorScanService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrchestratorScanService = fmt.Errorf("proto: unexpected end of group")
)
