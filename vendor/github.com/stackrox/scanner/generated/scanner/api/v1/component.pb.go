// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scanner/api/v1/component.proto

package scannerV1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SourceType int32

const (
	SourceType_UNSET_SOURCE_TYPE SourceType = 0
	SourceType_JAVA              SourceType = 1
	SourceType_PYTHON            SourceType = 2
	SourceType_NPM               SourceType = 3
	SourceType_GEM               SourceType = 4
	SourceType_DOTNETCORERUNTIME SourceType = 5
)

var SourceType_name = map[int32]string{
	0: "UNSET_SOURCE_TYPE",
	1: "JAVA",
	2: "PYTHON",
	3: "NPM",
	4: "GEM",
	5: "DOTNETCORERUNTIME",
}

var SourceType_value = map[string]int32{
	"UNSET_SOURCE_TYPE": 0,
	"JAVA":              1,
	"PYTHON":            2,
	"NPM":               3,
	"GEM":               4,
	"DOTNETCORERUNTIME": 5,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}

func (SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{0}
}

type Components struct {
	Namespace            string               `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	OsComponents         []*OSComponent       `protobuf:"bytes,1,rep,name=os_components,json=osComponents,proto3" json:"os_components,omitempty"`
	RhelComponents       []*RHELComponent     `protobuf:"bytes,2,rep,name=rhel_components,json=rhelComponents,proto3" json:"rhel_components,omitempty"`
	LanguageComponents   []*LanguageComponent `protobuf:"bytes,3,rep,name=language_components,json=languageComponents,proto3" json:"language_components,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Components) Reset()         { *m = Components{} }
func (m *Components) String() string { return proto.CompactTextString(m) }
func (*Components) ProtoMessage()    {}
func (*Components) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{0}
}
func (m *Components) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Components) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Components.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Components) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Components.Merge(m, src)
}
func (m *Components) XXX_Size() int {
	return m.Size()
}
func (m *Components) XXX_DiscardUnknown() {
	xxx_messageInfo_Components.DiscardUnknown(m)
}

var xxx_messageInfo_Components proto.InternalMessageInfo

func (m *Components) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Components) GetOsComponents() []*OSComponent {
	if m != nil {
		return m.OsComponents
	}
	return nil
}

func (m *Components) GetRhelComponents() []*RHELComponent {
	if m != nil {
		return m.RhelComponents
	}
	return nil
}

func (m *Components) GetLanguageComponents() []*LanguageComponent {
	if m != nil {
		return m.LanguageComponents
	}
	return nil
}

func (m *Components) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Components) Clone() *Components {
	if m == nil {
		return nil
	}
	cloned := new(Components)
	*cloned = *m

	if m.OsComponents != nil {
		cloned.OsComponents = make([]*OSComponent, len(m.OsComponents))
		for idx, v := range m.OsComponents {
			cloned.OsComponents[idx] = v.Clone()
		}
	}
	if m.RhelComponents != nil {
		cloned.RhelComponents = make([]*RHELComponent, len(m.RhelComponents))
		for idx, v := range m.RhelComponents {
			cloned.RhelComponents[idx] = v.Clone()
		}
	}
	if m.LanguageComponents != nil {
		cloned.LanguageComponents = make([]*LanguageComponent, len(m.LanguageComponents))
		for idx, v := range m.LanguageComponents {
			cloned.LanguageComponents[idx] = v.Clone()
		}
	}
	return cloned
}

type OSComponent struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version              string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	AddedBy              string        `protobuf:"bytes,4,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
	Executables          []*Executable `protobuf:"bytes,5,rep,name=executables,proto3" json:"executables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OSComponent) Reset()         { *m = OSComponent{} }
func (m *OSComponent) String() string { return proto.CompactTextString(m) }
func (*OSComponent) ProtoMessage()    {}
func (*OSComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{1}
}
func (m *OSComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSComponent.Merge(m, src)
}
func (m *OSComponent) XXX_Size() int {
	return m.Size()
}
func (m *OSComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_OSComponent.DiscardUnknown(m)
}

var xxx_messageInfo_OSComponent proto.InternalMessageInfo

func (m *OSComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OSComponent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *OSComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *OSComponent) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *OSComponent) GetExecutables() []*Executable {
	if m != nil {
		return m.Executables
	}
	return nil
}

func (m *OSComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *OSComponent) Clone() *OSComponent {
	if m == nil {
		return nil
	}
	cloned := new(OSComponent)
	*cloned = *m

	if m.Executables != nil {
		cloned.Executables = make([]*Executable, len(m.Executables))
		for idx, v := range m.Executables {
			cloned.Executables[idx] = v.Clone()
		}
	}
	return cloned
}

type RHELComponent struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string        `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version              string        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Arch                 string        `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Module               string        `protobuf:"bytes,6,opt,name=module,proto3" json:"module,omitempty"`
	Cpes                 []string      `protobuf:"bytes,7,rep,name=cpes,proto3" json:"cpes,omitempty"`
	AddedBy              string        `protobuf:"bytes,8,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
	Executables          []*Executable `protobuf:"bytes,9,rep,name=executables,proto3" json:"executables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RHELComponent) Reset()         { *m = RHELComponent{} }
func (m *RHELComponent) String() string { return proto.CompactTextString(m) }
func (*RHELComponent) ProtoMessage()    {}
func (*RHELComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{2}
}
func (m *RHELComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RHELComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RHELComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RHELComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RHELComponent.Merge(m, src)
}
func (m *RHELComponent) XXX_Size() int {
	return m.Size()
}
func (m *RHELComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_RHELComponent.DiscardUnknown(m)
}

var xxx_messageInfo_RHELComponent proto.InternalMessageInfo

func (m *RHELComponent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RHELComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RHELComponent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RHELComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RHELComponent) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *RHELComponent) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *RHELComponent) GetCpes() []string {
	if m != nil {
		return m.Cpes
	}
	return nil
}

func (m *RHELComponent) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *RHELComponent) GetExecutables() []*Executable {
	if m != nil {
		return m.Executables
	}
	return nil
}

func (m *RHELComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RHELComponent) Clone() *RHELComponent {
	if m == nil {
		return nil
	}
	cloned := new(RHELComponent)
	*cloned = *m

	if m.Cpes != nil {
		cloned.Cpes = make([]string, len(m.Cpes))
		copy(cloned.Cpes, m.Cpes)
	}
	if m.Executables != nil {
		cloned.Executables = make([]*Executable, len(m.Executables))
		for idx, v := range m.Executables {
			cloned.Executables[idx] = v.Clone()
		}
	}
	return cloned
}

type LanguageComponent struct {
	Type     SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=scannerV1.SourceType" json:"type,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Location string     `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are valid to be assigned to Language:
	//	*LanguageComponent_Java
	//	*LanguageComponent_Python
	Language             isLanguageComponent_Language `protobuf_oneof:"language"`
	AddedBy              string                       `protobuf:"bytes,7,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LanguageComponent) Reset()         { *m = LanguageComponent{} }
func (m *LanguageComponent) String() string { return proto.CompactTextString(m) }
func (*LanguageComponent) ProtoMessage()    {}
func (*LanguageComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{3}
}
func (m *LanguageComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LanguageComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LanguageComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LanguageComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageComponent.Merge(m, src)
}
func (m *LanguageComponent) XXX_Size() int {
	return m.Size()
}
func (m *LanguageComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageComponent.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageComponent proto.InternalMessageInfo

type isLanguageComponent_Language interface {
	isLanguageComponent_Language()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isLanguageComponent_Language
}

type LanguageComponent_Java struct {
	Java *JavaComponent `protobuf:"bytes,5,opt,name=java,proto3,oneof" json:"java,omitempty"`
}
type LanguageComponent_Python struct {
	Python *PythonComponent `protobuf:"bytes,6,opt,name=python,proto3,oneof" json:"python,omitempty"`
}

func (*LanguageComponent_Java) isLanguageComponent_Language() {}
func (m *LanguageComponent_Java) Clone() isLanguageComponent_Language {
	if m == nil {
		return nil
	}
	cloned := new(LanguageComponent_Java)
	*cloned = *m

	cloned.Java = m.Java.Clone()
	return cloned
}
func (*LanguageComponent_Python) isLanguageComponent_Language() {}
func (m *LanguageComponent_Python) Clone() isLanguageComponent_Language {
	if m == nil {
		return nil
	}
	cloned := new(LanguageComponent_Python)
	*cloned = *m

	cloned.Python = m.Python.Clone()
	return cloned
}

func (m *LanguageComponent) GetLanguage() isLanguageComponent_Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *LanguageComponent) GetType() SourceType {
	if m != nil {
		return m.Type
	}
	return SourceType_UNSET_SOURCE_TYPE
}

func (m *LanguageComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LanguageComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LanguageComponent) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *LanguageComponent) GetJava() *JavaComponent {
	if x, ok := m.GetLanguage().(*LanguageComponent_Java); ok {
		return x.Java
	}
	return nil
}

func (m *LanguageComponent) GetPython() *PythonComponent {
	if x, ok := m.GetLanguage().(*LanguageComponent_Python); ok {
		return x.Python
	}
	return nil
}

func (m *LanguageComponent) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LanguageComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LanguageComponent_Java)(nil),
		(*LanguageComponent_Python)(nil),
	}
}

func (m *LanguageComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LanguageComponent) Clone() *LanguageComponent {
	if m == nil {
		return nil
	}
	cloned := new(LanguageComponent)
	*cloned = *m

	if m.Language != nil {
		cloned.Language = m.Language.Clone()
	}
	return cloned
}

type JavaComponent struct {
	ImplementationVersion string   `protobuf:"bytes,1,opt,name=implementation_version,json=implementationVersion,proto3" json:"implementation_version,omitempty"`
	MavenVersion          string   `protobuf:"bytes,2,opt,name=maven_version,json=mavenVersion,proto3" json:"maven_version,omitempty"`
	Origins               []string `protobuf:"bytes,3,rep,name=origins,proto3" json:"origins,omitempty"`
	SpecificationVersion  string   `protobuf:"bytes,4,opt,name=specification_version,json=specificationVersion,proto3" json:"specification_version,omitempty"`
	BundleName            string   `protobuf:"bytes,5,opt,name=bundle_name,json=bundleName,proto3" json:"bundle_name,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *JavaComponent) Reset()         { *m = JavaComponent{} }
func (m *JavaComponent) String() string { return proto.CompactTextString(m) }
func (*JavaComponent) ProtoMessage()    {}
func (*JavaComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{4}
}
func (m *JavaComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JavaComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JavaComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JavaComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JavaComponent.Merge(m, src)
}
func (m *JavaComponent) XXX_Size() int {
	return m.Size()
}
func (m *JavaComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_JavaComponent.DiscardUnknown(m)
}

var xxx_messageInfo_JavaComponent proto.InternalMessageInfo

func (m *JavaComponent) GetImplementationVersion() string {
	if m != nil {
		return m.ImplementationVersion
	}
	return ""
}

func (m *JavaComponent) GetMavenVersion() string {
	if m != nil {
		return m.MavenVersion
	}
	return ""
}

func (m *JavaComponent) GetOrigins() []string {
	if m != nil {
		return m.Origins
	}
	return nil
}

func (m *JavaComponent) GetSpecificationVersion() string {
	if m != nil {
		return m.SpecificationVersion
	}
	return ""
}

func (m *JavaComponent) GetBundleName() string {
	if m != nil {
		return m.BundleName
	}
	return ""
}

func (m *JavaComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *JavaComponent) Clone() *JavaComponent {
	if m == nil {
		return nil
	}
	cloned := new(JavaComponent)
	*cloned = *m

	if m.Origins != nil {
		cloned.Origins = make([]string, len(m.Origins))
		copy(cloned.Origins, m.Origins)
	}
	return cloned
}

type PythonComponent struct {
	Homepage             string   `protobuf:"bytes,1,opt,name=homepage,proto3" json:"homepage,omitempty"`
	AuthorEmail          string   `protobuf:"bytes,2,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	DownloadUrl          string   `protobuf:"bytes,3,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	Summary              string   `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PythonComponent) Reset()         { *m = PythonComponent{} }
func (m *PythonComponent) String() string { return proto.CompactTextString(m) }
func (*PythonComponent) ProtoMessage()    {}
func (*PythonComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8d7afca32cde40, []int{5}
}
func (m *PythonComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PythonComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PythonComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PythonComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PythonComponent.Merge(m, src)
}
func (m *PythonComponent) XXX_Size() int {
	return m.Size()
}
func (m *PythonComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_PythonComponent.DiscardUnknown(m)
}

var xxx_messageInfo_PythonComponent proto.InternalMessageInfo

func (m *PythonComponent) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *PythonComponent) GetAuthorEmail() string {
	if m != nil {
		return m.AuthorEmail
	}
	return ""
}

func (m *PythonComponent) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *PythonComponent) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *PythonComponent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PythonComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PythonComponent) Clone() *PythonComponent {
	if m == nil {
		return nil
	}
	cloned := new(PythonComponent)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("scannerV1.SourceType", SourceType_name, SourceType_value)
	proto.RegisterType((*Components)(nil), "scannerV1.Components")
	proto.RegisterType((*OSComponent)(nil), "scannerV1.OSComponent")
	proto.RegisterType((*RHELComponent)(nil), "scannerV1.RHELComponent")
	proto.RegisterType((*LanguageComponent)(nil), "scannerV1.LanguageComponent")
	proto.RegisterType((*JavaComponent)(nil), "scannerV1.JavaComponent")
	proto.RegisterType((*PythonComponent)(nil), "scannerV1.PythonComponent")
}

func init() { proto.RegisterFile("scanner/api/v1/component.proto", fileDescriptor_9d8d7afca32cde40) }

var fileDescriptor_9d8d7afca32cde40 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x45, 0xea, 0x6f, 0x68, 0xd9, 0xf2, 0xb6, 0x32, 0x58, 0xc3, 0x50, 0x55, 0xf5, 0xe2,
	0xf6, 0x20, 0xc3, 0x76, 0x8b, 0x1e, 0x8a, 0x1c, 0x6c, 0x87, 0x88, 0x63, 0x58, 0x3f, 0xa0, 0x24,
	0x03, 0xce, 0x85, 0x58, 0x91, 0x1b, 0x89, 0x09, 0xc9, 0x25, 0xf8, 0xa3, 0x58, 0x0f, 0x12, 0x20,
	0x2f, 0x11, 0xe4, 0x35, 0x72, 0xcc, 0x3d, 0x97, 0xc0, 0x79, 0x8a, 0x9c, 0x12, 0x70, 0xf9, 0xaf,
	0xc4, 0x46, 0x6e, 0x3b, 0x33, 0xdf, 0x7c, 0x3b, 0xf3, 0xcd, 0x2c, 0x09, 0x6d, 0x4f, 0xc3, 0xb6,
	0x4d, 0xdc, 0x43, 0xec, 0x18, 0x87, 0xcb, 0xa3, 0x43, 0x8d, 0x5a, 0x0e, 0xb5, 0x89, 0xed, 0xf7,
	0x1c, 0x97, 0xfa, 0x14, 0xd5, 0xe3, 0xf8, 0xf5, 0xd1, 0x5e, 0x77, 0x0d, 0xba, 0x0c, 0x4c, 0x9b,
	0xb8, 0x78, 0x66, 0x98, 0x86, 0xbf, 0x8a, 0xe0, 0xdd, 0x2f, 0x1c, 0xc0, 0x79, 0x42, 0xe1, 0xa1,
	0x7d, 0xa8, 0xdb, 0xd8, 0x22, 0x9e, 0x83, 0x35, 0x22, 0x09, 0x1d, 0xee, 0xa0, 0xae, 0x64, 0x0e,
	0xf4, 0x3f, 0x34, 0xa8, 0xa7, 0xa6, 0x37, 0x7a, 0x12, 0xd7, 0xe1, 0x0f, 0xc4, 0xe3, 0xdd, 0x5e,
	0x7a, 0x67, 0x6f, 0x38, 0x4e, 0xd9, 0x94, 0x4d, 0xea, 0xe5, 0xa8, 0x4f, 0x61, 0xdb, 0x5d, 0x10,
	0x33, 0x9f, 0x5e, 0x62, 0xe9, 0x52, 0x2e, 0x5d, 0xb9, 0x90, 0xaf, 0x32, 0x82, 0xad, 0x30, 0x21,
	0x47, 0xd1, 0x87, 0x5f, 0x4c, 0x6c, 0xcf, 0x03, 0x3c, 0x27, 0x79, 0x1a, 0x9e, 0xd1, 0xec, 0xe7,
	0x68, 0xae, 0x62, 0x54, 0x46, 0x85, 0xcc, 0x75, 0x97, 0xd7, 0x7d, 0xcb, 0x81, 0x98, 0xab, 0x17,
	0x21, 0x10, 0xc2, 0x5e, 0x25, 0x8e, 0xf5, 0xcd, 0xce, 0x45, 0x41, 0x4a, 0xeb, 0x82, 0x48, 0x50,
	0x5d, 0x12, 0xd7, 0x33, 0xa8, 0x2d, 0xf1, 0x2c, 0x96, 0x98, 0xe8, 0x37, 0xa8, 0x61, 0x5d, 0x27,
	0xba, 0x3a, 0x5b, 0xc5, 0x3a, 0x56, 0x99, 0x7d, 0xb6, 0x42, 0xff, 0x81, 0x48, 0x6e, 0x89, 0x16,
	0xf8, 0x78, 0x66, 0x12, 0x4f, 0x2a, 0xb3, 0xea, 0x5b, 0xb9, 0xea, 0xe5, 0x34, 0xaa, 0xe4, 0x91,
	0xdd, 0xaf, 0x1c, 0x34, 0x0a, 0x02, 0xa1, 0x2d, 0x28, 0x19, 0x3a, 0xab, 0x97, 0x57, 0x4a, 0x86,
	0x9e, 0x76, 0x50, 0xba, 0xaf, 0x03, 0xfe, 0x81, 0x0e, 0x84, 0x62, 0x07, 0x08, 0x04, 0xec, 0x6a,
	0x0b, 0xa9, 0x1c, 0x71, 0x85, 0x67, 0xb4, 0x0b, 0x15, 0x8b, 0xea, 0x81, 0x49, 0xa4, 0x0a, 0xf3,
	0xc6, 0x56, 0x88, 0xd5, 0x1c, 0xe2, 0x49, 0xd5, 0x0e, 0x1f, 0x62, 0xc3, 0x73, 0x41, 0x81, 0xda,
	0x83, 0x0a, 0xd4, 0x7f, 0x5a, 0x81, 0xd7, 0x25, 0xd8, 0xf9, 0x6e, 0xb6, 0xe8, 0x2f, 0x10, 0xfc,
	0x95, 0x13, 0xcd, 0x6d, 0xab, 0xc0, 0x33, 0xa6, 0x81, 0xab, 0x91, 0xc9, 0xca, 0x21, 0x0a, 0x83,
	0xfc, 0x50, 0xa0, 0xfb, 0x87, 0xb8, 0x07, 0x35, 0x93, 0x6a, 0xd8, 0xcf, 0xd4, 0x49, 0x6d, 0xd4,
	0x03, 0xe1, 0x05, 0x5e, 0x62, 0x26, 0x4f, 0x71, 0x87, 0x2f, 0xf1, 0x12, 0xa7, 0xc5, 0x5d, 0x6c,
	0x28, 0x0c, 0x87, 0xfe, 0x81, 0x8a, 0xb3, 0xf2, 0x17, 0xd4, 0x66, 0xd2, 0x89, 0xc7, 0x7b, 0xb9,
	0x8c, 0x11, 0x0b, 0xe4, 0x73, 0x62, 0x6c, 0x41, 0xc4, 0x6a, 0x41, 0xc4, 0x33, 0x80, 0x5a, 0xb2,
	0xd3, 0xdd, 0x8f, 0x1c, 0x34, 0x0a, 0xd7, 0xa2, 0x7f, 0x61, 0xd7, 0xb0, 0x1c, 0x93, 0x58, 0xc4,
	0xf6, 0x59, 0xc1, 0x6a, 0xd2, 0x63, 0xb4, 0xdd, 0xad, 0x62, 0xf4, 0x3a, 0xee, 0xf8, 0x4f, 0x68,
	0x58, 0x78, 0x49, 0x32, 0x74, 0x24, 0xd4, 0x26, 0x73, 0x26, 0x20, 0x09, 0xaa, 0xd4, 0x35, 0xe6,
	0x86, 0x1d, 0x3d, 0xbd, 0xba, 0x92, 0x98, 0xe8, 0x04, 0x5a, 0x9e, 0x43, 0x34, 0xe3, 0xb9, 0xa1,
	0x15, 0x2f, 0x8d, 0xd4, 0xfb, 0xb5, 0x10, 0x4c, 0xe8, 0x7e, 0x07, 0x71, 0x16, 0xd8, 0xba, 0x49,
	0x54, 0x36, 0x9a, 0x68, 0xdf, 0x20, 0x72, 0x0d, 0xb0, 0x45, 0xba, 0xef, 0x38, 0xd8, 0x5e, 0x93,
	0x28, 0x1c, 0xcd, 0x82, 0x5a, 0xc4, 0xc1, 0xf3, 0xe4, 0xbd, 0xa6, 0x36, 0xfa, 0x03, 0x36, 0x71,
	0xe0, 0x2f, 0xa8, 0xab, 0x12, 0x0b, 0x1b, 0x66, 0xdc, 0x83, 0x18, 0xf9, 0xe4, 0xd0, 0x15, 0x42,
	0x74, 0xfa, 0xca, 0x36, 0x29, 0xd6, 0xd5, 0xc0, 0x35, 0xe3, 0xc1, 0x8b, 0x89, 0x6f, 0xea, 0x9a,
	0x61, 0x97, 0x5e, 0x60, 0x59, 0xd8, 0x4d, 0x1f, 0x70, 0x6c, 0xa2, 0x0e, 0x88, 0x3a, 0xf1, 0x34,
	0xd7, 0x70, 0xd8, 0x66, 0x94, 0xe3, 0xdc, 0xcc, 0xf5, 0xf7, 0x0c, 0x20, 0x5b, 0x3d, 0xd4, 0x82,
	0x9d, 0xe9, 0x60, 0x2c, 0x4f, 0xd4, 0xf1, 0x70, 0xaa, 0x9c, 0xcb, 0xea, 0xe4, 0x66, 0x24, 0x37,
	0x37, 0x50, 0x0d, 0x84, 0xcb, 0xd3, 0xeb, 0xd3, 0x26, 0x87, 0x00, 0x2a, 0xa3, 0x9b, 0xc9, 0xc5,
	0x70, 0xd0, 0x2c, 0xa1, 0x2a, 0xf0, 0x83, 0x51, 0xbf, 0xc9, 0x87, 0x87, 0x27, 0x72, 0xbf, 0x29,
	0x84, 0xe9, 0x8f, 0x87, 0x93, 0x81, 0x3c, 0x39, 0x1f, 0x2a, 0xb2, 0x32, 0x1d, 0x4c, 0x9e, 0xf6,
	0xe5, 0x66, 0xf9, 0xec, 0xd1, 0xfb, 0xbb, 0x36, 0xf7, 0xe1, 0xae, 0xcd, 0x7d, 0xba, 0x6b, 0x73,
	0x6f, 0x3e, 0xb7, 0x37, 0xa0, 0x63, 0xd0, 0x9e, 0xe7, 0x63, 0xed, 0xa5, 0x4b, 0x6f, 0xa3, 0xcf,
	0x7b, 0x0f, 0x3b, 0x46, 0xb2, 0x67, 0xbd, 0xe5, 0xd1, 0xb3, 0xec, 0xe7, 0x30, 0xab, 0x30, 0xc0,
	0xc9, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x8a, 0x52, 0x4f, 0x50, 0x06, 0x00, 0x00,
}

func (m *Components) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Components) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Components) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LanguageComponents) > 0 {
		for iNdEx := len(m.LanguageComponents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LanguageComponents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RhelComponents) > 0 {
		for iNdEx := len(m.RhelComponents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RhelComponents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OsComponents) > 0 {
		for iNdEx := len(m.OsComponents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OsComponents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Executables) > 0 {
		for iNdEx := len(m.Executables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RHELComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RHELComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RHELComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Executables) > 0 {
		for iNdEx := len(m.Executables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cpes) > 0 {
		for iNdEx := len(m.Cpes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cpes[iNdEx])
			copy(dAtA[i:], m.Cpes[iNdEx])
			i = encodeVarintComponent(dAtA, i, uint64(len(m.Cpes[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintComponent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LanguageComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LanguageComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Language != nil {
		{
			size := m.Language.Size()
			i -= size
			if _, err := m.Language.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintComponent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LanguageComponent_Java) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageComponent_Java) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Java != nil {
		{
			size, err := m.Java.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *LanguageComponent_Python) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageComponent_Python) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Python != nil {
		{
			size, err := m.Python.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComponent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *JavaComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavaComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JavaComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BundleName) > 0 {
		i -= len(m.BundleName)
		copy(dAtA[i:], m.BundleName)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.BundleName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SpecificationVersion) > 0 {
		i -= len(m.SpecificationVersion)
		copy(dAtA[i:], m.SpecificationVersion)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.SpecificationVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Origins) > 0 {
		for iNdEx := len(m.Origins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Origins[iNdEx])
			copy(dAtA[i:], m.Origins[iNdEx])
			i = encodeVarintComponent(dAtA, i, uint64(len(m.Origins[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MavenVersion) > 0 {
		i -= len(m.MavenVersion)
		copy(dAtA[i:], m.MavenVersion)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.MavenVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImplementationVersion) > 0 {
		i -= len(m.ImplementationVersion)
		copy(dAtA[i:], m.ImplementationVersion)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ImplementationVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PythonComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PythonComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PythonComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthorEmail) > 0 {
		i -= len(m.AuthorEmail)
		copy(dAtA[i:], m.AuthorEmail)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AuthorEmail)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Homepage) > 0 {
		i -= len(m.Homepage)
		copy(dAtA[i:], m.Homepage)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Homepage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Components) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OsComponents) > 0 {
		for _, e := range m.OsComponents {
			l = e.Size()
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	if len(m.RhelComponents) > 0 {
		for _, e := range m.RhelComponents {
			l = e.Size()
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	if len(m.LanguageComponents) > 0 {
		for _, e := range m.LanguageComponents {
			l = e.Size()
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OSComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if len(m.Executables) > 0 {
		for _, e := range m.Executables {
			l = e.Size()
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RHELComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovComponent(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if len(m.Cpes) > 0 {
		for _, s := range m.Cpes {
			l = len(s)
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if len(m.Executables) > 0 {
		for _, e := range m.Executables {
			l = e.Size()
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LanguageComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovComponent(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.Language != nil {
		n += m.Language.Size()
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LanguageComponent_Java) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Java != nil {
		l = m.Java.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}
func (m *LanguageComponent_Python) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Python != nil {
		l = m.Python.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}
func (m *JavaComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImplementationVersion)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.MavenVersion)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if len(m.Origins) > 0 {
		for _, s := range m.Origins {
			l = len(s)
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	l = len(m.SpecificationVersion)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.BundleName)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PythonComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Homepage)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.AuthorEmail)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponent(x uint64) (n int) {
	return sovComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Components) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Components: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Components: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsComponents = append(m.OsComponents, &OSComponent{})
			if err := m.OsComponents[len(m.OsComponents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhelComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RhelComponents = append(m.RhelComponents, &RHELComponent{})
			if err := m.RhelComponents[len(m.RhelComponents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguageComponents = append(m.LanguageComponents, &LanguageComponent{})
			if err := m.LanguageComponents[len(m.LanguageComponents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executables = append(m.Executables, &Executable{})
			if err := m.Executables[len(m.Executables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RHELComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RHELComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RHELComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpes = append(m.Cpes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executables = append(m.Executables, &Executable{})
			if err := m.Executables[len(m.Executables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LanguageComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LanguageComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LanguageComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Java", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavaComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Language = &LanguageComponent_Java{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Python", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PythonComponent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Language = &LanguageComponent_Python{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavaComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavaComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavaComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplementationVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImplementationVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MavenVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MavenVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origins = append(m.Origins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PythonComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PythonComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PythonComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponent = fmt.Errorf("proto: unexpected end of group")
)
