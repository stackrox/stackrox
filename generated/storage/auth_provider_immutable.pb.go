// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableAuthProvider is an immutable interface for AuthProvider
type ImmutableAuthProvider interface {
	GetId() string
	GetName() string
	GetType() string
	GetUiEndpoint() string
	GetEnabled() bool
	// Config holds auth provider specific configuration. Each configuration options
	// are different based on the given auth provider type.
	// OIDC:
	// - "issuer": the OIDC issuer according to https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier.
	// - "client_id": the client ID according to https://www.rfc-editor.org/rfc/rfc6749.html#section-2.2.
	// - "client_secret": the client secret according to https://www.rfc-editor.org/rfc/rfc6749.html#section-2.3.1.
	// - "do_not_use_client_secret": set to "true" if you want to create a configuration with only
	// a client ID and no client secret.
	// - "mode": the OIDC callback mode, choosing from "fragment", "post", or "query".
	// - "disable_offline_access_scope": set to "true" if no offline tokens shall be issued.
	// - "extra_scopes": a space-delimited string of additional scopes to request in addition to "openid profile email"
	// according to https://www.rfc-editor.org/rfc/rfc6749.html#section-3.3.
	//
	// OpenShift Auth: supports no extra configuration options.
	//
	// User PKI:
	// - "keys": the trusted certificates PEM encoded.
	//
	// SAML:
	// - "sp_issuer": the service provider issuer according to https://datatracker.ietf.org/doc/html/rfc7522#section-3.
	// - "idp_metadata_url": the metadata URL according to https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf.
	// - "idp_issuer": the IdP issuer.
	// - "idp_cert_pem": the cert PEM encoded for the IdP endpoint.
	// - "idp_sso_url": the IdP SSO URL.
	// - "idp_nameid_format": the IdP name ID format.
	//
	// IAP:
	// - "audience": the audience to use.
	GetImmutableConfig() iter.Seq2[string, string]
	// The login URL will be provided by the backend, and may not be specified in a request.
	GetLoginUrl() string
	GetValidated() bool
	// UI endpoints which to allow in addition to `ui_endpoint`. I.e., if a login request
	// is coming from any of these, the auth request will use these for the callback URL,
	// not ui_endpoint.
	GetImmutableExtraUiEndpoints() iter.Seq[string]
	GetActive() bool
	GetImmutableRequiredAttributes() iter.Seq[ImmutableAuthProvider_RequiredAttribute]
	GetImmutableTraits() ImmutableTraits
	// Specifies claims from IdP token that will be copied to Rox token attributes.
	//
	// Each key in this map contains a path in IdP token we want to map. Path is separated by "." symbol.
	// For example, if IdP token payload looks like:
	//
	//
	// {
	//
	// "a": {
	//
	// "b" : "c",
	//
	// "d": true,
	//
	// "e": [ "val1", "val2", "val3" ],
	//
	// "f": [ true, false, false ],
	//
	// "g": 123.0,
	//
	// "h": [ 1, 2, 3]
	//
	// }
	//
	// }
	//
	//
	// then "a.b" would be a valid key and "a.z" is not.
	//
	// We support the following types of claims:
	// * string(path "a.b")
	// * bool(path "a.d")
	// * string array(path "a.e")
	// * bool array (path "a.f.")
	//
	// We do NOT support the following types of claims:
	// * complex claims(path "a")
	// * float/integer claims(path "a.g")
	// * float/integer array claims(path "a.h")
	//
	// Each value in this map contains a Rox token attribute name we want to add claim to.
	// If, for example, value is "groups", claim would be found in "external_user.Attributes.groups" in token.
	//
	// Note: we only support this feature for OIDC auth provider.
	GetImmutableClaimMappings() iter.Seq2[string, string]
	// Last updated indicates the last time the auth provider has been updated.
	//
	// In case there have been tokens issued by an auth provider _before_ this timestamp, they will be considered
	// invalid. Subsequently, all clients will have to re-issue their tokens (either by refreshing or by an additional
	// login attempt).
	GetImmutableLastUpdated() time.Time
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *AuthProvider
}

// GetImmutableConfig implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableConfig() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Config == nil {
			return
		}
		for k, v := range m.Config {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableExtraUiEndpoints implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableExtraUiEndpoints() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.ExtraUiEndpoints == nil {
			return
		}
		for _, v := range m.ExtraUiEndpoints {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableRequiredAttributes implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableRequiredAttributes() iter.Seq[ImmutableAuthProvider_RequiredAttribute] {
	return func(yield func(ImmutableAuthProvider_RequiredAttribute) bool) {
		if m == nil || m.RequiredAttributes == nil {
			return
		}
		for _, v := range m.RequiredAttributes {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableTraits implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableTraits() ImmutableTraits {
	return m.GetTraits()
}

// GetImmutableClaimMappings implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableClaimMappings() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.ClaimMappings == nil {
			return
		}
		for k, v := range m.ClaimMappings {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableLastUpdated implements ImmutableAuthProvider
func (m *AuthProvider) GetImmutableLastUpdated() time.Time {
	if m == nil || m.LastUpdated == nil {
		return time.Time{}
	}
	return m.LastUpdated.AsTime()
}

// Verify that AuthProvider implements ImmutableAuthProvider
var _ ImmutableAuthProvider = (*AuthProvider)(nil)

// ImmutableAuthProvider_RequiredAttribute is an immutable interface for AuthProvider_RequiredAttribute
type ImmutableAuthProvider_RequiredAttribute interface {
	GetAttributeKey() string
	GetAttributeValue() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *AuthProvider_RequiredAttribute
}

// Verify that AuthProvider_RequiredAttribute implements ImmutableAuthProvider_RequiredAttribute
var _ ImmutableAuthProvider_RequiredAttribute = (*AuthProvider_RequiredAttribute)(nil)
