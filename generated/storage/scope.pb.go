// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/scope.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scope struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Cluster       *string                `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty" crYaml:",omitempty"`     // @gotags: crYaml:",omitempty"`
	Namespace     *string                `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"`
	Label         *Scope_Label           `protobuf:"bytes,3,opt,name=label" json:"label,omitempty" crYaml:",omitempty"`         // @gotags: crYaml:",omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope) Reset() {
	*x = Scope{}
	mi := &file_storage_scope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_storage_scope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Scope) GetCluster() string {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return ""
}

func (x *Scope) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *Scope) GetLabel() *Scope_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Scope) SetCluster(v string) {
	x.Cluster = &v
}

func (x *Scope) SetNamespace(v string) {
	x.Namespace = &v
}

func (x *Scope) SetLabel(v *Scope_Label) {
	x.Label = v
}

func (x *Scope) HasCluster() bool {
	if x == nil {
		return false
	}
	return x.Cluster != nil
}

func (x *Scope) HasNamespace() bool {
	if x == nil {
		return false
	}
	return x.Namespace != nil
}

func (x *Scope) HasLabel() bool {
	if x == nil {
		return false
	}
	return x.Label != nil
}

func (x *Scope) ClearCluster() {
	x.Cluster = nil
}

func (x *Scope) ClearNamespace() {
	x.Namespace = nil
}

func (x *Scope) ClearLabel() {
	x.Label = nil
}

type Scope_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cluster   *string
	Namespace *string
	Label     *Scope_Label
}

func (b0 Scope_builder) Build() *Scope {
	m0 := &Scope{}
	b, x := &b0, m0
	_, _ = b, x
	x.Cluster = b.Cluster
	x.Namespace = b.Namespace
	x.Label = b.Label
	return m0
}

type Scope_Label struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_Label) Reset() {
	*x = Scope_Label{}
	mi := &file_storage_scope_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_Label) ProtoMessage() {}

func (x *Scope_Label) ProtoReflect() protoreflect.Message {
	mi := &file_storage_scope_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Scope_Label) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Scope_Label) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Scope_Label) SetKey(v string) {
	x.Key = &v
}

func (x *Scope_Label) SetValue(v string) {
	x.Value = &v
}

func (x *Scope_Label) HasKey() bool {
	if x == nil {
		return false
	}
	return x.Key != nil
}

func (x *Scope_Label) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *Scope_Label) ClearKey() {
	x.Key = nil
}

func (x *Scope_Label) ClearValue() {
	x.Value = nil
}

type Scope_Label_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key   *string
	Value *string
}

func (b0 Scope_Label_builder) Build() *Scope_Label {
	m0 := &Scope_Label{}
	b, x := &b0, m0
	_, _ = b, x
	x.Key = b.Key
	x.Value = b.Value
	return m0
}

var File_storage_scope_proto protoreflect.FileDescriptor

const file_storage_scope_proto_rawDesc = "" +
	"\n" +
	"\x13storage/scope.proto\x12\astorage\x1a!google/protobuf/go_features.proto\"\x9c\x01\n" +
	"\x05Scope\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12*\n" +
	"\x05label\x18\x03 \x01(\v2\x14.storage.Scope.LabelR\x05label\x1a/\n" +
	"\x05Label\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05valueB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_scope_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_scope_proto_goTypes = []any{
	(*Scope)(nil),       // 0: storage.Scope
	(*Scope_Label)(nil), // 1: storage.Scope.Label
}
var file_storage_scope_proto_depIdxs = []int32{
	1, // 0: storage.Scope.label:type_name -> storage.Scope.Label
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_storage_scope_proto_init() }
func file_storage_scope_proto_init() {
	if File_storage_scope_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_scope_proto_rawDesc), len(file_storage_scope_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_scope_proto_goTypes,
		DependencyIndexes: file_storage_scope_proto_depIdxs,
		MessageInfos:      file_storage_scope_proto_msgTypes,
	}.Build()
	File_storage_scope_proto = out.File
	file_storage_scope_proto_goTypes = nil
	file_storage_scope_proto_depIdxs = nil
}
