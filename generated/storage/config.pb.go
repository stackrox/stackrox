// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/config.proto

package storage

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BannerConfig_Size int32

const (
	BannerConfig_UNSET  BannerConfig_Size = 0
	BannerConfig_SMALL  BannerConfig_Size = 1
	BannerConfig_MEDIUM BannerConfig_Size = 2
	BannerConfig_LARGE  BannerConfig_Size = 3
)

var BannerConfig_Size_name = map[int32]string{
	0: "UNSET",
	1: "SMALL",
	2: "MEDIUM",
	3: "LARGE",
}

var BannerConfig_Size_value = map[string]int32{
	"UNSET":  0,
	"SMALL":  1,
	"MEDIUM": 2,
	"LARGE":  3,
}

func (x BannerConfig_Size) String() string {
	return proto.EnumName(BannerConfig_Size_name, int32(x))
}

func (BannerConfig_Size) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{1, 0}
}

type LoginNotice struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginNotice) Reset()         { *m = LoginNotice{} }
func (m *LoginNotice) String() string { return proto.CompactTextString(m) }
func (*LoginNotice) ProtoMessage()    {}
func (*LoginNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{0}
}
func (m *LoginNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginNotice.Merge(m, src)
}
func (m *LoginNotice) XXX_Size() int {
	return m.Size()
}
func (m *LoginNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginNotice.DiscardUnknown(m)
}

var xxx_messageInfo_LoginNotice proto.InternalMessageInfo

func (m *LoginNotice) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *LoginNotice) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *LoginNotice) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LoginNotice) Clone() *LoginNotice {
	if m == nil {
		return nil
	}
	cloned := new(LoginNotice)
	*cloned = *m

	return cloned
}

type BannerConfig struct {
	Enabled              bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Text                 string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Size_                BannerConfig_Size `protobuf:"varint,3,opt,name=size,proto3,enum=storage.BannerConfig_Size" json:"size,omitempty"`
	Color                string            `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	BackgroundColor      string            `protobuf:"bytes,5,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BannerConfig) Reset()         { *m = BannerConfig{} }
func (m *BannerConfig) String() string { return proto.CompactTextString(m) }
func (*BannerConfig) ProtoMessage()    {}
func (*BannerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{1}
}
func (m *BannerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerConfig.Merge(m, src)
}
func (m *BannerConfig) XXX_Size() int {
	return m.Size()
}
func (m *BannerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BannerConfig proto.InternalMessageInfo

func (m *BannerConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *BannerConfig) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *BannerConfig) GetSize_() BannerConfig_Size {
	if m != nil {
		return m.Size_
	}
	return BannerConfig_UNSET
}

func (m *BannerConfig) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *BannerConfig) GetBackgroundColor() string {
	if m != nil {
		return m.BackgroundColor
	}
	return ""
}

func (m *BannerConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BannerConfig) Clone() *BannerConfig {
	if m == nil {
		return nil
	}
	cloned := new(BannerConfig)
	*cloned = *m

	return cloned
}

type PublicConfig struct {
	LoginNotice          *LoginNotice  `protobuf:"bytes,1,opt,name=login_notice,json=loginNotice,proto3" json:"login_notice,omitempty"`
	Header               *BannerConfig `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Footer               *BannerConfig `protobuf:"bytes,3,opt,name=footer,proto3" json:"footer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PublicConfig) Reset()         { *m = PublicConfig{} }
func (m *PublicConfig) String() string { return proto.CompactTextString(m) }
func (*PublicConfig) ProtoMessage()    {}
func (*PublicConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{2}
}
func (m *PublicConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicConfig.Merge(m, src)
}
func (m *PublicConfig) XXX_Size() int {
	return m.Size()
}
func (m *PublicConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PublicConfig proto.InternalMessageInfo

func (m *PublicConfig) GetLoginNotice() *LoginNotice {
	if m != nil {
		return m.LoginNotice
	}
	return nil
}

func (m *PublicConfig) GetHeader() *BannerConfig {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PublicConfig) GetFooter() *BannerConfig {
	if m != nil {
		return m.Footer
	}
	return nil
}

func (m *PublicConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PublicConfig) Clone() *PublicConfig {
	if m == nil {
		return nil
	}
	cloned := new(PublicConfig)
	*cloned = *m

	cloned.LoginNotice = m.LoginNotice.Clone()
	cloned.Header = m.Header.Clone()
	cloned.Footer = m.Footer.Clone()
	return cloned
}

type AlertRetentionConfig struct {
	ResolvedDeployRetentionDurationDays int32 `protobuf:"varint,1,opt,name=resolved_deploy_retention_duration_days,json=resolvedDeployRetentionDurationDays,proto3" json:"resolved_deploy_retention_duration_days,omitempty"`
	// This runtime alert retention configuration takes precedence after `allRuntimeRetentionDurationDays`.
	DeletedRuntimeRetentionDurationDays int32 `protobuf:"varint,2,opt,name=deleted_runtime_retention_duration_days,json=deletedRuntimeRetentionDurationDays,proto3" json:"deleted_runtime_retention_duration_days,omitempty"`
	// This runtime alert retention configuration has highest precedence. All runtime alerts, including attempted
	// alerts and deleted deployment alerts, are deleted even if respective retention is longer.
	AllRuntimeRetentionDurationDays      int32 `protobuf:"varint,3,opt,name=all_runtime_retention_duration_days,json=allRuntimeRetentionDurationDays,proto3" json:"all_runtime_retention_duration_days,omitempty"`
	AttemptedDeployRetentionDurationDays int32 `protobuf:"varint,4,opt,name=attempted_deploy_retention_duration_days,json=attemptedDeployRetentionDurationDays,proto3" json:"attempted_deploy_retention_duration_days,omitempty"`
	// This runtime alert retention configuration has lowest precedence.
	AttemptedRuntimeRetentionDurationDays int32    `protobuf:"varint,5,opt,name=attempted_runtime_retention_duration_days,json=attemptedRuntimeRetentionDurationDays,proto3" json:"attempted_runtime_retention_duration_days,omitempty"`
	XXX_NoUnkeyedLiteral                  struct{} `json:"-"`
	XXX_unrecognized                      []byte   `json:"-"`
	XXX_sizecache                         int32    `json:"-"`
}

func (m *AlertRetentionConfig) Reset()         { *m = AlertRetentionConfig{} }
func (m *AlertRetentionConfig) String() string { return proto.CompactTextString(m) }
func (*AlertRetentionConfig) ProtoMessage()    {}
func (*AlertRetentionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{3}
}
func (m *AlertRetentionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertRetentionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertRetentionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertRetentionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertRetentionConfig.Merge(m, src)
}
func (m *AlertRetentionConfig) XXX_Size() int {
	return m.Size()
}
func (m *AlertRetentionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertRetentionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AlertRetentionConfig proto.InternalMessageInfo

func (m *AlertRetentionConfig) GetResolvedDeployRetentionDurationDays() int32 {
	if m != nil {
		return m.ResolvedDeployRetentionDurationDays
	}
	return 0
}

func (m *AlertRetentionConfig) GetDeletedRuntimeRetentionDurationDays() int32 {
	if m != nil {
		return m.DeletedRuntimeRetentionDurationDays
	}
	return 0
}

func (m *AlertRetentionConfig) GetAllRuntimeRetentionDurationDays() int32 {
	if m != nil {
		return m.AllRuntimeRetentionDurationDays
	}
	return 0
}

func (m *AlertRetentionConfig) GetAttemptedDeployRetentionDurationDays() int32 {
	if m != nil {
		return m.AttemptedDeployRetentionDurationDays
	}
	return 0
}

func (m *AlertRetentionConfig) GetAttemptedRuntimeRetentionDurationDays() int32 {
	if m != nil {
		return m.AttemptedRuntimeRetentionDurationDays
	}
	return 0
}

func (m *AlertRetentionConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AlertRetentionConfig) Clone() *AlertRetentionConfig {
	if m == nil {
		return nil
	}
	cloned := new(AlertRetentionConfig)
	*cloned = *m

	return cloned
}

// next available tag: 5
type DecommissionedClusterRetentionConfig struct {
	RetentionDurationDays int32             `protobuf:"varint,1,opt,name=retention_duration_days,json=retentionDurationDays,proto3" json:"retention_duration_days,omitempty"`
	IgnoreClusterLabels   map[string]string `protobuf:"bytes,2,rep,name=ignore_cluster_labels,json=ignoreClusterLabels,proto3" json:"ignore_cluster_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastUpdated           *types.Timestamp  `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	CreatedAt             *types.Timestamp  `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *DecommissionedClusterRetentionConfig) Reset()         { *m = DecommissionedClusterRetentionConfig{} }
func (m *DecommissionedClusterRetentionConfig) String() string { return proto.CompactTextString(m) }
func (*DecommissionedClusterRetentionConfig) ProtoMessage()    {}
func (*DecommissionedClusterRetentionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{4}
}
func (m *DecommissionedClusterRetentionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecommissionedClusterRetentionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecommissionedClusterRetentionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecommissionedClusterRetentionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecommissionedClusterRetentionConfig.Merge(m, src)
}
func (m *DecommissionedClusterRetentionConfig) XXX_Size() int {
	return m.Size()
}
func (m *DecommissionedClusterRetentionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DecommissionedClusterRetentionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DecommissionedClusterRetentionConfig proto.InternalMessageInfo

func (m *DecommissionedClusterRetentionConfig) GetRetentionDurationDays() int32 {
	if m != nil {
		return m.RetentionDurationDays
	}
	return 0
}

func (m *DecommissionedClusterRetentionConfig) GetIgnoreClusterLabels() map[string]string {
	if m != nil {
		return m.IgnoreClusterLabels
	}
	return nil
}

func (m *DecommissionedClusterRetentionConfig) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *DecommissionedClusterRetentionConfig) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *DecommissionedClusterRetentionConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DecommissionedClusterRetentionConfig) Clone() *DecommissionedClusterRetentionConfig {
	if m == nil {
		return nil
	}
	cloned := new(DecommissionedClusterRetentionConfig)
	*cloned = *m

	if m.IgnoreClusterLabels != nil {
		cloned.IgnoreClusterLabels = make(map[string]string, len(m.IgnoreClusterLabels))
		for k, v := range m.IgnoreClusterLabels {
			cloned.IgnoreClusterLabels[k] = v
		}
	}
	cloned.LastUpdated = m.LastUpdated.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

// next available tag: 6
type PrivateConfig struct {
	// Types that are valid to be assigned to AlertRetention:
	//	*PrivateConfig_DEPRECATEDAlertRetentionDurationDays
	//	*PrivateConfig_AlertConfig
	AlertRetention                      isPrivateConfig_AlertRetention        `protobuf_oneof:"alert_retention"`
	ImageRetentionDurationDays          int32                                 `protobuf:"varint,2,opt,name=image_retention_duration_days,json=imageRetentionDurationDays,proto3" json:"image_retention_duration_days,omitempty"`
	ExpiredVulnReqRetentionDurationDays int32                                 `protobuf:"varint,4,opt,name=expired_vuln_req_retention_duration_days,json=expiredVulnReqRetentionDurationDays,proto3" json:"expired_vuln_req_retention_duration_days,omitempty"`
	DecommissionedClusterRetention      *DecommissionedClusterRetentionConfig `protobuf:"bytes,5,opt,name=decommissioned_cluster_retention,json=decommissionedClusterRetention,proto3" json:"decommissioned_cluster_retention,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                              `json:"-"`
	XXX_unrecognized                    []byte                                `json:"-"`
	XXX_sizecache                       int32                                 `json:"-"`
}

func (m *PrivateConfig) Reset()         { *m = PrivateConfig{} }
func (m *PrivateConfig) String() string { return proto.CompactTextString(m) }
func (*PrivateConfig) ProtoMessage()    {}
func (*PrivateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{5}
}
func (m *PrivateConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateConfig.Merge(m, src)
}
func (m *PrivateConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrivateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateConfig proto.InternalMessageInfo

type isPrivateConfig_AlertRetention interface {
	isPrivateConfig_AlertRetention()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isPrivateConfig_AlertRetention
}

type PrivateConfig_DEPRECATEDAlertRetentionDurationDays struct {
	DEPRECATEDAlertRetentionDurationDays int32 `protobuf:"varint,1,opt,name=DEPRECATED_alert_retention_duration_days,json=DEPRECATEDAlertRetentionDurationDays,proto3,oneof" json:"DEPRECATED_alert_retention_duration_days,omitempty"`
}
type PrivateConfig_AlertConfig struct {
	AlertConfig *AlertRetentionConfig `protobuf:"bytes,3,opt,name=alert_config,json=alertConfig,proto3,oneof" json:"alert_config,omitempty"`
}

func (*PrivateConfig_DEPRECATEDAlertRetentionDurationDays) isPrivateConfig_AlertRetention() {}
func (m *PrivateConfig_DEPRECATEDAlertRetentionDurationDays) Clone() isPrivateConfig_AlertRetention {
	if m == nil {
		return nil
	}
	cloned := new(PrivateConfig_DEPRECATEDAlertRetentionDurationDays)
	*cloned = *m

	return cloned
}
func (*PrivateConfig_AlertConfig) isPrivateConfig_AlertRetention() {}
func (m *PrivateConfig_AlertConfig) Clone() isPrivateConfig_AlertRetention {
	if m == nil {
		return nil
	}
	cloned := new(PrivateConfig_AlertConfig)
	*cloned = *m

	cloned.AlertConfig = m.AlertConfig.Clone()
	return cloned
}

func (m *PrivateConfig) GetAlertRetention() isPrivateConfig_AlertRetention {
	if m != nil {
		return m.AlertRetention
	}
	return nil
}

func (m *PrivateConfig) GetDEPRECATEDAlertRetentionDurationDays() int32 {
	if x, ok := m.GetAlertRetention().(*PrivateConfig_DEPRECATEDAlertRetentionDurationDays); ok {
		return x.DEPRECATEDAlertRetentionDurationDays
	}
	return 0
}

func (m *PrivateConfig) GetAlertConfig() *AlertRetentionConfig {
	if x, ok := m.GetAlertRetention().(*PrivateConfig_AlertConfig); ok {
		return x.AlertConfig
	}
	return nil
}

func (m *PrivateConfig) GetImageRetentionDurationDays() int32 {
	if m != nil {
		return m.ImageRetentionDurationDays
	}
	return 0
}

func (m *PrivateConfig) GetExpiredVulnReqRetentionDurationDays() int32 {
	if m != nil {
		return m.ExpiredVulnReqRetentionDurationDays
	}
	return 0
}

func (m *PrivateConfig) GetDecommissionedClusterRetention() *DecommissionedClusterRetentionConfig {
	if m != nil {
		return m.DecommissionedClusterRetention
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrivateConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrivateConfig_DEPRECATEDAlertRetentionDurationDays)(nil),
		(*PrivateConfig_AlertConfig)(nil),
	}
}

func (m *PrivateConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PrivateConfig) Clone() *PrivateConfig {
	if m == nil {
		return nil
	}
	cloned := new(PrivateConfig)
	*cloned = *m

	if m.AlertRetention != nil {
		cloned.AlertRetention = m.AlertRetention.Clone()
	}
	cloned.DecommissionedClusterRetention = m.DecommissionedClusterRetention.Clone()
	return cloned
}

type Config struct {
	PublicConfig         *PublicConfig  `protobuf:"bytes,1,opt,name=public_config,json=publicConfig,proto3" json:"public_config,omitempty"`
	PrivateConfig        *PrivateConfig `protobuf:"bytes,2,opt,name=private_config,json=privateConfig,proto3" json:"private_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_33903d79f8815efc, []int{6}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPublicConfig() *PublicConfig {
	if m != nil {
		return m.PublicConfig
	}
	return nil
}

func (m *Config) GetPrivateConfig() *PrivateConfig {
	if m != nil {
		return m.PrivateConfig
	}
	return nil
}

func (m *Config) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Config) Clone() *Config {
	if m == nil {
		return nil
	}
	cloned := new(Config)
	*cloned = *m

	cloned.PublicConfig = m.PublicConfig.Clone()
	cloned.PrivateConfig = m.PrivateConfig.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.BannerConfig_Size", BannerConfig_Size_name, BannerConfig_Size_value)
	proto.RegisterType((*LoginNotice)(nil), "storage.LoginNotice")
	proto.RegisterType((*BannerConfig)(nil), "storage.BannerConfig")
	proto.RegisterType((*PublicConfig)(nil), "storage.PublicConfig")
	proto.RegisterType((*AlertRetentionConfig)(nil), "storage.AlertRetentionConfig")
	proto.RegisterType((*DecommissionedClusterRetentionConfig)(nil), "storage.DecommissionedClusterRetentionConfig")
	proto.RegisterMapType((map[string]string)(nil), "storage.DecommissionedClusterRetentionConfig.IgnoreClusterLabelsEntry")
	proto.RegisterType((*PrivateConfig)(nil), "storage.PrivateConfig")
	proto.RegisterType((*Config)(nil), "storage.Config")
}

func init() { proto.RegisterFile("storage/config.proto", fileDescriptor_33903d79f8815efc) }

var fileDescriptor_33903d79f8815efc = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x2d, 0xc9, 0xa9, 0x47, 0x72, 0xa2, 0xb2, 0x76, 0xab, 0x0a, 0x88, 0x62, 0xc8, 0x2e,
	0xaa, 0x1c, 0x42, 0x03, 0x4a, 0xd1, 0x9f, 0x14, 0x39, 0xc8, 0x96, 0xd2, 0x04, 0x90, 0x03, 0x63,
	0x6d, 0x07, 0x41, 0x2f, 0xc4, 0x8a, 0x1c, 0xab, 0x0b, 0xaf, 0xb8, 0xcc, 0x72, 0xe9, 0x5a, 0xbe,
	0xf6, 0x25, 0x7a, 0xe8, 0xb5, 0x2f, 0xd2, 0x53, 0x8f, 0x05, 0xfa, 0x02, 0x85, 0xfb, 0x22, 0x05,
	0x77, 0x97, 0x92, 0xec, 0xca, 0x52, 0x72, 0xdb, 0x1d, 0x7e, 0xf3, 0x71, 0xe6, 0x9b, 0x9f, 0x85,
	0xcd, 0x44, 0x09, 0x49, 0x87, 0xb8, 0x17, 0x88, 0xe8, 0x8c, 0x0d, 0xbd, 0x58, 0x0a, 0x25, 0xdc,
	0x7b, 0xd6, 0x5a, 0x7f, 0x34, 0x14, 0x62, 0xc8, 0x71, 0x4f, 0x9b, 0x07, 0xe9, 0xd9, 0x9e, 0x62,
	0x23, 0x4c, 0x14, 0x1d, 0xc5, 0x06, 0xd9, 0xfc, 0x1e, 0xca, 0x7d, 0x31, 0x64, 0xd1, 0x6b, 0xa1,
	0x58, 0x80, 0x6e, 0x0d, 0xee, 0x61, 0x44, 0x07, 0x1c, 0xc3, 0x9a, 0xb3, 0xed, 0xb4, 0x3e, 0x22,
	0xf9, 0xd5, 0x75, 0xa1, 0xa8, 0xf0, 0x52, 0xd5, 0x56, 0xb7, 0x9d, 0xd6, 0x3a, 0xd1, 0xe7, 0xe6,
	0xb5, 0x03, 0x95, 0x7d, 0x1a, 0x45, 0x28, 0x0f, 0xf4, 0xdf, 0x3f, 0xcc, 0xdd, 0xf5, 0xa0, 0x98,
	0xb0, 0x2b, 0xac, 0x15, 0xb6, 0x9d, 0xd6, 0xfd, 0x76, 0xdd, 0xb3, 0x41, 0x7b, 0xb3, 0x94, 0xde,
	0x31, 0xbb, 0x42, 0xa2, 0x71, 0xee, 0x26, 0x94, 0x02, 0xc1, 0x85, 0xac, 0x15, 0x35, 0x89, 0xb9,
	0xb8, 0x8f, 0xa1, 0x3a, 0xa0, 0xc1, 0xf9, 0x50, 0x8a, 0x34, 0x0a, 0x7d, 0x03, 0x28, 0x69, 0xc0,
	0x83, 0xa9, 0xfd, 0x20, 0x33, 0x37, 0x9f, 0x42, 0x31, 0xa3, 0x73, 0xd7, 0xa1, 0x74, 0xfa, 0xfa,
	0xb8, 0x77, 0x52, 0x5d, 0xc9, 0x8e, 0xc7, 0x87, 0x9d, 0x7e, 0xbf, 0xea, 0xb8, 0x00, 0x6b, 0x87,
	0xbd, 0xee, 0xab, 0xd3, 0xc3, 0xea, 0x6a, 0x66, 0xee, 0x77, 0xc8, 0x0f, 0xbd, 0x6a, 0xa1, 0xf9,
	0xbb, 0x03, 0x95, 0xa3, 0x74, 0xc0, 0x59, 0x60, 0x93, 0xfc, 0x06, 0x2a, 0x3c, 0x93, 0xcc, 0x8f,
	0xb4, 0x66, 0x3a, 0xd3, 0x72, 0x7b, 0x73, 0x12, 0xfe, 0x8c, 0x9e, 0xa4, 0xcc, 0x67, 0xc4, 0x7d,
	0x02, 0x6b, 0x3f, 0x21, 0x0d, 0x51, 0x6a, 0x15, 0xca, 0xed, 0xad, 0xb9, 0x19, 0x13, 0x0b, 0xca,
	0xe0, 0x67, 0x42, 0x28, 0x94, 0x5a, 0xa0, 0xbb, 0xe1, 0x06, 0xd4, 0xfc, 0xa3, 0x00, 0x9b, 0x1d,
	0x8e, 0x52, 0x11, 0x54, 0x18, 0x29, 0x26, 0x22, 0x1b, 0xef, 0x09, 0x7c, 0x29, 0x31, 0x11, 0xfc,
	0x02, 0x43, 0x3f, 0xc4, 0x98, 0x8b, 0xb1, 0x2f, 0x73, 0x88, 0x1f, 0xa6, 0x92, 0x9a, 0x03, 0x1d,
	0x27, 0x3a, 0x95, 0x12, 0xd9, 0xc9, 0xe1, 0x5d, 0x8d, 0x9e, 0xf0, 0x75, 0x2d, 0xb6, 0x4b, 0xc7,
	0x49, 0xc6, 0x1a, 0x22, 0x47, 0x85, 0xa1, 0x2f, 0xd3, 0x28, 0x6b, 0xab, 0x3b, 0x59, 0x57, 0x0d,
	0xab, 0x85, 0x13, 0x83, 0x9e, 0xcf, 0xda, 0x87, 0x1d, 0xca, 0xf9, 0x52, 0xc6, 0x82, 0x66, 0x7c,
	0x44, 0x39, 0x5f, 0xc8, 0xf6, 0x06, 0x5a, 0x54, 0x29, 0x1c, 0xc5, 0x6a, 0x79, 0xea, 0x45, 0x4d,
	0xb9, 0x3b, 0xc1, 0x2f, 0xca, 0xfd, 0x2d, 0x3c, 0x9e, 0xf2, 0x2e, 0x8b, 0xb5, 0xa4, 0x89, 0xbf,
	0x98, 0x38, 0x2c, 0x8a, 0xb8, 0xf9, 0x5b, 0x01, 0x76, 0xbb, 0x18, 0x88, 0xd1, 0x88, 0x25, 0x09,
	0x13, 0x11, 0x86, 0x07, 0x3c, 0x4d, 0x14, 0xca, 0xdb, 0x45, 0xfd, 0x1a, 0x3e, 0x5b, 0x5c, 0xc4,
	0x2d, 0x39, 0x37, 0xf4, 0x2b, 0xd8, 0x62, 0xc3, 0x48, 0x48, 0xf4, 0x03, 0x43, 0xec, 0x73, 0x3a,
	0x40, 0x9e, 0x15, 0xa9, 0xd0, 0x2a, 0xb7, 0x5f, 0x4c, 0x7a, 0xec, 0x7d, 0xa2, 0xf0, 0x5e, 0x69,
	0x2a, 0xfb, 0xb1, 0xaf, 0x89, 0x7a, 0x91, 0x92, 0x63, 0xf2, 0x09, 0xfb, 0xff, 0x17, 0xf7, 0x39,
	0x54, 0x38, 0x4d, 0x94, 0x9f, 0xc6, 0x21, 0x55, 0x18, 0xda, 0xb6, 0xae, 0x7b, 0x66, 0x47, 0x79,
	0xf9, 0x8e, 0xf2, 0x4e, 0xf2, 0x1d, 0x45, 0xca, 0x19, 0xfe, 0xd4, 0xc0, 0xdd, 0xef, 0x00, 0x02,
	0x89, 0xd9, 0xd1, 0xa7, 0x4a, 0xd7, 0x6b, 0xb1, 0xf3, 0xba, 0x45, 0x77, 0x54, 0xfd, 0x05, 0xd4,
	0xee, 0x0a, 0xd5, 0xad, 0x42, 0xe1, 0x1c, 0xc7, 0x5a, 0xb5, 0x75, 0x92, 0x1d, 0xb3, 0x3d, 0x73,
	0x41, 0x79, 0x8a, 0x76, 0x59, 0x99, 0xcb, 0xb3, 0xd5, 0x6f, 0x9d, 0xe6, 0xdf, 0x05, 0xd8, 0x38,
	0x92, 0xec, 0x82, 0x2a, 0xb4, 0x75, 0x78, 0x0b, 0xad, 0x6e, 0xef, 0x88, 0xf4, 0x0e, 0x3a, 0x27,
	0xbd, 0xae, 0x4f, 0xb3, 0xf9, 0x5b, 0x3c, 0x5d, 0x2f, 0x57, 0xc8, 0xee, 0xd4, 0xe3, 0xe6, 0xc0,
	0xde, 0xa8, 0xd4, 0x3e, 0x54, 0x0c, 0x9d, 0xd9, 0xec, 0x56, 0xad, 0x87, 0x93, 0x02, 0xcd, 0x9b,
	0xf5, 0x97, 0x2b, 0xa4, 0xac, 0x9d, 0x6c, 0x74, 0x1d, 0x78, 0xc8, 0x46, 0x74, 0xb8, 0x6c, 0x34,
	0xeb, 0x1a, 0x34, 0x3f, 0x8c, 0x53, 0x68, 0xe1, 0x65, 0xcc, 0x24, 0x86, 0xfe, 0x45, 0xca, 0x23,
	0x5f, 0xe2, 0xbb, 0x25, 0x33, 0xb4, 0x63, 0xf1, 0x6f, 0x52, 0x1e, 0x11, 0x7c, 0x37, 0x9f, 0xf6,
	0x67, 0xd8, 0x0e, 0x6f, 0x74, 0xd8, 0xa4, 0x1f, 0x27, 0xe4, 0x7a, 0x72, 0xca, 0xed, 0x27, 0x1f,
	0xd4, 0x92, 0xa4, 0x11, 0x2e, 0x44, 0xed, 0x7f, 0x0c, 0x0f, 0x6e, 0x55, 0xa9, 0xf9, 0x8b, 0x03,
	0x6b, 0x56, 0xb0, 0x67, 0xb0, 0x11, 0xeb, 0x5d, 0x9f, 0xab, 0xee, 0xdc, 0x5a, 0xbd, 0xb3, 0x2f,
	0x01, 0xa9, 0xc4, 0xb3, 0xef, 0xc2, 0x73, 0xb8, 0x1f, 0x9b, 0xde, 0xc8, 0x9d, 0xcd, 0x9a, 0xff,
	0x74, 0xea, 0x3c, 0xdb, 0x3a, 0x64, 0x23, 0x9e, 0xbd, 0xee, 0x7f, 0xf5, 0xe7, 0x75, 0xc3, 0xf9,
	0xeb, 0xba, 0xe1, 0xfc, 0x73, 0xdd, 0x70, 0x7e, 0xfd, 0xb7, 0xb1, 0x02, 0x9f, 0x33, 0xe1, 0x25,
	0x8a, 0x06, 0xe7, 0x52, 0x5c, 0x9a, 0x06, 0xcf, 0x99, 0x7e, 0xcc, 0x1f, 0xf8, 0xc1, 0x9a, 0xb6,
	0x3f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xac, 0x86, 0x9e, 0x36, 0x08, 0x08, 0x00, 0x00,
}

func (m *LoginNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BannerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BackgroundColor) > 0 {
		i -= len(m.BackgroundColor)
		copy(dAtA[i:], m.BackgroundColor)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.BackgroundColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublicConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Footer != nil {
		{
			size, err := m.Footer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LoginNotice != nil {
		{
			size, err := m.LoginNotice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlertRetentionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertRetentionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertRetentionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AttemptedRuntimeRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.AttemptedRuntimeRetentionDurationDays))
		i--
		dAtA[i] = 0x28
	}
	if m.AttemptedDeployRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.AttemptedDeployRetentionDurationDays))
		i--
		dAtA[i] = 0x20
	}
	if m.AllRuntimeRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.AllRuntimeRetentionDurationDays))
		i--
		dAtA[i] = 0x18
	}
	if m.DeletedRuntimeRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.DeletedRuntimeRetentionDurationDays))
		i--
		dAtA[i] = 0x10
	}
	if m.ResolvedDeployRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ResolvedDeployRetentionDurationDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecommissionedClusterRetentionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecommissionedClusterRetentionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecommissionedClusterRetentionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IgnoreClusterLabels) > 0 {
		for k := range m.IgnoreClusterLabels {
			v := m.IgnoreClusterLabels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintConfig(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConfig(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.RetentionDurationDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DecommissionedClusterRetention != nil {
		{
			size, err := m.DecommissionedClusterRetention.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpiredVulnReqRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ExpiredVulnReqRetentionDurationDays))
		i--
		dAtA[i] = 0x20
	}
	if m.AlertRetention != nil {
		{
			size := m.AlertRetention.Size()
			i -= size
			if _, err := m.AlertRetention.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ImageRetentionDurationDays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ImageRetentionDurationDays))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *PrivateConfig_DEPRECATEDAlertRetentionDurationDays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateConfig_DEPRECATEDAlertRetentionDurationDays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintConfig(dAtA, i, uint64(m.DEPRECATEDAlertRetentionDurationDays))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *PrivateConfig_AlertConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateConfig_AlertConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlertConfig != nil {
		{
			size, err := m.AlertConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrivateConfig != nil {
		{
			size, err := m.PrivateConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PublicConfig != nil {
		{
			size, err := m.PublicConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BannerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovConfig(uint64(m.Size_))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.BackgroundColor)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginNotice != nil {
		l = m.LoginNotice.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Footer != nil {
		l = m.Footer.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlertRetentionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolvedDeployRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.ResolvedDeployRetentionDurationDays))
	}
	if m.DeletedRuntimeRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.DeletedRuntimeRetentionDurationDays))
	}
	if m.AllRuntimeRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.AllRuntimeRetentionDurationDays))
	}
	if m.AttemptedDeployRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.AttemptedDeployRetentionDurationDays))
	}
	if m.AttemptedRuntimeRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.AttemptedRuntimeRetentionDurationDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DecommissionedClusterRetentionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.RetentionDurationDays))
	}
	if len(m.IgnoreClusterLabels) > 0 {
		for k, v := range m.IgnoreClusterLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConfig(uint64(len(k))) + 1 + len(v) + sovConfig(uint64(len(v)))
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertRetention != nil {
		n += m.AlertRetention.Size()
	}
	if m.ImageRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.ImageRetentionDurationDays))
	}
	if m.ExpiredVulnReqRetentionDurationDays != 0 {
		n += 1 + sovConfig(uint64(m.ExpiredVulnReqRetentionDurationDays))
	}
	if m.DecommissionedClusterRetention != nil {
		l = m.DecommissionedClusterRetention.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateConfig_DEPRECATEDAlertRetentionDurationDays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.DEPRECATEDAlertRetentionDurationDays))
	return n
}
func (m *PrivateConfig_AlertConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertConfig != nil {
		l = m.AlertConfig.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicConfig != nil {
		l = m.PublicConfig.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.PrivateConfig != nil {
		l = m.PrivateConfig.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= BannerConfig_Size(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginNotice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginNotice == nil {
				m.LoginNotice = &LoginNotice{}
			}
			if err := m.LoginNotice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BannerConfig{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Footer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Footer == nil {
				m.Footer = &BannerConfig{}
			}
			if err := m.Footer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertRetentionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertRetentionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertRetentionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedDeployRetentionDurationDays", wireType)
			}
			m.ResolvedDeployRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedDeployRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedRuntimeRetentionDurationDays", wireType)
			}
			m.DeletedRuntimeRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedRuntimeRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRuntimeRetentionDurationDays", wireType)
			}
			m.AllRuntimeRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllRuntimeRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptedDeployRetentionDurationDays", wireType)
			}
			m.AttemptedDeployRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptedDeployRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptedRuntimeRetentionDurationDays", wireType)
			}
			m.AttemptedRuntimeRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptedRuntimeRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecommissionedClusterRetentionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecommissionedClusterRetentionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecommissionedClusterRetentionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionDurationDays", wireType)
			}
			m.RetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreClusterLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IgnoreClusterLabels == nil {
				m.IgnoreClusterLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConfig
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConfig
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthConfig
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthConfig
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IgnoreClusterLabels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEPRECATEDAlertRetentionDurationDays", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlertRetention = &PrivateConfig_DEPRECATEDAlertRetentionDurationDays{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageRetentionDurationDays", wireType)
			}
			m.ImageRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AlertRetentionConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertRetention = &PrivateConfig_AlertConfig{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredVulnReqRetentionDurationDays", wireType)
			}
			m.ExpiredVulnReqRetentionDurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredVulnReqRetentionDurationDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecommissionedClusterRetention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecommissionedClusterRetention == nil {
				m.DecommissionedClusterRetention = &DecommissionedClusterRetentionConfig{}
			}
			if err := m.DecommissionedClusterRetention.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicConfig == nil {
				m.PublicConfig = &PublicConfig{}
			}
			if err := m.PublicConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateConfig == nil {
				m.PrivateConfig = &PrivateConfig{}
			}
			if err := m.PrivateConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
