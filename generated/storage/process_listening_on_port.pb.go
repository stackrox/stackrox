// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/process_listening_on_port.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The API returns an array of these
type ProcessListeningOnPort struct {
	Endpoint             *ProcessListeningOnPort_Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	DeploymentId         string                           `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	ContainerName        string                           `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	PodId                string                           `protobuf:"bytes,4,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	PodUid               string                           `protobuf:"bytes,5,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Signal               *ProcessSignal                   `protobuf:"bytes,6,opt,name=signal,proto3" json:"signal,omitempty"`
	ClusterId            string                           `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Namespace            string                           `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ContainerStartTime   *types.Timestamp                 `protobuf:"bytes,9,opt,name=container_start_time,json=containerStartTime,proto3" json:"container_start_time,omitempty"`
	ImageId              string                           `protobuf:"bytes,10,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ProcessListeningOnPort) Reset()         { *m = ProcessListeningOnPort{} }
func (m *ProcessListeningOnPort) String() string { return proto.CompactTextString(m) }
func (*ProcessListeningOnPort) ProtoMessage()    {}
func (*ProcessListeningOnPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_44bd1925a567394f, []int{0}
}
func (m *ProcessListeningOnPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessListeningOnPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessListeningOnPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessListeningOnPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListeningOnPort.Merge(m, src)
}
func (m *ProcessListeningOnPort) XXX_Size() int {
	return m.Size()
}
func (m *ProcessListeningOnPort) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListeningOnPort.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListeningOnPort proto.InternalMessageInfo

func (m *ProcessListeningOnPort) GetEndpoint() *ProcessListeningOnPort_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *ProcessListeningOnPort) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessListeningOnPort) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ProcessListeningOnPort) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *ProcessListeningOnPort) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ProcessListeningOnPort) GetSignal() *ProcessSignal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *ProcessListeningOnPort) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessListeningOnPort) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessListeningOnPort) GetContainerStartTime() *types.Timestamp {
	if m != nil {
		return m.ContainerStartTime
	}
	return nil
}

func (m *ProcessListeningOnPort) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ProcessListeningOnPort) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessListeningOnPort) Clone() *ProcessListeningOnPort {
	if m == nil {
		return nil
	}
	cloned := new(ProcessListeningOnPort)
	*cloned = *m

	cloned.Endpoint = m.Endpoint.Clone()
	cloned.Signal = m.Signal.Clone()
	cloned.ContainerStartTime = m.ContainerStartTime.Clone()
	return cloned
}

type ProcessListeningOnPort_Endpoint struct {
	Port                 uint32     `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             L4Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=storage.L4Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProcessListeningOnPort_Endpoint) Reset()         { *m = ProcessListeningOnPort_Endpoint{} }
func (m *ProcessListeningOnPort_Endpoint) String() string { return proto.CompactTextString(m) }
func (*ProcessListeningOnPort_Endpoint) ProtoMessage()    {}
func (*ProcessListeningOnPort_Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_44bd1925a567394f, []int{0, 0}
}
func (m *ProcessListeningOnPort_Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessListeningOnPort_Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessListeningOnPort_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessListeningOnPort_Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListeningOnPort_Endpoint.Merge(m, src)
}
func (m *ProcessListeningOnPort_Endpoint) XXX_Size() int {
	return m.Size()
}
func (m *ProcessListeningOnPort_Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListeningOnPort_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListeningOnPort_Endpoint proto.InternalMessageInfo

func (m *ProcessListeningOnPort_Endpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ProcessListeningOnPort_Endpoint) GetProtocol() L4Protocol {
	if m != nil {
		return m.Protocol
	}
	return L4Protocol_L4_PROTOCOL_UNKNOWN
}

func (m *ProcessListeningOnPort_Endpoint) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessListeningOnPort_Endpoint) Clone() *ProcessListeningOnPort_Endpoint {
	if m == nil {
		return nil
	}
	cloned := new(ProcessListeningOnPort_Endpoint)
	*cloned = *m

	return cloned
}

// This is what sensor sends to central
type ProcessListeningOnPortFromSensor struct {
	Port                 uint32                     `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol             L4Protocol                 `protobuf:"varint,2,opt,name=protocol,proto3,enum=storage.L4Protocol" json:"protocol,omitempty"`
	Process              *ProcessIndicatorUniqueKey `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	CloseTimestamp       *types.Timestamp           `protobuf:"bytes,4,opt,name=close_timestamp,json=closeTimestamp,proto3" json:"close_timestamp,omitempty"`
	ClusterId            string                     `protobuf:"bytes,6,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	DeploymentId         string                     `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	PodUid               string                     `protobuf:"bytes,8,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	Namespace            string                     `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProcessListeningOnPortFromSensor) Reset()         { *m = ProcessListeningOnPortFromSensor{} }
func (m *ProcessListeningOnPortFromSensor) String() string { return proto.CompactTextString(m) }
func (*ProcessListeningOnPortFromSensor) ProtoMessage()    {}
func (*ProcessListeningOnPortFromSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_44bd1925a567394f, []int{1}
}
func (m *ProcessListeningOnPortFromSensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessListeningOnPortFromSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessListeningOnPortFromSensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessListeningOnPortFromSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListeningOnPortFromSensor.Merge(m, src)
}
func (m *ProcessListeningOnPortFromSensor) XXX_Size() int {
	return m.Size()
}
func (m *ProcessListeningOnPortFromSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListeningOnPortFromSensor.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListeningOnPortFromSensor proto.InternalMessageInfo

func (m *ProcessListeningOnPortFromSensor) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ProcessListeningOnPortFromSensor) GetProtocol() L4Protocol {
	if m != nil {
		return m.Protocol
	}
	return L4Protocol_L4_PROTOCOL_UNKNOWN
}

func (m *ProcessListeningOnPortFromSensor) GetProcess() *ProcessIndicatorUniqueKey {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ProcessListeningOnPortFromSensor) GetCloseTimestamp() *types.Timestamp {
	if m != nil {
		return m.CloseTimestamp
	}
	return nil
}

func (m *ProcessListeningOnPortFromSensor) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessListeningOnPortFromSensor) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessListeningOnPortFromSensor) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ProcessListeningOnPortFromSensor) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessListeningOnPortFromSensor) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessListeningOnPortFromSensor) Clone() *ProcessListeningOnPortFromSensor {
	if m == nil {
		return nil
	}
	cloned := new(ProcessListeningOnPortFromSensor)
	*cloned = *m

	cloned.Process = m.Process.Clone()
	cloned.CloseTimestamp = m.CloseTimestamp.Clone()
	return cloned
}

// This is what is stored in the database
type ProcessListeningOnPortStorage struct {
	// Ideally it has to be GENERATED ALWAYS AS IDENTITY, which will make it a
	// bigint with a sequence. Unfortunately at the moment some bits of store
	// generator assume an id has to be a string.
	Id                 string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"`
	Port               uint32           `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty" search:"Port,store"`
	Protocol           L4Protocol       `protobuf:"varint,3,opt,name=protocol,proto3,enum=storage.L4Protocol" json:"protocol,omitempty" search:"Port Protocol,store"`
	CloseTimestamp     *types.Timestamp `protobuf:"bytes,4,opt,name=close_timestamp,json=closeTimestamp,proto3" json:"close_timestamp,omitempty" search:"Closed Time,hidden"`
	ProcessIndicatorId string           `protobuf:"bytes,5,opt,name=process_indicator_id,json=processIndicatorId,proto3" json:"process_indicator_id,omitempty" search:"Process ID,store" sql:"fk(ProcessIndicator:id),no-fk-constraint,index=btree,type(uuid)"`
	// XXX: Make it a partial index on only active, not closed, PLOP
	Closed bool `protobuf:"varint,6,opt,name=closed,proto3" json:"closed,omitempty" search:"Closed,store" sql:"index=btree"`
	// ProcessIndicator will be not empty only for those cases when we were not
	// able to find references process in the database
	Process              *ProcessIndicatorUniqueKey `protobuf:"bytes,7,opt,name=process,proto3" json:"process,omitempty"`
	DeploymentId         string                     `protobuf:"bytes,8,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" search:"Deployment ID,store" sql:"fk(Deployment:id),no-fk-constraint,index=btree,type(uuid)"`
	PodUid               string                     `protobuf:"bytes,9,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty" search:"Pod UID,hidden" sql:"fk(Pod:id),no-fk-constraint,index=hash,type(uuid)"`
	ClusterId            string                     `protobuf:"bytes,10,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID" sql:"type(uuid)"`
	Namespace            string                     `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProcessListeningOnPortStorage) Reset()         { *m = ProcessListeningOnPortStorage{} }
func (m *ProcessListeningOnPortStorage) String() string { return proto.CompactTextString(m) }
func (*ProcessListeningOnPortStorage) ProtoMessage()    {}
func (*ProcessListeningOnPortStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_44bd1925a567394f, []int{2}
}
func (m *ProcessListeningOnPortStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessListeningOnPortStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessListeningOnPortStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessListeningOnPortStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessListeningOnPortStorage.Merge(m, src)
}
func (m *ProcessListeningOnPortStorage) XXX_Size() int {
	return m.Size()
}
func (m *ProcessListeningOnPortStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessListeningOnPortStorage.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessListeningOnPortStorage proto.InternalMessageInfo

func (m *ProcessListeningOnPortStorage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ProcessListeningOnPortStorage) GetProtocol() L4Protocol {
	if m != nil {
		return m.Protocol
	}
	return L4Protocol_L4_PROTOCOL_UNKNOWN
}

func (m *ProcessListeningOnPortStorage) GetCloseTimestamp() *types.Timestamp {
	if m != nil {
		return m.CloseTimestamp
	}
	return nil
}

func (m *ProcessListeningOnPortStorage) GetProcessIndicatorId() string {
	if m != nil {
		return m.ProcessIndicatorId
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *ProcessListeningOnPortStorage) GetProcess() *ProcessIndicatorUniqueKey {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ProcessListeningOnPortStorage) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessListeningOnPortStorage) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessListeningOnPortStorage) Clone() *ProcessListeningOnPortStorage {
	if m == nil {
		return nil
	}
	cloned := new(ProcessListeningOnPortStorage)
	*cloned = *m

	cloned.CloseTimestamp = m.CloseTimestamp.Clone()
	cloned.Process = m.Process.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*ProcessListeningOnPort)(nil), "storage.ProcessListeningOnPort")
	proto.RegisterType((*ProcessListeningOnPort_Endpoint)(nil), "storage.ProcessListeningOnPort.Endpoint")
	proto.RegisterType((*ProcessListeningOnPortFromSensor)(nil), "storage.ProcessListeningOnPortFromSensor")
	proto.RegisterType((*ProcessListeningOnPortStorage)(nil), "storage.ProcessListeningOnPortStorage")
}

func init() {
	proto.RegisterFile("storage/process_listening_on_port.proto", fileDescriptor_44bd1925a567394f)
}

var fileDescriptor_44bd1925a567394f = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xdc, 0x44,
	0x1c, 0xc7, 0x69, 0xba, 0x1f, 0x13, 0x12, 0xa4, 0x69, 0x48, 0x97, 0x25, 0x8d, 0x2d, 0x03, 0xca,
	0x56, 0xdd, 0x3a, 0x52, 0xe8, 0x29, 0x82, 0x8b, 0xb3, 0x80, 0x2c, 0xa2, 0x26, 0x78, 0xc9, 0x05,
	0x21, 0x19, 0xc7, 0x33, 0x71, 0x46, 0xf1, 0xce, 0xb8, 0xf6, 0xac, 0x4a, 0x8e, 0x1c, 0x78, 0x04,
	0x24, 0x9e, 0x86, 0x33, 0x47, 0x9e, 0xc0, 0x42, 0x41, 0xbc, 0x80, 0x4f, 0x1c, 0xd1, 0x8c, 0x3d,
	0xfe, 0xca, 0x52, 0x29, 0xa8, 0x37, 0xef, 0xff, 0xdb, 0xbf, 0x0f, 0x2f, 0xd8, 0x4f, 0x39, 0x4b,
	0xfc, 0x10, 0x1f, 0xc4, 0x09, 0x0b, 0x70, 0x9a, 0x7a, 0x11, 0x49, 0x39, 0xa6, 0x84, 0x86, 0x1e,
	0xa3, 0x5e, 0xcc, 0x12, 0x6e, 0xc5, 0x09, 0xe3, 0x0c, 0xf6, 0xcb, 0xc2, 0xb1, 0x1e, 0x32, 0x16,
	0x46, 0xb2, 0x81, 0xb3, 0x8b, 0xe5, 0xe5, 0x01, 0x27, 0x0b, 0x9c, 0x72, 0x7f, 0x11, 0x17, 0x95,
	0xe3, 0xed, 0x90, 0x85, 0x4c, 0x3e, 0x1e, 0x88, 0xa7, 0x32, 0x3a, 0x56, 0x8b, 0x28, 0xe6, 0xaf,
	0x59, 0x72, 0xed, 0x5d, 0x46, 0xec, 0x75, 0x99, 0xd3, 0xbb, 0x47, 0x10, 0x8a, 0x48, 0xe0, 0x73,
	0x96, 0x14, 0x05, 0xe6, 0x4f, 0xeb, 0x60, 0xe7, 0xac, 0xc8, 0x9d, 0xa8, 0xfb, 0x4e, 0xe9, 0x19,
	0x4b, 0x38, 0x9c, 0x81, 0x01, 0xa6, 0x28, 0x66, 0x84, 0xf2, 0x91, 0x66, 0x68, 0x93, 0x8d, 0xc3,
	0x89, 0x55, 0x8e, 0xb3, 0x56, 0xb7, 0x58, 0x5f, 0x94, 0xf5, 0x6e, 0xd5, 0x09, 0x3f, 0x02, 0x9b,
	0x08, 0xc7, 0x11, 0xbb, 0x59, 0x60, 0xca, 0x3d, 0x82, 0x46, 0x6b, 0x86, 0x36, 0x19, 0xba, 0xef,
	0xd6, 0x41, 0x07, 0xc1, 0x4f, 0xc0, 0x56, 0xc0, 0x28, 0xf7, 0x09, 0xc5, 0x89, 0x47, 0xfd, 0x05,
	0x1e, 0x3d, 0x90, 0x55, 0x9b, 0x55, 0xf4, 0xa5, 0xbf, 0xc0, 0xf0, 0x7d, 0xd0, 0x8b, 0x19, 0x12,
	0x43, 0xd6, 0x65, 0xfa, 0x61, 0xcc, 0x90, 0x83, 0xe0, 0x63, 0xd0, 0x17, 0xe1, 0x25, 0x41, 0xa3,
	0x87, 0x32, 0x2e, 0xaa, 0xce, 0x09, 0x82, 0x16, 0xe8, 0xa5, 0x24, 0xa4, 0x7e, 0x34, 0xea, 0xc9,
	0xfb, 0x77, 0xba, 0xf7, 0xcf, 0x65, 0xd6, 0x2d, 0xab, 0xe0, 0x13, 0x00, 0x82, 0x68, 0x99, 0x72,
	0x9c, 0x88, 0x1d, 0x7d, 0x39, 0x6b, 0x58, 0x46, 0x1c, 0x04, 0x77, 0xc1, 0x50, 0xdc, 0x96, 0xc6,
	0x7e, 0x80, 0x47, 0x83, 0x22, 0x5b, 0x05, 0xe0, 0x09, 0xd8, 0xae, 0xdf, 0x21, 0xe5, 0x7e, 0xc2,
	0x3d, 0xc1, 0xdf, 0x68, 0x28, 0x57, 0x8f, 0xad, 0x82, 0x5c, 0x4b, 0x91, 0x6b, 0x7d, 0xab, 0xc8,
	0x75, 0x61, 0xd5, 0x37, 0x17, 0x6d, 0x22, 0x01, 0x3f, 0x00, 0x03, 0xb2, 0xf0, 0x43, 0x2c, 0x0e,
	0x01, 0x72, 0x55, 0x5f, 0xfe, 0x76, 0xd0, 0xf8, 0x14, 0x0c, 0x14, 0xce, 0x10, 0x82, 0x75, 0xa1,
	0x24, 0xc9, 0xcf, 0xa6, 0x2b, 0x9f, 0xe1, 0x01, 0x18, 0xc8, 0x25, 0x01, 0x8b, 0x24, 0xd8, 0x5b,
	0x87, 0x8f, 0xaa, 0xf7, 0x3e, 0x79, 0x71, 0x56, 0xa6, 0xdc, 0xaa, 0xc8, 0xfc, 0x7b, 0x0d, 0x18,
	0xab, 0x09, 0xfd, 0x32, 0x61, 0x8b, 0x39, 0xa6, 0x29, 0x4b, 0xde, 0xca, 0x26, 0xf8, 0x19, 0xe8,
	0x97, 0x42, 0x94, 0x04, 0x6f, 0x1c, 0x9a, 0x5d, 0x46, 0x1c, 0xa5, 0xcf, 0x73, 0x4a, 0x5e, 0x2d,
	0xf1, 0xd7, 0xf8, 0xc6, 0x55, 0x2d, 0xf0, 0x18, 0xbc, 0x17, 0x44, 0x2c, 0xc5, 0x5e, 0xe5, 0x0b,
	0xa9, 0x83, 0x37, 0x83, 0xbb, 0x25, 0x5b, 0xaa, 0xdf, 0x1d, 0x8e, 0x7b, 0x5d, 0x8e, 0xef, 0xc8,
	0xb5, 0xbf, 0x42, 0xae, 0x0d, 0xc1, 0x0d, 0x5a, 0x82, 0x6b, 0x29, 0x64, 0xd8, 0x51, 0x88, 0xf9,
	0x5b, 0x1f, 0x3c, 0x59, 0x8d, 0xf3, 0xbc, 0x00, 0x01, 0xee, 0x83, 0x35, 0x82, 0x24, 0xc4, 0x43,
	0xfb, 0x71, 0x9e, 0xe9, 0x8f, 0xd2, 0x57, 0xd1, 0x91, 0x19, 0x5f, 0x4f, 0xf9, 0x4d, 0x8c, 0x27,
	0xcb, 0x25, 0x41, 0x4f, 0x4d, 0x77, 0x8d, 0x20, 0xf8, 0xac, 0x64, 0x43, 0xa0, 0xbe, 0x59, 0x96,
	0x62, 0x3f, 0x09, 0xae, 0x8e, 0x4c, 0x31, 0x6f, 0x2a, 0x50, 0xc5, 0x66, 0x49, 0xd3, 0x37, 0x0d,
	0x9a, 0x1e, 0xfc, 0x27, 0x4d, 0xb6, 0x91, 0x67, 0xfa, 0x6e, 0x73, 0x8a, 0xa1, 0x52, 0x6a, 0x5c,
	0x4d, 0x24, 0xfa, 0x1f, 0x54, 0xd8, 0x7a, 0x9e, 0xe9, 0x1f, 0xaa, 0x05, 0xc7, 0xa2, 0x1d, 0x19,
	0x22, 0x3b, 0xbd, 0x22, 0x08, 0x61, 0x6a, 0xde, 0xe1, 0xea, 0x17, 0x0d, 0x6c, 0xdf, 0xf9, 0x70,
	0x79, 0xca, 0xe6, 0x76, 0x90, 0x67, 0xba, 0x57, 0x1d, 0x5c, 0xd4, 0x19, 0xce, 0xac, 0xbc, 0xd6,
	0x90, 0xd8, 0x5d, 0x5e, 0x4f, 0xba, 0xca, 0x3a, 0x22, 0xe8, 0xe9, 0x94, 0xb2, 0xe7, 0x97, 0xd7,
	0xcf, 0x03, 0x46, 0x53, 0x9e, 0xf8, 0x84, 0xf2, 0x29, 0xa1, 0x08, 0xff, 0xf8, 0xf9, 0x05, 0x4f,
	0x30, 0x6e, 0xa1, 0x0d, 0xe3, 0x4e, 0xbb, 0x83, 0xe0, 0x31, 0xe8, 0xc9, 0x4b, 0x0b, 0xfd, 0x0c,
	0xec, 0x67, 0x79, 0xa6, 0xef, 0xb7, 0x5f, 0xac, 0x75, 0x44, 0x63, 0xb6, 0xe9, 0x96, 0xad, 0x4d,
	0x2f, 0xf4, 0xef, 0xef, 0x85, 0x9f, 0xb5, 0xae, 0x50, 0xa5, 0x12, 0xed, 0x1f, 0xf2, 0x4c, 0xff,
	0x5e, 0x9d, 0x32, 0xab, 0x0a, 0x56, 0xc0, 0x52, 0x27, 0xef, 0x07, 0x48, 0xdb, 0x0a, 0x51, 0x6d,
	0x05, 0xa9, 0x77, 0x7b, 0x9e, 0x67, 0xfa, 0x69, 0xad, 0x22, 0x64, 0x9c, 0x3b, 0x33, 0x45, 0x70,
	0x4d, 0x09, 0x43, 0x6f, 0x5a, 0x7a, 0xe5, 0xa7, 0x57, 0xad, 0x9d, 0xca, 0x5f, 0x5f, 0xb5, 0xcc,
	0x2b, 0xbf, 0x8b, 0xf6, 0x24, 0xcf, 0xf4, 0x8f, 0x6b, 0xf0, 0x65, 0xd6, 0x70, 0x66, 0xe5, 0xb2,
	0xe6, 0x94, 0x86, 0xcd, 0x5f, 0x34, 0x8d, 0xba, 0x21, 0xe7, 0xec, 0xe4, 0x99, 0x0e, 0xd5, 0x9c,
	0x97, 0x95, 0x69, 0x1b, 0x06, 0xb6, 0x77, 0x7f, 0xbf, 0xdd, 0xd3, 0xfe, 0xb8, 0xdd, 0xd3, 0xfe,
	0xbc, 0xdd, 0xd3, 0x7e, 0xfd, 0x6b, 0xef, 0x9d, 0xef, 0xd4, 0x7f, 0xf7, 0x3f, 0x9a, 0x76, 0xd1,
	0x93, 0x92, 0xff, 0xf4, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x6d, 0xbd, 0xb5, 0xf9, 0x07,
	0x00, 0x00,
}

func (m *ProcessListeningOnPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessListeningOnPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessListeningOnPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x52
	}
	if m.ContainerStartTime != nil {
		{
			size, err := m.ContainerStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Signal != nil {
		{
			size, err := m.Signal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PodId) > 0 {
		i -= len(m.PodId)
		copy(dAtA[i:], m.PodId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.PodId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessListeningOnPort_Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessListeningOnPort_Endpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessListeningOnPort_Endpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocol != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessListeningOnPortFromSensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessListeningOnPortFromSensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessListeningOnPortFromSensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x32
	}
	if m.CloseTimestamp != nil {
		{
			size, err := m.CloseTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Protocol != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessListeningOnPortStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessListeningOnPortStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessListeningOnPortStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x42
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Closed {
		i--
		if m.Closed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProcessIndicatorId) > 0 {
		i -= len(m.ProcessIndicatorId)
		copy(dAtA[i:], m.ProcessIndicatorId)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.ProcessIndicatorId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CloseTimestamp != nil {
		{
			size, err := m.CloseTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProcessListeningOnPort(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessListeningOnPort(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessListeningOnPort(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProcessListeningOnPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Endpoint != nil {
		l = m.Endpoint.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.PodId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.Signal != nil {
		l = m.Signal.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.ContainerStartTime != nil {
		l = m.ContainerStartTime.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessListeningOnPort_Endpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Port))
	}
	if m.Protocol != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Protocol))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessListeningOnPortFromSensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Port))
	}
	if m.Protocol != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Protocol))
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.CloseTimestamp != nil {
		l = m.CloseTimestamp.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessListeningOnPortStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Port))
	}
	if m.Protocol != 0 {
		n += 1 + sovProcessListeningOnPort(uint64(m.Protocol))
	}
	if m.CloseTimestamp != nil {
		l = m.CloseTimestamp.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ProcessIndicatorId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.Closed {
		n += 2
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessListeningOnPort(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProcessListeningOnPort(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessListeningOnPort(x uint64) (n int) {
	return sovProcessListeningOnPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProcessListeningOnPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessListeningOnPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessListeningOnPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessListeningOnPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &ProcessListeningOnPort_Endpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signal == nil {
				m.Signal = &ProcessSignal{}
			}
			if err := m.Signal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerStartTime == nil {
				m.ContainerStartTime = &types.Timestamp{}
			}
			if err := m.ContainerStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessListeningOnPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessListeningOnPort_Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessListeningOnPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= L4Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcessListeningOnPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessListeningOnPortFromSensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessListeningOnPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessListeningOnPortFromSensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessListeningOnPortFromSensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= L4Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &ProcessIndicatorUniqueKey{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTimestamp == nil {
				m.CloseTimestamp = &types.Timestamp{}
			}
			if err := m.CloseTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessListeningOnPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessListeningOnPortStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessListeningOnPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessListeningOnPortStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessListeningOnPortStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= L4Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTimestamp == nil {
				m.CloseTimestamp = &types.Timestamp{}
			}
			if err := m.CloseTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessIndicatorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessIndicatorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &ProcessIndicatorUniqueKey{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessListeningOnPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessListeningOnPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessListeningOnPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessListeningOnPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessListeningOnPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessListeningOnPort
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessListeningOnPort
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessListeningOnPort
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessListeningOnPort        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessListeningOnPort          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessListeningOnPort = fmt.Errorf("proto: unexpected end of group")
)
