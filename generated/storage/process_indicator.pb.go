// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/process_indicator.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next available tag: 13
type ProcessIndicator struct {
	// A unique UUID for the Indicator message
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Process ID,store,hidden"  sql:"pk,type(uuid)"`
	DeploymentId  string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" search:"Deployment ID,store,hidden" policy:",prefer-parent" sql:"index=hash,fk(Deployment:id),no-fk-constraint,type(uuid)"`
	ContainerName string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty" search:"Container Name,hidden" policy:",prefer-parent"`
	// Pod name
	PodId  string `protobuf:"bytes,4,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" search:"Pod ID,hidden"`
	PodUid string `protobuf:"bytes,11,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty" search:"Pod UID,hidden" sql:"index=hash,type(uuid)"`
	// A process signal message passed from Collector to Sensor
	Signal               *ProcessSignal   `protobuf:"bytes,6,opt,name=signal,proto3" json:"signal,omitempty"`
	ClusterId            string           `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,store,hidden" policy:",prefer-parent" sql:"type(uuid)"`
	Namespace            string           `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace,store,hidden" policy:",prefer-parent"`
	ContainerStartTime   *types.Timestamp `protobuf:"bytes,9,opt,name=container_start_time,json=containerStartTime,proto3" json:"container_start_time,omitempty"`
	ImageId              string           `protobuf:"bytes,12,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ProcessIndicator) Reset()         { *m = ProcessIndicator{} }
func (m *ProcessIndicator) String() string { return proto.CompactTextString(m) }
func (*ProcessIndicator) ProtoMessage()    {}
func (*ProcessIndicator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a226da59a324d96a, []int{0}
}
func (m *ProcessIndicator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessIndicator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessIndicator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessIndicator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessIndicator.Merge(m, src)
}
func (m *ProcessIndicator) XXX_Size() int {
	return m.Size()
}
func (m *ProcessIndicator) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessIndicator.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessIndicator proto.InternalMessageInfo

func (m *ProcessIndicator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessIndicator) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessIndicator) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ProcessIndicator) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *ProcessIndicator) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *ProcessIndicator) GetSignal() *ProcessSignal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *ProcessIndicator) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessIndicator) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessIndicator) GetContainerStartTime() *types.Timestamp {
	if m != nil {
		return m.ContainerStartTime
	}
	return nil
}

func (m *ProcessIndicator) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ProcessIndicator) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessIndicator) Clone() *ProcessIndicator {
	if m == nil {
		return nil
	}
	cloned := new(ProcessIndicator)
	*cloned = *m

	cloned.Signal = m.Signal.Clone()
	cloned.ContainerStartTime = m.ContainerStartTime.Clone()
	return cloned
}

// This is the unique key we store process indicators under in Bolt.
// This is stored in the DB, so please follow proto compatibility rules for it,
// OR discard existing values and repopulate it on startup.
type ProcessIndicatorUniqueKey struct {
	PodId                string   `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	ContainerName        string   `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ProcessName          string   `protobuf:"bytes,3,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	ProcessExecFilePath  string   `protobuf:"bytes,4,opt,name=process_exec_file_path,json=processExecFilePath,proto3" json:"process_exec_file_path,omitempty"`
	ProcessArgs          string   `protobuf:"bytes,5,opt,name=process_args,json=processArgs,proto3" json:"process_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessIndicatorUniqueKey) Reset()         { *m = ProcessIndicatorUniqueKey{} }
func (m *ProcessIndicatorUniqueKey) String() string { return proto.CompactTextString(m) }
func (*ProcessIndicatorUniqueKey) ProtoMessage()    {}
func (*ProcessIndicatorUniqueKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a226da59a324d96a, []int{1}
}
func (m *ProcessIndicatorUniqueKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessIndicatorUniqueKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessIndicatorUniqueKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessIndicatorUniqueKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessIndicatorUniqueKey.Merge(m, src)
}
func (m *ProcessIndicatorUniqueKey) XXX_Size() int {
	return m.Size()
}
func (m *ProcessIndicatorUniqueKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessIndicatorUniqueKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessIndicatorUniqueKey proto.InternalMessageInfo

func (m *ProcessIndicatorUniqueKey) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *ProcessIndicatorUniqueKey) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ProcessIndicatorUniqueKey) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *ProcessIndicatorUniqueKey) GetProcessExecFilePath() string {
	if m != nil {
		return m.ProcessExecFilePath
	}
	return ""
}

func (m *ProcessIndicatorUniqueKey) GetProcessArgs() string {
	if m != nil {
		return m.ProcessArgs
	}
	return ""
}

func (m *ProcessIndicatorUniqueKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessIndicatorUniqueKey) Clone() *ProcessIndicatorUniqueKey {
	if m == nil {
		return nil
	}
	cloned := new(ProcessIndicatorUniqueKey)
	*cloned = *m

	return cloned
}

// This is the processes information which is added to endpoint data
type NetworkProcessUniqueKey struct {
	ProcessName          string   `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	ProcessExecFilePath  string   `protobuf:"bytes,2,opt,name=process_exec_file_path,json=processExecFilePath,proto3" json:"process_exec_file_path,omitempty"`
	ProcessArgs          string   `protobuf:"bytes,3,opt,name=process_args,json=processArgs,proto3" json:"process_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkProcessUniqueKey) Reset()         { *m = NetworkProcessUniqueKey{} }
func (m *NetworkProcessUniqueKey) String() string { return proto.CompactTextString(m) }
func (*NetworkProcessUniqueKey) ProtoMessage()    {}
func (*NetworkProcessUniqueKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a226da59a324d96a, []int{2}
}
func (m *NetworkProcessUniqueKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkProcessUniqueKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkProcessUniqueKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkProcessUniqueKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProcessUniqueKey.Merge(m, src)
}
func (m *NetworkProcessUniqueKey) XXX_Size() int {
	return m.Size()
}
func (m *NetworkProcessUniqueKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProcessUniqueKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProcessUniqueKey proto.InternalMessageInfo

func (m *NetworkProcessUniqueKey) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *NetworkProcessUniqueKey) GetProcessExecFilePath() string {
	if m != nil {
		return m.ProcessExecFilePath
	}
	return ""
}

func (m *NetworkProcessUniqueKey) GetProcessArgs() string {
	if m != nil {
		return m.ProcessArgs
	}
	return ""
}

func (m *NetworkProcessUniqueKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkProcessUniqueKey) Clone() *NetworkProcessUniqueKey {
	if m == nil {
		return nil
	}
	cloned := new(NetworkProcessUniqueKey)
	*cloned = *m

	return cloned
}

type ProcessSignal struct {
	// A unique UUID for identifying the message
	// We have this here instead of at the top level
	// because we want to have each message to be
	// self contained.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of container associated with this process
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" search:"Container ID,hidden"`
	// Process creation time
	Time *types.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty" search:"Process Creation Time,hidden"`
	// Process name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" search:"Process Name"`
	// Process arguments
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty" search:"Process Arguments"`
	// Process executable file path
	ExecFilePath string `protobuf:"bytes,6,opt,name=exec_file_path,json=execFilePath,proto3" json:"exec_file_path,omitempty" search:"Process Path"`
	// Host process ID
	Pid uint32 `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`
	// Real user ID
	Uid uint32 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty" search:"Process UID"`
	// Real group ID
	Gid uint32 `protobuf:"varint,9,opt,name=gid,proto3" json:"gid,omitempty"`
	// Process Lineage
	Lineage []string `protobuf:"bytes,10,rep,name=lineage,proto3" json:"lineage,omitempty"` // Deprecated: Do not use.
	// Signal origin
	Scraped bool `protobuf:"varint,11,opt,name=scraped,proto3" json:"scraped,omitempty"`
	// Process LineageInfo
	LineageInfo          []*ProcessSignal_LineageInfo `protobuf:"bytes,12,rep,name=lineage_info,json=lineageInfo,proto3" json:"lineage_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ProcessSignal) Reset()         { *m = ProcessSignal{} }
func (m *ProcessSignal) String() string { return proto.CompactTextString(m) }
func (*ProcessSignal) ProtoMessage()    {}
func (*ProcessSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a226da59a324d96a, []int{3}
}
func (m *ProcessSignal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessSignal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSignal.Merge(m, src)
}
func (m *ProcessSignal) XXX_Size() int {
	return m.Size()
}
func (m *ProcessSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSignal.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSignal proto.InternalMessageInfo

func (m *ProcessSignal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessSignal) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ProcessSignal) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ProcessSignal) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessSignal) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *ProcessSignal) GetExecFilePath() string {
	if m != nil {
		return m.ExecFilePath
	}
	return ""
}

func (m *ProcessSignal) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessSignal) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ProcessSignal) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

// Deprecated: Do not use.
func (m *ProcessSignal) GetLineage() []string {
	if m != nil {
		return m.Lineage
	}
	return nil
}

func (m *ProcessSignal) GetScraped() bool {
	if m != nil {
		return m.Scraped
	}
	return false
}

func (m *ProcessSignal) GetLineageInfo() []*ProcessSignal_LineageInfo {
	if m != nil {
		return m.LineageInfo
	}
	return nil
}

func (m *ProcessSignal) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessSignal) Clone() *ProcessSignal {
	if m == nil {
		return nil
	}
	cloned := new(ProcessSignal)
	*cloned = *m

	cloned.Time = m.Time.Clone()
	if m.Lineage != nil {
		cloned.Lineage = make([]string, len(m.Lineage))
		copy(cloned.Lineage, m.Lineage)
	}
	if m.LineageInfo != nil {
		cloned.LineageInfo = make([]*ProcessSignal_LineageInfo, len(m.LineageInfo))
		for idx, v := range m.LineageInfo {
			cloned.LineageInfo[idx] = v.Clone()
		}
	}
	return cloned
}

type ProcessSignal_LineageInfo struct {
	ParentUid            uint32   `protobuf:"varint,1,opt,name=parent_uid,json=parentUid,proto3" json:"parent_uid,omitempty"`
	ParentExecFilePath   string   `protobuf:"bytes,2,opt,name=parent_exec_file_path,json=parentExecFilePath,proto3" json:"parent_exec_file_path,omitempty" policy:"Process Ancestor"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessSignal_LineageInfo) Reset()         { *m = ProcessSignal_LineageInfo{} }
func (m *ProcessSignal_LineageInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessSignal_LineageInfo) ProtoMessage()    {}
func (*ProcessSignal_LineageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a226da59a324d96a, []int{3, 0}
}
func (m *ProcessSignal_LineageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessSignal_LineageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessSignal_LineageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessSignal_LineageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSignal_LineageInfo.Merge(m, src)
}
func (m *ProcessSignal_LineageInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessSignal_LineageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSignal_LineageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSignal_LineageInfo proto.InternalMessageInfo

func (m *ProcessSignal_LineageInfo) GetParentUid() uint32 {
	if m != nil {
		return m.ParentUid
	}
	return 0
}

func (m *ProcessSignal_LineageInfo) GetParentExecFilePath() string {
	if m != nil {
		return m.ParentExecFilePath
	}
	return ""
}

func (m *ProcessSignal_LineageInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessSignal_LineageInfo) Clone() *ProcessSignal_LineageInfo {
	if m == nil {
		return nil
	}
	cloned := new(ProcessSignal_LineageInfo)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*ProcessIndicator)(nil), "storage.ProcessIndicator")
	proto.RegisterType((*ProcessIndicatorUniqueKey)(nil), "storage.ProcessIndicatorUniqueKey")
	proto.RegisterType((*NetworkProcessUniqueKey)(nil), "storage.NetworkProcessUniqueKey")
	proto.RegisterType((*ProcessSignal)(nil), "storage.ProcessSignal")
	proto.RegisterType((*ProcessSignal_LineageInfo)(nil), "storage.ProcessSignal.LineageInfo")
}

func init() { proto.RegisterFile("storage/process_indicator.proto", fileDescriptor_a226da59a324d96a) }

var fileDescriptor_a226da59a324d96a = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x4d, 0x9a, 0x34, 0x93, 0xa4, 0xaa, 0x86, 0xb6, 0xb8, 0xd1, 0x6e, 0x6c, 0x2c, 0xad,
	0x94, 0xa2, 0x34, 0x15, 0xad, 0xa0, 0x22, 0x08, 0xa1, 0x4d, 0xbb, 0x48, 0x5e, 0x96, 0xaa, 0xf2,
	0xd2, 0x03, 0x5c, 0xa2, 0x59, 0xcf, 0xc4, 0x19, 0xc5, 0xf1, 0x78, 0xc7, 0x13, 0xd1, 0x72, 0xd8,
	0x4f, 0xc1, 0x81, 0x3b, 0xdf, 0x80, 0x4f, 0xc1, 0x91, 0x03, 0x17, 0x2e, 0x16, 0x2a, 0xdf, 0xc0,
	0x27, 0x8e, 0x68, 0xc6, 0xff, 0xd2, 0x64, 0x57, 0xbb, 0x7b, 0x8b, 0xe7, 0xfd, 0xde, 0xef, 0xfd,
	0xe6, 0xcd, 0x7b, 0xbf, 0x00, 0x23, 0x12, 0x8c, 0x23, 0x8f, 0x1c, 0x87, 0x9c, 0xb9, 0x24, 0x8a,
	0xc6, 0x34, 0xc0, 0xd4, 0x45, 0x82, 0xf1, 0x41, 0xc8, 0x99, 0x60, 0xb0, 0x9e, 0x01, 0x3a, 0xbb,
	0x1e, 0xf3, 0x98, 0x3a, 0x3b, 0x96, 0xbf, 0xd2, 0x70, 0xc7, 0xf0, 0x18, 0xf3, 0x7c, 0x95, 0x2e,
	0xd8, 0x8b, 0xc5, 0xe4, 0x58, 0xd0, 0x39, 0x89, 0x04, 0x9a, 0x87, 0x29, 0xc0, 0xfa, 0xbb, 0x06,
	0x76, 0xae, 0x52, 0x6e, 0x3b, 0xa7, 0x86, 0x36, 0xd8, 0xa0, 0x58, 0xd7, 0x4c, 0xad, 0xd7, 0x18,
	0x7d, 0x91, 0xc4, 0xc6, 0x67, 0x11, 0x41, 0xdc, 0x9d, 0x0e, 0xad, 0x0c, 0x69, 0xda, 0x17, 0x7d,
	0x59, 0x97, 0xf4, 0xa7, 0x14, 0x63, 0x12, 0x58, 0xa6, 0x19, 0xbd, 0xf4, 0x87, 0x56, 0x38, 0xeb,
	0x8b, 0xdb, 0x90, 0xf4, 0x16, 0x0b, 0x8a, 0x0f, 0x2d, 0x67, 0x83, 0x62, 0xf8, 0x9b, 0x06, 0xda,
	0x98, 0x84, 0x3e, 0xbb, 0x9d, 0x93, 0x40, 0x8c, 0x29, 0xd6, 0x37, 0x14, 0xed, 0xab, 0x24, 0x36,
	0x7e, 0xce, 0x69, 0x2f, 0x0a, 0xc0, 0x3a, 0x73, 0xc8, 0x7c, 0xea, 0xde, 0x0e, 0xad, 0x7e, 0xc8,
	0xc9, 0x84, 0xf0, 0xa3, 0x10, 0x71, 0x12, 0x08, 0x2b, 0x2d, 0x48, 0x03, 0x4c, 0x6e, 0xbe, 0x9a,
	0xa2, 0x68, 0xda, 0x9f, 0xcc, 0x7a, 0x25, 0xcd, 0x90, 0xe2, 0xc3, 0x7e, 0xc0, 0x8e, 0x26, 0xb3,
	0x23, 0x97, 0x05, 0x91, 0xe0, 0x88, 0x06, 0xe2, 0x9e, 0xb6, 0x56, 0x29, 0xca, 0xc6, 0x10, 0x81,
	0x6d, 0x97, 0x05, 0x02, 0xd1, 0x80, 0xf0, 0x71, 0x80, 0xe6, 0x44, 0xaf, 0x28, 0x95, 0xc3, 0x24,
	0x36, 0x3e, 0xcf, 0x55, 0x9e, 0xe7, 0x08, 0xf3, 0x12, 0xcd, 0xdf, 0x2a, 0xd0, 0x69, 0x17, 0x8c,
	0x12, 0x0e, 0x3f, 0x05, 0xb5, 0x90, 0x61, 0xd9, 0x80, 0xaa, 0xa2, 0xee, 0x24, 0xb1, 0xb1, 0x5f,
	0xf4, 0x95, 0x61, 0x79, 0xf3, 0x8c, 0xd2, 0xd9, 0x0c, 0x19, 0xb6, 0x31, 0xbc, 0x02, 0x75, 0x99,
	0xb2, 0xa0, 0x58, 0x6f, 0xaa, 0x9c, 0xb3, 0x24, 0x36, 0x4e, 0x97, 0x73, 0xae, 0xcb, 0xa4, 0xb5,
	0x86, 0x2c, 0xdf, 0x56, 0x96, 0xbe, 0xa6, 0x18, 0x0e, 0x40, 0x2d, 0xa2, 0x5e, 0x80, 0x7c, 0xbd,
	0x66, 0x6a, 0xbd, 0xe6, 0xc9, 0xfe, 0x20, 0x1b, 0x9f, 0x41, 0xf6, 0xb2, 0xcf, 0x55, 0xd4, 0xc9,
	0x50, 0xd0, 0x07, 0xc0, 0xf5, 0x17, 0x91, 0x20, 0x5c, 0x0a, 0xaf, 0x2b, 0x11, 0xdf, 0x25, 0xb1,
	0x61, 0x17, 0x3d, 0x49, 0xa3, 0xef, 0xf9, 0x6c, 0xcb, 0xd2, 0x1a, 0x59, 0x01, 0x1b, 0xc3, 0x1f,
	0x40, 0x43, 0xf6, 0x3e, 0x0a, 0x91, 0x4b, 0xf4, 0x2d, 0x55, 0xec, 0xcb, 0x24, 0x36, 0xce, 0xf2,
	0x62, 0x97, 0x79, 0xf0, 0xdd, 0x6a, 0x39, 0x25, 0x1b, 0x7c, 0x06, 0x76, 0xcb, 0x07, 0x8e, 0x04,
	0xe2, 0x62, 0x2c, 0x37, 0x41, 0x6f, 0xa8, 0x36, 0x74, 0x06, 0xe9, 0x9a, 0x0c, 0xf2, 0x35, 0x19,
	0x7c, 0x9f, 0xaf, 0x89, 0x03, 0x8b, 0xbc, 0xe7, 0x32, 0x4d, 0x06, 0xe0, 0x01, 0xd8, 0xa2, 0x73,
	0xe4, 0x11, 0xd9, 0x94, 0x96, 0xd4, 0xe9, 0xd4, 0xd5, 0xb7, 0x8d, 0x9f, 0x56, 0xb7, 0xc0, 0x4e,
	0xf3, 0x69, 0x75, 0x6b, 0x73, 0xa7, 0x66, 0xfd, 0xa5, 0x81, 0x83, 0xd5, 0xdd, 0xba, 0x0e, 0xe8,
	0xcb, 0x05, 0xf9, 0x96, 0xdc, 0xc2, 0xbd, 0x62, 0x20, 0xd4, 0xa2, 0xe5, 0x8f, 0xfe, 0x68, 0x6d,
	0x14, 0xd5, 0xc2, 0xac, 0x8e, 0xd3, 0xc7, 0xa0, 0x95, 0x5b, 0x42, 0x39, 0xaf, 0x4e, 0x33, 0x3b,
	0x53, 0x90, 0x53, 0xb0, 0x9f, 0x43, 0xc8, 0x0d, 0x71, 0xc7, 0x13, 0xea, 0x93, 0x71, 0x88, 0xc4,
	0x34, 0x9d, 0x40, 0xe7, 0xc3, 0x2c, 0xfa, 0xe4, 0x86, 0xb8, 0xdf, 0x50, 0x9f, 0x5c, 0x21, 0x31,
	0x5d, 0xe6, 0x45, 0xdc, 0x8b, 0xf4, 0xcd, 0x7b, 0xbc, 0x8f, 0xb9, 0x17, 0x59, 0xbf, 0x68, 0xe0,
	0xa3, 0x4b, 0x22, 0x7e, 0x62, 0x7c, 0x96, 0xdd, 0xae, 0xbc, 0xd4, 0xaa, 0x2c, 0xed, 0x7d, 0x64,
	0x6d, 0xbc, 0xbb, 0xac, 0xca, 0xba, 0xac, 0xdf, 0x37, 0x41, 0xfb, 0xde, 0x14, 0xc3, 0xed, 0xd2,
	0xc6, 0x94, 0x17, 0x9d, 0x83, 0x56, 0xd9, 0xda, 0xc2, 0x89, 0xcc, 0x24, 0x36, 0x1e, 0xac, 0xef,
	0xf8, 0xd2, 0x3a, 0x36, 0x8b, 0x2c, 0x35, 0xa4, 0x55, 0x35, 0x39, 0x95, 0xb7, 0x4d, 0xce, 0xe8,
	0x30, 0x89, 0x8d, 0x47, 0xab, 0xce, 0x79, 0xce, 0x09, 0x12, 0x94, 0x05, 0xa6, 0xc4, 0x15, 0x15,
	0x14, 0x25, 0x3c, 0x02, 0x55, 0xd5, 0xb4, 0xd4, 0x20, 0x0e, 0x92, 0xd8, 0xd8, 0x5b, 0x4d, 0x97,
	0x1d, 0xb4, 0x1c, 0x05, 0x83, 0x27, 0xa0, 0x5a, 0x3e, 0xd1, 0xa8, 0x9b, 0xc4, 0x46, 0x67, 0x15,
	0xfe, 0x98, 0x7b, 0x0b, 0x69, 0x71, 0x91, 0xe5, 0x28, 0x2c, 0xfc, 0x1a, 0x6c, 0xaf, 0x34, 0xbd,
	0xf6, 0xe6, 0x62, 0xb2, 0xf3, 0x96, 0xd3, 0x22, 0xcb, 0x0f, 0xb1, 0x03, 0x2a, 0x61, 0x66, 0x05,
	0x6d, 0x47, 0xfe, 0x84, 0x9f, 0x80, 0x8a, 0x74, 0x28, 0xb9, 0xaf, 0xed, 0x91, 0x9e, 0xc4, 0xc6,
	0xee, 0x2a, 0xcf, 0xb5, 0x7d, 0x61, 0x39, 0x12, 0x24, 0xb3, 0x3d, 0x8a, 0xd5, 0xd6, 0xb5, 0x1d,
	0xf9, 0x13, 0x3e, 0x00, 0x75, 0x9f, 0x06, 0x04, 0x79, 0x44, 0x07, 0x66, 0xa5, 0xd7, 0x18, 0x6d,
	0xe8, 0x9a, 0x93, 0x1f, 0x41, 0x1d, 0xd4, 0x23, 0x97, 0xa3, 0x90, 0xa4, 0x0e, 0xb8, 0xe5, 0xe4,
	0x9f, 0xf0, 0x09, 0x68, 0x65, 0xa0, 0x31, 0x0d, 0x26, 0x4c, 0x6f, 0x99, 0x95, 0x5e, 0xf3, 0xc4,
	0x7a, 0xbd, 0x9f, 0x0d, 0x9e, 0xa5, 0x50, 0x3b, 0x98, 0x30, 0xa7, 0xe9, 0x97, 0x1f, 0x9d, 0x57,
	0xa0, 0xb9, 0x14, 0x83, 0x0f, 0x01, 0x48, 0xcd, 0x43, 0x99, 0xae, 0xa6, 0x64, 0x36, 0xd2, 0x13,
	0x69, 0x9f, 0x57, 0x60, 0x2f, 0x0b, 0xbf, 0x6e, 0x72, 0x47, 0x0f, 0x93, 0xd8, 0x38, 0xc8, 0xcd,
	0xa8, 0x78, 0x82, 0xc0, 0x25, 0x52, 0x94, 0xe5, 0xc0, 0x34, 0x77, 0x79, 0xae, 0x47, 0x67, 0x7f,
	0xdc, 0x75, 0xb5, 0x3f, 0xef, 0xba, 0xda, 0x3f, 0x77, 0x5d, 0xed, 0xd7, 0x7f, 0xbb, 0x1f, 0x80,
	0x03, 0xca, 0x06, 0x91, 0x40, 0xee, 0x8c, 0xb3, 0x9b, 0x74, 0xaa, 0xf2, 0x3b, 0xfd, 0x98, 0xff,
	0xd7, 0xff, 0xa7, 0x69, 0x2f, 0x6a, 0x2a, 0x74, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0x93, 0xa4, 0x88, 0x21, 0x08, 0x00, 0x00,
}

func (m *ProcessIndicator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessIndicator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessIndicator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PodUid) > 0 {
		i -= len(m.PodUid)
		copy(dAtA[i:], m.PodUid)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.PodUid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ContainerStartTime != nil {
		{
			size, err := m.ContainerStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessIndicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Signal != nil {
		{
			size, err := m.Signal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessIndicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PodId) > 0 {
		i -= len(m.PodId)
		copy(dAtA[i:], m.PodId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.PodId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessIndicatorUniqueKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessIndicatorUniqueKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessIndicatorUniqueKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProcessArgs) > 0 {
		i -= len(m.ProcessArgs)
		copy(dAtA[i:], m.ProcessArgs)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessArgs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProcessExecFilePath) > 0 {
		i -= len(m.ProcessExecFilePath)
		copy(dAtA[i:], m.ProcessExecFilePath)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessExecFilePath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProcessName) > 0 {
		i -= len(m.ProcessName)
		copy(dAtA[i:], m.ProcessName)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodId) > 0 {
		i -= len(m.PodId)
		copy(dAtA[i:], m.PodId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.PodId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkProcessUniqueKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkProcessUniqueKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkProcessUniqueKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProcessArgs) > 0 {
		i -= len(m.ProcessArgs)
		copy(dAtA[i:], m.ProcessArgs)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessArgs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProcessExecFilePath) > 0 {
		i -= len(m.ProcessExecFilePath)
		copy(dAtA[i:], m.ProcessExecFilePath)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessExecFilePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProcessName) > 0 {
		i -= len(m.ProcessName)
		copy(dAtA[i:], m.ProcessName)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ProcessName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessSignal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LineageInfo) > 0 {
		for iNdEx := len(m.LineageInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LineageInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessIndicator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Scraped {
		i--
		if m.Scraped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Lineage) > 0 {
		for iNdEx := len(m.Lineage) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Lineage[iNdEx])
			copy(dAtA[i:], m.Lineage[iNdEx])
			i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Lineage[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Gid != 0 {
		i = encodeVarintProcessIndicator(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x48
	}
	if m.Uid != 0 {
		i = encodeVarintProcessIndicator(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x40
	}
	if m.Pid != 0 {
		i = encodeVarintProcessIndicator(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExecFilePath) > 0 {
		i -= len(m.ExecFilePath)
		copy(dAtA[i:], m.ExecFilePath)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ExecFilePath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessIndicator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessSignal_LineageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessSignal_LineageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessSignal_LineageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParentExecFilePath) > 0 {
		i -= len(m.ParentExecFilePath)
		copy(dAtA[i:], m.ParentExecFilePath)
		i = encodeVarintProcessIndicator(dAtA, i, uint64(len(m.ParentExecFilePath)))
		i--
		dAtA[i] = 0x12
	}
	if m.ParentUid != 0 {
		i = encodeVarintProcessIndicator(dAtA, i, uint64(m.ParentUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessIndicator(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessIndicator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProcessIndicator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.PodId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.Signal != nil {
		l = m.Signal.Size()
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.ContainerStartTime != nil {
		l = m.ContainerStartTime.Size()
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.PodUid)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessIndicatorUniqueKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ProcessName)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ProcessExecFilePath)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ProcessArgs)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkProcessUniqueKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessName)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ProcessExecFilePath)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ProcessArgs)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	l = len(m.ExecFilePath)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovProcessIndicator(uint64(m.Pid))
	}
	if m.Uid != 0 {
		n += 1 + sovProcessIndicator(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovProcessIndicator(uint64(m.Gid))
	}
	if len(m.Lineage) > 0 {
		for _, s := range m.Lineage {
			l = len(s)
			n += 1 + l + sovProcessIndicator(uint64(l))
		}
	}
	if m.Scraped {
		n += 2
	}
	if len(m.LineageInfo) > 0 {
		for _, e := range m.LineageInfo {
			l = e.Size()
			n += 1 + l + sovProcessIndicator(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessSignal_LineageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentUid != 0 {
		n += 1 + sovProcessIndicator(uint64(m.ParentUid))
	}
	l = len(m.ParentExecFilePath)
	if l > 0 {
		n += 1 + l + sovProcessIndicator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProcessIndicator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessIndicator(x uint64) (n int) {
	return sovProcessIndicator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProcessIndicator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessIndicator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessIndicator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signal == nil {
				m.Signal = &ProcessSignal{}
			}
			if err := m.Signal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerStartTime == nil {
				m.ContainerStartTime = &types.Timestamp{}
			}
			if err := m.ContainerStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessIndicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessIndicatorUniqueKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessIndicatorUniqueKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessIndicatorUniqueKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessExecFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessExecFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessIndicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkProcessUniqueKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkProcessUniqueKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkProcessUniqueKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessExecFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessExecFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessIndicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessSignal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessSignal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessSignal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lineage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lineage = append(m.Lineage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scraped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scraped = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineageInfo = append(m.LineageInfo, &ProcessSignal_LineageInfo{})
			if err := m.LineageInfo[len(m.LineageInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessIndicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessSignal_LineageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentUid", wireType)
			}
			m.ParentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentUid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentExecFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentExecFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessIndicator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessIndicator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessIndicator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessIndicator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessIndicator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessIndicator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessIndicator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessIndicator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessIndicator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessIndicator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessIndicator = fmt.Errorf("proto: unexpected end of group")
)
