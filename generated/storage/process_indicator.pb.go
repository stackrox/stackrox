// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/process_indicator.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next available tag: 13
type ProcessIndicator struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                 *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_DeploymentId       *string                `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId"`
	xxx_hidden_ContainerName      *string                `protobuf:"bytes,3,opt,name=container_name,json=containerName"`
	xxx_hidden_PodId              *string                `protobuf:"bytes,4,opt,name=pod_id,json=podId"`
	xxx_hidden_PodUid             *string                `protobuf:"bytes,11,opt,name=pod_uid,json=podUid"`
	xxx_hidden_Signal             *ProcessSignal         `protobuf:"bytes,6,opt,name=signal"`
	xxx_hidden_ClusterId          *string                `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId"`
	xxx_hidden_Namespace          *string                `protobuf:"bytes,8,opt,name=namespace"`
	xxx_hidden_ContainerStartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=container_start_time,json=containerStartTime"`
	xxx_hidden_ImageId            *string                `protobuf:"bytes,12,opt,name=image_id,json=imageId"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProcessIndicator) Reset() {
	*x = ProcessIndicator{}
	mi := &file_storage_process_indicator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIndicator) ProtoMessage() {}

func (x *ProcessIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessIndicator) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetDeploymentId() string {
	if x != nil {
		if x.xxx_hidden_DeploymentId != nil {
			return *x.xxx_hidden_DeploymentId
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetContainerName() string {
	if x != nil {
		if x.xxx_hidden_ContainerName != nil {
			return *x.xxx_hidden_ContainerName
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetPodId() string {
	if x != nil {
		if x.xxx_hidden_PodId != nil {
			return *x.xxx_hidden_PodId
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetPodUid() string {
	if x != nil {
		if x.xxx_hidden_PodUid != nil {
			return *x.xxx_hidden_PodUid
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetSignal() *ProcessSignal {
	if x != nil {
		return x.xxx_hidden_Signal
	}
	return nil
}

func (x *ProcessIndicator) GetClusterId() string {
	if x != nil {
		if x.xxx_hidden_ClusterId != nil {
			return *x.xxx_hidden_ClusterId
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetNamespace() string {
	if x != nil {
		if x.xxx_hidden_Namespace != nil {
			return *x.xxx_hidden_Namespace
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) GetContainerStartTime() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_ContainerStartTime) {
				protoimpl.X.UnmarshalField(x, 9)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ContainerStartTime), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *ProcessIndicator) GetImageId() string {
	if x != nil {
		if x.xxx_hidden_ImageId != nil {
			return *x.xxx_hidden_ImageId
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicator) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 10)
}

func (x *ProcessIndicator) SetDeploymentId(v string) {
	x.xxx_hidden_DeploymentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 10)
}

func (x *ProcessIndicator) SetContainerName(v string) {
	x.xxx_hidden_ContainerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 10)
}

func (x *ProcessIndicator) SetPodId(v string) {
	x.xxx_hidden_PodId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *ProcessIndicator) SetPodUid(v string) {
	x.xxx_hidden_PodUid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 10)
}

func (x *ProcessIndicator) SetSignal(v *ProcessSignal) {
	x.xxx_hidden_Signal = v
}

func (x *ProcessIndicator) SetClusterId(v string) {
	x.xxx_hidden_ClusterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 10)
}

func (x *ProcessIndicator) SetNamespace(v string) {
	x.xxx_hidden_Namespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 10)
}

func (x *ProcessIndicator) SetContainerStartTime(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ContainerStartTime, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 10)
	}
}

func (x *ProcessIndicator) SetImageId(v string) {
	x.xxx_hidden_ImageId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 10)
}

func (x *ProcessIndicator) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ProcessIndicator) HasDeploymentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ProcessIndicator) HasContainerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ProcessIndicator) HasPodId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ProcessIndicator) HasPodUid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ProcessIndicator) HasSignal() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Signal != nil
}

func (x *ProcessIndicator) HasClusterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ProcessIndicator) HasNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *ProcessIndicator) HasContainerStartTime() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *ProcessIndicator) HasImageId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *ProcessIndicator) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ProcessIndicator) ClearDeploymentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DeploymentId = nil
}

func (x *ProcessIndicator) ClearContainerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ContainerName = nil
}

func (x *ProcessIndicator) ClearPodId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_PodId = nil
}

func (x *ProcessIndicator) ClearPodUid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_PodUid = nil
}

func (x *ProcessIndicator) ClearSignal() {
	x.xxx_hidden_Signal = nil
}

func (x *ProcessIndicator) ClearClusterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ClusterId = nil
}

func (x *ProcessIndicator) ClearNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Namespace = nil
}

func (x *ProcessIndicator) ClearContainerStartTime() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ContainerStartTime, (*timestamppb.Timestamp)(nil))
}

func (x *ProcessIndicator) ClearImageId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_ImageId = nil
}

type ProcessIndicator_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique UUID for the Indicator message
	Id            *string
	DeploymentId  *string
	ContainerName *string
	// Pod name
	PodId  *string
	PodUid *string
	// A process signal message passed from Collector to Sensor
	Signal             *ProcessSignal
	ClusterId          *string
	Namespace          *string
	ContainerStartTime *timestamppb.Timestamp
	ImageId            *string
}

func (b0 ProcessIndicator_builder) Build() *ProcessIndicator {
	m0 := &ProcessIndicator{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 10)
		x.xxx_hidden_Id = b.Id
	}
	if b.DeploymentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 10)
		x.xxx_hidden_DeploymentId = b.DeploymentId
	}
	if b.ContainerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 10)
		x.xxx_hidden_ContainerName = b.ContainerName
	}
	if b.PodId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_PodId = b.PodId
	}
	if b.PodUid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 10)
		x.xxx_hidden_PodUid = b.PodUid
	}
	x.xxx_hidden_Signal = b.Signal
	if b.ClusterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 10)
		x.xxx_hidden_ClusterId = b.ClusterId
	}
	if b.Namespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 10)
		x.xxx_hidden_Namespace = b.Namespace
	}
	if b.ContainerStartTime != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 10)
		x.xxx_hidden_ContainerStartTime = b.ContainerStartTime
	}
	if b.ImageId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 10)
		x.xxx_hidden_ImageId = b.ImageId
	}
	return m0
}

// This is the unique key we store process indicators under in Bolt.
// This is stored in the DB, so please follow proto compatibility rules for it,
// OR discard existing values and repopulate it on startup.
type ProcessIndicatorUniqueKey struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PodId               *string                `protobuf:"bytes,1,opt,name=pod_id,json=podId"`
	xxx_hidden_ContainerName       *string                `protobuf:"bytes,2,opt,name=container_name,json=containerName"`
	xxx_hidden_ProcessName         *string                `protobuf:"bytes,3,opt,name=process_name,json=processName"`
	xxx_hidden_ProcessExecFilePath *string                `protobuf:"bytes,4,opt,name=process_exec_file_path,json=processExecFilePath"`
	xxx_hidden_ProcessArgs         *string                `protobuf:"bytes,5,opt,name=process_args,json=processArgs"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ProcessIndicatorUniqueKey) Reset() {
	*x = ProcessIndicatorUniqueKey{}
	mi := &file_storage_process_indicator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessIndicatorUniqueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIndicatorUniqueKey) ProtoMessage() {}

func (x *ProcessIndicatorUniqueKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessIndicatorUniqueKey) GetPodId() string {
	if x != nil {
		if x.xxx_hidden_PodId != nil {
			return *x.xxx_hidden_PodId
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetContainerName() string {
	if x != nil {
		if x.xxx_hidden_ContainerName != nil {
			return *x.xxx_hidden_ContainerName
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessName() string {
	if x != nil {
		if x.xxx_hidden_ProcessName != nil {
			return *x.xxx_hidden_ProcessName
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessExecFilePath() string {
	if x != nil {
		if x.xxx_hidden_ProcessExecFilePath != nil {
			return *x.xxx_hidden_ProcessExecFilePath
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessArgs() string {
	if x != nil {
		if x.xxx_hidden_ProcessArgs != nil {
			return *x.xxx_hidden_ProcessArgs
		}
		return ""
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) SetPodId(v string) {
	x.xxx_hidden_PodId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *ProcessIndicatorUniqueKey) SetContainerName(v string) {
	x.xxx_hidden_ContainerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *ProcessIndicatorUniqueKey) SetProcessName(v string) {
	x.xxx_hidden_ProcessName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *ProcessIndicatorUniqueKey) SetProcessExecFilePath(v string) {
	x.xxx_hidden_ProcessExecFilePath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *ProcessIndicatorUniqueKey) SetProcessArgs(v string) {
	x.xxx_hidden_ProcessArgs = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *ProcessIndicatorUniqueKey) HasPodId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ProcessIndicatorUniqueKey) HasContainerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ProcessIndicatorUniqueKey) HasProcessName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ProcessIndicatorUniqueKey) HasProcessExecFilePath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ProcessIndicatorUniqueKey) HasProcessArgs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ProcessIndicatorUniqueKey) ClearPodId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PodId = nil
}

func (x *ProcessIndicatorUniqueKey) ClearContainerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ContainerName = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ProcessName = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessExecFilePath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ProcessExecFilePath = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessArgs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ProcessArgs = nil
}

type ProcessIndicatorUniqueKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PodId               *string
	ContainerName       *string
	ProcessName         *string
	ProcessExecFilePath *string
	ProcessArgs         *string
}

func (b0 ProcessIndicatorUniqueKey_builder) Build() *ProcessIndicatorUniqueKey {
	m0 := &ProcessIndicatorUniqueKey{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PodId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_PodId = b.PodId
	}
	if b.ContainerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ContainerName = b.ContainerName
	}
	if b.ProcessName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ProcessName = b.ProcessName
	}
	if b.ProcessExecFilePath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_ProcessExecFilePath = b.ProcessExecFilePath
	}
	if b.ProcessArgs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_ProcessArgs = b.ProcessArgs
	}
	return m0
}

// This is the processes information which is added to endpoint data
type NetworkProcessUniqueKey struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ProcessName         *string                `protobuf:"bytes,1,opt,name=process_name,json=processName"`
	xxx_hidden_ProcessExecFilePath *string                `protobuf:"bytes,2,opt,name=process_exec_file_path,json=processExecFilePath"`
	xxx_hidden_ProcessArgs         *string                `protobuf:"bytes,3,opt,name=process_args,json=processArgs"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *NetworkProcessUniqueKey) Reset() {
	*x = NetworkProcessUniqueKey{}
	mi := &file_storage_process_indicator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkProcessUniqueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProcessUniqueKey) ProtoMessage() {}

func (x *NetworkProcessUniqueKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NetworkProcessUniqueKey) GetProcessName() string {
	if x != nil {
		if x.xxx_hidden_ProcessName != nil {
			return *x.xxx_hidden_ProcessName
		}
		return ""
	}
	return ""
}

func (x *NetworkProcessUniqueKey) GetProcessExecFilePath() string {
	if x != nil {
		if x.xxx_hidden_ProcessExecFilePath != nil {
			return *x.xxx_hidden_ProcessExecFilePath
		}
		return ""
	}
	return ""
}

func (x *NetworkProcessUniqueKey) GetProcessArgs() string {
	if x != nil {
		if x.xxx_hidden_ProcessArgs != nil {
			return *x.xxx_hidden_ProcessArgs
		}
		return ""
	}
	return ""
}

func (x *NetworkProcessUniqueKey) SetProcessName(v string) {
	x.xxx_hidden_ProcessName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *NetworkProcessUniqueKey) SetProcessExecFilePath(v string) {
	x.xxx_hidden_ProcessExecFilePath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *NetworkProcessUniqueKey) SetProcessArgs(v string) {
	x.xxx_hidden_ProcessArgs = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *NetworkProcessUniqueKey) HasProcessName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *NetworkProcessUniqueKey) HasProcessExecFilePath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *NetworkProcessUniqueKey) HasProcessArgs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *NetworkProcessUniqueKey) ClearProcessName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ProcessName = nil
}

func (x *NetworkProcessUniqueKey) ClearProcessExecFilePath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ProcessExecFilePath = nil
}

func (x *NetworkProcessUniqueKey) ClearProcessArgs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ProcessArgs = nil
}

type NetworkProcessUniqueKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProcessName         *string
	ProcessExecFilePath *string
	ProcessArgs         *string
}

func (b0 NetworkProcessUniqueKey_builder) Build() *NetworkProcessUniqueKey {
	m0 := &NetworkProcessUniqueKey{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ProcessName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_ProcessName = b.ProcessName
	}
	if b.ProcessExecFilePath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ProcessExecFilePath = b.ProcessExecFilePath
	}
	if b.ProcessArgs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_ProcessArgs = b.ProcessArgs
	}
	return m0
}

type ProcessSignal struct {
	state                   protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Id           *string                       `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ContainerId  *string                       `protobuf:"bytes,2,opt,name=container_id,json=containerId"`
	xxx_hidden_Time         *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=time"`
	xxx_hidden_Name         *string                       `protobuf:"bytes,4,opt,name=name"`
	xxx_hidden_Args         *string                       `protobuf:"bytes,5,opt,name=args"`
	xxx_hidden_ExecFilePath *string                       `protobuf:"bytes,6,opt,name=exec_file_path,json=execFilePath"`
	xxx_hidden_Pid          uint32                        `protobuf:"varint,7,opt,name=pid"`
	xxx_hidden_Uid          uint32                        `protobuf:"varint,8,opt,name=uid"`
	xxx_hidden_Gid          uint32                        `protobuf:"varint,9,opt,name=gid"`
	xxx_hidden_Lineage      []string                      `protobuf:"bytes,10,rep,name=lineage"`
	xxx_hidden_Scraped      bool                          `protobuf:"varint,11,opt,name=scraped"`
	xxx_hidden_LineageInfo  *[]*ProcessSignal_LineageInfo `protobuf:"bytes,12,rep,name=lineage_info,json=lineageInfo"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProcessSignal) Reset() {
	*x = ProcessSignal{}
	mi := &file_storage_process_indicator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSignal) ProtoMessage() {}

func (x *ProcessSignal) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessSignal) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal) GetContainerId() string {
	if x != nil {
		if x.xxx_hidden_ContainerId != nil {
			return *x.xxx_hidden_ContainerId
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal) GetTime() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Time) {
				protoimpl.X.UnmarshalField(x, 3)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Time), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *ProcessSignal) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal) GetArgs() string {
	if x != nil {
		if x.xxx_hidden_Args != nil {
			return *x.xxx_hidden_Args
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal) GetExecFilePath() string {
	if x != nil {
		if x.xxx_hidden_ExecFilePath != nil {
			return *x.xxx_hidden_ExecFilePath
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal) GetPid() uint32 {
	if x != nil {
		return x.xxx_hidden_Pid
	}
	return 0
}

func (x *ProcessSignal) GetUid() uint32 {
	if x != nil {
		return x.xxx_hidden_Uid
	}
	return 0
}

func (x *ProcessSignal) GetGid() uint32 {
	if x != nil {
		return x.xxx_hidden_Gid
	}
	return 0
}

// Deprecated: Marked as deprecated in storage/process_indicator.proto.
func (x *ProcessSignal) GetLineage() []string {
	if x != nil {
		return x.xxx_hidden_Lineage
	}
	return nil
}

func (x *ProcessSignal) GetScraped() bool {
	if x != nil {
		return x.xxx_hidden_Scraped
	}
	return false
}

func (x *ProcessSignal) GetLineageInfo() []*ProcessSignal_LineageInfo {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 11) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_LineageInfo) {
				protoimpl.X.UnmarshalField(x, 12)
			}
			var rv *[]*ProcessSignal_LineageInfo
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_LineageInfo), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *ProcessSignal) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *ProcessSignal) SetContainerId(v string) {
	x.xxx_hidden_ContainerId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *ProcessSignal) SetTime(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Time, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
	}
}

func (x *ProcessSignal) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 12)
}

func (x *ProcessSignal) SetArgs(v string) {
	x.xxx_hidden_Args = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 12)
}

func (x *ProcessSignal) SetExecFilePath(v string) {
	x.xxx_hidden_ExecFilePath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 12)
}

func (x *ProcessSignal) SetPid(v uint32) {
	x.xxx_hidden_Pid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

func (x *ProcessSignal) SetUid(v uint32) {
	x.xxx_hidden_Uid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 12)
}

func (x *ProcessSignal) SetGid(v uint32) {
	x.xxx_hidden_Gid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
}

// Deprecated: Marked as deprecated in storage/process_indicator.proto.
func (x *ProcessSignal) SetLineage(v []string) {
	x.xxx_hidden_Lineage = v
}

func (x *ProcessSignal) SetScraped(v bool) {
	x.xxx_hidden_Scraped = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 12)
}

func (x *ProcessSignal) SetLineageInfo(v []*ProcessSignal_LineageInfo) {
	var sv *[]*ProcessSignal_LineageInfo
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_LineageInfo), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*ProcessSignal_LineageInfo{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_LineageInfo), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 12)
}

func (x *ProcessSignal) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ProcessSignal) HasContainerId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ProcessSignal) HasTime() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ProcessSignal) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ProcessSignal) HasArgs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ProcessSignal) HasExecFilePath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ProcessSignal) HasPid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ProcessSignal) HasUid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *ProcessSignal) HasGid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *ProcessSignal) HasScraped() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *ProcessSignal) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ProcessSignal) ClearContainerId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ContainerId = nil
}

func (x *ProcessSignal) ClearTime() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Time, (*timestamppb.Timestamp)(nil))
}

func (x *ProcessSignal) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Name = nil
}

func (x *ProcessSignal) ClearArgs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Args = nil
}

func (x *ProcessSignal) ClearExecFilePath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ExecFilePath = nil
}

func (x *ProcessSignal) ClearPid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Pid = 0
}

func (x *ProcessSignal) ClearUid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Uid = 0
}

func (x *ProcessSignal) ClearGid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Gid = 0
}

func (x *ProcessSignal) ClearScraped() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Scraped = false
}

type ProcessSignal_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique UUID for identifying the message
	// We have this here instead of at the top level
	// because we want to have each message to be
	// self contained.
	Id *string
	// ID of container associated with this process
	ContainerId *string
	// Process creation time
	Time *timestamppb.Timestamp
	// Process name
	Name *string
	// Process arguments
	Args *string
	// Process executable file path
	ExecFilePath *string
	// Host process ID
	Pid *uint32
	// Real user ID
	Uid *uint32
	// Real group ID
	Gid *uint32
	// Process Lineage
	//
	// Deprecated: Marked as deprecated in storage/process_indicator.proto.
	Lineage []string
	// Signal origin
	Scraped *bool
	// Process LineageInfo
	LineageInfo []*ProcessSignal_LineageInfo
}

func (b0 ProcessSignal_builder) Build() *ProcessSignal {
	m0 := &ProcessSignal{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Id = b.Id
	}
	if b.ContainerId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_ContainerId = b.ContainerId
	}
	if b.Time != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_Time = b.Time
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 12)
		x.xxx_hidden_Name = b.Name
	}
	if b.Args != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 12)
		x.xxx_hidden_Args = b.Args
	}
	if b.ExecFilePath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 12)
		x.xxx_hidden_ExecFilePath = b.ExecFilePath
	}
	if b.Pid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_Pid = *b.Pid
	}
	if b.Uid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 12)
		x.xxx_hidden_Uid = *b.Uid
	}
	if b.Gid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_Gid = *b.Gid
	}
	x.xxx_hidden_Lineage = b.Lineage
	if b.Scraped != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 12)
		x.xxx_hidden_Scraped = *b.Scraped
	}
	if b.LineageInfo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 12)
		x.xxx_hidden_LineageInfo = &b.LineageInfo
	}
	return m0
}

type ProcessSignal_LineageInfo struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ParentUid          uint32                 `protobuf:"varint,1,opt,name=parent_uid,json=parentUid"`
	xxx_hidden_ParentExecFilePath *string                `protobuf:"bytes,2,opt,name=parent_exec_file_path,json=parentExecFilePath"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ProcessSignal_LineageInfo) Reset() {
	*x = ProcessSignal_LineageInfo{}
	mi := &file_storage_process_indicator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSignal_LineageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSignal_LineageInfo) ProtoMessage() {}

func (x *ProcessSignal_LineageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessSignal_LineageInfo) GetParentUid() uint32 {
	if x != nil {
		return x.xxx_hidden_ParentUid
	}
	return 0
}

func (x *ProcessSignal_LineageInfo) GetParentExecFilePath() string {
	if x != nil {
		if x.xxx_hidden_ParentExecFilePath != nil {
			return *x.xxx_hidden_ParentExecFilePath
		}
		return ""
	}
	return ""
}

func (x *ProcessSignal_LineageInfo) SetParentUid(v uint32) {
	x.xxx_hidden_ParentUid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ProcessSignal_LineageInfo) SetParentExecFilePath(v string) {
	x.xxx_hidden_ParentExecFilePath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ProcessSignal_LineageInfo) HasParentUid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ProcessSignal_LineageInfo) HasParentExecFilePath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ProcessSignal_LineageInfo) ClearParentUid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ParentUid = 0
}

func (x *ProcessSignal_LineageInfo) ClearParentExecFilePath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentExecFilePath = nil
}

type ProcessSignal_LineageInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ParentUid          *uint32
	ParentExecFilePath *string
}

func (b0 ProcessSignal_LineageInfo_builder) Build() *ProcessSignal_LineageInfo {
	m0 := &ProcessSignal_LineageInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ParentUid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_ParentUid = *b.ParentUid
	}
	if b.ParentExecFilePath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ParentExecFilePath = b.ParentExecFilePath
	}
	return m0
}

var File_storage_process_indicator_proto protoreflect.FileDescriptor

const file_storage_process_indicator_proto_rawDesc = "" +
	"\n" +
	"\x1fstorage/process_indicator.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x84\x03\n" +
	"\x10ProcessIndicator\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\rdeployment_id\x18\x02 \x01(\tR\fdeploymentId\x12%\n" +
	"\x0econtainer_name\x18\x03 \x01(\tR\rcontainerName\x12\x15\n" +
	"\x06pod_id\x18\x04 \x01(\tR\x05podId\x12\x17\n" +
	"\apod_uid\x18\v \x01(\tR\x06podUid\x12.\n" +
	"\x06signal\x18\x06 \x01(\v2\x16.storage.ProcessSignalR\x06signal\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\a \x01(\tR\tclusterId\x12\x1c\n" +
	"\tnamespace\x18\b \x01(\tR\tnamespace\x12P\n" +
	"\x14container_start_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x12containerStartTime\x12\x19\n" +
	"\bimage_id\x18\f \x01(\tR\aimageIdJ\x04\b\n" +
	"\x10\vJ\x04\b\x05\x10\x06\"\xd4\x01\n" +
	"\x19ProcessIndicatorUniqueKey\x12\x15\n" +
	"\x06pod_id\x18\x01 \x01(\tR\x05podId\x12%\n" +
	"\x0econtainer_name\x18\x02 \x01(\tR\rcontainerName\x12!\n" +
	"\fprocess_name\x18\x03 \x01(\tR\vprocessName\x123\n" +
	"\x16process_exec_file_path\x18\x04 \x01(\tR\x13processExecFilePath\x12!\n" +
	"\fprocess_args\x18\x05 \x01(\tR\vprocessArgs\"\x94\x01\n" +
	"\x17NetworkProcessUniqueKey\x12!\n" +
	"\fprocess_name\x18\x01 \x01(\tR\vprocessName\x123\n" +
	"\x16process_exec_file_path\x18\x02 \x01(\tR\x13processExecFilePath\x12!\n" +
	"\fprocess_args\x18\x03 \x01(\tR\vprocessArgs\"\xde\x03\n" +
	"\rProcessSignal\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fcontainer_id\x18\x02 \x01(\tR\vcontainerId\x122\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x04time\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04args\x18\x05 \x01(\tR\x04args\x12$\n" +
	"\x0eexec_file_path\x18\x06 \x01(\tR\fexecFilePath\x12\x10\n" +
	"\x03pid\x18\a \x01(\rR\x03pid\x12\x10\n" +
	"\x03uid\x18\b \x01(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\t \x01(\rR\x03gid\x12\x1c\n" +
	"\alineage\x18\n" +
	" \x03(\tB\x02\x18\x01R\alineage\x12\x18\n" +
	"\ascraped\x18\v \x01(\bR\ascraped\x12I\n" +
	"\flineage_info\x18\f \x03(\v2\".storage.ProcessSignal.LineageInfoB\x02(\x01R\vlineageInfo\x1a_\n" +
	"\vLineageInfo\x12\x1d\n" +
	"\n" +
	"parent_uid\x18\x01 \x01(\rR\tparentUid\x121\n" +
	"\x15parent_exec_file_path\x18\x02 \x01(\tR\x12parentExecFilePathB9\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_storage_process_indicator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_storage_process_indicator_proto_goTypes = []any{
	(*ProcessIndicator)(nil),          // 0: storage.ProcessIndicator
	(*ProcessIndicatorUniqueKey)(nil), // 1: storage.ProcessIndicatorUniqueKey
	(*NetworkProcessUniqueKey)(nil),   // 2: storage.NetworkProcessUniqueKey
	(*ProcessSignal)(nil),             // 3: storage.ProcessSignal
	(*ProcessSignal_LineageInfo)(nil), // 4: storage.ProcessSignal.LineageInfo
	(*timestamppb.Timestamp)(nil),     // 5: google.protobuf.Timestamp
}
var file_storage_process_indicator_proto_depIdxs = []int32{
	3, // 0: storage.ProcessIndicator.signal:type_name -> storage.ProcessSignal
	5, // 1: storage.ProcessIndicator.container_start_time:type_name -> google.protobuf.Timestamp
	5, // 2: storage.ProcessSignal.time:type_name -> google.protobuf.Timestamp
	4, // 3: storage.ProcessSignal.lineage_info:type_name -> storage.ProcessSignal.LineageInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_storage_process_indicator_proto_init() }
func file_storage_process_indicator_proto_init() {
	if File_storage_process_indicator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_process_indicator_proto_rawDesc), len(file_storage_process_indicator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_process_indicator_proto_goTypes,
		DependencyIndexes: file_storage_process_indicator_proto_depIdxs,
		MessageInfos:      file_storage_process_indicator_proto_msgTypes,
	}.Build()
	File_storage_process_indicator_proto = out.File
	file_storage_process_indicator_proto_goTypes = nil
	file_storage_process_indicator_proto_depIdxs = nil
}
