// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/process_indicator.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next available tag: 13
type ProcessIndicator struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A unique UUID for the Indicator message
	Id            *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" search:"Process ID,store,hidden" sql:"pk,type(uuid)"`                                            // @gotags: search:"Process ID,store,hidden"  sql:"pk,type(uuid)"
	DeploymentId  *string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId" json:"deployment_id,omitempty" search:"Deployment ID,store,hidden" policy:",prefer-parent" sql:"index=hash,fk(Deployment:id),no-fk-constraint,type(uuid)"`    // @gotags: search:"Deployment ID,store,hidden" policy:",prefer-parent" sql:"index=hash,fk(Deployment:id),no-fk-constraint,type(uuid)"
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName" json:"container_name,omitempty" search:"Container Name,hidden" policy:",prefer-parent"` // @gotags: search:"Container Name,hidden" policy:",prefer-parent"
	// Pod name
	PodId  *string `protobuf:"bytes,4,opt,name=pod_id,json=podId" json:"pod_id,omitempty" search:"Pod ID,hidden"`     // @gotags: search:"Pod ID,hidden"
	PodUid *string `protobuf:"bytes,11,opt,name=pod_uid,json=podUid" json:"pod_uid,omitempty" search:"Pod UID,hidden" sql:"index=hash,type(uuid)"` // @gotags: search:"Pod UID,hidden" sql:"index=hash,type(uuid)"
	// A process signal message passed from Collector to Sensor
	Signal             *ProcessSignal         `protobuf:"bytes,6,opt,name=signal" json:"signal,omitempty"`
	ClusterId          *string                `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty" search:"Cluster ID,store,hidden" policy:",prefer-parent" sql:"type(uuid)"`                              // @gotags: search:"Cluster ID,store,hidden" policy:",prefer-parent" sql:"type(uuid)"
	Namespace          *string                `protobuf:"bytes,8,opt,name=namespace" json:"namespace,omitempty" search:"Namespace,store,hidden" policy:",prefer-parent"`                                               // @gotags: search:"Namespace,store,hidden" policy:",prefer-parent"
	ContainerStartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=container_start_time,json=containerStartTime" json:"container_start_time,omitempty" search:"Process Container Start Time"` // @gotags: search:"Process Container Start Time"
	ImageId            *string                `protobuf:"bytes,12,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProcessIndicator) Reset() {
	*x = ProcessIndicator{}
	mi := &file_storage_process_indicator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIndicator) ProtoMessage() {}

func (x *ProcessIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessIndicator) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ProcessIndicator) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *ProcessIndicator) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *ProcessIndicator) GetPodId() string {
	if x != nil && x.PodId != nil {
		return *x.PodId
	}
	return ""
}

func (x *ProcessIndicator) GetPodUid() string {
	if x != nil && x.PodUid != nil {
		return *x.PodUid
	}
	return ""
}

func (x *ProcessIndicator) GetSignal() *ProcessSignal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *ProcessIndicator) GetClusterId() string {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return ""
}

func (x *ProcessIndicator) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ProcessIndicator) GetContainerStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ContainerStartTime
	}
	return nil
}

func (x *ProcessIndicator) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *ProcessIndicator) SetId(v string) {
	x.Id = &v
}

func (x *ProcessIndicator) SetDeploymentId(v string) {
	x.DeploymentId = &v
}

func (x *ProcessIndicator) SetContainerName(v string) {
	x.ContainerName = &v
}

func (x *ProcessIndicator) SetPodId(v string) {
	x.PodId = &v
}

func (x *ProcessIndicator) SetPodUid(v string) {
	x.PodUid = &v
}

func (x *ProcessIndicator) SetSignal(v *ProcessSignal) {
	x.Signal = v
}

func (x *ProcessIndicator) SetClusterId(v string) {
	x.ClusterId = &v
}

func (x *ProcessIndicator) SetNamespace(v string) {
	x.Namespace = &v
}

func (x *ProcessIndicator) SetContainerStartTime(v *timestamppb.Timestamp) {
	x.ContainerStartTime = v
}

func (x *ProcessIndicator) SetImageId(v string) {
	x.ImageId = &v
}

func (x *ProcessIndicator) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ProcessIndicator) HasDeploymentId() bool {
	if x == nil {
		return false
	}
	return x.DeploymentId != nil
}

func (x *ProcessIndicator) HasContainerName() bool {
	if x == nil {
		return false
	}
	return x.ContainerName != nil
}

func (x *ProcessIndicator) HasPodId() bool {
	if x == nil {
		return false
	}
	return x.PodId != nil
}

func (x *ProcessIndicator) HasPodUid() bool {
	if x == nil {
		return false
	}
	return x.PodUid != nil
}

func (x *ProcessIndicator) HasSignal() bool {
	if x == nil {
		return false
	}
	return x.Signal != nil
}

func (x *ProcessIndicator) HasClusterId() bool {
	if x == nil {
		return false
	}
	return x.ClusterId != nil
}

func (x *ProcessIndicator) HasNamespace() bool {
	if x == nil {
		return false
	}
	return x.Namespace != nil
}

func (x *ProcessIndicator) HasContainerStartTime() bool {
	if x == nil {
		return false
	}
	return x.ContainerStartTime != nil
}

func (x *ProcessIndicator) HasImageId() bool {
	if x == nil {
		return false
	}
	return x.ImageId != nil
}

func (x *ProcessIndicator) ClearId() {
	x.Id = nil
}

func (x *ProcessIndicator) ClearDeploymentId() {
	x.DeploymentId = nil
}

func (x *ProcessIndicator) ClearContainerName() {
	x.ContainerName = nil
}

func (x *ProcessIndicator) ClearPodId() {
	x.PodId = nil
}

func (x *ProcessIndicator) ClearPodUid() {
	x.PodUid = nil
}

func (x *ProcessIndicator) ClearSignal() {
	x.Signal = nil
}

func (x *ProcessIndicator) ClearClusterId() {
	x.ClusterId = nil
}

func (x *ProcessIndicator) ClearNamespace() {
	x.Namespace = nil
}

func (x *ProcessIndicator) ClearContainerStartTime() {
	x.ContainerStartTime = nil
}

func (x *ProcessIndicator) ClearImageId() {
	x.ImageId = nil
}

type ProcessIndicator_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique UUID for the Indicator message
	Id            *string
	DeploymentId  *string
	ContainerName *string
	// Pod name
	PodId  *string
	PodUid *string
	// A process signal message passed from Collector to Sensor
	Signal             *ProcessSignal
	ClusterId          *string
	Namespace          *string
	ContainerStartTime *timestamppb.Timestamp
	ImageId            *string
}

func (b0 ProcessIndicator_builder) Build() *ProcessIndicator {
	m0 := &ProcessIndicator{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.DeploymentId = b.DeploymentId
	x.ContainerName = b.ContainerName
	x.PodId = b.PodId
	x.PodUid = b.PodUid
	x.Signal = b.Signal
	x.ClusterId = b.ClusterId
	x.Namespace = b.Namespace
	x.ContainerStartTime = b.ContainerStartTime
	x.ImageId = b.ImageId
	return m0
}

// This is the unique key we store process indicators under in Bolt.
// This is stored in the DB, so please follow proto compatibility rules for it,
// OR discard existing values and repopulate it on startup.
type ProcessIndicatorUniqueKey struct {
	state               protoimpl.MessageState `protogen:"hybrid.v1"`
	PodId               *string                `protobuf:"bytes,1,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
	ContainerName       *string                `protobuf:"bytes,2,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	ProcessName         *string                `protobuf:"bytes,3,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	ProcessExecFilePath *string                `protobuf:"bytes,4,opt,name=process_exec_file_path,json=processExecFilePath" json:"process_exec_file_path,omitempty"`
	ProcessArgs         *string                `protobuf:"bytes,5,opt,name=process_args,json=processArgs" json:"process_args,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcessIndicatorUniqueKey) Reset() {
	*x = ProcessIndicatorUniqueKey{}
	mi := &file_storage_process_indicator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessIndicatorUniqueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIndicatorUniqueKey) ProtoMessage() {}

func (x *ProcessIndicatorUniqueKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessIndicatorUniqueKey) GetPodId() string {
	if x != nil && x.PodId != nil {
		return *x.PodId
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessExecFilePath() string {
	if x != nil && x.ProcessExecFilePath != nil {
		return *x.ProcessExecFilePath
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) GetProcessArgs() string {
	if x != nil && x.ProcessArgs != nil {
		return *x.ProcessArgs
	}
	return ""
}

func (x *ProcessIndicatorUniqueKey) SetPodId(v string) {
	x.PodId = &v
}

func (x *ProcessIndicatorUniqueKey) SetContainerName(v string) {
	x.ContainerName = &v
}

func (x *ProcessIndicatorUniqueKey) SetProcessName(v string) {
	x.ProcessName = &v
}

func (x *ProcessIndicatorUniqueKey) SetProcessExecFilePath(v string) {
	x.ProcessExecFilePath = &v
}

func (x *ProcessIndicatorUniqueKey) SetProcessArgs(v string) {
	x.ProcessArgs = &v
}

func (x *ProcessIndicatorUniqueKey) HasPodId() bool {
	if x == nil {
		return false
	}
	return x.PodId != nil
}

func (x *ProcessIndicatorUniqueKey) HasContainerName() bool {
	if x == nil {
		return false
	}
	return x.ContainerName != nil
}

func (x *ProcessIndicatorUniqueKey) HasProcessName() bool {
	if x == nil {
		return false
	}
	return x.ProcessName != nil
}

func (x *ProcessIndicatorUniqueKey) HasProcessExecFilePath() bool {
	if x == nil {
		return false
	}
	return x.ProcessExecFilePath != nil
}

func (x *ProcessIndicatorUniqueKey) HasProcessArgs() bool {
	if x == nil {
		return false
	}
	return x.ProcessArgs != nil
}

func (x *ProcessIndicatorUniqueKey) ClearPodId() {
	x.PodId = nil
}

func (x *ProcessIndicatorUniqueKey) ClearContainerName() {
	x.ContainerName = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessName() {
	x.ProcessName = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessExecFilePath() {
	x.ProcessExecFilePath = nil
}

func (x *ProcessIndicatorUniqueKey) ClearProcessArgs() {
	x.ProcessArgs = nil
}

type ProcessIndicatorUniqueKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PodId               *string
	ContainerName       *string
	ProcessName         *string
	ProcessExecFilePath *string
	ProcessArgs         *string
}

func (b0 ProcessIndicatorUniqueKey_builder) Build() *ProcessIndicatorUniqueKey {
	m0 := &ProcessIndicatorUniqueKey{}
	b, x := &b0, m0
	_, _ = b, x
	x.PodId = b.PodId
	x.ContainerName = b.ContainerName
	x.ProcessName = b.ProcessName
	x.ProcessExecFilePath = b.ProcessExecFilePath
	x.ProcessArgs = b.ProcessArgs
	return m0
}

// This is the processes information which is added to endpoint data
type NetworkProcessUniqueKey struct {
	state               protoimpl.MessageState `protogen:"hybrid.v1"`
	ProcessName         *string                `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	ProcessExecFilePath *string                `protobuf:"bytes,2,opt,name=process_exec_file_path,json=processExecFilePath" json:"process_exec_file_path,omitempty"`
	ProcessArgs         *string                `protobuf:"bytes,3,opt,name=process_args,json=processArgs" json:"process_args,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NetworkProcessUniqueKey) Reset() {
	*x = NetworkProcessUniqueKey{}
	mi := &file_storage_process_indicator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkProcessUniqueKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProcessUniqueKey) ProtoMessage() {}

func (x *NetworkProcessUniqueKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NetworkProcessUniqueKey) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *NetworkProcessUniqueKey) GetProcessExecFilePath() string {
	if x != nil && x.ProcessExecFilePath != nil {
		return *x.ProcessExecFilePath
	}
	return ""
}

func (x *NetworkProcessUniqueKey) GetProcessArgs() string {
	if x != nil && x.ProcessArgs != nil {
		return *x.ProcessArgs
	}
	return ""
}

func (x *NetworkProcessUniqueKey) SetProcessName(v string) {
	x.ProcessName = &v
}

func (x *NetworkProcessUniqueKey) SetProcessExecFilePath(v string) {
	x.ProcessExecFilePath = &v
}

func (x *NetworkProcessUniqueKey) SetProcessArgs(v string) {
	x.ProcessArgs = &v
}

func (x *NetworkProcessUniqueKey) HasProcessName() bool {
	if x == nil {
		return false
	}
	return x.ProcessName != nil
}

func (x *NetworkProcessUniqueKey) HasProcessExecFilePath() bool {
	if x == nil {
		return false
	}
	return x.ProcessExecFilePath != nil
}

func (x *NetworkProcessUniqueKey) HasProcessArgs() bool {
	if x == nil {
		return false
	}
	return x.ProcessArgs != nil
}

func (x *NetworkProcessUniqueKey) ClearProcessName() {
	x.ProcessName = nil
}

func (x *NetworkProcessUniqueKey) ClearProcessExecFilePath() {
	x.ProcessExecFilePath = nil
}

func (x *NetworkProcessUniqueKey) ClearProcessArgs() {
	x.ProcessArgs = nil
}

type NetworkProcessUniqueKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProcessName         *string
	ProcessExecFilePath *string
	ProcessArgs         *string
}

func (b0 NetworkProcessUniqueKey_builder) Build() *NetworkProcessUniqueKey {
	m0 := &NetworkProcessUniqueKey{}
	b, x := &b0, m0
	_, _ = b, x
	x.ProcessName = b.ProcessName
	x.ProcessExecFilePath = b.ProcessExecFilePath
	x.ProcessArgs = b.ProcessArgs
	return m0
}

type ProcessSignal struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A unique UUID for identifying the message
	// We have this here instead of at the top level
	// because we want to have each message to be
	// self contained.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// ID of container associated with this process
	ContainerId *string `protobuf:"bytes,2,opt,name=container_id,json=containerId" json:"container_id,omitempty" search:"Container ID,hidden"` // @gotags: search:"Container ID,hidden"
	// Process creation time
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty" search:"Process Creation Time,hidden" sql:"index=btree"` // @gotags: search:"Process Creation Time,hidden" sql:"index=btree"
	// Process name
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty" search:"Process Name"` // @gotags: search:"Process Name"
	// Process arguments
	Args *string `protobuf:"bytes,5,opt,name=args" json:"args,omitempty" search:"Process Arguments"` // @gotags: search:"Process Arguments"
	// Process executable file path
	ExecFilePath *string `protobuf:"bytes,6,opt,name=exec_file_path,json=execFilePath" json:"exec_file_path,omitempty" search:"Process Path"` // @gotags: search:"Process Path"
	// Host process ID
	Pid *uint32 `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`
	// Real user ID
	Uid *uint32 `protobuf:"varint,8,opt,name=uid" json:"uid,omitempty" search:"Process UID"` // @gotags: search:"Process UID"
	// Real group ID
	Gid *uint32 `protobuf:"varint,9,opt,name=gid" json:"gid,omitempty"`
	// Process Lineage
	//
	// Deprecated: Marked as deprecated in storage/process_indicator.proto.
	Lineage []string `protobuf:"bytes,10,rep,name=lineage" json:"lineage,omitempty"`
	// Signal origin
	Scraped *bool `protobuf:"varint,11,opt,name=scraped" json:"scraped,omitempty"`
	// Process LineageInfo
	LineageInfo   []*ProcessSignal_LineageInfo `protobuf:"bytes,12,rep,name=lineage_info,json=lineageInfo" json:"lineage_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessSignal) Reset() {
	*x = ProcessSignal{}
	mi := &file_storage_process_indicator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSignal) ProtoMessage() {}

func (x *ProcessSignal) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessSignal) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ProcessSignal) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

func (x *ProcessSignal) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ProcessSignal) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProcessSignal) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *ProcessSignal) GetExecFilePath() string {
	if x != nil && x.ExecFilePath != nil {
		return *x.ExecFilePath
	}
	return ""
}

func (x *ProcessSignal) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessSignal) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *ProcessSignal) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

// Deprecated: Marked as deprecated in storage/process_indicator.proto.
func (x *ProcessSignal) GetLineage() []string {
	if x != nil {
		return x.Lineage
	}
	return nil
}

func (x *ProcessSignal) GetScraped() bool {
	if x != nil && x.Scraped != nil {
		return *x.Scraped
	}
	return false
}

func (x *ProcessSignal) GetLineageInfo() []*ProcessSignal_LineageInfo {
	if x != nil {
		return x.LineageInfo
	}
	return nil
}

func (x *ProcessSignal) SetId(v string) {
	x.Id = &v
}

func (x *ProcessSignal) SetContainerId(v string) {
	x.ContainerId = &v
}

func (x *ProcessSignal) SetTime(v *timestamppb.Timestamp) {
	x.Time = v
}

func (x *ProcessSignal) SetName(v string) {
	x.Name = &v
}

func (x *ProcessSignal) SetArgs(v string) {
	x.Args = &v
}

func (x *ProcessSignal) SetExecFilePath(v string) {
	x.ExecFilePath = &v
}

func (x *ProcessSignal) SetPid(v uint32) {
	x.Pid = &v
}

func (x *ProcessSignal) SetUid(v uint32) {
	x.Uid = &v
}

func (x *ProcessSignal) SetGid(v uint32) {
	x.Gid = &v
}

// Deprecated: Marked as deprecated in storage/process_indicator.proto.
func (x *ProcessSignal) SetLineage(v []string) {
	x.Lineage = v
}

func (x *ProcessSignal) SetScraped(v bool) {
	x.Scraped = &v
}

func (x *ProcessSignal) SetLineageInfo(v []*ProcessSignal_LineageInfo) {
	x.LineageInfo = v
}

func (x *ProcessSignal) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ProcessSignal) HasContainerId() bool {
	if x == nil {
		return false
	}
	return x.ContainerId != nil
}

func (x *ProcessSignal) HasTime() bool {
	if x == nil {
		return false
	}
	return x.Time != nil
}

func (x *ProcessSignal) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ProcessSignal) HasArgs() bool {
	if x == nil {
		return false
	}
	return x.Args != nil
}

func (x *ProcessSignal) HasExecFilePath() bool {
	if x == nil {
		return false
	}
	return x.ExecFilePath != nil
}

func (x *ProcessSignal) HasPid() bool {
	if x == nil {
		return false
	}
	return x.Pid != nil
}

func (x *ProcessSignal) HasUid() bool {
	if x == nil {
		return false
	}
	return x.Uid != nil
}

func (x *ProcessSignal) HasGid() bool {
	if x == nil {
		return false
	}
	return x.Gid != nil
}

func (x *ProcessSignal) HasScraped() bool {
	if x == nil {
		return false
	}
	return x.Scraped != nil
}

func (x *ProcessSignal) ClearId() {
	x.Id = nil
}

func (x *ProcessSignal) ClearContainerId() {
	x.ContainerId = nil
}

func (x *ProcessSignal) ClearTime() {
	x.Time = nil
}

func (x *ProcessSignal) ClearName() {
	x.Name = nil
}

func (x *ProcessSignal) ClearArgs() {
	x.Args = nil
}

func (x *ProcessSignal) ClearExecFilePath() {
	x.ExecFilePath = nil
}

func (x *ProcessSignal) ClearPid() {
	x.Pid = nil
}

func (x *ProcessSignal) ClearUid() {
	x.Uid = nil
}

func (x *ProcessSignal) ClearGid() {
	x.Gid = nil
}

func (x *ProcessSignal) ClearScraped() {
	x.Scraped = nil
}

type ProcessSignal_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A unique UUID for identifying the message
	// We have this here instead of at the top level
	// because we want to have each message to be
	// self contained.
	Id *string
	// ID of container associated with this process
	ContainerId *string
	// Process creation time
	Time *timestamppb.Timestamp
	// Process name
	Name *string
	// Process arguments
	Args *string
	// Process executable file path
	ExecFilePath *string
	// Host process ID
	Pid *uint32
	// Real user ID
	Uid *uint32
	// Real group ID
	Gid *uint32
	// Process Lineage
	//
	// Deprecated: Marked as deprecated in storage/process_indicator.proto.
	Lineage []string
	// Signal origin
	Scraped *bool
	// Process LineageInfo
	LineageInfo []*ProcessSignal_LineageInfo
}

func (b0 ProcessSignal_builder) Build() *ProcessSignal {
	m0 := &ProcessSignal{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.ContainerId = b.ContainerId
	x.Time = b.Time
	x.Name = b.Name
	x.Args = b.Args
	x.ExecFilePath = b.ExecFilePath
	x.Pid = b.Pid
	x.Uid = b.Uid
	x.Gid = b.Gid
	x.Lineage = b.Lineage
	x.Scraped = b.Scraped
	x.LineageInfo = b.LineageInfo
	return m0
}

type ProcessSignal_LineageInfo struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	ParentUid          *uint32                `protobuf:"varint,1,opt,name=parent_uid,json=parentUid" json:"parent_uid,omitempty"`
	ParentExecFilePath *string                `protobuf:"bytes,2,opt,name=parent_exec_file_path,json=parentExecFilePath" json:"parent_exec_file_path,omitempty" policy:"Process Ancestor"` // @gotags: policy:"Process Ancestor"
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProcessSignal_LineageInfo) Reset() {
	*x = ProcessSignal_LineageInfo{}
	mi := &file_storage_process_indicator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSignal_LineageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSignal_LineageInfo) ProtoMessage() {}

func (x *ProcessSignal_LineageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_process_indicator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProcessSignal_LineageInfo) GetParentUid() uint32 {
	if x != nil && x.ParentUid != nil {
		return *x.ParentUid
	}
	return 0
}

func (x *ProcessSignal_LineageInfo) GetParentExecFilePath() string {
	if x != nil && x.ParentExecFilePath != nil {
		return *x.ParentExecFilePath
	}
	return ""
}

func (x *ProcessSignal_LineageInfo) SetParentUid(v uint32) {
	x.ParentUid = &v
}

func (x *ProcessSignal_LineageInfo) SetParentExecFilePath(v string) {
	x.ParentExecFilePath = &v
}

func (x *ProcessSignal_LineageInfo) HasParentUid() bool {
	if x == nil {
		return false
	}
	return x.ParentUid != nil
}

func (x *ProcessSignal_LineageInfo) HasParentExecFilePath() bool {
	if x == nil {
		return false
	}
	return x.ParentExecFilePath != nil
}

func (x *ProcessSignal_LineageInfo) ClearParentUid() {
	x.ParentUid = nil
}

func (x *ProcessSignal_LineageInfo) ClearParentExecFilePath() {
	x.ParentExecFilePath = nil
}

type ProcessSignal_LineageInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ParentUid          *uint32
	ParentExecFilePath *string
}

func (b0 ProcessSignal_LineageInfo_builder) Build() *ProcessSignal_LineageInfo {
	m0 := &ProcessSignal_LineageInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.ParentUid = b.ParentUid
	x.ParentExecFilePath = b.ParentExecFilePath
	return m0
}

var File_storage_process_indicator_proto protoreflect.FileDescriptor

const file_storage_process_indicator_proto_rawDesc = "" +
	"\n" +
	"\x1fstorage/process_indicator.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x80\x03\n" +
	"\x10ProcessIndicator\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\rdeployment_id\x18\x02 \x01(\tR\fdeploymentId\x12%\n" +
	"\x0econtainer_name\x18\x03 \x01(\tR\rcontainerName\x12\x15\n" +
	"\x06pod_id\x18\x04 \x01(\tR\x05podId\x12\x17\n" +
	"\apod_uid\x18\v \x01(\tR\x06podUid\x12.\n" +
	"\x06signal\x18\x06 \x01(\v2\x16.storage.ProcessSignalR\x06signal\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\a \x01(\tR\tclusterId\x12\x1c\n" +
	"\tnamespace\x18\b \x01(\tR\tnamespace\x12L\n" +
	"\x14container_start_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x12containerStartTime\x12\x19\n" +
	"\bimage_id\x18\f \x01(\tR\aimageIdJ\x04\b\n" +
	"\x10\vJ\x04\b\x05\x10\x06\"\xd4\x01\n" +
	"\x19ProcessIndicatorUniqueKey\x12\x15\n" +
	"\x06pod_id\x18\x01 \x01(\tR\x05podId\x12%\n" +
	"\x0econtainer_name\x18\x02 \x01(\tR\rcontainerName\x12!\n" +
	"\fprocess_name\x18\x03 \x01(\tR\vprocessName\x123\n" +
	"\x16process_exec_file_path\x18\x04 \x01(\tR\x13processExecFilePath\x12!\n" +
	"\fprocess_args\x18\x05 \x01(\tR\vprocessArgs\"\x94\x01\n" +
	"\x17NetworkProcessUniqueKey\x12!\n" +
	"\fprocess_name\x18\x01 \x01(\tR\vprocessName\x123\n" +
	"\x16process_exec_file_path\x18\x02 \x01(\tR\x13processExecFilePath\x12!\n" +
	"\fprocess_args\x18\x03 \x01(\tR\vprocessArgs\"\xd6\x03\n" +
	"\rProcessSignal\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fcontainer_id\x18\x02 \x01(\tR\vcontainerId\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04args\x18\x05 \x01(\tR\x04args\x12$\n" +
	"\x0eexec_file_path\x18\x06 \x01(\tR\fexecFilePath\x12\x10\n" +
	"\x03pid\x18\a \x01(\rR\x03pid\x12\x10\n" +
	"\x03uid\x18\b \x01(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\t \x01(\rR\x03gid\x12\x1c\n" +
	"\alineage\x18\n" +
	" \x03(\tB\x02\x18\x01R\alineage\x12\x18\n" +
	"\ascraped\x18\v \x01(\bR\ascraped\x12E\n" +
	"\flineage_info\x18\f \x03(\v2\".storage.ProcessSignal.LineageInfoR\vlineageInfo\x1a_\n" +
	"\vLineageInfo\x12\x1d\n" +
	"\n" +
	"parent_uid\x18\x01 \x01(\rR\tparentUid\x121\n" +
	"\x15parent_exec_file_path\x18\x02 \x01(\tR\x12parentExecFilePathB9\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_process_indicator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_storage_process_indicator_proto_goTypes = []any{
	(*ProcessIndicator)(nil),          // 0: storage.ProcessIndicator
	(*ProcessIndicatorUniqueKey)(nil), // 1: storage.ProcessIndicatorUniqueKey
	(*NetworkProcessUniqueKey)(nil),   // 2: storage.NetworkProcessUniqueKey
	(*ProcessSignal)(nil),             // 3: storage.ProcessSignal
	(*ProcessSignal_LineageInfo)(nil), // 4: storage.ProcessSignal.LineageInfo
	(*timestamppb.Timestamp)(nil),     // 5: google.protobuf.Timestamp
}
var file_storage_process_indicator_proto_depIdxs = []int32{
	3, // 0: storage.ProcessIndicator.signal:type_name -> storage.ProcessSignal
	5, // 1: storage.ProcessIndicator.container_start_time:type_name -> google.protobuf.Timestamp
	5, // 2: storage.ProcessSignal.time:type_name -> google.protobuf.Timestamp
	4, // 3: storage.ProcessSignal.lineage_info:type_name -> storage.ProcessSignal.LineageInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_storage_process_indicator_proto_init() }
func file_storage_process_indicator_proto_init() {
	if File_storage_process_indicator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_process_indicator_proto_rawDesc), len(file_storage_process_indicator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_process_indicator_proto_goTypes,
		DependencyIndexes: file_storage_process_indicator_proto_depIdxs,
		MessageInfos:      file_storage_process_indicator_proto_msgTypes,
	}.Build()
	File_storage_process_indicator_proto = out.File
	file_storage_process_indicator_proto_goTypes = nil
	file_storage_process_indicator_proto_depIdxs = nil
}
