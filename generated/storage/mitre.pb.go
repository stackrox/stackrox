// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/mitre.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MitreTactic struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreTactic) Reset() {
	*x = MitreTactic{}
	mi := &file_storage_mitre_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreTactic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreTactic) ProtoMessage() {}

func (x *MitreTactic) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreTactic) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MitreTactic) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MitreTactic) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MitreTactic) SetId(v string) {
	x.Id = &v
}

func (x *MitreTactic) SetName(v string) {
	x.Name = &v
}

func (x *MitreTactic) SetDescription(v string) {
	x.Description = &v
}

func (x *MitreTactic) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *MitreTactic) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MitreTactic) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *MitreTactic) ClearId() {
	x.Id = nil
}

func (x *MitreTactic) ClearName() {
	x.Name = nil
}

func (x *MitreTactic) ClearDescription() {
	x.Description = nil
}

type MitreTactic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	Name        *string
	Description *string
}

func (b0 MitreTactic_builder) Build() *MitreTactic {
	m0 := &MitreTactic{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Description = b.Description
	return m0
}

type MitreTechnique struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreTechnique) Reset() {
	*x = MitreTechnique{}
	mi := &file_storage_mitre_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreTechnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreTechnique) ProtoMessage() {}

func (x *MitreTechnique) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreTechnique) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MitreTechnique) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MitreTechnique) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MitreTechnique) SetId(v string) {
	x.Id = &v
}

func (x *MitreTechnique) SetName(v string) {
	x.Name = &v
}

func (x *MitreTechnique) SetDescription(v string) {
	x.Description = &v
}

func (x *MitreTechnique) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *MitreTechnique) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MitreTechnique) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *MitreTechnique) ClearId() {
	x.Id = nil
}

func (x *MitreTechnique) ClearName() {
	x.Name = nil
}

func (x *MitreTechnique) ClearDescription() {
	x.Description = nil
}

type MitreTechnique_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	Name        *string
	Description *string
}

func (b0 MitreTechnique_builder) Build() *MitreTechnique {
	m0 := &MitreTechnique{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Description = b.Description
	return m0
}

type MitreAttackVector struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Tactic        *MitreTactic           `protobuf:"bytes,1,opt,name=tactic" json:"tactic,omitempty"`
	Techniques    []*MitreTechnique      `protobuf:"bytes,2,rep,name=techniques" json:"techniques,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreAttackVector) Reset() {
	*x = MitreAttackVector{}
	mi := &file_storage_mitre_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreAttackVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreAttackVector) ProtoMessage() {}

func (x *MitreAttackVector) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreAttackVector) GetTactic() *MitreTactic {
	if x != nil {
		return x.Tactic
	}
	return nil
}

func (x *MitreAttackVector) GetTechniques() []*MitreTechnique {
	if x != nil {
		return x.Techniques
	}
	return nil
}

func (x *MitreAttackVector) SetTactic(v *MitreTactic) {
	x.Tactic = v
}

func (x *MitreAttackVector) SetTechniques(v []*MitreTechnique) {
	x.Techniques = v
}

func (x *MitreAttackVector) HasTactic() bool {
	if x == nil {
		return false
	}
	return x.Tactic != nil
}

func (x *MitreAttackVector) ClearTactic() {
	x.Tactic = nil
}

type MitreAttackVector_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tactic     *MitreTactic
	Techniques []*MitreTechnique
}

func (b0 MitreAttackVector_builder) Build() *MitreAttackVector {
	m0 := &MitreAttackVector{}
	b, x := &b0, m0
	_, _ = b, x
	x.Tactic = b.Tactic
	x.Techniques = b.Techniques
	return m0
}

type MitreAttackMatrix struct {
	state         protoimpl.MessageState        `protogen:"hybrid.v1"`
	MatrixInfo    *MitreAttackMatrix_MatrixInfo `protobuf:"bytes,1,opt,name=matrix_info,json=matrixInfo" json:"matrix_info,omitempty"`
	Vectors       []*MitreAttackVector          `protobuf:"bytes,2,rep,name=vectors" json:"vectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreAttackMatrix) Reset() {
	*x = MitreAttackMatrix{}
	mi := &file_storage_mitre_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreAttackMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreAttackMatrix) ProtoMessage() {}

func (x *MitreAttackMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreAttackMatrix) GetMatrixInfo() *MitreAttackMatrix_MatrixInfo {
	if x != nil {
		return x.MatrixInfo
	}
	return nil
}

func (x *MitreAttackMatrix) GetVectors() []*MitreAttackVector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *MitreAttackMatrix) SetMatrixInfo(v *MitreAttackMatrix_MatrixInfo) {
	x.MatrixInfo = v
}

func (x *MitreAttackMatrix) SetVectors(v []*MitreAttackVector) {
	x.Vectors = v
}

func (x *MitreAttackMatrix) HasMatrixInfo() bool {
	if x == nil {
		return false
	}
	return x.MatrixInfo != nil
}

func (x *MitreAttackMatrix) ClearMatrixInfo() {
	x.MatrixInfo = nil
}

type MitreAttackMatrix_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MatrixInfo *MitreAttackMatrix_MatrixInfo
	Vectors    []*MitreAttackVector
}

func (b0 MitreAttackMatrix_builder) Build() *MitreAttackMatrix {
	m0 := &MitreAttackMatrix{}
	b, x := &b0, m0
	_, _ = b, x
	x.MatrixInfo = b.MatrixInfo
	x.Vectors = b.Vectors
	return m0
}

type MitreAttackBundle struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Version       *string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Matrices      []*MitreAttackMatrix   `protobuf:"bytes,2,rep,name=matrices" json:"matrices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreAttackBundle) Reset() {
	*x = MitreAttackBundle{}
	mi := &file_storage_mitre_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreAttackBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreAttackBundle) ProtoMessage() {}

func (x *MitreAttackBundle) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreAttackBundle) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *MitreAttackBundle) GetMatrices() []*MitreAttackMatrix {
	if x != nil {
		return x.Matrices
	}
	return nil
}

func (x *MitreAttackBundle) SetVersion(v string) {
	x.Version = &v
}

func (x *MitreAttackBundle) SetMatrices(v []*MitreAttackMatrix) {
	x.Matrices = v
}

func (x *MitreAttackBundle) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *MitreAttackBundle) ClearVersion() {
	x.Version = nil
}

type MitreAttackBundle_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Version  *string
	Matrices []*MitreAttackMatrix
}

func (b0 MitreAttackBundle_builder) Build() *MitreAttackBundle {
	m0 := &MitreAttackBundle{}
	b, x := &b0, m0
	_, _ = b, x
	x.Version = b.Version
	x.Matrices = b.Matrices
	return m0
}

type MitreAttackMatrix_MatrixInfo struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Domain        *string                `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Platform      *string                `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MitreAttackMatrix_MatrixInfo) Reset() {
	*x = MitreAttackMatrix_MatrixInfo{}
	mi := &file_storage_mitre_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MitreAttackMatrix_MatrixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitreAttackMatrix_MatrixInfo) ProtoMessage() {}

func (x *MitreAttackMatrix_MatrixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_mitre_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MitreAttackMatrix_MatrixInfo) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *MitreAttackMatrix_MatrixInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *MitreAttackMatrix_MatrixInfo) SetDomain(v string) {
	x.Domain = &v
}

func (x *MitreAttackMatrix_MatrixInfo) SetPlatform(v string) {
	x.Platform = &v
}

func (x *MitreAttackMatrix_MatrixInfo) HasDomain() bool {
	if x == nil {
		return false
	}
	return x.Domain != nil
}

func (x *MitreAttackMatrix_MatrixInfo) HasPlatform() bool {
	if x == nil {
		return false
	}
	return x.Platform != nil
}

func (x *MitreAttackMatrix_MatrixInfo) ClearDomain() {
	x.Domain = nil
}

func (x *MitreAttackMatrix_MatrixInfo) ClearPlatform() {
	x.Platform = nil
}

type MitreAttackMatrix_MatrixInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Domain   *string
	Platform *string
}

func (b0 MitreAttackMatrix_MatrixInfo_builder) Build() *MitreAttackMatrix_MatrixInfo {
	m0 := &MitreAttackMatrix_MatrixInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.Domain = b.Domain
	x.Platform = b.Platform
	return m0
}

var File_storage_mitre_proto protoreflect.FileDescriptor

const file_storage_mitre_proto_rawDesc = "" +
	"\n" +
	"\x13storage/mitre.proto\x12\astorage\x1a!google/protobuf/go_features.proto\"S\n" +
	"\vMitreTactic\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"V\n" +
	"\x0eMitreTechnique\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"z\n" +
	"\x11MitreAttackVector\x12,\n" +
	"\x06tactic\x18\x01 \x01(\v2\x14.storage.MitreTacticR\x06tactic\x127\n" +
	"\n" +
	"techniques\x18\x02 \x03(\v2\x17.storage.MitreTechniqueR\n" +
	"techniques\"\xd3\x01\n" +
	"\x11MitreAttackMatrix\x12F\n" +
	"\vmatrix_info\x18\x01 \x01(\v2%.storage.MitreAttackMatrix.MatrixInfoR\n" +
	"matrixInfo\x124\n" +
	"\avectors\x18\x02 \x03(\v2\x1a.storage.MitreAttackVectorR\avectors\x1a@\n" +
	"\n" +
	"MatrixInfo\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x1a\n" +
	"\bplatform\x18\x02 \x01(\tR\bplatform\"e\n" +
	"\x11MitreAttackBundle\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x126\n" +
	"\bmatrices\x18\x02 \x03(\v2\x1a.storage.MitreAttackMatrixR\bmatricesB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_mitre_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_storage_mitre_proto_goTypes = []any{
	(*MitreTactic)(nil),                  // 0: storage.MitreTactic
	(*MitreTechnique)(nil),               // 1: storage.MitreTechnique
	(*MitreAttackVector)(nil),            // 2: storage.MitreAttackVector
	(*MitreAttackMatrix)(nil),            // 3: storage.MitreAttackMatrix
	(*MitreAttackBundle)(nil),            // 4: storage.MitreAttackBundle
	(*MitreAttackMatrix_MatrixInfo)(nil), // 5: storage.MitreAttackMatrix.MatrixInfo
}
var file_storage_mitre_proto_depIdxs = []int32{
	0, // 0: storage.MitreAttackVector.tactic:type_name -> storage.MitreTactic
	1, // 1: storage.MitreAttackVector.techniques:type_name -> storage.MitreTechnique
	5, // 2: storage.MitreAttackMatrix.matrix_info:type_name -> storage.MitreAttackMatrix.MatrixInfo
	2, // 3: storage.MitreAttackMatrix.vectors:type_name -> storage.MitreAttackVector
	3, // 4: storage.MitreAttackBundle.matrices:type_name -> storage.MitreAttackMatrix
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_storage_mitre_proto_init() }
func file_storage_mitre_proto_init() {
	if File_storage_mitre_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_mitre_proto_rawDesc), len(file_storage_mitre_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_mitre_proto_goTypes,
		DependencyIndexes: file_storage_mitre_proto_depIdxs,
		MessageInfos:      file_storage_mitre_proto_msgTypes,
	}.Build()
	File_storage_mitre_proto = out.File
	file_storage_mitre_proto_goTypes = nil
	file_storage_mitre_proto_depIdxs = nil
}
