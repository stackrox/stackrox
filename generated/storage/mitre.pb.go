// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/mitre.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MitreTactic struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MitreTactic) Reset()         { *m = MitreTactic{} }
func (m *MitreTactic) String() string { return proto.CompactTextString(m) }
func (*MitreTactic) ProtoMessage()    {}
func (*MitreTactic) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{0}
}
func (m *MitreTactic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreTactic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreTactic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreTactic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreTactic.Merge(m, src)
}
func (m *MitreTactic) XXX_Size() int {
	return m.Size()
}
func (m *MitreTactic) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreTactic.DiscardUnknown(m)
}

var xxx_messageInfo_MitreTactic proto.InternalMessageInfo

func (m *MitreTactic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MitreTactic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MitreTactic) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MitreTactic) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreTactic) Clone() *MitreTactic {
	if m == nil {
		return nil
	}
	cloned := new(MitreTactic)
	*cloned = *m

	return cloned
}

type MitreTechnique struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MitreTechnique) Reset()         { *m = MitreTechnique{} }
func (m *MitreTechnique) String() string { return proto.CompactTextString(m) }
func (*MitreTechnique) ProtoMessage()    {}
func (*MitreTechnique) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{1}
}
func (m *MitreTechnique) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreTechnique) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreTechnique.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreTechnique) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreTechnique.Merge(m, src)
}
func (m *MitreTechnique) XXX_Size() int {
	return m.Size()
}
func (m *MitreTechnique) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreTechnique.DiscardUnknown(m)
}

var xxx_messageInfo_MitreTechnique proto.InternalMessageInfo

func (m *MitreTechnique) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MitreTechnique) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MitreTechnique) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MitreTechnique) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreTechnique) Clone() *MitreTechnique {
	if m == nil {
		return nil
	}
	cloned := new(MitreTechnique)
	*cloned = *m

	return cloned
}

type MitreAttackVector struct {
	Tactic               *MitreTactic      `protobuf:"bytes,1,opt,name=tactic,proto3" json:"tactic,omitempty"`
	Techniques           []*MitreTechnique `protobuf:"bytes,2,rep,name=techniques,proto3" json:"techniques,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MitreAttackVector) Reset()         { *m = MitreAttackVector{} }
func (m *MitreAttackVector) String() string { return proto.CompactTextString(m) }
func (*MitreAttackVector) ProtoMessage()    {}
func (*MitreAttackVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{2}
}
func (m *MitreAttackVector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreAttackVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreAttackVector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreAttackVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreAttackVector.Merge(m, src)
}
func (m *MitreAttackVector) XXX_Size() int {
	return m.Size()
}
func (m *MitreAttackVector) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreAttackVector.DiscardUnknown(m)
}

var xxx_messageInfo_MitreAttackVector proto.InternalMessageInfo

func (m *MitreAttackVector) GetTactic() *MitreTactic {
	if m != nil {
		return m.Tactic
	}
	return nil
}

func (m *MitreAttackVector) GetTechniques() []*MitreTechnique {
	if m != nil {
		return m.Techniques
	}
	return nil
}

func (m *MitreAttackVector) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreAttackVector) Clone() *MitreAttackVector {
	if m == nil {
		return nil
	}
	cloned := new(MitreAttackVector)
	*cloned = *m

	cloned.Tactic = m.Tactic.Clone()
	if m.Techniques != nil {
		cloned.Techniques = make([]*MitreTechnique, len(m.Techniques))
		for idx, v := range m.Techniques {
			cloned.Techniques[idx] = v.Clone()
		}
	}
	return cloned
}

type MitreAttackMatrix struct {
	MatrixInfo           *MitreAttackMatrix_MatrixInfo `protobuf:"bytes,1,opt,name=matrix_info,json=matrixInfo,proto3" json:"matrix_info,omitempty"`
	Vectors              []*MitreAttackVector          `protobuf:"bytes,2,rep,name=vectors,proto3" json:"vectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MitreAttackMatrix) Reset()         { *m = MitreAttackMatrix{} }
func (m *MitreAttackMatrix) String() string { return proto.CompactTextString(m) }
func (*MitreAttackMatrix) ProtoMessage()    {}
func (*MitreAttackMatrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{3}
}
func (m *MitreAttackMatrix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreAttackMatrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreAttackMatrix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreAttackMatrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreAttackMatrix.Merge(m, src)
}
func (m *MitreAttackMatrix) XXX_Size() int {
	return m.Size()
}
func (m *MitreAttackMatrix) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreAttackMatrix.DiscardUnknown(m)
}

var xxx_messageInfo_MitreAttackMatrix proto.InternalMessageInfo

func (m *MitreAttackMatrix) GetMatrixInfo() *MitreAttackMatrix_MatrixInfo {
	if m != nil {
		return m.MatrixInfo
	}
	return nil
}

func (m *MitreAttackMatrix) GetVectors() []*MitreAttackVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

func (m *MitreAttackMatrix) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreAttackMatrix) Clone() *MitreAttackMatrix {
	if m == nil {
		return nil
	}
	cloned := new(MitreAttackMatrix)
	*cloned = *m

	cloned.MatrixInfo = m.MatrixInfo.Clone()
	if m.Vectors != nil {
		cloned.Vectors = make([]*MitreAttackVector, len(m.Vectors))
		for idx, v := range m.Vectors {
			cloned.Vectors[idx] = v.Clone()
		}
	}
	return cloned
}

type MitreAttackMatrix_MatrixInfo struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Platform             string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MitreAttackMatrix_MatrixInfo) Reset()         { *m = MitreAttackMatrix_MatrixInfo{} }
func (m *MitreAttackMatrix_MatrixInfo) String() string { return proto.CompactTextString(m) }
func (*MitreAttackMatrix_MatrixInfo) ProtoMessage()    {}
func (*MitreAttackMatrix_MatrixInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{3, 0}
}
func (m *MitreAttackMatrix_MatrixInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreAttackMatrix_MatrixInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreAttackMatrix_MatrixInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreAttackMatrix_MatrixInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreAttackMatrix_MatrixInfo.Merge(m, src)
}
func (m *MitreAttackMatrix_MatrixInfo) XXX_Size() int {
	return m.Size()
}
func (m *MitreAttackMatrix_MatrixInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreAttackMatrix_MatrixInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MitreAttackMatrix_MatrixInfo proto.InternalMessageInfo

func (m *MitreAttackMatrix_MatrixInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *MitreAttackMatrix_MatrixInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *MitreAttackMatrix_MatrixInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreAttackMatrix_MatrixInfo) Clone() *MitreAttackMatrix_MatrixInfo {
	if m == nil {
		return nil
	}
	cloned := new(MitreAttackMatrix_MatrixInfo)
	*cloned = *m

	return cloned
}

type MitreAttackBundle struct {
	Version              string               `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Matrices             []*MitreAttackMatrix `protobuf:"bytes,2,rep,name=matrices,proto3" json:"matrices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MitreAttackBundle) Reset()         { *m = MitreAttackBundle{} }
func (m *MitreAttackBundle) String() string { return proto.CompactTextString(m) }
func (*MitreAttackBundle) ProtoMessage()    {}
func (*MitreAttackBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6622b189ba02caab, []int{4}
}
func (m *MitreAttackBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitreAttackBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitreAttackBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitreAttackBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitreAttackBundle.Merge(m, src)
}
func (m *MitreAttackBundle) XXX_Size() int {
	return m.Size()
}
func (m *MitreAttackBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_MitreAttackBundle.DiscardUnknown(m)
}

var xxx_messageInfo_MitreAttackBundle proto.InternalMessageInfo

func (m *MitreAttackBundle) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MitreAttackBundle) GetMatrices() []*MitreAttackMatrix {
	if m != nil {
		return m.Matrices
	}
	return nil
}

func (m *MitreAttackBundle) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MitreAttackBundle) Clone() *MitreAttackBundle {
	if m == nil {
		return nil
	}
	cloned := new(MitreAttackBundle)
	*cloned = *m

	if m.Matrices != nil {
		cloned.Matrices = make([]*MitreAttackMatrix, len(m.Matrices))
		for idx, v := range m.Matrices {
			cloned.Matrices[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*MitreTactic)(nil), "storage.MitreTactic")
	proto.RegisterType((*MitreTechnique)(nil), "storage.MitreTechnique")
	proto.RegisterType((*MitreAttackVector)(nil), "storage.MitreAttackVector")
	proto.RegisterType((*MitreAttackMatrix)(nil), "storage.MitreAttackMatrix")
	proto.RegisterType((*MitreAttackMatrix_MatrixInfo)(nil), "storage.MitreAttackMatrix.MatrixInfo")
	proto.RegisterType((*MitreAttackBundle)(nil), "storage.MitreAttackBundle")
}

func init() { proto.RegisterFile("storage/mitre.proto", fileDescriptor_6622b189ba02caab) }

var fileDescriptor_6622b189ba02caab = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x6f, 0xd2, 0x4b, 0xdb, 0x7b, 0x02, 0x85, 0x9e, 0x7b, 0xb9, 0xc6, 0x2e, 0x42, 0x09,
	0x08, 0x5d, 0x48, 0x0a, 0x55, 0x74, 0x21, 0x88, 0x76, 0x21, 0xb8, 0xe8, 0x26, 0x4a, 0x17, 0x6e,
	0x64, 0x9c, 0x4c, 0x75, 0xb0, 0x99, 0xa9, 0x93, 0xa9, 0x14, 0x9f, 0xc4, 0x47, 0x72, 0x29, 0xf8,
	0x02, 0x52, 0x5f, 0x44, 0x32, 0x99, 0xd4, 0x54, 0xc4, 0x95, 0xab, 0x39, 0xe7, 0xcc, 0x3f, 0x5f,
	0xfe, 0x7f, 0x32, 0xf0, 0x37, 0xd3, 0x52, 0x91, 0x6b, 0xd6, 0x4f, 0xb9, 0x56, 0x2c, 0x9a, 0x29,
	0xa9, 0x25, 0x36, 0xec, 0x30, 0x3c, 0x03, 0x6f, 0x94, 0xcf, 0xcf, 0x09, 0xd5, 0x9c, 0x62, 0x0b,
	0x5c, 0x9e, 0xf8, 0x4e, 0xd7, 0xe9, 0xfd, 0x89, 0x5d, 0x9e, 0x20, 0xc2, 0x6f, 0x41, 0x52, 0xe6,
	0xbb, 0x66, 0x62, 0x6a, 0xec, 0x82, 0x97, 0xb0, 0x8c, 0x2a, 0x3e, 0xd3, 0x5c, 0x0a, 0xbf, 0x66,
	0xb6, 0xaa, 0xa3, 0x70, 0x0c, 0xad, 0x02, 0xca, 0xe8, 0x8d, 0xe0, 0x77, 0x73, 0xf6, 0x43, 0xdc,
	0x07, 0x68, 0x1b, 0xee, 0xb1, 0xd6, 0x84, 0xde, 0x8e, 0x19, 0xd5, 0x52, 0xe1, 0x36, 0xd4, 0xb5,
	0x31, 0x6f, 0xf0, 0xde, 0xe0, 0x5f, 0x64, 0xb3, 0x45, 0x95, 0x60, 0xb1, 0xd5, 0xe0, 0x3e, 0x80,
	0x2e, 0x5d, 0x65, 0xbe, 0xdb, 0xad, 0xf5, 0xbc, 0xc1, 0xc6, 0xa7, 0x13, 0xe5, 0x7e, 0x5c, 0x91,
	0x86, 0x2f, 0xce, 0xda, 0xc7, 0x47, 0x44, 0x2b, 0xbe, 0xc0, 0x13, 0xf0, 0x52, 0x53, 0x5d, 0x72,
	0x31, 0x91, 0xd6, 0xc1, 0xd6, 0x3a, 0xaf, 0x7a, 0x20, 0x2a, 0x96, 0x53, 0x31, 0x91, 0x31, 0xa4,
	0xab, 0x1a, 0x77, 0xa1, 0x71, 0x6f, 0xe2, 0x94, 0x9e, 0x3a, 0x5f, 0x31, 0x8a, 0xc4, 0x71, 0x29,
	0xed, 0x1c, 0x01, 0x7c, 0xf0, 0xf0, 0x3f, 0xd4, 0x13, 0x99, 0x12, 0x2e, 0xec, 0x3d, 0xdb, 0x0e,
	0x3b, 0xd0, 0x9c, 0x4d, 0x89, 0x9e, 0x48, 0x95, 0xda, 0xfb, 0x5e, 0xf5, 0x21, 0x5b, 0x0b, 0x35,
	0x9c, 0x8b, 0x64, 0xca, 0xd0, 0xcf, 0xcd, 0xa8, 0x2c, 0xff, 0x09, 0x05, 0xa9, 0x6c, 0x71, 0x0f,
	0x9a, 0xc6, 0x34, 0x65, 0xdf, 0xfa, 0x2c, 0x4c, 0xc5, 0x2b, 0xed, 0xf0, 0xf0, 0x69, 0x19, 0x38,
	0xcf, 0xcb, 0xc0, 0x79, 0x5d, 0x06, 0xce, 0xe3, 0x5b, 0xf0, 0x0b, 0x36, 0xb9, 0x8c, 0xb2, 0x5c,
	0xab, 0xe4, 0xa2, 0x78, 0x93, 0x25, 0xe8, 0xa2, 0x1d, 0xf5, 0x6d, 0x79, 0x60, 0xd7, 0xab, 0xba,
	0x51, 0xec, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x68, 0xfe, 0x75, 0x94, 0xcc, 0x02, 0x00, 0x00,
}

func (m *MitreTactic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreTactic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreTactic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MitreTechnique) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreTechnique) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreTechnique) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MitreAttackVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreAttackVector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreAttackVector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Techniques) > 0 {
		for iNdEx := len(m.Techniques) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Techniques[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMitre(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tactic != nil {
		{
			size, err := m.Tactic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMitre(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MitreAttackMatrix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreAttackMatrix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreAttackMatrix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vectors) > 0 {
		for iNdEx := len(m.Vectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMitre(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MatrixInfo != nil {
		{
			size, err := m.MatrixInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMitre(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MitreAttackMatrix_MatrixInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreAttackMatrix_MatrixInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreAttackMatrix_MatrixInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MitreAttackBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitreAttackBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitreAttackBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Matrices) > 0 {
		for iNdEx := len(m.Matrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMitre(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMitre(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMitre(dAtA []byte, offset int, v uint64) int {
	offset -= sovMitre(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MitreTactic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MitreTechnique) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MitreAttackVector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tactic != nil {
		l = m.Tactic.Size()
		n += 1 + l + sovMitre(uint64(l))
	}
	if len(m.Techniques) > 0 {
		for _, e := range m.Techniques {
			l = e.Size()
			n += 1 + l + sovMitre(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MitreAttackMatrix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatrixInfo != nil {
		l = m.MatrixInfo.Size()
		n += 1 + l + sovMitre(uint64(l))
	}
	if len(m.Vectors) > 0 {
		for _, e := range m.Vectors {
			l = e.Size()
			n += 1 + l + sovMitre(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MitreAttackMatrix_MatrixInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MitreAttackBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMitre(uint64(l))
	}
	if len(m.Matrices) > 0 {
		for _, e := range m.Matrices {
			l = e.Size()
			n += 1 + l + sovMitre(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMitre(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMitre(x uint64) (n int) {
	return sovMitre(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MitreTactic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitreTactic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitreTactic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitreTechnique) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitreTechnique: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitreTechnique: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitreAttackVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitreAttackVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitreAttackVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tactic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tactic == nil {
				m.Tactic = &MitreTactic{}
			}
			if err := m.Tactic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Techniques", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Techniques = append(m.Techniques, &MitreTechnique{})
			if err := m.Techniques[len(m.Techniques)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitreAttackMatrix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitreAttackMatrix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitreAttackMatrix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatrixInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatrixInfo == nil {
				m.MatrixInfo = &MitreAttackMatrix_MatrixInfo{}
			}
			if err := m.MatrixInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vectors = append(m.Vectors, &MitreAttackVector{})
			if err := m.Vectors[len(m.Vectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitreAttackMatrix_MatrixInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatrixInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatrixInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitreAttackBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitreAttackBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitreAttackBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMitre
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMitre
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matrices = append(m.Matrices, &MitreAttackMatrix{})
			if err := m.Matrices[len(m.Matrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMitre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMitre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMitre(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMitre
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMitre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMitre
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMitre
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMitre
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMitre        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMitre          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMitre = fmt.Errorf("proto: unexpected end of group")
)
