// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableK8SRole is an immutable interface for K8SRole
type ImmutableK8SRole interface {
	GetId() string
	GetName() string
	GetNamespace() string
	GetClusterId() string
	GetClusterName() string
	GetClusterRole() bool
	GetImmutableLabels() iter.Seq2[string, string]
	GetImmutableAnnotations() iter.Seq2[string, string]
	GetImmutableCreatedAt() time.Time
	GetImmutableRules() iter.Seq[ImmutablePolicyRule]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *K8SRole
}

// GetImmutableLabels implements ImmutableK8SRole
func (m *K8SRole) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableAnnotations implements ImmutableK8SRole
func (m *K8SRole) GetImmutableAnnotations() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Annotations == nil {
			return
		}
		for k, v := range m.Annotations {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableCreatedAt implements ImmutableK8SRole
func (m *K8SRole) GetImmutableCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return m.CreatedAt.AsTime()
}

// GetImmutableRules implements ImmutableK8SRole
func (m *K8SRole) GetImmutableRules() iter.Seq[ImmutablePolicyRule] {
	return func(yield func(ImmutablePolicyRule) bool) {
		if m == nil || m.Rules == nil {
			return
		}
		for _, v := range m.Rules {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that K8SRole implements ImmutableK8SRole
var _ ImmutableK8SRole = (*K8SRole)(nil)

// ImmutablePolicyRule is an immutable interface for PolicyRule
type ImmutablePolicyRule interface {
	GetImmutableVerbs() iter.Seq[string]
	GetImmutableApiGroups() iter.Seq[string]
	GetImmutableResources() iter.Seq[string]
	GetImmutableNonResourceUrls() iter.Seq[string]
	GetImmutableResourceNames() iter.Seq[string]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *PolicyRule
}

// GetImmutableVerbs implements ImmutablePolicyRule
func (m *PolicyRule) GetImmutableVerbs() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.Verbs == nil {
			return
		}
		for _, v := range m.Verbs {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableApiGroups implements ImmutablePolicyRule
func (m *PolicyRule) GetImmutableApiGroups() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.ApiGroups == nil {
			return
		}
		for _, v := range m.ApiGroups {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableResources implements ImmutablePolicyRule
func (m *PolicyRule) GetImmutableResources() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.Resources == nil {
			return
		}
		for _, v := range m.Resources {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableNonResourceUrls implements ImmutablePolicyRule
func (m *PolicyRule) GetImmutableNonResourceUrls() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.NonResourceUrls == nil {
			return
		}
		for _, v := range m.NonResourceUrls {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableResourceNames implements ImmutablePolicyRule
func (m *PolicyRule) GetImmutableResourceNames() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.ResourceNames == nil {
			return
		}
		for _, v := range m.ResourceNames {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that PolicyRule implements ImmutablePolicyRule
var _ ImmutablePolicyRule = (*PolicyRule)(nil)

// ImmutableK8SRoleBinding is an immutable interface for K8SRoleBinding
type ImmutableK8SRoleBinding interface {
	GetId() string
	GetName() string
	GetNamespace() string
	GetClusterId() string
	GetClusterName() string
	// ClusterRole specifies whether the binding binds a cluster role. However, it cannot be used to determine whether
	// the binding is a cluster role binding. This can be done in conjunction with the namespace. If the namespace is
	// empty and cluster role is true, the binding is a cluster role binding.
	GetClusterRole() bool
	GetImmutableLabels() iter.Seq2[string, string]
	GetImmutableAnnotations() iter.Seq2[string, string]
	GetImmutableCreatedAt() time.Time
	GetImmutableSubjects() iter.Seq[ImmutableSubject]
	GetRoleId() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *K8SRoleBinding
}

// GetImmutableLabels implements ImmutableK8SRoleBinding
func (m *K8SRoleBinding) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableAnnotations implements ImmutableK8SRoleBinding
func (m *K8SRoleBinding) GetImmutableAnnotations() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Annotations == nil {
			return
		}
		for k, v := range m.Annotations {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableCreatedAt implements ImmutableK8SRoleBinding
func (m *K8SRoleBinding) GetImmutableCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return m.CreatedAt.AsTime()
}

// GetImmutableSubjects implements ImmutableK8SRoleBinding
func (m *K8SRoleBinding) GetImmutableSubjects() iter.Seq[ImmutableSubject] {
	return func(yield func(ImmutableSubject) bool) {
		if m == nil || m.Subjects == nil {
			return
		}
		for _, v := range m.Subjects {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that K8SRoleBinding implements ImmutableK8SRoleBinding
var _ ImmutableK8SRoleBinding = (*K8SRoleBinding)(nil)

// ImmutableSubject is an immutable interface for Subject
type ImmutableSubject interface {
	GetId() string
	GetKind() SubjectKind
	GetName() string
	GetNamespace() string
	GetClusterId() string
	GetClusterName() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Subject
}

// Verify that Subject implements ImmutableSubject
var _ ImmutableSubject = (*Subject)(nil)
