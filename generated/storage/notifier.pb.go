// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/notifier.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Email_AuthMethod int32

const (
	Email_DISABLED Email_AuthMethod = 0
	Email_PLAIN    Email_AuthMethod = 1
	Email_LOGIN    Email_AuthMethod = 2
)

// Enum value maps for Email_AuthMethod.
var (
	Email_AuthMethod_name = map[int32]string{
		0: "DISABLED",
		1: "PLAIN",
		2: "LOGIN",
	}
	Email_AuthMethod_value = map[string]int32{
		"DISABLED": 0,
		"PLAIN":    1,
		"LOGIN":    2,
	}
)

func (x Email_AuthMethod) Enum() *Email_AuthMethod {
	p := new(Email_AuthMethod)
	*p = x
	return p
}

func (x Email_AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Email_AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[0].Descriptor()
}

func (Email_AuthMethod) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[0]
}

func (x Email_AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Syslog_LocalFacility int32

const (
	Syslog_LOCAL0 Syslog_LocalFacility = 0
	Syslog_LOCAL1 Syslog_LocalFacility = 1
	Syslog_LOCAL2 Syslog_LocalFacility = 2
	Syslog_LOCAL3 Syslog_LocalFacility = 3
	Syslog_LOCAL4 Syslog_LocalFacility = 4
	Syslog_LOCAL5 Syslog_LocalFacility = 5
	Syslog_LOCAL6 Syslog_LocalFacility = 6
	Syslog_LOCAL7 Syslog_LocalFacility = 7
)

// Enum value maps for Syslog_LocalFacility.
var (
	Syslog_LocalFacility_name = map[int32]string{
		0: "LOCAL0",
		1: "LOCAL1",
		2: "LOCAL2",
		3: "LOCAL3",
		4: "LOCAL4",
		5: "LOCAL5",
		6: "LOCAL6",
		7: "LOCAL7",
	}
	Syslog_LocalFacility_value = map[string]int32{
		"LOCAL0": 0,
		"LOCAL1": 1,
		"LOCAL2": 2,
		"LOCAL3": 3,
		"LOCAL4": 4,
		"LOCAL5": 5,
		"LOCAL6": 6,
		"LOCAL7": 7,
	}
)

func (x Syslog_LocalFacility) Enum() *Syslog_LocalFacility {
	p := new(Syslog_LocalFacility)
	*p = x
	return p
}

func (x Syslog_LocalFacility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syslog_LocalFacility) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[1].Descriptor()
}

func (Syslog_LocalFacility) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[1]
}

func (x Syslog_LocalFacility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Syslog_MessageFormat int32

const (
	Syslog_LEGACY Syslog_MessageFormat = 0
	Syslog_CEF    Syslog_MessageFormat = 1
)

// Enum value maps for Syslog_MessageFormat.
var (
	Syslog_MessageFormat_name = map[int32]string{
		0: "LEGACY",
		1: "CEF",
	}
	Syslog_MessageFormat_value = map[string]int32{
		"LEGACY": 0,
		"CEF":    1,
	}
)

func (x Syslog_MessageFormat) Enum() *Syslog_MessageFormat {
	p := new(Syslog_MessageFormat)
	*p = x
	return p
}

func (x Syslog_MessageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syslog_MessageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[2].Descriptor()
}

func (Syslog_MessageFormat) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[2]
}

func (x Syslog_MessageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Next Tag: 21
type Notifier struct {
	state        protoimpl.MessageState `protogen:"hybrid.v1"`
	Id           string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" sql:"pk"`     // @gotags: sql:"pk"
	Name         string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" sql:"unique"` // @gotags: sql:"unique"
	Type         string                 `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	UiEndpoint   string                 `protobuf:"bytes,4,opt,name=ui_endpoint,json=uiEndpoint" json:"ui_endpoint,omitempty"`
	LabelKey     string                 `protobuf:"bytes,8,opt,name=label_key,json=labelKey" json:"label_key,omitempty"`
	LabelDefault string                 `protobuf:"bytes,9,opt,name=label_default,json=labelDefault" json:"label_default,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*Notifier_Jira
	//	*Notifier_Email
	//	*Notifier_Cscc
	//	*Notifier_Splunk
	//	*Notifier_Pagerduty
	//	*Notifier_Generic
	//	*Notifier_Sumologic
	//	*Notifier_AwsSecurityHub
	//	*Notifier_Syslog
	//	*Notifier_MicrosoftSentinel
	Config         isNotifier_Config `protobuf_oneof:"config"`
	NotifierSecret string            `protobuf:"bytes,19,opt,name=notifier_secret,json=notifierSecret" json:"notifier_secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Traits         *Traits           `protobuf:"bytes,50,opt,name=traits" json:"traits,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Notifier) Reset() {
	*x = Notifier{}
	mi := &file_storage_notifier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifier) ProtoMessage() {}

func (x *Notifier) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Notifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Notifier) GetUiEndpoint() string {
	if x != nil {
		return x.UiEndpoint
	}
	return ""
}

func (x *Notifier) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *Notifier) GetLabelDefault() string {
	if x != nil {
		return x.LabelDefault
	}
	return ""
}

func (x *Notifier) GetConfig() isNotifier_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Notifier) GetJira() *Jira {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Jira); ok {
			return x.Jira
		}
	}
	return nil
}

func (x *Notifier) GetEmail() *Email {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Email); ok {
			return x.Email
		}
	}
	return nil
}

func (x *Notifier) GetCscc() *CSCC {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Cscc); ok {
			return x.Cscc
		}
	}
	return nil
}

func (x *Notifier) GetSplunk() *Splunk {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Splunk); ok {
			return x.Splunk
		}
	}
	return nil
}

func (x *Notifier) GetPagerduty() *PagerDuty {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Pagerduty); ok {
			return x.Pagerduty
		}
	}
	return nil
}

func (x *Notifier) GetGeneric() *Generic {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

func (x *Notifier) GetSumologic() *SumoLogic {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Sumologic); ok {
			return x.Sumologic
		}
	}
	return nil
}

func (x *Notifier) GetAwsSecurityHub() *AWSSecurityHub {
	if x != nil {
		if x, ok := x.Config.(*Notifier_AwsSecurityHub); ok {
			return x.AwsSecurityHub
		}
	}
	return nil
}

func (x *Notifier) GetSyslog() *Syslog {
	if x != nil {
		if x, ok := x.Config.(*Notifier_Syslog); ok {
			return x.Syslog
		}
	}
	return nil
}

func (x *Notifier) GetMicrosoftSentinel() *MicrosoftSentinel {
	if x != nil {
		if x, ok := x.Config.(*Notifier_MicrosoftSentinel); ok {
			return x.MicrosoftSentinel
		}
	}
	return nil
}

func (x *Notifier) GetNotifierSecret() string {
	if x != nil {
		return x.NotifierSecret
	}
	return ""
}

func (x *Notifier) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *Notifier) SetId(v string) {
	x.Id = v
}

func (x *Notifier) SetName(v string) {
	x.Name = v
}

func (x *Notifier) SetType(v string) {
	x.Type = v
}

func (x *Notifier) SetUiEndpoint(v string) {
	x.UiEndpoint = v
}

func (x *Notifier) SetLabelKey(v string) {
	x.LabelKey = v
}

func (x *Notifier) SetLabelDefault(v string) {
	x.LabelDefault = v
}

func (x *Notifier) SetJira(v *Jira) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Jira{v}
}

func (x *Notifier) SetEmail(v *Email) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Email{v}
}

func (x *Notifier) SetCscc(v *CSCC) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Cscc{v}
}

func (x *Notifier) SetSplunk(v *Splunk) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Splunk{v}
}

func (x *Notifier) SetPagerduty(v *PagerDuty) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Pagerduty{v}
}

func (x *Notifier) SetGeneric(v *Generic) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Generic{v}
}

func (x *Notifier) SetSumologic(v *SumoLogic) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Sumologic{v}
}

func (x *Notifier) SetAwsSecurityHub(v *AWSSecurityHub) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_AwsSecurityHub{v}
}

func (x *Notifier) SetSyslog(v *Syslog) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_Syslog{v}
}

func (x *Notifier) SetMicrosoftSentinel(v *MicrosoftSentinel) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &Notifier_MicrosoftSentinel{v}
}

func (x *Notifier) SetNotifierSecret(v string) {
	x.NotifierSecret = v
}

func (x *Notifier) SetTraits(v *Traits) {
	x.Traits = v
}

func (x *Notifier) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *Notifier) HasJira() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Jira)
	return ok
}

func (x *Notifier) HasEmail() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Email)
	return ok
}

func (x *Notifier) HasCscc() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Cscc)
	return ok
}

func (x *Notifier) HasSplunk() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Splunk)
	return ok
}

func (x *Notifier) HasPagerduty() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Pagerduty)
	return ok
}

func (x *Notifier) HasGeneric() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Generic)
	return ok
}

func (x *Notifier) HasSumologic() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Sumologic)
	return ok
}

func (x *Notifier) HasAwsSecurityHub() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_AwsSecurityHub)
	return ok
}

func (x *Notifier) HasSyslog() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_Syslog)
	return ok
}

func (x *Notifier) HasMicrosoftSentinel() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*Notifier_MicrosoftSentinel)
	return ok
}

func (x *Notifier) HasTraits() bool {
	if x == nil {
		return false
	}
	return x.Traits != nil
}

func (x *Notifier) ClearConfig() {
	x.Config = nil
}

func (x *Notifier) ClearJira() {
	if _, ok := x.Config.(*Notifier_Jira); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearEmail() {
	if _, ok := x.Config.(*Notifier_Email); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearCscc() {
	if _, ok := x.Config.(*Notifier_Cscc); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearSplunk() {
	if _, ok := x.Config.(*Notifier_Splunk); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearPagerduty() {
	if _, ok := x.Config.(*Notifier_Pagerduty); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearGeneric() {
	if _, ok := x.Config.(*Notifier_Generic); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearSumologic() {
	if _, ok := x.Config.(*Notifier_Sumologic); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearAwsSecurityHub() {
	if _, ok := x.Config.(*Notifier_AwsSecurityHub); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearSyslog() {
	if _, ok := x.Config.(*Notifier_Syslog); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearMicrosoftSentinel() {
	if _, ok := x.Config.(*Notifier_MicrosoftSentinel); ok {
		x.Config = nil
	}
}

func (x *Notifier) ClearTraits() {
	x.Traits = nil
}

const Notifier_Config_not_set_case case_Notifier_Config = 0
const Notifier_Jira_case case_Notifier_Config = 10
const Notifier_Email_case case_Notifier_Config = 11
const Notifier_Cscc_case case_Notifier_Config = 12
const Notifier_Splunk_case case_Notifier_Config = 13
const Notifier_Pagerduty_case case_Notifier_Config = 14
const Notifier_Generic_case case_Notifier_Config = 15
const Notifier_Sumologic_case case_Notifier_Config = 16
const Notifier_AwsSecurityHub_case case_Notifier_Config = 17
const Notifier_Syslog_case case_Notifier_Config = 18
const Notifier_MicrosoftSentinel_case case_Notifier_Config = 20

func (x *Notifier) WhichConfig() case_Notifier_Config {
	if x == nil {
		return Notifier_Config_not_set_case
	}
	switch x.Config.(type) {
	case *Notifier_Jira:
		return Notifier_Jira_case
	case *Notifier_Email:
		return Notifier_Email_case
	case *Notifier_Cscc:
		return Notifier_Cscc_case
	case *Notifier_Splunk:
		return Notifier_Splunk_case
	case *Notifier_Pagerduty:
		return Notifier_Pagerduty_case
	case *Notifier_Generic:
		return Notifier_Generic_case
	case *Notifier_Sumologic:
		return Notifier_Sumologic_case
	case *Notifier_AwsSecurityHub:
		return Notifier_AwsSecurityHub_case
	case *Notifier_Syslog:
		return Notifier_Syslog_case
	case *Notifier_MicrosoftSentinel:
		return Notifier_MicrosoftSentinel_case
	default:
		return Notifier_Config_not_set_case
	}
}

type Notifier_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id           string
	Name         string
	Type         string
	UiEndpoint   string
	LabelKey     string
	LabelDefault string
	// Fields of oneof Config:
	Jira              *Jira
	Email             *Email
	Cscc              *CSCC
	Splunk            *Splunk
	Pagerduty         *PagerDuty
	Generic           *Generic
	Sumologic         *SumoLogic
	AwsSecurityHub    *AWSSecurityHub
	Syslog            *Syslog
	MicrosoftSentinel *MicrosoftSentinel
	// -- end of Config
	NotifierSecret string
	Traits         *Traits
}

func (b0 Notifier_builder) Build() *Notifier {
	m0 := &Notifier{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Type = b.Type
	x.UiEndpoint = b.UiEndpoint
	x.LabelKey = b.LabelKey
	x.LabelDefault = b.LabelDefault
	if b.Jira != nil {
		x.Config = &Notifier_Jira{b.Jira}
	}
	if b.Email != nil {
		x.Config = &Notifier_Email{b.Email}
	}
	if b.Cscc != nil {
		x.Config = &Notifier_Cscc{b.Cscc}
	}
	if b.Splunk != nil {
		x.Config = &Notifier_Splunk{b.Splunk}
	}
	if b.Pagerduty != nil {
		x.Config = &Notifier_Pagerduty{b.Pagerduty}
	}
	if b.Generic != nil {
		x.Config = &Notifier_Generic{b.Generic}
	}
	if b.Sumologic != nil {
		x.Config = &Notifier_Sumologic{b.Sumologic}
	}
	if b.AwsSecurityHub != nil {
		x.Config = &Notifier_AwsSecurityHub{b.AwsSecurityHub}
	}
	if b.Syslog != nil {
		x.Config = &Notifier_Syslog{b.Syslog}
	}
	if b.MicrosoftSentinel != nil {
		x.Config = &Notifier_MicrosoftSentinel{b.MicrosoftSentinel}
	}
	x.NotifierSecret = b.NotifierSecret
	x.Traits = b.Traits
	return m0
}

type case_Notifier_Config protoreflect.FieldNumber

func (x case_Notifier_Config) String() string {
	md := file_storage_notifier_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isNotifier_Config interface {
	isNotifier_Config()
}

type Notifier_Jira struct {
	Jira *Jira `protobuf:"bytes,10,opt,name=jira,oneof"`
}

type Notifier_Email struct {
	Email *Email `protobuf:"bytes,11,opt,name=email,oneof"`
}

type Notifier_Cscc struct {
	Cscc *CSCC `protobuf:"bytes,12,opt,name=cscc,oneof"`
}

type Notifier_Splunk struct {
	Splunk *Splunk `protobuf:"bytes,13,opt,name=splunk,oneof"`
}

type Notifier_Pagerduty struct {
	Pagerduty *PagerDuty `protobuf:"bytes,14,opt,name=pagerduty,oneof"`
}

type Notifier_Generic struct {
	Generic *Generic `protobuf:"bytes,15,opt,name=generic,oneof"`
}

type Notifier_Sumologic struct {
	Sumologic *SumoLogic `protobuf:"bytes,16,opt,name=sumologic,oneof"`
}

type Notifier_AwsSecurityHub struct {
	AwsSecurityHub *AWSSecurityHub `protobuf:"bytes,17,opt,name=aws_security_hub,json=awsSecurityHub,oneof"`
}

type Notifier_Syslog struct {
	Syslog *Syslog `protobuf:"bytes,18,opt,name=syslog,oneof"`
}

type Notifier_MicrosoftSentinel struct {
	MicrosoftSentinel *MicrosoftSentinel `protobuf:"bytes,20,opt,name=microsoft_sentinel,json=microsoftSentinel,oneof"`
}

func (*Notifier_Jira) isNotifier_Config() {}

func (*Notifier_Email) isNotifier_Config() {}

func (*Notifier_Cscc) isNotifier_Config() {}

func (*Notifier_Splunk) isNotifier_Config() {}

func (*Notifier_Pagerduty) isNotifier_Config() {}

func (*Notifier_Generic) isNotifier_Config() {}

func (*Notifier_Sumologic) isNotifier_Config() {}

func (*Notifier_AwsSecurityHub) isNotifier_Config() {}

func (*Notifier_Syslog) isNotifier_Config() {}

func (*Notifier_MicrosoftSentinel) isNotifier_Config() {}

type AWSSecurityHub struct {
	state         protoimpl.MessageState      `protogen:"hybrid.v1"`
	Region        string                      `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Credentials   *AWSSecurityHub_Credentials `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
	AccountId     string                      `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSSecurityHub) Reset() {
	*x = AWSSecurityHub{}
	mi := &file_storage_notifier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSSecurityHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecurityHub) ProtoMessage() {}

func (x *AWSSecurityHub) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AWSSecurityHub) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSSecurityHub) GetCredentials() *AWSSecurityHub_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *AWSSecurityHub) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSSecurityHub) SetRegion(v string) {
	x.Region = v
}

func (x *AWSSecurityHub) SetCredentials(v *AWSSecurityHub_Credentials) {
	x.Credentials = v
}

func (x *AWSSecurityHub) SetAccountId(v string) {
	x.AccountId = v
}

func (x *AWSSecurityHub) HasCredentials() bool {
	if x == nil {
		return false
	}
	return x.Credentials != nil
}

func (x *AWSSecurityHub) ClearCredentials() {
	x.Credentials = nil
}

type AWSSecurityHub_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Region      string
	Credentials *AWSSecurityHub_Credentials
	AccountId   string
}

func (b0 AWSSecurityHub_builder) Build() *AWSSecurityHub {
	m0 := &AWSSecurityHub{}
	b, x := &b0, m0
	_, _ = b, x
	x.Region = b.Region
	x.Credentials = b.Credentials
	x.AccountId = b.AccountId
	return m0
}

type CSCC struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The service account for the integration. The server will mask the value of this credential in responses and logs.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty" scrub:"always"` // @gotags: scrub:"always"
	SourceId       string `protobuf:"bytes,4,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	WifEnabled     bool   `protobuf:"varint,5,opt,name=wif_enabled,json=wifEnabled" json:"wif_enabled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSCC) Reset() {
	*x = CSCC{}
	mi := &file_storage_notifier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCC) ProtoMessage() {}

func (x *CSCC) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CSCC) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *CSCC) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CSCC) GetWifEnabled() bool {
	if x != nil {
		return x.WifEnabled
	}
	return false
}

func (x *CSCC) SetServiceAccount(v string) {
	x.ServiceAccount = v
}

func (x *CSCC) SetSourceId(v string) {
	x.SourceId = v
}

func (x *CSCC) SetWifEnabled(v bool) {
	x.WifEnabled = v
}

type CSCC_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The service account for the integration. The server will mask the value of this credential in responses and logs.
	ServiceAccount string
	SourceId       string
	WifEnabled     bool
}

func (b0 CSCC_builder) Build() *CSCC {
	m0 := &CSCC{}
	b, x := &b0, m0
	_, _ = b, x
	x.ServiceAccount = b.ServiceAccount
	x.SourceId = b.SourceId
	x.WifEnabled = b.WifEnabled
	return m0
}

type Jira struct {
	state    protoimpl.MessageState `protogen:"hybrid.v1"`
	Url      string                 `protobuf:"bytes,1,opt,name=url" json:"url,omitempty" scrub:"dependent" validate:"nolocalendpoint"`           // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	Username string                 `protobuf:"bytes,2,opt,name=username" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password          string                  `protobuf:"bytes,3,opt,name=password" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	IssueType         string                  `protobuf:"bytes,4,opt,name=issue_type,json=issueType" json:"issue_type,omitempty"`
	PriorityMappings  []*Jira_PriorityMapping `protobuf:"bytes,5,rep,name=priority_mappings,json=priorityMappings" json:"priority_mappings,omitempty"`
	DefaultFieldsJson string                  `protobuf:"bytes,6,opt,name=default_fields_json,json=defaultFieldsJson" json:"default_fields_json,omitempty"`
	DisablePriority   bool                    `protobuf:"varint,7,opt,name=disablePriority" json:"disablePriority,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Jira) Reset() {
	*x = Jira{}
	mi := &file_storage_notifier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jira) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jira) ProtoMessage() {}

func (x *Jira) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Jira) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Jira) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jira) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Jira) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *Jira) GetPriorityMappings() []*Jira_PriorityMapping {
	if x != nil {
		return x.PriorityMappings
	}
	return nil
}

func (x *Jira) GetDefaultFieldsJson() string {
	if x != nil {
		return x.DefaultFieldsJson
	}
	return ""
}

func (x *Jira) GetDisablePriority() bool {
	if x != nil {
		return x.DisablePriority
	}
	return false
}

func (x *Jira) SetUrl(v string) {
	x.Url = v
}

func (x *Jira) SetUsername(v string) {
	x.Username = v
}

func (x *Jira) SetPassword(v string) {
	x.Password = v
}

func (x *Jira) SetIssueType(v string) {
	x.IssueType = v
}

func (x *Jira) SetPriorityMappings(v []*Jira_PriorityMapping) {
	x.PriorityMappings = v
}

func (x *Jira) SetDefaultFieldsJson(v string) {
	x.DefaultFieldsJson = v
}

func (x *Jira) SetDisablePriority(v bool) {
	x.DisablePriority = v
}

type Jira_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Url      string
	Username string
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password          string
	IssueType         string
	PriorityMappings  []*Jira_PriorityMapping
	DefaultFieldsJson string
	DisablePriority   bool
}

func (b0 Jira_builder) Build() *Jira {
	m0 := &Jira{}
	b, x := &b0, m0
	_, _ = b, x
	x.Url = b.Url
	x.Username = b.Username
	x.Password = b.Password
	x.IssueType = b.IssueType
	x.PriorityMappings = b.PriorityMappings
	x.DefaultFieldsJson = b.DefaultFieldsJson
	x.DisablePriority = b.DisablePriority
	return m0
}

type Email struct {
	state    protoimpl.MessageState `protogen:"hybrid.v1"`
	Server   string                 `protobuf:"bytes,1,opt,name=server" json:"server,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	Sender   string                 `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Username string                 `protobuf:"bytes,3,opt,name=username" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password              string           `protobuf:"bytes,4,opt,name=password" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	DisableTLS            bool             `protobuf:"varint,5,opt,name=disableTLS" json:"disableTLS,omitempty"`
	DEPRECATEDUseStartTLS bool             `protobuf:"varint,6,opt,name=DEPRECATED_useStartTLS,json=DEPRECATEDUseStartTLS" json:"DEPRECATED_useStartTLS,omitempty"` // useStartTLS has been deprecated for startTLSAuthMethod
	From                  string           `protobuf:"bytes,7,opt,name=from" json:"from,omitempty"`
	StartTLSAuthMethod    Email_AuthMethod `protobuf:"varint,8,opt,name=startTLSAuthMethod,enum=storage.Email_AuthMethod" json:"startTLSAuthMethod,omitempty"`
	// Set to true to allow unauthenticated SMTP
	AllowUnauthenticatedSmtp bool `protobuf:"varint,9,opt,name=allow_unauthenticated_smtp,json=allowUnauthenticatedSmtp" json:"allow_unauthenticated_smtp,omitempty" scrub:"disableDependentIfTrue"` // @gotags: scrub:"disableDependentIfTrue"
	SkipTLSVerify            bool `protobuf:"varint,10,opt,name=skipTLSVerify" json:"skipTLSVerify,omitempty"`
	// the local FQDN sent by the client in the EHLO/HELO command. Optional, if left blank, localhost will be used
	HostnameHeloEhlo string `protobuf:"bytes,11,opt,name=hostname_helo_ehlo,json=hostnameHeloEhlo" json:"hostname_helo_ehlo,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Email) Reset() {
	*x = Email{}
	mi := &file_storage_notifier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Email) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Email) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Email) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Email) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Email) GetDisableTLS() bool {
	if x != nil {
		return x.DisableTLS
	}
	return false
}

func (x *Email) GetDEPRECATEDUseStartTLS() bool {
	if x != nil {
		return x.DEPRECATEDUseStartTLS
	}
	return false
}

func (x *Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Email) GetStartTLSAuthMethod() Email_AuthMethod {
	if x != nil {
		return x.StartTLSAuthMethod
	}
	return Email_DISABLED
}

func (x *Email) GetAllowUnauthenticatedSmtp() bool {
	if x != nil {
		return x.AllowUnauthenticatedSmtp
	}
	return false
}

func (x *Email) GetSkipTLSVerify() bool {
	if x != nil {
		return x.SkipTLSVerify
	}
	return false
}

func (x *Email) GetHostnameHeloEhlo() string {
	if x != nil {
		return x.HostnameHeloEhlo
	}
	return ""
}

func (x *Email) SetServer(v string) {
	x.Server = v
}

func (x *Email) SetSender(v string) {
	x.Sender = v
}

func (x *Email) SetUsername(v string) {
	x.Username = v
}

func (x *Email) SetPassword(v string) {
	x.Password = v
}

func (x *Email) SetDisableTLS(v bool) {
	x.DisableTLS = v
}

func (x *Email) SetDEPRECATEDUseStartTLS(v bool) {
	x.DEPRECATEDUseStartTLS = v
}

func (x *Email) SetFrom(v string) {
	x.From = v
}

func (x *Email) SetStartTLSAuthMethod(v Email_AuthMethod) {
	x.StartTLSAuthMethod = v
}

func (x *Email) SetAllowUnauthenticatedSmtp(v bool) {
	x.AllowUnauthenticatedSmtp = v
}

func (x *Email) SetSkipTLSVerify(v bool) {
	x.SkipTLSVerify = v
}

func (x *Email) SetHostnameHeloEhlo(v string) {
	x.HostnameHeloEhlo = v
}

type Email_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Server   string
	Sender   string
	Username string
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password              string
	DisableTLS            bool
	DEPRECATEDUseStartTLS bool
	From                  string
	StartTLSAuthMethod    Email_AuthMethod
	// Set to true to allow unauthenticated SMTP
	AllowUnauthenticatedSmtp bool
	SkipTLSVerify            bool
	// the local FQDN sent by the client in the EHLO/HELO command. Optional, if left blank, localhost will be used
	HostnameHeloEhlo string
}

func (b0 Email_builder) Build() *Email {
	m0 := &Email{}
	b, x := &b0, m0
	_, _ = b, x
	x.Server = b.Server
	x.Sender = b.Sender
	x.Username = b.Username
	x.Password = b.Password
	x.DisableTLS = b.DisableTLS
	x.DEPRECATEDUseStartTLS = b.DEPRECATEDUseStartTLS
	x.From = b.From
	x.StartTLSAuthMethod = b.StartTLSAuthMethod
	x.AllowUnauthenticatedSmtp = b.AllowUnauthenticatedSmtp
	x.SkipTLSVerify = b.SkipTLSVerify
	x.HostnameHeloEhlo = b.HostnameHeloEhlo
	return m0
}

type Splunk struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The HTTP token for the integration. The server will mask the value of this credential in responses and logs.
	HttpToken           string `protobuf:"bytes,1,opt,name=http_token,json=httpToken" json:"http_token,omitempty" scrub:"always"`          // @gotags: scrub:"always"
	HttpEndpoint        string `protobuf:"bytes,2,opt,name=http_endpoint,json=httpEndpoint" json:"http_endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"` // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	Insecure            bool   `protobuf:"varint,3,opt,name=insecure" json:"insecure,omitempty"`
	Truncate            int64  `protobuf:"varint,4,opt,name=truncate" json:"truncate,omitempty"`
	AuditLoggingEnabled bool   `protobuf:"varint,5,opt,name=audit_logging_enabled,json=auditLoggingEnabled" json:"audit_logging_enabled,omitempty"`
	// Types that are valid to be assigned to DerivedSourceTypeDeprecated:
	//
	//	*Splunk_DerivedSourceType
	DerivedSourceTypeDeprecated isSplunk_DerivedSourceTypeDeprecated `protobuf_oneof:"derived_source_type_deprecated"`
	SourceTypes                 map[string]string                    `protobuf:"bytes,7,rep,name=source_types,json=sourceTypes" json:"source_types,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Splunk) Reset() {
	*x = Splunk{}
	mi := &file_storage_notifier_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Splunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Splunk) ProtoMessage() {}

func (x *Splunk) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Splunk) GetHttpToken() string {
	if x != nil {
		return x.HttpToken
	}
	return ""
}

func (x *Splunk) GetHttpEndpoint() string {
	if x != nil {
		return x.HttpEndpoint
	}
	return ""
}

func (x *Splunk) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *Splunk) GetTruncate() int64 {
	if x != nil {
		return x.Truncate
	}
	return 0
}

func (x *Splunk) GetAuditLoggingEnabled() bool {
	if x != nil {
		return x.AuditLoggingEnabled
	}
	return false
}

func (x *Splunk) GetDerivedSourceTypeDeprecated() isSplunk_DerivedSourceTypeDeprecated {
	if x != nil {
		return x.DerivedSourceTypeDeprecated
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/notifier.proto.
func (x *Splunk) GetDerivedSourceType() bool {
	if x != nil {
		if x, ok := x.DerivedSourceTypeDeprecated.(*Splunk_DerivedSourceType); ok {
			return x.DerivedSourceType
		}
	}
	return false
}

func (x *Splunk) GetSourceTypes() map[string]string {
	if x != nil {
		return x.SourceTypes
	}
	return nil
}

func (x *Splunk) SetHttpToken(v string) {
	x.HttpToken = v
}

func (x *Splunk) SetHttpEndpoint(v string) {
	x.HttpEndpoint = v
}

func (x *Splunk) SetInsecure(v bool) {
	x.Insecure = v
}

func (x *Splunk) SetTruncate(v int64) {
	x.Truncate = v
}

func (x *Splunk) SetAuditLoggingEnabled(v bool) {
	x.AuditLoggingEnabled = v
}

// Deprecated: Marked as deprecated in storage/notifier.proto.
func (x *Splunk) SetDerivedSourceType(v bool) {
	x.DerivedSourceTypeDeprecated = &Splunk_DerivedSourceType{v}
}

func (x *Splunk) SetSourceTypes(v map[string]string) {
	x.SourceTypes = v
}

func (x *Splunk) HasDerivedSourceTypeDeprecated() bool {
	if x == nil {
		return false
	}
	return x.DerivedSourceTypeDeprecated != nil
}

// Deprecated: Marked as deprecated in storage/notifier.proto.
func (x *Splunk) HasDerivedSourceType() bool {
	if x == nil {
		return false
	}
	_, ok := x.DerivedSourceTypeDeprecated.(*Splunk_DerivedSourceType)
	return ok
}

func (x *Splunk) ClearDerivedSourceTypeDeprecated() {
	x.DerivedSourceTypeDeprecated = nil
}

// Deprecated: Marked as deprecated in storage/notifier.proto.
func (x *Splunk) ClearDerivedSourceType() {
	if _, ok := x.DerivedSourceTypeDeprecated.(*Splunk_DerivedSourceType); ok {
		x.DerivedSourceTypeDeprecated = nil
	}
}

const Splunk_DerivedSourceTypeDeprecated_not_set_case case_Splunk_DerivedSourceTypeDeprecated = 0
const Splunk_DerivedSourceType_case case_Splunk_DerivedSourceTypeDeprecated = 6

func (x *Splunk) WhichDerivedSourceTypeDeprecated() case_Splunk_DerivedSourceTypeDeprecated {
	if x == nil {
		return Splunk_DerivedSourceTypeDeprecated_not_set_case
	}
	switch x.DerivedSourceTypeDeprecated.(type) {
	case *Splunk_DerivedSourceType:
		return Splunk_DerivedSourceType_case
	default:
		return Splunk_DerivedSourceTypeDeprecated_not_set_case
	}
}

type Splunk_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The HTTP token for the integration. The server will mask the value of this credential in responses and logs.
	HttpToken           string
	HttpEndpoint        string
	Insecure            bool
	Truncate            int64
	AuditLoggingEnabled bool
	// Fields of oneof DerivedSourceTypeDeprecated:
	// derived_source_type is deprecated in lieu of source_types
	//
	// Deprecated: Marked as deprecated in storage/notifier.proto.
	DerivedSourceType *bool
	// -- end of DerivedSourceTypeDeprecated
	SourceTypes map[string]string
}

func (b0 Splunk_builder) Build() *Splunk {
	m0 := &Splunk{}
	b, x := &b0, m0
	_, _ = b, x
	x.HttpToken = b.HttpToken
	x.HttpEndpoint = b.HttpEndpoint
	x.Insecure = b.Insecure
	x.Truncate = b.Truncate
	x.AuditLoggingEnabled = b.AuditLoggingEnabled
	if b.DerivedSourceType != nil {
		x.DerivedSourceTypeDeprecated = &Splunk_DerivedSourceType{*b.DerivedSourceType}
	}
	x.SourceTypes = b.SourceTypes
	return m0
}

type case_Splunk_DerivedSourceTypeDeprecated protoreflect.FieldNumber

func (x case_Splunk_DerivedSourceTypeDeprecated) String() string {
	md := file_storage_notifier_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSplunk_DerivedSourceTypeDeprecated interface {
	isSplunk_DerivedSourceTypeDeprecated()
}

type Splunk_DerivedSourceType struct {
	// derived_source_type is deprecated in lieu of source_types
	//
	// Deprecated: Marked as deprecated in storage/notifier.proto.
	DerivedSourceType bool `protobuf:"varint,6,opt,name=derived_source_type,json=derivedSourceType,oneof"`
}

func (*Splunk_DerivedSourceType) isSplunk_DerivedSourceTypeDeprecated() {}

type PagerDuty struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The API key for the integration. The server will mask the value of this credential in responses and logs.
	ApiKey        string `protobuf:"bytes,1,opt,name=api_key,json=apiKey" json:"api_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagerDuty) Reset() {
	*x = PagerDuty{}
	mi := &file_storage_notifier_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagerDuty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerDuty) ProtoMessage() {}

func (x *PagerDuty) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PagerDuty) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PagerDuty) SetApiKey(v string) {
	x.ApiKey = v
}

type PagerDuty_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The API key for the integration. The server will mask the value of this credential in responses and logs.
	ApiKey string
}

func (b0 PagerDuty_builder) Build() *PagerDuty {
	m0 := &PagerDuty{}
	b, x := &b0, m0
	_, _ = b, x
	x.ApiKey = b.ApiKey
	return m0
}

type Generic struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"` // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	SkipTLSVerify bool                   `protobuf:"varint,2,opt,name=skipTLSVerify" json:"skipTLSVerify,omitempty"`
	CaCert        string                 `protobuf:"bytes,3,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password            string          `protobuf:"bytes,5,opt,name=password" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Headers             []*KeyValuePair `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
	ExtraFields         []*KeyValuePair `protobuf:"bytes,7,rep,name=extra_fields,json=extraFields" json:"extra_fields,omitempty"`
	AuditLoggingEnabled bool            `protobuf:"varint,8,opt,name=audit_logging_enabled,json=auditLoggingEnabled" json:"audit_logging_enabled,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Generic) Reset() {
	*x = Generic{}
	mi := &file_storage_notifier_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Generic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generic) ProtoMessage() {}

func (x *Generic) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Generic) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Generic) GetSkipTLSVerify() bool {
	if x != nil {
		return x.SkipTLSVerify
	}
	return false
}

func (x *Generic) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *Generic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Generic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Generic) GetHeaders() []*KeyValuePair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Generic) GetExtraFields() []*KeyValuePair {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *Generic) GetAuditLoggingEnabled() bool {
	if x != nil {
		return x.AuditLoggingEnabled
	}
	return false
}

func (x *Generic) SetEndpoint(v string) {
	x.Endpoint = v
}

func (x *Generic) SetSkipTLSVerify(v bool) {
	x.SkipTLSVerify = v
}

func (x *Generic) SetCaCert(v string) {
	x.CaCert = v
}

func (x *Generic) SetUsername(v string) {
	x.Username = v
}

func (x *Generic) SetPassword(v string) {
	x.Password = v
}

func (x *Generic) SetHeaders(v []*KeyValuePair) {
	x.Headers = v
}

func (x *Generic) SetExtraFields(v []*KeyValuePair) {
	x.ExtraFields = v
}

func (x *Generic) SetAuditLoggingEnabled(v bool) {
	x.AuditLoggingEnabled = v
}

type Generic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Endpoint      string
	SkipTLSVerify bool
	CaCert        string
	Username      string
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password            string
	Headers             []*KeyValuePair
	ExtraFields         []*KeyValuePair
	AuditLoggingEnabled bool
}

func (b0 Generic_builder) Build() *Generic {
	m0 := &Generic{}
	b, x := &b0, m0
	_, _ = b, x
	x.Endpoint = b.Endpoint
	x.SkipTLSVerify = b.SkipTLSVerify
	x.CaCert = b.CaCert
	x.Username = b.Username
	x.Password = b.Password
	x.Headers = b.Headers
	x.ExtraFields = b.ExtraFields
	x.AuditLoggingEnabled = b.AuditLoggingEnabled
	return m0
}

type SumoLogic struct {
	state             protoimpl.MessageState `protogen:"hybrid.v1"`
	HttpSourceAddress string                 `protobuf:"bytes,1,opt,name=http_source_address,json=httpSourceAddress" json:"http_source_address,omitempty" validate:"nolocalendpoint"` // @gotags: validate:"nolocalendpoint"
	SkipTLSVerify     bool                   `protobuf:"varint,2,opt,name=skipTLSVerify" json:"skipTLSVerify,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SumoLogic) Reset() {
	*x = SumoLogic{}
	mi := &file_storage_notifier_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SumoLogic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoLogic) ProtoMessage() {}

func (x *SumoLogic) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SumoLogic) GetHttpSourceAddress() string {
	if x != nil {
		return x.HttpSourceAddress
	}
	return ""
}

func (x *SumoLogic) GetSkipTLSVerify() bool {
	if x != nil {
		return x.SkipTLSVerify
	}
	return false
}

func (x *SumoLogic) SetHttpSourceAddress(v string) {
	x.HttpSourceAddress = v
}

func (x *SumoLogic) SetSkipTLSVerify(v bool) {
	x.SkipTLSVerify = v
}

type SumoLogic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	HttpSourceAddress string
	SkipTLSVerify     bool
}

func (b0 SumoLogic_builder) Build() *SumoLogic {
	m0 := &SumoLogic{}
	b, x := &b0, m0
	_, _ = b, x
	x.HttpSourceAddress = b.HttpSourceAddress
	x.SkipTLSVerify = b.SkipTLSVerify
	return m0
}

type MicrosoftSentinel struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// log_ingestion_endpoint is the log ingestion endpoint.
	LogIngestionEndpoint string `protobuf:"bytes,1,opt,name=log_ingestion_endpoint,json=logIngestionEndpoint" json:"log_ingestion_endpoint,omitempty"`
	// directory_tenant_id contains the ID of the Microsoft Directory ID of the selected tenant.
	DirectoryTenantId string `protobuf:"bytes,2,opt,name=directory_tenant_id,json=directoryTenantId" json:"directory_tenant_id,omitempty"`
	// application_client_id contains the ID of the application ID of the service principal.
	ApplicationClientId string `protobuf:"bytes,3,opt,name=application_client_id,json=applicationClientId" json:"application_client_id,omitempty"`
	// secret contains the client secret.
	Secret               string                                      `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	AlertDcrConfig       *MicrosoftSentinel_DataCollectionRuleConfig `protobuf:"bytes,5,opt,name=alert_dcr_config,json=alertDcrConfig" json:"alert_dcr_config,omitempty"`
	AuditLogDcrConfig    *MicrosoftSentinel_DataCollectionRuleConfig `protobuf:"bytes,6,opt,name=audit_log_dcr_config,json=auditLogDcrConfig" json:"audit_log_dcr_config,omitempty"`
	ClientCertAuthConfig *MicrosoftSentinel_ClientCertAuthConfig     `protobuf:"bytes,7,opt,name=client_cert_auth_config,json=clientCertAuthConfig" json:"client_cert_auth_config,omitempty"`
	// Enables authentication with short-lived tokens using Azure managed identities
	// or Azure workload identities.
	// The toggle exists to make the use of Azure default credentials explicit rather
	// than always using them as a fallback. The explicit behavior is more consistent
	// with other integrations.
	WifEnabled    bool `protobuf:"varint,8,opt,name=wif_enabled,json=wifEnabled" json:"wif_enabled,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MicrosoftSentinel) Reset() {
	*x = MicrosoftSentinel{}
	mi := &file_storage_notifier_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicrosoftSentinel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftSentinel) ProtoMessage() {}

func (x *MicrosoftSentinel) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MicrosoftSentinel) GetLogIngestionEndpoint() string {
	if x != nil {
		return x.LogIngestionEndpoint
	}
	return ""
}

func (x *MicrosoftSentinel) GetDirectoryTenantId() string {
	if x != nil {
		return x.DirectoryTenantId
	}
	return ""
}

func (x *MicrosoftSentinel) GetApplicationClientId() string {
	if x != nil {
		return x.ApplicationClientId
	}
	return ""
}

func (x *MicrosoftSentinel) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *MicrosoftSentinel) GetAlertDcrConfig() *MicrosoftSentinel_DataCollectionRuleConfig {
	if x != nil {
		return x.AlertDcrConfig
	}
	return nil
}

func (x *MicrosoftSentinel) GetAuditLogDcrConfig() *MicrosoftSentinel_DataCollectionRuleConfig {
	if x != nil {
		return x.AuditLogDcrConfig
	}
	return nil
}

func (x *MicrosoftSentinel) GetClientCertAuthConfig() *MicrosoftSentinel_ClientCertAuthConfig {
	if x != nil {
		return x.ClientCertAuthConfig
	}
	return nil
}

func (x *MicrosoftSentinel) GetWifEnabled() bool {
	if x != nil {
		return x.WifEnabled
	}
	return false
}

func (x *MicrosoftSentinel) SetLogIngestionEndpoint(v string) {
	x.LogIngestionEndpoint = v
}

func (x *MicrosoftSentinel) SetDirectoryTenantId(v string) {
	x.DirectoryTenantId = v
}

func (x *MicrosoftSentinel) SetApplicationClientId(v string) {
	x.ApplicationClientId = v
}

func (x *MicrosoftSentinel) SetSecret(v string) {
	x.Secret = v
}

func (x *MicrosoftSentinel) SetAlertDcrConfig(v *MicrosoftSentinel_DataCollectionRuleConfig) {
	x.AlertDcrConfig = v
}

func (x *MicrosoftSentinel) SetAuditLogDcrConfig(v *MicrosoftSentinel_DataCollectionRuleConfig) {
	x.AuditLogDcrConfig = v
}

func (x *MicrosoftSentinel) SetClientCertAuthConfig(v *MicrosoftSentinel_ClientCertAuthConfig) {
	x.ClientCertAuthConfig = v
}

func (x *MicrosoftSentinel) SetWifEnabled(v bool) {
	x.WifEnabled = v
}

func (x *MicrosoftSentinel) HasAlertDcrConfig() bool {
	if x == nil {
		return false
	}
	return x.AlertDcrConfig != nil
}

func (x *MicrosoftSentinel) HasAuditLogDcrConfig() bool {
	if x == nil {
		return false
	}
	return x.AuditLogDcrConfig != nil
}

func (x *MicrosoftSentinel) HasClientCertAuthConfig() bool {
	if x == nil {
		return false
	}
	return x.ClientCertAuthConfig != nil
}

func (x *MicrosoftSentinel) ClearAlertDcrConfig() {
	x.AlertDcrConfig = nil
}

func (x *MicrosoftSentinel) ClearAuditLogDcrConfig() {
	x.AuditLogDcrConfig = nil
}

func (x *MicrosoftSentinel) ClearClientCertAuthConfig() {
	x.ClientCertAuthConfig = nil
}

type MicrosoftSentinel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// log_ingestion_endpoint is the log ingestion endpoint.
	LogIngestionEndpoint string
	// directory_tenant_id contains the ID of the Microsoft Directory ID of the selected tenant.
	DirectoryTenantId string
	// application_client_id contains the ID of the application ID of the service principal.
	ApplicationClientId string
	// secret contains the client secret.
	Secret               string
	AlertDcrConfig       *MicrosoftSentinel_DataCollectionRuleConfig
	AuditLogDcrConfig    *MicrosoftSentinel_DataCollectionRuleConfig
	ClientCertAuthConfig *MicrosoftSentinel_ClientCertAuthConfig
	// Enables authentication with short-lived tokens using Azure managed identities
	// or Azure workload identities.
	// The toggle exists to make the use of Azure default credentials explicit rather
	// than always using them as a fallback. The explicit behavior is more consistent
	// with other integrations.
	WifEnabled bool
}

func (b0 MicrosoftSentinel_builder) Build() *MicrosoftSentinel {
	m0 := &MicrosoftSentinel{}
	b, x := &b0, m0
	_, _ = b, x
	x.LogIngestionEndpoint = b.LogIngestionEndpoint
	x.DirectoryTenantId = b.DirectoryTenantId
	x.ApplicationClientId = b.ApplicationClientId
	x.Secret = b.Secret
	x.AlertDcrConfig = b.AlertDcrConfig
	x.AuditLogDcrConfig = b.AuditLogDcrConfig
	x.ClientCertAuthConfig = b.ClientCertAuthConfig
	x.WifEnabled = b.WifEnabled
	return m0
}

type Syslog struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	LocalFacility Syslog_LocalFacility   `protobuf:"varint,1,opt,name=local_facility,json=localFacility,enum=storage.Syslog_LocalFacility" json:"local_facility,omitempty"`
	// Eventually this will support TCP, UDP, and local endpoints
	//
	// Types that are valid to be assigned to Endpoint:
	//
	//	*Syslog_TcpConfig
	Endpoint       isSyslog_Endpoint    `protobuf_oneof:"endpoint"`
	ExtraFields    []*KeyValuePair      `protobuf:"bytes,3,rep,name=extra_fields,json=extraFields" json:"extra_fields,omitempty"`
	MessageFormat  Syslog_MessageFormat `protobuf:"varint,4,opt,name=message_format,json=messageFormat,enum=storage.Syslog_MessageFormat" json:"message_format,omitempty"`
	MaxMessageSize int32                `protobuf:"varint,5,opt,name=max_message_size,json=maxMessageSize" json:"max_message_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Syslog) Reset() {
	*x = Syslog{}
	mi := &file_storage_notifier_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Syslog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog) ProtoMessage() {}

func (x *Syslog) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Syslog) GetLocalFacility() Syslog_LocalFacility {
	if x != nil {
		return x.LocalFacility
	}
	return Syslog_LOCAL0
}

func (x *Syslog) GetEndpoint() isSyslog_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Syslog) GetTcpConfig() *Syslog_TCPConfig {
	if x != nil {
		if x, ok := x.Endpoint.(*Syslog_TcpConfig); ok {
			return x.TcpConfig
		}
	}
	return nil
}

func (x *Syslog) GetExtraFields() []*KeyValuePair {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *Syslog) GetMessageFormat() Syslog_MessageFormat {
	if x != nil {
		return x.MessageFormat
	}
	return Syslog_LEGACY
}

func (x *Syslog) GetMaxMessageSize() int32 {
	if x != nil {
		return x.MaxMessageSize
	}
	return 0
}

func (x *Syslog) SetLocalFacility(v Syslog_LocalFacility) {
	x.LocalFacility = v
}

func (x *Syslog) SetTcpConfig(v *Syslog_TCPConfig) {
	if v == nil {
		x.Endpoint = nil
		return
	}
	x.Endpoint = &Syslog_TcpConfig{v}
}

func (x *Syslog) SetExtraFields(v []*KeyValuePair) {
	x.ExtraFields = v
}

func (x *Syslog) SetMessageFormat(v Syslog_MessageFormat) {
	x.MessageFormat = v
}

func (x *Syslog) SetMaxMessageSize(v int32) {
	x.MaxMessageSize = v
}

func (x *Syslog) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return x.Endpoint != nil
}

func (x *Syslog) HasTcpConfig() bool {
	if x == nil {
		return false
	}
	_, ok := x.Endpoint.(*Syslog_TcpConfig)
	return ok
}

func (x *Syslog) ClearEndpoint() {
	x.Endpoint = nil
}

func (x *Syslog) ClearTcpConfig() {
	if _, ok := x.Endpoint.(*Syslog_TcpConfig); ok {
		x.Endpoint = nil
	}
}

const Syslog_Endpoint_not_set_case case_Syslog_Endpoint = 0
const Syslog_TcpConfig_case case_Syslog_Endpoint = 2

func (x *Syslog) WhichEndpoint() case_Syslog_Endpoint {
	if x == nil {
		return Syslog_Endpoint_not_set_case
	}
	switch x.Endpoint.(type) {
	case *Syslog_TcpConfig:
		return Syslog_TcpConfig_case
	default:
		return Syslog_Endpoint_not_set_case
	}
}

type Syslog_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	LocalFacility Syslog_LocalFacility
	// Eventually this will support TCP, UDP, and local endpoints

	// Fields of oneof Endpoint:
	TcpConfig *Syslog_TCPConfig
	// -- end of Endpoint
	ExtraFields    []*KeyValuePair
	MessageFormat  Syslog_MessageFormat
	MaxMessageSize int32
}

func (b0 Syslog_builder) Build() *Syslog {
	m0 := &Syslog{}
	b, x := &b0, m0
	_, _ = b, x
	x.LocalFacility = b.LocalFacility
	if b.TcpConfig != nil {
		x.Endpoint = &Syslog_TcpConfig{b.TcpConfig}
	}
	x.ExtraFields = b.ExtraFields
	x.MessageFormat = b.MessageFormat
	x.MaxMessageSize = b.MaxMessageSize
	return m0
}

type case_Syslog_Endpoint protoreflect.FieldNumber

func (x case_Syslog_Endpoint) String() string {
	md := file_storage_notifier_proto_msgTypes[10].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSyslog_Endpoint interface {
	isSyslog_Endpoint()
}

type Syslog_TcpConfig struct {
	TcpConfig *Syslog_TCPConfig `protobuf:"bytes,2,opt,name=tcp_config,json=tcpConfig,oneof"`
}

func (*Syslog_TcpConfig) isSyslog_Endpoint() {}

type AWSSecurityHub_Credentials struct {
	state           protoimpl.MessageState `protogen:"hybrid.v1"`
	AccessKeyId     string                 `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId" json:"access_key_id,omitempty" scrub:"always"`             // @gotags: scrub:"always"
	SecretAccessKey string                 `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey" json:"secret_access_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
	StsEnabled      bool                   `protobuf:"varint,3,opt,name=sts_enabled,json=stsEnabled" json:"sts_enabled,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AWSSecurityHub_Credentials) Reset() {
	*x = AWSSecurityHub_Credentials{}
	mi := &file_storage_notifier_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSSecurityHub_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecurityHub_Credentials) ProtoMessage() {}

func (x *AWSSecurityHub_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AWSSecurityHub_Credentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AWSSecurityHub_Credentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AWSSecurityHub_Credentials) GetStsEnabled() bool {
	if x != nil {
		return x.StsEnabled
	}
	return false
}

func (x *AWSSecurityHub_Credentials) SetAccessKeyId(v string) {
	x.AccessKeyId = v
}

func (x *AWSSecurityHub_Credentials) SetSecretAccessKey(v string) {
	x.SecretAccessKey = v
}

func (x *AWSSecurityHub_Credentials) SetStsEnabled(v bool) {
	x.StsEnabled = v
}

type AWSSecurityHub_Credentials_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AccessKeyId     string
	SecretAccessKey string
	StsEnabled      bool
}

func (b0 AWSSecurityHub_Credentials_builder) Build() *AWSSecurityHub_Credentials {
	m0 := &AWSSecurityHub_Credentials{}
	b, x := &b0, m0
	_, _ = b, x
	x.AccessKeyId = b.AccessKeyId
	x.SecretAccessKey = b.SecretAccessKey
	x.StsEnabled = b.StsEnabled
	return m0
}

type Jira_PriorityMapping struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Severity      Severity               `protobuf:"varint,1,opt,name=severity,enum=storage.Severity" json:"severity,omitempty"`
	PriorityName  string                 `protobuf:"bytes,2,opt,name=priority_name,json=priorityName" json:"priority_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jira_PriorityMapping) Reset() {
	*x = Jira_PriorityMapping{}
	mi := &file_storage_notifier_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jira_PriorityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jira_PriorityMapping) ProtoMessage() {}

func (x *Jira_PriorityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Jira_PriorityMapping) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *Jira_PriorityMapping) GetPriorityName() string {
	if x != nil {
		return x.PriorityName
	}
	return ""
}

func (x *Jira_PriorityMapping) SetSeverity(v Severity) {
	x.Severity = v
}

func (x *Jira_PriorityMapping) SetPriorityName(v string) {
	x.PriorityName = v
}

type Jira_PriorityMapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Severity     Severity
	PriorityName string
}

func (b0 Jira_PriorityMapping_builder) Build() *Jira_PriorityMapping {
	m0 := &Jira_PriorityMapping{}
	b, x := &b0, m0
	_, _ = b, x
	x.Severity = b.Severity
	x.PriorityName = b.PriorityName
	return m0
}

// DataCollectionRuleConfig contains information about the data collection rule which is a config per notifier type.
type MicrosoftSentinel_DataCollectionRuleConfig struct {
	state                protoimpl.MessageState `protogen:"hybrid.v1"`
	StreamName           string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	DataCollectionRuleId string                 `protobuf:"bytes,2,opt,name=data_collection_rule_id,json=dataCollectionRuleId" json:"data_collection_rule_id,omitempty"`
	Enabled              bool                   `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) Reset() {
	*x = MicrosoftSentinel_DataCollectionRuleConfig{}
	mi := &file_storage_notifier_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftSentinel_DataCollectionRuleConfig) ProtoMessage() {}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetDataCollectionRuleId() string {
	if x != nil {
		return x.DataCollectionRuleId
	}
	return ""
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) SetStreamName(v string) {
	x.StreamName = v
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) SetDataCollectionRuleId(v string) {
	x.DataCollectionRuleId = v
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) SetEnabled(v bool) {
	x.Enabled = v
}

type MicrosoftSentinel_DataCollectionRuleConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StreamName           string
	DataCollectionRuleId string
	Enabled              bool
}

func (b0 MicrosoftSentinel_DataCollectionRuleConfig_builder) Build() *MicrosoftSentinel_DataCollectionRuleConfig {
	m0 := &MicrosoftSentinel_DataCollectionRuleConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.StreamName = b.StreamName
	x.DataCollectionRuleId = b.DataCollectionRuleId
	x.Enabled = b.Enabled
	return m0
}

// client certificate which is used for authentication
type MicrosoftSentinel_ClientCertAuthConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// PEM encoded ASN.1 DER format.
	ClientCert string `protobuf:"bytes,1,opt,name=client_cert,json=clientCert" json:"client_cert,omitempty"`
	// PEM encoded PKCS #8, ASN.1 DER format.
	PrivateKey    string `protobuf:"bytes,2,opt,name=private_key,json=privateKey" json:"private_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) Reset() {
	*x = MicrosoftSentinel_ClientCertAuthConfig{}
	mi := &file_storage_notifier_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftSentinel_ClientCertAuthConfig) ProtoMessage() {}

func (x *MicrosoftSentinel_ClientCertAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) SetClientCert(v string) {
	x.ClientCert = v
}

func (x *MicrosoftSentinel_ClientCertAuthConfig) SetPrivateKey(v string) {
	x.PrivateKey = v
}

type MicrosoftSentinel_ClientCertAuthConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// PEM encoded ASN.1 DER format.
	ClientCert string
	// PEM encoded PKCS #8, ASN.1 DER format.
	PrivateKey string
}

func (b0 MicrosoftSentinel_ClientCertAuthConfig_builder) Build() *MicrosoftSentinel_ClientCertAuthConfig {
	m0 := &MicrosoftSentinel_ClientCertAuthConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.ClientCert = b.ClientCert
	x.PrivateKey = b.PrivateKey
	return m0
}

type Syslog_TCPConfig struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Hostname      string                 `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	Port          int32                  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	SkipTlsVerify bool                   `protobuf:"varint,3,opt,name=skip_tls_verify,json=skipTlsVerify" json:"skip_tls_verify,omitempty"`
	UseTls        bool                   `protobuf:"varint,4,opt,name=use_tls,json=useTls" json:"use_tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Syslog_TCPConfig) Reset() {
	*x = Syslog_TCPConfig{}
	mi := &file_storage_notifier_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Syslog_TCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog_TCPConfig) ProtoMessage() {}

func (x *Syslog_TCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Syslog_TCPConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Syslog_TCPConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Syslog_TCPConfig) GetSkipTlsVerify() bool {
	if x != nil {
		return x.SkipTlsVerify
	}
	return false
}

func (x *Syslog_TCPConfig) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *Syslog_TCPConfig) SetHostname(v string) {
	x.Hostname = v
}

func (x *Syslog_TCPConfig) SetPort(v int32) {
	x.Port = v
}

func (x *Syslog_TCPConfig) SetSkipTlsVerify(v bool) {
	x.SkipTlsVerify = v
}

func (x *Syslog_TCPConfig) SetUseTls(v bool) {
	x.UseTls = v
}

type Syslog_TCPConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Hostname      string
	Port          int32
	SkipTlsVerify bool
	UseTls        bool
}

func (b0 Syslog_TCPConfig_builder) Build() *Syslog_TCPConfig {
	m0 := &Syslog_TCPConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Hostname = b.Hostname
	x.Port = b.Port
	x.SkipTlsVerify = b.SkipTlsVerify
	x.UseTls = b.UseTls
	return m0
}

var File_storage_notifier_proto protoreflect.FileDescriptor

const file_storage_notifier_proto_rawDesc = "" +
	"\n" +
	"\x16storage/notifier.proto\x12\astorage\x1a\x14storage/common.proto\x1a\x14storage/policy.proto\x1a\x14storage/traits.proto\x1a!google/protobuf/go_features.proto\"\x80\x06\n" +
	"\bNotifier\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1f\n" +
	"\vui_endpoint\x18\x04 \x01(\tR\n" +
	"uiEndpoint\x12\x1b\n" +
	"\tlabel_key\x18\b \x01(\tR\blabelKey\x12#\n" +
	"\rlabel_default\x18\t \x01(\tR\flabelDefault\x12#\n" +
	"\x04jira\x18\n" +
	" \x01(\v2\r.storage.JiraH\x00R\x04jira\x12&\n" +
	"\x05email\x18\v \x01(\v2\x0e.storage.EmailH\x00R\x05email\x12#\n" +
	"\x04cscc\x18\f \x01(\v2\r.storage.CSCCH\x00R\x04cscc\x12)\n" +
	"\x06splunk\x18\r \x01(\v2\x0f.storage.SplunkH\x00R\x06splunk\x122\n" +
	"\tpagerduty\x18\x0e \x01(\v2\x12.storage.PagerDutyH\x00R\tpagerduty\x12,\n" +
	"\ageneric\x18\x0f \x01(\v2\x10.storage.GenericH\x00R\ageneric\x122\n" +
	"\tsumologic\x18\x10 \x01(\v2\x12.storage.SumoLogicH\x00R\tsumologic\x12C\n" +
	"\x10aws_security_hub\x18\x11 \x01(\v2\x17.storage.AWSSecurityHubH\x00R\x0eawsSecurityHub\x12)\n" +
	"\x06syslog\x18\x12 \x01(\v2\x0f.storage.SyslogH\x00R\x06syslog\x12K\n" +
	"\x12microsoft_sentinel\x18\x14 \x01(\v2\x1a.storage.MicrosoftSentinelH\x00R\x11microsoftSentinel\x12'\n" +
	"\x0fnotifier_secret\x18\x13 \x01(\tR\x0enotifierSecret\x12'\n" +
	"\x06traits\x182 \x01(\v2\x0f.storage.TraitsR\x06traitsB\b\n" +
	"\x06configJ\x04\b\x05\x10\x06R\aenabled\"\x8e\x02\n" +
	"\x0eAWSSecurityHub\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12E\n" +
	"\vcredentials\x18\x02 \x01(\v2#.storage.AWSSecurityHub.CredentialsR\vcredentials\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\tR\taccountId\x1a~\n" +
	"\vCredentials\x12\"\n" +
	"\raccess_key_id\x18\x01 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x02 \x01(\tR\x0fsecretAccessKey\x12\x1f\n" +
	"\vsts_enabled\x18\x03 \x01(\bR\n" +
	"stsEnabled\"y\n" +
	"\x04CSCC\x12'\n" +
	"\x0fservice_account\x18\x01 \x01(\tR\x0eserviceAccount\x12\x1b\n" +
	"\tsource_id\x18\x04 \x01(\tR\bsourceId\x12\x1f\n" +
	"\vwif_enabled\x18\x05 \x01(\bR\n" +
	"wifEnabledJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\x80\x03\n" +
	"\x04Jira\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x1d\n" +
	"\n" +
	"issue_type\x18\x04 \x01(\tR\tissueType\x12N\n" +
	"\x11priority_mappings\x18\x05 \x03(\v2\x1d.storage.Jira.PriorityMappingB\x02(\x01R\x10priorityMappings\x12.\n" +
	"\x13default_fields_json\x18\x06 \x01(\tR\x11defaultFieldsJson\x12(\n" +
	"\x0fdisablePriority\x18\a \x01(\bR\x0fdisablePriority\x1ae\n" +
	"\x0fPriorityMapping\x12-\n" +
	"\bseverity\x18\x01 \x01(\x0e2\x11.storage.SeverityR\bseverity\x12#\n" +
	"\rpriority_name\x18\x02 \x01(\tR\fpriorityName\"\xe9\x03\n" +
	"\x05Email\x12\x16\n" +
	"\x06server\x18\x01 \x01(\tR\x06server\x12\x16\n" +
	"\x06sender\x18\x02 \x01(\tR\x06sender\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x1e\n" +
	"\n" +
	"disableTLS\x18\x05 \x01(\bR\n" +
	"disableTLS\x125\n" +
	"\x16DEPRECATED_useStartTLS\x18\x06 \x01(\bR\x15DEPRECATEDUseStartTLS\x12\x12\n" +
	"\x04from\x18\a \x01(\tR\x04from\x12I\n" +
	"\x12startTLSAuthMethod\x18\b \x01(\x0e2\x19.storage.Email.AuthMethodR\x12startTLSAuthMethod\x12<\n" +
	"\x1aallow_unauthenticated_smtp\x18\t \x01(\bR\x18allowUnauthenticatedSmtp\x12$\n" +
	"\rskipTLSVerify\x18\n" +
	" \x01(\bR\rskipTLSVerify\x12,\n" +
	"\x12hostname_helo_ehlo\x18\v \x01(\tR\x10hostnameHeloEhlo\"0\n" +
	"\n" +
	"AuthMethod\x12\f\n" +
	"\bDISABLED\x10\x00\x12\t\n" +
	"\x05PLAIN\x10\x01\x12\t\n" +
	"\x05LOGIN\x10\x02\"\x99\x03\n" +
	"\x06Splunk\x12\x1d\n" +
	"\n" +
	"http_token\x18\x01 \x01(\tR\thttpToken\x12#\n" +
	"\rhttp_endpoint\x18\x02 \x01(\tR\fhttpEndpoint\x12\x1a\n" +
	"\binsecure\x18\x03 \x01(\bR\binsecure\x12\x1a\n" +
	"\btruncate\x18\x04 \x01(\x03R\btruncate\x122\n" +
	"\x15audit_logging_enabled\x18\x05 \x01(\bR\x13auditLoggingEnabled\x124\n" +
	"\x13derived_source_type\x18\x06 \x01(\bB\x02\x18\x01H\x00R\x11derivedSourceType\x12G\n" +
	"\fsource_types\x18\a \x03(\v2 .storage.Splunk.SourceTypesEntryB\x02(\x01R\vsourceTypes\x1a>\n" +
	"\x10SourceTypesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B \n" +
	"\x1ederived_source_type_deprecated\"$\n" +
	"\tPagerDuty\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\"\xc3\x02\n" +
	"\aGeneric\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12$\n" +
	"\rskipTLSVerify\x18\x02 \x01(\bR\rskipTLSVerify\x12\x17\n" +
	"\aca_cert\x18\x03 \x01(\tR\x06caCert\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x123\n" +
	"\aheaders\x18\x06 \x03(\v2\x15.storage.KeyValuePairB\x02(\x01R\aheaders\x12<\n" +
	"\fextra_fields\x18\a \x03(\v2\x15.storage.KeyValuePairB\x02(\x01R\vextraFields\x122\n" +
	"\x15audit_logging_enabled\x18\b \x01(\bR\x13auditLoggingEnabled\"a\n" +
	"\tSumoLogic\x12.\n" +
	"\x13http_source_address\x18\x01 \x01(\tR\x11httpSourceAddress\x12$\n" +
	"\rskipTLSVerify\x18\x02 \x01(\bR\rskipTLSVerify\"\xfc\x05\n" +
	"\x11MicrosoftSentinel\x124\n" +
	"\x16log_ingestion_endpoint\x18\x01 \x01(\tR\x14logIngestionEndpoint\x12.\n" +
	"\x13directory_tenant_id\x18\x02 \x01(\tR\x11directoryTenantId\x122\n" +
	"\x15application_client_id\x18\x03 \x01(\tR\x13applicationClientId\x12\x16\n" +
	"\x06secret\x18\x04 \x01(\tR\x06secret\x12]\n" +
	"\x10alert_dcr_config\x18\x05 \x01(\v23.storage.MicrosoftSentinel.DataCollectionRuleConfigR\x0ealertDcrConfig\x12d\n" +
	"\x14audit_log_dcr_config\x18\x06 \x01(\v23.storage.MicrosoftSentinel.DataCollectionRuleConfigR\x11auditLogDcrConfig\x12f\n" +
	"\x17client_cert_auth_config\x18\a \x01(\v2/.storage.MicrosoftSentinel.ClientCertAuthConfigR\x14clientCertAuthConfig\x12\x1f\n" +
	"\vwif_enabled\x18\b \x01(\bR\n" +
	"wifEnabled\x1a\x8c\x01\n" +
	"\x18DataCollectionRuleConfig\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x125\n" +
	"\x17data_collection_rule_id\x18\x02 \x01(\tR\x14dataCollectionRuleId\x12\x18\n" +
	"\aenabled\x18\x03 \x01(\bR\aenabled\x1aX\n" +
	"\x14ClientCertAuthConfig\x12\x1f\n" +
	"\vclient_cert\x18\x01 \x01(\tR\n" +
	"clientCert\x12\x1f\n" +
	"\vprivate_key\x18\x02 \x01(\tR\n" +
	"privateKey\"\xd9\x04\n" +
	"\x06Syslog\x12D\n" +
	"\x0elocal_facility\x18\x01 \x01(\x0e2\x1d.storage.Syslog.LocalFacilityR\rlocalFacility\x12:\n" +
	"\n" +
	"tcp_config\x18\x02 \x01(\v2\x19.storage.Syslog.TCPConfigH\x00R\ttcpConfig\x12<\n" +
	"\fextra_fields\x18\x03 \x03(\v2\x15.storage.KeyValuePairB\x02(\x01R\vextraFields\x12D\n" +
	"\x0emessage_format\x18\x04 \x01(\x0e2\x1d.storage.Syslog.MessageFormatR\rmessageFormat\x12(\n" +
	"\x10max_message_size\x18\x05 \x01(\x05R\x0emaxMessageSize\x1a|\n" +
	"\tTCPConfig\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12&\n" +
	"\x0fskip_tls_verify\x18\x03 \x01(\bR\rskipTlsVerify\x12\x17\n" +
	"\ause_tls\x18\x04 \x01(\bR\x06useTls\"o\n" +
	"\rLocalFacility\x12\n" +
	"\n" +
	"\x06LOCAL0\x10\x00\x12\n" +
	"\n" +
	"\x06LOCAL1\x10\x01\x12\n" +
	"\n" +
	"\x06LOCAL2\x10\x02\x12\n" +
	"\n" +
	"\x06LOCAL3\x10\x03\x12\n" +
	"\n" +
	"\x06LOCAL4\x10\x04\x12\n" +
	"\n" +
	"\x06LOCAL5\x10\x05\x12\n" +
	"\n" +
	"\x06LOCAL6\x10\x06\x12\n" +
	"\n" +
	"\x06LOCAL7\x10\a\"$\n" +
	"\rMessageFormat\x12\n" +
	"\n" +
	"\x06LEGACY\x10\x00\x12\a\n" +
	"\x03CEF\x10\x01B\n" +
	"\n" +
	"\bendpointB>\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_storage_notifier_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_storage_notifier_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_storage_notifier_proto_goTypes = []any{
	(Email_AuthMethod)(0),              // 0: storage.Email.AuthMethod
	(Syslog_LocalFacility)(0),          // 1: storage.Syslog.LocalFacility
	(Syslog_MessageFormat)(0),          // 2: storage.Syslog.MessageFormat
	(*Notifier)(nil),                   // 3: storage.Notifier
	(*AWSSecurityHub)(nil),             // 4: storage.AWSSecurityHub
	(*CSCC)(nil),                       // 5: storage.CSCC
	(*Jira)(nil),                       // 6: storage.Jira
	(*Email)(nil),                      // 7: storage.Email
	(*Splunk)(nil),                     // 8: storage.Splunk
	(*PagerDuty)(nil),                  // 9: storage.PagerDuty
	(*Generic)(nil),                    // 10: storage.Generic
	(*SumoLogic)(nil),                  // 11: storage.SumoLogic
	(*MicrosoftSentinel)(nil),          // 12: storage.MicrosoftSentinel
	(*Syslog)(nil),                     // 13: storage.Syslog
	(*AWSSecurityHub_Credentials)(nil), // 14: storage.AWSSecurityHub.Credentials
	(*Jira_PriorityMapping)(nil),       // 15: storage.Jira.PriorityMapping
	nil,                                // 16: storage.Splunk.SourceTypesEntry
	(*MicrosoftSentinel_DataCollectionRuleConfig)(nil), // 17: storage.MicrosoftSentinel.DataCollectionRuleConfig
	(*MicrosoftSentinel_ClientCertAuthConfig)(nil),     // 18: storage.MicrosoftSentinel.ClientCertAuthConfig
	(*Syslog_TCPConfig)(nil),                           // 19: storage.Syslog.TCPConfig
	(*Traits)(nil),                                     // 20: storage.Traits
	(*KeyValuePair)(nil),                               // 21: storage.KeyValuePair
	(Severity)(0),                                      // 22: storage.Severity
}
var file_storage_notifier_proto_depIdxs = []int32{
	6,  // 0: storage.Notifier.jira:type_name -> storage.Jira
	7,  // 1: storage.Notifier.email:type_name -> storage.Email
	5,  // 2: storage.Notifier.cscc:type_name -> storage.CSCC
	8,  // 3: storage.Notifier.splunk:type_name -> storage.Splunk
	9,  // 4: storage.Notifier.pagerduty:type_name -> storage.PagerDuty
	10, // 5: storage.Notifier.generic:type_name -> storage.Generic
	11, // 6: storage.Notifier.sumologic:type_name -> storage.SumoLogic
	4,  // 7: storage.Notifier.aws_security_hub:type_name -> storage.AWSSecurityHub
	13, // 8: storage.Notifier.syslog:type_name -> storage.Syslog
	12, // 9: storage.Notifier.microsoft_sentinel:type_name -> storage.MicrosoftSentinel
	20, // 10: storage.Notifier.traits:type_name -> storage.Traits
	14, // 11: storage.AWSSecurityHub.credentials:type_name -> storage.AWSSecurityHub.Credentials
	15, // 12: storage.Jira.priority_mappings:type_name -> storage.Jira.PriorityMapping
	0,  // 13: storage.Email.startTLSAuthMethod:type_name -> storage.Email.AuthMethod
	16, // 14: storage.Splunk.source_types:type_name -> storage.Splunk.SourceTypesEntry
	21, // 15: storage.Generic.headers:type_name -> storage.KeyValuePair
	21, // 16: storage.Generic.extra_fields:type_name -> storage.KeyValuePair
	17, // 17: storage.MicrosoftSentinel.alert_dcr_config:type_name -> storage.MicrosoftSentinel.DataCollectionRuleConfig
	17, // 18: storage.MicrosoftSentinel.audit_log_dcr_config:type_name -> storage.MicrosoftSentinel.DataCollectionRuleConfig
	18, // 19: storage.MicrosoftSentinel.client_cert_auth_config:type_name -> storage.MicrosoftSentinel.ClientCertAuthConfig
	1,  // 20: storage.Syslog.local_facility:type_name -> storage.Syslog.LocalFacility
	19, // 21: storage.Syslog.tcp_config:type_name -> storage.Syslog.TCPConfig
	21, // 22: storage.Syslog.extra_fields:type_name -> storage.KeyValuePair
	2,  // 23: storage.Syslog.message_format:type_name -> storage.Syslog.MessageFormat
	22, // 24: storage.Jira.PriorityMapping.severity:type_name -> storage.Severity
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_storage_notifier_proto_init() }
func file_storage_notifier_proto_init() {
	if File_storage_notifier_proto != nil {
		return
	}
	file_storage_common_proto_init()
	file_storage_policy_proto_init()
	file_storage_traits_proto_init()
	file_storage_notifier_proto_msgTypes[0].OneofWrappers = []any{
		(*Notifier_Jira)(nil),
		(*Notifier_Email)(nil),
		(*Notifier_Cscc)(nil),
		(*Notifier_Splunk)(nil),
		(*Notifier_Pagerduty)(nil),
		(*Notifier_Generic)(nil),
		(*Notifier_Sumologic)(nil),
		(*Notifier_AwsSecurityHub)(nil),
		(*Notifier_Syslog)(nil),
		(*Notifier_MicrosoftSentinel)(nil),
	}
	file_storage_notifier_proto_msgTypes[5].OneofWrappers = []any{
		(*Splunk_DerivedSourceType)(nil),
	}
	file_storage_notifier_proto_msgTypes[10].OneofWrappers = []any{
		(*Syslog_TcpConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_notifier_proto_rawDesc), len(file_storage_notifier_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_notifier_proto_goTypes,
		DependencyIndexes: file_storage_notifier_proto_depIdxs,
		EnumInfos:         file_storage_notifier_proto_enumTypes,
		MessageInfos:      file_storage_notifier_proto_msgTypes,
	}.Build()
	File_storage_notifier_proto = out.File
	file_storage_notifier_proto_goTypes = nil
	file_storage_notifier_proto_depIdxs = nil
}
