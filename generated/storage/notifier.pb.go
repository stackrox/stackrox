// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/notifier.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Email_AuthMethod int32

const (
	Email_DISABLED Email_AuthMethod = 0
	Email_PLAIN    Email_AuthMethod = 1
	Email_LOGIN    Email_AuthMethod = 2
)

// Enum value maps for Email_AuthMethod.
var (
	Email_AuthMethod_name = map[int32]string{
		0: "DISABLED",
		1: "PLAIN",
		2: "LOGIN",
	}
	Email_AuthMethod_value = map[string]int32{
		"DISABLED": 0,
		"PLAIN":    1,
		"LOGIN":    2,
	}
)

func (x Email_AuthMethod) Enum() *Email_AuthMethod {
	p := new(Email_AuthMethod)
	*p = x
	return p
}

func (x Email_AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Email_AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[0].Descriptor()
}

func (Email_AuthMethod) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[0]
}

func (x Email_AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Email_AuthMethod.Descriptor instead.
func (Email_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{4, 0}
}

type Syslog_LocalFacility int32

const (
	Syslog_LOCAL0 Syslog_LocalFacility = 0
	Syslog_LOCAL1 Syslog_LocalFacility = 1
	Syslog_LOCAL2 Syslog_LocalFacility = 2
	Syslog_LOCAL3 Syslog_LocalFacility = 3
	Syslog_LOCAL4 Syslog_LocalFacility = 4
	Syslog_LOCAL5 Syslog_LocalFacility = 5
	Syslog_LOCAL6 Syslog_LocalFacility = 6
	Syslog_LOCAL7 Syslog_LocalFacility = 7
)

// Enum value maps for Syslog_LocalFacility.
var (
	Syslog_LocalFacility_name = map[int32]string{
		0: "LOCAL0",
		1: "LOCAL1",
		2: "LOCAL2",
		3: "LOCAL3",
		4: "LOCAL4",
		5: "LOCAL5",
		6: "LOCAL6",
		7: "LOCAL7",
	}
	Syslog_LocalFacility_value = map[string]int32{
		"LOCAL0": 0,
		"LOCAL1": 1,
		"LOCAL2": 2,
		"LOCAL3": 3,
		"LOCAL4": 4,
		"LOCAL5": 5,
		"LOCAL6": 6,
		"LOCAL7": 7,
	}
)

func (x Syslog_LocalFacility) Enum() *Syslog_LocalFacility {
	p := new(Syslog_LocalFacility)
	*p = x
	return p
}

func (x Syslog_LocalFacility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syslog_LocalFacility) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[1].Descriptor()
}

func (Syslog_LocalFacility) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[1]
}

func (x Syslog_LocalFacility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Syslog_LocalFacility.Descriptor instead.
func (Syslog_LocalFacility) EnumDescriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{10, 0}
}

type Syslog_MessageFormat int32

const (
	Syslog_LEGACY Syslog_MessageFormat = 0
	Syslog_CEF    Syslog_MessageFormat = 1
)

// Enum value maps for Syslog_MessageFormat.
var (
	Syslog_MessageFormat_name = map[int32]string{
		0: "LEGACY",
		1: "CEF",
	}
	Syslog_MessageFormat_value = map[string]int32{
		"LEGACY": 0,
		"CEF":    1,
	}
)

func (x Syslog_MessageFormat) Enum() *Syslog_MessageFormat {
	p := new(Syslog_MessageFormat)
	*p = x
	return p
}

func (x Syslog_MessageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syslog_MessageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_notifier_proto_enumTypes[2].Descriptor()
}

func (Syslog_MessageFormat) Type() protoreflect.EnumType {
	return &file_storage_notifier_proto_enumTypes[2]
}

func (x Syslog_MessageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Syslog_MessageFormat.Descriptor instead.
func (Syslog_MessageFormat) EnumDescriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{10, 1}
}

// Next Tag: 21
type Notifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`     // @gotags: sql:"pk"
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:"unique"` // @gotags: sql:"unique"
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	UiEndpoint   string `protobuf:"bytes,4,opt,name=ui_endpoint,json=uiEndpoint,proto3" json:"ui_endpoint,omitempty"`
	LabelKey     string `protobuf:"bytes,8,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty"`
	LabelDefault string `protobuf:"bytes,9,opt,name=label_default,json=labelDefault,proto3" json:"label_default,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Notifier_Jira
	//	*Notifier_Email
	//	*Notifier_Cscc
	//	*Notifier_Splunk
	//	*Notifier_Pagerduty
	//	*Notifier_Generic
	//	*Notifier_Sumologic
	//	*Notifier_AwsSecurityHub
	//	*Notifier_Syslog
	//	*Notifier_MicrosoftSentinel
	Config         isNotifier_Config `protobuf_oneof:"config"`
	NotifierSecret string            `protobuf:"bytes,19,opt,name=notifier_secret,json=notifierSecret,proto3" json:"notifier_secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Traits         *Traits           `protobuf:"bytes,50,opt,name=traits,proto3" json:"traits,omitempty"`
}

func (x *Notifier) Reset() {
	*x = Notifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifier) ProtoMessage() {}

func (x *Notifier) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifier.ProtoReflect.Descriptor instead.
func (*Notifier) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{0}
}

func (x *Notifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notifier) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Notifier) GetUiEndpoint() string {
	if x != nil {
		return x.UiEndpoint
	}
	return ""
}

func (x *Notifier) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *Notifier) GetLabelDefault() string {
	if x != nil {
		return x.LabelDefault
	}
	return ""
}

func (m *Notifier) GetConfig() isNotifier_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Notifier) GetJira() *Jira {
	if x, ok := x.GetConfig().(*Notifier_Jira); ok {
		return x.Jira
	}
	return nil
}

func (x *Notifier) GetEmail() *Email {
	if x, ok := x.GetConfig().(*Notifier_Email); ok {
		return x.Email
	}
	return nil
}

func (x *Notifier) GetCscc() *CSCC {
	if x, ok := x.GetConfig().(*Notifier_Cscc); ok {
		return x.Cscc
	}
	return nil
}

func (x *Notifier) GetSplunk() *Splunk {
	if x, ok := x.GetConfig().(*Notifier_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (x *Notifier) GetPagerduty() *PagerDuty {
	if x, ok := x.GetConfig().(*Notifier_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (x *Notifier) GetGeneric() *Generic {
	if x, ok := x.GetConfig().(*Notifier_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *Notifier) GetSumologic() *SumoLogic {
	if x, ok := x.GetConfig().(*Notifier_Sumologic); ok {
		return x.Sumologic
	}
	return nil
}

func (x *Notifier) GetAwsSecurityHub() *AWSSecurityHub {
	if x, ok := x.GetConfig().(*Notifier_AwsSecurityHub); ok {
		return x.AwsSecurityHub
	}
	return nil
}

func (x *Notifier) GetSyslog() *Syslog {
	if x, ok := x.GetConfig().(*Notifier_Syslog); ok {
		return x.Syslog
	}
	return nil
}

func (x *Notifier) GetMicrosoftSentinel() *MicrosoftSentinel {
	if x, ok := x.GetConfig().(*Notifier_MicrosoftSentinel); ok {
		return x.MicrosoftSentinel
	}
	return nil
}

func (x *Notifier) GetNotifierSecret() string {
	if x != nil {
		return x.NotifierSecret
	}
	return ""
}

func (x *Notifier) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

type isNotifier_Config interface {
	isNotifier_Config()
}

type Notifier_Jira struct {
	Jira *Jira `protobuf:"bytes,10,opt,name=jira,proto3,oneof"`
}

type Notifier_Email struct {
	Email *Email `protobuf:"bytes,11,opt,name=email,proto3,oneof"`
}

type Notifier_Cscc struct {
	Cscc *CSCC `protobuf:"bytes,12,opt,name=cscc,proto3,oneof"`
}

type Notifier_Splunk struct {
	Splunk *Splunk `protobuf:"bytes,13,opt,name=splunk,proto3,oneof"`
}

type Notifier_Pagerduty struct {
	Pagerduty *PagerDuty `protobuf:"bytes,14,opt,name=pagerduty,proto3,oneof"`
}

type Notifier_Generic struct {
	Generic *Generic `protobuf:"bytes,15,opt,name=generic,proto3,oneof"`
}

type Notifier_Sumologic struct {
	Sumologic *SumoLogic `protobuf:"bytes,16,opt,name=sumologic,proto3,oneof"`
}

type Notifier_AwsSecurityHub struct {
	AwsSecurityHub *AWSSecurityHub `protobuf:"bytes,17,opt,name=aws_security_hub,json=awsSecurityHub,proto3,oneof"`
}

type Notifier_Syslog struct {
	Syslog *Syslog `protobuf:"bytes,18,opt,name=syslog,proto3,oneof"`
}

type Notifier_MicrosoftSentinel struct {
	MicrosoftSentinel *MicrosoftSentinel `protobuf:"bytes,20,opt,name=microsoft_sentinel,json=microsoftSentinel,proto3,oneof"`
}

func (*Notifier_Jira) isNotifier_Config() {}

func (*Notifier_Email) isNotifier_Config() {}

func (*Notifier_Cscc) isNotifier_Config() {}

func (*Notifier_Splunk) isNotifier_Config() {}

func (*Notifier_Pagerduty) isNotifier_Config() {}

func (*Notifier_Generic) isNotifier_Config() {}

func (*Notifier_Sumologic) isNotifier_Config() {}

func (*Notifier_AwsSecurityHub) isNotifier_Config() {}

func (*Notifier_Syslog) isNotifier_Config() {}

func (*Notifier_MicrosoftSentinel) isNotifier_Config() {}

type AWSSecurityHub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region      string                      `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Credentials *AWSSecurityHub_Credentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	AccountId   string                      `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSSecurityHub) Reset() {
	*x = AWSSecurityHub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSecurityHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecurityHub) ProtoMessage() {}

func (x *AWSSecurityHub) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecurityHub.ProtoReflect.Descriptor instead.
func (*AWSSecurityHub) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{1}
}

func (x *AWSSecurityHub) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSSecurityHub) GetCredentials() *AWSSecurityHub_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *AWSSecurityHub) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type CSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service account for the integration. The server will mask the value of this credential in responses and logs.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" scrub:"always"` // @gotags: scrub:"always"
	SourceId       string `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	WifEnabled     bool   `protobuf:"varint,5,opt,name=wif_enabled,json=wifEnabled,proto3" json:"wif_enabled,omitempty"`
}

func (x *CSCC) Reset() {
	*x = CSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCC) ProtoMessage() {}

func (x *CSCC) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCC.ProtoReflect.Descriptor instead.
func (*CSCC) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{2}
}

func (x *CSCC) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *CSCC) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CSCC) GetWifEnabled() bool {
	if x != nil {
		return x.WifEnabled
	}
	return false
}

type Jira struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" scrub:"dependent" validate:"nolocalendpoint"`           // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password          string                  `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	IssueType         string                  `protobuf:"bytes,4,opt,name=issue_type,json=issueType,proto3" json:"issue_type,omitempty"`
	PriorityMappings  []*Jira_PriorityMapping `protobuf:"bytes,5,rep,name=priority_mappings,json=priorityMappings,proto3" json:"priority_mappings,omitempty"`
	DefaultFieldsJson string                  `protobuf:"bytes,6,opt,name=default_fields_json,json=defaultFieldsJson,proto3" json:"default_fields_json,omitempty"`
	DisablePriority   bool                    `protobuf:"varint,7,opt,name=disablePriority,proto3" json:"disablePriority,omitempty"`
}

func (x *Jira) Reset() {
	*x = Jira{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jira) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jira) ProtoMessage() {}

func (x *Jira) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jira.ProtoReflect.Descriptor instead.
func (*Jira) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{3}
}

func (x *Jira) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Jira) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jira) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Jira) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *Jira) GetPriorityMappings() []*Jira_PriorityMapping {
	if x != nil {
		return x.PriorityMappings
	}
	return nil
}

func (x *Jira) GetDefaultFieldsJson() string {
	if x != nil {
		return x.DefaultFieldsJson
	}
	return ""
}

func (x *Jira) GetDisablePriority() bool {
	if x != nil {
		return x.DisablePriority
	}
	return false
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password              string           `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	DisableTLS            bool             `protobuf:"varint,5,opt,name=disableTLS,proto3" json:"disableTLS,omitempty"`
	DEPRECATEDUseStartTLS bool             `protobuf:"varint,6,opt,name=DEPRECATED_useStartTLS,json=DEPRECATEDUseStartTLS,proto3" json:"DEPRECATED_useStartTLS,omitempty"` // useStartTLS has been deprecated for startTLSAuthMethod
	From                  string           `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	StartTLSAuthMethod    Email_AuthMethod `protobuf:"varint,8,opt,name=startTLSAuthMethod,proto3,enum=storage.Email_AuthMethod" json:"startTLSAuthMethod,omitempty"`
	// Set to true to allow unauthenticated SMTP
	AllowUnauthenticatedSmtp bool `protobuf:"varint,9,opt,name=allow_unauthenticated_smtp,json=allowUnauthenticatedSmtp,proto3" json:"allow_unauthenticated_smtp,omitempty" scrub:"disableDependentIfTrue"` // @gotags: scrub:"disableDependentIfTrue"
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{4}
}

func (x *Email) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Email) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Email) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Email) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Email) GetDisableTLS() bool {
	if x != nil {
		return x.DisableTLS
	}
	return false
}

func (x *Email) GetDEPRECATEDUseStartTLS() bool {
	if x != nil {
		return x.DEPRECATEDUseStartTLS
	}
	return false
}

func (x *Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Email) GetStartTLSAuthMethod() Email_AuthMethod {
	if x != nil {
		return x.StartTLSAuthMethod
	}
	return Email_DISABLED
}

func (x *Email) GetAllowUnauthenticatedSmtp() bool {
	if x != nil {
		return x.AllowUnauthenticatedSmtp
	}
	return false
}

type Splunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP token for the integration. The server will mask the value of this credential in responses and logs.
	HttpToken           string `protobuf:"bytes,1,opt,name=http_token,json=httpToken,proto3" json:"http_token,omitempty" scrub:"always"`          // @gotags: scrub:"always"
	HttpEndpoint        string `protobuf:"bytes,2,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"` // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	Insecure            bool   `protobuf:"varint,3,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Truncate            int64  `protobuf:"varint,4,opt,name=truncate,proto3" json:"truncate,omitempty"`
	AuditLoggingEnabled bool   `protobuf:"varint,5,opt,name=audit_logging_enabled,json=auditLoggingEnabled,proto3" json:"audit_logging_enabled,omitempty"`
	// Types that are assignable to DerivedSourceTypeDeprecated:
	//
	//	*Splunk_DerivedSourceType
	DerivedSourceTypeDeprecated isSplunk_DerivedSourceTypeDeprecated `protobuf_oneof:"derived_source_type_deprecated"`
	SourceTypes                 map[string]string                    `protobuf:"bytes,7,rep,name=source_types,json=sourceTypes,proto3" json:"source_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Splunk) Reset() {
	*x = Splunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Splunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Splunk) ProtoMessage() {}

func (x *Splunk) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Splunk.ProtoReflect.Descriptor instead.
func (*Splunk) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{5}
}

func (x *Splunk) GetHttpToken() string {
	if x != nil {
		return x.HttpToken
	}
	return ""
}

func (x *Splunk) GetHttpEndpoint() string {
	if x != nil {
		return x.HttpEndpoint
	}
	return ""
}

func (x *Splunk) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *Splunk) GetTruncate() int64 {
	if x != nil {
		return x.Truncate
	}
	return 0
}

func (x *Splunk) GetAuditLoggingEnabled() bool {
	if x != nil {
		return x.AuditLoggingEnabled
	}
	return false
}

func (m *Splunk) GetDerivedSourceTypeDeprecated() isSplunk_DerivedSourceTypeDeprecated {
	if m != nil {
		return m.DerivedSourceTypeDeprecated
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/notifier.proto.
func (x *Splunk) GetDerivedSourceType() bool {
	if x, ok := x.GetDerivedSourceTypeDeprecated().(*Splunk_DerivedSourceType); ok {
		return x.DerivedSourceType
	}
	return false
}

func (x *Splunk) GetSourceTypes() map[string]string {
	if x != nil {
		return x.SourceTypes
	}
	return nil
}

type isSplunk_DerivedSourceTypeDeprecated interface {
	isSplunk_DerivedSourceTypeDeprecated()
}

type Splunk_DerivedSourceType struct {
	// derived_source_type is deprecated in lieu of source_types
	//
	// Deprecated: Marked as deprecated in storage/notifier.proto.
	DerivedSourceType bool `protobuf:"varint,6,opt,name=derived_source_type,json=derivedSourceType,proto3,oneof"`
}

func (*Splunk_DerivedSourceType) isSplunk_DerivedSourceTypeDeprecated() {}

type PagerDuty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API key for the integration. The server will mask the value of this credential in responses and logs.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
}

func (x *PagerDuty) Reset() {
	*x = PagerDuty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerDuty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerDuty) ProtoMessage() {}

func (x *PagerDuty) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerDuty.ProtoReflect.Descriptor instead.
func (*PagerDuty) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{6}
}

func (x *PagerDuty) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type Generic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint      string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"` // @gotags: scrub:"dependent" validate:"nolocalendpoint"
	SkipTLSVerify bool   `protobuf:"varint,2,opt,name=skipTLSVerify,proto3" json:"skipTLSVerify,omitempty"`
	CaCert        string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password            string          `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Headers             []*KeyValuePair `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	ExtraFields         []*KeyValuePair `protobuf:"bytes,7,rep,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`
	AuditLoggingEnabled bool            `protobuf:"varint,8,opt,name=audit_logging_enabled,json=auditLoggingEnabled,proto3" json:"audit_logging_enabled,omitempty"`
}

func (x *Generic) Reset() {
	*x = Generic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generic) ProtoMessage() {}

func (x *Generic) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generic.ProtoReflect.Descriptor instead.
func (*Generic) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{7}
}

func (x *Generic) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Generic) GetSkipTLSVerify() bool {
	if x != nil {
		return x.SkipTLSVerify
	}
	return false
}

func (x *Generic) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *Generic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Generic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Generic) GetHeaders() []*KeyValuePair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Generic) GetExtraFields() []*KeyValuePair {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *Generic) GetAuditLoggingEnabled() bool {
	if x != nil {
		return x.AuditLoggingEnabled
	}
	return false
}

type SumoLogic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpSourceAddress string `protobuf:"bytes,1,opt,name=http_source_address,json=httpSourceAddress,proto3" json:"http_source_address,omitempty" validate:"nolocalendpoint"` // @gotags: validate:"nolocalendpoint"
	SkipTLSVerify     bool   `protobuf:"varint,2,opt,name=skipTLSVerify,proto3" json:"skipTLSVerify,omitempty"`
}

func (x *SumoLogic) Reset() {
	*x = SumoLogic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoLogic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoLogic) ProtoMessage() {}

func (x *SumoLogic) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoLogic.ProtoReflect.Descriptor instead.
func (*SumoLogic) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{8}
}

func (x *SumoLogic) GetHttpSourceAddress() string {
	if x != nil {
		return x.HttpSourceAddress
	}
	return ""
}

func (x *SumoLogic) GetSkipTLSVerify() bool {
	if x != nil {
		return x.SkipTLSVerify
	}
	return false
}

type MicrosoftSentinel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// log_ingestion_endpoint is the log ingestion endpoint.
	LogIngestionEndpoint string `protobuf:"bytes,1,opt,name=log_ingestion_endpoint,json=logIngestionEndpoint,proto3" json:"log_ingestion_endpoint,omitempty"`
	// directory_tenant_id contains the ID of the Microsoft Directory ID of the selected tenant.
	DirectoryTenantId string `protobuf:"bytes,2,opt,name=directory_tenant_id,json=directoryTenantId,proto3" json:"directory_tenant_id,omitempty"`
	// application_client_id contains the ID of the application ID of the service principal.
	ApplicationClientId string `protobuf:"bytes,3,opt,name=application_client_id,json=applicationClientId,proto3" json:"application_client_id,omitempty"`
	// secret contains the client secret.
	Secret            string                                      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	AlertDcrConfig    *MicrosoftSentinel_DataCollectionRuleConfig `protobuf:"bytes,5,opt,name=alert_dcr_config,json=alertDcrConfig,proto3" json:"alert_dcr_config,omitempty"`
	AuditLogDcrConfig *MicrosoftSentinel_DataCollectionRuleConfig `protobuf:"bytes,6,opt,name=audit_log_dcr_config,json=auditLogDcrConfig,proto3" json:"audit_log_dcr_config,omitempty"`
}

func (x *MicrosoftSentinel) Reset() {
	*x = MicrosoftSentinel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicrosoftSentinel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftSentinel) ProtoMessage() {}

func (x *MicrosoftSentinel) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicrosoftSentinel.ProtoReflect.Descriptor instead.
func (*MicrosoftSentinel) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{9}
}

func (x *MicrosoftSentinel) GetLogIngestionEndpoint() string {
	if x != nil {
		return x.LogIngestionEndpoint
	}
	return ""
}

func (x *MicrosoftSentinel) GetDirectoryTenantId() string {
	if x != nil {
		return x.DirectoryTenantId
	}
	return ""
}

func (x *MicrosoftSentinel) GetApplicationClientId() string {
	if x != nil {
		return x.ApplicationClientId
	}
	return ""
}

func (x *MicrosoftSentinel) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *MicrosoftSentinel) GetAlertDcrConfig() *MicrosoftSentinel_DataCollectionRuleConfig {
	if x != nil {
		return x.AlertDcrConfig
	}
	return nil
}

func (x *MicrosoftSentinel) GetAuditLogDcrConfig() *MicrosoftSentinel_DataCollectionRuleConfig {
	if x != nil {
		return x.AuditLogDcrConfig
	}
	return nil
}

type Syslog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFacility Syslog_LocalFacility `protobuf:"varint,1,opt,name=local_facility,json=localFacility,proto3,enum=storage.Syslog_LocalFacility" json:"local_facility,omitempty"`
	// Eventually this will support TCP, UDP, and local endpoints
	//
	// Types that are assignable to Endpoint:
	//
	//	*Syslog_TcpConfig
	Endpoint      isSyslog_Endpoint    `protobuf_oneof:"endpoint"`
	ExtraFields   []*KeyValuePair      `protobuf:"bytes,3,rep,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`
	MessageFormat Syslog_MessageFormat `protobuf:"varint,4,opt,name=message_format,json=messageFormat,proto3,enum=storage.Syslog_MessageFormat" json:"message_format,omitempty"`
}

func (x *Syslog) Reset() {
	*x = Syslog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Syslog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog) ProtoMessage() {}

func (x *Syslog) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Syslog.ProtoReflect.Descriptor instead.
func (*Syslog) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{10}
}

func (x *Syslog) GetLocalFacility() Syslog_LocalFacility {
	if x != nil {
		return x.LocalFacility
	}
	return Syslog_LOCAL0
}

func (m *Syslog) GetEndpoint() isSyslog_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (x *Syslog) GetTcpConfig() *Syslog_TCPConfig {
	if x, ok := x.GetEndpoint().(*Syslog_TcpConfig); ok {
		return x.TcpConfig
	}
	return nil
}

func (x *Syslog) GetExtraFields() []*KeyValuePair {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *Syslog) GetMessageFormat() Syslog_MessageFormat {
	if x != nil {
		return x.MessageFormat
	}
	return Syslog_LEGACY
}

type isSyslog_Endpoint interface {
	isSyslog_Endpoint()
}

type Syslog_TcpConfig struct {
	TcpConfig *Syslog_TCPConfig `protobuf:"bytes,2,opt,name=tcp_config,json=tcpConfig,proto3,oneof"`
}

func (*Syslog_TcpConfig) isSyslog_Endpoint() {}

type AWSSecurityHub_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId     string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty" scrub:"always"`             // @gotags: scrub:"always"
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
	StsEnabled      bool   `protobuf:"varint,3,opt,name=sts_enabled,json=stsEnabled,proto3" json:"sts_enabled,omitempty"`
}

func (x *AWSSecurityHub_Credentials) Reset() {
	*x = AWSSecurityHub_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSecurityHub_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecurityHub_Credentials) ProtoMessage() {}

func (x *AWSSecurityHub_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecurityHub_Credentials.ProtoReflect.Descriptor instead.
func (*AWSSecurityHub_Credentials) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AWSSecurityHub_Credentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AWSSecurityHub_Credentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AWSSecurityHub_Credentials) GetStsEnabled() bool {
	if x != nil {
		return x.StsEnabled
	}
	return false
}

type Jira_PriorityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity     Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=storage.Severity" json:"severity,omitempty"`
	PriorityName string   `protobuf:"bytes,2,opt,name=priority_name,json=priorityName,proto3" json:"priority_name,omitempty"`
}

func (x *Jira_PriorityMapping) Reset() {
	*x = Jira_PriorityMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jira_PriorityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jira_PriorityMapping) ProtoMessage() {}

func (x *Jira_PriorityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jira_PriorityMapping.ProtoReflect.Descriptor instead.
func (*Jira_PriorityMapping) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Jira_PriorityMapping) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *Jira_PriorityMapping) GetPriorityName() string {
	if x != nil {
		return x.PriorityName
	}
	return ""
}

// DataCollectionRuleConfig contains information about the data collection rule which is a config per notifier type.
type MicrosoftSentinel_DataCollectionRuleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName           string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	DataCollectionRuleId string `protobuf:"bytes,2,opt,name=data_collection_rule_id,json=dataCollectionRuleId,proto3" json:"data_collection_rule_id,omitempty"`
	Enabled              bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) Reset() {
	*x = MicrosoftSentinel_DataCollectionRuleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrosoftSentinel_DataCollectionRuleConfig) ProtoMessage() {}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicrosoftSentinel_DataCollectionRuleConfig.ProtoReflect.Descriptor instead.
func (*MicrosoftSentinel_DataCollectionRuleConfig) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{9, 0}
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetDataCollectionRuleId() string {
	if x != nil {
		return x.DataCollectionRuleId
	}
	return ""
}

func (x *MicrosoftSentinel_DataCollectionRuleConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Syslog_TCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname      string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	Port          int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	SkipTlsVerify bool   `protobuf:"varint,3,opt,name=skip_tls_verify,json=skipTlsVerify,proto3" json:"skip_tls_verify,omitempty"`
	UseTls        bool   `protobuf:"varint,4,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
}

func (x *Syslog_TCPConfig) Reset() {
	*x = Syslog_TCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_notifier_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Syslog_TCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog_TCPConfig) ProtoMessage() {}

func (x *Syslog_TCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_notifier_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Syslog_TCPConfig.ProtoReflect.Descriptor instead.
func (*Syslog_TCPConfig) Descriptor() ([]byte, []int) {
	return file_storage_notifier_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Syslog_TCPConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Syslog_TCPConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Syslog_TCPConfig) GetSkipTlsVerify() bool {
	if x != nil {
		return x.SkipTlsVerify
	}
	return false
}

func (x *Syslog_TCPConfig) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

var File_storage_notifier_proto protoreflect.FileDescriptor

var file_storage_notifier_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6a,
	0x69, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4a, 0x69, 0x72, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x69, 0x72, 0x61,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x73, 0x63, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x53, 0x43, 0x43, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x63, 0x63, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x75,
	0x6d, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x43,
	0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x75, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x75,
	0x62, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x48, 0x75, 0x62, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x4b,
	0x0a, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x75, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x75, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x7e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x04, 0x43, 0x53, 0x43, 0x43, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0xfc, 0x02, 0x0a, 0x04, 0x4a, 0x69, 0x72, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x69, 0x72, 0x61, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x95, 0x03, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x4c,
	0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x4c, 0x53, 0x12, 0x35, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x55,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x49,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x4c, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x6d, 0x74, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x6d, 0x74, 0x70, 0x22, 0x30, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x95, 0x03, 0x0a, 0x06, 0x53, 0x70,
	0x6c, 0x75, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x13, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x75, 0x6e,
	0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x20, 0x0a, 0x1e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x24, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xbb, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x4c, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x4c, 0x53, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x09, 0x53, 0x75, 0x6d, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x68, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x4c, 0x53, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54,
	0x4c, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x99, 0x04, 0x0a, 0x11, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x5d, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x63, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x63, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x64, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x63, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x44, 0x63, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x8c, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xab, 0x04, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12,
	0x44, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x43, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x1a, 0x7c, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6c, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x22,
	0x6f, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x30, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x33, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x36, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x37, 0x10, 0x07,
	0x22, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x45, 0x46, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5a,
	0x11, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_notifier_proto_rawDescOnce sync.Once
	file_storage_notifier_proto_rawDescData = file_storage_notifier_proto_rawDesc
)

func file_storage_notifier_proto_rawDescGZIP() []byte {
	file_storage_notifier_proto_rawDescOnce.Do(func() {
		file_storage_notifier_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_notifier_proto_rawDescData)
	})
	return file_storage_notifier_proto_rawDescData
}

var file_storage_notifier_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_storage_notifier_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_storage_notifier_proto_goTypes = []any{
	(Email_AuthMethod)(0),              // 0: storage.Email.AuthMethod
	(Syslog_LocalFacility)(0),          // 1: storage.Syslog.LocalFacility
	(Syslog_MessageFormat)(0),          // 2: storage.Syslog.MessageFormat
	(*Notifier)(nil),                   // 3: storage.Notifier
	(*AWSSecurityHub)(nil),             // 4: storage.AWSSecurityHub
	(*CSCC)(nil),                       // 5: storage.CSCC
	(*Jira)(nil),                       // 6: storage.Jira
	(*Email)(nil),                      // 7: storage.Email
	(*Splunk)(nil),                     // 8: storage.Splunk
	(*PagerDuty)(nil),                  // 9: storage.PagerDuty
	(*Generic)(nil),                    // 10: storage.Generic
	(*SumoLogic)(nil),                  // 11: storage.SumoLogic
	(*MicrosoftSentinel)(nil),          // 12: storage.MicrosoftSentinel
	(*Syslog)(nil),                     // 13: storage.Syslog
	(*AWSSecurityHub_Credentials)(nil), // 14: storage.AWSSecurityHub.Credentials
	(*Jira_PriorityMapping)(nil),       // 15: storage.Jira.PriorityMapping
	nil,                                // 16: storage.Splunk.SourceTypesEntry
	(*MicrosoftSentinel_DataCollectionRuleConfig)(nil), // 17: storage.MicrosoftSentinel.DataCollectionRuleConfig
	(*Syslog_TCPConfig)(nil),                           // 18: storage.Syslog.TCPConfig
	(*Traits)(nil),                                     // 19: storage.Traits
	(*KeyValuePair)(nil),                               // 20: storage.KeyValuePair
	(Severity)(0),                                      // 21: storage.Severity
}
var file_storage_notifier_proto_depIdxs = []int32{
	6,  // 0: storage.Notifier.jira:type_name -> storage.Jira
	7,  // 1: storage.Notifier.email:type_name -> storage.Email
	5,  // 2: storage.Notifier.cscc:type_name -> storage.CSCC
	8,  // 3: storage.Notifier.splunk:type_name -> storage.Splunk
	9,  // 4: storage.Notifier.pagerduty:type_name -> storage.PagerDuty
	10, // 5: storage.Notifier.generic:type_name -> storage.Generic
	11, // 6: storage.Notifier.sumologic:type_name -> storage.SumoLogic
	4,  // 7: storage.Notifier.aws_security_hub:type_name -> storage.AWSSecurityHub
	13, // 8: storage.Notifier.syslog:type_name -> storage.Syslog
	12, // 9: storage.Notifier.microsoft_sentinel:type_name -> storage.MicrosoftSentinel
	19, // 10: storage.Notifier.traits:type_name -> storage.Traits
	14, // 11: storage.AWSSecurityHub.credentials:type_name -> storage.AWSSecurityHub.Credentials
	15, // 12: storage.Jira.priority_mappings:type_name -> storage.Jira.PriorityMapping
	0,  // 13: storage.Email.startTLSAuthMethod:type_name -> storage.Email.AuthMethod
	16, // 14: storage.Splunk.source_types:type_name -> storage.Splunk.SourceTypesEntry
	20, // 15: storage.Generic.headers:type_name -> storage.KeyValuePair
	20, // 16: storage.Generic.extra_fields:type_name -> storage.KeyValuePair
	17, // 17: storage.MicrosoftSentinel.alert_dcr_config:type_name -> storage.MicrosoftSentinel.DataCollectionRuleConfig
	17, // 18: storage.MicrosoftSentinel.audit_log_dcr_config:type_name -> storage.MicrosoftSentinel.DataCollectionRuleConfig
	1,  // 19: storage.Syslog.local_facility:type_name -> storage.Syslog.LocalFacility
	18, // 20: storage.Syslog.tcp_config:type_name -> storage.Syslog.TCPConfig
	20, // 21: storage.Syslog.extra_fields:type_name -> storage.KeyValuePair
	2,  // 22: storage.Syslog.message_format:type_name -> storage.Syslog.MessageFormat
	21, // 23: storage.Jira.PriorityMapping.severity:type_name -> storage.Severity
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_storage_notifier_proto_init() }
func file_storage_notifier_proto_init() {
	if File_storage_notifier_proto != nil {
		return
	}
	file_storage_common_proto_init()
	file_storage_policy_proto_init()
	file_storage_traits_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_notifier_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Notifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AWSSecurityHub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Jira); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Splunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PagerDuty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Generic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SumoLogic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MicrosoftSentinel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Syslog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AWSSecurityHub_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Jira_PriorityMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MicrosoftSentinel_DataCollectionRuleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_notifier_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Syslog_TCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_notifier_proto_msgTypes[0].OneofWrappers = []any{
		(*Notifier_Jira)(nil),
		(*Notifier_Email)(nil),
		(*Notifier_Cscc)(nil),
		(*Notifier_Splunk)(nil),
		(*Notifier_Pagerduty)(nil),
		(*Notifier_Generic)(nil),
		(*Notifier_Sumologic)(nil),
		(*Notifier_AwsSecurityHub)(nil),
		(*Notifier_Syslog)(nil),
		(*Notifier_MicrosoftSentinel)(nil),
	}
	file_storage_notifier_proto_msgTypes[5].OneofWrappers = []any{
		(*Splunk_DerivedSourceType)(nil),
	}
	file_storage_notifier_proto_msgTypes[10].OneofWrappers = []any{
		(*Syslog_TcpConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_notifier_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_notifier_proto_goTypes,
		DependencyIndexes: file_storage_notifier_proto_depIdxs,
		EnumInfos:         file_storage_notifier_proto_enumTypes,
		MessageInfos:      file_storage_notifier_proto_msgTypes,
	}.Build()
	File_storage_notifier_proto = out.File
	file_storage_notifier_proto_rawDesc = nil
	file_storage_notifier_proto_goTypes = nil
	file_storage_notifier_proto_depIdxs = nil
}
