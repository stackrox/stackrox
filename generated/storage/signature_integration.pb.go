// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/signature_integration.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignatureIntegration struct {
	Id                   string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`     // @gotags: sql:"pk"
	Name                 string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:"unique"` // @gotags: sql:"unique"
	Cosign               *CosignPublicKeyVerification     `protobuf:"bytes,3,opt,name=cosign,proto3" json:"cosign,omitempty"`
	CosignCertificates   []*CosignCertificateVerification `protobuf:"bytes,4,rep,name=cosign_certificates,json=cosignCertificates,proto3" json:"cosign_certificates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SignatureIntegration) Reset()         { *m = SignatureIntegration{} }
func (m *SignatureIntegration) String() string { return proto.CompactTextString(m) }
func (*SignatureIntegration) ProtoMessage()    {}
func (*SignatureIntegration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{0}
}
func (m *SignatureIntegration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureIntegration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureIntegration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureIntegration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureIntegration.Merge(m, src)
}
func (m *SignatureIntegration) XXX_Size() int {
	return m.Size()
}
func (m *SignatureIntegration) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureIntegration.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureIntegration proto.InternalMessageInfo

func (m *SignatureIntegration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignatureIntegration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignatureIntegration) GetCosign() *CosignPublicKeyVerification {
	if m != nil {
		return m.Cosign
	}
	return nil
}

func (m *SignatureIntegration) GetCosignCertificates() []*CosignCertificateVerification {
	if m != nil {
		return m.CosignCertificates
	}
	return nil
}

func (m *SignatureIntegration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SignatureIntegration) Clone() *SignatureIntegration {
	if m == nil {
		return nil
	}
	cloned := new(SignatureIntegration)
	*cloned = *m

	cloned.Cosign = m.Cosign.Clone()
	if m.CosignCertificates != nil {
		cloned.CosignCertificates = make([]*CosignCertificateVerification, len(m.CosignCertificates))
		for idx, v := range m.CosignCertificates {
			cloned.CosignCertificates[idx] = v.Clone()
		}
	}
	return cloned
}

type CosignPublicKeyVerification struct {
	PublicKeys           []*CosignPublicKeyVerification_PublicKey `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CosignPublicKeyVerification) Reset()         { *m = CosignPublicKeyVerification{} }
func (m *CosignPublicKeyVerification) String() string { return proto.CompactTextString(m) }
func (*CosignPublicKeyVerification) ProtoMessage()    {}
func (*CosignPublicKeyVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{1}
}
func (m *CosignPublicKeyVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosignPublicKeyVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosignPublicKeyVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosignPublicKeyVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosignPublicKeyVerification.Merge(m, src)
}
func (m *CosignPublicKeyVerification) XXX_Size() int {
	return m.Size()
}
func (m *CosignPublicKeyVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_CosignPublicKeyVerification.DiscardUnknown(m)
}

var xxx_messageInfo_CosignPublicKeyVerification proto.InternalMessageInfo

func (m *CosignPublicKeyVerification) GetPublicKeys() []*CosignPublicKeyVerification_PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *CosignPublicKeyVerification) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CosignPublicKeyVerification) Clone() *CosignPublicKeyVerification {
	if m == nil {
		return nil
	}
	cloned := new(CosignPublicKeyVerification)
	*cloned = *m

	if m.PublicKeys != nil {
		cloned.PublicKeys = make([]*CosignPublicKeyVerification_PublicKey, len(m.PublicKeys))
		for idx, v := range m.PublicKeys {
			cloned.PublicKeys[idx] = v.Clone()
		}
	}
	return cloned
}

type CosignPublicKeyVerification_PublicKey struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublicKeyPemEnc      string   `protobuf:"bytes,2,opt,name=public_key_pem_enc,json=publicKeyPemEnc,proto3" json:"public_key_pem_enc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CosignPublicKeyVerification_PublicKey) Reset()         { *m = CosignPublicKeyVerification_PublicKey{} }
func (m *CosignPublicKeyVerification_PublicKey) String() string { return proto.CompactTextString(m) }
func (*CosignPublicKeyVerification_PublicKey) ProtoMessage()    {}
func (*CosignPublicKeyVerification_PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{1, 0}
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosignPublicKeyVerification_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosignPublicKeyVerification_PublicKey.Merge(m, src)
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CosignPublicKeyVerification_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_CosignPublicKeyVerification_PublicKey proto.InternalMessageInfo

func (m *CosignPublicKeyVerification_PublicKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CosignPublicKeyVerification_PublicKey) GetPublicKeyPemEnc() string {
	if m != nil {
		return m.PublicKeyPemEnc
	}
	return ""
}

func (m *CosignPublicKeyVerification_PublicKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CosignPublicKeyVerification_PublicKey) Clone() *CosignPublicKeyVerification_PublicKey {
	if m == nil {
		return nil
	}
	cloned := new(CosignPublicKeyVerification_PublicKey)
	*cloned = *m

	return cloned
}

// Holds all verification data for verifying certificates attached to cosign signatures.
// In case both the certificate and chain are given, both will be used to verify the public key
// as well as the chain.
// If only the certificate is given, the Fulcio trusted root chain will be assumed and verified against.
// If only the chain is given, this will be used over the Fulcio trusted root chain for verification.
// If no certificate or chain is given, the Fulcio trusted root chain will be assumed and verified against.
type CosignCertificateVerification struct {
	// PEM encoded certificate chain to use for verification.
	CertificateChainsPemEnc string `protobuf:"bytes,1,opt,name=certificate_chains_pem_enc,json=certificateChainsPemEnc,proto3" json:"certificate_chains_pem_enc,omitempty"`
	// PEM encoded certificate to use for verification.
	CertificatePemEnc string `protobuf:"bytes,2,opt,name=certificate_pem_enc,json=certificatePemEnc,proto3" json:"certificate_pem_enc,omitempty"`
	// Certificate OIDC issuer to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an OIDC issuer, you may use '.*' as the OIDC issuer. However,
	// it is recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateOidcIssuer string `protobuf:"bytes,3,opt,name=certificate_oidc_issuer,json=certificateOidcIssuer,proto3" json:"certificate_oidc_issuer,omitempty"`
	// Certificate identity to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an identity, you may use '.*' as the identity. However, it is
	// recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateIdentity  string   `protobuf:"bytes,4,opt,name=certificate_identity,json=certificateIdentity,proto3" json:"certificate_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CosignCertificateVerification) Reset()         { *m = CosignCertificateVerification{} }
func (m *CosignCertificateVerification) String() string { return proto.CompactTextString(m) }
func (*CosignCertificateVerification) ProtoMessage()    {}
func (*CosignCertificateVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{2}
}
func (m *CosignCertificateVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosignCertificateVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosignCertificateVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosignCertificateVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosignCertificateVerification.Merge(m, src)
}
func (m *CosignCertificateVerification) XXX_Size() int {
	return m.Size()
}
func (m *CosignCertificateVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_CosignCertificateVerification.DiscardUnknown(m)
}

var xxx_messageInfo_CosignCertificateVerification proto.InternalMessageInfo

func (m *CosignCertificateVerification) GetCertificateChainsPemEnc() string {
	if m != nil {
		return m.CertificateChainsPemEnc
	}
	return ""
}

func (m *CosignCertificateVerification) GetCertificatePemEnc() string {
	if m != nil {
		return m.CertificatePemEnc
	}
	return ""
}

func (m *CosignCertificateVerification) GetCertificateOidcIssuer() string {
	if m != nil {
		return m.CertificateOidcIssuer
	}
	return ""
}

func (m *CosignCertificateVerification) GetCertificateIdentity() string {
	if m != nil {
		return m.CertificateIdentity
	}
	return ""
}

func (m *CosignCertificateVerification) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CosignCertificateVerification) Clone() *CosignCertificateVerification {
	if m == nil {
		return nil
	}
	cloned := new(CosignCertificateVerification)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*SignatureIntegration)(nil), "storage.SignatureIntegration")
	proto.RegisterType((*CosignPublicKeyVerification)(nil), "storage.CosignPublicKeyVerification")
	proto.RegisterType((*CosignPublicKeyVerification_PublicKey)(nil), "storage.CosignPublicKeyVerification.PublicKey")
	proto.RegisterType((*CosignCertificateVerification)(nil), "storage.CosignCertificateVerification")
}

func init() {
	proto.RegisterFile("storage/signature_integration.proto", fileDescriptor_b3165e7a4c19e14a)
}

var fileDescriptor_b3165e7a4c19e14a = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x51, 0xab, 0x12, 0x41,
	0x14, 0xc7, 0x1b, 0x15, 0xc3, 0x23, 0x14, 0x8e, 0x46, 0x9b, 0xd1, 0x22, 0x16, 0x21, 0x04, 0x23,
	0x19, 0xf4, 0x62, 0xf4, 0x90, 0xf4, 0x20, 0x05, 0xca, 0x06, 0x05, 0xbd, 0x0c, 0xeb, 0xec, 0x64,
	0x83, 0x39, 0xb3, 0xcc, 0x8c, 0x90, 0xdf, 0xa4, 0x0f, 0xd3, 0x07, 0xe8, 0xb1, 0xfb, 0x0d, 0x2e,
	0xde, 0x0f, 0x71, 0x5f, 0x2f, 0x77, 0x76, 0x5c, 0x47, 0x1f, 0xe4, 0x3e, 0xed, 0xe1, 0xfc, 0xff,
	0xe7, 0x77, 0xce, 0x9e, 0x33, 0xf0, 0xdc, 0x58, 0xa5, 0xd3, 0x25, 0x1f, 0x1a, 0xb1, 0x94, 0xa9,
	0xdd, 0x68, 0x4e, 0x85, 0xb4, 0x7c, 0xa9, 0x53, 0x2b, 0x94, 0x24, 0xb9, 0x56, 0x56, 0xe1, 0xfb,
	0xde, 0xd4, 0xbf, 0x40, 0xd0, 0xf9, 0xb2, 0x37, 0x4e, 0x0f, 0x3e, 0xfc, 0x00, 0x2a, 0x22, 0x8b,
	0x50, 0x0f, 0x0d, 0x1a, 0x49, 0x45, 0x64, 0x18, 0x43, 0x4d, 0xa6, 0x6b, 0x1e, 0x55, 0x5c, 0xc6,
	0xc5, 0xf8, 0x1d, 0xd4, 0x99, 0xba, 0x6d, 0x13, 0x55, 0x7b, 0x68, 0xd0, 0x1c, 0xbd, 0x20, 0x1e,
	0x4b, 0x26, 0x2e, 0x3d, 0xdf, 0x2c, 0x7e, 0x09, 0xf6, 0x89, 0x6f, 0xbf, 0x72, 0x2d, 0x7e, 0x08,
	0xe6, 0xc8, 0x89, 0xaf, 0xc1, 0xdf, 0xa0, 0x5d, 0x44, 0x94, 0x71, 0x6d, 0x0b, 0x9d, 0x9b, 0xa8,
	0xd6, 0xab, 0x0e, 0x9a, 0xa3, 0x97, 0x27, 0xa8, 0xc9, 0xc1, 0x72, 0x04, 0xc3, 0xec, 0x54, 0x36,
	0xfd, 0xbf, 0x08, 0x9e, 0x9e, 0x19, 0x00, 0xcf, 0xa0, 0x99, 0x3b, 0x81, 0xae, 0xf8, 0xd6, 0x44,
	0x55, 0xd7, 0x90, 0xdc, 0x65, 0x76, 0x52, 0x66, 0x13, 0xc8, 0xf7, 0xa1, 0xe9, 0x7e, 0x86, 0x46,
	0x29, 0x94, 0x8b, 0x42, 0xc1, 0xa2, 0x5e, 0x01, 0x3e, 0x74, 0xa4, 0x39, 0x5f, 0x53, 0x2e, 0x99,
	0x5f, 0xe5, 0xc3, 0x12, 0x34, 0xe7, 0xeb, 0x8f, 0x92, 0xf5, 0xaf, 0x11, 0x3c, 0x3b, 0xfb, 0xd3,
	0x78, 0x0c, 0xdd, 0x60, 0x65, 0x94, 0xfd, 0x4c, 0x85, 0x34, 0x25, 0xb6, 0x68, 0xfc, 0x38, 0x70,
	0x4c, 0x9c, 0xa1, 0xc0, 0x63, 0x02, 0xed, 0xb0, 0xf8, 0x78, 0x98, 0x56, 0x20, 0x79, 0xff, 0x5b,
	0x08, 0x51, 0x54, 0x89, 0x8c, 0x51, 0x61, 0xcc, 0x86, 0x6b, 0x77, 0xf5, 0x46, 0xf2, 0x28, 0x90,
	0x67, 0x22, 0x63, 0x53, 0x27, 0xe2, 0xd7, 0xd0, 0x09, 0xeb, 0x44, 0xc6, 0xa5, 0x15, 0x76, 0x1b,
	0xd5, 0x5c, 0x51, 0x38, 0xc3, 0xd4, 0x4b, 0x1f, 0xde, 0xff, 0xdb, 0xc5, 0xe8, 0xff, 0x2e, 0x46,
	0x97, 0xbb, 0x18, 0xfd, 0xb9, 0x8a, 0xef, 0xc1, 0x13, 0xa1, 0x88, 0xb1, 0x29, 0x5b, 0x69, 0xf5,
	0xbb, 0x78, 0xba, 0xfb, 0x33, 0x7d, 0x6f, 0x91, 0xa1, 0x0f, 0xc7, 0xfe, 0xbb, 0xa8, 0x3b, 0xc7,
	0x9b, 0x9b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x4f, 0xaa, 0x03, 0x03, 0x03, 0x00, 0x00,
}

func (m *SignatureIntegration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureIntegration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureIntegration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CosignCertificates) > 0 {
		for iNdEx := len(m.CosignCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CosignCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Cosign != nil {
		{
			size, err := m.Cosign.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CosignPublicKeyVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosignPublicKeyVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosignPublicKeyVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeys) > 0 {
		for iNdEx := len(m.PublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *CosignPublicKeyVerification_PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosignPublicKeyVerification_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosignPublicKeyVerification_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeyPemEnc) > 0 {
		i -= len(m.PublicKeyPemEnc)
		copy(dAtA[i:], m.PublicKeyPemEnc)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.PublicKeyPemEnc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CosignCertificateVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosignCertificateVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosignCertificateVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CertificateIdentity) > 0 {
		i -= len(m.CertificateIdentity)
		copy(dAtA[i:], m.CertificateIdentity)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.CertificateIdentity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CertificateOidcIssuer) > 0 {
		i -= len(m.CertificateOidcIssuer)
		copy(dAtA[i:], m.CertificateOidcIssuer)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.CertificateOidcIssuer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertificatePemEnc) > 0 {
		i -= len(m.CertificatePemEnc)
		copy(dAtA[i:], m.CertificatePemEnc)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.CertificatePemEnc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateChainsPemEnc) > 0 {
		i -= len(m.CertificateChainsPemEnc)
		copy(dAtA[i:], m.CertificateChainsPemEnc)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.CertificateChainsPemEnc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignatureIntegration(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignatureIntegration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignatureIntegration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if m.Cosign != nil {
		l = m.Cosign.Size()
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if len(m.CosignCertificates) > 0 {
		for _, e := range m.CosignCertificates {
			l = e.Size()
			n += 1 + l + sovSignatureIntegration(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CosignPublicKeyVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, e := range m.PublicKeys {
			l = e.Size()
			n += 1 + l + sovSignatureIntegration(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CosignPublicKeyVerification_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.PublicKeyPemEnc)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CosignCertificateVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateChainsPemEnc)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.CertificatePemEnc)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.CertificateOidcIssuer)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.CertificateIdentity)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSignatureIntegration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignatureIntegration(x uint64) (n int) {
	return sovSignatureIntegration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureIntegration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureIntegration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureIntegration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cosign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cosign == nil {
				m.Cosign = &CosignPublicKeyVerification{}
			}
			if err := m.Cosign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosignCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosignCertificates = append(m.CosignCertificates, &CosignCertificateVerification{})
			if err := m.CosignCertificates[len(m.CosignCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosignPublicKeyVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosignPublicKeyVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosignPublicKeyVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, &CosignPublicKeyVerification_PublicKey{})
			if err := m.PublicKeys[len(m.PublicKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosignPublicKeyVerification_PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyPemEnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyPemEnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosignCertificateVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosignCertificateVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosignCertificateVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateChainsPemEnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateChainsPemEnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificatePemEnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificatePemEnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateOidcIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateOidcIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignatureIntegration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignatureIntegration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignatureIntegration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignatureIntegration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignatureIntegration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignatureIntegration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignatureIntegration = fmt.Errorf("proto: unexpected end of group")
)
