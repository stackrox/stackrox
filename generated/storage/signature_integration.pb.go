// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/signature_integration.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignatureIntegration struct {
	state              protoimpl.MessageState           `protogen:"hybrid.v1"`
	Id                 *string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" sql:"pk"`     // @gotags: sql:"pk"
	Name               *string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" sql:"unique"` // @gotags: sql:"unique"
	Cosign             *CosignPublicKeyVerification     `protobuf:"bytes,3,opt,name=cosign" json:"cosign,omitempty"`
	CosignCertificates []*CosignCertificateVerification `protobuf:"bytes,4,rep,name=cosign_certificates,json=cosignCertificates" json:"cosign_certificates,omitempty"`
	TransparencyLog    *TransparencyLogVerification     `protobuf:"bytes,5,opt,name=transparency_log,json=transparencyLog" json:"transparency_log,omitempty"`
	Traits             *Traits                          `protobuf:"bytes,6,opt,name=traits" json:"traits,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SignatureIntegration) Reset() {
	*x = SignatureIntegration{}
	mi := &file_storage_signature_integration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureIntegration) ProtoMessage() {}

func (x *SignatureIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SignatureIntegration) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SignatureIntegration) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SignatureIntegration) GetCosign() *CosignPublicKeyVerification {
	if x != nil {
		return x.Cosign
	}
	return nil
}

func (x *SignatureIntegration) GetCosignCertificates() []*CosignCertificateVerification {
	if x != nil {
		return x.CosignCertificates
	}
	return nil
}

func (x *SignatureIntegration) GetTransparencyLog() *TransparencyLogVerification {
	if x != nil {
		return x.TransparencyLog
	}
	return nil
}

func (x *SignatureIntegration) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *SignatureIntegration) SetId(v string) {
	x.Id = &v
}

func (x *SignatureIntegration) SetName(v string) {
	x.Name = &v
}

func (x *SignatureIntegration) SetCosign(v *CosignPublicKeyVerification) {
	x.Cosign = v
}

func (x *SignatureIntegration) SetCosignCertificates(v []*CosignCertificateVerification) {
	x.CosignCertificates = v
}

func (x *SignatureIntegration) SetTransparencyLog(v *TransparencyLogVerification) {
	x.TransparencyLog = v
}

func (x *SignatureIntegration) SetTraits(v *Traits) {
	x.Traits = v
}

func (x *SignatureIntegration) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *SignatureIntegration) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *SignatureIntegration) HasCosign() bool {
	if x == nil {
		return false
	}
	return x.Cosign != nil
}

func (x *SignatureIntegration) HasTransparencyLog() bool {
	if x == nil {
		return false
	}
	return x.TransparencyLog != nil
}

func (x *SignatureIntegration) HasTraits() bool {
	if x == nil {
		return false
	}
	return x.Traits != nil
}

func (x *SignatureIntegration) ClearId() {
	x.Id = nil
}

func (x *SignatureIntegration) ClearName() {
	x.Name = nil
}

func (x *SignatureIntegration) ClearCosign() {
	x.Cosign = nil
}

func (x *SignatureIntegration) ClearTransparencyLog() {
	x.TransparencyLog = nil
}

func (x *SignatureIntegration) ClearTraits() {
	x.Traits = nil
}

type SignatureIntegration_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                 *string
	Name               *string
	Cosign             *CosignPublicKeyVerification
	CosignCertificates []*CosignCertificateVerification
	TransparencyLog    *TransparencyLogVerification
	Traits             *Traits
}

func (b0 SignatureIntegration_builder) Build() *SignatureIntegration {
	m0 := &SignatureIntegration{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Cosign = b.Cosign
	x.CosignCertificates = b.CosignCertificates
	x.TransparencyLog = b.TransparencyLog
	x.Traits = b.Traits
	return m0
}

type CosignPublicKeyVerification struct {
	state         protoimpl.MessageState                   `protogen:"hybrid.v1"`
	PublicKeys    []*CosignPublicKeyVerification_PublicKey `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys" json:"public_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CosignPublicKeyVerification) Reset() {
	*x = CosignPublicKeyVerification{}
	mi := &file_storage_signature_integration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CosignPublicKeyVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosignPublicKeyVerification) ProtoMessage() {}

func (x *CosignPublicKeyVerification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CosignPublicKeyVerification) GetPublicKeys() []*CosignPublicKeyVerification_PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *CosignPublicKeyVerification) SetPublicKeys(v []*CosignPublicKeyVerification_PublicKey) {
	x.PublicKeys = v
}

type CosignPublicKeyVerification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PublicKeys []*CosignPublicKeyVerification_PublicKey
}

func (b0 CosignPublicKeyVerification_builder) Build() *CosignPublicKeyVerification {
	m0 := &CosignPublicKeyVerification{}
	b, x := &b0, m0
	_, _ = b, x
	x.PublicKeys = b.PublicKeys
	return m0
}

// Holds all verification data for verifying certificates attached to cosign signatures.
// If only the certificate is given, the Fulcio trusted root chain will be assumed and verified against.
// If only the chain is given, this will be used over the Fulcio trusted root chain for verification.
// If no certificate or chain is given, the Fulcio trusted root chain will be assumed and verified against.
type CosignCertificateVerification struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// PEM encoded certificate to use for verification. Leave empty when
	// using short-lived certificates as issued by Fulcio.
	CertificatePemEnc *string `protobuf:"bytes,1,opt,name=certificate_pem_enc,json=certificatePemEnc" json:"certificate_pem_enc,omitempty"`
	// PEM encoded certificate chain to use for verification. Defaults to the
	// root certificate authority of the public Sigstore instance if left empty.
	CertificateChainPemEnc *string `protobuf:"bytes,2,opt,name=certificate_chain_pem_enc,json=certificateChainPemEnc" json:"certificate_chain_pem_enc,omitempty"`
	// Certificate OIDC issuer to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an OIDC issuer, you may use '.*' as the OIDC issuer. However,
	// it is recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateOidcIssuer *string `protobuf:"bytes,3,opt,name=certificate_oidc_issuer,json=certificateOidcIssuer" json:"certificate_oidc_issuer,omitempty"`
	// Certificate identity to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an identity, you may use '.*' as the identity. However, it is
	// recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateIdentity *string `protobuf:"bytes,4,opt,name=certificate_identity,json=certificateIdentity" json:"certificate_identity,omitempty"`
	// Validate that the signature certificate contains a signed
	// certificate timestamp as proof of inclusion into the certificate
	// transparency log.
	CertificateTransparencyLog *CertificateTransparencyLogVerification `protobuf:"bytes,5,opt,name=certificate_transparency_log,json=certificateTransparencyLog" json:"certificate_transparency_log,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CosignCertificateVerification) Reset() {
	*x = CosignCertificateVerification{}
	mi := &file_storage_signature_integration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CosignCertificateVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosignCertificateVerification) ProtoMessage() {}

func (x *CosignCertificateVerification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CosignCertificateVerification) GetCertificatePemEnc() string {
	if x != nil && x.CertificatePemEnc != nil {
		return *x.CertificatePemEnc
	}
	return ""
}

func (x *CosignCertificateVerification) GetCertificateChainPemEnc() string {
	if x != nil && x.CertificateChainPemEnc != nil {
		return *x.CertificateChainPemEnc
	}
	return ""
}

func (x *CosignCertificateVerification) GetCertificateOidcIssuer() string {
	if x != nil && x.CertificateOidcIssuer != nil {
		return *x.CertificateOidcIssuer
	}
	return ""
}

func (x *CosignCertificateVerification) GetCertificateIdentity() string {
	if x != nil && x.CertificateIdentity != nil {
		return *x.CertificateIdentity
	}
	return ""
}

func (x *CosignCertificateVerification) GetCertificateTransparencyLog() *CertificateTransparencyLogVerification {
	if x != nil {
		return x.CertificateTransparencyLog
	}
	return nil
}

func (x *CosignCertificateVerification) SetCertificatePemEnc(v string) {
	x.CertificatePemEnc = &v
}

func (x *CosignCertificateVerification) SetCertificateChainPemEnc(v string) {
	x.CertificateChainPemEnc = &v
}

func (x *CosignCertificateVerification) SetCertificateOidcIssuer(v string) {
	x.CertificateOidcIssuer = &v
}

func (x *CosignCertificateVerification) SetCertificateIdentity(v string) {
	x.CertificateIdentity = &v
}

func (x *CosignCertificateVerification) SetCertificateTransparencyLog(v *CertificateTransparencyLogVerification) {
	x.CertificateTransparencyLog = v
}

func (x *CosignCertificateVerification) HasCertificatePemEnc() bool {
	if x == nil {
		return false
	}
	return x.CertificatePemEnc != nil
}

func (x *CosignCertificateVerification) HasCertificateChainPemEnc() bool {
	if x == nil {
		return false
	}
	return x.CertificateChainPemEnc != nil
}

func (x *CosignCertificateVerification) HasCertificateOidcIssuer() bool {
	if x == nil {
		return false
	}
	return x.CertificateOidcIssuer != nil
}

func (x *CosignCertificateVerification) HasCertificateIdentity() bool {
	if x == nil {
		return false
	}
	return x.CertificateIdentity != nil
}

func (x *CosignCertificateVerification) HasCertificateTransparencyLog() bool {
	if x == nil {
		return false
	}
	return x.CertificateTransparencyLog != nil
}

func (x *CosignCertificateVerification) ClearCertificatePemEnc() {
	x.CertificatePemEnc = nil
}

func (x *CosignCertificateVerification) ClearCertificateChainPemEnc() {
	x.CertificateChainPemEnc = nil
}

func (x *CosignCertificateVerification) ClearCertificateOidcIssuer() {
	x.CertificateOidcIssuer = nil
}

func (x *CosignCertificateVerification) ClearCertificateIdentity() {
	x.CertificateIdentity = nil
}

func (x *CosignCertificateVerification) ClearCertificateTransparencyLog() {
	x.CertificateTransparencyLog = nil
}

type CosignCertificateVerification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// PEM encoded certificate to use for verification. Leave empty when
	// using short-lived certificates as issued by Fulcio.
	CertificatePemEnc *string
	// PEM encoded certificate chain to use for verification. Defaults to the
	// root certificate authority of the public Sigstore instance if left empty.
	CertificateChainPemEnc *string
	// Certificate OIDC issuer to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an OIDC issuer, you may use '.*' as the OIDC issuer. However,
	// it is recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateOidcIssuer *string
	// Certificate identity to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an identity, you may use '.*' as the identity. However, it is
	// recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	CertificateIdentity *string
	// Validate that the signature certificate contains a signed
	// certificate timestamp as proof of inclusion into the certificate
	// transparency log.
	CertificateTransparencyLog *CertificateTransparencyLogVerification
}

func (b0 CosignCertificateVerification_builder) Build() *CosignCertificateVerification {
	m0 := &CosignCertificateVerification{}
	b, x := &b0, m0
	_, _ = b, x
	x.CertificatePemEnc = b.CertificatePemEnc
	x.CertificateChainPemEnc = b.CertificateChainPemEnc
	x.CertificateOidcIssuer = b.CertificateOidcIssuer
	x.CertificateIdentity = b.CertificateIdentity
	x.CertificateTransparencyLog = b.CertificateTransparencyLog
	return m0
}

// Validate that the signature certificate contains a signed
// certificate timestamp as proof of inclusion into the certificate
// transparency log.
type CertificateTransparencyLogVerification struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Validate the inclusion of certificates into a certificate transparency log.
	// Disables validation if not enabled.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	// PEM encoded public key used to validate the proof of inclusion into the
	// certificate transparency log. Defaults to the key of the public Sigstore
	// instance if left empty.
	PublicKeyPemEnc *string `protobuf:"bytes,2,opt,name=public_key_pem_enc,json=publicKeyPemEnc" json:"public_key_pem_enc,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CertificateTransparencyLogVerification) Reset() {
	*x = CertificateTransparencyLogVerification{}
	mi := &file_storage_signature_integration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateTransparencyLogVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateTransparencyLogVerification) ProtoMessage() {}

func (x *CertificateTransparencyLogVerification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CertificateTransparencyLogVerification) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CertificateTransparencyLogVerification) GetPublicKeyPemEnc() string {
	if x != nil && x.PublicKeyPemEnc != nil {
		return *x.PublicKeyPemEnc
	}
	return ""
}

func (x *CertificateTransparencyLogVerification) SetEnabled(v bool) {
	x.Enabled = &v
}

func (x *CertificateTransparencyLogVerification) SetPublicKeyPemEnc(v string) {
	x.PublicKeyPemEnc = &v
}

func (x *CertificateTransparencyLogVerification) HasEnabled() bool {
	if x == nil {
		return false
	}
	return x.Enabled != nil
}

func (x *CertificateTransparencyLogVerification) HasPublicKeyPemEnc() bool {
	if x == nil {
		return false
	}
	return x.PublicKeyPemEnc != nil
}

func (x *CertificateTransparencyLogVerification) ClearEnabled() {
	x.Enabled = nil
}

func (x *CertificateTransparencyLogVerification) ClearPublicKeyPemEnc() {
	x.PublicKeyPemEnc = nil
}

type CertificateTransparencyLogVerification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Validate the inclusion of certificates into a certificate transparency log.
	// Disables validation if not enabled.
	Enabled *bool
	// PEM encoded public key used to validate the proof of inclusion into the
	// certificate transparency log. Defaults to the key of the public Sigstore
	// instance if left empty.
	PublicKeyPemEnc *string
}

func (b0 CertificateTransparencyLogVerification_builder) Build() *CertificateTransparencyLogVerification {
	m0 := &CertificateTransparencyLogVerification{}
	b, x := &b0, m0
	_, _ = b, x
	x.Enabled = b.Enabled
	x.PublicKeyPemEnc = b.PublicKeyPemEnc
	return m0
}

// Validate the inclusion of signature signing events into a transparency log.
type TransparencyLogVerification struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Validate the inclusion of signatures into a transparency log.
	// Disables validation if not enabled.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	// The URL of the transparency log. Required for online confirmation of
	// inclusion into the transparency log. Defaults to the Sigstore instance
	// `rekor.sigstore.dev`.
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Force offline validation of the signature proof of inclusion into the
	// transparency log. Do not fall back to request confirmation from the
	// transparency log over network.
	ValidateOffline *bool `protobuf:"varint,3,opt,name=validate_offline,json=validateOffline" json:"validate_offline,omitempty"`
	// PEM encoded public key used to validate the proof of inclusion into the
	// transparency log. Defaults to the key of the public Sigstore instance if
	// left empty.
	PublicKeyPemEnc *string `protobuf:"bytes,4,opt,name=public_key_pem_enc,json=publicKeyPemEnc" json:"public_key_pem_enc,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransparencyLogVerification) Reset() {
	*x = TransparencyLogVerification{}
	mi := &file_storage_signature_integration_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransparencyLogVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransparencyLogVerification) ProtoMessage() {}

func (x *TransparencyLogVerification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TransparencyLogVerification) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *TransparencyLogVerification) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *TransparencyLogVerification) GetValidateOffline() bool {
	if x != nil && x.ValidateOffline != nil {
		return *x.ValidateOffline
	}
	return false
}

func (x *TransparencyLogVerification) GetPublicKeyPemEnc() string {
	if x != nil && x.PublicKeyPemEnc != nil {
		return *x.PublicKeyPemEnc
	}
	return ""
}

func (x *TransparencyLogVerification) SetEnabled(v bool) {
	x.Enabled = &v
}

func (x *TransparencyLogVerification) SetUrl(v string) {
	x.Url = &v
}

func (x *TransparencyLogVerification) SetValidateOffline(v bool) {
	x.ValidateOffline = &v
}

func (x *TransparencyLogVerification) SetPublicKeyPemEnc(v string) {
	x.PublicKeyPemEnc = &v
}

func (x *TransparencyLogVerification) HasEnabled() bool {
	if x == nil {
		return false
	}
	return x.Enabled != nil
}

func (x *TransparencyLogVerification) HasUrl() bool {
	if x == nil {
		return false
	}
	return x.Url != nil
}

func (x *TransparencyLogVerification) HasValidateOffline() bool {
	if x == nil {
		return false
	}
	return x.ValidateOffline != nil
}

func (x *TransparencyLogVerification) HasPublicKeyPemEnc() bool {
	if x == nil {
		return false
	}
	return x.PublicKeyPemEnc != nil
}

func (x *TransparencyLogVerification) ClearEnabled() {
	x.Enabled = nil
}

func (x *TransparencyLogVerification) ClearUrl() {
	x.Url = nil
}

func (x *TransparencyLogVerification) ClearValidateOffline() {
	x.ValidateOffline = nil
}

func (x *TransparencyLogVerification) ClearPublicKeyPemEnc() {
	x.PublicKeyPemEnc = nil
}

type TransparencyLogVerification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Validate the inclusion of signatures into a transparency log.
	// Disables validation if not enabled.
	Enabled *bool
	// The URL of the transparency log. Required for online confirmation of
	// inclusion into the transparency log. Defaults to the Sigstore instance
	// `rekor.sigstore.dev`.
	Url *string
	// Force offline validation of the signature proof of inclusion into the
	// transparency log. Do not fall back to request confirmation from the
	// transparency log over network.
	ValidateOffline *bool
	// PEM encoded public key used to validate the proof of inclusion into the
	// transparency log. Defaults to the key of the public Sigstore instance if
	// left empty.
	PublicKeyPemEnc *string
}

func (b0 TransparencyLogVerification_builder) Build() *TransparencyLogVerification {
	m0 := &TransparencyLogVerification{}
	b, x := &b0, m0
	_, _ = b, x
	x.Enabled = b.Enabled
	x.Url = b.Url
	x.ValidateOffline = b.ValidateOffline
	x.PublicKeyPemEnc = b.PublicKeyPemEnc
	return m0
}

type CosignPublicKeyVerification_PublicKey struct {
	state           protoimpl.MessageState `protogen:"hybrid.v1"`
	Name            *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PublicKeyPemEnc *string                `protobuf:"bytes,2,opt,name=public_key_pem_enc,json=publicKeyPemEnc" json:"public_key_pem_enc,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CosignPublicKeyVerification_PublicKey) Reset() {
	*x = CosignPublicKeyVerification_PublicKey{}
	mi := &file_storage_signature_integration_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CosignPublicKeyVerification_PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosignPublicKeyVerification_PublicKey) ProtoMessage() {}

func (x *CosignPublicKeyVerification_PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_signature_integration_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CosignPublicKeyVerification_PublicKey) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CosignPublicKeyVerification_PublicKey) GetPublicKeyPemEnc() string {
	if x != nil && x.PublicKeyPemEnc != nil {
		return *x.PublicKeyPemEnc
	}
	return ""
}

func (x *CosignPublicKeyVerification_PublicKey) SetName(v string) {
	x.Name = &v
}

func (x *CosignPublicKeyVerification_PublicKey) SetPublicKeyPemEnc(v string) {
	x.PublicKeyPemEnc = &v
}

func (x *CosignPublicKeyVerification_PublicKey) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *CosignPublicKeyVerification_PublicKey) HasPublicKeyPemEnc() bool {
	if x == nil {
		return false
	}
	return x.PublicKeyPemEnc != nil
}

func (x *CosignPublicKeyVerification_PublicKey) ClearName() {
	x.Name = nil
}

func (x *CosignPublicKeyVerification_PublicKey) ClearPublicKeyPemEnc() {
	x.PublicKeyPemEnc = nil
}

type CosignPublicKeyVerification_PublicKey_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name            *string
	PublicKeyPemEnc *string
}

func (b0 CosignPublicKeyVerification_PublicKey_builder) Build() *CosignPublicKeyVerification_PublicKey {
	m0 := &CosignPublicKeyVerification_PublicKey{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.PublicKeyPemEnc = b.PublicKeyPemEnc
	return m0
}

var File_storage_signature_integration_proto protoreflect.FileDescriptor

const file_storage_signature_integration_proto_rawDesc = "" +
	"\n" +
	"#storage/signature_integration.proto\x12\astorage\x1a\x14storage/traits.proto\x1a!google/protobuf/go_features.proto\"\xcb\x02\n" +
	"\x14SignatureIntegration\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12<\n" +
	"\x06cosign\x18\x03 \x01(\v2$.storage.CosignPublicKeyVerificationR\x06cosign\x12W\n" +
	"\x13cosign_certificates\x18\x04 \x03(\v2&.storage.CosignCertificateVerificationR\x12cosignCertificates\x12O\n" +
	"\x10transparency_log\x18\x05 \x01(\v2$.storage.TransparencyLogVerificationR\x0ftransparencyLog\x12'\n" +
	"\x06traits\x18\x06 \x01(\v2\x0f.storage.TraitsR\x06traits\"\xbc\x01\n" +
	"\x1bCosignPublicKeyVerification\x12O\n" +
	"\vpublic_keys\x18\x03 \x03(\v2..storage.CosignPublicKeyVerification.PublicKeyR\n" +
	"publicKeys\x1aL\n" +
	"\tPublicKey\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12+\n" +
	"\x12public_key_pem_enc\x18\x02 \x01(\tR\x0fpublicKeyPemEnc\"\xe8\x02\n" +
	"\x1dCosignCertificateVerification\x12.\n" +
	"\x13certificate_pem_enc\x18\x01 \x01(\tR\x11certificatePemEnc\x129\n" +
	"\x19certificate_chain_pem_enc\x18\x02 \x01(\tR\x16certificateChainPemEnc\x126\n" +
	"\x17certificate_oidc_issuer\x18\x03 \x01(\tR\x15certificateOidcIssuer\x121\n" +
	"\x14certificate_identity\x18\x04 \x01(\tR\x13certificateIdentity\x12q\n" +
	"\x1ccertificate_transparency_log\x18\x05 \x01(\v2/.storage.CertificateTransparencyLogVerificationR\x1acertificateTransparencyLog\"o\n" +
	"&CertificateTransparencyLogVerification\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12+\n" +
	"\x12public_key_pem_enc\x18\x02 \x01(\tR\x0fpublicKeyPemEnc\"\xa1\x01\n" +
	"\x1bTransparencyLogVerification\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12)\n" +
	"\x10validate_offline\x18\x03 \x01(\bR\x0fvalidateOffline\x12+\n" +
	"\x12public_key_pem_enc\x18\x04 \x01(\tR\x0fpublicKeyPemEncB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_signature_integration_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_storage_signature_integration_proto_goTypes = []any{
	(*SignatureIntegration)(nil),                   // 0: storage.SignatureIntegration
	(*CosignPublicKeyVerification)(nil),            // 1: storage.CosignPublicKeyVerification
	(*CosignCertificateVerification)(nil),          // 2: storage.CosignCertificateVerification
	(*CertificateTransparencyLogVerification)(nil), // 3: storage.CertificateTransparencyLogVerification
	(*TransparencyLogVerification)(nil),            // 4: storage.TransparencyLogVerification
	(*CosignPublicKeyVerification_PublicKey)(nil),  // 5: storage.CosignPublicKeyVerification.PublicKey
	(*Traits)(nil), // 6: storage.Traits
}
var file_storage_signature_integration_proto_depIdxs = []int32{
	1, // 0: storage.SignatureIntegration.cosign:type_name -> storage.CosignPublicKeyVerification
	2, // 1: storage.SignatureIntegration.cosign_certificates:type_name -> storage.CosignCertificateVerification
	4, // 2: storage.SignatureIntegration.transparency_log:type_name -> storage.TransparencyLogVerification
	6, // 3: storage.SignatureIntegration.traits:type_name -> storage.Traits
	5, // 4: storage.CosignPublicKeyVerification.public_keys:type_name -> storage.CosignPublicKeyVerification.PublicKey
	3, // 5: storage.CosignCertificateVerification.certificate_transparency_log:type_name -> storage.CertificateTransparencyLogVerification
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_storage_signature_integration_proto_init() }
func file_storage_signature_integration_proto_init() {
	if File_storage_signature_integration_proto != nil {
		return
	}
	file_storage_traits_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_signature_integration_proto_rawDesc), len(file_storage_signature_integration_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_signature_integration_proto_goTypes,
		DependencyIndexes: file_storage_signature_integration_proto_depIdxs,
		MessageInfos:      file_storage_signature_integration_proto_msgTypes,
	}.Build()
	File_storage_signature_integration_proto = out.File
	file_storage_signature_integration_proto_goTypes = nil
	file_storage_signature_integration_proto_depIdxs = nil
}
