// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/signature_integration.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignatureIntegration struct {
	Id                           string                                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                         string                                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                         string                                              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SignatureVerificationConfigs []*SignatureIntegration_SignatureVerificationConfig `protobuf:"bytes,4,rep,name=signature_verification_configs,json=signatureVerificationConfigs,proto3" json:"signature_verification_configs,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                            `json:"-"`
	XXX_unrecognized             []byte                                              `json:"-"`
	XXX_sizecache                int32                                               `json:"-"`
}

func (m *SignatureIntegration) Reset()         { *m = SignatureIntegration{} }
func (m *SignatureIntegration) String() string { return proto.CompactTextString(m) }
func (*SignatureIntegration) ProtoMessage()    {}
func (*SignatureIntegration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{0}
}
func (m *SignatureIntegration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureIntegration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureIntegration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureIntegration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureIntegration.Merge(m, src)
}
func (m *SignatureIntegration) XXX_Size() int {
	return m.Size()
}
func (m *SignatureIntegration) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureIntegration.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureIntegration proto.InternalMessageInfo

func (m *SignatureIntegration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignatureIntegration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignatureIntegration) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SignatureIntegration) GetSignatureVerificationConfigs() []*SignatureIntegration_SignatureVerificationConfig {
	if m != nil {
		return m.SignatureVerificationConfigs
	}
	return nil
}

func (m *SignatureIntegration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SignatureIntegration) Clone() *SignatureIntegration {
	if m == nil {
		return nil
	}
	cloned := new(SignatureIntegration)
	*cloned = *m

	if m.SignatureVerificationConfigs != nil {
		cloned.SignatureVerificationConfigs = make([]*SignatureIntegration_SignatureVerificationConfig, len(m.SignatureVerificationConfigs))
		for idx, v := range m.SignatureVerificationConfigs {
			cloned.SignatureVerificationConfigs[idx] = v.Clone()
		}
	}
	return cloned
}

type SignatureIntegration_SignatureVerificationConfig struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*SignatureIntegration_SignatureVerificationConfig_CosignVerification
	Config               isSignatureIntegration_SignatureVerificationConfig_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *SignatureIntegration_SignatureVerificationConfig) Reset() {
	*m = SignatureIntegration_SignatureVerificationConfig{}
}
func (m *SignatureIntegration_SignatureVerificationConfig) String() string {
	return proto.CompactTextString(m)
}
func (*SignatureIntegration_SignatureVerificationConfig) ProtoMessage() {}
func (*SignatureIntegration_SignatureVerificationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{0, 0}
}
func (m *SignatureIntegration_SignatureVerificationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureIntegration_SignatureVerificationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureIntegration_SignatureVerificationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureIntegration_SignatureVerificationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureIntegration_SignatureVerificationConfig.Merge(m, src)
}
func (m *SignatureIntegration_SignatureVerificationConfig) XXX_Size() int {
	return m.Size()
}
func (m *SignatureIntegration_SignatureVerificationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureIntegration_SignatureVerificationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureIntegration_SignatureVerificationConfig proto.InternalMessageInfo

type isSignatureIntegration_SignatureVerificationConfig_Config interface {
	isSignatureIntegration_SignatureVerificationConfig_Config()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isSignatureIntegration_SignatureVerificationConfig_Config
}

type SignatureIntegration_SignatureVerificationConfig_CosignVerification struct {
	CosignVerification *CosignPublicKeyVerification `protobuf:"bytes,2,opt,name=cosign_verification,json=cosignVerification,proto3,oneof" json:"cosign_verification,omitempty"`
}

func (*SignatureIntegration_SignatureVerificationConfig_CosignVerification) isSignatureIntegration_SignatureVerificationConfig_Config() {
}
func (m *SignatureIntegration_SignatureVerificationConfig_CosignVerification) Clone() isSignatureIntegration_SignatureVerificationConfig_Config {
	if m == nil {
		return nil
	}
	cloned := new(SignatureIntegration_SignatureVerificationConfig_CosignVerification)
	*cloned = *m

	cloned.CosignVerification = m.CosignVerification.Clone()
	return cloned
}

func (m *SignatureIntegration_SignatureVerificationConfig) GetConfig() isSignatureIntegration_SignatureVerificationConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SignatureIntegration_SignatureVerificationConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignatureIntegration_SignatureVerificationConfig) GetCosignVerification() *CosignPublicKeyVerification {
	if x, ok := m.GetConfig().(*SignatureIntegration_SignatureVerificationConfig_CosignVerification); ok {
		return x.CosignVerification
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignatureIntegration_SignatureVerificationConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignatureIntegration_SignatureVerificationConfig_CosignVerification)(nil),
	}
}

func (m *SignatureIntegration_SignatureVerificationConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SignatureIntegration_SignatureVerificationConfig) Clone() *SignatureIntegration_SignatureVerificationConfig {
	if m == nil {
		return nil
	}
	cloned := new(SignatureIntegration_SignatureVerificationConfig)
	*cloned = *m

	if m.Config != nil {
		cloned.Config = m.Config.Clone()
	}
	return cloned
}

type CosignPublicKeyVerification struct {
	PublicKeys           []*CosignPublicKeyVerification_PublicKey `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CosignPublicKeyVerification) Reset()         { *m = CosignPublicKeyVerification{} }
func (m *CosignPublicKeyVerification) String() string { return proto.CompactTextString(m) }
func (*CosignPublicKeyVerification) ProtoMessage()    {}
func (*CosignPublicKeyVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{1}
}
func (m *CosignPublicKeyVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosignPublicKeyVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosignPublicKeyVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosignPublicKeyVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosignPublicKeyVerification.Merge(m, src)
}
func (m *CosignPublicKeyVerification) XXX_Size() int {
	return m.Size()
}
func (m *CosignPublicKeyVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_CosignPublicKeyVerification.DiscardUnknown(m)
}

var xxx_messageInfo_CosignPublicKeyVerification proto.InternalMessageInfo

func (m *CosignPublicKeyVerification) GetPublicKeys() []*CosignPublicKeyVerification_PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *CosignPublicKeyVerification) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CosignPublicKeyVerification) Clone() *CosignPublicKeyVerification {
	if m == nil {
		return nil
	}
	cloned := new(CosignPublicKeyVerification)
	*cloned = *m

	if m.PublicKeys != nil {
		cloned.PublicKeys = make([]*CosignPublicKeyVerification_PublicKey, len(m.PublicKeys))
		for idx, v := range m.PublicKeys {
			cloned.PublicKeys[idx] = v.Clone()
		}
	}
	return cloned
}

type CosignPublicKeyVerification_PublicKey struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublicKeysBase64Enc  string   `protobuf:"bytes,2,opt,name=public_keys_base64_enc,json=publicKeysBase64Enc,proto3" json:"public_keys_base64_enc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CosignPublicKeyVerification_PublicKey) Reset()         { *m = CosignPublicKeyVerification_PublicKey{} }
func (m *CosignPublicKeyVerification_PublicKey) String() string { return proto.CompactTextString(m) }
func (*CosignPublicKeyVerification_PublicKey) ProtoMessage()    {}
func (*CosignPublicKeyVerification_PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3165e7a4c19e14a, []int{1, 0}
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosignPublicKeyVerification_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosignPublicKeyVerification_PublicKey.Merge(m, src)
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *CosignPublicKeyVerification_PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CosignPublicKeyVerification_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_CosignPublicKeyVerification_PublicKey proto.InternalMessageInfo

func (m *CosignPublicKeyVerification_PublicKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CosignPublicKeyVerification_PublicKey) GetPublicKeysBase64Enc() string {
	if m != nil {
		return m.PublicKeysBase64Enc
	}
	return ""
}

func (m *CosignPublicKeyVerification_PublicKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CosignPublicKeyVerification_PublicKey) Clone() *CosignPublicKeyVerification_PublicKey {
	if m == nil {
		return nil
	}
	cloned := new(CosignPublicKeyVerification_PublicKey)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*SignatureIntegration)(nil), "storage.SignatureIntegration")
	proto.RegisterType((*SignatureIntegration_SignatureVerificationConfig)(nil), "storage.SignatureIntegration.SignatureVerificationConfig")
	proto.RegisterType((*CosignPublicKeyVerification)(nil), "storage.CosignPublicKeyVerification")
	proto.RegisterType((*CosignPublicKeyVerification_PublicKey)(nil), "storage.CosignPublicKeyVerification.PublicKey")
}

func init() {
	proto.RegisterFile("storage/signature_integration.proto", fileDescriptor_b3165e7a4c19e14a)
}

var fileDescriptor_b3165e7a4c19e14a = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xed, 0xa4, 0xa5, 0xdf, 0xd7, 0x5b, 0x70, 0x31, 0x2d, 0x12, 0x5b, 0x09, 0xa5, 0xba, 0xe8,
	0x2a, 0x85, 0xb6, 0x08, 0x6e, 0x5b, 0x04, 0xc5, 0x85, 0x12, 0x45, 0xc1, 0x4d, 0x48, 0xa7, 0xd3,
	0x30, 0x54, 0x67, 0x42, 0x66, 0x2a, 0x76, 0xe5, 0x2b, 0xb8, 0xf4, 0x81, 0x5c, 0xb8, 0xf4, 0x11,
	0x24, 0xbe, 0x88, 0x64, 0xd2, 0xfc, 0x88, 0x5a, 0xdc, 0x5d, 0xce, 0x99, 0x73, 0xee, 0xb9, 0x73,
	0x2f, 0xec, 0x49, 0x25, 0x42, 0xcf, 0xa7, 0x7d, 0xc9, 0x7c, 0xee, 0xa9, 0x65, 0x48, 0x5d, 0xc6,
	0x15, 0xf5, 0x43, 0x4f, 0x31, 0xc1, 0xed, 0x20, 0x14, 0x4a, 0xe0, 0x7f, 0xeb, 0x47, 0xad, 0xa6,
	0x2f, 0x7c, 0xa1, 0xb1, 0x7e, 0x5c, 0x25, 0x74, 0x37, 0x32, 0xa0, 0x79, 0x91, 0xca, 0x4f, 0x72,
	0x35, 0xde, 0x02, 0x83, 0xcd, 0x4c, 0xd4, 0x41, 0xbd, 0x9a, 0x63, 0xb0, 0x19, 0xc6, 0x50, 0xe1,
	0xde, 0x1d, 0x35, 0x0d, 0x8d, 0xe8, 0x3a, 0xc6, 0xd4, 0x2a, 0xa0, 0x66, 0x39, 0xc1, 0xe2, 0x1a,
	0x3f, 0x82, 0x95, 0xc7, 0xb9, 0xa7, 0x21, 0x9b, 0x33, 0xa2, 0x1d, 0x5d, 0x22, 0xf8, 0x9c, 0xf9,
	0xd2, 0xac, 0x74, 0xca, 0xbd, 0xfa, 0xe0, 0xd0, 0x5e, 0x07, 0xb3, 0x7f, 0x6a, 0x9f, 0x83, 0x57,
	0x05, 0x8b, 0x89, 0x76, 0x70, 0x76, 0xe5, 0xef, 0xa4, 0x6c, 0x3d, 0x21, 0x68, 0x6f, 0x50, 0x7f,
	0x1b, 0xec, 0x1a, 0x1a, 0x44, 0xc4, 0x8e, 0x5f, 0xd2, 0xea, 0x39, 0xeb, 0x83, 0xfd, 0x2c, 0xe5,
	0x44, 0xbf, 0x39, 0x5f, 0x4e, 0x6f, 0x19, 0x39, 0xa5, 0xab, 0xa2, 0xf1, 0x71, 0xc9, 0xc1, 0x89,
	0x45, 0x11, 0x1d, 0xff, 0x87, 0x6a, 0x32, 0x72, 0xf7, 0x05, 0x41, 0x7b, 0x83, 0x1e, 0x9f, 0x41,
	0x3d, 0xd0, 0x84, 0xbb, 0xa0, 0x2b, 0x69, 0x96, 0xf5, 0x07, 0xd9, 0x7f, 0x69, 0x6d, 0x67, 0xa8,
	0x03, 0x41, 0x5a, 0xca, 0xd6, 0x25, 0xd4, 0x32, 0x22, 0xdb, 0x1c, 0x2a, 0x6c, 0x6e, 0x08, 0xdb,
	0x85, 0x8e, 0xee, 0xd4, 0x93, 0xf4, 0x60, 0xe4, 0x52, 0x4e, 0xd6, 0xfb, 0x6d, 0xe4, 0x66, 0x63,
	0xcd, 0x1d, 0x71, 0x32, 0x1e, 0xbd, 0x46, 0x16, 0x7a, 0x8b, 0x2c, 0xf4, 0x1e, 0x59, 0xe8, 0xf9,
	0xc3, 0x2a, 0xc1, 0x0e, 0x13, 0xb6, 0x54, 0x1e, 0x59, 0x84, 0xe2, 0x21, 0x39, 0xa8, 0x34, 0xf4,
	0x4d, 0x7a, 0x77, 0xd3, 0xaa, 0xc6, 0x87, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x8f, 0x51,
	0x84, 0xae, 0x02, 0x00, 0x00,
}

func (m *SignatureIntegration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureIntegration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureIntegration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SignatureVerificationConfigs) > 0 {
		for iNdEx := len(m.SignatureVerificationConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureVerificationConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureIntegration_SignatureVerificationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureIntegration_SignatureVerificationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureIntegration_SignatureVerificationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureIntegration_SignatureVerificationConfig_CosignVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureIntegration_SignatureVerificationConfig_CosignVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CosignVerification != nil {
		{
			size, err := m.CosignVerification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CosignPublicKeyVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosignPublicKeyVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosignPublicKeyVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeys) > 0 {
		for iNdEx := len(m.PublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignatureIntegration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *CosignPublicKeyVerification_PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosignPublicKeyVerification_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosignPublicKeyVerification_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKeysBase64Enc) > 0 {
		i -= len(m.PublicKeysBase64Enc)
		copy(dAtA[i:], m.PublicKeysBase64Enc)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.PublicKeysBase64Enc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSignatureIntegration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignatureIntegration(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignatureIntegration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignatureIntegration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if len(m.SignatureVerificationConfigs) > 0 {
		for _, e := range m.SignatureVerificationConfigs {
			l = e.Size()
			n += 1 + l + sovSignatureIntegration(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignatureIntegration_SignatureVerificationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignatureIntegration_SignatureVerificationConfig_CosignVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CosignVerification != nil {
		l = m.CosignVerification.Size()
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	return n
}
func (m *CosignPublicKeyVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, e := range m.PublicKeys {
			l = e.Size()
			n += 1 + l + sovSignatureIntegration(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CosignPublicKeyVerification_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	l = len(m.PublicKeysBase64Enc)
	if l > 0 {
		n += 1 + l + sovSignatureIntegration(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSignatureIntegration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignatureIntegration(x uint64) (n int) {
	return sovSignatureIntegration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureIntegration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureIntegration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureIntegration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureVerificationConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureVerificationConfigs = append(m.SignatureVerificationConfigs, &SignatureIntegration_SignatureVerificationConfig{})
			if err := m.SignatureVerificationConfigs[len(m.SignatureVerificationConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureIntegration_SignatureVerificationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureVerificationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureVerificationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosignVerification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CosignPublicKeyVerification{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &SignatureIntegration_SignatureVerificationConfig_CosignVerification{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosignPublicKeyVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosignPublicKeyVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosignPublicKeyVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, &CosignPublicKeyVerification_PublicKey{})
			if err := m.PublicKeys[len(m.PublicKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosignPublicKeyVerification_PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeysBase64Enc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeysBase64Enc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatureIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatureIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignatureIntegration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignatureIntegration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatureIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignatureIntegration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignatureIntegration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignatureIntegration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignatureIntegration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignatureIntegration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignatureIntegration = fmt.Errorf("proto: unexpected end of group")
)
