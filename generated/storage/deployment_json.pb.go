// Code generated by protoc-gen-go-json. DO NOT EDIT.

package storage

import (
	_ "bytes"
	fmt "fmt"
	strings "strings"
	_ "time"
	unsafe "unsafe"
)

func (m *Deployment) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Deployment) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetHash(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("hash")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetType(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("type")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetNamespace(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("namespace")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetNamespaceId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("namespaceId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetOrchestratorComponent(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("orchestratorComponent")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetReplicas(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("replicas")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetLabels(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("labels")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("{")
		for k, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", k)
			buf.WriteString(":")
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("}")
	}
	if x := m.GetPodLabels(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("podLabels")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("{")
		for k, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", k)
			buf.WriteString(":")
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("}")
	}
	if x := m.GetLabelSelector(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("labelSelector")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetCreated(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("created")
		buf.WriteString("\"")
		buf.WriteString(":")
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	if x := m.GetClusterId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clusterId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetClusterName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clusterName")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetContainers(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containers")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetAnnotations(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("annotations")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("{")
		for k, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", k)
			buf.WriteString(":")
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("}")
	}
	if x := m.GetPriority(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("priority")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetInactive(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("inactive")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetImagePullSecrets(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("imagePullSecrets")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetServiceAccount(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("serviceAccount")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetServiceAccountPermissionLevel(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("serviceAccountPermissionLevel")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetAutomountServiceAccountToken(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("automountServiceAccountToken")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetHostNetwork(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("hostNetwork")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetHostPid(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("hostPid")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetHostIpc(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("hostIpc")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetRuntimeClass(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("runtimeClass")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetTolerations(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("tolerations")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetPorts(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("ports")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetStateTimestamp(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("stateTimestamp")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetRiskScore(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("riskScore")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%f", x)
	}
	if x := m.GetPlatformComponent(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("platformComponent")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *ContainerImage) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ContainerImage) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetName(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetNotPullable(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("notPullable")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetIsClusterLocal(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("isClusterLocal")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *Container) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Container) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetConfig(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("config")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetImage(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("image")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetSecurityContext(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("securityContext")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetVolumes(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("volumes")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetPorts(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("ports")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetSecrets(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("secrets")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetResources(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("resources")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetLivenessProbe(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("livenessProbe")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetReadinessProbe(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("readinessProbe")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *Resources) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Resources) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetCpuCoresRequest(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("cpuCoresRequest")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%f", x)
	}
	if x := m.GetCpuCoresLimit(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("cpuCoresLimit")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%f", x)
	}
	if x := m.GetMemoryMbRequest(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("memoryMbRequest")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%f", x)
	}
	if x := m.GetMemoryMbLimit(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("memoryMbLimit")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%f", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *Volume) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Volume) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetSource(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("source")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetDestination(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("destination")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetReadOnly(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("readOnly")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetType(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("type")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetMountPropagation(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("mountPropagation")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	buf.WriteString("}")
	return nil
}

func (m *LivenessProbe) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *LivenessProbe) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetDefined(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("defined")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *ReadinessProbe) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ReadinessProbe) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetDefined(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("defined")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *Pod) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Pod) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetDeploymentId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("deploymentId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetNamespace(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("namespace")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetClusterId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clusterId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetLiveInstances(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("liveInstances")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetTerminatedInstances(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("terminatedInstances")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetStarted(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("started")
		buf.WriteString("\"")
		buf.WriteString(":")
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *Pod_ContainerInstanceList) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *Pod_ContainerInstanceList) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetInstances(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("instances")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	buf.WriteString("}")
	return nil
}

func (m *ContainerInstance) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ContainerInstance) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetInstanceId(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("instanceId")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetContainingPodId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containingPodId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetContainerName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containerName")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetContainerIps(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containerIps")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetStarted(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("started")
		buf.WriteString("\"")
		buf.WriteString(":")
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	if x := m.GetImageDigest(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("imageDigest")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetFinished(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("finished")
		buf.WriteString("\"")
		buf.WriteString(":")
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	if x := m.GetExitCode(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("exitCode")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%d", x)
	}
	if x := m.GetTerminationReason(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("terminationReason")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *ContainerInstanceID) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ContainerInstanceID) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetContainerRuntime(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containerRuntime")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetNode(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("node")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *EmbeddedSecret) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *EmbeddedSecret) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetPath(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("path")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *PortConfig) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *PortConfig) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetContainerPort(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("containerPort")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%d", x)
	}
	if x := m.GetProtocol(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("protocol")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetExposure(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("exposure")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetExposedPort(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("exposedPort")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%d", x)
	}
	if x := m.GetExposureInfos(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("exposureInfos")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	buf.WriteString("}")
	return nil
}

func (m *PortConfig_ExposureInfo) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *PortConfig_ExposureInfo) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetLevel(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("level")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetServiceName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("serviceName")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetServiceId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("serviceId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetServiceClusterIp(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("serviceClusterIp")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetServicePort(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("servicePort")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%d", x)
	}
	if x := m.GetNodePort(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("nodePort")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%d", x)
	}
	if x := m.GetExternalIps(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("externalIps")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetExternalHostnames(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("externalHostnames")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	buf.WriteString("}")
	return nil
}

func (m *ContainerConfig) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ContainerConfig) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetEnv(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("env")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetCommand(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("command")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetArgs(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("args")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetDirectory(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("directory")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetUser(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("user")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetUid(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("uid")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetAppArmorProfile(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("appArmorProfile")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *ContainerConfig_EnvironmentConfig) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ContainerConfig_EnvironmentConfig) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetKey(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("key")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetValue(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("value")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetEnvVarSource(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("envVarSource")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	buf.WriteString("}")
	return nil
}

func (m *SecurityContext) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *SecurityContext) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetPrivileged(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("privileged")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetSelinux(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("selinux")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetDropCapabilities(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("dropCapabilities")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetAddCapabilities(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("addCapabilities")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			fmt.Fprintf(buf, "%q", v)
		}
		buf.WriteString("]")
	}
	if x := m.GetReadOnlyRootFilesystem(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("readOnlyRootFilesystem")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetSeccompProfile(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("seccompProfile")
		buf.WriteString("\"")
		buf.WriteString(":")
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetAllowPrivilegeEscalation(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("allowPrivilegeEscalation")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *SecurityContext_SELinux) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *SecurityContext_SELinux) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetUser(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("user")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetRole(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("role")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetType(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("type")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetLevel(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("level")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *SecurityContext_SeccompProfile) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *SecurityContext_SeccompProfile) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetType(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("type")
		buf.WriteString("\"")
		buf.WriteString(":")
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetLocalhostProfile(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("localhostProfile")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}

func (m *ListDeployment) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *ListDeployment) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("id")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetHash(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("hash")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("name")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetCluster(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("cluster")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetClusterId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clusterId")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetNamespace(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("namespace")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetCreated(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("created")
		buf.WriteString("\"")
		buf.WriteString(":")
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	if x := m.GetPriority(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("priority")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "\"%d\"", x)
	}
	buf.WriteString("}")
	return nil
}
