// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/notifier_crypto_config.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 2
type NotifierCryptoConfig struct {
	ActiveKeyIndex       int32    `protobuf:"varint,1,opt,name=active_key_index,json=activeKeyIndex,proto3" json:"active_key_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifierCryptoConfig) Reset()         { *m = NotifierCryptoConfig{} }
func (m *NotifierCryptoConfig) String() string { return proto.CompactTextString(m) }
func (*NotifierCryptoConfig) ProtoMessage()    {}
func (*NotifierCryptoConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac44c23d9bb2d16, []int{0}
}
func (m *NotifierCryptoConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifierCryptoConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifierCryptoConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifierCryptoConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifierCryptoConfig.Merge(m, src)
}
func (m *NotifierCryptoConfig) XXX_Size() int {
	return m.Size()
}
func (m *NotifierCryptoConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifierCryptoConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NotifierCryptoConfig proto.InternalMessageInfo

func (m *NotifierCryptoConfig) GetActiveKeyIndex() int32 {
	if m != nil {
		return m.ActiveKeyIndex
	}
	return 0
}

func (m *NotifierCryptoConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NotifierCryptoConfig) Clone() *NotifierCryptoConfig {
	if m == nil {
		return nil
	}
	cloned := new(NotifierCryptoConfig)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*NotifierCryptoConfig)(nil), "storage.NotifierCryptoConfig")
}

func init() {
	proto.RegisterFile("storage/notifier_crypto_config.proto", fileDescriptor_fac44c23d9bb2d16)
}

var fileDescriptor_fac44c23d9bb2d16 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0xcf, 0xcb, 0x2f, 0xc9, 0x4c, 0xcb, 0x4c, 0x2d, 0x8a, 0x4f, 0x2e, 0xaa,
	0x2c, 0x28, 0xc9, 0x8f, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0xaa, 0x52, 0x72, 0xe0, 0x12, 0xf1, 0x83, 0x2a, 0x74, 0x06, 0xab, 0x73, 0x06,
	0x2b, 0x13, 0xd2, 0xe0, 0x12, 0x48, 0x4c, 0x2e, 0xc9, 0x2c, 0x4b, 0x8d, 0xcf, 0x4e, 0xad, 0x8c,
	0xcf, 0xcc, 0x4b, 0x49, 0xad, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0xe2, 0x83, 0x88, 0x7b,
	0xa7, 0x56, 0x7a, 0x82, 0x44, 0x9d, 0x4c, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xb8, 0x24, 0x33, 0xf3, 0xf5, 0x8a, 0x4b, 0x12,
	0x93, 0xb3, 0x8b, 0xf2, 0x2b, 0x20, 0xf6, 0xe9, 0x41, 0xad, 0x8b, 0x82, 0xd9, 0x9b, 0xc4, 0x06,
	0x16, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xd3, 0xbc, 0xa4, 0xaf, 0x00, 0x00, 0x00,
}

func (m *NotifierCryptoConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifierCryptoConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierCryptoConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActiveKeyIndex != 0 {
		i = encodeVarintNotifierCryptoConfig(dAtA, i, uint64(m.ActiveKeyIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotifierCryptoConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotifierCryptoConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotifierCryptoConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveKeyIndex != 0 {
		n += 1 + sovNotifierCryptoConfig(uint64(m.ActiveKeyIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotifierCryptoConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotifierCryptoConfig(x uint64) (n int) {
	return sovNotifierCryptoConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotifierCryptoConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifierCryptoConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifierCryptoConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifierCryptoConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveKeyIndex", wireType)
			}
			m.ActiveKeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierCryptoConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveKeyIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotifierCryptoConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotifierCryptoConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotifierCryptoConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotifierCryptoConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifierCryptoConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifierCryptoConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotifierCryptoConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotifierCryptoConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotifierCryptoConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotifierCryptoConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotifierCryptoConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotifierCryptoConfig = fmt.Errorf("proto: unexpected end of group")
)
