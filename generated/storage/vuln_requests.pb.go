// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/vuln_requests.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Indicates the status of a request. Requests canceled by the user before they are acted upon by the approver
// are not tracked/persisted (with the exception of audit logs if it is turned on).
type RequestStatus int32

const (
	// Default request state. It indicates that the request has not been fulfilled and that an action (approve/deny) is required.
	RequestStatus_PENDING RequestStatus = 0
	// Indicates that the request has been approved by the approver.
	RequestStatus_APPROVED RequestStatus = 1
	// Indicates that the request has been denied by the approver.
	RequestStatus_DENIED RequestStatus = 2
	// Indicates that the original request was approved, but an update is still pending an approval or denial.
	RequestStatus_APPROVED_PENDING_UPDATE RequestStatus = 3
)

var RequestStatus_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "APPROVED_PENDING_UPDATE",
}

var RequestStatus_value = map[string]int32{
	"PENDING":                 0,
	"APPROVED":                1,
	"DENIED":                  2,
	"APPROVED_PENDING_UPDATE": 3,
}

func (x RequestStatus) String() string {
	return proto.EnumName(RequestStatus_name, int32(x))
}

func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{0}
}

type RequestExpiry_ExpiryType int32

const (
	RequestExpiry_TIME            RequestExpiry_ExpiryType = 0
	RequestExpiry_ALL_CVE_FIXABLE RequestExpiry_ExpiryType = 1
	RequestExpiry_ANY_CVE_FIXABLE RequestExpiry_ExpiryType = 2
)

var RequestExpiry_ExpiryType_name = map[int32]string{
	0: "TIME",
	1: "ALL_CVE_FIXABLE",
	2: "ANY_CVE_FIXABLE",
}

var RequestExpiry_ExpiryType_value = map[string]int32{
	"TIME":            0,
	"ALL_CVE_FIXABLE": 1,
	"ANY_CVE_FIXABLE": 2,
}

func (x RequestExpiry_ExpiryType) String() string {
	return proto.EnumName(RequestExpiry_ExpiryType_name, int32(x))
}

func (RequestExpiry_ExpiryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{1, 0}
}

type RequestComment struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	User                 *SlimUser        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" sql:"ignore_labels(User ID)"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequestComment) Reset()         { *m = RequestComment{} }
func (m *RequestComment) String() string { return proto.CompactTextString(m) }
func (*RequestComment) ProtoMessage()    {}
func (*RequestComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{0}
}
func (m *RequestComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestComment.Merge(m, src)
}
func (m *RequestComment) XXX_Size() int {
	return m.Size()
}
func (m *RequestComment) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestComment.DiscardUnknown(m)
}

var xxx_messageInfo_RequestComment proto.InternalMessageInfo

func (m *RequestComment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestComment) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestComment) GetUser() *SlimUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestComment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RequestComment) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RequestComment) Clone() *RequestComment {
	if m == nil {
		return nil
	}
	cloned := new(RequestComment)
	*cloned = *m

	cloned.User = m.User.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

type RequestExpiry struct {
	// Types that are valid to be assigned to Expiry:
	//	*RequestExpiry_ExpiresWhenFixed
	//	*RequestExpiry_ExpiresOn
	Expiry isRequestExpiry_Expiry `protobuf_oneof:"expiry"`
	// This field is under development, DO NOT USE FOR NON-DEVELOPMENT PURPOSES.
	// This field can be used only for deferral requests.
	// This field indicates the type of expiry set for the request.
	// `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
	// `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.
	// `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
	ExpiryType           RequestExpiry_ExpiryType `protobuf:"varint,3,opt,name=expiry_type,json=expiryType,proto3,enum=storage.RequestExpiry_ExpiryType" json:"expiry_type,omitempty" search:"Expiry Type"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RequestExpiry) Reset()         { *m = RequestExpiry{} }
func (m *RequestExpiry) String() string { return proto.CompactTextString(m) }
func (*RequestExpiry) ProtoMessage()    {}
func (*RequestExpiry) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{1}
}
func (m *RequestExpiry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestExpiry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestExpiry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestExpiry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestExpiry.Merge(m, src)
}
func (m *RequestExpiry) XXX_Size() int {
	return m.Size()
}
func (m *RequestExpiry) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestExpiry.DiscardUnknown(m)
}

var xxx_messageInfo_RequestExpiry proto.InternalMessageInfo

type isRequestExpiry_Expiry interface {
	isRequestExpiry_Expiry()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isRequestExpiry_Expiry
}

type RequestExpiry_ExpiresWhenFixed struct {
	ExpiresWhenFixed bool `protobuf:"varint,1,opt,name=expires_when_fixed,json=expiresWhenFixed,proto3,oneof" json:"expires_when_fixed,omitempty" search:"Request Expires When Fixed"`
}
type RequestExpiry_ExpiresOn struct {
	ExpiresOn *types.Timestamp `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn,proto3,oneof" json:"expires_on,omitempty" search:"Request Expiry Time"`
}

func (*RequestExpiry_ExpiresWhenFixed) isRequestExpiry_Expiry() {}
func (m *RequestExpiry_ExpiresWhenFixed) Clone() isRequestExpiry_Expiry {
	if m == nil {
		return nil
	}
	cloned := new(RequestExpiry_ExpiresWhenFixed)
	*cloned = *m

	return cloned
}
func (*RequestExpiry_ExpiresOn) isRequestExpiry_Expiry() {}
func (m *RequestExpiry_ExpiresOn) Clone() isRequestExpiry_Expiry {
	if m == nil {
		return nil
	}
	cloned := new(RequestExpiry_ExpiresOn)
	*cloned = *m

	cloned.ExpiresOn = m.ExpiresOn.Clone()
	return cloned
}

func (m *RequestExpiry) GetExpiry() isRequestExpiry_Expiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *RequestExpiry) GetExpiresWhenFixed() bool {
	if x, ok := m.GetExpiry().(*RequestExpiry_ExpiresWhenFixed); ok {
		return x.ExpiresWhenFixed
	}
	return false
}

func (m *RequestExpiry) GetExpiresOn() *types.Timestamp {
	if x, ok := m.GetExpiry().(*RequestExpiry_ExpiresOn); ok {
		return x.ExpiresOn
	}
	return nil
}

func (m *RequestExpiry) GetExpiryType() RequestExpiry_ExpiryType {
	if m != nil {
		return m.ExpiryType
	}
	return RequestExpiry_TIME
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestExpiry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestExpiry_ExpiresWhenFixed)(nil),
		(*RequestExpiry_ExpiresOn)(nil),
	}
}

func (m *RequestExpiry) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RequestExpiry) Clone() *RequestExpiry {
	if m == nil {
		return nil
	}
	cloned := new(RequestExpiry)
	*cloned = *m

	if m.Expiry != nil {
		cloned.Expiry = m.Expiry.Clone()
	}
	return cloned
}

type DeferralRequest struct {
	Expiry               *RequestExpiry `protobuf:"bytes,1,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeferralRequest) Reset()         { *m = DeferralRequest{} }
func (m *DeferralRequest) String() string { return proto.CompactTextString(m) }
func (*DeferralRequest) ProtoMessage()    {}
func (*DeferralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{2}
}
func (m *DeferralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferralRequest.Merge(m, src)
}
func (m *DeferralRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeferralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeferralRequest proto.InternalMessageInfo

func (m *DeferralRequest) GetExpiry() *RequestExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferralRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferralRequest) Clone() *DeferralRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeferralRequest)
	*cloned = *m

	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type FalsePositiveRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FalsePositiveRequest) Reset()         { *m = FalsePositiveRequest{} }
func (m *FalsePositiveRequest) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveRequest) ProtoMessage()    {}
func (*FalsePositiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{3}
}
func (m *FalsePositiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveRequest.Merge(m, src)
}
func (m *FalsePositiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveRequest proto.InternalMessageInfo

func (m *FalsePositiveRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveRequest) Clone() *FalsePositiveRequest {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveRequest)
	*cloned = *m

	return cloned
}

type DeferralUpdate struct {
	CVEs                 []string       `protobuf:"bytes,1,rep,name=CVEs,proto3" json:"CVEs,omitempty"`
	Expiry               *RequestExpiry `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeferralUpdate) Reset()         { *m = DeferralUpdate{} }
func (m *DeferralUpdate) String() string { return proto.CompactTextString(m) }
func (*DeferralUpdate) ProtoMessage()    {}
func (*DeferralUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{4}
}
func (m *DeferralUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferralUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferralUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferralUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferralUpdate.Merge(m, src)
}
func (m *DeferralUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DeferralUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferralUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DeferralUpdate proto.InternalMessageInfo

func (m *DeferralUpdate) GetCVEs() []string {
	if m != nil {
		return m.CVEs
	}
	return nil
}

func (m *DeferralUpdate) GetExpiry() *RequestExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferralUpdate) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferralUpdate) Clone() *DeferralUpdate {
	if m == nil {
		return nil
	}
	cloned := new(DeferralUpdate)
	*cloned = *m

	if m.CVEs != nil {
		cloned.CVEs = make([]string, len(m.CVEs))
		copy(cloned.CVEs, m.CVEs)
	}
	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type FalsePositiveUpdate struct {
	CVEs                 []string `protobuf:"bytes,1,rep,name=CVEs,proto3" json:"CVEs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FalsePositiveUpdate) Reset()         { *m = FalsePositiveUpdate{} }
func (m *FalsePositiveUpdate) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveUpdate) ProtoMessage()    {}
func (*FalsePositiveUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{5}
}
func (m *FalsePositiveUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveUpdate.Merge(m, src)
}
func (m *FalsePositiveUpdate) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveUpdate proto.InternalMessageInfo

func (m *FalsePositiveUpdate) GetCVEs() []string {
	if m != nil {
		return m.CVEs
	}
	return nil
}

func (m *FalsePositiveUpdate) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveUpdate) Clone() *FalsePositiveUpdate {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveUpdate)
	*cloned = *m

	if m.CVEs != nil {
		cloned.CVEs = make([]string, len(m.CVEs))
		copy(cloned.CVEs, m.CVEs)
	}
	return cloned
}

type Requester struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Requester User ID"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Requester User Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Requester) Reset()         { *m = Requester{} }
func (m *Requester) String() string { return proto.CompactTextString(m) }
func (*Requester) ProtoMessage()    {}
func (*Requester) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{6}
}
func (m *Requester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Requester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Requester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Requester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requester.Merge(m, src)
}
func (m *Requester) XXX_Size() int {
	return m.Size()
}
func (m *Requester) XXX_DiscardUnknown() {
	xxx_messageInfo_Requester.DiscardUnknown(m)
}

var xxx_messageInfo_Requester proto.InternalMessageInfo

func (m *Requester) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Requester) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Requester) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Requester) Clone() *Requester {
	if m == nil {
		return nil
	}
	cloned := new(Requester)
	*cloned = *m

	return cloned
}

type Approver struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Approver User ID"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Approver User Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Approver) Reset()         { *m = Approver{} }
func (m *Approver) String() string { return proto.CompactTextString(m) }
func (*Approver) ProtoMessage()    {}
func (*Approver) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{7}
}
func (m *Approver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Approver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Approver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Approver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approver.Merge(m, src)
}
func (m *Approver) XXX_Size() int {
	return m.Size()
}
func (m *Approver) XXX_DiscardUnknown() {
	xxx_messageInfo_Approver.DiscardUnknown(m)
}

var xxx_messageInfo_Approver proto.InternalMessageInfo

func (m *Approver) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Approver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Approver) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Approver) Clone() *Approver {
	if m == nil {
		return nil
	}
	cloned := new(Approver)
	*cloned = *m

	return cloned
}

// Next available tag: 30
// VulnerabilityRequest encapsulates a request such as deferral request and false-positive request.
type VulnerabilityRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`
	Name string `protobuf:"bytes,26,opt,name=name,proto3" json:"name,omitempty" search:"Request Name" sql:"unique"`
	// Indicates the state the vulnerabilities will move to once the request is complete.
	TargetState VulnerabilityState `protobuf:"varint,2,opt,name=target_state,json=targetState,proto3,enum=storage.VulnerabilityState" json:"target_state,omitempty" search:"Requested Vulnerability State"`
	// Indicates the status of a request.
	Status RequestStatus `protobuf:"varint,3,opt,name=status,proto3,enum=storage.RequestStatus" json:"status,omitempty" search:"Request Status"`
	// Indicates if this request is a historical request that is no longer in effect
	// due to deferral expiry, cancellation, or restarting cve observation.
	Expired     bool                        `protobuf:"varint,4,opt,name=expired,proto3" json:"expired,omitempty" search:"Expired Request"`
	Requestor   *SlimUser                   `protobuf:"bytes,5,opt,name=requestor,proto3" json:"requestor,omitempty" sql:"ignore_labels(User ID)"` // Deprecated: Do not use.
	Approvers   []*SlimUser                 `protobuf:"bytes,6,rep,name=approvers,proto3" json:"approvers,omitempty" sql:"ignore_labels(User ID)"` // Deprecated: Do not use.
	CreatedAt   *types.Timestamp            `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" search:"Created Time"`
	LastUpdated *types.Timestamp            `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" search:"Last Updated"`
	Comments    []*RequestComment           `protobuf:"bytes,9,rep,name=comments,proto3" json:"comments,omitempty"`
	Scope       *VulnerabilityRequest_Scope `protobuf:"bytes,10,opt,name=scope,proto3" json:"scope,omitempty"`
	RequesterV2 *Requester                  `protobuf:"bytes,28,opt,name=requester_v2,json=requesterV2,proto3" json:"requester_v2,omitempty"`
	ApproversV2 []*Approver                 `protobuf:"bytes,29,rep,name=approvers_v2,json=approversV2,proto3" json:"approvers_v2,omitempty"`
	// 11 to 15 reserved for the request type oneof.
	//
	// Types that are valid to be assigned to Req:
	//	*VulnerabilityRequest_DeferralReq
	//	*VulnerabilityRequest_FpRequest
	Req isVulnerabilityRequest_Req `protobuf_oneof:"req"`
	// 16 to 20 reserved for entities oneof.
	//
	// Types that are valid to be assigned to Entities:
	//	*VulnerabilityRequest_Cves
	Entities isVulnerabilityRequest_Entities `protobuf_oneof:"entities"`
	// 21 to 25 reserved for the updated request type oneof.
	//
	// Types that are valid to be assigned to UpdatedReq:
	//	*VulnerabilityRequest_UpdatedDeferralReq
	//	*VulnerabilityRequest_DeferralUpdate
	//	*VulnerabilityRequest_FalsePositiveUpdate
	UpdatedReq           isVulnerabilityRequest_UpdatedReq `protobuf_oneof:"updated_req"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VulnerabilityRequest) Reset()         { *m = VulnerabilityRequest{} }
func (m *VulnerabilityRequest) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityRequest) ProtoMessage()    {}
func (*VulnerabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{8}
}
func (m *VulnerabilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityRequest.Merge(m, src)
}
func (m *VulnerabilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityRequest proto.InternalMessageInfo

type isVulnerabilityRequest_Req interface {
	isVulnerabilityRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityRequest_Req
}
type isVulnerabilityRequest_Entities interface {
	isVulnerabilityRequest_Entities()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityRequest_Entities
}
type isVulnerabilityRequest_UpdatedReq interface {
	isVulnerabilityRequest_UpdatedReq()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityRequest_UpdatedReq
}

type VulnerabilityRequest_DeferralReq struct {
	DeferralReq *DeferralRequest `protobuf:"bytes,11,opt,name=deferral_req,json=deferralReq,proto3,oneof" json:"deferral_req,omitempty"`
}
type VulnerabilityRequest_FpRequest struct {
	FpRequest *FalsePositiveRequest `protobuf:"bytes,12,opt,name=fp_request,json=fpRequest,proto3,oneof" json:"fp_request,omitempty"`
}
type VulnerabilityRequest_Cves struct {
	Cves *VulnerabilityRequest_CVEs `protobuf:"bytes,16,opt,name=cves,proto3,oneof" json:"cves,omitempty"`
}
type VulnerabilityRequest_UpdatedDeferralReq struct {
	UpdatedDeferralReq *DeferralRequest `protobuf:"bytes,21,opt,name=updated_deferral_req,json=updatedDeferralReq,proto3,oneof" json:"updated_deferral_req,omitempty" search:"-"`
}
type VulnerabilityRequest_DeferralUpdate struct {
	DeferralUpdate *DeferralUpdate `protobuf:"bytes,22,opt,name=deferral_update,json=deferralUpdate,proto3,oneof" json:"deferral_update,omitempty" search:"-"`
}
type VulnerabilityRequest_FalsePositiveUpdate struct {
	FalsePositiveUpdate *FalsePositiveUpdate `protobuf:"bytes,23,opt,name=false_positive_update,json=falsePositiveUpdate,proto3,oneof" json:"false_positive_update,omitempty"`
}

func (*VulnerabilityRequest_DeferralReq) isVulnerabilityRequest_Req() {}
func (m *VulnerabilityRequest_DeferralReq) Clone() isVulnerabilityRequest_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_DeferralReq)
	*cloned = *m

	cloned.DeferralReq = m.DeferralReq.Clone()
	return cloned
}
func (*VulnerabilityRequest_FpRequest) isVulnerabilityRequest_Req() {}
func (m *VulnerabilityRequest_FpRequest) Clone() isVulnerabilityRequest_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_FpRequest)
	*cloned = *m

	cloned.FpRequest = m.FpRequest.Clone()
	return cloned
}
func (*VulnerabilityRequest_Cves) isVulnerabilityRequest_Entities() {}
func (m *VulnerabilityRequest_Cves) Clone() isVulnerabilityRequest_Entities {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Cves)
	*cloned = *m

	cloned.Cves = m.Cves.Clone()
	return cloned
}
func (*VulnerabilityRequest_UpdatedDeferralReq) isVulnerabilityRequest_UpdatedReq() {}
func (m *VulnerabilityRequest_UpdatedDeferralReq) Clone() isVulnerabilityRequest_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_UpdatedDeferralReq)
	*cloned = *m

	cloned.UpdatedDeferralReq = m.UpdatedDeferralReq.Clone()
	return cloned
}
func (*VulnerabilityRequest_DeferralUpdate) isVulnerabilityRequest_UpdatedReq() {}
func (m *VulnerabilityRequest_DeferralUpdate) Clone() isVulnerabilityRequest_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_DeferralUpdate)
	*cloned = *m

	cloned.DeferralUpdate = m.DeferralUpdate.Clone()
	return cloned
}
func (*VulnerabilityRequest_FalsePositiveUpdate) isVulnerabilityRequest_UpdatedReq() {}
func (m *VulnerabilityRequest_FalsePositiveUpdate) Clone() isVulnerabilityRequest_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_FalsePositiveUpdate)
	*cloned = *m

	cloned.FalsePositiveUpdate = m.FalsePositiveUpdate.Clone()
	return cloned
}

func (m *VulnerabilityRequest) GetReq() isVulnerabilityRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}
func (m *VulnerabilityRequest) GetEntities() isVulnerabilityRequest_Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}
func (m *VulnerabilityRequest) GetUpdatedReq() isVulnerabilityRequest_UpdatedReq {
	if m != nil {
		return m.UpdatedReq
	}
	return nil
}

func (m *VulnerabilityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VulnerabilityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityRequest) GetTargetState() VulnerabilityState {
	if m != nil {
		return m.TargetState
	}
	return VulnerabilityState_OBSERVED
}

func (m *VulnerabilityRequest) GetStatus() RequestStatus {
	if m != nil {
		return m.Status
	}
	return RequestStatus_PENDING
}

func (m *VulnerabilityRequest) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

// Deprecated: Do not use.
func (m *VulnerabilityRequest) GetRequestor() *SlimUser {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// Deprecated: Do not use.
func (m *VulnerabilityRequest) GetApprovers() []*SlimUser {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *VulnerabilityRequest) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *VulnerabilityRequest) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *VulnerabilityRequest) GetComments() []*RequestComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *VulnerabilityRequest) GetScope() *VulnerabilityRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *VulnerabilityRequest) GetRequesterV2() *Requester {
	if m != nil {
		return m.RequesterV2
	}
	return nil
}

func (m *VulnerabilityRequest) GetApproversV2() []*Approver {
	if m != nil {
		return m.ApproversV2
	}
	return nil
}

func (m *VulnerabilityRequest) GetDeferralReq() *DeferralRequest {
	if x, ok := m.GetReq().(*VulnerabilityRequest_DeferralReq); ok {
		return x.DeferralReq
	}
	return nil
}

func (m *VulnerabilityRequest) GetFpRequest() *FalsePositiveRequest {
	if x, ok := m.GetReq().(*VulnerabilityRequest_FpRequest); ok {
		return x.FpRequest
	}
	return nil
}

func (m *VulnerabilityRequest) GetCves() *VulnerabilityRequest_CVEs {
	if x, ok := m.GetEntities().(*VulnerabilityRequest_Cves); ok {
		return x.Cves
	}
	return nil
}

// Deprecated: Do not use.
func (m *VulnerabilityRequest) GetUpdatedDeferralReq() *DeferralRequest {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityRequest_UpdatedDeferralReq); ok {
		return x.UpdatedDeferralReq
	}
	return nil
}

func (m *VulnerabilityRequest) GetDeferralUpdate() *DeferralUpdate {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityRequest_DeferralUpdate); ok {
		return x.DeferralUpdate
	}
	return nil
}

func (m *VulnerabilityRequest) GetFalsePositiveUpdate() *FalsePositiveUpdate {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityRequest_FalsePositiveUpdate); ok {
		return x.FalsePositiveUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VulnerabilityRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VulnerabilityRequest_DeferralReq)(nil),
		(*VulnerabilityRequest_FpRequest)(nil),
		(*VulnerabilityRequest_Cves)(nil),
		(*VulnerabilityRequest_UpdatedDeferralReq)(nil),
		(*VulnerabilityRequest_DeferralUpdate)(nil),
		(*VulnerabilityRequest_FalsePositiveUpdate)(nil),
	}
}

func (m *VulnerabilityRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityRequest) Clone() *VulnerabilityRequest {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest)
	*cloned = *m

	cloned.Requestor = m.Requestor.Clone()
	if m.Approvers != nil {
		cloned.Approvers = make([]*SlimUser, len(m.Approvers))
		for idx, v := range m.Approvers {
			cloned.Approvers[idx] = v.Clone()
		}
	}
	cloned.CreatedAt = m.CreatedAt.Clone()
	cloned.LastUpdated = m.LastUpdated.Clone()
	if m.Comments != nil {
		cloned.Comments = make([]*RequestComment, len(m.Comments))
		for idx, v := range m.Comments {
			cloned.Comments[idx] = v.Clone()
		}
	}
	cloned.Scope = m.Scope.Clone()
	cloned.RequesterV2 = m.RequesterV2.Clone()
	if m.ApproversV2 != nil {
		cloned.ApproversV2 = make([]*Approver, len(m.ApproversV2))
		for idx, v := range m.ApproversV2 {
			cloned.ApproversV2[idx] = v.Clone()
		}
	}
	if m.Req != nil {
		cloned.Req = m.Req.Clone()
	}
	if m.Entities != nil {
		cloned.Entities = m.Entities.Clone()
	}
	if m.UpdatedReq != nil {
		cloned.UpdatedReq = m.UpdatedReq.Clone()
	}
	return cloned
}

type VulnerabilityRequest_CVEs struct {
	// These are (NVD) vulnerability identifiers, `cve` field of `storage.CVE`, and *not* the `id` field.
	// For example, CVE-2021-44832.
	Cves                 []string `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty" search:"CVE"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityRequest_CVEs) Reset()         { *m = VulnerabilityRequest_CVEs{} }
func (m *VulnerabilityRequest_CVEs) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityRequest_CVEs) ProtoMessage()    {}
func (*VulnerabilityRequest_CVEs) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{8, 0}
}
func (m *VulnerabilityRequest_CVEs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityRequest_CVEs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityRequest_CVEs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityRequest_CVEs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityRequest_CVEs.Merge(m, src)
}
func (m *VulnerabilityRequest_CVEs) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityRequest_CVEs) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityRequest_CVEs.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityRequest_CVEs proto.InternalMessageInfo

func (m *VulnerabilityRequest_CVEs) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *VulnerabilityRequest_CVEs) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityRequest_CVEs) Clone() *VulnerabilityRequest_CVEs {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_CVEs)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	return cloned
}

type VulnerabilityRequest_Scope struct {
	// Types that are valid to be assigned to Info:
	//	*VulnerabilityRequest_Scope_ImageScope
	//	*VulnerabilityRequest_Scope_GlobalScope
	Info                 isVulnerabilityRequest_Scope_Info `protobuf_oneof:"info"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VulnerabilityRequest_Scope) Reset()         { *m = VulnerabilityRequest_Scope{} }
func (m *VulnerabilityRequest_Scope) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityRequest_Scope) ProtoMessage()    {}
func (*VulnerabilityRequest_Scope) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{8, 1}
}
func (m *VulnerabilityRequest_Scope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityRequest_Scope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityRequest_Scope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityRequest_Scope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityRequest_Scope.Merge(m, src)
}
func (m *VulnerabilityRequest_Scope) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityRequest_Scope) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityRequest_Scope.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityRequest_Scope proto.InternalMessageInfo

type isVulnerabilityRequest_Scope_Info interface {
	isVulnerabilityRequest_Scope_Info()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityRequest_Scope_Info
}

type VulnerabilityRequest_Scope_ImageScope struct {
	ImageScope *VulnerabilityRequest_Scope_Image `protobuf:"bytes,1,opt,name=image_scope,json=imageScope,proto3,oneof" json:"image_scope,omitempty"`
}
type VulnerabilityRequest_Scope_GlobalScope struct {
	GlobalScope *VulnerabilityRequest_Scope_Global `protobuf:"bytes,2,opt,name=global_scope,json=globalScope,proto3,oneof" json:"global_scope,omitempty"`
}

func (*VulnerabilityRequest_Scope_ImageScope) isVulnerabilityRequest_Scope_Info() {}
func (m *VulnerabilityRequest_Scope_ImageScope) Clone() isVulnerabilityRequest_Scope_Info {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Scope_ImageScope)
	*cloned = *m

	cloned.ImageScope = m.ImageScope.Clone()
	return cloned
}
func (*VulnerabilityRequest_Scope_GlobalScope) isVulnerabilityRequest_Scope_Info() {}
func (m *VulnerabilityRequest_Scope_GlobalScope) Clone() isVulnerabilityRequest_Scope_Info {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Scope_GlobalScope)
	*cloned = *m

	cloned.GlobalScope = m.GlobalScope.Clone()
	return cloned
}

func (m *VulnerabilityRequest_Scope) GetInfo() isVulnerabilityRequest_Scope_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *VulnerabilityRequest_Scope) GetImageScope() *VulnerabilityRequest_Scope_Image {
	if x, ok := m.GetInfo().(*VulnerabilityRequest_Scope_ImageScope); ok {
		return x.ImageScope
	}
	return nil
}

// Deprecated: Do not use.
func (m *VulnerabilityRequest_Scope) GetGlobalScope() *VulnerabilityRequest_Scope_Global {
	if x, ok := m.GetInfo().(*VulnerabilityRequest_Scope_GlobalScope); ok {
		return x.GlobalScope
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VulnerabilityRequest_Scope) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VulnerabilityRequest_Scope_ImageScope)(nil),
		(*VulnerabilityRequest_Scope_GlobalScope)(nil),
	}
}

func (m *VulnerabilityRequest_Scope) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityRequest_Scope) Clone() *VulnerabilityRequest_Scope {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Scope)
	*cloned = *m

	if m.Info != nil {
		cloned.Info = m.Info.Clone()
	}
	return cloned
}

type VulnerabilityRequest_Scope_Image struct {
	Registry             string   `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty" search:"Image Registry Scope"`
	Remote               string   `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty" search:"Image Remote Scope"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty" search:"Image Tag Scope"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityRequest_Scope_Image) Reset()         { *m = VulnerabilityRequest_Scope_Image{} }
func (m *VulnerabilityRequest_Scope_Image) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityRequest_Scope_Image) ProtoMessage()    {}
func (*VulnerabilityRequest_Scope_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{8, 1, 0}
}
func (m *VulnerabilityRequest_Scope_Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityRequest_Scope_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityRequest_Scope_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityRequest_Scope_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityRequest_Scope_Image.Merge(m, src)
}
func (m *VulnerabilityRequest_Scope_Image) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityRequest_Scope_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityRequest_Scope_Image.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityRequest_Scope_Image proto.InternalMessageInfo

func (m *VulnerabilityRequest_Scope_Image) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *VulnerabilityRequest_Scope_Image) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *VulnerabilityRequest_Scope_Image) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *VulnerabilityRequest_Scope_Image) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityRequest_Scope_Image) Clone() *VulnerabilityRequest_Scope_Image {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Scope_Image)
	*cloned = *m

	return cloned
}

type VulnerabilityRequest_Scope_Global struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityRequest_Scope_Global) Reset()         { *m = VulnerabilityRequest_Scope_Global{} }
func (m *VulnerabilityRequest_Scope_Global) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityRequest_Scope_Global) ProtoMessage()    {}
func (*VulnerabilityRequest_Scope_Global) Descriptor() ([]byte, []int) {
	return fileDescriptor_878c2c8004fa26b3, []int{8, 1, 1}
}
func (m *VulnerabilityRequest_Scope_Global) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityRequest_Scope_Global) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityRequest_Scope_Global.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityRequest_Scope_Global) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityRequest_Scope_Global.Merge(m, src)
}
func (m *VulnerabilityRequest_Scope_Global) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityRequest_Scope_Global) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityRequest_Scope_Global.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityRequest_Scope_Global proto.InternalMessageInfo

func (m *VulnerabilityRequest_Scope_Global) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityRequest_Scope_Global) Clone() *VulnerabilityRequest_Scope_Global {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityRequest_Scope_Global)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.RequestStatus", RequestStatus_name, RequestStatus_value)
	proto.RegisterEnum("storage.RequestExpiry_ExpiryType", RequestExpiry_ExpiryType_name, RequestExpiry_ExpiryType_value)
	proto.RegisterType((*RequestComment)(nil), "storage.RequestComment")
	proto.RegisterType((*RequestExpiry)(nil), "storage.RequestExpiry")
	proto.RegisterType((*DeferralRequest)(nil), "storage.DeferralRequest")
	proto.RegisterType((*FalsePositiveRequest)(nil), "storage.FalsePositiveRequest")
	proto.RegisterType((*DeferralUpdate)(nil), "storage.DeferralUpdate")
	proto.RegisterType((*FalsePositiveUpdate)(nil), "storage.FalsePositiveUpdate")
	proto.RegisterType((*Requester)(nil), "storage.Requester")
	proto.RegisterType((*Approver)(nil), "storage.Approver")
	proto.RegisterType((*VulnerabilityRequest)(nil), "storage.VulnerabilityRequest")
	proto.RegisterType((*VulnerabilityRequest_CVEs)(nil), "storage.VulnerabilityRequest.CVEs")
	proto.RegisterType((*VulnerabilityRequest_Scope)(nil), "storage.VulnerabilityRequest.Scope")
	proto.RegisterType((*VulnerabilityRequest_Scope_Image)(nil), "storage.VulnerabilityRequest.Scope.Image")
	proto.RegisterType((*VulnerabilityRequest_Scope_Global)(nil), "storage.VulnerabilityRequest.Scope.Global")
}

func init() { proto.RegisterFile("storage/vuln_requests.proto", fileDescriptor_878c2c8004fa26b3) }

var fileDescriptor_878c2c8004fa26b3 = []byte{
	// 1344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x65, 0x59, 0x96, 0x46, 0x8a, 0xa2, 0x6c, 0x9c, 0x98, 0x91, 0x0f, 0x64, 0x98, 0x1f,
	0xf9, 0x9d, 0xa0, 0x91, 0x01, 0x25, 0x3d, 0x24, 0x40, 0x8a, 0x8a, 0x96, 0x12, 0x19, 0x75, 0x1d,
	0x63, 0xa5, 0x28, 0x69, 0xd1, 0x96, 0xa0, 0xa5, 0x95, 0xc2, 0x46, 0x12, 0x69, 0x2e, 0xe5, 0x46,
	0x6f, 0x52, 0xf4, 0x25, 0xfa, 0x06, 0xbd, 0xee, 0x65, 0x9f, 0x80, 0x28, 0xd2, 0xfb, 0x02, 0xe5,
	0x13, 0x14, 0xdc, 0x83, 0x6c, 0x2a, 0xca, 0xa1, 0xe8, 0x15, 0xc9, 0xd9, 0xef, 0xfb, 0x66, 0x67,
	0x76, 0x67, 0x86, 0xb0, 0x41, 0x03, 0xd7, 0xb7, 0x07, 0x64, 0xf7, 0x74, 0x32, 0x1c, 0x5b, 0x3e,
	0x39, 0x99, 0x10, 0x1a, 0xd0, 0x8a, 0xe7, 0xbb, 0x81, 0x8b, 0x56, 0xc5, 0x62, 0x59, 0x1b, 0xb8,
	0xee, 0x60, 0x48, 0x76, 0x99, 0xf9, 0x78, 0xd2, 0xdf, 0x0d, 0x9c, 0x11, 0xa1, 0x81, 0x3d, 0xf2,
	0x38, 0xb2, 0xbc, 0x36, 0x70, 0x07, 0x2e, 0x7b, 0xdd, 0x8d, 0xdf, 0x84, 0xf5, 0x92, 0x14, 0xef,
	0x9e, 0x12, 0x61, 0x42, 0xd2, 0x34, 0xa1, 0xc4, 0xe7, 0x36, 0xe3, 0x57, 0x05, 0x8a, 0x98, 0x7b,
	0xde, 0x73, 0x47, 0x23, 0x32, 0x0e, 0x50, 0x11, 0x52, 0x4e, 0x4f, 0x55, 0x74, 0x65, 0x27, 0x87,
	0x53, 0x4e, 0x0f, 0xa9, 0xb0, 0x3a, 0x22, 0x94, 0xda, 0x03, 0xa2, 0xa6, 0x98, 0x51, 0x7e, 0xa2,
	0xc7, 0x90, 0x8e, 0xa5, 0xd4, 0x65, 0x5d, 0xd9, 0xc9, 0x57, 0x2f, 0x55, 0x84, 0x7e, 0xa5, 0x35,
	0x74, 0x46, 0x4f, 0x29, 0xf1, 0x4d, 0x3d, 0x0a, 0xb5, 0x4d, 0x7a, 0x32, 0x7c, 0x60, 0x38, 0x83,
	0xb1, 0xeb, 0x13, 0x6b, 0x68, 0x1f, 0x93, 0x21, 0xdd, 0x89, 0x17, 0xf5, 0xfd, 0xfa, 0x2d, 0x03,
	0x33, 0x01, 0x74, 0x1f, 0xa0, 0xeb, 0x13, 0x3b, 0x20, 0x3d, 0xcb, 0x0e, 0xd4, 0x34, 0x93, 0x2b,
	0x57, 0x78, 0xe0, 0x15, 0x19, 0x78, 0xa5, 0x2d, 0x03, 0xc7, 0x39, 0x81, 0xae, 0x05, 0xc6, 0xdf,
	0x29, 0xb8, 0x20, 0x02, 0x68, 0xbc, 0xf2, 0x1c, 0x7f, 0x8a, 0x9e, 0x01, 0x22, 0xf1, 0x1b, 0xa1,
	0xd6, 0x8f, 0x2f, 0xc8, 0xd8, 0xea, 0x3b, 0xaf, 0x08, 0x8f, 0x27, 0x6b, 0xfe, 0x3f, 0x0a, 0xb5,
	0x1b, 0x94, 0xd8, 0x7e, 0xf7, 0xc5, 0x03, 0x43, 0xd0, 0xf4, 0x06, 0x47, 0xeb, 0xcf, 0x5e, 0x90,
	0xb1, 0xfe, 0x28, 0x46, 0x1b, 0xcd, 0x25, 0x5c, 0x12, 0x22, 0xb1, 0x95, 0x19, 0xd1, 0x77, 0x00,
	0x52, 0xd8, 0x1d, 0xb3, 0x5c, 0xbc, 0x73, 0x97, 0x22, 0xfa, 0x45, 0xce, 0xa6, 0x7a, 0x8c, 0x8a,
	0xbd, 0xe4, 0x84, 0xe2, 0x93, 0x31, 0xfa, 0x16, 0xf2, 0xec, 0x63, 0x6a, 0x05, 0x53, 0x8f, 0xb0,
	0xa4, 0x16, 0xab, 0xd7, 0x67, 0x49, 0x4d, 0x04, 0x59, 0xe1, 0x8f, 0xf6, 0xd4, 0x23, 0xa6, 0x1a,
	0x85, 0xda, 0x9a, 0x74, 0x23, 0xe5, 0xa7, 0x1e, 0x31, 0x30, 0xdf, 0x2e, 0x43, 0x19, 0x5f, 0x00,
	0x9c, 0x71, 0x50, 0x16, 0xd2, 0xed, 0xfd, 0xaf, 0x1a, 0xa5, 0x25, 0x74, 0x19, 0x2e, 0xd6, 0x0e,
	0x0e, 0xac, 0xbd, 0x4e, 0xc3, 0x7a, 0xb4, 0xff, 0xbc, 0x66, 0x1e, 0x34, 0x4a, 0x0a, 0x33, 0x1e,
	0x7e, 0x9d, 0x30, 0xa6, 0xcc, 0x2c, 0x64, 0xb8, 0x9e, 0x51, 0x83, 0x8b, 0x75, 0xd2, 0x27, 0xbe,
	0x6f, 0x0f, 0xc5, 0xae, 0x50, 0x45, 0x2e, 0xb2, 0x44, 0xe7, 0xab, 0x57, 0x17, 0xef, 0x1b, 0x4b,
	0x89, 0xab, 0xb0, 0xf6, 0xc8, 0x1e, 0x52, 0x72, 0xe4, 0x52, 0x27, 0x70, 0x4e, 0x89, 0x40, 0x19,
	0x6d, 0x28, 0x4a, 0xe9, 0xa7, 0x5e, 0xcf, 0x0e, 0x08, 0x42, 0x90, 0xde, 0xeb, 0x34, 0xa8, 0xaa,
	0xe8, 0xcb, 0x3b, 0x39, 0xcc, 0xde, 0xcf, 0x79, 0x4b, 0x7d, 0x90, 0xb7, 0x5b, 0x70, 0x39, 0xe1,
	0xed, 0xed, 0xd2, 0xc6, 0x09, 0xe4, 0x84, 0x06, 0xf1, 0x51, 0xe5, 0xac, 0x14, 0xcc, 0xed, 0x28,
	0xd4, 0xca, 0x73, 0xa7, 0x49, 0x7c, 0x5d, 0x5c, 0x65, 0x83, 0x95, 0xca, 0x3d, 0x48, 0x8f, 0xed,
	0x91, 0xa8, 0x93, 0x85, 0xe7, 0x2f, 0x19, 0x87, 0xf6, 0x88, 0x18, 0x98, 0xa1, 0x8d, 0x31, 0x64,
	0x6b, 0x9e, 0xe7, 0xbb, 0xa7, 0xc4, 0x47, 0x77, 0xce, 0x79, 0xdc, 0x8a, 0x42, 0xed, 0x9a, 0xe4,
	0x4b, 0x44, 0xd2, 0xe1, 0xdd, 0x84, 0x43, 0x2d, 0x0a, 0xb5, 0x8d, 0xc5, 0x84, 0xf3, 0xfe, 0x7e,
	0x2e, 0xc2, 0x5a, 0x67, 0x32, 0x1c, 0x13, 0xdf, 0x3e, 0x76, 0x86, 0x4e, 0x30, 0x95, 0x87, 0xb8,
	0x79, 0xce, 0x79, 0x21, 0x0a, 0xb5, 0x2c, 0x2b, 0x5d, 0xef, 0x25, 0xf7, 0xf5, 0x40, 0xf8, 0x2a,
	0xb3, 0xf5, 0x9b, 0x51, 0xa8, 0x19, 0xf3, 0x97, 0x9b, 0x79, 0xd1, 0x19, 0x6b, 0x32, 0x76, 0x4e,
	0x26, 0xd2, 0x25, 0xfa, 0x01, 0x0a, 0x81, 0xed, 0x0f, 0x48, 0x60, 0xd1, 0xc0, 0x0e, 0xf8, 0x7e,
	0x8b, 0xd5, 0x8d, 0xd9, 0xb1, 0x25, 0xb6, 0xd3, 0x8a, 0x21, 0xe6, 0xed, 0x28, 0xd4, 0x6e, 0xce,
	0x67, 0xaf, 0xa7, 0x27, 0x90, 0x3a, 0x83, 0x1a, 0x38, 0xcf, 0xc5, 0xd9, 0x17, 0xfa, 0x12, 0x32,
	0xb1, 0x93, 0x09, 0x15, 0x25, 0xf4, 0xc6, 0xe5, 0x68, 0xb1, 0x55, 0x73, 0x23, 0x0a, 0xb5, 0xf5,
	0xf9, 0x08, 0xf8, 0x9a, 0x81, 0x85, 0x04, 0xfa, 0x04, 0x56, 0x79, 0x85, 0xf6, 0x58, 0x5b, 0xca,
	0x9a, 0x9b, 0x51, 0xa8, 0xa9, 0x89, 0x6a, 0x23, 0x3d, 0x5d, 0xde, 0x5e, 0x2c, 0xc1, 0xa8, 0x05,
	0x39, 0xd1, 0xd0, 0x5d, 0x5f, 0x5d, 0x79, 0x5b, 0x7f, 0x34, 0xde, 0xd7, 0x1f, 0x55, 0x05, 0x9f,
	0xe9, 0xc4, 0xa2, 0xb6, 0x38, 0x55, 0xaa, 0x66, 0xf4, 0xe5, 0xff, 0x20, 0x3a, 0xd3, 0x41, 0xed,
	0x44, 0xef, 0x5d, 0x7d, 0x6f, 0x57, 0xbb, 0x16, 0x85, 0xda, 0x15, 0x99, 0x80, 0x3d, 0xce, 0xe4,
	0xed, 0xec, 0x5c, 0x5b, 0x46, 0xcf, 0xa1, 0x30, 0xb4, 0x69, 0x60, 0x4d, 0x58, 0xa5, 0xf5, 0xd4,
	0xec, 0xbf, 0xd3, 0x3d, 0xb0, 0x69, 0xa0, 0xf3, 0x2a, 0xed, 0x19, 0x38, 0x1f, 0x4b, 0x89, 0x2f,
	0x74, 0x17, 0xb2, 0x5d, 0x3e, 0xa9, 0xa8, 0x9a, 0x63, 0x39, 0x58, 0x9f, 0x3f, 0x60, 0x31, 0xc9,
	0xf0, 0x0c, 0x88, 0xee, 0xc3, 0x0a, 0xed, 0xba, 0x1e, 0x51, 0x81, 0xed, 0xe3, 0xc6, 0xe2, 0x8b,
	0x27, 0xe8, 0x95, 0x56, 0x0c, 0xc5, 0x9c, 0x81, 0x3e, 0x86, 0x82, 0x2f, 0x6b, 0xd7, 0x3a, 0xad,
	0xaa, 0x9b, 0x4c, 0x01, 0xcd, 0xfb, 0x24, 0x3e, 0xce, 0xcf, 0x70, 0x9d, 0x2a, 0xba, 0x07, 0x85,
	0x59, 0x8e, 0x63, 0xda, 0xd6, 0xdc, 0x71, 0xc9, 0xf2, 0xc4, 0xf9, 0x19, 0xac, 0x53, 0x45, 0x0f,
	0xa1, 0xd0, 0x13, 0xed, 0x2f, 0xfe, 0x21, 0x50, 0xf3, 0xcc, 0x99, 0x3a, 0x63, 0xcd, 0xb5, 0xdd,
	0xe6, 0x12, 0xce, 0xf7, 0xce, 0x4c, 0xe8, 0x73, 0x80, 0xbe, 0x27, 0xff, 0x24, 0xd4, 0x02, 0x23,
	0x6f, 0xcd, 0xc8, 0x8b, 0x1a, 0x6e, 0x3c, 0x82, 0xfa, 0x9e, 0x6c, 0x00, 0x9f, 0x41, 0xba, 0x7b,
	0x4a, 0xa8, 0x5a, 0x62, 0x4c, 0xe3, 0xdd, 0x59, 0x8a, 0xdb, 0x65, 0x53, 0xc1, 0x8c, 0x81, 0xbe,
	0x87, 0x35, 0x71, 0xd4, 0x56, 0x22, 0x80, 0x2b, 0xef, 0x0e, 0xc0, 0x2c, 0x45, 0xa1, 0x06, 0xf2,
	0xd4, 0xef, 0x18, 0xaa, 0xd2, 0x4c, 0x61, 0x24, 0x94, 0xce, 0x61, 0x11, 0x86, 0x8b, 0x33, 0x5d,
	0xbe, 0xac, 0x5e, 0x65, 0xd2, 0xeb, 0x6f, 0x48, 0xf3, 0x8b, 0x62, 0x16, 0x93, 0xca, 0xcd, 0x14,
	0x2e, 0xf6, 0x92, 0x93, 0x05, 0xc3, 0x95, 0x7e, 0x9c, 0x12, 0xcb, 0x13, 0x39, 0x91, 0xca, 0xeb,
	0x4c, 0x79, 0x73, 0x71, 0xe2, 0x38, 0xb9, 0x99, 0xc2, 0x97, 0xfb, 0x6f, 0x9a, 0xcb, 0x1f, 0xf1,
	0x91, 0x82, 0xfe, 0x27, 0x32, 0xc9, 0x46, 0x0b, 0x8b, 0xb2, 0x30, 0xab, 0x99, 0x4e, 0xc3, 0xe0,
	0x59, 0x2b, 0xff, 0x95, 0x82, 0x15, 0x76, 0xd9, 0xd0, 0x01, 0xe4, 0x9d, 0x91, 0x3d, 0x20, 0x16,
	0xbf, 0xa6, 0x7c, 0x88, 0xde, 0xfa, 0x80, 0x6b, 0x5a, 0xd9, 0x8f, 0x69, 0xcd, 0x25, 0x0c, 0x8c,
	0xcf, 0xd5, 0x5a, 0x50, 0x18, 0x0c, 0xdd, 0x63, 0x7b, 0x28, 0xe4, 0xf8, 0x94, 0xbc, 0xfd, 0x21,
	0x72, 0x8f, 0x19, 0xcf, 0x4c, 0xa9, 0x4a, 0x7c, 0xb9, 0xb8, 0x0a, 0x5b, 0x29, 0xff, 0xa2, 0xc0,
	0x0a, 0x73, 0x86, 0x1e, 0x42, 0xd6, 0x27, 0x03, 0x87, 0x06, 0x62, 0xdc, 0xe7, 0xcc, 0xeb, 0x51,
	0xa8, 0x6d, 0xc9, 0x00, 0x19, 0x48, 0xc7, 0x02, 0xa1, 0x33, 0xb6, 0x81, 0x67, 0x14, 0xf4, 0x29,
	0x64, 0x7c, 0x32, 0x72, 0x83, 0x85, 0x63, 0x4b, 0x92, 0xe3, 0x75, 0x49, 0x15, 0x70, 0x54, 0x81,
	0xe5, 0xc0, 0x1e, 0xb0, 0xb6, 0x9e, 0x4b, 0x36, 0x62, 0xce, 0x6a, 0xdb, 0x03, 0x49, 0x89, 0x81,
	0xe5, 0x2c, 0x64, 0x44, 0x38, 0x19, 0x48, 0x3b, 0xe3, 0xbe, 0x6b, 0xae, 0xc0, 0xb2, 0x4f, 0x4e,
	0x4c, 0x80, 0x2c, 0x19, 0x07, 0x4e, 0xe0, 0x10, 0x6a, 0x5e, 0x80, 0xbc, 0xbc, 0xb9, 0x3e, 0x39,
	0xb9, 0xdd, 0x9a, 0xfd, 0x4e, 0xf2, 0x51, 0x80, 0xf2, 0xb0, 0x7a, 0xd4, 0x38, 0xac, 0xef, 0x1f,
	0x3e, 0x2e, 0x2d, 0xa1, 0x02, 0x64, 0x6b, 0x47, 0x47, 0xf8, 0x49, 0xa7, 0x51, 0x2f, 0x29, 0x08,
	0x20, 0x53, 0x6f, 0x1c, 0xee, 0x37, 0xea, 0xa5, 0x14, 0xda, 0x80, 0x75, 0xb9, 0x62, 0x09, 0xbc,
	0xf5, 0xf4, 0xa8, 0x5e, 0x6b, 0x37, 0x4a, 0xcb, 0xe6, 0xbd, 0xdf, 0x5e, 0x6f, 0x2b, 0xbf, 0xbf,
	0xde, 0x56, 0xfe, 0x78, 0xbd, 0xad, 0xfc, 0xf4, 0xe7, 0xf6, 0x12, 0x5c, 0x73, 0xdc, 0x0a, 0x0d,
	0xec, 0xee, 0x4b, 0xdf, 0x7d, 0xc5, 0xbb, 0xa1, 0x3c, 0x9c, 0x6f, 0xe4, 0x9f, 0xff, 0x71, 0x86,
	0xd9, 0xef, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x9c, 0x8f, 0x40, 0x28, 0x0c, 0x00, 0x00,
}

func (m *RequestComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestExpiry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestExpiry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestExpiry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiryType != 0 {
		i = encodeVarintVulnRequests(dAtA, i, uint64(m.ExpiryType))
		i--
		dAtA[i] = 0x18
	}
	if m.Expiry != nil {
		{
			size := m.Expiry.Size()
			i -= size
			if _, err := m.Expiry.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestExpiry_ExpiresWhenFixed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestExpiry_ExpiresWhenFixed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ExpiresWhenFixed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *RequestExpiry_ExpiresOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestExpiry_ExpiresOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpiresOn != nil {
		{
			size, err := m.ExpiresOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DeferralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeferralUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferralUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferralUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CVEs) > 0 {
		for iNdEx := len(m.CVEs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CVEs[iNdEx])
			copy(dAtA[i:], m.CVEs[iNdEx])
			i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.CVEs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CVEs) > 0 {
		for iNdEx := len(m.CVEs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CVEs[iNdEx])
			copy(dAtA[i:], m.CVEs[iNdEx])
			i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.CVEs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Requester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Requester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Requester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Approver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Approver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Approver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApproversV2) > 0 {
		for iNdEx := len(m.ApproversV2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApproversV2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnRequests(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if m.RequesterV2 != nil {
		{
			size, err := m.RequesterV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.UpdatedReq != nil {
		{
			size := m.UpdatedReq.Size()
			i -= size
			if _, err := m.UpdatedReq.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Entities != nil {
		{
			size := m.Entities.Size()
			i -= size
			if _, err := m.Entities.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnRequests(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Approvers) > 0 {
		for iNdEx := len(m.Approvers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnRequests(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Requestor != nil {
		{
			size, err := m.Requestor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintVulnRequests(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetState != 0 {
		i = encodeVarintVulnRequests(dAtA, i, uint64(m.TargetState))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityRequest_DeferralReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_DeferralReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralReq != nil {
		{
			size, err := m.DeferralReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_FpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_FpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FpRequest != nil {
		{
			size, err := m.FpRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_Cves) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Cves) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cves != nil {
		{
			size, err := m.Cves.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_UpdatedDeferralReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_UpdatedDeferralReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatedDeferralReq != nil {
		{
			size, err := m.UpdatedDeferralReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_DeferralUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_DeferralUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralUpdate != nil {
		{
			size, err := m.DeferralUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_FalsePositiveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_FalsePositiveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FalsePositiveUpdate != nil {
		{
			size, err := m.FalsePositiveUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_CVEs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityRequest_CVEs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_CVEs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityRequest_Scope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityRequest_Scope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Scope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityRequest_Scope_ImageScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Scope_ImageScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImageScope != nil {
		{
			size, err := m.ImageScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_Scope_GlobalScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Scope_GlobalScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalScope != nil {
		{
			size, err := m.GlobalScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityRequest_Scope_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityRequest_Scope_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Scope_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Remote) > 0 {
		i -= len(m.Remote)
		copy(dAtA[i:], m.Remote)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Remote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registry) > 0 {
		i -= len(m.Registry)
		copy(dAtA[i:], m.Registry)
		i = encodeVarintVulnRequests(dAtA, i, uint64(len(m.Registry)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityRequest_Scope_Global) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityRequest_Scope_Global) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityRequest_Scope_Global) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintVulnRequests(dAtA []byte, offset int, v uint64) int {
	offset -= sovVulnRequests(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestExpiry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiry != nil {
		n += m.Expiry.Size()
	}
	if m.ExpiryType != 0 {
		n += 1 + sovVulnRequests(uint64(m.ExpiryType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestExpiry_ExpiresWhenFixed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *RequestExpiry_ExpiresOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiresOn != nil {
		l = m.ExpiresOn.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *DeferralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferralUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CVEs) > 0 {
		for _, s := range m.CVEs {
			l = len(s)
			n += 1 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CVEs) > 0 {
		for _, s := range m.CVEs {
			l = len(s)
			n += 1 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Requester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Approver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.TargetState != 0 {
		n += 1 + sovVulnRequests(uint64(m.TargetState))
	}
	if m.Status != 0 {
		n += 1 + sovVulnRequests(uint64(m.Status))
	}
	if m.Expired {
		n += 2
	}
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if len(m.Approvers) > 0 {
		for _, e := range m.Approvers {
			l = e.Size()
			n += 1 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.Entities != nil {
		n += m.Entities.Size()
	}
	if m.UpdatedReq != nil {
		n += m.UpdatedReq.Size()
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	if m.RequesterV2 != nil {
		l = m.RequesterV2.Size()
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	if len(m.ApproversV2) > 0 {
		for _, e := range m.ApproversV2 {
			l = e.Size()
			n += 2 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityRequest_DeferralReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralReq != nil {
		l = m.DeferralReq.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_FpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FpRequest != nil {
		l = m.FpRequest.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_Cves) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cves != nil {
		l = m.Cves.Size()
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_UpdatedDeferralReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedDeferralReq != nil {
		l = m.UpdatedDeferralReq.Size()
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_DeferralUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralUpdate != nil {
		l = m.DeferralUpdate.Size()
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_FalsePositiveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveUpdate != nil {
		l = m.FalsePositiveUpdate.Size()
		n += 2 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_CVEs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnRequests(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityRequest_Scope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityRequest_Scope_ImageScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageScope != nil {
		l = m.ImageScope.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_Scope_GlobalScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalScope != nil {
		l = m.GlobalScope.Size()
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	return n
}
func (m *VulnerabilityRequest_Scope_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	l = len(m.Remote)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovVulnRequests(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityRequest_Scope_Global) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVulnRequests(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVulnRequests(x uint64) (n int) {
	return sovVulnRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SlimUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestExpiry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestExpiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestExpiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresWhenFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Expiry = &RequestExpiry_ExpiresWhenFixed{b}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiry = &RequestExpiry_ExpiresOn{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryType", wireType)
			}
			m.ExpiryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryType |= RequestExpiry_ExpiryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &RequestExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferralUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferralUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferralUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CVEs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CVEs = append(m.CVEs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &RequestExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CVEs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CVEs = append(m.CVEs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Requester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Requester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Requester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Approver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Approver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Approver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetState", wireType)
			}
			m.TargetState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetState |= VulnerabilityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &SlimUser{}
			}
			if err := m.Requestor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvers = append(m.Approvers, &SlimUser{})
			if err := m.Approvers[len(m.Approvers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &RequestComment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityRequest_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityRequest_DeferralReq{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityRequest_FpRequest{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityRequest_CVEs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entities = &VulnerabilityRequest_Cves{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDeferralReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityRequest_UpdatedDeferralReq{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityRequest_DeferralUpdate{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityRequest_FalsePositiveUpdate{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequesterV2 == nil {
				m.RequesterV2 = &Requester{}
			}
			if err := m.RequesterV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproversV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproversV2 = append(m.ApproversV2, &Approver{})
			if err := m.ApproversV2[len(m.ApproversV2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityRequest_CVEs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVEs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVEs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityRequest_Scope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityRequest_Scope_Image{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &VulnerabilityRequest_Scope_ImageScope{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityRequest_Scope_Global{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &VulnerabilityRequest_Scope_GlobalScope{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityRequest_Scope_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityRequest_Scope_Global) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Global: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Global: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVulnRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVulnRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVulnRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVulnRequests
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVulnRequests
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVulnRequests
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVulnRequests        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVulnRequests          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVulnRequests = fmt.Errorf("proto: unexpected end of group")
)
