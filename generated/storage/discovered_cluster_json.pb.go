// Code generated by protoc-gen-go-json. DO NOT EDIT.

package storage

import (
	fmt "fmt"
	strings "strings"
	unsafe "unsafe"
)

func (m *DiscoveredCluster) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}

func (m *DiscoveredCluster) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteByte('{')
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("id")
		buf.WriteByte('"')
		buf.WriteByte(':')
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetMetadata(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("metadata")
		buf.WriteByte('"')
		buf.WriteByte(':')
		if err := x.marshalJSON(buf); err != nil {
			return err
		}
	}
	if x := m.GetStatus(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("status")
		buf.WriteByte('"')
		buf.WriteByte(':')
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetSourceId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("sourceId")
		buf.WriteByte('"')
		buf.WriteByte(':')
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetLastUpdatedAt(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("lastUpdatedAt")
		buf.WriteByte('"')
		buf.WriteByte(':')
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	buf.WriteString("}")
	return nil
}

func (m *DiscoveredCluster_Metadata) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}

func (m *DiscoveredCluster_Metadata) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteByte('{')
	if x := m.GetId(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("id")
		buf.WriteByte('"')
		buf.WriteByte(':')
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetName(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("name")
		buf.WriteByte('"')
		buf.WriteByte(':')
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetType(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("type")
		buf.WriteByte('"')
		buf.WriteByte(':')
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetProviderType(); x != 0 {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("providerType")
		buf.WriteByte('"')
		buf.WriteByte(':')
		buf.WriteString("\"" + x.String() + "\"")
	}
	if x := m.GetRegion(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("region")
		buf.WriteByte('"')
		buf.WriteByte(':')
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetFirstDiscoveredAt(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteByte('"')
		buf.WriteString("firstDiscoveredAt")
		buf.WriteByte('"')
		buf.WriteByte(':')
		if t := x; t == nil {
			buf.WriteString("null")
		} else {
			tf := t.AsTime().UTC().Format("2006-01-02T15:04:05.000000000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, "000")
			tf = strings.TrimSuffix(tf, ".000")
			buf.WriteString("\"" + tf + "Z" + "\"")
		}
	}
	buf.WriteString("}")
	return nil
}
