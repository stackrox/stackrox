// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/secret.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecretType int32

const (
	SecretType_UNDETERMINED             SecretType = 0
	SecretType_PUBLIC_CERTIFICATE       SecretType = 1
	SecretType_CERTIFICATE_REQUEST      SecretType = 2
	SecretType_PRIVACY_ENHANCED_MESSAGE SecretType = 3
	SecretType_OPENSSH_PRIVATE_KEY      SecretType = 4
	SecretType_PGP_PRIVATE_KEY          SecretType = 5
	SecretType_EC_PRIVATE_KEY           SecretType = 6
	SecretType_RSA_PRIVATE_KEY          SecretType = 7
	SecretType_DSA_PRIVATE_KEY          SecretType = 8
	SecretType_CERT_PRIVATE_KEY         SecretType = 9
	SecretType_ENCRYPTED_PRIVATE_KEY    SecretType = 10
	SecretType_IMAGE_PULL_SECRET        SecretType = 11
)

// Enum value maps for SecretType.
var (
	SecretType_name = map[int32]string{
		0:  "UNDETERMINED",
		1:  "PUBLIC_CERTIFICATE",
		2:  "CERTIFICATE_REQUEST",
		3:  "PRIVACY_ENHANCED_MESSAGE",
		4:  "OPENSSH_PRIVATE_KEY",
		5:  "PGP_PRIVATE_KEY",
		6:  "EC_PRIVATE_KEY",
		7:  "RSA_PRIVATE_KEY",
		8:  "DSA_PRIVATE_KEY",
		9:  "CERT_PRIVATE_KEY",
		10: "ENCRYPTED_PRIVATE_KEY",
		11: "IMAGE_PULL_SECRET",
	}
	SecretType_value = map[string]int32{
		"UNDETERMINED":             0,
		"PUBLIC_CERTIFICATE":       1,
		"CERTIFICATE_REQUEST":      2,
		"PRIVACY_ENHANCED_MESSAGE": 3,
		"OPENSSH_PRIVATE_KEY":      4,
		"PGP_PRIVATE_KEY":          5,
		"EC_PRIVATE_KEY":           6,
		"RSA_PRIVATE_KEY":          7,
		"DSA_PRIVATE_KEY":          8,
		"CERT_PRIVATE_KEY":         9,
		"ENCRYPTED_PRIVATE_KEY":    10,
		"IMAGE_PULL_SECRET":        11,
	}
)

func (x SecretType) Enum() *SecretType {
	p := new(SecretType)
	*p = x
	return p
}

func (x SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_secret_proto_enumTypes[0].Descriptor()
}

func (SecretType) Type() protoreflect.EnumType {
	return &file_storage_secret_proto_enumTypes[0]
}

func (x SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Flat secret object.
// Any properties of an individual secret.
// (regardless of time, scope, or context)
// ////////////////////////////////////////
type Secret struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id           *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name         *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_ClusterId    *string                `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId"`
	xxx_hidden_ClusterName  *string                `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName"`
	xxx_hidden_Namespace    *string                `protobuf:"bytes,5,opt,name=namespace"`
	xxx_hidden_Type         *string                `protobuf:"bytes,6,opt,name=type"`
	xxx_hidden_Labels       map[string]string      `protobuf:"bytes,7,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Annotations  map[string]string      `protobuf:"bytes,8,rep,name=annotations" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt"`
	xxx_hidden_Files        *[]*SecretDataFile     `protobuf:"bytes,10,rep,name=files"`
	xxx_hidden_Relationship *SecretRelationship    `protobuf:"bytes,11,opt,name=relationship"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_storage_secret_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Secret) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *Secret) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Secret) GetClusterId() string {
	if x != nil {
		if x.xxx_hidden_ClusterId != nil {
			return *x.xxx_hidden_ClusterId
		}
		return ""
	}
	return ""
}

func (x *Secret) GetClusterName() string {
	if x != nil {
		if x.xxx_hidden_ClusterName != nil {
			return *x.xxx_hidden_ClusterName
		}
		return ""
	}
	return ""
}

func (x *Secret) GetNamespace() string {
	if x != nil {
		if x.xxx_hidden_Namespace != nil {
			return *x.xxx_hidden_Namespace
		}
		return ""
	}
	return ""
}

func (x *Secret) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *Secret) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *Secret) GetAnnotations() map[string]string {
	if x != nil {
		return x.xxx_hidden_Annotations
	}
	return nil
}

func (x *Secret) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_CreatedAt) {
				protoimpl.X.UnmarshalField(x, 9)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_CreatedAt), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *Secret) GetFiles() []*SecretDataFile {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Files) {
				protoimpl.X.UnmarshalField(x, 10)
			}
			var rv *[]*SecretDataFile
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *Secret) GetRelationship() *SecretRelationship {
	if x != nil {
		return x.xxx_hidden_Relationship
	}
	return nil
}

func (x *Secret) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *Secret) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *Secret) SetClusterId(v string) {
	x.xxx_hidden_ClusterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *Secret) SetClusterName(v string) {
	x.xxx_hidden_ClusterName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *Secret) SetNamespace(v string) {
	x.xxx_hidden_Namespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *Secret) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 11)
}

func (x *Secret) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *Secret) SetAnnotations(v map[string]string) {
	x.xxx_hidden_Annotations = v
}

func (x *Secret) SetCreatedAt(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 11)
	}
}

func (x *Secret) SetFiles(v []*SecretDataFile) {
	var sv *[]*SecretDataFile
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*SecretDataFile{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *Secret) SetRelationship(v *SecretRelationship) {
	x.xxx_hidden_Relationship = v
}

func (x *Secret) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Secret) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Secret) HasClusterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Secret) HasClusterName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Secret) HasNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Secret) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Secret) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Secret) HasRelationship() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Relationship != nil
}

func (x *Secret) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *Secret) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Secret) ClearClusterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ClusterId = nil
}

func (x *Secret) ClearClusterName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ClusterName = nil
}

func (x *Secret) ClearNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Namespace = nil
}

func (x *Secret) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Type = nil
}

func (x *Secret) ClearCreatedAt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, (*timestamppb.Timestamp)(nil))
}

func (x *Secret) ClearRelationship() {
	x.xxx_hidden_Relationship = nil
}

type Secret_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	Name        *string
	ClusterId   *string
	ClusterName *string
	Namespace   *string
	Type        *string
	Labels      map[string]string
	Annotations map[string]string
	CreatedAt   *timestamppb.Timestamp
	// Metadata about the secrets.
	// The secret need not be a file, but rather may be an arbitrary value.
	Files        []*SecretDataFile
	Relationship *SecretRelationship
}

func (b0 Secret_builder) Build() *Secret {
	m0 := &Secret{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_Name = b.Name
	}
	if b.ClusterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_ClusterId = b.ClusterId
	}
	if b.ClusterName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_ClusterName = b.ClusterName
	}
	if b.Namespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_Namespace = b.Namespace
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 11)
		x.xxx_hidden_Type = b.Type
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Annotations = b.Annotations
	if b.CreatedAt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 11)
		x.xxx_hidden_CreatedAt = b.CreatedAt
	}
	if b.Files != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_Files = &b.Files
	}
	x.xxx_hidden_Relationship = b.Relationship
	return m0
}

type ListSecret struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_ClusterId   *string                `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId"`
	xxx_hidden_ClusterName *string                `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName"`
	xxx_hidden_Namespace   *string                `protobuf:"bytes,4,opt,name=namespace"`
	xxx_hidden_Types       []SecretType           `protobuf:"varint,5,rep,packed,name=types,enum=storage.SecretType"`
	xxx_hidden_CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListSecret) Reset() {
	*x = ListSecret{}
	mi := &file_storage_secret_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecret) ProtoMessage() {}

func (x *ListSecret) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListSecret) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ListSecret) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ListSecret) GetClusterId() string {
	if x != nil {
		if x.xxx_hidden_ClusterId != nil {
			return *x.xxx_hidden_ClusterId
		}
		return ""
	}
	return ""
}

func (x *ListSecret) GetClusterName() string {
	if x != nil {
		if x.xxx_hidden_ClusterName != nil {
			return *x.xxx_hidden_ClusterName
		}
		return ""
	}
	return ""
}

func (x *ListSecret) GetNamespace() string {
	if x != nil {
		if x.xxx_hidden_Namespace != nil {
			return *x.xxx_hidden_Namespace
		}
		return ""
	}
	return ""
}

func (x *ListSecret) GetTypes() []SecretType {
	if x != nil {
		return x.xxx_hidden_Types
	}
	return nil
}

func (x *ListSecret) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_CreatedAt) {
				protoimpl.X.UnmarshalField(x, 6)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_CreatedAt), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *ListSecret) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ListSecret) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ListSecret) SetClusterId(v string) {
	x.xxx_hidden_ClusterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *ListSecret) SetClusterName(v string) {
	x.xxx_hidden_ClusterName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *ListSecret) SetNamespace(v string) {
	x.xxx_hidden_Namespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *ListSecret) SetTypes(v []SecretType) {
	x.xxx_hidden_Types = v
}

func (x *ListSecret) SetCreatedAt(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
	}
}

func (x *ListSecret) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ListSecret) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ListSecret) HasClusterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ListSecret) HasClusterName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ListSecret) HasNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ListSecret) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ListSecret) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ListSecret) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *ListSecret) ClearClusterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ClusterId = nil
}

func (x *ListSecret) ClearClusterName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ClusterName = nil
}

func (x *ListSecret) ClearNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Namespace = nil
}

func (x *ListSecret) ClearCreatedAt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, (*timestamppb.Timestamp)(nil))
}

type ListSecret_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	Name        *string
	ClusterId   *string
	ClusterName *string
	Namespace   *string
	Types       []SecretType
	CreatedAt   *timestamppb.Timestamp
}

func (b0 ListSecret_builder) Build() *ListSecret {
	m0 := &ListSecret{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Name = b.Name
	}
	if b.ClusterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_ClusterId = b.ClusterId
	}
	if b.ClusterName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ClusterName = b.ClusterName
	}
	if b.Namespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Namespace = b.Namespace
	}
	x.xxx_hidden_Types = b.Types
	if b.CreatedAt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_CreatedAt = b.CreatedAt
	}
	return m0
}

// The combined relationships that belong to the secret.
// Next Tag: 6
type SecretRelationship struct {
	state                              protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_Id                      *string                          `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ContainerRelationships  *[]*SecretContainerRelationship  `protobuf:"bytes,4,rep,name=container_relationships,json=containerRelationships"`
	xxx_hidden_DeploymentRelationships *[]*SecretDeploymentRelationship `protobuf:"bytes,5,rep,name=deployment_relationships,json=deploymentRelationships"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SecretRelationship) Reset() {
	*x = SecretRelationship{}
	mi := &file_storage_secret_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretRelationship) ProtoMessage() {}

func (x *SecretRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SecretRelationship) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *SecretRelationship) GetContainerRelationships() []*SecretContainerRelationship {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_ContainerRelationships) {
				protoimpl.X.UnmarshalField(x, 4)
			}
			var rv *[]*SecretContainerRelationship
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ContainerRelationships), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *SecretRelationship) GetDeploymentRelationships() []*SecretDeploymentRelationship {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_DeploymentRelationships) {
				protoimpl.X.UnmarshalField(x, 5)
			}
			var rv *[]*SecretDeploymentRelationship
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_DeploymentRelationships), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *SecretRelationship) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *SecretRelationship) SetContainerRelationships(v []*SecretContainerRelationship) {
	var sv *[]*SecretContainerRelationship
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ContainerRelationships), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*SecretContainerRelationship{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_ContainerRelationships), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *SecretRelationship) SetDeploymentRelationships(v []*SecretDeploymentRelationship) {
	var sv *[]*SecretDeploymentRelationship
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_DeploymentRelationships), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*SecretDeploymentRelationship{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_DeploymentRelationships), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *SecretRelationship) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SecretRelationship) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

type SecretRelationship_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Secret id
	Id *string
	// Container id to relationship.s
	ContainerRelationships []*SecretContainerRelationship
	// Deployment id to relationship.
	DeploymentRelationships []*SecretDeploymentRelationship
}

func (b0 SecretRelationship_builder) Build() *SecretRelationship {
	m0 := &SecretRelationship{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ContainerRelationships != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ContainerRelationships = &b.ContainerRelationships
	}
	if b.DeploymentRelationships != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_DeploymentRelationships = &b.DeploymentRelationships
	}
	return m0
}

// Secrets can be used by a deployment.
// Next Tag: 3
type SecretDeploymentRelationship struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SecretDeploymentRelationship) Reset() {
	*x = SecretDeploymentRelationship{}
	mi := &file_storage_secret_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretDeploymentRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretDeploymentRelationship) ProtoMessage() {}

func (x *SecretDeploymentRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SecretDeploymentRelationship) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *SecretDeploymentRelationship) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *SecretDeploymentRelationship) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *SecretDeploymentRelationship) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *SecretDeploymentRelationship) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SecretDeploymentRelationship) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SecretDeploymentRelationship) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *SecretDeploymentRelationship) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

type SecretDeploymentRelationship_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Id of the deployment using the secret within a container.
	Id *string
	// Name of the deployment.
	Name *string
}

func (b0 SecretDeploymentRelationship_builder) Build() *SecretDeploymentRelationship {
	m0 := &SecretDeploymentRelationship{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

// Secrets can be mounted in a path in a container.
// Next Tag: 3
type SecretContainerRelationship struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Path        *string                `protobuf:"bytes,2,opt,name=path"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SecretContainerRelationship) Reset() {
	*x = SecretContainerRelationship{}
	mi := &file_storage_secret_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretContainerRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretContainerRelationship) ProtoMessage() {}

func (x *SecretContainerRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SecretContainerRelationship) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *SecretContainerRelationship) GetPath() string {
	if x != nil {
		if x.xxx_hidden_Path != nil {
			return *x.xxx_hidden_Path
		}
		return ""
	}
	return ""
}

func (x *SecretContainerRelationship) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *SecretContainerRelationship) SetPath(v string) {
	x.xxx_hidden_Path = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *SecretContainerRelationship) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SecretContainerRelationship) HasPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SecretContainerRelationship) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *SecretContainerRelationship) ClearPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Path = nil
}

type SecretContainerRelationship_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Id of the container the secret is mounted in.
	Id *string
	// Path is a container specific mounting directory.
	Path *string
}

func (b0 SecretContainerRelationship_builder) Build() *SecretContainerRelationship {
	m0 := &SecretContainerRelationship{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Path != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Path = b.Path
	}
	return m0
}

type ImagePullSecret struct {
	state                 protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Registries *[]*ImagePullSecret_Registry `protobuf:"bytes,1,rep,name=registries"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ImagePullSecret) Reset() {
	*x = ImagePullSecret{}
	mi := &file_storage_secret_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagePullSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullSecret) ProtoMessage() {}

func (x *ImagePullSecret) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImagePullSecret) GetRegistries() []*ImagePullSecret_Registry {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Registries) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *[]*ImagePullSecret_Registry
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Registries), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *ImagePullSecret) SetRegistries(v []*ImagePullSecret_Registry) {
	var sv *[]*ImagePullSecret_Registry
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Registries), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*ImagePullSecret_Registry{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Registries), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

type ImagePullSecret_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Registries []*ImagePullSecret_Registry
}

func (b0 ImagePullSecret_builder) Build() *ImagePullSecret {
	m0 := &ImagePullSecret{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Registries != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Registries = &b.Registries
	}
	return m0
}

// Metadata about secret. Additional information is presented for a certificate file and
// imagePullSecret, but the "file" may also represent some arbitrary value.
type SecretDataFile struct {
	state                  protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                   `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Type        SecretType                `protobuf:"varint,2,opt,name=type,enum=storage.SecretType"`
	xxx_hidden_Metadata    isSecretDataFile_Metadata `protobuf_oneof:"metadata"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SecretDataFile) Reset() {
	*x = SecretDataFile{}
	mi := &file_storage_secret_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretDataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretDataFile) ProtoMessage() {}

func (x *SecretDataFile) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SecretDataFile) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *SecretDataFile) GetType() SecretType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Type
		}
	}
	return SecretType_UNDETERMINED
}

func (x *SecretDataFile) GetCert() *Cert {
	if x != nil {
		if x, ok := x.xxx_hidden_Metadata.(*secretDataFile_Cert); ok {
			return x.Cert
		}
	}
	return nil
}

func (x *SecretDataFile) GetImagePullSecret() *ImagePullSecret {
	if x != nil {
		if x, ok := x.xxx_hidden_Metadata.(*secretDataFile_ImagePullSecret); ok {
			return x.ImagePullSecret
		}
	}
	return nil
}

func (x *SecretDataFile) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *SecretDataFile) SetType(v SecretType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *SecretDataFile) SetCert(v *Cert) {
	if v == nil {
		x.xxx_hidden_Metadata = nil
		return
	}
	x.xxx_hidden_Metadata = &secretDataFile_Cert{v}
}

func (x *SecretDataFile) SetImagePullSecret(v *ImagePullSecret) {
	if v == nil {
		x.xxx_hidden_Metadata = nil
		return
	}
	x.xxx_hidden_Metadata = &secretDataFile_ImagePullSecret{v}
}

func (x *SecretDataFile) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SecretDataFile) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SecretDataFile) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *SecretDataFile) HasCert() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Metadata.(*secretDataFile_Cert)
	return ok
}

func (x *SecretDataFile) HasImagePullSecret() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Metadata.(*secretDataFile_ImagePullSecret)
	return ok
}

func (x *SecretDataFile) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *SecretDataFile) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Type = SecretType_UNDETERMINED
}

func (x *SecretDataFile) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

func (x *SecretDataFile) ClearCert() {
	if _, ok := x.xxx_hidden_Metadata.(*secretDataFile_Cert); ok {
		x.xxx_hidden_Metadata = nil
	}
}

func (x *SecretDataFile) ClearImagePullSecret() {
	if _, ok := x.xxx_hidden_Metadata.(*secretDataFile_ImagePullSecret); ok {
		x.xxx_hidden_Metadata = nil
	}
}

const SecretDataFile_Metadata_not_set_case case_SecretDataFile_Metadata = 0
const SecretDataFile_Cert_case case_SecretDataFile_Metadata = 3
const SecretDataFile_ImagePullSecret_case case_SecretDataFile_Metadata = 4

func (x *SecretDataFile) WhichMetadata() case_SecretDataFile_Metadata {
	if x == nil {
		return SecretDataFile_Metadata_not_set_case
	}
	switch x.xxx_hidden_Metadata.(type) {
	case *secretDataFile_Cert:
		return SecretDataFile_Cert_case
	case *secretDataFile_ImagePullSecret:
		return SecretDataFile_ImagePullSecret_case
	default:
		return SecretDataFile_Metadata_not_set_case
	}
}

type SecretDataFile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
	Type *SecretType
	// Fields of oneof xxx_hidden_Metadata:
	Cert            *Cert
	ImagePullSecret *ImagePullSecret
	// -- end of xxx_hidden_Metadata
}

func (b0 SecretDataFile_builder) Build() *SecretDataFile {
	m0 := &SecretDataFile{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Name = b.Name
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Cert != nil {
		x.xxx_hidden_Metadata = &secretDataFile_Cert{b.Cert}
	}
	if b.ImagePullSecret != nil {
		x.xxx_hidden_Metadata = &secretDataFile_ImagePullSecret{b.ImagePullSecret}
	}
	return m0
}

type case_SecretDataFile_Metadata protoreflect.FieldNumber

func (x case_SecretDataFile_Metadata) String() string {
	md := file_storage_secret_proto_msgTypes[6].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSecretDataFile_Metadata interface {
	isSecretDataFile_Metadata()
}

type secretDataFile_Cert struct {
	Cert *Cert `protobuf:"bytes,3,opt,name=cert,oneof"`
}

type secretDataFile_ImagePullSecret struct {
	ImagePullSecret *ImagePullSecret `protobuf:"bytes,4,opt,name=image_pull_secret,json=imagePullSecret,oneof"`
}

func (*secretDataFile_Cert) isSecretDataFile_Metadata() {}

func (*secretDataFile_ImagePullSecret) isSecretDataFile_Metadata() {}

type Cert struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Subject   *CertName              `protobuf:"bytes,1,opt,name=subject"`
	xxx_hidden_Issuer    *CertName              `protobuf:"bytes,2,opt,name=issuer"`
	xxx_hidden_Sans      []string               `protobuf:"bytes,3,rep,name=sans"`
	xxx_hidden_StartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate"`
	xxx_hidden_EndDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate"`
	xxx_hidden_Algorithm *string                `protobuf:"bytes,6,opt,name=algorithm"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Cert) Reset() {
	*x = Cert{}
	mi := &file_storage_secret_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Cert) GetSubject() *CertName {
	if x != nil {
		return x.xxx_hidden_Subject
	}
	return nil
}

func (x *Cert) GetIssuer() *CertName {
	if x != nil {
		return x.xxx_hidden_Issuer
	}
	return nil
}

func (x *Cert) GetSans() []string {
	if x != nil {
		return x.xxx_hidden_Sans
	}
	return nil
}

func (x *Cert) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_StartDate) {
				protoimpl.X.UnmarshalField(x, 4)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_StartDate), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *Cert) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_EndDate) {
				protoimpl.X.UnmarshalField(x, 5)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_EndDate), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *Cert) GetAlgorithm() string {
	if x != nil {
		if x.xxx_hidden_Algorithm != nil {
			return *x.xxx_hidden_Algorithm
		}
		return ""
	}
	return ""
}

func (x *Cert) SetSubject(v *CertName) {
	x.xxx_hidden_Subject = v
}

func (x *Cert) SetIssuer(v *CertName) {
	x.xxx_hidden_Issuer = v
}

func (x *Cert) SetSans(v []string) {
	x.xxx_hidden_Sans = v
}

func (x *Cert) SetStartDate(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_StartDate, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
	}
}

func (x *Cert) SetEndDate(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_EndDate, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
	}
}

func (x *Cert) SetAlgorithm(v string) {
	x.xxx_hidden_Algorithm = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *Cert) HasSubject() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Subject != nil
}

func (x *Cert) HasIssuer() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Issuer != nil
}

func (x *Cert) HasStartDate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Cert) HasEndDate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Cert) HasAlgorithm() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Cert) ClearSubject() {
	x.xxx_hidden_Subject = nil
}

func (x *Cert) ClearIssuer() {
	x.xxx_hidden_Issuer = nil
}

func (x *Cert) ClearStartDate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_StartDate, (*timestamppb.Timestamp)(nil))
}

func (x *Cert) ClearEndDate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_EndDate, (*timestamppb.Timestamp)(nil))
}

func (x *Cert) ClearAlgorithm() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Algorithm = nil
}

type Cert_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Subject   *CertName
	Issuer    *CertName
	Sans      []string
	StartDate *timestamppb.Timestamp
	EndDate   *timestamppb.Timestamp
	Algorithm *string
}

func (b0 Cert_builder) Build() *Cert {
	m0 := &Cert{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Subject = b.Subject
	x.xxx_hidden_Issuer = b.Issuer
	x.xxx_hidden_Sans = b.Sans
	if b.StartDate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_StartDate = b.StartDate
	}
	if b.EndDate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_EndDate = b.EndDate
	}
	if b.Algorithm != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_Algorithm = b.Algorithm
	}
	return m0
}

type CertName struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CommonName       *string                `protobuf:"bytes,1,opt,name=common_name,json=commonName"`
	xxx_hidden_Country          *string                `protobuf:"bytes,2,opt,name=country"`
	xxx_hidden_Organization     *string                `protobuf:"bytes,3,opt,name=organization"`
	xxx_hidden_OrganizationUnit *string                `protobuf:"bytes,4,opt,name=organization_unit,json=organizationUnit"`
	xxx_hidden_Locality         *string                `protobuf:"bytes,5,opt,name=locality"`
	xxx_hidden_Province         *string                `protobuf:"bytes,6,opt,name=province"`
	xxx_hidden_StreetAddress    *string                `protobuf:"bytes,7,opt,name=street_address,json=streetAddress"`
	xxx_hidden_PostalCode       *string                `protobuf:"bytes,8,opt,name=postal_code,json=postalCode"`
	xxx_hidden_Names            []string               `protobuf:"bytes,9,rep,name=names"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CertName) Reset() {
	*x = CertName{}
	mi := &file_storage_secret_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertName) ProtoMessage() {}

func (x *CertName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CertName) GetCommonName() string {
	if x != nil {
		if x.xxx_hidden_CommonName != nil {
			return *x.xxx_hidden_CommonName
		}
		return ""
	}
	return ""
}

func (x *CertName) GetCountry() string {
	if x != nil {
		if x.xxx_hidden_Country != nil {
			return *x.xxx_hidden_Country
		}
		return ""
	}
	return ""
}

func (x *CertName) GetOrganization() string {
	if x != nil {
		if x.xxx_hidden_Organization != nil {
			return *x.xxx_hidden_Organization
		}
		return ""
	}
	return ""
}

func (x *CertName) GetOrganizationUnit() string {
	if x != nil {
		if x.xxx_hidden_OrganizationUnit != nil {
			return *x.xxx_hidden_OrganizationUnit
		}
		return ""
	}
	return ""
}

func (x *CertName) GetLocality() string {
	if x != nil {
		if x.xxx_hidden_Locality != nil {
			return *x.xxx_hidden_Locality
		}
		return ""
	}
	return ""
}

func (x *CertName) GetProvince() string {
	if x != nil {
		if x.xxx_hidden_Province != nil {
			return *x.xxx_hidden_Province
		}
		return ""
	}
	return ""
}

func (x *CertName) GetStreetAddress() string {
	if x != nil {
		if x.xxx_hidden_StreetAddress != nil {
			return *x.xxx_hidden_StreetAddress
		}
		return ""
	}
	return ""
}

func (x *CertName) GetPostalCode() string {
	if x != nil {
		if x.xxx_hidden_PostalCode != nil {
			return *x.xxx_hidden_PostalCode
		}
		return ""
	}
	return ""
}

func (x *CertName) GetNames() []string {
	if x != nil {
		return x.xxx_hidden_Names
	}
	return nil
}

func (x *CertName) SetCommonName(v string) {
	x.xxx_hidden_CommonName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *CertName) SetCountry(v string) {
	x.xxx_hidden_Country = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *CertName) SetOrganization(v string) {
	x.xxx_hidden_Organization = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *CertName) SetOrganizationUnit(v string) {
	x.xxx_hidden_OrganizationUnit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *CertName) SetLocality(v string) {
	x.xxx_hidden_Locality = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *CertName) SetProvince(v string) {
	x.xxx_hidden_Province = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *CertName) SetStreetAddress(v string) {
	x.xxx_hidden_StreetAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *CertName) SetPostalCode(v string) {
	x.xxx_hidden_PostalCode = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *CertName) SetNames(v []string) {
	x.xxx_hidden_Names = v
}

func (x *CertName) HasCommonName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CertName) HasCountry() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CertName) HasOrganization() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CertName) HasOrganizationUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CertName) HasLocality() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CertName) HasProvince() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CertName) HasStreetAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CertName) HasPostalCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *CertName) ClearCommonName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CommonName = nil
}

func (x *CertName) ClearCountry() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Country = nil
}

func (x *CertName) ClearOrganization() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Organization = nil
}

func (x *CertName) ClearOrganizationUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_OrganizationUnit = nil
}

func (x *CertName) ClearLocality() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Locality = nil
}

func (x *CertName) ClearProvince() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Province = nil
}

func (x *CertName) ClearStreetAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_StreetAddress = nil
}

func (x *CertName) ClearPostalCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_PostalCode = nil
}

type CertName_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CommonName       *string
	Country          *string
	Organization     *string
	OrganizationUnit *string
	Locality         *string
	Province         *string
	StreetAddress    *string
	PostalCode       *string
	Names            []string
}

func (b0 CertName_builder) Build() *CertName {
	m0 := &CertName{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CommonName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_CommonName = b.CommonName
	}
	if b.Country != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_Country = b.Country
	}
	if b.Organization != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_Organization = b.Organization
	}
	if b.OrganizationUnit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_OrganizationUnit = b.OrganizationUnit
	}
	if b.Locality != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_Locality = b.Locality
	}
	if b.Province != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_Province = b.Province
	}
	if b.StreetAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_StreetAddress = b.StreetAddress
	}
	if b.PostalCode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_PostalCode = b.PostalCode
	}
	x.xxx_hidden_Names = b.Names
	return m0
}

type ImagePullSecret_Registry struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Username    *string                `protobuf:"bytes,2,opt,name=username"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ImagePullSecret_Registry) Reset() {
	*x = ImagePullSecret_Registry{}
	mi := &file_storage_secret_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagePullSecret_Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullSecret_Registry) ProtoMessage() {}

func (x *ImagePullSecret_Registry) ProtoReflect() protoreflect.Message {
	mi := &file_storage_secret_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImagePullSecret_Registry) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ImagePullSecret_Registry) GetUsername() string {
	if x != nil {
		if x.xxx_hidden_Username != nil {
			return *x.xxx_hidden_Username
		}
		return ""
	}
	return ""
}

func (x *ImagePullSecret_Registry) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ImagePullSecret_Registry) SetUsername(v string) {
	x.xxx_hidden_Username = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ImagePullSecret_Registry) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ImagePullSecret_Registry) HasUsername() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ImagePullSecret_Registry) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *ImagePullSecret_Registry) ClearUsername() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Username = nil
}

type ImagePullSecret_Registry_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name     *string
	Username *string
}

func (b0 ImagePullSecret_Registry_builder) Build() *ImagePullSecret_Registry {
	m0 := &ImagePullSecret_Registry{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	if b.Username != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Username = b.Username
	}
	return m0
}

var File_storage_secret_proto protoreflect.FileDescriptor

const file_storage_secret_proto_rawDesc = "" +
	"\n" +
	"\x14storage/secret.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\xcf\x04\n" +
	"\x06Secret\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x03 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x04 \x01(\tR\vclusterName\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04type\x18\x06 \x01(\tR\x04type\x127\n" +
	"\x06labels\x18\a \x03(\v2\x1b.storage.Secret.LabelsEntryB\x02(\x01R\x06labels\x12F\n" +
	"\vannotations\x18\b \x03(\v2 .storage.Secret.AnnotationsEntryB\x02(\x01R\vannotations\x12=\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tcreatedAt\x121\n" +
	"\x05files\x18\n" +
	" \x03(\v2\x17.storage.SecretDataFileB\x02(\x01R\x05files\x12?\n" +
	"\frelationship\x18\v \x01(\v2\x1b.storage.SecretRelationshipR\frelationship\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfa\x01\n" +
	"\n" +
	"ListSecret\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\a \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x03 \x01(\tR\vclusterName\x12\x1c\n" +
	"\tnamespace\x18\x04 \x01(\tR\tnamespace\x12)\n" +
	"\x05types\x18\x05 \x03(\x0e2\x13.storage.SecretTypeR\x05types\x12=\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tcreatedAt\"\xed\x01\n" +
	"\x12SecretRelationship\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12a\n" +
	"\x17container_relationships\x18\x04 \x03(\v2$.storage.SecretContainerRelationshipB\x02(\x01R\x16containerRelationships\x12d\n" +
	"\x18deployment_relationships\x18\x05 \x03(\v2%.storage.SecretDeploymentRelationshipB\x02(\x01R\x17deploymentRelationships\"B\n" +
	"\x1cSecretDeploymentRelationship\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"A\n" +
	"\x1bSecretContainerRelationship\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\"\x94\x01\n" +
	"\x0fImagePullSecret\x12E\n" +
	"\n" +
	"registries\x18\x01 \x03(\v2!.storage.ImagePullSecret.RegistryB\x02(\x01R\n" +
	"registries\x1a:\n" +
	"\bRegistry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\"\xc6\x01\n" +
	"\x0eSecretDataFile\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12'\n" +
	"\x04type\x18\x02 \x01(\x0e2\x13.storage.SecretTypeR\x04type\x12#\n" +
	"\x04cert\x18\x03 \x01(\v2\r.storage.CertH\x00R\x04cert\x12F\n" +
	"\x11image_pull_secret\x18\x04 \x01(\v2\x18.storage.ImagePullSecretH\x00R\x0fimagePullSecretB\n" +
	"\n" +
	"\bmetadata\"\x8a\x02\n" +
	"\x04Cert\x12+\n" +
	"\asubject\x18\x01 \x01(\v2\x11.storage.CertNameR\asubject\x12)\n" +
	"\x06issuer\x18\x02 \x01(\v2\x11.storage.CertNameR\x06issuer\x12\x12\n" +
	"\x04sans\x18\x03 \x03(\tR\x04sans\x12=\n" +
	"\n" +
	"start_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tstartDate\x129\n" +
	"\bend_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\aendDate\x12\x1c\n" +
	"\talgorithm\x18\x06 \x01(\tR\talgorithm\"\xac\x02\n" +
	"\bCertName\x12\x1f\n" +
	"\vcommon_name\x18\x01 \x01(\tR\n" +
	"commonName\x12\x18\n" +
	"\acountry\x18\x02 \x01(\tR\acountry\x12\"\n" +
	"\forganization\x18\x03 \x01(\tR\forganization\x12+\n" +
	"\x11organization_unit\x18\x04 \x01(\tR\x10organizationUnit\x12\x1a\n" +
	"\blocality\x18\x05 \x01(\tR\blocality\x12\x1a\n" +
	"\bprovince\x18\x06 \x01(\tR\bprovince\x12%\n" +
	"\x0estreet_address\x18\a \x01(\tR\rstreetAddress\x12\x1f\n" +
	"\vpostal_code\x18\b \x01(\tR\n" +
	"postalCode\x12\x14\n" +
	"\x05names\x18\t \x03(\tR\x05names*\xa1\x02\n" +
	"\n" +
	"SecretType\x12\x10\n" +
	"\fUNDETERMINED\x10\x00\x12\x16\n" +
	"\x12PUBLIC_CERTIFICATE\x10\x01\x12\x17\n" +
	"\x13CERTIFICATE_REQUEST\x10\x02\x12\x1c\n" +
	"\x18PRIVACY_ENHANCED_MESSAGE\x10\x03\x12\x17\n" +
	"\x13OPENSSH_PRIVATE_KEY\x10\x04\x12\x13\n" +
	"\x0fPGP_PRIVATE_KEY\x10\x05\x12\x12\n" +
	"\x0eEC_PRIVATE_KEY\x10\x06\x12\x13\n" +
	"\x0fRSA_PRIVATE_KEY\x10\a\x12\x13\n" +
	"\x0fDSA_PRIVATE_KEY\x10\b\x12\x14\n" +
	"\x10CERT_PRIVATE_KEY\x10\t\x12\x19\n" +
	"\x15ENCRYPTED_PRIVATE_KEY\x10\n" +
	"\x12\x15\n" +
	"\x11IMAGE_PULL_SECRET\x10\vB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_storage_secret_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_storage_secret_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_storage_secret_proto_goTypes = []any{
	(SecretType)(0),                      // 0: storage.SecretType
	(*Secret)(nil),                       // 1: storage.Secret
	(*ListSecret)(nil),                   // 2: storage.ListSecret
	(*SecretRelationship)(nil),           // 3: storage.SecretRelationship
	(*SecretDeploymentRelationship)(nil), // 4: storage.SecretDeploymentRelationship
	(*SecretContainerRelationship)(nil),  // 5: storage.SecretContainerRelationship
	(*ImagePullSecret)(nil),              // 6: storage.ImagePullSecret
	(*SecretDataFile)(nil),               // 7: storage.SecretDataFile
	(*Cert)(nil),                         // 8: storage.Cert
	(*CertName)(nil),                     // 9: storage.CertName
	nil,                                  // 10: storage.Secret.LabelsEntry
	nil,                                  // 11: storage.Secret.AnnotationsEntry
	(*ImagePullSecret_Registry)(nil),     // 12: storage.ImagePullSecret.Registry
	(*timestamppb.Timestamp)(nil),        // 13: google.protobuf.Timestamp
}
var file_storage_secret_proto_depIdxs = []int32{
	10, // 0: storage.Secret.labels:type_name -> storage.Secret.LabelsEntry
	11, // 1: storage.Secret.annotations:type_name -> storage.Secret.AnnotationsEntry
	13, // 2: storage.Secret.created_at:type_name -> google.protobuf.Timestamp
	7,  // 3: storage.Secret.files:type_name -> storage.SecretDataFile
	3,  // 4: storage.Secret.relationship:type_name -> storage.SecretRelationship
	0,  // 5: storage.ListSecret.types:type_name -> storage.SecretType
	13, // 6: storage.ListSecret.created_at:type_name -> google.protobuf.Timestamp
	5,  // 7: storage.SecretRelationship.container_relationships:type_name -> storage.SecretContainerRelationship
	4,  // 8: storage.SecretRelationship.deployment_relationships:type_name -> storage.SecretDeploymentRelationship
	12, // 9: storage.ImagePullSecret.registries:type_name -> storage.ImagePullSecret.Registry
	0,  // 10: storage.SecretDataFile.type:type_name -> storage.SecretType
	8,  // 11: storage.SecretDataFile.cert:type_name -> storage.Cert
	6,  // 12: storage.SecretDataFile.image_pull_secret:type_name -> storage.ImagePullSecret
	9,  // 13: storage.Cert.subject:type_name -> storage.CertName
	9,  // 14: storage.Cert.issuer:type_name -> storage.CertName
	13, // 15: storage.Cert.start_date:type_name -> google.protobuf.Timestamp
	13, // 16: storage.Cert.end_date:type_name -> google.protobuf.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_storage_secret_proto_init() }
func file_storage_secret_proto_init() {
	if File_storage_secret_proto != nil {
		return
	}
	file_storage_secret_proto_msgTypes[6].OneofWrappers = []any{
		(*secretDataFile_Cert)(nil),
		(*secretDataFile_ImagePullSecret)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_secret_proto_rawDesc), len(file_storage_secret_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_secret_proto_goTypes,
		DependencyIndexes: file_storage_secret_proto_depIdxs,
		EnumInfos:         file_storage_secret_proto_enumTypes,
		MessageInfos:      file_storage_secret_proto_msgTypes,
	}.Build()
	File_storage_secret_proto = out.File
	file_storage_secret_proto_goTypes = nil
	file_storage_secret_proto_depIdxs = nil
}
