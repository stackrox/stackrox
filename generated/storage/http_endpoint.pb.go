// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/http_endpoint.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPEndpointConfig struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Endpoint      *string                `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	SkipTlsVerify *bool                  `protobuf:"varint,2,opt,name=skip_tls_verify,json=skipTlsVerify" json:"skip_tls_verify,omitempty"`
	CaCert        *string                `protobuf:"bytes,3,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	Username      *string                `protobuf:"bytes,4,opt,name=username" json:"username,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password *string         `protobuf:"bytes,5,opt,name=password" json:"password,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Headers  []*KeyValuePair `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
	// The client certificate in PEM format for the integration.
	ClientCertPem *string `protobuf:"bytes,7,opt,name=client_cert_pem,json=clientCertPem" json:"client_cert_pem,omitempty"`
	// The client key in PEM format for the integration. The server will mask the value of this credential in responses and logs.
	ClientKeyPem  *string `protobuf:"bytes,8,opt,name=client_key_pem,json=clientKeyPem" json:"client_key_pem,omitempty" scrub:"always"` // @gotags: scrub:"always"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPEndpointConfig) Reset() {
	*x = HTTPEndpointConfig{}
	mi := &file_storage_http_endpoint_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPEndpointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPEndpointConfig) ProtoMessage() {}

func (x *HTTPEndpointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_http_endpoint_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HTTPEndpointConfig) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *HTTPEndpointConfig) GetSkipTlsVerify() bool {
	if x != nil && x.SkipTlsVerify != nil {
		return *x.SkipTlsVerify
	}
	return false
}

func (x *HTTPEndpointConfig) GetCaCert() string {
	if x != nil && x.CaCert != nil {
		return *x.CaCert
	}
	return ""
}

func (x *HTTPEndpointConfig) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *HTTPEndpointConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *HTTPEndpointConfig) GetHeaders() []*KeyValuePair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPEndpointConfig) GetClientCertPem() string {
	if x != nil && x.ClientCertPem != nil {
		return *x.ClientCertPem
	}
	return ""
}

func (x *HTTPEndpointConfig) GetClientKeyPem() string {
	if x != nil && x.ClientKeyPem != nil {
		return *x.ClientKeyPem
	}
	return ""
}

func (x *HTTPEndpointConfig) SetEndpoint(v string) {
	x.Endpoint = &v
}

func (x *HTTPEndpointConfig) SetSkipTlsVerify(v bool) {
	x.SkipTlsVerify = &v
}

func (x *HTTPEndpointConfig) SetCaCert(v string) {
	x.CaCert = &v
}

func (x *HTTPEndpointConfig) SetUsername(v string) {
	x.Username = &v
}

func (x *HTTPEndpointConfig) SetPassword(v string) {
	x.Password = &v
}

func (x *HTTPEndpointConfig) SetHeaders(v []*KeyValuePair) {
	x.Headers = v
}

func (x *HTTPEndpointConfig) SetClientCertPem(v string) {
	x.ClientCertPem = &v
}

func (x *HTTPEndpointConfig) SetClientKeyPem(v string) {
	x.ClientKeyPem = &v
}

func (x *HTTPEndpointConfig) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return x.Endpoint != nil
}

func (x *HTTPEndpointConfig) HasSkipTlsVerify() bool {
	if x == nil {
		return false
	}
	return x.SkipTlsVerify != nil
}

func (x *HTTPEndpointConfig) HasCaCert() bool {
	if x == nil {
		return false
	}
	return x.CaCert != nil
}

func (x *HTTPEndpointConfig) HasUsername() bool {
	if x == nil {
		return false
	}
	return x.Username != nil
}

func (x *HTTPEndpointConfig) HasPassword() bool {
	if x == nil {
		return false
	}
	return x.Password != nil
}

func (x *HTTPEndpointConfig) HasClientCertPem() bool {
	if x == nil {
		return false
	}
	return x.ClientCertPem != nil
}

func (x *HTTPEndpointConfig) HasClientKeyPem() bool {
	if x == nil {
		return false
	}
	return x.ClientKeyPem != nil
}

func (x *HTTPEndpointConfig) ClearEndpoint() {
	x.Endpoint = nil
}

func (x *HTTPEndpointConfig) ClearSkipTlsVerify() {
	x.SkipTlsVerify = nil
}

func (x *HTTPEndpointConfig) ClearCaCert() {
	x.CaCert = nil
}

func (x *HTTPEndpointConfig) ClearUsername() {
	x.Username = nil
}

func (x *HTTPEndpointConfig) ClearPassword() {
	x.Password = nil
}

func (x *HTTPEndpointConfig) ClearClientCertPem() {
	x.ClientCertPem = nil
}

func (x *HTTPEndpointConfig) ClearClientKeyPem() {
	x.ClientKeyPem = nil
}

type HTTPEndpointConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Endpoint      *string
	SkipTlsVerify *bool
	CaCert        *string
	Username      *string
	// The password for the integration. The server will mask the value of this credential in responses and logs.
	Password *string
	Headers  []*KeyValuePair
	// The client certificate in PEM format for the integration.
	ClientCertPem *string
	// The client key in PEM format for the integration. The server will mask the value of this credential in responses and logs.
	ClientKeyPem *string
}

func (b0 HTTPEndpointConfig_builder) Build() *HTTPEndpointConfig {
	m0 := &HTTPEndpointConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Endpoint = b.Endpoint
	x.SkipTlsVerify = b.SkipTlsVerify
	x.CaCert = b.CaCert
	x.Username = b.Username
	x.Password = b.Password
	x.Headers = b.Headers
	x.ClientCertPem = b.ClientCertPem
	x.ClientKeyPem = b.ClientKeyPem
	return m0
}

var File_storage_http_endpoint_proto protoreflect.FileDescriptor

const file_storage_http_endpoint_proto_rawDesc = "" +
	"\n" +
	"\x1bstorage/http_endpoint.proto\x12\astorage\x1a\x14storage/common.proto\x1a!google/protobuf/go_features.proto\"\xa8\x02\n" +
	"\x12HTTPEndpointConfig\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12&\n" +
	"\x0fskip_tls_verify\x18\x02 \x01(\bR\rskipTlsVerify\x12\x17\n" +
	"\aca_cert\x18\x03 \x01(\tR\x06caCert\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12/\n" +
	"\aheaders\x18\x06 \x03(\v2\x15.storage.KeyValuePairR\aheaders\x12&\n" +
	"\x0fclient_cert_pem\x18\a \x01(\tR\rclientCertPem\x12$\n" +
	"\x0eclient_key_pem\x18\b \x01(\tR\fclientKeyPemB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_http_endpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_storage_http_endpoint_proto_goTypes = []any{
	(*HTTPEndpointConfig)(nil), // 0: storage.HTTPEndpointConfig
	(*KeyValuePair)(nil),       // 1: storage.KeyValuePair
}
var file_storage_http_endpoint_proto_depIdxs = []int32{
	1, // 0: storage.HTTPEndpointConfig.headers:type_name -> storage.KeyValuePair
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_storage_http_endpoint_proto_init() }
func file_storage_http_endpoint_proto_init() {
	if File_storage_http_endpoint_proto != nil {
		return
	}
	file_storage_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_http_endpoint_proto_rawDesc), len(file_storage_http_endpoint_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_http_endpoint_proto_goTypes,
		DependencyIndexes: file_storage_http_endpoint_proto_depIdxs,
		MessageInfos:      file_storage_http_endpoint_proto_msgTypes,
	}.Build()
	File_storage_http_endpoint_proto = out.File
	file_storage_http_endpoint_proto_goTypes = nil
	file_storage_http_endpoint_proto_depIdxs = nil
}
