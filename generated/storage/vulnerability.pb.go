// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/vulnerability.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScoreVersion can be deprecated ROX-26066
type EmbeddedVulnerability_ScoreVersion int32

const (
	EmbeddedVulnerability_V2 EmbeddedVulnerability_ScoreVersion = 0 // No unset for automatic backwards compatibility
	EmbeddedVulnerability_V3 EmbeddedVulnerability_ScoreVersion = 1
)

// Enum value maps for EmbeddedVulnerability_ScoreVersion.
var (
	EmbeddedVulnerability_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
	}
	EmbeddedVulnerability_ScoreVersion_value = map[string]int32{
		"V2": 0,
		"V3": 1,
	}
)

func (x EmbeddedVulnerability_ScoreVersion) Enum() *EmbeddedVulnerability_ScoreVersion {
	p := new(EmbeddedVulnerability_ScoreVersion)
	*p = x
	return p
}

func (x EmbeddedVulnerability_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbeddedVulnerability_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_vulnerability_proto_enumTypes[0].Descriptor()
}

func (EmbeddedVulnerability_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_vulnerability_proto_enumTypes[0]
}

func (x EmbeddedVulnerability_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmbeddedVulnerability_ScoreVersion.Descriptor instead.
func (EmbeddedVulnerability_ScoreVersion) EnumDescriptor() ([]byte, []int) {
	return file_storage_vulnerability_proto_rawDescGZIP(), []int{0, 0}
}

type EmbeddedVulnerability_VulnerabilityType int32

const (
	EmbeddedVulnerability_UNKNOWN_VULNERABILITY   EmbeddedVulnerability_VulnerabilityType = 0
	EmbeddedVulnerability_IMAGE_VULNERABILITY     EmbeddedVulnerability_VulnerabilityType = 1
	EmbeddedVulnerability_K8S_VULNERABILITY       EmbeddedVulnerability_VulnerabilityType = 2
	EmbeddedVulnerability_ISTIO_VULNERABILITY     EmbeddedVulnerability_VulnerabilityType = 3
	EmbeddedVulnerability_NODE_VULNERABILITY      EmbeddedVulnerability_VulnerabilityType = 4
	EmbeddedVulnerability_OPENSHIFT_VULNERABILITY EmbeddedVulnerability_VulnerabilityType = 5
)

// Enum value maps for EmbeddedVulnerability_VulnerabilityType.
var (
	EmbeddedVulnerability_VulnerabilityType_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY",
		1: "IMAGE_VULNERABILITY",
		2: "K8S_VULNERABILITY",
		3: "ISTIO_VULNERABILITY",
		4: "NODE_VULNERABILITY",
		5: "OPENSHIFT_VULNERABILITY",
	}
	EmbeddedVulnerability_VulnerabilityType_value = map[string]int32{
		"UNKNOWN_VULNERABILITY":   0,
		"IMAGE_VULNERABILITY":     1,
		"K8S_VULNERABILITY":       2,
		"ISTIO_VULNERABILITY":     3,
		"NODE_VULNERABILITY":      4,
		"OPENSHIFT_VULNERABILITY": 5,
	}
)

func (x EmbeddedVulnerability_VulnerabilityType) Enum() *EmbeddedVulnerability_VulnerabilityType {
	p := new(EmbeddedVulnerability_VulnerabilityType)
	*p = x
	return p
}

func (x EmbeddedVulnerability_VulnerabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbeddedVulnerability_VulnerabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_vulnerability_proto_enumTypes[1].Descriptor()
}

func (EmbeddedVulnerability_VulnerabilityType) Type() protoreflect.EnumType {
	return &file_storage_vulnerability_proto_enumTypes[1]
}

func (x EmbeddedVulnerability_VulnerabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmbeddedVulnerability_VulnerabilityType.Descriptor instead.
func (EmbeddedVulnerability_VulnerabilityType) EnumDescriptor() ([]byte, []int) {
	return file_storage_vulnerability_proto_rawDescGZIP(), []int{0, 1}
}

// Next Tag: 22
type EmbeddedVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cve     string  `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty" search:"CVE,store"`     // @gotags: search:"CVE,store"
	Cvss    float32 `protobuf:"fixed32,2,opt,name=cvss,proto3" json:"cvss,omitempty" search:"CVSS,store"` // @gotags: search:"CVSS,store"
	Summary string  `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Link    string  `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	// Types that are assignable to SetFixedBy:
	//
	//	*EmbeddedVulnerability_FixedBy
	SetFixedBy   isEmbeddedVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	ScoreVersion EmbeddedVulnerability_ScoreVersion `protobuf:"varint,8,opt,name=score_version,json=scoreVersion,proto3,enum=storage.EmbeddedVulnerability_ScoreVersion" json:"score_version,omitempty"`
	// CVSSV2 CVSSV3 can be deprecated ROX-26066
	CvssV2       *CVSSV2                `protobuf:"bytes,6,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3       *CVSSV3                `protobuf:"bytes,7,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	PublishedOn  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=published_on,json=publishedOn,proto3" json:"published_on,omitempty" search:"CVE Published On"` // @gotags: search:"CVE Published On"
	LastModified *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// For internal purposes only.
	VulnerabilityType  EmbeddedVulnerability_VulnerabilityType   `protobuf:"varint,11,opt,name=vulnerability_type,json=vulnerabilityType,proto3,enum=storage.EmbeddedVulnerability_VulnerabilityType" json:"vulnerability_type,omitempty"`
	VulnerabilityTypes []EmbeddedVulnerability_VulnerabilityType `protobuf:"varint,18,rep,packed,name=vulnerability_types,json=vulnerabilityTypes,proto3,enum=storage.EmbeddedVulnerability_VulnerabilityType" json:"vulnerability_types,omitempty" hash:"ignore"` // @gotags: hash:"ignore"
	Suppressed         bool                                      `protobuf:"varint,12,opt,name=suppressed,proto3" json:"suppressed,omitempty" search:"CVE Snoozed"`                                                                                                       // @gotags: search:"CVE Snoozed"
	SuppressActivation *timestamppb.Timestamp                    `protobuf:"bytes,13,opt,name=suppress_activation,json=suppressActivation,proto3" json:"suppress_activation,omitempty"`
	SuppressExpiry     *timestamppb.Timestamp                    `protobuf:"bytes,14,opt,name=suppress_expiry,json=suppressExpiry,proto3" json:"suppress_expiry,omitempty"`
	// Time when the CVE was first seen, for this specific distro, in the system.
	FirstSystemOccurrence *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_system_occurrence,json=firstSystemOccurrence,proto3" json:"first_system_occurrence,omitempty" policy:"First System Occurrence Timestamp" hash:"ignore"` // @gotags: policy:"First System Occurrence Timestamp" hash:"ignore"
	// Time when the CVE was first seen in this image.
	FirstImageOccurrence *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=first_image_occurrence,json=firstImageOccurrence,proto3" json:"first_image_occurrence,omitempty" policy:"First Image Occurrence Timestamp" hash:"ignore"` // @gotags: policy:"First Image Occurrence Timestamp" hash:"ignore"
	Severity             VulnerabilitySeverity  `protobuf:"varint,19,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" policy:"Severity"`                   // @gotags: policy:"Severity"
	State                VulnerabilityState     `protobuf:"varint,20,opt,name=state,proto3,enum=storage.VulnerabilityState" json:"state,omitempty" search:"Vulnerability State"`                            // @gotags: search:"Vulnerability State"
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics []*CVSSScore `protobuf:"bytes,21,rep,name=cvss_metrics,json=cvssMetrics,proto3" json:"cvss_metrics,omitempty"`
}

func (x *EmbeddedVulnerability) Reset() {
	*x = EmbeddedVulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_vulnerability_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedVulnerability) ProtoMessage() {}

func (x *EmbeddedVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_storage_vulnerability_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedVulnerability.ProtoReflect.Descriptor instead.
func (*EmbeddedVulnerability) Descriptor() ([]byte, []int) {
	return file_storage_vulnerability_proto_rawDescGZIP(), []int{0}
}

func (x *EmbeddedVulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *EmbeddedVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *EmbeddedVulnerability) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (m *EmbeddedVulnerability) GetSetFixedBy() isEmbeddedVulnerability_SetFixedBy {
	if m != nil {
		return m.SetFixedBy
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFixedBy() string {
	if x, ok := x.GetSetFixedBy().(*EmbeddedVulnerability_FixedBy); ok {
		return x.FixedBy
	}
	return ""
}

func (x *EmbeddedVulnerability) GetScoreVersion() EmbeddedVulnerability_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return EmbeddedVulnerability_V2
}

func (x *EmbeddedVulnerability) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *EmbeddedVulnerability) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *EmbeddedVulnerability) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *EmbeddedVulnerability) GetVulnerabilityType() EmbeddedVulnerability_VulnerabilityType {
	if x != nil {
		return x.VulnerabilityType
	}
	return EmbeddedVulnerability_UNKNOWN_VULNERABILITY
}

func (x *EmbeddedVulnerability) GetVulnerabilityTypes() []EmbeddedVulnerability_VulnerabilityType {
	if x != nil {
		return x.VulnerabilityTypes
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressed() bool {
	if x != nil {
		return x.Suppressed
	}
	return false
}

func (x *EmbeddedVulnerability) GetSuppressActivation() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressActivation
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressExpiry
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstSystemOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSystemOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstImageOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstImageOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *EmbeddedVulnerability) GetState() VulnerabilityState {
	if x != nil {
		return x.State
	}
	return VulnerabilityState_OBSERVED
}

func (x *EmbeddedVulnerability) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

type isEmbeddedVulnerability_SetFixedBy interface {
	isEmbeddedVulnerability_SetFixedBy()
}

type EmbeddedVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,5,opt,name=fixed_by,json=fixedBy,proto3,oneof" search:"Fixed By,store,hidden"` // @gotags: search:"Fixed By,store,hidden"
}

func (*EmbeddedVulnerability_FixedBy) isEmbeddedVulnerability_SetFixedBy() {}

type NodeVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CveBaseInfo *CVEInfo              `protobuf:"bytes,1,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	Cvss        float32               `protobuf:"fixed32,2,opt,name=cvss,proto3" json:"cvss,omitempty" policy:"CVSS"`                                           // @gotags: policy:"CVSS"
	Severity    VulnerabilitySeverity `protobuf:"varint,3,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" policy:"Severity"` // @gotags: policy:"Severity"
	// Types that are assignable to SetFixedBy:
	//
	//	*NodeVulnerability_FixedBy
	SetFixedBy   isNodeVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	Snoozed      bool                           `protobuf:"varint,5,opt,name=snoozed,proto3" json:"snoozed,omitempty" policy:"CVE Snoozed"` // @gotags: policy:"CVE Snoozed"
	SnoozeStart  *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty"`
}

func (x *NodeVulnerability) Reset() {
	*x = NodeVulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_vulnerability_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVulnerability) ProtoMessage() {}

func (x *NodeVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_storage_vulnerability_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVulnerability.ProtoReflect.Descriptor instead.
func (*NodeVulnerability) Descriptor() ([]byte, []int) {
	return file_storage_vulnerability_proto_rawDescGZIP(), []int{1}
}

func (x *NodeVulnerability) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *NodeVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *NodeVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (m *NodeVulnerability) GetSetFixedBy() isNodeVulnerability_SetFixedBy {
	if m != nil {
		return m.SetFixedBy
	}
	return nil
}

func (x *NodeVulnerability) GetFixedBy() string {
	if x, ok := x.GetSetFixedBy().(*NodeVulnerability_FixedBy); ok {
		return x.FixedBy
	}
	return ""
}

func (x *NodeVulnerability) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *NodeVulnerability) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *NodeVulnerability) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

type isNodeVulnerability_SetFixedBy interface {
	isNodeVulnerability_SetFixedBy()
}

type NodeVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,4,opt,name=fixed_by,json=fixedBy,proto3,oneof" policy:"Fixed By"` // @gotags: policy:"Fixed By"
}

func (*NodeVulnerability_FixedBy) isNodeVulnerability_SetFixedBy() {}

var File_storage_vulnerability_proto protoreflect.FileDescriptor

var file_storage_vulnerability_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x63, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x0a, 0x0a, 0x15, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x42, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f,
	0x76, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56,
	0x32, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53,
	0x53, 0x56, 0x33, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x12, 0x3d, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x12, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x13,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x0b, 0x63, 0x76, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x1e, 0x0a,
	0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a,
	0x02, 0x56, 0x32, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x33, 0x10, 0x01, 0x22, 0xac, 0x01,
	0x0a, 0x11, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x38, 0x53, 0x5f, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x53, 0x54, 0x49, 0x4f, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x05, 0x42, 0x0e, 0x0a, 0x0c,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x4a, 0x04, 0x08, 0x11,
	0x10, 0x12, 0x22, 0xe0, 0x02, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76,
	0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6e,
	0x6f, 0x6f, 0x7a, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_vulnerability_proto_rawDescOnce sync.Once
	file_storage_vulnerability_proto_rawDescData = file_storage_vulnerability_proto_rawDesc
)

func file_storage_vulnerability_proto_rawDescGZIP() []byte {
	file_storage_vulnerability_proto_rawDescOnce.Do(func() {
		file_storage_vulnerability_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_vulnerability_proto_rawDescData)
	})
	return file_storage_vulnerability_proto_rawDescData
}

var file_storage_vulnerability_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_vulnerability_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_vulnerability_proto_goTypes = []any{
	(EmbeddedVulnerability_ScoreVersion)(0),      // 0: storage.EmbeddedVulnerability.ScoreVersion
	(EmbeddedVulnerability_VulnerabilityType)(0), // 1: storage.EmbeddedVulnerability.VulnerabilityType
	(*EmbeddedVulnerability)(nil),                // 2: storage.EmbeddedVulnerability
	(*NodeVulnerability)(nil),                    // 3: storage.NodeVulnerability
	(*CVSSV2)(nil),                               // 4: storage.CVSSV2
	(*CVSSV3)(nil),                               // 5: storage.CVSSV3
	(*timestamppb.Timestamp)(nil),                // 6: google.protobuf.Timestamp
	(VulnerabilitySeverity)(0),                   // 7: storage.VulnerabilitySeverity
	(VulnerabilityState)(0),                      // 8: storage.VulnerabilityState
	(*CVSSScore)(nil),                            // 9: storage.CVSSScore
	(*CVEInfo)(nil),                              // 10: storage.CVEInfo
}
var file_storage_vulnerability_proto_depIdxs = []int32{
	0,  // 0: storage.EmbeddedVulnerability.score_version:type_name -> storage.EmbeddedVulnerability.ScoreVersion
	4,  // 1: storage.EmbeddedVulnerability.cvss_v2:type_name -> storage.CVSSV2
	5,  // 2: storage.EmbeddedVulnerability.cvss_v3:type_name -> storage.CVSSV3
	6,  // 3: storage.EmbeddedVulnerability.published_on:type_name -> google.protobuf.Timestamp
	6,  // 4: storage.EmbeddedVulnerability.last_modified:type_name -> google.protobuf.Timestamp
	1,  // 5: storage.EmbeddedVulnerability.vulnerability_type:type_name -> storage.EmbeddedVulnerability.VulnerabilityType
	1,  // 6: storage.EmbeddedVulnerability.vulnerability_types:type_name -> storage.EmbeddedVulnerability.VulnerabilityType
	6,  // 7: storage.EmbeddedVulnerability.suppress_activation:type_name -> google.protobuf.Timestamp
	6,  // 8: storage.EmbeddedVulnerability.suppress_expiry:type_name -> google.protobuf.Timestamp
	6,  // 9: storage.EmbeddedVulnerability.first_system_occurrence:type_name -> google.protobuf.Timestamp
	6,  // 10: storage.EmbeddedVulnerability.first_image_occurrence:type_name -> google.protobuf.Timestamp
	7,  // 11: storage.EmbeddedVulnerability.severity:type_name -> storage.VulnerabilitySeverity
	8,  // 12: storage.EmbeddedVulnerability.state:type_name -> storage.VulnerabilityState
	9,  // 13: storage.EmbeddedVulnerability.cvss_metrics:type_name -> storage.CVSSScore
	10, // 14: storage.NodeVulnerability.cve_base_info:type_name -> storage.CVEInfo
	7,  // 15: storage.NodeVulnerability.severity:type_name -> storage.VulnerabilitySeverity
	6,  // 16: storage.NodeVulnerability.snooze_start:type_name -> google.protobuf.Timestamp
	6,  // 17: storage.NodeVulnerability.snooze_expiry:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_storage_vulnerability_proto_init() }
func file_storage_vulnerability_proto_init() {
	if File_storage_vulnerability_proto != nil {
		return
	}
	file_storage_cve_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_vulnerability_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EmbeddedVulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_vulnerability_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NodeVulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_vulnerability_proto_msgTypes[0].OneofWrappers = []any{
		(*EmbeddedVulnerability_FixedBy)(nil),
	}
	file_storage_vulnerability_proto_msgTypes[1].OneofWrappers = []any{
		(*NodeVulnerability_FixedBy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_vulnerability_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_vulnerability_proto_goTypes,
		DependencyIndexes: file_storage_vulnerability_proto_depIdxs,
		EnumInfos:         file_storage_vulnerability_proto_enumTypes,
		MessageInfos:      file_storage_vulnerability_proto_msgTypes,
	}.Build()
	File_storage_vulnerability_proto = out.File
	file_storage_vulnerability_proto_rawDesc = nil
	file_storage_vulnerability_proto_goTypes = nil
	file_storage_vulnerability_proto_depIdxs = nil
}
