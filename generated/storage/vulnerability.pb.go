// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/vulnerability.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScoreVersion can be deprecated ROX-26066
type EmbeddedVulnerability_ScoreVersion int32

const (
	EmbeddedVulnerability_V2 EmbeddedVulnerability_ScoreVersion = 0 // No unset for automatic backwards compatibility
	EmbeddedVulnerability_V3 EmbeddedVulnerability_ScoreVersion = 1
)

// Enum value maps for EmbeddedVulnerability_ScoreVersion.
var (
	EmbeddedVulnerability_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
	}
	EmbeddedVulnerability_ScoreVersion_value = map[string]int32{
		"V2": 0,
		"V3": 1,
	}
)

func (x EmbeddedVulnerability_ScoreVersion) Enum() *EmbeddedVulnerability_ScoreVersion {
	p := new(EmbeddedVulnerability_ScoreVersion)
	*p = x
	return p
}

func (x EmbeddedVulnerability_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbeddedVulnerability_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_vulnerability_proto_enumTypes[0].Descriptor()
}

func (EmbeddedVulnerability_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_vulnerability_proto_enumTypes[0]
}

func (x EmbeddedVulnerability_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type EmbeddedVulnerability_VulnerabilityType int32

const (
	EmbeddedVulnerability_UNKNOWN_VULNERABILITY   EmbeddedVulnerability_VulnerabilityType = 0
	EmbeddedVulnerability_IMAGE_VULNERABILITY     EmbeddedVulnerability_VulnerabilityType = 1
	EmbeddedVulnerability_K8S_VULNERABILITY       EmbeddedVulnerability_VulnerabilityType = 2
	EmbeddedVulnerability_ISTIO_VULNERABILITY     EmbeddedVulnerability_VulnerabilityType = 3
	EmbeddedVulnerability_NODE_VULNERABILITY      EmbeddedVulnerability_VulnerabilityType = 4
	EmbeddedVulnerability_OPENSHIFT_VULNERABILITY EmbeddedVulnerability_VulnerabilityType = 5
)

// Enum value maps for EmbeddedVulnerability_VulnerabilityType.
var (
	EmbeddedVulnerability_VulnerabilityType_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY",
		1: "IMAGE_VULNERABILITY",
		2: "K8S_VULNERABILITY",
		3: "ISTIO_VULNERABILITY",
		4: "NODE_VULNERABILITY",
		5: "OPENSHIFT_VULNERABILITY",
	}
	EmbeddedVulnerability_VulnerabilityType_value = map[string]int32{
		"UNKNOWN_VULNERABILITY":   0,
		"IMAGE_VULNERABILITY":     1,
		"K8S_VULNERABILITY":       2,
		"ISTIO_VULNERABILITY":     3,
		"NODE_VULNERABILITY":      4,
		"OPENSHIFT_VULNERABILITY": 5,
	}
)

func (x EmbeddedVulnerability_VulnerabilityType) Enum() *EmbeddedVulnerability_VulnerabilityType {
	p := new(EmbeddedVulnerability_VulnerabilityType)
	*p = x
	return p
}

func (x EmbeddedVulnerability_VulnerabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbeddedVulnerability_VulnerabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_vulnerability_proto_enumTypes[1].Descriptor()
}

func (EmbeddedVulnerability_VulnerabilityType) Type() protoreflect.EnumType {
	return &file_storage_vulnerability_proto_enumTypes[1]
}

func (x EmbeddedVulnerability_VulnerabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Next Tag: 25
type EmbeddedVulnerability struct {
	state    protoimpl.MessageState `protogen:"hybrid.v1"`
	Cve      string                 `protobuf:"bytes,1,opt,name=cve" json:"cve,omitempty" search:"CVE,store"` // @gotags: search:"CVE,store"
	Advisory *Advisory              `protobuf:"bytes,24,opt,name=advisory" json:"advisory,omitempty"`
	Cvss     float32                `protobuf:"fixed32,2,opt,name=cvss" json:"cvss,omitempty" search:"CVSS,store"` // @gotags: search:"CVSS,store"
	Summary  string                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Link     string                 `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
	// Types that are valid to be assigned to SetFixedBy:
	//
	//	*EmbeddedVulnerability_FixedBy
	SetFixedBy   isEmbeddedVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	ScoreVersion EmbeddedVulnerability_ScoreVersion `protobuf:"varint,8,opt,name=score_version,json=scoreVersion,enum=storage.EmbeddedVulnerability_ScoreVersion" json:"score_version,omitempty"`
	// CVSSV2 CVSSV3 can be deprecated ROX-26066
	CvssV2       *CVSSV2                `protobuf:"bytes,6,opt,name=cvss_v2,json=cvssV2" json:"cvss_v2,omitempty"`
	CvssV3       *CVSSV3                `protobuf:"bytes,7,opt,name=cvss_v3,json=cvssV3" json:"cvss_v3,omitempty"`
	PublishedOn  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=published_on,json=publishedOn" json:"published_on,omitempty" search:"CVE Published On"` // @gotags: search:"CVE Published On"
	LastModified *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	// For internal purposes only.
	VulnerabilityType  EmbeddedVulnerability_VulnerabilityType   `protobuf:"varint,11,opt,name=vulnerability_type,json=vulnerabilityType,enum=storage.EmbeddedVulnerability_VulnerabilityType" json:"vulnerability_type,omitempty"`
	VulnerabilityTypes []EmbeddedVulnerability_VulnerabilityType `protobuf:"varint,18,rep,packed,name=vulnerability_types,json=vulnerabilityTypes,enum=storage.EmbeddedVulnerability_VulnerabilityType" json:"vulnerability_types,omitempty" hash:"ignore"` // @gotags: hash:"ignore"
	Suppressed         bool                                      `protobuf:"varint,12,opt,name=suppressed" json:"suppressed,omitempty" search:"CVE Snoozed" hash:"ignore"`                                                                                                       // @gotags: search:"CVE Snoozed" hash:"ignore"
	SuppressActivation *timestamppb.Timestamp                    `protobuf:"bytes,13,opt,name=suppress_activation,json=suppressActivation" json:"suppress_activation,omitempty" hash:"ignore"`                                                              // @gotags: hash:"ignore"
	SuppressExpiry     *timestamppb.Timestamp                    `protobuf:"bytes,14,opt,name=suppress_expiry,json=suppressExpiry" json:"suppress_expiry,omitempty" hash:"ignore"`                                                                          // @gotags: hash:"ignore"
	// Time when the CVE was first seen, for this specific distro, in the system.
	FirstSystemOccurrence *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_system_occurrence,json=firstSystemOccurrence" json:"first_system_occurrence,omitempty" policy:"First System Occurrence Timestamp" hash:"ignore"` // @gotags: policy:"First System Occurrence Timestamp" hash:"ignore"
	// Time when the CVE was first seen in this image.
	FirstImageOccurrence *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=first_image_occurrence,json=firstImageOccurrence" json:"first_image_occurrence,omitempty" policy:"First Image Occurrence Timestamp" hash:"ignore"` // @gotags: policy:"First Image Occurrence Timestamp" hash:"ignore"
	Severity             VulnerabilitySeverity  `protobuf:"varint,19,opt,name=severity,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" policy:"Severity"`                   // @gotags: policy:"Severity"
	State                VulnerabilityState     `protobuf:"varint,20,opt,name=state,enum=storage.VulnerabilityState" json:"state,omitempty" search:"Vulnerability State" hash:"ignore"`                            // @gotags: search:"Vulnerability State" hash:"ignore"
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics   []*CVSSScore `protobuf:"bytes,21,rep,name=cvss_metrics,json=cvssMetrics" json:"cvss_metrics,omitempty"`
	NvdCvss       float32      `protobuf:"fixed32,22,opt,name=nvd_cvss,json=nvdCvss" json:"nvd_cvss,omitempty" search:"NVD CVSS,store"` // @gotags: search:"NVD CVSS,store"
	Epss          *EPSS        `protobuf:"bytes,23,opt,name=epss" json:"epss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddedVulnerability) Reset() {
	*x = EmbeddedVulnerability{}
	mi := &file_storage_vulnerability_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedVulnerability) ProtoMessage() {}

func (x *EmbeddedVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_storage_vulnerability_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EmbeddedVulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *EmbeddedVulnerability) GetAdvisory() *Advisory {
	if x != nil {
		return x.Advisory
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *EmbeddedVulnerability) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *EmbeddedVulnerability) GetSetFixedBy() isEmbeddedVulnerability_SetFixedBy {
	if x != nil {
		return x.SetFixedBy
	}
	return nil
}

func (x *EmbeddedVulnerability) Get_FixedBy() string {
	if x != nil {
		if x, ok := x.SetFixedBy.(*EmbeddedVulnerability_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

// Deprecated: Use Get_FixedBy instead.
func (x *EmbeddedVulnerability) GetFixedBy() string {
	return x.Get_FixedBy()
}

func (x *EmbeddedVulnerability) GetScoreVersion() EmbeddedVulnerability_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return EmbeddedVulnerability_V2
}

func (x *EmbeddedVulnerability) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *EmbeddedVulnerability) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *EmbeddedVulnerability) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *EmbeddedVulnerability) GetVulnerabilityType() EmbeddedVulnerability_VulnerabilityType {
	if x != nil {
		return x.VulnerabilityType
	}
	return EmbeddedVulnerability_UNKNOWN_VULNERABILITY
}

func (x *EmbeddedVulnerability) GetVulnerabilityTypes() []EmbeddedVulnerability_VulnerabilityType {
	if x != nil {
		return x.VulnerabilityTypes
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressed() bool {
	if x != nil {
		return x.Suppressed
	}
	return false
}

func (x *EmbeddedVulnerability) GetSuppressActivation() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressActivation
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressExpiry
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstSystemOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSystemOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstImageOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstImageOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *EmbeddedVulnerability) GetState() VulnerabilityState {
	if x != nil {
		return x.State
	}
	return VulnerabilityState_OBSERVED
}

func (x *EmbeddedVulnerability) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

func (x *EmbeddedVulnerability) GetNvdCvss() float32 {
	if x != nil {
		return x.NvdCvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetEpss() *EPSS {
	if x != nil {
		return x.Epss
	}
	return nil
}

func (x *EmbeddedVulnerability) SetCve(v string) {
	x.Cve = v
}

func (x *EmbeddedVulnerability) SetAdvisory(v *Advisory) {
	x.Advisory = v
}

func (x *EmbeddedVulnerability) SetCvss(v float32) {
	x.Cvss = v
}

func (x *EmbeddedVulnerability) SetSummary(v string) {
	x.Summary = v
}

func (x *EmbeddedVulnerability) SetLink(v string) {
	x.Link = v
}

func (x *EmbeddedVulnerability) Set_FixedBy(v string) {
	x.SetFixedBy = &EmbeddedVulnerability_FixedBy{v}
}

func (x *EmbeddedVulnerability) SetScoreVersion(v EmbeddedVulnerability_ScoreVersion) {
	x.ScoreVersion = v
}

func (x *EmbeddedVulnerability) SetCvssV2(v *CVSSV2) {
	x.CvssV2 = v
}

func (x *EmbeddedVulnerability) SetCvssV3(v *CVSSV3) {
	x.CvssV3 = v
}

func (x *EmbeddedVulnerability) SetPublishedOn(v *timestamppb.Timestamp) {
	x.PublishedOn = v
}

func (x *EmbeddedVulnerability) SetLastModified(v *timestamppb.Timestamp) {
	x.LastModified = v
}

func (x *EmbeddedVulnerability) SetVulnerabilityType(v EmbeddedVulnerability_VulnerabilityType) {
	x.VulnerabilityType = v
}

func (x *EmbeddedVulnerability) SetVulnerabilityTypes(v []EmbeddedVulnerability_VulnerabilityType) {
	x.VulnerabilityTypes = v
}

func (x *EmbeddedVulnerability) SetSuppressed(v bool) {
	x.Suppressed = v
}

func (x *EmbeddedVulnerability) SetSuppressActivation(v *timestamppb.Timestamp) {
	x.SuppressActivation = v
}

func (x *EmbeddedVulnerability) SetSuppressExpiry(v *timestamppb.Timestamp) {
	x.SuppressExpiry = v
}

func (x *EmbeddedVulnerability) SetFirstSystemOccurrence(v *timestamppb.Timestamp) {
	x.FirstSystemOccurrence = v
}

func (x *EmbeddedVulnerability) SetFirstImageOccurrence(v *timestamppb.Timestamp) {
	x.FirstImageOccurrence = v
}

func (x *EmbeddedVulnerability) SetSeverity(v VulnerabilitySeverity) {
	x.Severity = v
}

func (x *EmbeddedVulnerability) SetState(v VulnerabilityState) {
	x.State = v
}

func (x *EmbeddedVulnerability) SetCvssMetrics(v []*CVSSScore) {
	x.CvssMetrics = v
}

func (x *EmbeddedVulnerability) SetNvdCvss(v float32) {
	x.NvdCvss = v
}

func (x *EmbeddedVulnerability) SetEpss(v *EPSS) {
	x.Epss = v
}

func (x *EmbeddedVulnerability) HasAdvisory() bool {
	if x == nil {
		return false
	}
	return x.Advisory != nil
}

func (x *EmbeddedVulnerability) HasSetFixedBy() bool {
	if x == nil {
		return false
	}
	return x.SetFixedBy != nil
}

func (x *EmbeddedVulnerability) Has_FixedBy() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetFixedBy.(*EmbeddedVulnerability_FixedBy)
	return ok
}

func (x *EmbeddedVulnerability) HasCvssV2() bool {
	if x == nil {
		return false
	}
	return x.CvssV2 != nil
}

func (x *EmbeddedVulnerability) HasCvssV3() bool {
	if x == nil {
		return false
	}
	return x.CvssV3 != nil
}

func (x *EmbeddedVulnerability) HasPublishedOn() bool {
	if x == nil {
		return false
	}
	return x.PublishedOn != nil
}

func (x *EmbeddedVulnerability) HasLastModified() bool {
	if x == nil {
		return false
	}
	return x.LastModified != nil
}

func (x *EmbeddedVulnerability) HasSuppressActivation() bool {
	if x == nil {
		return false
	}
	return x.SuppressActivation != nil
}

func (x *EmbeddedVulnerability) HasSuppressExpiry() bool {
	if x == nil {
		return false
	}
	return x.SuppressExpiry != nil
}

func (x *EmbeddedVulnerability) HasFirstSystemOccurrence() bool {
	if x == nil {
		return false
	}
	return x.FirstSystemOccurrence != nil
}

func (x *EmbeddedVulnerability) HasFirstImageOccurrence() bool {
	if x == nil {
		return false
	}
	return x.FirstImageOccurrence != nil
}

func (x *EmbeddedVulnerability) HasEpss() bool {
	if x == nil {
		return false
	}
	return x.Epss != nil
}

func (x *EmbeddedVulnerability) ClearAdvisory() {
	x.Advisory = nil
}

func (x *EmbeddedVulnerability) ClearSetFixedBy() {
	x.SetFixedBy = nil
}

func (x *EmbeddedVulnerability) Clear_FixedBy() {
	if _, ok := x.SetFixedBy.(*EmbeddedVulnerability_FixedBy); ok {
		x.SetFixedBy = nil
	}
}

func (x *EmbeddedVulnerability) ClearCvssV2() {
	x.CvssV2 = nil
}

func (x *EmbeddedVulnerability) ClearCvssV3() {
	x.CvssV3 = nil
}

func (x *EmbeddedVulnerability) ClearPublishedOn() {
	x.PublishedOn = nil
}

func (x *EmbeddedVulnerability) ClearLastModified() {
	x.LastModified = nil
}

func (x *EmbeddedVulnerability) ClearSuppressActivation() {
	x.SuppressActivation = nil
}

func (x *EmbeddedVulnerability) ClearSuppressExpiry() {
	x.SuppressExpiry = nil
}

func (x *EmbeddedVulnerability) ClearFirstSystemOccurrence() {
	x.FirstSystemOccurrence = nil
}

func (x *EmbeddedVulnerability) ClearFirstImageOccurrence() {
	x.FirstImageOccurrence = nil
}

func (x *EmbeddedVulnerability) ClearEpss() {
	x.Epss = nil
}

const EmbeddedVulnerability_SetFixedBy_not_set_case case_EmbeddedVulnerability_SetFixedBy = 0
const EmbeddedVulnerability_FixedBy_case case_EmbeddedVulnerability_SetFixedBy = 5

func (x *EmbeddedVulnerability) WhichSetFixedBy() case_EmbeddedVulnerability_SetFixedBy {
	if x == nil {
		return EmbeddedVulnerability_SetFixedBy_not_set_case
	}
	switch x.SetFixedBy.(type) {
	case *EmbeddedVulnerability_FixedBy:
		return EmbeddedVulnerability_FixedBy_case
	default:
		return EmbeddedVulnerability_SetFixedBy_not_set_case
	}
}

type EmbeddedVulnerability_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cve      string
	Advisory *Advisory
	Cvss     float32
	Summary  string
	Link     string
	// Fields of oneof SetFixedBy:
	FixedBy *string
	// -- end of SetFixedBy
	ScoreVersion EmbeddedVulnerability_ScoreVersion
	// CVSSV2 CVSSV3 can be deprecated ROX-26066
	CvssV2       *CVSSV2
	CvssV3       *CVSSV3
	PublishedOn  *timestamppb.Timestamp
	LastModified *timestamppb.Timestamp
	// For internal purposes only.
	VulnerabilityType  EmbeddedVulnerability_VulnerabilityType
	VulnerabilityTypes []EmbeddedVulnerability_VulnerabilityType
	Suppressed         bool
	SuppressActivation *timestamppb.Timestamp
	SuppressExpiry     *timestamppb.Timestamp
	// Time when the CVE was first seen, for this specific distro, in the system.
	FirstSystemOccurrence *timestamppb.Timestamp
	// Time when the CVE was first seen in this image.
	FirstImageOccurrence *timestamppb.Timestamp
	Severity             VulnerabilitySeverity
	State                VulnerabilityState
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics []*CVSSScore
	NvdCvss     float32
	Epss        *EPSS
}

func (b0 EmbeddedVulnerability_builder) Build() *EmbeddedVulnerability {
	m0 := &EmbeddedVulnerability{}
	b, x := &b0, m0
	_, _ = b, x
	x.Cve = b.Cve
	x.Advisory = b.Advisory
	x.Cvss = b.Cvss
	x.Summary = b.Summary
	x.Link = b.Link
	if b.FixedBy != nil {
		x.SetFixedBy = &EmbeddedVulnerability_FixedBy{*b.FixedBy}
	}
	x.ScoreVersion = b.ScoreVersion
	x.CvssV2 = b.CvssV2
	x.CvssV3 = b.CvssV3
	x.PublishedOn = b.PublishedOn
	x.LastModified = b.LastModified
	x.VulnerabilityType = b.VulnerabilityType
	x.VulnerabilityTypes = b.VulnerabilityTypes
	x.Suppressed = b.Suppressed
	x.SuppressActivation = b.SuppressActivation
	x.SuppressExpiry = b.SuppressExpiry
	x.FirstSystemOccurrence = b.FirstSystemOccurrence
	x.FirstImageOccurrence = b.FirstImageOccurrence
	x.Severity = b.Severity
	x.State = b.State
	x.CvssMetrics = b.CvssMetrics
	x.NvdCvss = b.NvdCvss
	x.Epss = b.Epss
	return m0
}

type case_EmbeddedVulnerability_SetFixedBy protoreflect.FieldNumber

func (x case_EmbeddedVulnerability_SetFixedBy) String() string {
	md := file_storage_vulnerability_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isEmbeddedVulnerability_SetFixedBy interface {
	isEmbeddedVulnerability_SetFixedBy()
}

type EmbeddedVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,5,opt,name=fixed_by,json=fixedBy,oneof" search:"Fixed By,store,hidden"` // @gotags: search:"Fixed By,store,hidden"
}

func (*EmbeddedVulnerability_FixedBy) isEmbeddedVulnerability_SetFixedBy() {}

type NodeVulnerability struct {
	state       protoimpl.MessageState `protogen:"hybrid.v1"`
	CveBaseInfo *CVEInfo               `protobuf:"bytes,1,opt,name=cve_base_info,json=cveBaseInfo" json:"cve_base_info,omitempty"`
	Cvss        float32                `protobuf:"fixed32,2,opt,name=cvss" json:"cvss,omitempty" policy:"CVSS"`                                           // @gotags: policy:"CVSS"
	Severity    VulnerabilitySeverity  `protobuf:"varint,3,opt,name=severity,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" policy:"Severity"` // @gotags: policy:"Severity"
	// Types that are valid to be assigned to SetFixedBy:
	//
	//	*NodeVulnerability_FixedBy
	SetFixedBy    isNodeVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	Snoozed       bool                           `protobuf:"varint,5,opt,name=snoozed" json:"snoozed,omitempty" policy:"CVE Snoozed"` // @gotags: policy:"CVE Snoozed"
	SnoozeStart   *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=snooze_start,json=snoozeStart" json:"snooze_start,omitempty"`
	SnoozeExpiry  *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=snooze_expiry,json=snoozeExpiry" json:"snooze_expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeVulnerability) Reset() {
	*x = NodeVulnerability{}
	mi := &file_storage_vulnerability_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVulnerability) ProtoMessage() {}

func (x *NodeVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_storage_vulnerability_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NodeVulnerability) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *NodeVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *NodeVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeVulnerability) GetSetFixedBy() isNodeVulnerability_SetFixedBy {
	if x != nil {
		return x.SetFixedBy
	}
	return nil
}

func (x *NodeVulnerability) Get_FixedBy() string {
	if x != nil {
		if x, ok := x.SetFixedBy.(*NodeVulnerability_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

// Deprecated: Use Get_FixedBy instead.
func (x *NodeVulnerability) GetFixedBy() string {
	return x.Get_FixedBy()
}

func (x *NodeVulnerability) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *NodeVulnerability) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *NodeVulnerability) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *NodeVulnerability) SetCveBaseInfo(v *CVEInfo) {
	x.CveBaseInfo = v
}

func (x *NodeVulnerability) SetCvss(v float32) {
	x.Cvss = v
}

func (x *NodeVulnerability) SetSeverity(v VulnerabilitySeverity) {
	x.Severity = v
}

func (x *NodeVulnerability) Set_FixedBy(v string) {
	x.SetFixedBy = &NodeVulnerability_FixedBy{v}
}

func (x *NodeVulnerability) SetSnoozed(v bool) {
	x.Snoozed = v
}

func (x *NodeVulnerability) SetSnoozeStart(v *timestamppb.Timestamp) {
	x.SnoozeStart = v
}

func (x *NodeVulnerability) SetSnoozeExpiry(v *timestamppb.Timestamp) {
	x.SnoozeExpiry = v
}

func (x *NodeVulnerability) HasCveBaseInfo() bool {
	if x == nil {
		return false
	}
	return x.CveBaseInfo != nil
}

func (x *NodeVulnerability) HasSetFixedBy() bool {
	if x == nil {
		return false
	}
	return x.SetFixedBy != nil
}

func (x *NodeVulnerability) Has_FixedBy() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetFixedBy.(*NodeVulnerability_FixedBy)
	return ok
}

func (x *NodeVulnerability) HasSnoozeStart() bool {
	if x == nil {
		return false
	}
	return x.SnoozeStart != nil
}

func (x *NodeVulnerability) HasSnoozeExpiry() bool {
	if x == nil {
		return false
	}
	return x.SnoozeExpiry != nil
}

func (x *NodeVulnerability) ClearCveBaseInfo() {
	x.CveBaseInfo = nil
}

func (x *NodeVulnerability) ClearSetFixedBy() {
	x.SetFixedBy = nil
}

func (x *NodeVulnerability) Clear_FixedBy() {
	if _, ok := x.SetFixedBy.(*NodeVulnerability_FixedBy); ok {
		x.SetFixedBy = nil
	}
}

func (x *NodeVulnerability) ClearSnoozeStart() {
	x.SnoozeStart = nil
}

func (x *NodeVulnerability) ClearSnoozeExpiry() {
	x.SnoozeExpiry = nil
}

const NodeVulnerability_SetFixedBy_not_set_case case_NodeVulnerability_SetFixedBy = 0
const NodeVulnerability_FixedBy_case case_NodeVulnerability_SetFixedBy = 4

func (x *NodeVulnerability) WhichSetFixedBy() case_NodeVulnerability_SetFixedBy {
	if x == nil {
		return NodeVulnerability_SetFixedBy_not_set_case
	}
	switch x.SetFixedBy.(type) {
	case *NodeVulnerability_FixedBy:
		return NodeVulnerability_FixedBy_case
	default:
		return NodeVulnerability_SetFixedBy_not_set_case
	}
}

type NodeVulnerability_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CveBaseInfo *CVEInfo
	Cvss        float32
	Severity    VulnerabilitySeverity
	// Fields of oneof SetFixedBy:
	FixedBy *string
	// -- end of SetFixedBy
	Snoozed      bool
	SnoozeStart  *timestamppb.Timestamp
	SnoozeExpiry *timestamppb.Timestamp
}

func (b0 NodeVulnerability_builder) Build() *NodeVulnerability {
	m0 := &NodeVulnerability{}
	b, x := &b0, m0
	_, _ = b, x
	x.CveBaseInfo = b.CveBaseInfo
	x.Cvss = b.Cvss
	x.Severity = b.Severity
	if b.FixedBy != nil {
		x.SetFixedBy = &NodeVulnerability_FixedBy{*b.FixedBy}
	}
	x.Snoozed = b.Snoozed
	x.SnoozeStart = b.SnoozeStart
	x.SnoozeExpiry = b.SnoozeExpiry
	return m0
}

type case_NodeVulnerability_SetFixedBy protoreflect.FieldNumber

func (x case_NodeVulnerability_SetFixedBy) String() string {
	md := file_storage_vulnerability_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isNodeVulnerability_SetFixedBy interface {
	isNodeVulnerability_SetFixedBy()
}

type NodeVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,4,opt,name=fixed_by,json=fixedBy,oneof" policy:"Fixed By"` // @gotags: policy:"Fixed By"
}

func (*NodeVulnerability_FixedBy) isNodeVulnerability_SetFixedBy() {}

var File_storage_vulnerability_proto protoreflect.FileDescriptor

const file_storage_vulnerability_proto_rawDesc = "" +
	"\n" +
	"\x1bstorage/vulnerability.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x11storage/cve.proto\x1a!google/protobuf/go_features.proto\"\xe2\v\n" +
	"\x15EmbeddedVulnerability\x12\x10\n" +
	"\x03cve\x18\x01 \x01(\tR\x03cve\x121\n" +
	"\badvisory\x18\x18 \x01(\v2\x11.storage.AdvisoryB\x02(\x01R\badvisory\x12\x12\n" +
	"\x04cvss\x18\x02 \x01(\x02R\x04cvss\x12\x18\n" +
	"\asummary\x18\x03 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x04 \x01(\tR\x04link\x12\x1b\n" +
	"\bfixed_by\x18\x05 \x01(\tH\x00R\afixedBy\x12P\n" +
	"\rscore_version\x18\b \x01(\x0e2+.storage.EmbeddedVulnerability.ScoreVersionR\fscoreVersion\x12(\n" +
	"\acvss_v2\x18\x06 \x01(\v2\x0f.storage.CVSSV2R\x06cvssV2\x12(\n" +
	"\acvss_v3\x18\a \x01(\v2\x0f.storage.CVSSV3R\x06cvssV3\x12A\n" +
	"\fpublished_on\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\vpublishedOn\x12C\n" +
	"\rlast_modified\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\flastModified\x12_\n" +
	"\x12vulnerability_type\x18\v \x01(\x0e20.storage.EmbeddedVulnerability.VulnerabilityTypeR\x11vulnerabilityType\x12a\n" +
	"\x13vulnerability_types\x18\x12 \x03(\x0e20.storage.EmbeddedVulnerability.VulnerabilityTypeR\x12vulnerabilityTypes\x12\x1e\n" +
	"\n" +
	"suppressed\x18\f \x01(\bR\n" +
	"suppressed\x12O\n" +
	"\x13suppress_activation\x18\r \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x12suppressActivation\x12G\n" +
	"\x0fsuppress_expiry\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x0esuppressExpiry\x12V\n" +
	"\x17first_system_occurrence\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x15firstSystemOccurrence\x12T\n" +
	"\x16first_image_occurrence\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\x14firstImageOccurrence\x12:\n" +
	"\bseverity\x18\x13 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x121\n" +
	"\x05state\x18\x14 \x01(\x0e2\x1b.storage.VulnerabilityStateR\x05state\x129\n" +
	"\fcvss_metrics\x18\x15 \x03(\v2\x12.storage.CVSSScoreB\x02(\x01R\vcvssMetrics\x12\x19\n" +
	"\bnvd_cvss\x18\x16 \x01(\x02R\anvdCvss\x12!\n" +
	"\x04epss\x18\x17 \x01(\v2\r.storage.EPSSR\x04epss\"\x1e\n" +
	"\fScoreVersion\x12\x06\n" +
	"\x02V2\x10\x00\x12\x06\n" +
	"\x02V3\x10\x01\"\xac\x01\n" +
	"\x11VulnerabilityType\x12\x19\n" +
	"\x15UNKNOWN_VULNERABILITY\x10\x00\x12\x17\n" +
	"\x13IMAGE_VULNERABILITY\x10\x01\x12\x15\n" +
	"\x11K8S_VULNERABILITY\x10\x02\x12\x17\n" +
	"\x13ISTIO_VULNERABILITY\x10\x03\x12\x16\n" +
	"\x12NODE_VULNERABILITY\x10\x04\x12\x1b\n" +
	"\x17OPENSHIFT_VULNERABILITY\x10\x05B\x0e\n" +
	"\fset_fixed_byJ\x04\b\x11\x10\x12\"\xe8\x02\n" +
	"\x11NodeVulnerability\x124\n" +
	"\rcve_base_info\x18\x01 \x01(\v2\x10.storage.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x02 \x01(\x02R\x04cvss\x12:\n" +
	"\bseverity\x18\x03 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12\x1b\n" +
	"\bfixed_by\x18\x04 \x01(\tH\x00R\afixedBy\x12\x18\n" +
	"\asnoozed\x18\x05 \x01(\bR\asnoozed\x12A\n" +
	"\fsnooze_start\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\vsnoozeStart\x12C\n" +
	"\rsnooze_expiry\x18\a \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\fsnoozeExpiryB\x0e\n" +
	"\fset_fixed_byB>\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_storage_vulnerability_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_vulnerability_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_vulnerability_proto_goTypes = []any{
	(EmbeddedVulnerability_ScoreVersion)(0),      // 0: storage.EmbeddedVulnerability.ScoreVersion
	(EmbeddedVulnerability_VulnerabilityType)(0), // 1: storage.EmbeddedVulnerability.VulnerabilityType
	(*EmbeddedVulnerability)(nil),                // 2: storage.EmbeddedVulnerability
	(*NodeVulnerability)(nil),                    // 3: storage.NodeVulnerability
	(*Advisory)(nil),                             // 4: storage.Advisory
	(*CVSSV2)(nil),                               // 5: storage.CVSSV2
	(*CVSSV3)(nil),                               // 6: storage.CVSSV3
	(*timestamppb.Timestamp)(nil),                // 7: google.protobuf.Timestamp
	(VulnerabilitySeverity)(0),                   // 8: storage.VulnerabilitySeverity
	(VulnerabilityState)(0),                      // 9: storage.VulnerabilityState
	(*CVSSScore)(nil),                            // 10: storage.CVSSScore
	(*EPSS)(nil),                                 // 11: storage.EPSS
	(*CVEInfo)(nil),                              // 12: storage.CVEInfo
}
var file_storage_vulnerability_proto_depIdxs = []int32{
	4,  // 0: storage.EmbeddedVulnerability.advisory:type_name -> storage.Advisory
	0,  // 1: storage.EmbeddedVulnerability.score_version:type_name -> storage.EmbeddedVulnerability.ScoreVersion
	5,  // 2: storage.EmbeddedVulnerability.cvss_v2:type_name -> storage.CVSSV2
	6,  // 3: storage.EmbeddedVulnerability.cvss_v3:type_name -> storage.CVSSV3
	7,  // 4: storage.EmbeddedVulnerability.published_on:type_name -> google.protobuf.Timestamp
	7,  // 5: storage.EmbeddedVulnerability.last_modified:type_name -> google.protobuf.Timestamp
	1,  // 6: storage.EmbeddedVulnerability.vulnerability_type:type_name -> storage.EmbeddedVulnerability.VulnerabilityType
	1,  // 7: storage.EmbeddedVulnerability.vulnerability_types:type_name -> storage.EmbeddedVulnerability.VulnerabilityType
	7,  // 8: storage.EmbeddedVulnerability.suppress_activation:type_name -> google.protobuf.Timestamp
	7,  // 9: storage.EmbeddedVulnerability.suppress_expiry:type_name -> google.protobuf.Timestamp
	7,  // 10: storage.EmbeddedVulnerability.first_system_occurrence:type_name -> google.protobuf.Timestamp
	7,  // 11: storage.EmbeddedVulnerability.first_image_occurrence:type_name -> google.protobuf.Timestamp
	8,  // 12: storage.EmbeddedVulnerability.severity:type_name -> storage.VulnerabilitySeverity
	9,  // 13: storage.EmbeddedVulnerability.state:type_name -> storage.VulnerabilityState
	10, // 14: storage.EmbeddedVulnerability.cvss_metrics:type_name -> storage.CVSSScore
	11, // 15: storage.EmbeddedVulnerability.epss:type_name -> storage.EPSS
	12, // 16: storage.NodeVulnerability.cve_base_info:type_name -> storage.CVEInfo
	8,  // 17: storage.NodeVulnerability.severity:type_name -> storage.VulnerabilitySeverity
	7,  // 18: storage.NodeVulnerability.snooze_start:type_name -> google.protobuf.Timestamp
	7,  // 19: storage.NodeVulnerability.snooze_expiry:type_name -> google.protobuf.Timestamp
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_storage_vulnerability_proto_init() }
func file_storage_vulnerability_proto_init() {
	if File_storage_vulnerability_proto != nil {
		return
	}
	file_storage_cve_proto_init()
	file_storage_vulnerability_proto_msgTypes[0].OneofWrappers = []any{
		(*EmbeddedVulnerability_FixedBy)(nil),
	}
	file_storage_vulnerability_proto_msgTypes[1].OneofWrappers = []any{
		(*NodeVulnerability_FixedBy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_vulnerability_proto_rawDesc), len(file_storage_vulnerability_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_vulnerability_proto_goTypes,
		DependencyIndexes: file_storage_vulnerability_proto_depIdxs,
		EnumInfos:         file_storage_vulnerability_proto_enumTypes,
		MessageInfos:      file_storage_vulnerability_proto_msgTypes,
	}.Build()
	File_storage_vulnerability_proto = out.File
	file_storage_vulnerability_proto_goTypes = nil
	file_storage_vulnerability_proto_depIdxs = nil
}
