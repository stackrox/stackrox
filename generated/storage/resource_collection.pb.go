// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/resource_collection.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchType int32

const (
	MatchType_EXACT MatchType = 0
	MatchType_REGEX MatchType = 1
)

var MatchType_name = map[int32]string{
	0: "EXACT",
	1: "REGEX",
}

var MatchType_value = map[string]int32{
	"EXACT": 0,
	"REGEX": 1,
}

func (x MatchType) String() string {
	return proto.EnumName(MatchType_name, int32(x))
}

func (MatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{0}
}

type ResourceCollection struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Collection ID" sql:"pk"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Collection Name" sql:"unique"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUpdated *types.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	CreatedBy   *SlimUser        `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty" sql:"ignore_labels(User ID)"`
	UpdatedBy   *SlimUser        `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty" sql:"ignore_labels(User ID)"`
	// `resource_selectors` resolve as disjunction (OR) with each-other and with selectors from `embedded_collections`. For MVP, the size of resource_selectors will at most be 1 from UX standpoint.
	ResourceSelectors    []*ResourceSelector                              `protobuf:"bytes,8,rep,name=resource_selectors,json=resourceSelectors,proto3" json:"resource_selectors,omitempty"`
	EmbeddedCollections  []*ResourceCollection_EmbeddedResourceCollection `protobuf:"bytes,9,rep,name=embedded_collections,json=embeddedCollections,proto3" json:"embedded_collections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *ResourceCollection) Reset()         { *m = ResourceCollection{} }
func (m *ResourceCollection) String() string { return proto.CompactTextString(m) }
func (*ResourceCollection) ProtoMessage()    {}
func (*ResourceCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{0}
}
func (m *ResourceCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceCollection.Merge(m, src)
}
func (m *ResourceCollection) XXX_Size() int {
	return m.Size()
}
func (m *ResourceCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceCollection.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceCollection proto.InternalMessageInfo

func (m *ResourceCollection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResourceCollection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceCollection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ResourceCollection) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ResourceCollection) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *ResourceCollection) GetCreatedBy() *SlimUser {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ResourceCollection) GetUpdatedBy() *SlimUser {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

func (m *ResourceCollection) GetResourceSelectors() []*ResourceSelector {
	if m != nil {
		return m.ResourceSelectors
	}
	return nil
}

func (m *ResourceCollection) GetEmbeddedCollections() []*ResourceCollection_EmbeddedResourceCollection {
	if m != nil {
		return m.EmbeddedCollections
	}
	return nil
}

func (m *ResourceCollection) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResourceCollection) Clone() *ResourceCollection {
	if m == nil {
		return nil
	}
	cloned := new(ResourceCollection)
	*cloned = *m

	cloned.CreatedAt = m.CreatedAt.Clone()
	cloned.LastUpdated = m.LastUpdated.Clone()
	cloned.CreatedBy = m.CreatedBy.Clone()
	cloned.UpdatedBy = m.UpdatedBy.Clone()
	if m.ResourceSelectors != nil {
		cloned.ResourceSelectors = make([]*ResourceSelector, len(m.ResourceSelectors))
		for idx, v := range m.ResourceSelectors {
			cloned.ResourceSelectors[idx] = v.Clone()
		}
	}
	if m.EmbeddedCollections != nil {
		cloned.EmbeddedCollections = make([]*ResourceCollection_EmbeddedResourceCollection, len(m.EmbeddedCollections))
		for idx, v := range m.EmbeddedCollections {
			cloned.EmbeddedCollections[idx] = v.Clone()
		}
	}
	return cloned
}

type ResourceCollection_EmbeddedResourceCollection struct {
	// 'id' is searchable to force a separate table
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Embedded Collection ID" sql:"fk(ResourceCollection:id),restrict-delete"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceCollection_EmbeddedResourceCollection) Reset() {
	*m = ResourceCollection_EmbeddedResourceCollection{}
}
func (m *ResourceCollection_EmbeddedResourceCollection) String() string {
	return proto.CompactTextString(m)
}
func (*ResourceCollection_EmbeddedResourceCollection) ProtoMessage() {}
func (*ResourceCollection_EmbeddedResourceCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{0, 0}
}
func (m *ResourceCollection_EmbeddedResourceCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceCollection_EmbeddedResourceCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceCollection_EmbeddedResourceCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceCollection_EmbeddedResourceCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceCollection_EmbeddedResourceCollection.Merge(m, src)
}
func (m *ResourceCollection_EmbeddedResourceCollection) XXX_Size() int {
	return m.Size()
}
func (m *ResourceCollection_EmbeddedResourceCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceCollection_EmbeddedResourceCollection.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceCollection_EmbeddedResourceCollection proto.InternalMessageInfo

func (m *ResourceCollection_EmbeddedResourceCollection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResourceCollection_EmbeddedResourceCollection) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResourceCollection_EmbeddedResourceCollection) Clone() *ResourceCollection_EmbeddedResourceCollection {
	if m == nil {
		return nil
	}
	cloned := new(ResourceCollection_EmbeddedResourceCollection)
	*cloned = *m

	return cloned
}

type ResourceSelector struct {
	// `rules` resolve as a conjunction (AND).
	Rules                []*SelectorRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResourceSelector) Reset()         { *m = ResourceSelector{} }
func (m *ResourceSelector) String() string { return proto.CompactTextString(m) }
func (*ResourceSelector) ProtoMessage()    {}
func (*ResourceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{1}
}
func (m *ResourceSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSelector.Merge(m, src)
}
func (m *ResourceSelector) XXX_Size() int {
	return m.Size()
}
func (m *ResourceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSelector proto.InternalMessageInfo

func (m *ResourceSelector) GetRules() []*SelectorRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ResourceSelector) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResourceSelector) Clone() *ResourceSelector {
	if m == nil {
		return nil
	}
	cloned := new(ResourceSelector)
	*cloned = *m

	if m.Rules != nil {
		cloned.Rules = make([]*SelectorRule, len(m.Rules))
		for idx, v := range m.Rules {
			cloned.Rules[idx] = v.Clone()
		}
	}
	return cloned
}

type SelectorRule struct {
	// `field_name` can be one of the following:
	// - Cluster
	// - Cluster Label
	// - Namespace
	// - Namespace Label
	// - Namespace Annotation
	// - Deployment
	// - Deployment Label
	// - Deployment Annotation
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// 'operator' only supports disjunction (OR) currently
	Operator BooleanOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=storage.BooleanOperator" json:"operator,omitempty"`
	// `values` resolve as a conjunction (AND) or disjunction (OR) depending on operator. For MVP, only OR is supported from UX standpoint.
	Values               []*RuleValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SelectorRule) Reset()         { *m = SelectorRule{} }
func (m *SelectorRule) String() string { return proto.CompactTextString(m) }
func (*SelectorRule) ProtoMessage()    {}
func (*SelectorRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{2}
}
func (m *SelectorRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectorRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectorRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectorRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectorRule.Merge(m, src)
}
func (m *SelectorRule) XXX_Size() int {
	return m.Size()
}
func (m *SelectorRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectorRule.DiscardUnknown(m)
}

var xxx_messageInfo_SelectorRule proto.InternalMessageInfo

func (m *SelectorRule) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *SelectorRule) GetOperator() BooleanOperator {
	if m != nil {
		return m.Operator
	}
	return BooleanOperator_OR
}

func (m *SelectorRule) GetValues() []*RuleValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *SelectorRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SelectorRule) Clone() *SelectorRule {
	if m == nil {
		return nil
	}
	cloned := new(SelectorRule)
	*cloned = *m

	if m.Values != nil {
		cloned.Values = make([]*RuleValue, len(m.Values))
		for idx, v := range m.Values {
			cloned.Values[idx] = v.Clone()
		}
	}
	return cloned
}

type RuleValue struct {
	Value                string    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	MatchType            MatchType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=storage.MatchType" json:"match_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RuleValue) Reset()         { *m = RuleValue{} }
func (m *RuleValue) String() string { return proto.CompactTextString(m) }
func (*RuleValue) ProtoMessage()    {}
func (*RuleValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef506d17363ff2fd, []int{3}
}
func (m *RuleValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleValue.Merge(m, src)
}
func (m *RuleValue) XXX_Size() int {
	return m.Size()
}
func (m *RuleValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleValue.DiscardUnknown(m)
}

var xxx_messageInfo_RuleValue proto.InternalMessageInfo

func (m *RuleValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RuleValue) GetMatchType() MatchType {
	if m != nil {
		return m.MatchType
	}
	return MatchType_EXACT
}

func (m *RuleValue) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuleValue) Clone() *RuleValue {
	if m == nil {
		return nil
	}
	cloned := new(RuleValue)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.MatchType", MatchType_name, MatchType_value)
	proto.RegisterType((*ResourceCollection)(nil), "storage.ResourceCollection")
	proto.RegisterType((*ResourceCollection_EmbeddedResourceCollection)(nil), "storage.ResourceCollection.EmbeddedResourceCollection")
	proto.RegisterType((*ResourceSelector)(nil), "storage.ResourceSelector")
	proto.RegisterType((*SelectorRule)(nil), "storage.SelectorRule")
	proto.RegisterType((*RuleValue)(nil), "storage.RuleValue")
}

func init() { proto.RegisterFile("storage/resource_collection.proto", fileDescriptor_ef506d17363ff2fd) }

var fileDescriptor_ef506d17363ff2fd = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0x66, 0x81, 0x16, 0x76, 0x4a, 0x0c, 0x8c, 0x98, 0x2c, 0x8d, 0xb6, 0xcb, 0x1a, 0x93, 0x82,
	0xba, 0x8d, 0x40, 0x4c, 0x24, 0x21, 0x86, 0x42, 0xa3, 0x1c, 0x94, 0x64, 0x29, 0x86, 0x78, 0x69,
	0xb6, 0xbb, 0x8f, 0x32, 0x61, 0xb6, 0xb3, 0xcc, 0xcc, 0x1a, 0x7b, 0xf4, 0xe0, 0xd9, 0xab, 0x3f,
	0xc9, 0xa3, 0xbf, 0xa0, 0x31, 0xf8, 0x0f, 0xfa, 0x0b, 0xcc, 0x4e, 0x67, 0x77, 0x1b, 0xc0, 0x78,
	0xf0, 0x36, 0xfd, 0xde, 0xf7, 0x7d, 0xf3, 0xed, 0x9b, 0xf7, 0x8a, 0xd6, 0x85, 0x64, 0xdc, 0xef,
	0x43, 0x93, 0x83, 0x60, 0x09, 0x0f, 0xa0, 0x1b, 0x30, 0x4a, 0x21, 0x90, 0x84, 0x0d, 0xdc, 0x98,
	0x33, 0xc9, 0xf0, 0x82, 0xa6, 0x54, 0xeb, 0x7d, 0xc6, 0xfa, 0x14, 0x9a, 0x0a, 0xee, 0x25, 0xe7,
	0x4d, 0x49, 0x22, 0x10, 0xd2, 0x8f, 0xe2, 0x09, 0xb3, 0xba, 0xda, 0x67, 0x7d, 0xa6, 0x8e, 0xcd,
	0xf4, 0xa4, 0x51, 0x9c, 0x5d, 0x91, 0x08, 0xe0, 0x19, 0x33, 0xc3, 0x62, 0x46, 0x49, 0x30, 0x9c,
	0xa0, 0xce, 0xd7, 0x32, 0xc2, 0x9e, 0xce, 0x71, 0x90, 0xc7, 0xc0, 0xdb, 0x68, 0x96, 0x84, 0x96,
	0x61, 0x1b, 0x0d, 0xb3, 0xf5, 0x78, 0x3c, 0xaa, 0xd7, 0x05, 0xf8, 0x3c, 0xb8, 0xd8, 0x75, 0x0a,
	0x8e, 0x7d, 0x74, 0xe8, 0xd8, 0xe2, 0x8a, 0xee, 0x3a, 0xf1, 0xa5, 0xe3, 0xcd, 0x92, 0x10, 0xef,
	0xa1, 0xf9, 0x81, 0x1f, 0x81, 0x35, 0xab, 0x64, 0x1b, 0xe3, 0x51, 0xfd, 0xc9, 0x1d, 0xb2, 0xf7,
	0x7e, 0x04, 0x5a, 0x98, 0x0c, 0xc8, 0x55, 0x02, 0x8e, 0xa7, 0x64, 0xd8, 0x46, 0x95, 0x10, 0x44,
	0xc0, 0x49, 0x9c, 0xf2, 0xac, 0xb9, 0xd4, 0xc5, 0x9b, 0x86, 0xf0, 0x2b, 0x84, 0x02, 0x0e, 0xbe,
	0x84, 0xb0, 0xeb, 0x4b, 0x6b, 0xde, 0x36, 0x1a, 0x95, 0xad, 0xaa, 0x3b, 0x69, 0x91, 0x9b, 0xb5,
	0xc8, 0xed, 0x64, 0x2d, 0xf2, 0x4c, 0xcd, 0xde, 0x97, 0x78, 0x0f, 0x2d, 0x51, 0x5f, 0xc8, 0x6e,
	0x12, 0x87, 0x29, 0x62, 0x95, 0xfe, 0x29, 0xae, 0xa4, 0xfc, 0xd3, 0x09, 0x1d, 0x7b, 0xc5, 0xcd,
	0xbd, 0xa1, 0x55, 0x56, 0xe2, 0x15, 0x57, 0x77, 0xd4, 0x3d, 0xa1, 0x24, 0x3a, 0x15, 0xc0, 0x5b,
	0xf6, 0x78, 0x54, 0x7f, 0xa8, 0x3e, 0x8d, 0xf4, 0x07, 0x8c, 0x43, 0x97, 0xfa, 0x3d, 0xa0, 0xa2,
	0x91, 0x16, 0xed, 0xa3, 0xc3, 0x0d, 0x27, 0x8f, 0xd4, 0x1a, 0xa6, 0x9e, 0x3a, 0x4d, 0xea, 0xb9,
	0xf0, 0x1f, 0x9e, 0xda, 0xa6, 0x35, 0xc4, 0x6f, 0x11, 0xce, 0xa7, 0x4a, 0x40, 0xda, 0x72, 0xc6,
	0x85, 0xb5, 0x68, 0xcf, 0x35, 0x2a, 0x5b, 0x6b, 0xb9, 0x77, 0xf6, 0xe0, 0x27, 0x9a, 0xe1, 0xad,
	0xf0, 0x1b, 0x88, 0xc0, 0x04, 0xad, 0x42, 0xd4, 0x83, 0x30, 0x84, 0x70, 0x6a, 0x3e, 0x85, 0x65,
	0x2a, 0xaf, 0x97, 0xb7, 0xbc, 0x8a, 0x17, 0x76, 0xdb, 0x5a, 0x77, 0xbb, 0xe4, 0xdd, 0xcf, 0x3c,
	0x0b, 0x4c, 0x54, 0xbf, 0x18, 0xa8, 0xfa, 0x77, 0x0d, 0x0e, 0xa6, 0x66, 0xf1, 0x64, 0x3c, 0xaa,
	0x1f, 0x67, 0x43, 0x95, 0x69, 0xec, 0xbb, 0x86, 0xf2, 0xfc, 0xb2, 0x71, 0xdb, 0x6b, 0x97, 0x84,
	0x1b, 0xcf, 0x38, 0x08, 0xc9, 0x49, 0x20, 0x9f, 0x87, 0x40, 0x41, 0x82, 0x9a, 0x5d, 0xe7, 0x35,
	0x5a, 0xbe, 0xd9, 0x15, 0xfc, 0x14, 0x95, 0x78, 0x42, 0x41, 0x58, 0x86, 0xfa, 0xe6, 0x07, 0xc5,
	0xdb, 0x64, 0x7d, 0x4b, 0x28, 0x78, 0x13, 0x8e, 0xf3, 0xcd, 0x40, 0x4b, 0xd3, 0x38, 0x7e, 0x84,
	0xd0, 0x39, 0x01, 0x1a, 0x76, 0xd5, 0x4e, 0xa8, 0xf8, 0x9e, 0xa9, 0x90, 0x74, 0x03, 0xf0, 0x0e,
	0x5a, 0x64, 0x31, 0x70, 0x5f, 0x32, 0xae, 0x16, 0xe6, 0xde, 0x96, 0x95, 0xfb, 0xb7, 0x18, 0xa3,
	0xe0, 0x0f, 0x8e, 0x75, 0xdd, 0xcb, 0x99, 0x78, 0x13, 0x95, 0x3f, 0xf9, 0x34, 0x01, 0x61, 0xcd,
	0xa9, 0x4c, 0xb8, 0x78, 0x87, 0x84, 0xc2, 0x87, 0xb4, 0xe4, 0x69, 0x86, 0xd3, 0x41, 0x66, 0x0e,
	0xe2, 0x55, 0x54, 0x52, 0xb0, 0x0e, 0x32, 0xf9, 0x81, 0x5f, 0x20, 0x14, 0xf9, 0x32, 0xb8, 0xe8,
	0xca, 0x61, 0x0c, 0x3a, 0x46, 0x61, 0xf9, 0x2e, 0x2d, 0x75, 0x86, 0x31, 0x78, 0x66, 0x94, 0x1d,
	0x37, 0xd7, 0x91, 0x99, 0xe3, 0xd8, 0x44, 0xa5, 0xf6, 0xd9, 0xfe, 0x41, 0x67, 0x79, 0x26, 0x3d,
	0x7a, 0xed, 0x37, 0xed, 0xb3, 0x65, 0xa3, 0xb5, 0xf3, 0xe3, 0xba, 0x66, 0xfc, 0xbc, 0xae, 0x19,
	0xbf, 0xae, 0x6b, 0xc6, 0xf7, 0xdf, 0xb5, 0x19, 0xb4, 0x46, 0x98, 0x2b, 0xa4, 0x1f, 0x5c, 0x72,
	0xf6, 0x79, 0xb2, 0x6b, 0xd9, 0x25, 0x1f, 0xb3, 0xbf, 0xba, 0x5e, 0x59, 0xe1, 0xdb, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0x45, 0xb4, 0x7a, 0x1f, 0x05, 0x00, 0x00,
}

func (m *ResourceCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EmbeddedCollections) > 0 {
		for iNdEx := len(m.EmbeddedCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmbeddedCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ResourceSelectors) > 0 {
		for iNdEx := len(m.ResourceSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UpdatedBy != nil {
		{
			size, err := m.UpdatedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedBy != nil {
		{
			size, err := m.CreatedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceCollection_EmbeddedResourceCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceCollection_EmbeddedResourceCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceCollection_EmbeddedResourceCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SelectorRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectorRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectorRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Operator != 0 {
		i = encodeVarintResourceCollection(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchType != 0 {
		i = encodeVarintResourceCollection(dAtA, i, uint64(m.MatchType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintResourceCollection(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourceCollection(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourceCollection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.CreatedBy != nil {
		l = m.CreatedBy.Size()
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.UpdatedBy != nil {
		l = m.UpdatedBy.Size()
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if len(m.ResourceSelectors) > 0 {
		for _, e := range m.ResourceSelectors {
			l = e.Size()
			n += 1 + l + sovResourceCollection(uint64(l))
		}
	}
	if len(m.EmbeddedCollections) > 0 {
		for _, e := range m.EmbeddedCollections {
			l = e.Size()
			n += 1 + l + sovResourceCollection(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceCollection_EmbeddedResourceCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovResourceCollection(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectorRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.Operator != 0 {
		n += 1 + sovResourceCollection(uint64(m.Operator))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovResourceCollection(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovResourceCollection(uint64(l))
	}
	if m.MatchType != 0 {
		n += 1 + sovResourceCollection(uint64(m.MatchType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResourceCollection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourceCollection(x uint64) (n int) {
	return sovResourceCollection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBy == nil {
				m.CreatedBy = &SlimUser{}
			}
			if err := m.CreatedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedBy == nil {
				m.UpdatedBy = &SlimUser{}
			}
			if err := m.UpdatedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceSelectors = append(m.ResourceSelectors, &ResourceSelector{})
			if err := m.ResourceSelectors[len(m.ResourceSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddedCollections = append(m.EmbeddedCollections, &ResourceCollection_EmbeddedResourceCollection{})
			if err := m.EmbeddedCollections[len(m.EmbeddedCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceCollection_EmbeddedResourceCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmbeddedResourceCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmbeddedResourceCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &SelectorRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectorRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectorRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectorRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= BooleanOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &RuleValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchType", wireType)
			}
			m.MatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchType |= MatchType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceCollection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceCollection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourceCollection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourceCollection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourceCollection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourceCollection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceCollection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourceCollection = fmt.Errorf("proto: unexpected end of group")
)
