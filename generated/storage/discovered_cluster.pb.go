// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/discovered_cluster.proto

package storage

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiscoveredCluster_Status int32

const (
	DiscoveredCluster_STATUS_UNSPECIFIED DiscoveredCluster_Status = 0
	DiscoveredCluster_STATUS_SECURED     DiscoveredCluster_Status = 1
	DiscoveredCluster_STATUS_UNSECURED   DiscoveredCluster_Status = 2
)

var DiscoveredCluster_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_SECURED",
	2: "STATUS_UNSECURED",
}

var DiscoveredCluster_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_SECURED":     1,
	"STATUS_UNSECURED":   2,
}

func (x DiscoveredCluster_Status) String() string {
	return proto.EnumName(DiscoveredCluster_Status_name, int32(x))
}

func (DiscoveredCluster_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01c648cee3275093, []int{0, 0}
}

type DiscoveredCluster_Metadata_ProviderType int32

const (
	DiscoveredCluster_Metadata_PROVIDER_TYPE_UNSPECIFIED DiscoveredCluster_Metadata_ProviderType = 0
	DiscoveredCluster_Metadata_PROVIDER_TYPE_AWS         DiscoveredCluster_Metadata_ProviderType = 1
	DiscoveredCluster_Metadata_PROVIDER_TYPE_GCP         DiscoveredCluster_Metadata_ProviderType = 2
	DiscoveredCluster_Metadata_PROVIDER_TYPE_AZURE       DiscoveredCluster_Metadata_ProviderType = 3
)

var DiscoveredCluster_Metadata_ProviderType_name = map[int32]string{
	0: "PROVIDER_TYPE_UNSPECIFIED",
	1: "PROVIDER_TYPE_AWS",
	2: "PROVIDER_TYPE_GCP",
	3: "PROVIDER_TYPE_AZURE",
}

var DiscoveredCluster_Metadata_ProviderType_value = map[string]int32{
	"PROVIDER_TYPE_UNSPECIFIED": 0,
	"PROVIDER_TYPE_AWS":         1,
	"PROVIDER_TYPE_GCP":         2,
	"PROVIDER_TYPE_AZURE":       3,
}

func (x DiscoveredCluster_Metadata_ProviderType) String() string {
	return proto.EnumName(DiscoveredCluster_Metadata_ProviderType_name, int32(x))
}

func (DiscoveredCluster_Metadata_ProviderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01c648cee3275093, []int{0, 0, 0}
}

// DiscoveredCluster is the storage representation of discovered clusters.
//
// Refer to v1.DiscoveredCluster for a more detailed doc.
type DiscoveredCluster struct {
	Id                   string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"` // @gotags: sql:"pk,type(uuid)"
	Metadata             *DiscoveredCluster_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status               DiscoveredCluster_Status    `protobuf:"varint,3,opt,name=status,proto3,enum=storage.DiscoveredCluster_Status" json:"status,omitempty" search:"Cluster Status,hidden"` // @gotags: search:"Cluster Status,hidden"
	SourceId             string                      `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty" search:"Integration ID,hidden" sql:"fk(CloudSource:id),no-fk-constraint,type(uuid)"`                    // @gotags: search:"Integration ID,hidden" sql:"fk(CloudSource:id),no-fk-constraint,type(uuid)"
	LastUpdatedAt        *types.Timestamp            `protobuf:"bytes,5,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty" search:"Last Updated,hidden"`   // @gotags: search:"Last Updated,hidden"
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DiscoveredCluster) Reset()         { *m = DiscoveredCluster{} }
func (m *DiscoveredCluster) String() string { return proto.CompactTextString(m) }
func (*DiscoveredCluster) ProtoMessage()    {}
func (*DiscoveredCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_01c648cee3275093, []int{0}
}
func (m *DiscoveredCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredCluster.Merge(m, src)
}
func (m *DiscoveredCluster) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredCluster.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredCluster proto.InternalMessageInfo

func (m *DiscoveredCluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveredCluster) GetMetadata() *DiscoveredCluster_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DiscoveredCluster) GetStatus() DiscoveredCluster_Status {
	if m != nil {
		return m.Status
	}
	return DiscoveredCluster_STATUS_UNSPECIFIED
}

func (m *DiscoveredCluster) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *DiscoveredCluster) GetLastUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedAt
	}
	return nil
}

func (m *DiscoveredCluster) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredCluster) Clone() *DiscoveredCluster {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredCluster)
	*cloned = *m

	cloned.Metadata = m.Metadata.Clone()
	cloned.LastUpdatedAt = m.LastUpdatedAt.Clone()
	return cloned
}

type DiscoveredCluster_Metadata struct {
	Id                   string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Cluster,hidden"`                                    // @gotags: search:"Cluster,hidden"
	Type                 ClusterMetadata_Type                    `protobuf:"varint,3,opt,name=type,proto3,enum=storage.ClusterMetadata_Type" json:"type,omitempty" search:"Cluster Type,hidden"` // @gotags: search:"Cluster Type,hidden"
	ProviderType         DiscoveredCluster_Metadata_ProviderType `protobuf:"varint,4,opt,name=provider_type,json=providerType,proto3,enum=storage.DiscoveredCluster_Metadata_ProviderType" json:"provider_type,omitempty"`
	Region               string                                  `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	FirstDiscoveredAt    *types.Timestamp                        `protobuf:"bytes,6,opt,name=first_discovered_at,json=firstDiscoveredAt,proto3" json:"first_discovered_at,omitempty" search:"Cluster Discovered Time,hidden"` // @gotags: search:"Cluster Discovered Time,hidden"
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *DiscoveredCluster_Metadata) Reset()         { *m = DiscoveredCluster_Metadata{} }
func (m *DiscoveredCluster_Metadata) String() string { return proto.CompactTextString(m) }
func (*DiscoveredCluster_Metadata) ProtoMessage()    {}
func (*DiscoveredCluster_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_01c648cee3275093, []int{0, 0}
}
func (m *DiscoveredCluster_Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredCluster_Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredCluster_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredCluster_Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredCluster_Metadata.Merge(m, src)
}
func (m *DiscoveredCluster_Metadata) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredCluster_Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredCluster_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredCluster_Metadata proto.InternalMessageInfo

func (m *DiscoveredCluster_Metadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetType() ClusterMetadata_Type {
	if m != nil {
		return m.Type
	}
	return ClusterMetadata_UNSPECIFIED
}

func (m *DiscoveredCluster_Metadata) GetProviderType() DiscoveredCluster_Metadata_ProviderType {
	if m != nil {
		return m.ProviderType
	}
	return DiscoveredCluster_Metadata_PROVIDER_TYPE_UNSPECIFIED
}

func (m *DiscoveredCluster_Metadata) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetFirstDiscoveredAt() *types.Timestamp {
	if m != nil {
		return m.FirstDiscoveredAt
	}
	return nil
}

func (m *DiscoveredCluster_Metadata) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredCluster_Metadata) Clone() *DiscoveredCluster_Metadata {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredCluster_Metadata)
	*cloned = *m

	cloned.FirstDiscoveredAt = m.FirstDiscoveredAt.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.DiscoveredCluster_Status", DiscoveredCluster_Status_name, DiscoveredCluster_Status_value)
	proto.RegisterEnum("storage.DiscoveredCluster_Metadata_ProviderType", DiscoveredCluster_Metadata_ProviderType_name, DiscoveredCluster_Metadata_ProviderType_value)
	proto.RegisterType((*DiscoveredCluster)(nil), "storage.DiscoveredCluster")
	proto.RegisterType((*DiscoveredCluster_Metadata)(nil), "storage.DiscoveredCluster.Metadata")
}

func init() { proto.RegisterFile("storage/discovered_cluster.proto", fileDescriptor_01c648cee3275093) }

var fileDescriptor_01c648cee3275093 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x5d, 0xda, 0xae, 0xb4, 0x1f, 0x5b, 0x49, 0x3d, 0x36, 0xb2, 0xa2, 0x95, 0x52, 0x2e, 0x3d,
	0xb9, 0x30, 0x4e, 0x08, 0x09, 0xd4, 0xb5, 0x01, 0x75, 0x12, 0x50, 0x39, 0x0d, 0x88, 0x5d, 0x22,
	0xaf, 0xf6, 0xaa, 0x88, 0x76, 0x8e, 0x6c, 0x67, 0x62, 0x7f, 0x83, 0x13, 0x3f, 0x89, 0x23, 0x3f,
	0x01, 0xca, 0x1f, 0x41, 0x38, 0x4e, 0xd7, 0xad, 0x12, 0x70, 0x8a, 0xfd, 0xf9, 0xbd, 0x97, 0xf7,
	0x9e, 0x0d, 0x2d, 0xa5, 0x85, 0xa4, 0x53, 0xde, 0x65, 0xb1, 0x9a, 0x88, 0x0b, 0x2e, 0x39, 0x8b,
	0x26, 0xb3, 0x54, 0x69, 0x2e, 0x71, 0x22, 0x85, 0x16, 0xe8, 0x96, 0x45, 0x34, 0x1e, 0x4c, 0x85,
	0x98, 0xce, 0x78, 0xd7, 0x8c, 0x4f, 0xd3, 0xb3, 0xae, 0x8e, 0xe7, 0x5c, 0x69, 0x3a, 0x4f, 0x32,
	0x64, 0x63, 0x37, 0xd7, 0xba, 0x26, 0xd0, 0xfe, 0xb9, 0x09, 0xf5, 0xc1, 0x52, 0xbd, 0x9f, 0x9d,
	0xa1, 0x1a, 0x14, 0x62, 0xe6, 0x39, 0x2d, 0xa7, 0x53, 0x25, 0x85, 0x98, 0xa1, 0x97, 0x50, 0x99,
	0x73, 0x4d, 0x19, 0xd5, 0xd4, 0x2b, 0xb4, 0x9c, 0xce, 0xed, 0xc3, 0x47, 0xd8, 0xea, 0xe1, 0x35,
	0x36, 0x7e, 0x63, 0xa1, 0x64, 0x49, 0x42, 0xcf, 0xa0, 0xac, 0x34, 0xd5, 0xa9, 0xf2, 0x8a, 0x2d,
	0xa7, 0x53, 0x3b, 0x7c, 0xf8, 0x17, 0x7a, 0x60, 0x80, 0xc4, 0x12, 0xd0, 0x7d, 0xa8, 0x2a, 0x91,
	0xca, 0x09, 0x8f, 0x62, 0xe6, 0x95, 0x8c, 0xa5, 0x4a, 0x36, 0x18, 0x32, 0x74, 0x04, 0x77, 0x66,
	0x54, 0xe9, 0x28, 0x4d, 0x18, 0xd5, 0x9c, 0x45, 0x54, 0x7b, 0x9b, 0xc6, 0x5f, 0x03, 0x67, 0x85,
	0xe0, 0xbc, 0x10, 0x3c, 0xce, 0x0b, 0x21, 0xdb, 0x7f, 0x28, 0x61, 0xc6, 0xe8, 0xe9, 0xc6, 0x97,
	0x22, 0x54, 0x72, 0xcb, 0x6b, 0xc9, 0x11, 0x94, 0xce, 0xe9, 0x9c, 0x9b, 0xd4, 0x55, 0x62, 0xd6,
	0xe8, 0x09, 0x94, 0xf4, 0x65, 0xc2, 0x6d, 0x94, 0x83, 0x65, 0x14, 0x1b, 0x20, 0xd7, 0xc2, 0xe3,
	0xcb, 0x84, 0x13, 0x03, 0x45, 0x21, 0x6c, 0x27, 0x52, 0x5c, 0xc4, 0x8c, 0xcb, 0xc8, 0x70, 0x4b,
	0x86, 0xfb, 0xf8, 0x3f, 0x5a, 0xc4, 0x23, 0x4b, 0x34, 0x72, 0x5b, 0xc9, 0xca, 0x0e, 0xed, 0x41,
	0x59, 0xf2, 0x69, 0x2c, 0xce, 0x4d, 0xea, 0x2a, 0xb1, 0x3b, 0x74, 0x0c, 0x3b, 0x67, 0xb1, 0x54,
	0x3a, 0x5a, 0x79, 0x38, 0x54, 0x7b, 0xe5, 0x7f, 0x56, 0x53, 0x37, 0xb4, 0x2b, 0x33, 0x3d, 0xdd,
	0xd6, 0xb0, 0xb5, 0xea, 0x00, 0x1d, 0xc0, 0xfe, 0x88, 0xbc, 0x7b, 0x3f, 0x1c, 0xf8, 0x24, 0x1a,
	0x7f, 0x1c, 0xf9, 0x51, 0xf8, 0x36, 0x18, 0xf9, 0xfd, 0xe1, 0xab, 0xa1, 0x3f, 0x70, 0x37, 0xd0,
	0x2e, 0xd4, 0xaf, 0x1f, 0xf7, 0x3e, 0x04, 0xae, 0xb3, 0x3e, 0x7e, 0xdd, 0x1f, 0xb9, 0x05, 0x74,
	0x0f, 0x76, 0x6e, 0xa0, 0x4f, 0x42, 0xe2, 0xbb, 0xc5, 0xf6, 0x31, 0x94, 0xb3, 0x77, 0x80, 0xf6,
	0x00, 0x05, 0xe3, 0xde, 0x38, 0x0c, 0x6e, 0xfc, 0x08, 0x41, 0xcd, 0xce, 0x03, 0xbf, 0x1f, 0x12,
	0x7f, 0xe0, 0x3a, 0xe8, 0x2e, 0xb8, 0x57, 0x58, 0x3b, 0x2d, 0x1c, 0xbd, 0xf8, 0xb6, 0x68, 0x3a,
	0xdf, 0x17, 0x4d, 0xe7, 0xc7, 0xa2, 0xe9, 0x7c, 0xfd, 0xd5, 0xdc, 0x80, 0xfd, 0x58, 0x60, 0xa5,
	0xe9, 0xe4, 0x93, 0x14, 0x9f, 0xb3, 0x1a, 0xf2, 0x8b, 0x38, 0xa9, 0xe3, 0xae, 0x5d, 0x3e, 0xb7,
	0xdf, 0xd3, 0xb2, 0x41, 0x3c, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x26, 0x97, 0xa0, 0x8f,
	0x03, 0x00, 0x00,
}

func (m *DiscoveredCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastUpdatedAt != nil {
		{
			size, err := m.LastUpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredCluster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceId) > 0 {
		i -= len(m.SourceId)
		copy(dAtA[i:], m.SourceId)
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(len(m.SourceId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredCluster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredCluster_Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredCluster_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredCluster_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstDiscoveredAt != nil {
		{
			size, err := m.FirstDiscoveredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredCluster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProviderType != 0 {
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(m.ProviderType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredCluster(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscoveredCluster(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscoveredCluster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscoveredCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDiscoveredCluster(uint64(m.Status))
	}
	l = len(m.SourceId)
	if l > 0 {
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.LastUpdatedAt != nil {
		l = m.LastUpdatedAt.Size()
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoveredCluster_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDiscoveredCluster(uint64(m.Type))
	}
	if m.ProviderType != 0 {
		n += 1 + sovDiscoveredCluster(uint64(m.ProviderType))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.FirstDiscoveredAt != nil {
		l = m.FirstDiscoveredAt.Size()
		n += 1 + l + sovDiscoveredCluster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDiscoveredCluster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscoveredCluster(x uint64) (n int) {
	return sovDiscoveredCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiscoveredCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DiscoveredCluster_Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DiscoveredCluster_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedAt == nil {
				m.LastUpdatedAt = &types.Timestamp{}
			}
			if err := m.LastUpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredCluster_Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClusterMetadata_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderType", wireType)
			}
			m.ProviderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderType |= DiscoveredCluster_Metadata_ProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDiscoveredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstDiscoveredAt == nil {
				m.FirstDiscoveredAt = &types.Timestamp{}
			}
			if err := m.FirstDiscoveredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscoveredCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscoveredCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveredCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscoveredCluster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiscoveredCluster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiscoveredCluster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiscoveredCluster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscoveredCluster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiscoveredCluster = fmt.Errorf("proto: unexpected end of group")
)
