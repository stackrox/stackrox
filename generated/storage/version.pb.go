// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/version.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Version struct {
	// This is a strictly incrementing integer describing the DB version.
	SeqNum int32 `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty" search:"Current Sequence Number"`
	// Associated version metadata. (For example, the corresponding product version.)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" search:"Version"`
	// Last time version was updated
	LastPersisted *types.Timestamp `protobuf:"bytes,3,opt,name=last_persisted,json=lastPersisted,proto3" json:"last_persisted,omitempty" search:"Last Persisted"`
	// The minimum sequence number supported by this iteration of the database.  Rollbacks
	// to versions prior to this sequence number are not supported.
	MinSeqNum            int32    `protobuf:"varint,4,opt,name=min_seq_num,json=minSeqNum,proto3" json:"min_seq_num,omitempty" search:"Minimum Sequence Number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6abc271df6a8e78, []int{0}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetSeqNum() int32 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Version) GetLastPersisted() *types.Timestamp {
	if m != nil {
		return m.LastPersisted
	}
	return nil
}

func (m *Version) GetMinSeqNum() int32 {
	if m != nil {
		return m.MinSeqNum
	}
	return 0
}

func (m *Version) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Version) Clone() *Version {
	if m == nil {
		return nil
	}
	cloned := new(Version)
	*cloned = *m

	cloned.LastPersisted = m.LastPersisted.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*Version)(nil), "storage.Version")
}

func init() { proto.RegisterFile("storage/version.proto", fileDescriptor_e6abc271df6a8e78) }

var fileDescriptor_e6abc271df6a8e78 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0xdd, 0xa8, 0x39, 0xb2, 0x41, 0x91, 0x23, 0x62, 0x8c, 0x70, 0xb7, 0x1c, 0x16, 0xa9,
	0xf6, 0x40, 0xad, 0x04, 0x9b, 0xd3, 0x52, 0x83, 0x24, 0x62, 0x61, 0x61, 0xd8, 0xc4, 0xf1, 0x5c,
	0xcc, 0xee, 0x26, 0xfb, 0x47, 0x7c, 0x14, 0x2b, 0x9f, 0xc7, 0xd2, 0x27, 0x08, 0x12, 0xdf, 0x20,
	0x4f, 0x20, 0xb9, 0xbb, 0xb5, 0x49, 0x37, 0xf3, 0x31, 0xf3, 0xcd, 0xfc, 0xf8, 0xf0, 0xbe, 0xb1,
	0x4a, 0xb3, 0x1c, 0xd2, 0x37, 0xd0, 0x86, 0x2b, 0x49, 0xa7, 0x5a, 0x59, 0x15, 0x06, 0x95, 0xdc,
	0x89, 0x73, 0xa5, 0xf2, 0x09, 0xa4, 0x85, 0x3c, 0x72, 0xcf, 0xa9, 0xe5, 0x02, 0x8c, 0x65, 0x62,
	0x5a, 0x4e, 0x76, 0x5a, 0xb9, 0xca, 0x55, 0x51, 0xa6, 0xab, 0xaa, 0x54, 0x93, 0xcf, 0x1a, 0x0e,
	0xee, 0x4b, 0xc7, 0xf0, 0x02, 0x07, 0x06, 0x66, 0x43, 0xe9, 0x44, 0x1b, 0x11, 0xd4, 0xdd, 0xce,
	0x8e, 0x97, 0xf3, 0x98, 0x18, 0x60, 0x7a, 0xfc, 0x72, 0x9e, 0x5c, 0x3a, 0xad, 0x41, 0x5a, 0x32,
	0x80, 0x99, 0x03, 0x39, 0x06, 0xd2, 0x73, 0x62, 0x04, 0x3a, 0xe9, 0xd7, 0x0d, 0xcc, 0x7a, 0x4e,
	0x84, 0x14, 0x07, 0xd5, 0x6f, 0xed, 0x1a, 0x41, 0xdd, 0x46, 0xd6, 0x5a, 0xce, 0xe3, 0x3d, 0xbf,
	0x5e, 0x1d, 0x49, 0xfa, 0x7e, 0x28, 0x7c, 0xc4, 0xbb, 0x13, 0x66, 0xec, 0x70, 0xba, 0xea, 0x8d,
	0x85, 0xa7, 0xf6, 0x26, 0x41, 0xdd, 0xe6, 0x49, 0x87, 0x96, 0x28, 0xd4, 0xa3, 0xd0, 0x3b, 0x8f,
	0x92, 0x1d, 0x2d, 0xe7, 0xf1, 0x81, 0xb7, 0xbc, 0x66, 0xc6, 0x92, 0x5b, 0xbf, 0x9d, 0xf4, 0x77,
	0x56, 0x76, 0xff, 0x7d, 0x78, 0x85, 0x9b, 0x82, 0xcb, 0xa1, 0x47, 0xda, 0x5a, 0x47, 0xba, 0xe1,
	0x92, 0x0b, 0x27, 0xd6, 0x91, 0x1a, 0x82, 0xcb, 0x41, 0x41, 0x95, 0x9d, 0x7d, 0x2d, 0x22, 0xf4,
	0xbd, 0x88, 0xd0, 0xcf, 0x22, 0x42, 0x1f, 0xbf, 0xd1, 0x06, 0x3e, 0xe4, 0x8a, 0x1a, 0xcb, 0xc6,
	0xaf, 0x5a, 0xbd, 0x97, 0x3f, 0xd2, 0x2a, 0x84, 0x07, 0x9f, 0xc6, 0xa8, 0x5e, 0xe8, 0xa7, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xe4, 0xcd, 0x68, 0xb6, 0x01, 0x00, 0x00,
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinSeqNum != 0 {
		i = encodeVarintVersion(dAtA, i, uint64(m.MinSeqNum))
		i--
		dAtA[i] = 0x20
	}
	if m.LastPersisted != nil {
		{
			size, err := m.LastPersisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVersion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqNum != 0 {
		i = encodeVarintVersion(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVersion(dAtA []byte, offset int, v uint64) int {
	offset -= sovVersion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNum != 0 {
		n += 1 + sovVersion(uint64(m.SeqNum))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	if m.LastPersisted != nil {
		l = m.LastPersisted.Size()
		n += 1 + l + sovVersion(uint64(l))
	}
	if m.MinSeqNum != 0 {
		n += 1 + sovVersion(uint64(m.MinSeqNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVersion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVersion(x uint64) (n int) {
	return sovVersion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPersisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPersisted == nil {
				m.LastPersisted = &types.Timestamp{}
			}
			if err := m.LastPersisted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSeqNum", wireType)
			}
			m.MinSeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSeqNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVersion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVersion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVersion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVersion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVersion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVersion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVersion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVersion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVersion = fmt.Errorf("proto: unexpected end of group")
)
