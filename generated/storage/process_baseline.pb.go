// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/process_baseline.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContainerNameAndBaselineStatus_BaselineStatus int32

const (
	ContainerNameAndBaselineStatus_INVALID       ContainerNameAndBaselineStatus_BaselineStatus = 0
	ContainerNameAndBaselineStatus_NOT_GENERATED ContainerNameAndBaselineStatus_BaselineStatus = 1
	ContainerNameAndBaselineStatus_UNLOCKED      ContainerNameAndBaselineStatus_BaselineStatus = 2
	ContainerNameAndBaselineStatus_LOCKED        ContainerNameAndBaselineStatus_BaselineStatus = 3
)

var ContainerNameAndBaselineStatus_BaselineStatus_name = map[int32]string{
	0: "INVALID",
	1: "NOT_GENERATED",
	2: "UNLOCKED",
	3: "LOCKED",
}

var ContainerNameAndBaselineStatus_BaselineStatus_value = map[string]int32{
	"INVALID":       0,
	"NOT_GENERATED": 1,
	"UNLOCKED":      2,
	"LOCKED":        3,
}

func (x ContainerNameAndBaselineStatus_BaselineStatus) String() string {
	return proto.EnumName(ContainerNameAndBaselineStatus_BaselineStatus_name, int32(x))
}

func (ContainerNameAndBaselineStatus_BaselineStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{4, 0}
}

type ProcessBaselineKey struct {
	// The idea is for the keys to be flexible.
	// Only certain combinations of these will be supported.
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" search:"Deployment ID,hidden"`
	ContainerName        string   `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ClusterId            string   `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,hidden,store"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace,hidden,store"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessBaselineKey) Reset()         { *m = ProcessBaselineKey{} }
func (m *ProcessBaselineKey) String() string { return proto.CompactTextString(m) }
func (*ProcessBaselineKey) ProtoMessage()    {}
func (*ProcessBaselineKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{0}
}
func (m *ProcessBaselineKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessBaselineKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessBaselineKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessBaselineKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBaselineKey.Merge(m, src)
}
func (m *ProcessBaselineKey) XXX_Size() int {
	return m.Size()
}
func (m *ProcessBaselineKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBaselineKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBaselineKey proto.InternalMessageInfo

func (m *ProcessBaselineKey) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessBaselineKey) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ProcessBaselineKey) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessBaselineKey) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessBaselineKey) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessBaselineKey) Clone() *ProcessBaselineKey {
	if m == nil {
		return nil
	}
	cloned := new(ProcessBaselineKey)
	*cloned = *m

	return cloned
}

type ProcessBaseline struct {
	Id                      string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`
	Key                     *ProcessBaselineKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Elements                []*BaselineElement  `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
	ElementGraveyard        []*BaselineElement  `protobuf:"bytes,8,rep,name=element_graveyard,json=elementGraveyard,proto3" json:"element_graveyard,omitempty" search:"-"`
	Created                 *types.Timestamp    `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	UserLockedTimestamp     *types.Timestamp    `protobuf:"bytes,5,opt,name=user_locked_timestamp,json=userLockedTimestamp,proto3" json:"user_locked_timestamp,omitempty"`
	StackRoxLockedTimestamp *types.Timestamp    `protobuf:"bytes,6,opt,name=stack_rox_locked_timestamp,json=stackRoxLockedTimestamp,proto3" json:"stack_rox_locked_timestamp,omitempty"`
	LastUpdate              *types.Timestamp    `protobuf:"bytes,7,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}            `json:"-"`
	XXX_unrecognized        []byte              `json:"-"`
	XXX_sizecache           int32               `json:"-"`
}

func (m *ProcessBaseline) Reset()         { *m = ProcessBaseline{} }
func (m *ProcessBaseline) String() string { return proto.CompactTextString(m) }
func (*ProcessBaseline) ProtoMessage()    {}
func (*ProcessBaseline) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{1}
}
func (m *ProcessBaseline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessBaseline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessBaseline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessBaseline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBaseline.Merge(m, src)
}
func (m *ProcessBaseline) XXX_Size() int {
	return m.Size()
}
func (m *ProcessBaseline) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBaseline.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBaseline proto.InternalMessageInfo

func (m *ProcessBaseline) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessBaseline) GetKey() *ProcessBaselineKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProcessBaseline) GetElements() []*BaselineElement {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *ProcessBaseline) GetElementGraveyard() []*BaselineElement {
	if m != nil {
		return m.ElementGraveyard
	}
	return nil
}

func (m *ProcessBaseline) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ProcessBaseline) GetUserLockedTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserLockedTimestamp
	}
	return nil
}

func (m *ProcessBaseline) GetStackRoxLockedTimestamp() *types.Timestamp {
	if m != nil {
		return m.StackRoxLockedTimestamp
	}
	return nil
}

func (m *ProcessBaseline) GetLastUpdate() *types.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

func (m *ProcessBaseline) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessBaseline) Clone() *ProcessBaseline {
	if m == nil {
		return nil
	}
	cloned := new(ProcessBaseline)
	*cloned = *m

	cloned.Key = m.Key.Clone()
	if m.Elements != nil {
		cloned.Elements = make([]*BaselineElement, len(m.Elements))
		for idx, v := range m.Elements {
			cloned.Elements[idx] = v.Clone()
		}
	}
	if m.ElementGraveyard != nil {
		cloned.ElementGraveyard = make([]*BaselineElement, len(m.ElementGraveyard))
		for idx, v := range m.ElementGraveyard {
			cloned.ElementGraveyard[idx] = v.Clone()
		}
	}
	cloned.Created = m.Created.Clone()
	cloned.UserLockedTimestamp = m.UserLockedTimestamp.Clone()
	cloned.StackRoxLockedTimestamp = m.StackRoxLockedTimestamp.Clone()
	cloned.LastUpdate = m.LastUpdate.Clone()
	return cloned
}

type BaselineElement struct {
	Element              *BaselineItem `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	Auto                 bool          `protobuf:"varint,2,opt,name=auto,proto3" json:"auto,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BaselineElement) Reset()         { *m = BaselineElement{} }
func (m *BaselineElement) String() string { return proto.CompactTextString(m) }
func (*BaselineElement) ProtoMessage()    {}
func (*BaselineElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{2}
}
func (m *BaselineElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaselineElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaselineElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaselineElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaselineElement.Merge(m, src)
}
func (m *BaselineElement) XXX_Size() int {
	return m.Size()
}
func (m *BaselineElement) XXX_DiscardUnknown() {
	xxx_messageInfo_BaselineElement.DiscardUnknown(m)
}

var xxx_messageInfo_BaselineElement proto.InternalMessageInfo

func (m *BaselineElement) GetElement() *BaselineItem {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *BaselineElement) GetAuto() bool {
	if m != nil {
		return m.Auto
	}
	return false
}

func (m *BaselineElement) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BaselineElement) Clone() *BaselineElement {
	if m == nil {
		return nil
	}
	cloned := new(BaselineElement)
	*cloned = *m

	cloned.Element = m.Element.Clone()
	return cloned
}

type BaselineItem struct {
	// Types that are valid to be assigned to Item:
	//	*BaselineItem_ProcessName
	Item                 isBaselineItem_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BaselineItem) Reset()         { *m = BaselineItem{} }
func (m *BaselineItem) String() string { return proto.CompactTextString(m) }
func (*BaselineItem) ProtoMessage()    {}
func (*BaselineItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{3}
}
func (m *BaselineItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaselineItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaselineItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaselineItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaselineItem.Merge(m, src)
}
func (m *BaselineItem) XXX_Size() int {
	return m.Size()
}
func (m *BaselineItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BaselineItem.DiscardUnknown(m)
}

var xxx_messageInfo_BaselineItem proto.InternalMessageInfo

type isBaselineItem_Item interface {
	isBaselineItem_Item()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isBaselineItem_Item
}

type BaselineItem_ProcessName struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3,oneof" json:"process_name,omitempty"`
}

func (*BaselineItem_ProcessName) isBaselineItem_Item() {}
func (m *BaselineItem_ProcessName) Clone() isBaselineItem_Item {
	if m == nil {
		return nil
	}
	cloned := new(BaselineItem_ProcessName)
	*cloned = *m

	return cloned
}

func (m *BaselineItem) GetItem() isBaselineItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BaselineItem) GetProcessName() string {
	if x, ok := m.GetItem().(*BaselineItem_ProcessName); ok {
		return x.ProcessName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BaselineItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BaselineItem_ProcessName)(nil),
	}
}

func (m *BaselineItem) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BaselineItem) Clone() *BaselineItem {
	if m == nil {
		return nil
	}
	cloned := new(BaselineItem)
	*cloned = *m

	if m.Item != nil {
		cloned.Item = m.Item.Clone()
	}
	return cloned
}

// `ContainerNameAndBaselineStatus` represents a cached result
// of process evaluation on a specific container name.
type ContainerNameAndBaselineStatus struct {
	ContainerName              string                                        `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	BaselineStatus             ContainerNameAndBaselineStatus_BaselineStatus `protobuf:"varint,2,opt,name=baseline_status,json=baselineStatus,proto3,enum=storage.ContainerNameAndBaselineStatus_BaselineStatus" json:"baseline_status,omitempty"`
	AnomalousProcessesExecuted bool                                          `protobuf:"varint,3,opt,name=anomalous_processes_executed,json=anomalousProcessesExecuted,proto3" json:"anomalous_processes_executed,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                      `json:"-"`
	XXX_unrecognized           []byte                                        `json:"-"`
	XXX_sizecache              int32                                         `json:"-"`
}

func (m *ContainerNameAndBaselineStatus) Reset()         { *m = ContainerNameAndBaselineStatus{} }
func (m *ContainerNameAndBaselineStatus) String() string { return proto.CompactTextString(m) }
func (*ContainerNameAndBaselineStatus) ProtoMessage()    {}
func (*ContainerNameAndBaselineStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{4}
}
func (m *ContainerNameAndBaselineStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerNameAndBaselineStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerNameAndBaselineStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerNameAndBaselineStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNameAndBaselineStatus.Merge(m, src)
}
func (m *ContainerNameAndBaselineStatus) XXX_Size() int {
	return m.Size()
}
func (m *ContainerNameAndBaselineStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNameAndBaselineStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNameAndBaselineStatus proto.InternalMessageInfo

func (m *ContainerNameAndBaselineStatus) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ContainerNameAndBaselineStatus) GetBaselineStatus() ContainerNameAndBaselineStatus_BaselineStatus {
	if m != nil {
		return m.BaselineStatus
	}
	return ContainerNameAndBaselineStatus_INVALID
}

func (m *ContainerNameAndBaselineStatus) GetAnomalousProcessesExecuted() bool {
	if m != nil {
		return m.AnomalousProcessesExecuted
	}
	return false
}

func (m *ContainerNameAndBaselineStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ContainerNameAndBaselineStatus) Clone() *ContainerNameAndBaselineStatus {
	if m == nil {
		return nil
	}
	cloned := new(ContainerNameAndBaselineStatus)
	*cloned = *m

	return cloned
}

// `ProcessBaselineResults` represent cached results of process baseline evaluation.
type ProcessBaselineResults struct {
	DeploymentId         string                            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" sql:"pk"`
	ClusterId            string                            `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Namespace            string                            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BaselineStatuses     []*ContainerNameAndBaselineStatus `protobuf:"bytes,2,rep,name=baseline_statuses,json=baselineStatuses,proto3" json:"baseline_statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ProcessBaselineResults) Reset()         { *m = ProcessBaselineResults{} }
func (m *ProcessBaselineResults) String() string { return proto.CompactTextString(m) }
func (*ProcessBaselineResults) ProtoMessage()    {}
func (*ProcessBaselineResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_f494f50fa1cf9c47, []int{5}
}
func (m *ProcessBaselineResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessBaselineResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessBaselineResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessBaselineResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBaselineResults.Merge(m, src)
}
func (m *ProcessBaselineResults) XXX_Size() int {
	return m.Size()
}
func (m *ProcessBaselineResults) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBaselineResults.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBaselineResults proto.InternalMessageInfo

func (m *ProcessBaselineResults) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *ProcessBaselineResults) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ProcessBaselineResults) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProcessBaselineResults) GetBaselineStatuses() []*ContainerNameAndBaselineStatus {
	if m != nil {
		return m.BaselineStatuses
	}
	return nil
}

func (m *ProcessBaselineResults) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessBaselineResults) Clone() *ProcessBaselineResults {
	if m == nil {
		return nil
	}
	cloned := new(ProcessBaselineResults)
	*cloned = *m

	if m.BaselineStatuses != nil {
		cloned.BaselineStatuses = make([]*ContainerNameAndBaselineStatus, len(m.BaselineStatuses))
		for idx, v := range m.BaselineStatuses {
			cloned.BaselineStatuses[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("storage.ContainerNameAndBaselineStatus_BaselineStatus", ContainerNameAndBaselineStatus_BaselineStatus_name, ContainerNameAndBaselineStatus_BaselineStatus_value)
	proto.RegisterType((*ProcessBaselineKey)(nil), "storage.ProcessBaselineKey")
	proto.RegisterType((*ProcessBaseline)(nil), "storage.ProcessBaseline")
	proto.RegisterType((*BaselineElement)(nil), "storage.BaselineElement")
	proto.RegisterType((*BaselineItem)(nil), "storage.BaselineItem")
	proto.RegisterType((*ContainerNameAndBaselineStatus)(nil), "storage.ContainerNameAndBaselineStatus")
	proto.RegisterType((*ProcessBaselineResults)(nil), "storage.ProcessBaselineResults")
}

func init() { proto.RegisterFile("storage/process_baseline.proto", fileDescriptor_f494f50fa1cf9c47) }

var fileDescriptor_f494f50fa1cf9c47 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0xec, 0x10, 0x3b, 0xc7, 0x8e, 0xe3, 0x2c, 0x14, 0x84, 0x49, 0xed, 0xa0, 0xc2, 0xd0,
	0x8b, 0x56, 0x19, 0x4c, 0x07, 0x66, 0xda, 0x1b, 0xe2, 0xd8, 0x14, 0xd3, 0x8c, 0xdb, 0x59, 0x92,
	0x32, 0xc3, 0x8d, 0x66, 0x2d, 0x1d, 0x5c, 0x8d, 0x25, 0xad, 0xd1, 0xae, 0x18, 0xfb, 0x09, 0xb8,
	0xe0, 0x05, 0x78, 0x12, 0x9e, 0x81, 0x4b, 0x9e, 0xc0, 0xc3, 0x84, 0x37, 0xf0, 0x15, 0x97, 0x8c,
	0xd6, 0x5a, 0xd5, 0x3f, 0x99, 0x84, 0xbb, 0xe3, 0xdd, 0xef, 0x7c, 0x67, 0xcf, 0xe7, 0xef, 0x1c,
	0x41, 0x53, 0x48, 0x1e, 0xb3, 0x11, 0x9e, 0x4e, 0x62, 0xee, 0xa2, 0x10, 0xce, 0x90, 0x09, 0x0c,
	0xfc, 0x08, 0xed, 0x49, 0xcc, 0x25, 0x27, 0xa5, 0xec, 0xbe, 0xd1, 0x1a, 0x71, 0x3e, 0x0a, 0x14,
	0x4e, 0xf2, 0x61, 0xf2, 0xd3, 0xa9, 0xf4, 0x43, 0x14, 0x92, 0x85, 0x93, 0x25, 0xb2, 0xf1, 0xde,
	0x88, 0x8f, 0xb8, 0x0a, 0x4f, 0xd3, 0x68, 0x79, 0x6a, 0xfd, 0x56, 0x00, 0xf2, 0x6a, 0x49, 0xdd,
	0xc9, 0x98, 0x5f, 0xe0, 0x8c, 0x7c, 0x03, 0x07, 0x1e, 0x4e, 0x02, 0x3e, 0x0b, 0x31, 0x92, 0x8e,
	0xef, 0x99, 0xc6, 0x89, 0xf1, 0x70, 0xbf, 0xf3, 0xf1, 0x62, 0xde, 0xba, 0x2f, 0x90, 0xc5, 0xee,
	0x9b, 0xa7, 0x56, 0x37, 0x07, 0x9c, 0xf4, 0xbb, 0x8f, 0xde, 0xf8, 0x9e, 0x87, 0x91, 0x45, 0xab,
	0x6f, 0xf3, 0xfa, 0x1e, 0xf9, 0x14, 0x6a, 0x2e, 0x8f, 0x24, 0xf3, 0x23, 0x8c, 0x9d, 0x88, 0x85,
	0x68, 0x16, 0x52, 0x22, 0x7a, 0x90, 0x9f, 0x0e, 0x58, 0x88, 0xe4, 0x1c, 0xc0, 0x0d, 0x12, 0x21,
	0x31, 0x4e, 0x6b, 0x15, 0x55, 0xad, 0x4f, 0x16, 0xf3, 0xd6, 0x89, 0xae, 0x75, 0xbe, 0xbc, 0x7d,
	0x5b, 0xe8, 0x51, 0xda, 0x37, 0x5a, 0x74, 0x3f, 0xcb, 0xeb, 0x7b, 0xe4, 0x0c, 0xf6, 0xd3, 0x0a,
	0x62, 0xc2, 0x5c, 0x34, 0x77, 0x15, 0xc7, 0x83, 0xc5, 0xbc, 0xd5, 0xd2, 0x1c, 0x03, 0x7d, 0xb9,
	0x49, 0x91, 0x67, 0x59, 0xbf, 0xee, 0xc2, 0xe1, 0x86, 0x1a, 0xe4, 0x18, 0x0a, 0x79, 0xff, 0xd5,
	0xc5, 0xbc, 0x55, 0x16, 0x3f, 0x07, 0x4f, 0xad, 0xc9, 0xd8, 0xa2, 0x05, 0xdf, 0x23, 0x8f, 0xa1,
	0x38, 0xc6, 0x99, 0xea, 0xaa, 0xd2, 0xfe, 0xc8, 0xce, 0xfe, 0x0d, 0x7b, 0x5b, 0x52, 0x9a, 0xe2,
	0xc8, 0x13, 0x28, 0x63, 0x80, 0xa9, 0x38, 0xc2, 0x2c, 0x9e, 0x14, 0x1f, 0x56, 0xda, 0x66, 0x9e,
	0xa3, 0xc1, 0xbd, 0x25, 0x80, 0xe6, 0x48, 0x72, 0x05, 0x47, 0x59, 0xec, 0x8c, 0x62, 0xf6, 0x0b,
	0xce, 0x58, 0xec, 0x99, 0xe5, 0xdb, 0xd3, 0x3b, 0xb5, 0xc5, 0xbc, 0x05, 0xba, 0xf7, 0xc7, 0x16,
	0xad, 0x67, 0x14, 0xcf, 0x35, 0x03, 0x79, 0x02, 0x25, 0x37, 0x46, 0x26, 0xd1, 0x53, 0x72, 0x55,
	0xda, 0x0d, 0x7b, 0x69, 0x22, 0x5b, 0x9b, 0xc8, 0xbe, 0xd4, 0x26, 0xa2, 0x1a, 0x4a, 0x06, 0x70,
	0x2f, 0x11, 0x18, 0x3b, 0x01, 0x77, 0xc7, 0xe8, 0x39, 0xb9, 0xcd, 0xcc, 0x77, 0xee, 0xe4, 0x78,
	0x37, 0x4d, 0xbc, 0x50, 0x79, 0xf9, 0x21, 0xf9, 0x01, 0x1a, 0x42, 0x32, 0x77, 0xec, 0xc4, 0x7c,
	0xba, 0x4d, 0xba, 0x77, 0x27, 0xe9, 0x07, 0x2a, 0x9b, 0xf2, 0xe9, 0x26, 0xf1, 0x33, 0xa8, 0x04,
	0x4c, 0x48, 0x27, 0x99, 0x78, 0x4c, 0xa2, 0x59, 0xba, 0x93, 0x09, 0x52, 0xf8, 0x95, 0x42, 0x5b,
	0xaf, 0xe1, 0x70, 0x43, 0x50, 0x72, 0x0a, 0xa5, 0x4c, 0x42, 0xe5, 0x86, 0x4a, 0xfb, 0xde, 0x96,
	0xf6, 0x7d, 0x89, 0x21, 0xd5, 0x28, 0x42, 0x60, 0x97, 0x25, 0x92, 0x2b, 0x73, 0x94, 0xa9, 0x8a,
	0xad, 0x67, 0x50, 0x5d, 0x05, 0x93, 0x07, 0x50, 0xd5, 0x93, 0xad, 0xc6, 0x43, 0xf9, 0xec, 0xdb,
	0x1d, 0x5a, 0xc9, 0x4e, 0x53, 0xd3, 0x76, 0xf6, 0x60, 0xd7, 0x97, 0x18, 0x5a, 0x7f, 0x14, 0xa0,
	0x79, 0xbe, 0x3a, 0x38, 0x67, 0x91, 0xa7, 0xd9, 0xbe, 0x97, 0x4c, 0x26, 0xe2, 0x86, 0x81, 0x33,
	0x6e, 0x1a, 0x38, 0x07, 0x0e, 0xf5, 0x22, 0x71, 0x84, 0xca, 0x54, 0xaf, 0xac, 0xb5, 0xbf, 0xcc,
	0x7b, 0xba, 0xbd, 0x90, 0xbd, 0xfe, 0x93, 0xd6, 0x86, 0xeb, 0xef, 0xf8, 0x1a, 0x8e, 0x59, 0xc4,
	0x43, 0x16, 0xf0, 0x44, 0x38, 0x59, 0x2f, 0x28, 0x1c, 0x9c, 0xa2, 0x9b, 0xa4, 0x86, 0x2b, 0x2a,
	0x4d, 0x1a, 0x39, 0xe6, 0x95, 0x86, 0xf4, 0x32, 0x84, 0xf5, 0x1d, 0xd4, 0x36, 0x7a, 0xab, 0x40,
	0xa9, 0x3f, 0x78, 0x7d, 0x76, 0xd1, 0xef, 0xd6, 0x77, 0xc8, 0x11, 0x1c, 0x0c, 0x5e, 0x5e, 0x3a,
	0xcf, 0x7b, 0x83, 0x1e, 0x3d, 0xbb, 0xec, 0x75, 0xeb, 0x06, 0xa9, 0x42, 0xf9, 0x6a, 0x70, 0xf1,
	0xf2, 0xfc, 0x45, 0xaf, 0x5b, 0x2f, 0x10, 0x80, 0xbd, 0x2c, 0x2e, 0x5a, 0x73, 0x03, 0xde, 0xdf,
	0x18, 0x49, 0x8a, 0x22, 0x09, 0xa4, 0x20, 0x9f, 0xdf, 0xbc, 0xe9, 0xd6, 0x27, 0x7d, 0x7d, 0xa9,
	0xdd, 0xdf, 0xde, 0x56, 0xab, 0x7b, 0xe8, 0x78, 0x6b, 0x0f, 0xad, 0xac, 0x18, 0x72, 0x09, 0x47,
	0x1b, 0xca, 0x63, 0xaa, 0x7d, 0x3a, 0xcb, 0x9f, 0xfd, 0x4f, 0xed, 0x69, 0x7d, 0x5d, 0x6c, 0x14,
	0x9d, 0xaf, 0xfe, 0xbc, 0x6e, 0x1a, 0x7f, 0x5d, 0x37, 0x8d, 0xbf, 0xaf, 0x9b, 0xc6, 0xef, 0xff,
	0x34, 0x77, 0xe0, 0x43, 0x9f, 0xdb, 0x6a, 0x32, 0x62, 0x3e, 0x5d, 0x9a, 0x5d, 0xb3, 0xff, 0xa8,
	0xbf, 0x19, 0xff, 0x1a, 0xc6, 0x70, 0x4f, 0x5d, 0x7d, 0xf1, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x09, 0x0d, 0xc2, 0x26, 0x68, 0x06, 0x00, 0x00,
}

func (m *ProcessBaselineKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessBaselineKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessBaselineKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessBaseline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessBaseline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessBaseline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ElementGraveyard) > 0 {
		for iNdEx := len(m.ElementGraveyard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ElementGraveyard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.LastUpdate != nil {
		{
			size, err := m.LastUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StackRoxLockedTimestamp != nil {
		{
			size, err := m.StackRoxLockedTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UserLockedTimestamp != nil {
		{
			size, err := m.UserLockedTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaselineElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaselineElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaselineElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auto {
		i--
		if m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Element != nil {
		{
			size, err := m.Element.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaselineItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaselineItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaselineItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaselineItem_ProcessName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaselineItem_ProcessName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProcessName)
	copy(dAtA[i:], m.ProcessName)
	i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.ProcessName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ContainerNameAndBaselineStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerNameAndBaselineStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerNameAndBaselineStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AnomalousProcessesExecuted {
		i--
		if m.AnomalousProcessesExecuted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BaselineStatus != 0 {
		i = encodeVarintProcessBaseline(dAtA, i, uint64(m.BaselineStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContainerName) > 0 {
		i -= len(m.ContainerName)
		copy(dAtA[i:], m.ContainerName)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.ContainerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessBaselineResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessBaselineResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessBaselineResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaselineStatuses) > 0 {
		for iNdEx := len(m.BaselineStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaselineStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessBaseline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintProcessBaseline(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessBaseline(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessBaseline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProcessBaselineKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessBaseline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovProcessBaseline(uint64(l))
		}
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.UserLockedTimestamp != nil {
		l = m.UserLockedTimestamp.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.StackRoxLockedTimestamp != nil {
		l = m.StackRoxLockedTimestamp.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.LastUpdate != nil {
		l = m.LastUpdate.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if len(m.ElementGraveyard) > 0 {
		for _, e := range m.ElementGraveyard {
			l = e.Size()
			n += 1 + l + sovProcessBaseline(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaselineElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Element != nil {
		l = m.Element.Size()
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.Auto {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaselineItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaselineItem_ProcessName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessName)
	n += 1 + l + sovProcessBaseline(uint64(l))
	return n
}
func (m *ContainerNameAndBaselineStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.BaselineStatus != 0 {
		n += 1 + sovProcessBaseline(uint64(m.BaselineStatus))
	}
	if m.AnomalousProcessesExecuted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessBaselineResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if len(m.BaselineStatuses) > 0 {
		for _, e := range m.BaselineStatuses {
			l = e.Size()
			n += 1 + l + sovProcessBaseline(uint64(l))
		}
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovProcessBaseline(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProcessBaseline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessBaseline(x uint64) (n int) {
	return sovProcessBaseline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProcessBaselineKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessBaselineKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessBaselineKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessBaseline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessBaseline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessBaseline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &ProcessBaselineKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &BaselineElement{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLockedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserLockedTimestamp == nil {
				m.UserLockedTimestamp = &types.Timestamp{}
			}
			if err := m.UserLockedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackRoxLockedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StackRoxLockedTimestamp == nil {
				m.StackRoxLockedTimestamp = &types.Timestamp{}
			}
			if err := m.StackRoxLockedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdate == nil {
				m.LastUpdate = &types.Timestamp{}
			}
			if err := m.LastUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementGraveyard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementGraveyard = append(m.ElementGraveyard, &BaselineElement{})
			if err := m.ElementGraveyard[len(m.ElementGraveyard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaselineElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaselineElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaselineElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Element == nil {
				m.Element = &BaselineItem{}
			}
			if err := m.Element.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auto = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaselineItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaselineItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaselineItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = &BaselineItem_ProcessName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerNameAndBaselineStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerNameAndBaselineStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerNameAndBaselineStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineStatus", wireType)
			}
			m.BaselineStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaselineStatus |= ContainerNameAndBaselineStatus_BaselineStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalousProcessesExecuted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnomalousProcessesExecuted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessBaselineResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessBaselineResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessBaselineResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaselineStatuses = append(m.BaselineStatuses, &ContainerNameAndBaselineStatus{})
			if err := m.BaselineStatuses[len(m.BaselineStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessBaseline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessBaseline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessBaseline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessBaseline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessBaseline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessBaseline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessBaseline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessBaseline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessBaseline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessBaseline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessBaseline = fmt.Errorf("proto: unexpected end of group")
)
