// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/declarative_config_health.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeclarativeConfigHealth_Status int32

const (
	DeclarativeConfigHealth_UNHEALTHY DeclarativeConfigHealth_Status = 0
	DeclarativeConfigHealth_HEALTHY   DeclarativeConfigHealth_Status = 1
)

var DeclarativeConfigHealth_Status_name = map[int32]string{
	0: "UNHEALTHY",
	1: "HEALTHY",
}

var DeclarativeConfigHealth_Status_value = map[string]int32{
	"UNHEALTHY": 0,
	"HEALTHY":   1,
}

func (x DeclarativeConfigHealth_Status) String() string {
	return proto.EnumName(DeclarativeConfigHealth_Status_name, int32(x))
}

func (DeclarativeConfigHealth_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_671c3ab7741e96a4, []int{0, 0}
}

type DeclarativeConfigHealth struct {
	Id           string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`
	Name         string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status       DeclarativeConfigHealth_Status `protobuf:"varint,4,opt,name=status,proto3,enum=storage.DeclarativeConfigHealth_Status" json:"status,omitempty"`
	ErrorMessage string                         `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ResourceName string                         `protobuf:"bytes,6,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Timestamp when the current status was set.
	LastTimestamp        *types.Timestamp `protobuf:"bytes,7,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeclarativeConfigHealth) Reset()         { *m = DeclarativeConfigHealth{} }
func (m *DeclarativeConfigHealth) String() string { return proto.CompactTextString(m) }
func (*DeclarativeConfigHealth) ProtoMessage()    {}
func (*DeclarativeConfigHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_671c3ab7741e96a4, []int{0}
}
func (m *DeclarativeConfigHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeclarativeConfigHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeclarativeConfigHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeclarativeConfigHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeclarativeConfigHealth.Merge(m, src)
}
func (m *DeclarativeConfigHealth) XXX_Size() int {
	return m.Size()
}
func (m *DeclarativeConfigHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_DeclarativeConfigHealth.DiscardUnknown(m)
}

var xxx_messageInfo_DeclarativeConfigHealth proto.InternalMessageInfo

func (m *DeclarativeConfigHealth) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeclarativeConfigHealth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeclarativeConfigHealth) GetStatus() DeclarativeConfigHealth_Status {
	if m != nil {
		return m.Status
	}
	return DeclarativeConfigHealth_UNHEALTHY
}

func (m *DeclarativeConfigHealth) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeclarativeConfigHealth) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *DeclarativeConfigHealth) GetLastTimestamp() *types.Timestamp {
	if m != nil {
		return m.LastTimestamp
	}
	return nil
}

func (m *DeclarativeConfigHealth) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeclarativeConfigHealth) Clone() *DeclarativeConfigHealth {
	if m == nil {
		return nil
	}
	cloned := new(DeclarativeConfigHealth)
	*cloned = *m

	cloned.LastTimestamp = m.LastTimestamp.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.DeclarativeConfigHealth_Status", DeclarativeConfigHealth_Status_name, DeclarativeConfigHealth_Status_value)
	proto.RegisterType((*DeclarativeConfigHealth)(nil), "storage.DeclarativeConfigHealth")
}

func init() {
	proto.RegisterFile("storage/declarative_config_health.proto", fileDescriptor_671c3ab7741e96a4)
}

var fileDescriptor_671c3ab7741e96a4 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0xe9, 0x82, 0x43, 0xca, 0x9f, 0x98, 0xc6, 0xc4, 0x49, 0xcc, 0x20, 0xd3, 0x04, 0x4e,
	0x5d, 0x82, 0x9e, 0xbc, 0x18, 0x50, 0x13, 0x0e, 0xca, 0x61, 0xe2, 0x41, 0x2f, 0x4b, 0x19, 0xa5,
	0x2c, 0x6c, 0x14, 0xdb, 0x62, 0xfc, 0x28, 0x7e, 0x1b, 0xaf, 0x1e, 0xfd, 0x04, 0xc6, 0xe0, 0x37,
	0xf0, 0x13, 0x98, 0xb5, 0x0c, 0x4f, 0xde, 0xde, 0xf7, 0xd9, 0xef, 0xdd, 0xf3, 0xe4, 0x29, 0x6c,
	0x4b, 0xc5, 0x05, 0x61, 0xd4, 0x9f, 0xd0, 0x28, 0x21, 0x82, 0xa8, 0xf8, 0x99, 0x86, 0x11, 0x5f,
	0x4c, 0x63, 0x16, 0xce, 0x28, 0x49, 0xd4, 0x0c, 0x2f, 0x05, 0x57, 0x1c, 0x95, 0x36, 0x60, 0xa3,
	0xc9, 0x38, 0x67, 0x09, 0xf5, 0xb5, 0x3c, 0x5e, 0x4d, 0x7d, 0x15, 0xa7, 0x54, 0x2a, 0x92, 0x2e,
	0x0d, 0xd9, 0xd8, 0x67, 0x9c, 0x71, 0x3d, 0xfa, 0xd9, 0x64, 0x54, 0xef, 0xcd, 0x82, 0x07, 0x57,
	0x7f, 0x1e, 0x97, 0xda, 0x62, 0xa0, 0x1d, 0xd0, 0x11, 0xb4, 0xe2, 0x89, 0x03, 0x5a, 0xa0, 0x53,
	0xee, 0x57, 0x7f, 0x3e, 0x9b, 0xbb, 0xf2, 0x29, 0x39, 0xf7, 0x96, 0x73, 0x2f, 0xb0, 0xe2, 0x09,
	0x42, 0xb0, 0xb8, 0x20, 0x29, 0x75, 0xac, 0xec, 0x7b, 0xa0, 0x67, 0x74, 0x01, 0x6d, 0xa9, 0x88,
	0x5a, 0x49, 0xa7, 0xd8, 0x02, 0x9d, 0x7a, 0xb7, 0x8d, 0x37, 0xf1, 0xf0, 0x3f, 0x1e, 0xf8, 0x4e,
	0xe3, 0xc1, 0xe6, 0x0c, 0x1d, 0xc3, 0x1a, 0x15, 0x82, 0x8b, 0x30, 0xa5, 0x52, 0x12, 0x46, 0x9d,
	0x1d, 0xfd, 0xf7, 0xaa, 0x16, 0x6f, 0x8d, 0x96, 0x41, 0x82, 0x4a, 0xbe, 0x12, 0x11, 0x0d, 0x75,
	0x04, 0xdb, 0x40, 0xb9, 0x38, 0xcc, 0xa2, 0xf4, 0x60, 0x3d, 0x21, 0x52, 0x85, 0xdb, 0x1a, 0x9c,
	0x52, 0x0b, 0x74, 0x2a, 0xdd, 0x06, 0x36, 0x45, 0xe1, 0xbc, 0x28, 0x3c, 0xca, 0x89, 0xa0, 0x96,
	0x5d, 0x6c, 0x57, 0xef, 0x04, 0xda, 0x26, 0x1e, 0xaa, 0xc1, 0xf2, 0xfd, 0x70, 0x70, 0xdd, 0xbb,
	0x19, 0x0d, 0x1e, 0xf6, 0x0a, 0xa8, 0x02, 0x4b, 0xf9, 0x02, 0xfa, 0x67, 0xef, 0x6b, 0x17, 0x7c,
	0xac, 0x5d, 0xf0, 0xb5, 0x76, 0xc1, 0xeb, 0xb7, 0x5b, 0x80, 0x87, 0x31, 0xc7, 0x52, 0x91, 0x68,
	0x2e, 0xf8, 0x8b, 0xb1, 0xc9, 0x6b, 0x78, 0xcc, 0x9f, 0x6b, 0x6c, 0x6b, 0xfd, 0xf4, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x1d, 0x7f, 0x6a, 0xb3, 0xe9, 0x01, 0x00, 0x00,
}

func (m *DeclarativeConfigHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeclarativeConfigHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeclarativeConfigHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastTimestamp != nil {
		{
			size, err := m.LastTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDeclarativeConfigHealth(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeclarativeConfigHealth(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeclarativeConfigHealth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeclarativeConfigHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeclarativeConfigHealth(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeclarativeConfigHealth(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDeclarativeConfigHealth(uint64(m.Status))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovDeclarativeConfigHealth(uint64(l))
	}
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovDeclarativeConfigHealth(uint64(l))
	}
	if m.LastTimestamp != nil {
		l = m.LastTimestamp.Size()
		n += 1 + l + sovDeclarativeConfigHealth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDeclarativeConfigHealth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeclarativeConfigHealth(x uint64) (n int) {
	return sovDeclarativeConfigHealth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeclarativeConfigHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeclarativeConfigHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeclarativeConfigHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeclarativeConfigHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DeclarativeConfigHealth_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTimestamp == nil {
				m.LastTimestamp = &types.Timestamp{}
			}
			if err := m.LastTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeclarativeConfigHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeclarativeConfigHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeclarativeConfigHealth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeclarativeConfigHealth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeclarativeConfigHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeclarativeConfigHealth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeclarativeConfigHealth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeclarativeConfigHealth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeclarativeConfigHealth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeclarativeConfigHealth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeclarativeConfigHealth = fmt.Errorf("proto: unexpected end of group")
)
