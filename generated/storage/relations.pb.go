// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/relations.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageComponentEdge struct {
	// id is base 64 encoded Image:Component ids.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	/// Layer that contains this component
	//
	// Types that are valid to be assigned to HasLayerIndex:
	//	*ImageComponentEdge_LayerIndex
	HasLayerIndex        isImageComponentEdge_HasLayerIndex `protobuf_oneof:"has_layer_index"`
	Location             string                             `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty" search:"Component Location,store,hidden"`
	ImageId              string                             `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty" sql:"fk(Image:id),index=hash"`
	ImageComponentId     string                             `protobuf:"bytes,5,opt,name=image_component_id,json=imageComponentId,proto3" json:"image_component_id,omitempty" sql:"fk(ImageComponent:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ImageComponentEdge) Reset()         { *m = ImageComponentEdge{} }
func (m *ImageComponentEdge) String() string { return proto.CompactTextString(m) }
func (*ImageComponentEdge) ProtoMessage()    {}
func (*ImageComponentEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{0}
}
func (m *ImageComponentEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageComponentEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageComponentEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageComponentEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageComponentEdge.Merge(m, src)
}
func (m *ImageComponentEdge) XXX_Size() int {
	return m.Size()
}
func (m *ImageComponentEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageComponentEdge.DiscardUnknown(m)
}

var xxx_messageInfo_ImageComponentEdge proto.InternalMessageInfo

type isImageComponentEdge_HasLayerIndex interface {
	isImageComponentEdge_HasLayerIndex()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isImageComponentEdge_HasLayerIndex
}

type ImageComponentEdge_LayerIndex struct {
	LayerIndex int32 `protobuf:"varint,2,opt,name=layer_index,json=layerIndex,proto3,oneof" json:"layer_index,omitempty"`
}

func (*ImageComponentEdge_LayerIndex) isImageComponentEdge_HasLayerIndex() {}
func (m *ImageComponentEdge_LayerIndex) Clone() isImageComponentEdge_HasLayerIndex {
	if m == nil {
		return nil
	}
	cloned := new(ImageComponentEdge_LayerIndex)
	*cloned = *m

	return cloned
}

func (m *ImageComponentEdge) GetHasLayerIndex() isImageComponentEdge_HasLayerIndex {
	if m != nil {
		return m.HasLayerIndex
	}
	return nil
}

func (m *ImageComponentEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageComponentEdge) GetLayerIndex() int32 {
	if x, ok := m.GetHasLayerIndex().(*ImageComponentEdge_LayerIndex); ok {
		return x.LayerIndex
	}
	return 0
}

func (m *ImageComponentEdge) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ImageComponentEdge) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ImageComponentEdge) GetImageComponentId() string {
	if m != nil {
		return m.ImageComponentId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImageComponentEdge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImageComponentEdge_LayerIndex)(nil),
	}
}

func (m *ImageComponentEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImageComponentEdge) Clone() *ImageComponentEdge {
	if m == nil {
		return nil
	}
	cloned := new(ImageComponentEdge)
	*cloned = *m

	if m.HasLayerIndex != nil {
		cloned.HasLayerIndex = m.HasLayerIndex.Clone()
	}
	return cloned
}

type ComponentCVEEdge struct {
	// base 64 encoded Component:CVE ids.
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	IsFixable bool   `protobuf:"varint,2,opt,name=is_fixable,json=isFixable,proto3" json:"is_fixable,omitempty" search:"Fixable,store"`
	// Whether there is a version the CVE is fixed in the component.
	//
	// Types that are valid to be assigned to HasFixedBy:
	//	*ComponentCVEEdge_FixedBy
	HasFixedBy           isComponentCVEEdge_HasFixedBy `protobuf_oneof:"has_fixed_by"`
	ImageComponentId     string                        `protobuf:"bytes,4,opt,name=image_component_id,json=imageComponentId,proto3" json:"image_component_id,omitempty" sql:"fk(ImageComponent:id),index=hash"`
	ImageCveId           string                        `protobuf:"bytes,5,opt,name=image_cve_id,json=imageCveId,proto3" json:"image_cve_id,omitempty" sql:"fk(ImageCVE:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComponentCVEEdge) Reset()         { *m = ComponentCVEEdge{} }
func (m *ComponentCVEEdge) String() string { return proto.CompactTextString(m) }
func (*ComponentCVEEdge) ProtoMessage()    {}
func (*ComponentCVEEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{1}
}
func (m *ComponentCVEEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentCVEEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentCVEEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentCVEEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentCVEEdge.Merge(m, src)
}
func (m *ComponentCVEEdge) XXX_Size() int {
	return m.Size()
}
func (m *ComponentCVEEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentCVEEdge.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentCVEEdge proto.InternalMessageInfo

type isComponentCVEEdge_HasFixedBy interface {
	isComponentCVEEdge_HasFixedBy()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComponentCVEEdge_HasFixedBy
}

type ComponentCVEEdge_FixedBy struct {
	FixedBy string `protobuf:"bytes,3,opt,name=fixed_by,json=fixedBy,proto3,oneof" json:"fixed_by,omitempty" search:"Fixed By,store,hidden"`
}

func (*ComponentCVEEdge_FixedBy) isComponentCVEEdge_HasFixedBy() {}
func (m *ComponentCVEEdge_FixedBy) Clone() isComponentCVEEdge_HasFixedBy {
	if m == nil {
		return nil
	}
	cloned := new(ComponentCVEEdge_FixedBy)
	*cloned = *m

	return cloned
}

func (m *ComponentCVEEdge) GetHasFixedBy() isComponentCVEEdge_HasFixedBy {
	if m != nil {
		return m.HasFixedBy
	}
	return nil
}

func (m *ComponentCVEEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComponentCVEEdge) GetIsFixable() bool {
	if m != nil {
		return m.IsFixable
	}
	return false
}

func (m *ComponentCVEEdge) GetFixedBy() string {
	if x, ok := m.GetHasFixedBy().(*ComponentCVEEdge_FixedBy); ok {
		return x.FixedBy
	}
	return ""
}

func (m *ComponentCVEEdge) GetImageComponentId() string {
	if m != nil {
		return m.ImageComponentId
	}
	return ""
}

func (m *ComponentCVEEdge) GetImageCveId() string {
	if m != nil {
		return m.ImageCveId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ComponentCVEEdge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ComponentCVEEdge_FixedBy)(nil),
	}
}

func (m *ComponentCVEEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComponentCVEEdge) Clone() *ComponentCVEEdge {
	if m == nil {
		return nil
	}
	cloned := new(ComponentCVEEdge)
	*cloned = *m

	if m.HasFixedBy != nil {
		cloned.HasFixedBy = m.HasFixedBy.Clone()
	}
	return cloned
}

type ImageCVEEdge struct {
	// base 64 encoded Image:CVE ids.
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	FirstImageOccurrence *types.Timestamp   `protobuf:"bytes,2,opt,name=first_image_occurrence,json=firstImageOccurrence,proto3" json:"first_image_occurrence,omitempty" search:"First Image Occurrence Timestamp,hidden"`
	State                VulnerabilityState `protobuf:"varint,3,opt,name=state,proto3,enum=storage.VulnerabilityState" json:"state,omitempty" search:"Vulnerability State"`
	ImageId              string             `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty" sql:"fk(Image:id),index=hash"`
	ImageCveId           string             `protobuf:"bytes,5,opt,name=image_cve_id,json=imageCveId,proto3" json:"image_cve_id,omitempty" sql:"fk(ImageCVE:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ImageCVEEdge) Reset()         { *m = ImageCVEEdge{} }
func (m *ImageCVEEdge) String() string { return proto.CompactTextString(m) }
func (*ImageCVEEdge) ProtoMessage()    {}
func (*ImageCVEEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{2}
}
func (m *ImageCVEEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageCVEEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageCVEEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageCVEEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCVEEdge.Merge(m, src)
}
func (m *ImageCVEEdge) XXX_Size() int {
	return m.Size()
}
func (m *ImageCVEEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCVEEdge.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCVEEdge proto.InternalMessageInfo

func (m *ImageCVEEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageCVEEdge) GetFirstImageOccurrence() *types.Timestamp {
	if m != nil {
		return m.FirstImageOccurrence
	}
	return nil
}

func (m *ImageCVEEdge) GetState() VulnerabilityState {
	if m != nil {
		return m.State
	}
	return VulnerabilityState_OBSERVED
}

func (m *ImageCVEEdge) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ImageCVEEdge) GetImageCveId() string {
	if m != nil {
		return m.ImageCveId
	}
	return ""
}

func (m *ImageCVEEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ImageCVEEdge) Clone() *ImageCVEEdge {
	if m == nil {
		return nil
	}
	cloned := new(ImageCVEEdge)
	*cloned = *m

	cloned.FirstImageOccurrence = m.FirstImageOccurrence.Clone()
	return cloned
}

type NodeComponentEdge struct {
	// base 64 encoded Node:Component ids.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	NodeId               string   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" sql:"fk(Node:id),index=hash,type(uuid)"`
	NodeComponentId      string   `protobuf:"bytes,3,opt,name=node_component_id,json=nodeComponentId,proto3" json:"node_component_id,omitempty" sql:"fk(NodeComponent:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeComponentEdge) Reset()         { *m = NodeComponentEdge{} }
func (m *NodeComponentEdge) String() string { return proto.CompactTextString(m) }
func (*NodeComponentEdge) ProtoMessage()    {}
func (*NodeComponentEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{3}
}
func (m *NodeComponentEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeComponentEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeComponentEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeComponentEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeComponentEdge.Merge(m, src)
}
func (m *NodeComponentEdge) XXX_Size() int {
	return m.Size()
}
func (m *NodeComponentEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeComponentEdge.DiscardUnknown(m)
}

var xxx_messageInfo_NodeComponentEdge proto.InternalMessageInfo

func (m *NodeComponentEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeComponentEdge) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeComponentEdge) GetNodeComponentId() string {
	if m != nil {
		return m.NodeComponentId
	}
	return ""
}

func (m *NodeComponentEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeComponentEdge) Clone() *NodeComponentEdge {
	if m == nil {
		return nil
	}
	cloned := new(NodeComponentEdge)
	*cloned = *m

	return cloned
}

type NodeComponentCVEEdge struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	IsFixable bool   `protobuf:"varint,2,opt,name=is_fixable,json=isFixable,proto3" json:"is_fixable,omitempty" search:"Fixable,store"`
	// Whether there is a version the CVE is fixed in the component.
	//
	// Types that are valid to be assigned to HasFixedBy:
	//	*NodeComponentCVEEdge_FixedBy
	HasFixedBy           isNodeComponentCVEEdge_HasFixedBy `protobuf_oneof:"has_fixed_by"`
	NodeComponentId      string                            `protobuf:"bytes,4,opt,name=node_component_id,json=nodeComponentId,proto3" json:"node_component_id,omitempty" sql:"fk(NodeComponent:id),index=hash"`
	NodeCveId            string                            `protobuf:"bytes,5,opt,name=node_cve_id,json=nodeCveId,proto3" json:"node_cve_id,omitempty" sql:"fk(NodeCVE:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *NodeComponentCVEEdge) Reset()         { *m = NodeComponentCVEEdge{} }
func (m *NodeComponentCVEEdge) String() string { return proto.CompactTextString(m) }
func (*NodeComponentCVEEdge) ProtoMessage()    {}
func (*NodeComponentCVEEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{4}
}
func (m *NodeComponentCVEEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeComponentCVEEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeComponentCVEEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeComponentCVEEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeComponentCVEEdge.Merge(m, src)
}
func (m *NodeComponentCVEEdge) XXX_Size() int {
	return m.Size()
}
func (m *NodeComponentCVEEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeComponentCVEEdge.DiscardUnknown(m)
}

var xxx_messageInfo_NodeComponentCVEEdge proto.InternalMessageInfo

type isNodeComponentCVEEdge_HasFixedBy interface {
	isNodeComponentCVEEdge_HasFixedBy()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNodeComponentCVEEdge_HasFixedBy
}

type NodeComponentCVEEdge_FixedBy struct {
	FixedBy string `protobuf:"bytes,3,opt,name=fixed_by,json=fixedBy,proto3,oneof" json:"fixed_by,omitempty" search:"Fixed By,store,hidden"`
}

func (*NodeComponentCVEEdge_FixedBy) isNodeComponentCVEEdge_HasFixedBy() {}
func (m *NodeComponentCVEEdge_FixedBy) Clone() isNodeComponentCVEEdge_HasFixedBy {
	if m == nil {
		return nil
	}
	cloned := new(NodeComponentCVEEdge_FixedBy)
	*cloned = *m

	return cloned
}

func (m *NodeComponentCVEEdge) GetHasFixedBy() isNodeComponentCVEEdge_HasFixedBy {
	if m != nil {
		return m.HasFixedBy
	}
	return nil
}

func (m *NodeComponentCVEEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeComponentCVEEdge) GetIsFixable() bool {
	if m != nil {
		return m.IsFixable
	}
	return false
}

func (m *NodeComponentCVEEdge) GetFixedBy() string {
	if x, ok := m.GetHasFixedBy().(*NodeComponentCVEEdge_FixedBy); ok {
		return x.FixedBy
	}
	return ""
}

func (m *NodeComponentCVEEdge) GetNodeComponentId() string {
	if m != nil {
		return m.NodeComponentId
	}
	return ""
}

func (m *NodeComponentCVEEdge) GetNodeCveId() string {
	if m != nil {
		return m.NodeCveId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeComponentCVEEdge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeComponentCVEEdge_FixedBy)(nil),
	}
}

func (m *NodeComponentCVEEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeComponentCVEEdge) Clone() *NodeComponentCVEEdge {
	if m == nil {
		return nil
	}
	cloned := new(NodeComponentCVEEdge)
	*cloned = *m

	if m.HasFixedBy != nil {
		cloned.HasFixedBy = m.HasFixedBy.Clone()
	}
	return cloned
}

type ClusterCVEEdge struct {
	// base 64 encoded Cluster:CVE ids.
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	IsFixable bool   `protobuf:"varint,2,opt,name=is_fixable,json=isFixable,proto3" json:"is_fixable,omitempty" search:"Cluster CVE Fixable,store,hidden"`
	// Whether there is a version the CVE is fixed in the Cluster.
	//
	// Types that are valid to be assigned to HasFixedBy:
	//	*ClusterCVEEdge_FixedBy
	HasFixedBy           isClusterCVEEdge_HasFixedBy `protobuf_oneof:"has_fixed_by"`
	ClusterId            string                      `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" sql:"fk(Cluster:id),type(uuid)"`
	CveId                string                      `protobuf:"bytes,5,opt,name=cve_id,json=cveId,proto3" json:"cve_id,omitempty" sql:"fk(ClusterCVE:id),no-fk-constraint,index=hash"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ClusterCVEEdge) Reset()         { *m = ClusterCVEEdge{} }
func (m *ClusterCVEEdge) String() string { return proto.CompactTextString(m) }
func (*ClusterCVEEdge) ProtoMessage()    {}
func (*ClusterCVEEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{5}
}
func (m *ClusterCVEEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCVEEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCVEEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterCVEEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCVEEdge.Merge(m, src)
}
func (m *ClusterCVEEdge) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCVEEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCVEEdge.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCVEEdge proto.InternalMessageInfo

type isClusterCVEEdge_HasFixedBy interface {
	isClusterCVEEdge_HasFixedBy()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isClusterCVEEdge_HasFixedBy
}

type ClusterCVEEdge_FixedBy struct {
	FixedBy string `protobuf:"bytes,3,opt,name=fixed_by,json=fixedBy,proto3,oneof" json:"fixed_by,omitempty" search:"Cluster CVE Fixed By,store,hidden"`
}

func (*ClusterCVEEdge_FixedBy) isClusterCVEEdge_HasFixedBy() {}
func (m *ClusterCVEEdge_FixedBy) Clone() isClusterCVEEdge_HasFixedBy {
	if m == nil {
		return nil
	}
	cloned := new(ClusterCVEEdge_FixedBy)
	*cloned = *m

	return cloned
}

func (m *ClusterCVEEdge) GetHasFixedBy() isClusterCVEEdge_HasFixedBy {
	if m != nil {
		return m.HasFixedBy
	}
	return nil
}

func (m *ClusterCVEEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterCVEEdge) GetIsFixable() bool {
	if m != nil {
		return m.IsFixable
	}
	return false
}

func (m *ClusterCVEEdge) GetFixedBy() string {
	if x, ok := m.GetHasFixedBy().(*ClusterCVEEdge_FixedBy); ok {
		return x.FixedBy
	}
	return ""
}

func (m *ClusterCVEEdge) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterCVEEdge) GetCveId() string {
	if m != nil {
		return m.CveId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClusterCVEEdge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClusterCVEEdge_FixedBy)(nil),
	}
}

func (m *ClusterCVEEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterCVEEdge) Clone() *ClusterCVEEdge {
	if m == nil {
		return nil
	}
	cloned := new(ClusterCVEEdge)
	*cloned = *m

	if m.HasFixedBy != nil {
		cloned.HasFixedBy = m.HasFixedBy.Clone()
	}
	return cloned
}

type PolicyCategoryEdge struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,id"`
	PolicyId             string   `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty" sql:"fk(Policy:id)" search:"Policy ID,store,hidden"`
	CategoryId           string   `protobuf:"bytes,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty" sql:"fk(PolicyCategory:id)"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyCategoryEdge) Reset()         { *m = PolicyCategoryEdge{} }
func (m *PolicyCategoryEdge) String() string { return proto.CompactTextString(m) }
func (*PolicyCategoryEdge) ProtoMessage()    {}
func (*PolicyCategoryEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f882e266fcf764, []int{6}
}
func (m *PolicyCategoryEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCategoryEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCategoryEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCategoryEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCategoryEdge.Merge(m, src)
}
func (m *PolicyCategoryEdge) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCategoryEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCategoryEdge.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCategoryEdge proto.InternalMessageInfo

func (m *PolicyCategoryEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyCategoryEdge) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *PolicyCategoryEdge) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *PolicyCategoryEdge) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyCategoryEdge) Clone() *PolicyCategoryEdge {
	if m == nil {
		return nil
	}
	cloned := new(PolicyCategoryEdge)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*ImageComponentEdge)(nil), "storage.ImageComponentEdge")
	proto.RegisterType((*ComponentCVEEdge)(nil), "storage.ComponentCVEEdge")
	proto.RegisterType((*ImageCVEEdge)(nil), "storage.ImageCVEEdge")
	proto.RegisterType((*NodeComponentEdge)(nil), "storage.NodeComponentEdge")
	proto.RegisterType((*NodeComponentCVEEdge)(nil), "storage.NodeComponentCVEEdge")
	proto.RegisterType((*ClusterCVEEdge)(nil), "storage.ClusterCVEEdge")
	proto.RegisterType((*PolicyCategoryEdge)(nil), "storage.PolicyCategoryEdge")
}

func init() { proto.RegisterFile("storage/relations.proto", fileDescriptor_62f882e266fcf764) }

var fileDescriptor_62f882e266fcf764 = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x96, 0x6f, 0x6e, 0xe3, 0x44,
	0x14, 0xc0, 0xeb, 0x2c, 0xfd, 0x93, 0x97, 0xaa, 0xdd, 0x5a, 0xd5, 0x52, 0xba, 0x90, 0xf1, 0x1a,
	0x01, 0xe9, 0x92, 0xa6, 0xb0, 0xbb, 0xb0, 0xa2, 0x80, 0x40, 0xce, 0x16, 0xd5, 0x62, 0xb5, 0x20,
	0x6f, 0x29, 0x88, 0x2f, 0x91, 0xe3, 0x99, 0x24, 0xa3, 0xba, 0x9e, 0x60, 0x4f, 0xaa, 0xe6, 0x02,
	0x9c, 0x81, 0x03, 0x70, 0x18, 0xbe, 0x20, 0x71, 0x82, 0x11, 0x0a, 0x17, 0x58, 0xcd, 0x09, 0x90,
	0x67, 0x6c, 0x27, 0x2e, 0xd9, 0x6e, 0x2a, 0xc4, 0x07, 0xbe, 0x45, 0xcf, 0xef, 0xfd, 0xe6, 0xf9,
	0x37, 0xf3, 0x26, 0x86, 0xd7, 0x13, 0xce, 0x62, 0xbf, 0x4f, 0x0e, 0x62, 0x12, 0xfa, 0x9c, 0xb2,
	0x28, 0x69, 0x0d, 0x63, 0xc6, 0x99, 0xb9, 0x9a, 0x3d, 0xd8, 0x45, 0x7d, 0xc6, 0xfa, 0x21, 0x39,
	0x50, 0xe1, 0xee, 0xa8, 0x77, 0xc0, 0xe9, 0x39, 0x49, 0xb8, 0x7f, 0x3e, 0xd4, 0x99, 0xbb, 0x5b,
	0x39, 0x22, 0xb8, 0x20, 0x59, 0x68, 0xbb, 0xcf, 0xfa, 0x4c, 0xfd, 0x3c, 0x48, 0x7f, 0xe9, 0xa8,
	0x2d, 0x2a, 0x60, 0xba, 0xe7, 0x7e, 0x9f, 0xb4, 0xd9, 0xf9, 0x90, 0x45, 0x24, 0xe2, 0x47, 0xb8,
	0x4f, 0x4c, 0x04, 0x15, 0x8a, 0x77, 0x0c, 0xcb, 0x68, 0x54, 0x9d, 0x4d, 0x29, 0x50, 0x2d, 0xf9,
	0x29, 0x3c, 0xb4, 0x87, 0x67, 0x4d, 0x8a, 0x6d, 0xaf, 0x42, 0xb1, 0x79, 0x0f, 0x6a, 0xa1, 0x3f,
	0x26, 0x71, 0x87, 0x46, 0x98, 0x5c, 0xee, 0x54, 0x2c, 0xa3, 0xb1, 0x7c, 0xbc, 0xe4, 0x81, 0x0a,
	0xba, 0x69, 0xcc, 0x3c, 0x86, 0xb5, 0x90, 0x05, 0xea, 0x05, 0x76, 0x6e, 0x29, 0x52, 0x53, 0x0a,
	0xd4, 0x48, 0x88, 0x1f, 0x07, 0x83, 0x43, 0xbb, 0x58, 0xd0, 0x7a, 0x9a, 0x65, 0x35, 0xd3, 0xa6,
	0x49, 0x73, 0x40, 0x31, 0x26, 0x91, 0xed, 0x15, 0xd5, 0xe6, 0x67, 0xb0, 0x46, 0xd3, 0x1e, 0x3b,
	0x14, 0xef, 0xbc, 0xa6, 0x48, 0xf7, 0xa4, 0x40, 0x6f, 0xa9, 0x9e, 0x7a, 0x67, 0x0d, 0xd5, 0xff,
	0x21, 0xc5, 0x7b, 0x4d, 0xd5, 0xcc, 0xe7, 0x03, 0x3f, 0x19, 0xd8, 0xde, 0xaa, 0x2a, 0x71, 0xb1,
	0x49, 0xc1, 0xd4, 0xd5, 0x41, 0xbe, 0x62, 0xca, 0x59, 0x56, 0x9c, 0x4f, 0xa5, 0x40, 0x8f, 0x4b,
	0x9c, 0xa2, 0x2d, 0x05, 0x8c, 0xd8, 0x7e, 0xef, 0x6c, 0x3f, 0x60, 0x51, 0xc2, 0x63, 0x9f, 0x46,
	0xbc, 0xb4, 0xc2, 0x6d, 0x5a, 0x2a, 0x70, 0xb1, 0xb3, 0x05, 0x9b, 0x03, 0x3f, 0xe9, 0xcc, 0x98,
	0xb1, 0x65, 0x05, 0x6e, 0x17, 0x29, 0xed, 0xd3, 0xa3, 0xc5, 0xf4, 0x7e, 0x02, 0x40, 0x93, 0x4e,
	0x8f, 0x5e, 0xfa, 0xdd, 0x90, 0x28, 0xbb, 0x6b, 0xce, 0xae, 0x14, 0xe8, 0x4e, 0x6e, 0xef, 0x2b,
	0xfd, 0x48, 0x2b, 0xb3, 0xbd, 0x2a, 0x4d, 0xb2, 0x88, 0xf9, 0x05, 0xac, 0xf5, 0xe8, 0x25, 0xc1,
	0x9d, 0xee, 0x38, 0xd3, 0x6e, 0x4b, 0x81, 0xea, 0x33, 0x85, 0x04, 0x5b, 0xce, 0xb8, 0x2c, 0xfb,
	0x78, 0xc9, 0x5b, 0x55, 0x55, 0xce, 0xd8, 0xfc, 0x61, 0xae, 0x2f, 0xed, 0xfd, 0xbe, 0x14, 0xe8,
	0xdd, 0x6b, 0x7c, 0x5d, 0xab, 0xc7, 0xfc, 0x1e, 0xd6, 0x33, 0xf2, 0x05, 0x99, 0xee, 0xc1, 0x47,
	0x52, 0xa0, 0x0f, 0xcb, 0xcc, 0xd3, 0xa3, 0x57, 0xdb, 0x07, 0x8d, 0xbf, 0x20, 0x2e, 0x76, 0x36,
	0x60, 0x3d, 0xf5, 0x9e, 0xbf, 0xb7, 0xfd, 0xeb, 0x2d, 0x58, 0xcf, 0x49, 0x8b, 0x09, 0xff, 0xd9,
	0x80, 0x3b, 0x3d, 0x1a, 0x27, 0xbc, 0xa3, 0x3b, 0x64, 0x41, 0x30, 0x8a, 0x63, 0x12, 0x05, 0xda,
	0x7e, 0xed, 0xc1, 0x6e, 0x4b, 0xcf, 0x5c, 0x2b, 0x9f, 0xb9, 0xd6, 0x49, 0x3e, 0x73, 0xce, 0x23,
	0x29, 0xd0, 0x07, 0x53, 0xc1, 0x71, 0xc2, 0x2d, 0xb5, 0xba, 0xf5, 0x4d, 0x41, 0xb1, 0x8a, 0xec,
	0xe2, 0x7c, 0x6f, 0xab, 0xf5, 0x54, 0xe2, 0x34, 0xcf, 0x7c, 0x0e, 0xcb, 0x09, 0xf7, 0x39, 0x51,
	0x7b, 0xb7, 0xf1, 0xe0, 0x6e, 0x2b, 0x9b, 0xe4, 0xd6, 0xe9, 0x28, 0x8c, 0x48, 0xec, 0x77, 0x69,
	0x48, 0xf9, 0xf8, 0x79, 0x9a, 0xe2, 0x58, 0x52, 0xa0, 0x37, 0xf3, 0x75, 0x4b, 0xcf, 0x2d, 0x95,
	0x60, 0x7b, 0x9a, 0xf5, 0x2f, 0x07, 0xe8, 0xbf, 0xda, 0x36, 0x7b, 0x62, 0xc0, 0xd6, 0x33, 0x86,
	0x6f, 0x7a, 0xf7, 0x3c, 0x81, 0xd5, 0x88, 0x61, 0xd5, 0x4a, 0x45, 0x65, 0xbd, 0x2f, 0x05, 0x7a,
	0x2f, 0x6f, 0x25, 0x05, 0x5e, 0x79, 0x97, 0x26, 0x1f, 0x0f, 0x49, 0x63, 0x34, 0xa2, 0x78, 0xcf,
	0xf6, 0x56, 0xd2, 0x5a, 0x17, 0x9b, 0x3d, 0xd8, 0x52, 0x94, 0xd2, 0x29, 0xd7, 0x03, 0x73, 0x28,
	0x05, 0xfa, 0x78, 0x96, 0x77, 0x83, 0x4b, 0x61, 0x33, 0x9a, 0xcd, 0x77, 0xb1, 0xfd, 0xa2, 0x02,
	0xdb, 0x25, 0xc6, 0xff, 0xe2, 0x12, 0xf8, 0x6e, 0x9e, 0x1d, 0x7d, 0x74, 0xf6, 0xa4, 0x40, 0xef,
	0xbc, 0xdc, 0xce, 0x75, 0x32, 0xcc, 0x13, 0xa8, 0x69, 0xec, 0xec, 0x49, 0xd2, 0xe3, 0x33, 0x0b,
	0x5c, 0xe4, 0x20, 0x55, 0x15, 0x7b, 0xee, 0xf8, 0xbf, 0xa8, 0xc0, 0x46, 0x3b, 0x1c, 0x25, 0x9c,
	0xc4, 0x0b, 0xcb, 0x7e, 0x3a, 0x47, 0xf6, 0xbe, 0x14, 0x68, 0xaf, 0xf8, 0xbf, 0xd2, 0x40, 0xab,
	0x7d, 0x7a, 0x64, 0x95, 0xc4, 0x17, 0x03, 0x3d, 0xe3, 0xff, 0xeb, 0x7f, 0xf8, 0x6f, 0x49, 0x81,
	0xee, 0xbf, 0x84, 0xf5, 0x8a, 0xbd, 0x70, 0x00, 0x02, 0x5d, 0x30, 0xdd, 0x84, 0xb7, 0xa5, 0x40,
	0x28, 0x77, 0x96, 0xe1, 0x94, 0xb3, 0xd9, 0xa3, 0x5e, 0xcd, 0xca, 0x5c, 0x6c, 0x3e, 0x83, 0x95,
	0x92, 0xf3, 0xc7, 0x52, 0xa0, 0x87, 0x57, 0xea, 0x17, 0xd2, 0xbe, 0x1c, 0xcc, 0x55, 0xfe, 0xbb,
	0x01, 0xe6, 0xb7, 0x2c, 0xa4, 0xc1, 0xb8, 0xed, 0x73, 0xd2, 0x67, 0xf1, 0x78, 0x31, 0xed, 0x27,
	0x50, 0x1d, 0xaa, 0xb2, 0xe9, 0x34, 0x97, 0x5a, 0xd3, 0xcc, 0xb4, 0x2d, 0xdb, 0xca, 0xed, 0xe9,
	0x98, 0xe5, 0x3e, 0xb9, 0xfa, 0xc1, 0xa0, 0x49, 0x2e, 0x36, 0xbf, 0x84, 0x5a, 0x90, 0xb5, 0x31,
	0x9d, 0x6a, 0x24, 0x05, 0xba, 0x5b, 0xe6, 0xe6, 0xbd, 0x2a, 0xbe, 0x07, 0x79, 0x8d, 0x8b, 0x9d,
	0x47, 0xbf, 0x4d, 0xea, 0xc6, 0x1f, 0x93, 0xba, 0xf1, 0xe7, 0xa4, 0x6e, 0xfc, 0xf2, 0x57, 0x7d,
	0x09, 0xde, 0xa0, 0xac, 0x95, 0x70, 0x3f, 0x38, 0x8b, 0xd9, 0xa5, 0xfe, 0x13, 0xc8, 0xaf, 0xe6,
	0x1f, 0xf3, 0xef, 0xb2, 0xee, 0x8a, 0x8a, 0x3f, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x76,
	0x27, 0xa8, 0xc2, 0x09, 0x00, 0x00,
}

func (m *ImageComponentEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageComponentEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageComponentEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageComponentId) > 0 {
		i -= len(m.ImageComponentId)
		copy(dAtA[i:], m.ImageComponentId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageComponentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HasLayerIndex != nil {
		{
			size := m.HasLayerIndex.Size()
			i -= size
			if _, err := m.HasLayerIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageComponentEdge_LayerIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageComponentEdge_LayerIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRelations(dAtA, i, uint64(m.LayerIndex))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ComponentCVEEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentCVEEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentCVEEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageCveId) > 0 {
		i -= len(m.ImageCveId)
		copy(dAtA[i:], m.ImageCveId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageCveId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageComponentId) > 0 {
		i -= len(m.ImageComponentId)
		copy(dAtA[i:], m.ImageComponentId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageComponentId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasFixedBy != nil {
		{
			size := m.HasFixedBy.Size()
			i -= size
			if _, err := m.HasFixedBy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IsFixable {
		i--
		if m.IsFixable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComponentCVEEdge_FixedBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentCVEEdge_FixedBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FixedBy)
	copy(dAtA[i:], m.FixedBy)
	i = encodeVarintRelations(dAtA, i, uint64(len(m.FixedBy)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ImageCVEEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageCVEEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageCVEEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImageCveId) > 0 {
		i -= len(m.ImageCveId)
		copy(dAtA[i:], m.ImageCveId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageCveId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintRelations(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.FirstImageOccurrence != nil {
		{
			size, err := m.FirstImageOccurrence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeComponentEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeComponentEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeComponentEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeComponentId) > 0 {
		i -= len(m.NodeComponentId)
		copy(dAtA[i:], m.NodeComponentId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.NodeComponentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeComponentCVEEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeComponentCVEEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeComponentCVEEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeCveId) > 0 {
		i -= len(m.NodeCveId)
		copy(dAtA[i:], m.NodeCveId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.NodeCveId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeComponentId) > 0 {
		i -= len(m.NodeComponentId)
		copy(dAtA[i:], m.NodeComponentId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.NodeComponentId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasFixedBy != nil {
		{
			size := m.HasFixedBy.Size()
			i -= size
			if _, err := m.HasFixedBy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IsFixable {
		i--
		if m.IsFixable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeComponentCVEEdge_FixedBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeComponentCVEEdge_FixedBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FixedBy)
	copy(dAtA[i:], m.FixedBy)
	i = encodeVarintRelations(dAtA, i, uint64(len(m.FixedBy)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ClusterCVEEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCVEEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterCVEEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CveId) > 0 {
		i -= len(m.CveId)
		copy(dAtA[i:], m.CveId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.CveId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasFixedBy != nil {
		{
			size := m.HasFixedBy.Size()
			i -= size
			if _, err := m.HasFixedBy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IsFixable {
		i--
		if m.IsFixable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterCVEEdge_FixedBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterCVEEdge_FixedBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FixedBy)
	copy(dAtA[i:], m.FixedBy)
	i = encodeVarintRelations(dAtA, i, uint64(len(m.FixedBy)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *PolicyCategoryEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCategoryEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCategoryEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CategoryId) > 0 {
		i -= len(m.CategoryId)
		copy(dAtA[i:], m.CategoryId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.CategoryId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRelations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelations(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageComponentEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.HasLayerIndex != nil {
		n += m.HasLayerIndex.Size()
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.ImageComponentId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageComponentEdge_LayerIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRelations(uint64(m.LayerIndex))
	return n
}
func (m *ComponentCVEEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.IsFixable {
		n += 2
	}
	if m.HasFixedBy != nil {
		n += m.HasFixedBy.Size()
	}
	l = len(m.ImageComponentId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.ImageCveId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentCVEEdge_FixedBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixedBy)
	n += 1 + l + sovRelations(uint64(l))
	return n
}
func (m *ImageCVEEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.FirstImageOccurrence != nil {
		l = m.FirstImageOccurrence.Size()
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovRelations(uint64(m.State))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.ImageCveId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeComponentEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.NodeComponentId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeComponentCVEEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.IsFixable {
		n += 2
	}
	if m.HasFixedBy != nil {
		n += m.HasFixedBy.Size()
	}
	l = len(m.NodeComponentId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.NodeCveId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeComponentCVEEdge_FixedBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixedBy)
	n += 1 + l + sovRelations(uint64(l))
	return n
}
func (m *ClusterCVEEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.IsFixable {
		n += 2
	}
	if m.HasFixedBy != nil {
		n += m.HasFixedBy.Size()
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.CveId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterCVEEdge_FixedBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixedBy)
	n += 1 + l + sovRelations(uint64(l))
	return n
}
func (m *PolicyCategoryEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	l = len(m.CategoryId)
	if l > 0 {
		n += 1 + l + sovRelations(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRelations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelations(x uint64) (n int) {
	return sovRelations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImageComponentEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageComponentEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageComponentEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLayerIndex = &ImageComponentEdge_LayerIndex{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentCVEEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentCVEEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentCVEEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFixable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFixable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasFixedBy = &ComponentCVEEdge_FixedBy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageCveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageCveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageCVEEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageCVEEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageCVEEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstImageOccurrence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstImageOccurrence == nil {
				m.FirstImageOccurrence = &types.Timestamp{}
			}
			if err := m.FirstImageOccurrence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VulnerabilityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageCveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageCveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeComponentEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeComponentEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeComponentEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeComponentCVEEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeComponentCVEEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeComponentCVEEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFixable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFixable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasFixedBy = &NodeComponentCVEEdge_FixedBy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeCveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCVEEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCVEEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCVEEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFixable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFixable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasFixedBy = &ClusterCVEEdge_FixedBy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyCategoryEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCategoryEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCategoryEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelations = fmt.Errorf("proto: unexpected end of group")
)
