// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableNode is an immutable interface for Node
type ImmutableNode interface {
	// A unique ID identifying this node.
	GetId() string
	// The (host)name of the node. Might or might not be the same as ID.
	GetName() string
	// Taints on the host
	GetImmutableTaints() iter.Seq[ImmutableTaint]
	GetClusterId() string
	GetClusterName() string
	GetImmutableLabels() iter.Seq2[string, string]
	GetImmutableAnnotations() iter.Seq2[string, string]
	// When the cluster reported the node was added
	GetImmutableJoinedAt() time.Time
	// node internal IP addresses
	GetImmutableInternalIpAddresses() iter.Seq[string]
	// node external IP addresses
	GetImmutableExternalIpAddresses() iter.Seq[string]
	// From NodeInfo
	GetContainerRuntimeVersion() string
	GetImmutableContainerRuntime() ImmutableContainerRuntimeInfo
	GetKernelVersion() string
	// From NodeInfo. Operating system reported by the node (ex: linux).
	GetOperatingSystem() string
	// From NodeInfo. OS image reported by the node from /etc/os-release.
	GetOsImage() string
	GetKubeletVersion() string
	GetKubeProxyVersion() string
	GetImmutableLastUpdated() time.Time
	// Time we received an update from Kubernetes.
	GetImmutableK8SUpdated() time.Time
	GetImmutableScan() ImmutableNodeScan
	GetComponents() int32
	GetCves() int32
	GetFixableCves() int32
	GetPriority() int64
	GetRiskScore() float32
	GetTopCvss() float32
	GetImmutableNotes() iter.Seq[Node_Note]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Node
}

// GetImmutableTaints implements ImmutableNode
func (m *Node) GetImmutableTaints() iter.Seq[ImmutableTaint] {
	return func(yield func(ImmutableTaint) bool) {
		if m == nil || m.Taints == nil {
			return
		}
		for _, v := range m.Taints {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableLabels implements ImmutableNode
func (m *Node) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableAnnotations implements ImmutableNode
func (m *Node) GetImmutableAnnotations() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Annotations == nil {
			return
		}
		for k, v := range m.Annotations {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableJoinedAt implements ImmutableNode
func (m *Node) GetImmutableJoinedAt() time.Time {
	if m == nil || m.JoinedAt == nil {
		return time.Time{}
	}
	return m.JoinedAt.AsTime()
}

// GetImmutableInternalIpAddresses implements ImmutableNode
func (m *Node) GetImmutableInternalIpAddresses() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.InternalIpAddresses == nil {
			return
		}
		for _, v := range m.InternalIpAddresses {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableExternalIpAddresses implements ImmutableNode
func (m *Node) GetImmutableExternalIpAddresses() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.ExternalIpAddresses == nil {
			return
		}
		for _, v := range m.ExternalIpAddresses {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableContainerRuntime implements ImmutableNode
func (m *Node) GetImmutableContainerRuntime() ImmutableContainerRuntimeInfo {
	return m.GetContainerRuntime()
}

// GetImmutableLastUpdated implements ImmutableNode
func (m *Node) GetImmutableLastUpdated() time.Time {
	if m == nil || m.LastUpdated == nil {
		return time.Time{}
	}
	return m.LastUpdated.AsTime()
}

// GetImmutableK8SUpdated implements ImmutableNode
func (m *Node) GetImmutableK8SUpdated() time.Time {
	if m == nil || m.K8SUpdated == nil {
		return time.Time{}
	}
	return m.K8SUpdated.AsTime()
}

// GetImmutableScan implements ImmutableNode
func (m *Node) GetImmutableScan() ImmutableNodeScan {
	return m.GetScan()
}

// GetImmutableNotes implements ImmutableNode
func (m *Node) GetImmutableNotes() iter.Seq[Node_Note] {
	return func(yield func(Node_Note) bool) {
		if m == nil || m.Notes == nil {
			return
		}
		for _, v := range m.Notes {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that Node implements ImmutableNode
var _ ImmutableNode = (*Node)(nil)

// ImmutableNodeScan is an immutable interface for NodeScan
type ImmutableNodeScan interface {
	GetImmutableScanTime() time.Time
	GetOperatingSystem() string
	GetImmutableComponents() iter.Seq[ImmutableEmbeddedNodeScanComponent]
	GetImmutableNotes() iter.Seq[NodeScan_Note]
	GetScannerVersion() NodeScan_Scanner
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeScan
}

// GetImmutableScanTime implements ImmutableNodeScan
func (m *NodeScan) GetImmutableScanTime() time.Time {
	if m == nil || m.ScanTime == nil {
		return time.Time{}
	}
	return m.ScanTime.AsTime()
}

// GetImmutableComponents implements ImmutableNodeScan
func (m *NodeScan) GetImmutableComponents() iter.Seq[ImmutableEmbeddedNodeScanComponent] {
	return func(yield func(ImmutableEmbeddedNodeScanComponent) bool) {
		if m == nil || m.Components == nil {
			return
		}
		for _, v := range m.Components {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableNotes implements ImmutableNodeScan
func (m *NodeScan) GetImmutableNotes() iter.Seq[NodeScan_Note] {
	return func(yield func(NodeScan_Note) bool) {
		if m == nil || m.Notes == nil {
			return
		}
		for _, v := range m.Notes {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that NodeScan implements ImmutableNodeScan
var _ ImmutableNodeScan = (*NodeScan)(nil)

// ImmutableNodeInventory is an immutable interface for NodeInventory
type ImmutableNodeInventory interface {
	GetNodeId() string
	GetNodeName() string
	GetImmutableScanTime() time.Time
	// Components represents a subset of the scannerV1.Components proto message containing only fields required for RHCOS node scanning.
	// Keep scanner Components and NodeInventory_Components in sync to the degree defined by fuctions:
	// func convertAndDedupRHELComponents (in pkg 'nodeinventorizer'), and the respective reverse convertion in pkg 'clairify'.
	// We are not using scannerV1.Components here for the following reasons:
	// - to avoid conflicts between v1 and scannerV1 APIs when generating the code in central/graphql/resolvers/generated.go
	// - to not expose scanner v1 API over stackrox graphql API
	GetImmutableComponents() ImmutableNodeInventory_Components
	// Note represents scannerV1.Note
	GetImmutableNotes() iter.Seq[NodeInventory_Note]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeInventory
}

// GetImmutableScanTime implements ImmutableNodeInventory
func (m *NodeInventory) GetImmutableScanTime() time.Time {
	if m == nil || m.ScanTime == nil {
		return time.Time{}
	}
	return m.ScanTime.AsTime()
}

// GetImmutableComponents implements ImmutableNodeInventory
func (m *NodeInventory) GetImmutableComponents() ImmutableNodeInventory_Components {
	return m.GetComponents()
}

// GetImmutableNotes implements ImmutableNodeInventory
func (m *NodeInventory) GetImmutableNotes() iter.Seq[NodeInventory_Note] {
	return func(yield func(NodeInventory_Note) bool) {
		if m == nil || m.Notes == nil {
			return
		}
		for _, v := range m.Notes {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that NodeInventory implements ImmutableNodeInventory
var _ ImmutableNodeInventory = (*NodeInventory)(nil)

// ImmutableNodeInventory_Components is an immutable interface for NodeInventory_Components
type ImmutableNodeInventory_Components interface {
	GetNamespace() string
	GetImmutableRhelComponents() iter.Seq[ImmutableNodeInventory_Components_RHELComponent]
	GetImmutableRhelContentSets() iter.Seq[string]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeInventory_Components
}

// GetImmutableRhelComponents implements ImmutableNodeInventory_Components
func (m *NodeInventory_Components) GetImmutableRhelComponents() iter.Seq[ImmutableNodeInventory_Components_RHELComponent] {
	return func(yield func(ImmutableNodeInventory_Components_RHELComponent) bool) {
		if m == nil || m.RhelComponents == nil {
			return
		}
		for _, v := range m.RhelComponents {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableRhelContentSets implements ImmutableNodeInventory_Components
func (m *NodeInventory_Components) GetImmutableRhelContentSets() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.RhelContentSets == nil {
			return
		}
		for _, v := range m.RhelContentSets {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that NodeInventory_Components implements ImmutableNodeInventory_Components
var _ ImmutableNodeInventory_Components = (*NodeInventory_Components)(nil)

// ImmutableNodeInventory_Components_RHELComponent is an immutable interface for NodeInventory_Components_RHELComponent
type ImmutableNodeInventory_Components_RHELComponent interface {
	GetId() int64
	GetName() string
	GetNamespace() string
	GetVersion() string
	GetArch() string
	GetModule() string
	GetAddedBy() string
	GetImmutableExecutables() iter.Seq[ImmutableNodeInventory_Components_RHELComponent_Executable]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeInventory_Components_RHELComponent
}

// GetImmutableExecutables implements ImmutableNodeInventory_Components_RHELComponent
func (m *NodeInventory_Components_RHELComponent) GetImmutableExecutables() iter.Seq[ImmutableNodeInventory_Components_RHELComponent_Executable] {
	return func(yield func(ImmutableNodeInventory_Components_RHELComponent_Executable) bool) {
		if m == nil || m.Executables == nil {
			return
		}
		for _, v := range m.Executables {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that NodeInventory_Components_RHELComponent implements ImmutableNodeInventory_Components_RHELComponent
var _ ImmutableNodeInventory_Components_RHELComponent = (*NodeInventory_Components_RHELComponent)(nil)

// ImmutableNodeInventory_Components_RHELComponent_Executable is an immutable interface for NodeInventory_Components_RHELComponent_Executable
type ImmutableNodeInventory_Components_RHELComponent_Executable interface {
	GetPath() string
	GetImmutableRequiredFeatures() iter.Seq[ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeInventory_Components_RHELComponent_Executable
}

// GetImmutableRequiredFeatures implements ImmutableNodeInventory_Components_RHELComponent_Executable
func (m *NodeInventory_Components_RHELComponent_Executable) GetImmutableRequiredFeatures() iter.Seq[ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion] {
	return func(yield func(ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) bool) {
		if m == nil || m.RequiredFeatures == nil {
			return
		}
		for _, v := range m.RequiredFeatures {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that NodeInventory_Components_RHELComponent_Executable implements ImmutableNodeInventory_Components_RHELComponent_Executable
var _ ImmutableNodeInventory_Components_RHELComponent_Executable = (*NodeInventory_Components_RHELComponent_Executable)(nil)

// ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion is an immutable interface for NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion
type ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion interface {
	GetName() string
	GetVersion() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion
}

// Verify that NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion implements ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion
var _ ImmutableNodeInventory_Components_RHELComponent_Executable_FeatureNameVersion = (*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion)(nil)

// ImmutableEmbeddedNodeScanComponent is an immutable interface for EmbeddedNodeScanComponent
type ImmutableEmbeddedNodeScanComponent interface {
	GetName() string
	GetVersion() string
	GetImmutableVulns() iter.Seq[ImmutableEmbeddedVulnerability]
	GetImmutableVulnerabilities() iter.Seq[ImmutableNodeVulnerability]
	GetPriority() int64
	GetTopCvss() float32
	GetRiskScore() float32
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *EmbeddedNodeScanComponent
}

// GetImmutableVulns implements ImmutableEmbeddedNodeScanComponent
func (m *EmbeddedNodeScanComponent) GetImmutableVulns() iter.Seq[ImmutableEmbeddedVulnerability] {
	return func(yield func(ImmutableEmbeddedVulnerability) bool) {
		if m == nil || m.Vulns == nil {
			return
		}
		for _, v := range m.Vulns {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableVulnerabilities implements ImmutableEmbeddedNodeScanComponent
func (m *EmbeddedNodeScanComponent) GetImmutableVulnerabilities() iter.Seq[ImmutableNodeVulnerability] {
	return func(yield func(ImmutableNodeVulnerability) bool) {
		if m == nil || m.Vulnerabilities == nil {
			return
		}
		for _, v := range m.Vulnerabilities {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that EmbeddedNodeScanComponent implements ImmutableEmbeddedNodeScanComponent
var _ ImmutableEmbeddedNodeScanComponent = (*EmbeddedNodeScanComponent)(nil)
