// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/node.proto

package storage

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node_Note int32

const (
	Node_MISSING_SCAN_DATA Node_Note = 0
)

var Node_Note_name = map[int32]string{
	0: "MISSING_SCAN_DATA",
}

var Node_Note_value = map[string]int32{
	"MISSING_SCAN_DATA": 0,
}

func (x Node_Note) String() string {
	return proto.EnumName(Node_Note_name, int32(x))
}

func (Node_Note) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{0, 0}
}

type NodeScan_Note int32

const (
	NodeScan_UNSET                           NodeScan_Note = 0
	NodeScan_UNSUPPORTED                     NodeScan_Note = 1
	NodeScan_KERNEL_UNSUPPORTED              NodeScan_Note = 2
	NodeScan_CERTIFIED_RHEL_CVES_UNAVAILABLE NodeScan_Note = 3
)

var NodeScan_Note_name = map[int32]string{
	0: "UNSET",
	1: "UNSUPPORTED",
	2: "KERNEL_UNSUPPORTED",
	3: "CERTIFIED_RHEL_CVES_UNAVAILABLE",
}

var NodeScan_Note_value = map[string]int32{
	"UNSET":                           0,
	"UNSUPPORTED":                     1,
	"KERNEL_UNSUPPORTED":              2,
	"CERTIFIED_RHEL_CVES_UNAVAILABLE": 3,
}

func (x NodeScan_Note) String() string {
	return proto.EnumName(NodeScan_Note_name, int32(x))
}

func (NodeScan_Note) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{1, 0}
}

type NodeInventory_Note int32

const (
	NodeInventory_OS_CVES_UNAVAILABLE             NodeInventory_Note = 0
	NodeInventory_OS_CVES_STALE                   NodeInventory_Note = 1
	NodeInventory_LANGUAGE_CVES_UNAVAILABLE       NodeInventory_Note = 2
	NodeInventory_CERTIFIED_RHEL_SCAN_UNAVAILABLE NodeInventory_Note = 3
	NodeInventory_CONTENT_SETS_UNAVAILABLE        NodeInventory_Note = 4
)

var NodeInventory_Note_name = map[int32]string{
	0: "OS_CVES_UNAVAILABLE",
	1: "OS_CVES_STALE",
	2: "LANGUAGE_CVES_UNAVAILABLE",
	3: "CERTIFIED_RHEL_SCAN_UNAVAILABLE",
	4: "CONTENT_SETS_UNAVAILABLE",
}

var NodeInventory_Note_value = map[string]int32{
	"OS_CVES_UNAVAILABLE":             0,
	"OS_CVES_STALE":                   1,
	"LANGUAGE_CVES_UNAVAILABLE":       2,
	"CERTIFIED_RHEL_SCAN_UNAVAILABLE": 3,
	"CONTENT_SETS_UNAVAILABLE":        4,
}

func (x NodeInventory_Note) String() string {
	return proto.EnumName(NodeInventory_Note_name, int32(x))
}

func (NodeInventory_Note) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2, 0}
}

// Node represents information about a node in the cluster.
// next available tag: 28
type Node struct {
	// A unique ID identifying this node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Node ID,store" sql:"pk,type(uuid)"`
	// The (host)name of the node. Might or might not be the same as ID.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Node,store"`
	// Taints on the host
	Taints      []*Taint          `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
	ClusterId   string            `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,store" sql:"fk(Cluster:id),no-fk-constraint,type(uuid)"`
	ClusterName string            `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" search:"Cluster,store"`
	Labels      map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" search:"Node Label" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" search:"Node Annotation" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// When the cluster reported the node was added
	JoinedAt *types.Timestamp `protobuf:"bytes,13,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty" search:"Node Join Time,store"`
	// node internal IP addresses
	InternalIpAddresses []string `protobuf:"bytes,8,rep,name=internal_ip_addresses,json=internalIpAddresses,proto3" json:"internal_ip_addresses,omitempty"`
	// node external IP addresses
	ExternalIpAddresses []string `protobuf:"bytes,9,rep,name=external_ip_addresses,json=externalIpAddresses,proto3" json:"external_ip_addresses,omitempty"`
	// From NodeInfo
	ContainerRuntimeVersion string                `protobuf:"bytes,10,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty"` // Deprecated: Do not use.
	ContainerRuntime        *ContainerRuntimeInfo `protobuf:"bytes,14,opt,name=container_runtime,json=containerRuntime,proto3" json:"container_runtime,omitempty"`
	KernelVersion           string                `protobuf:"bytes,11,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// From NodeInfo. Operating system reported by the node (ex: linux).
	OperatingSystem string `protobuf:"bytes,17,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	// From NodeInfo. OS image reported by the node from /etc/os-release.
	OsImage          string           `protobuf:"bytes,12,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty" search:"Operating System,store"`
	KubeletVersion   string           `protobuf:"bytes,15,opt,name=kubelet_version,json=kubeletVersion,proto3" json:"kubelet_version,omitempty"`
	KubeProxyVersion string           `protobuf:"bytes,16,opt,name=kube_proxy_version,json=kubeProxyVersion,proto3" json:"kube_proxy_version,omitempty"`
	LastUpdated      *types.Timestamp `protobuf:"bytes,25,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" search:"Last Updated,hidden"`
	// Time we received an update from Kubernetes.
	K8SUpdated *types.Timestamp `protobuf:"bytes,26,opt,name=k8s_updated,json=k8sUpdated,proto3" json:"k8s_updated,omitempty" sensorhash:"ignore"`
	Scan       *NodeScan        `protobuf:"bytes,18,opt,name=scan,proto3" json:"scan,omitempty" policy:"Node Scan"`
	// Types that are valid to be assigned to SetComponents:
	//	*Node_Components
	SetComponents isNode_SetComponents `protobuf_oneof:"set_components"`
	// Types that are valid to be assigned to SetCves:
	//	*Node_Cves
	SetCves isNode_SetCves `protobuf_oneof:"set_cves"`
	// Types that are valid to be assigned to SetFixable:
	//	*Node_FixableCves
	SetFixable isNode_SetFixable `protobuf_oneof:"set_fixable"`
	Priority   int64             `protobuf:"varint,22,opt,name=priority,proto3" json:"priority,omitempty" search:"Node Risk Priority,hidden"`
	RiskScore  float32           `protobuf:"fixed32,23,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty" search:"Node Risk Score,hidden"`
	// Types that are valid to be assigned to SetTopCvss:
	//	*Node_TopCvss
	SetTopCvss           isNode_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	Notes                []Node_Note       `protobuf:"varint,27,rep,packed,name=notes,proto3,enum=storage.Node_Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type isNode_SetComponents interface {
	isNode_SetComponents()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNode_SetComponents
}
type isNode_SetCves interface {
	isNode_SetCves()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNode_SetCves
}
type isNode_SetFixable interface {
	isNode_SetFixable()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNode_SetFixable
}
type isNode_SetTopCvss interface {
	isNode_SetTopCvss()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNode_SetTopCvss
}

type Node_Components struct {
	Components int32 `protobuf:"varint,19,opt,name=components,proto3,oneof" json:"components,omitempty" search:"Component Count,store,hidden"`
}
type Node_Cves struct {
	Cves int32 `protobuf:"varint,20,opt,name=cves,proto3,oneof" json:"cves,omitempty" search:"CVE Count,store,hidden"`
}
type Node_FixableCves struct {
	FixableCves int32 `protobuf:"varint,21,opt,name=fixable_cves,json=fixableCves,proto3,oneof" json:"fixable_cves,omitempty" search:"Fixable CVE Count,store,hidden"`
}
type Node_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,24,opt,name=top_cvss,json=topCvss,proto3,oneof" json:"top_cvss,omitempty" search:"Node Top CVSS,store"`
}

func (*Node_Components) isNode_SetComponents() {}
func (m *Node_Components) Clone() isNode_SetComponents {
	if m == nil {
		return nil
	}
	cloned := new(Node_Components)
	*cloned = *m

	return cloned
}
func (*Node_Cves) isNode_SetCves() {}
func (m *Node_Cves) Clone() isNode_SetCves {
	if m == nil {
		return nil
	}
	cloned := new(Node_Cves)
	*cloned = *m

	return cloned
}
func (*Node_FixableCves) isNode_SetFixable() {}
func (m *Node_FixableCves) Clone() isNode_SetFixable {
	if m == nil {
		return nil
	}
	cloned := new(Node_FixableCves)
	*cloned = *m

	return cloned
}
func (*Node_TopCvss) isNode_SetTopCvss() {}
func (m *Node_TopCvss) Clone() isNode_SetTopCvss {
	if m == nil {
		return nil
	}
	cloned := new(Node_TopCvss)
	*cloned = *m

	return cloned
}

func (m *Node) GetSetComponents() isNode_SetComponents {
	if m != nil {
		return m.SetComponents
	}
	return nil
}
func (m *Node) GetSetCves() isNode_SetCves {
	if m != nil {
		return m.SetCves
	}
	return nil
}
func (m *Node) GetSetFixable() isNode_SetFixable {
	if m != nil {
		return m.SetFixable
	}
	return nil
}
func (m *Node) GetSetTopCvss() isNode_SetTopCvss {
	if m != nil {
		return m.SetTopCvss
	}
	return nil
}

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetTaints() []*Taint {
	if m != nil {
		return m.Taints
	}
	return nil
}

func (m *Node) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Node) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *Node) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Node) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Node) GetJoinedAt() *types.Timestamp {
	if m != nil {
		return m.JoinedAt
	}
	return nil
}

func (m *Node) GetInternalIpAddresses() []string {
	if m != nil {
		return m.InternalIpAddresses
	}
	return nil
}

func (m *Node) GetExternalIpAddresses() []string {
	if m != nil {
		return m.ExternalIpAddresses
	}
	return nil
}

// Deprecated: Do not use.
func (m *Node) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Node) GetContainerRuntime() *ContainerRuntimeInfo {
	if m != nil {
		return m.ContainerRuntime
	}
	return nil
}

func (m *Node) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Node) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Node) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Node) GetKubeletVersion() string {
	if m != nil {
		return m.KubeletVersion
	}
	return ""
}

func (m *Node) GetKubeProxyVersion() string {
	if m != nil {
		return m.KubeProxyVersion
	}
	return ""
}

func (m *Node) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *Node) GetK8SUpdated() *types.Timestamp {
	if m != nil {
		return m.K8SUpdated
	}
	return nil
}

func (m *Node) GetScan() *NodeScan {
	if m != nil {
		return m.Scan
	}
	return nil
}

func (m *Node) GetComponents() int32 {
	if x, ok := m.GetSetComponents().(*Node_Components); ok {
		return x.Components
	}
	return 0
}

func (m *Node) GetCves() int32 {
	if x, ok := m.GetSetCves().(*Node_Cves); ok {
		return x.Cves
	}
	return 0
}

func (m *Node) GetFixableCves() int32 {
	if x, ok := m.GetSetFixable().(*Node_FixableCves); ok {
		return x.FixableCves
	}
	return 0
}

func (m *Node) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Node) GetRiskScore() float32 {
	if m != nil {
		return m.RiskScore
	}
	return 0
}

func (m *Node) GetTopCvss() float32 {
	if x, ok := m.GetSetTopCvss().(*Node_TopCvss); ok {
		return x.TopCvss
	}
	return 0
}

func (m *Node) GetNotes() []Node_Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Node) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Node_Components)(nil),
		(*Node_Cves)(nil),
		(*Node_FixableCves)(nil),
		(*Node_TopCvss)(nil),
	}
}

func (m *Node) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Node) Clone() *Node {
	if m == nil {
		return nil
	}
	cloned := new(Node)
	*cloned = *m

	if m.Taints != nil {
		cloned.Taints = make([]*Taint, len(m.Taints))
		for idx, v := range m.Taints {
			cloned.Taints[idx] = v.Clone()
		}
	}
	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	if m.Annotations != nil {
		cloned.Annotations = make(map[string]string, len(m.Annotations))
		for k, v := range m.Annotations {
			cloned.Annotations[k] = v
		}
	}
	cloned.JoinedAt = m.JoinedAt.Clone()
	if m.InternalIpAddresses != nil {
		cloned.InternalIpAddresses = make([]string, len(m.InternalIpAddresses))
		copy(cloned.InternalIpAddresses, m.InternalIpAddresses)
	}
	if m.ExternalIpAddresses != nil {
		cloned.ExternalIpAddresses = make([]string, len(m.ExternalIpAddresses))
		copy(cloned.ExternalIpAddresses, m.ExternalIpAddresses)
	}
	cloned.ContainerRuntime = m.ContainerRuntime.Clone()
	cloned.LastUpdated = m.LastUpdated.Clone()
	cloned.K8SUpdated = m.K8SUpdated.Clone()
	cloned.Scan = m.Scan.Clone()
	if m.SetComponents != nil {
		cloned.SetComponents = m.SetComponents.Clone()
	}
	if m.SetCves != nil {
		cloned.SetCves = m.SetCves.Clone()
	}
	if m.SetFixable != nil {
		cloned.SetFixable = m.SetFixable.Clone()
	}
	if m.SetTopCvss != nil {
		cloned.SetTopCvss = m.SetTopCvss.Clone()
	}
	if m.Notes != nil {
		cloned.Notes = make([]Node_Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

// Next tag: 5
type NodeScan struct {
	ScanTime             *types.Timestamp             `protobuf:"bytes,1,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty" search:"Node Scan Time,store"`
	OperatingSystem      string                       `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Components           []*EmbeddedNodeScanComponent `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" sql:"-"`
	Notes                []NodeScan_Note              `protobuf:"varint,4,rep,packed,name=notes,proto3,enum=storage.NodeScan_Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *NodeScan) Reset()         { *m = NodeScan{} }
func (m *NodeScan) String() string { return proto.CompactTextString(m) }
func (*NodeScan) ProtoMessage()    {}
func (*NodeScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{1}
}
func (m *NodeScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeScan.Merge(m, src)
}
func (m *NodeScan) XXX_Size() int {
	return m.Size()
}
func (m *NodeScan) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeScan.DiscardUnknown(m)
}

var xxx_messageInfo_NodeScan proto.InternalMessageInfo

func (m *NodeScan) GetScanTime() *types.Timestamp {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *NodeScan) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *NodeScan) GetComponents() []*EmbeddedNodeScanComponent {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *NodeScan) GetNotes() []NodeScan_Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *NodeScan) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeScan) Clone() *NodeScan {
	if m == nil {
		return nil
	}
	cloned := new(NodeScan)
	*cloned = *m

	cloned.ScanTime = m.ScanTime.Clone()
	if m.Components != nil {
		cloned.Components = make([]*EmbeddedNodeScanComponent, len(m.Components))
		for idx, v := range m.Components {
			cloned.Components[idx] = v.Clone()
		}
	}
	if m.Notes != nil {
		cloned.Notes = make([]NodeScan_Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

type NodeInventory struct {
	NodeId   string           `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeName string           `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ScanTime *types.Timestamp `protobuf:"bytes,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	// Components represents a subset of the scannerV1.Components proto message containing only fields required for RHCOS node scanning.
	// Keep scanner Components and NodeInventory_Components in sync to the degree defined by fuctions:
	// func convertAndDedupRHELComponents (in pkg 'nodeinventorizer'), and the respective reverse convertion in pkg 'clairify'.
	// We are not using scannerV1.Components here for the following reasons:
	// - to avoid conflicts between v1 and scannerV1 APIs when generating the code in central/graphql/resolvers/generated.go
	// - to not expose scanner v1 API over stackrox graphql API
	Components *NodeInventory_Components `protobuf:"bytes,4,opt,name=components,proto3" json:"components,omitempty"`
	// Note represents scannerV1.Note
	Notes                []NodeInventory_Note `protobuf:"varint,5,rep,packed,name=notes,proto3,enum=storage.NodeInventory_Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodeInventory) Reset()         { *m = NodeInventory{} }
func (m *NodeInventory) String() string { return proto.CompactTextString(m) }
func (*NodeInventory) ProtoMessage()    {}
func (*NodeInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2}
}
func (m *NodeInventory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventory.Merge(m, src)
}
func (m *NodeInventory) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventory.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventory proto.InternalMessageInfo

func (m *NodeInventory) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeInventory) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeInventory) GetScanTime() *types.Timestamp {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *NodeInventory) GetComponents() *NodeInventory_Components {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *NodeInventory) GetNotes() []NodeInventory_Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *NodeInventory) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventory) Clone() *NodeInventory {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventory)
	*cloned = *m

	cloned.ScanTime = m.ScanTime.Clone()
	cloned.Components = m.Components.Clone()
	if m.Notes != nil {
		cloned.Notes = make([]NodeInventory_Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

type NodeInventory_Components struct {
	Namespace            string                                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RhelComponents       []*NodeInventory_Components_RHELComponent `protobuf:"bytes,2,rep,name=rhel_components,json=rhelComponents,proto3" json:"rhel_components,omitempty"`
	RhelContentSets      []string                                  `protobuf:"bytes,3,rep,name=rhel_content_sets,json=rhelContentSets,proto3" json:"rhel_content_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *NodeInventory_Components) Reset()         { *m = NodeInventory_Components{} }
func (m *NodeInventory_Components) String() string { return proto.CompactTextString(m) }
func (*NodeInventory_Components) ProtoMessage()    {}
func (*NodeInventory_Components) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2, 0}
}
func (m *NodeInventory_Components) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventory_Components) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventory_Components.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventory_Components) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventory_Components.Merge(m, src)
}
func (m *NodeInventory_Components) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventory_Components) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventory_Components.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventory_Components proto.InternalMessageInfo

func (m *NodeInventory_Components) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NodeInventory_Components) GetRhelComponents() []*NodeInventory_Components_RHELComponent {
	if m != nil {
		return m.RhelComponents
	}
	return nil
}

func (m *NodeInventory_Components) GetRhelContentSets() []string {
	if m != nil {
		return m.RhelContentSets
	}
	return nil
}

func (m *NodeInventory_Components) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventory_Components) Clone() *NodeInventory_Components {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventory_Components)
	*cloned = *m

	if m.RhelComponents != nil {
		cloned.RhelComponents = make([]*NodeInventory_Components_RHELComponent, len(m.RhelComponents))
		for idx, v := range m.RhelComponents {
			cloned.RhelComponents[idx] = v.Clone()
		}
	}
	if m.RhelContentSets != nil {
		cloned.RhelContentSets = make([]string, len(m.RhelContentSets))
		copy(cloned.RhelContentSets, m.RhelContentSets)
	}
	return cloned
}

type NodeInventory_Components_RHELComponent struct {
	Id                   int64                                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string                                               `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version              string                                               `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Arch                 string                                               `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Module               string                                               `protobuf:"bytes,6,opt,name=module,proto3" json:"module,omitempty"`
	AddedBy              string                                               `protobuf:"bytes,7,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
	Executables          []*NodeInventory_Components_RHELComponent_Executable `protobuf:"bytes,8,rep,name=executables,proto3" json:"executables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *NodeInventory_Components_RHELComponent) Reset() {
	*m = NodeInventory_Components_RHELComponent{}
}
func (m *NodeInventory_Components_RHELComponent) String() string { return proto.CompactTextString(m) }
func (*NodeInventory_Components_RHELComponent) ProtoMessage()    {}
func (*NodeInventory_Components_RHELComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2, 0, 0}
}
func (m *NodeInventory_Components_RHELComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventory_Components_RHELComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventory_Components_RHELComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventory_Components_RHELComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventory_Components_RHELComponent.Merge(m, src)
}
func (m *NodeInventory_Components_RHELComponent) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventory_Components_RHELComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventory_Components_RHELComponent.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventory_Components_RHELComponent proto.InternalMessageInfo

func (m *NodeInventory_Components_RHELComponent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NodeInventory_Components_RHELComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent) GetExecutables() []*NodeInventory_Components_RHELComponent_Executable {
	if m != nil {
		return m.Executables
	}
	return nil
}

func (m *NodeInventory_Components_RHELComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventory_Components_RHELComponent) Clone() *NodeInventory_Components_RHELComponent {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventory_Components_RHELComponent)
	*cloned = *m

	if m.Executables != nil {
		cloned.Executables = make([]*NodeInventory_Components_RHELComponent_Executable, len(m.Executables))
		for idx, v := range m.Executables {
			cloned.Executables[idx] = v.Clone()
		}
	}
	return cloned
}

type NodeInventory_Components_RHELComponent_Executable struct {
	Path                 string                                                                  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	RequiredFeatures     []*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion `protobuf:"bytes,2,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                  `json:"-"`
	XXX_sizecache        int32                                                                   `json:"-"`
}

func (m *NodeInventory_Components_RHELComponent_Executable) Reset() {
	*m = NodeInventory_Components_RHELComponent_Executable{}
}
func (m *NodeInventory_Components_RHELComponent_Executable) String() string {
	return proto.CompactTextString(m)
}
func (*NodeInventory_Components_RHELComponent_Executable) ProtoMessage() {}
func (*NodeInventory_Components_RHELComponent_Executable) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2, 0, 0, 0}
}
func (m *NodeInventory_Components_RHELComponent_Executable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventory_Components_RHELComponent_Executable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventory_Components_RHELComponent_Executable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable.Merge(m, src)
}
func (m *NodeInventory_Components_RHELComponent_Executable) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventory_Components_RHELComponent_Executable) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable proto.InternalMessageInfo

func (m *NodeInventory_Components_RHELComponent_Executable) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent_Executable) GetRequiredFeatures() []*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion {
	if m != nil {
		return m.RequiredFeatures
	}
	return nil
}

func (m *NodeInventory_Components_RHELComponent_Executable) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventory_Components_RHELComponent_Executable) Clone() *NodeInventory_Components_RHELComponent_Executable {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventory_Components_RHELComponent_Executable)
	*cloned = *m

	if m.RequiredFeatures != nil {
		cloned.RequiredFeatures = make([]*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion, len(m.RequiredFeatures))
		for idx, v := range m.RequiredFeatures {
			cloned.RequiredFeatures[idx] = v.Clone()
		}
	}
	return cloned
}

type NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Reset() {
	*m = NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion{}
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) String() string {
	return proto.CompactTextString(m)
}
func (*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) ProtoMessage() {}
func (*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{2, 0, 0, 0, 0}
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion.Merge(m, src)
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) XXX_Size() int {
	return m.Size()
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion proto.InternalMessageInfo

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Clone() *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion {
	if m == nil {
		return nil
	}
	cloned := new(NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion)
	*cloned = *m

	return cloned
}

type EmbeddedNodeScanComponent struct {
	Name            string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" search:"Component,store"`
	Version         string                   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" search:"Component Version,store"`
	Vulns           []*EmbeddedVulnerability `protobuf:"bytes,3,rep,name=vulns,proto3" json:"vulns,omitempty"`
	Vulnerabilities []*NodeVulnerability     `protobuf:"bytes,7,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	Priority        int64                    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are valid to be assigned to SetTopCvss:
	//	*EmbeddedNodeScanComponent_TopCvss
	SetTopCvss           isEmbeddedNodeScanComponent_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	RiskScore            float32                                `protobuf:"fixed32,6,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *EmbeddedNodeScanComponent) Reset()         { *m = EmbeddedNodeScanComponent{} }
func (m *EmbeddedNodeScanComponent) String() string { return proto.CompactTextString(m) }
func (*EmbeddedNodeScanComponent) ProtoMessage()    {}
func (*EmbeddedNodeScanComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_107f6eed651900c7, []int{3}
}
func (m *EmbeddedNodeScanComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmbeddedNodeScanComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmbeddedNodeScanComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmbeddedNodeScanComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbeddedNodeScanComponent.Merge(m, src)
}
func (m *EmbeddedNodeScanComponent) XXX_Size() int {
	return m.Size()
}
func (m *EmbeddedNodeScanComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbeddedNodeScanComponent.DiscardUnknown(m)
}

var xxx_messageInfo_EmbeddedNodeScanComponent proto.InternalMessageInfo

type isEmbeddedNodeScanComponent_SetTopCvss interface {
	isEmbeddedNodeScanComponent_SetTopCvss()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isEmbeddedNodeScanComponent_SetTopCvss
}

type EmbeddedNodeScanComponent_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,5,opt,name=top_cvss,json=topCvss,proto3,oneof" json:"top_cvss,omitempty"`
}

func (*EmbeddedNodeScanComponent_TopCvss) isEmbeddedNodeScanComponent_SetTopCvss() {}
func (m *EmbeddedNodeScanComponent_TopCvss) Clone() isEmbeddedNodeScanComponent_SetTopCvss {
	if m == nil {
		return nil
	}
	cloned := new(EmbeddedNodeScanComponent_TopCvss)
	*cloned = *m

	return cloned
}

func (m *EmbeddedNodeScanComponent) GetSetTopCvss() isEmbeddedNodeScanComponent_SetTopCvss {
	if m != nil {
		return m.SetTopCvss
	}
	return nil
}

func (m *EmbeddedNodeScanComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmbeddedNodeScanComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EmbeddedNodeScanComponent) GetVulns() []*EmbeddedVulnerability {
	if m != nil {
		return m.Vulns
	}
	return nil
}

func (m *EmbeddedNodeScanComponent) GetVulnerabilities() []*NodeVulnerability {
	if m != nil {
		return m.Vulnerabilities
	}
	return nil
}

func (m *EmbeddedNodeScanComponent) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *EmbeddedNodeScanComponent) GetTopCvss() float32 {
	if x, ok := m.GetSetTopCvss().(*EmbeddedNodeScanComponent_TopCvss); ok {
		return x.TopCvss
	}
	return 0
}

func (m *EmbeddedNodeScanComponent) GetRiskScore() float32 {
	if m != nil {
		return m.RiskScore
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EmbeddedNodeScanComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EmbeddedNodeScanComponent_TopCvss)(nil),
	}
}

func (m *EmbeddedNodeScanComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *EmbeddedNodeScanComponent) Clone() *EmbeddedNodeScanComponent {
	if m == nil {
		return nil
	}
	cloned := new(EmbeddedNodeScanComponent)
	*cloned = *m

	if m.Vulns != nil {
		cloned.Vulns = make([]*EmbeddedVulnerability, len(m.Vulns))
		for idx, v := range m.Vulns {
			cloned.Vulns[idx] = v.Clone()
		}
	}
	if m.Vulnerabilities != nil {
		cloned.Vulnerabilities = make([]*NodeVulnerability, len(m.Vulnerabilities))
		for idx, v := range m.Vulnerabilities {
			cloned.Vulnerabilities[idx] = v.Clone()
		}
	}
	if m.SetTopCvss != nil {
		cloned.SetTopCvss = m.SetTopCvss.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterEnum("storage.Node_Note", Node_Note_name, Node_Note_value)
	proto.RegisterEnum("storage.NodeScan_Note", NodeScan_Note_name, NodeScan_Note_value)
	proto.RegisterEnum("storage.NodeInventory_Note", NodeInventory_Note_name, NodeInventory_Note_value)
	proto.RegisterType((*Node)(nil), "storage.Node")
	proto.RegisterMapType((map[string]string)(nil), "storage.Node.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "storage.Node.LabelsEntry")
	proto.RegisterType((*NodeScan)(nil), "storage.NodeScan")
	proto.RegisterType((*NodeInventory)(nil), "storage.NodeInventory")
	proto.RegisterType((*NodeInventory_Components)(nil), "storage.NodeInventory.Components")
	proto.RegisterType((*NodeInventory_Components_RHELComponent)(nil), "storage.NodeInventory.Components.RHELComponent")
	proto.RegisterType((*NodeInventory_Components_RHELComponent_Executable)(nil), "storage.NodeInventory.Components.RHELComponent.Executable")
	proto.RegisterType((*NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion)(nil), "storage.NodeInventory.Components.RHELComponent.Executable.FeatureNameVersion")
	proto.RegisterType((*EmbeddedNodeScanComponent)(nil), "storage.EmbeddedNodeScanComponent")
}

func init() { proto.RegisterFile("storage/node.proto", fileDescriptor_107f6eed651900c7) }

var fileDescriptor_107f6eed651900c7 = []byte{
	// 1739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x6d, 0x6e, 0xe3, 0xc6,
	0xf9, 0x37, 0x25, 0xd9, 0x96, 0x1e, 0xd9, 0xb2, 0x3c, 0xbb, 0x6b, 0xd3, 0xf2, 0xda, 0x64, 0x94,
	0x7f, 0x12, 0x6d, 0xe2, 0x95, 0xff, 0x75, 0x03, 0x74, 0x63, 0x60, 0x0d, 0x48, 0xb2, 0x76, 0x57,
	0x1b, 0x47, 0x36, 0x28, 0xd9, 0x28, 0x82, 0xa2, 0x04, 0x2d, 0x8e, 0x6d, 0x56, 0x12, 0x87, 0xe1,
	0x8c, 0x0c, 0xab, 0xe7, 0xe8, 0x87, 0x9e, 0xa0, 0x27, 0xe8, 0x19, 0x8a, 0x7e, 0xec, 0x09, 0x84,
	0x60, 0x7b, 0x82, 0xaa, 0x17, 0x28, 0x66, 0xc8, 0xa1, 0x48, 0xc9, 0x8b, 0x45, 0xf2, 0x8d, 0x7c,
	0x5e, 0x7e, 0xf3, 0xbc, 0xcf, 0x33, 0x80, 0x28, 0x23, 0xbe, 0x75, 0x8b, 0x0f, 0x5d, 0x62, 0xe3,
	0xaa, 0xe7, 0x13, 0x46, 0xd0, 0x6a, 0x48, 0x2b, 0x69, 0xb7, 0x84, 0xdc, 0x0e, 0xf0, 0xa1, 0x20,
	0x5f, 0x8f, 0x6e, 0x0e, 0x99, 0x33, 0xc4, 0x94, 0x59, 0x43, 0x2f, 0x90, 0x2c, 0x69, 0x52, 0xbb,
	0x47, 0x5c, 0x66, 0x39, 0x2e, 0xf6, 0x4d, 0x7f, 0xe4, 0x72, 0xa9, 0x50, 0xe0, 0xa9, 0x14, 0xe0,
	0x5c, 0x46, 0x43, 0xea, 0xae, 0xa4, 0xde, 0x8f, 0x06, 0x2e, 0xf6, 0xad, 0x6b, 0x67, 0xe0, 0xb0,
	0xb1, 0x54, 0xb9, 0x25, 0xb7, 0x44, 0x7c, 0x1e, 0xf2, 0xaf, 0x80, 0x5a, 0xfe, 0xc7, 0x06, 0x64,
	0xda, 0xc4, 0xc6, 0xe8, 0x04, 0x52, 0x8e, 0xad, 0x2a, 0xba, 0x52, 0xc9, 0xd5, 0xab, 0xd3, 0x89,
	0xf6, 0x35, 0xc5, 0x96, 0xdf, 0xbb, 0x3b, 0x2e, 0x73, 0xae, 0xde, 0x3a, 0x3d, 0xe0, 0xd8, 0xb8,
	0xac, 0xd3, 0x9f, 0x06, 0xc7, 0x65, 0xaf, 0x7f, 0xc0, 0xc6, 0x1e, 0xae, 0x8c, 0x46, 0x8e, 0xfd,
	0xa2, 0x6c, 0xa4, 0x1c, 0x1b, 0x7d, 0x03, 0x19, 0xd7, 0x1a, 0x62, 0x35, 0x25, 0x10, 0xb6, 0xa7,
	0x13, 0xed, 0x49, 0x1c, 0x21, 0x54, 0x37, 0x84, 0x10, 0xfa, 0x12, 0x56, 0x02, 0xc3, 0xd5, 0xb4,
	0x9e, 0xae, 0xe4, 0x8f, 0x0a, 0xd5, 0xd0, 0xf2, 0x6a, 0x97, 0x93, 0x8d, 0x90, 0x8b, 0x86, 0x00,
	0xbd, 0xc1, 0x88, 0x32, 0xec, 0x9b, 0x8e, 0xad, 0x66, 0x04, 0x74, 0x7b, 0x3a, 0xd1, 0xde, 0x4b,
	0xe8, 0x46, 0xc0, 0x9d, 0xb7, 0xef, 0xa6, 0x5f, 0x09, 0x39, 0xc7, 0x8e, 0xfd, 0xe2, 0xc0, 0x25,
	0x2f, 0x6f, 0xfa, 0x2f, 0x7b, 0xc4, 0xa5, 0xcc, 0xe7, 0xc0, 0x09, 0xe3, 0x73, 0xe1, 0x09, 0x2d,
	0x1b, 0xbd, 0x86, 0x35, 0x79, 0x9c, 0xf0, 0x65, 0x59, 0x1c, 0x58, 0x9a, 0x4e, 0xb4, 0xad, 0xb9,
	0x03, 0xa5, 0x3b, 0xf9, 0x50, 0xbe, 0xcd, 0xbd, 0x7a, 0x0f, 0x2b, 0x03, 0xeb, 0x1a, 0x0f, 0xa8,
	0xba, 0x22, 0xbc, 0xda, 0x89, 0xbc, 0xe2, 0x11, 0xa8, 0x9e, 0x09, 0x5e, 0xd3, 0x65, 0xfe, 0x78,
	0x31, 0x3e, 0xba, 0xe0, 0x96, 0x8d, 0x10, 0x01, 0xfd, 0x11, 0xf2, 0x96, 0xeb, 0x12, 0x66, 0x31,
	0x87, 0xb8, 0x54, 0x5d, 0x15, 0x80, 0xfb, 0x49, 0xc0, 0xda, 0x4c, 0x20, 0x40, 0x7d, 0x3e, 0x9d,
	0x68, 0x6a, 0x02, 0x75, 0x26, 0x52, 0x36, 0xe2, 0x80, 0xe8, 0x47, 0xc8, 0xfd, 0x89, 0x38, 0x2e,
	0xb6, 0x4d, 0x8b, 0xa9, 0xeb, 0xba, 0x52, 0xc9, 0x1f, 0x95, 0xaa, 0x41, 0x59, 0x56, 0x65, 0x59,
	0x56, 0xbb, 0xb2, 0x2c, 0xeb, 0x9f, 0x4d, 0x27, 0xda, 0x5e, 0x02, 0xf9, 0x3d, 0x71, 0x5c, 0x9d,
	0x0b, 0xc8, 0x50, 0x64, 0x03, 0xbc, 0x1a, 0x43, 0x47, 0xf0, 0xcc, 0x71, 0x19, 0xf6, 0x5d, 0x6b,
	0x60, 0x3a, 0x9e, 0x69, 0xd9, 0xb6, 0x8f, 0x29, 0xc5, 0x54, 0xcd, 0xea, 0xe9, 0x4a, 0xce, 0x78,
	0x22, 0x99, 0x2d, 0xaf, 0x26, 0x59, 0x5c, 0x07, 0x3f, 0x3c, 0xa6, 0x93, 0x0b, 0x74, 0x24, 0x33,
	0xae, 0x73, 0x02, 0x3b, 0x0b, 0xfd, 0x61, 0xde, 0x63, 0x9f, 0x3a, 0xc4, 0x55, 0x41, 0xe4, 0x2e,
	0xa5, 0x2a, 0xc6, 0x76, 0x24, 0x64, 0x04, 0x32, 0x57, 0x81, 0x08, 0x7a, 0x0f, 0x9b, 0x0b, 0xfa,
	0x6a, 0x41, 0xc4, 0x62, 0x2f, 0x8a, 0x74, 0x63, 0x4e, 0xb9, 0xe5, 0xde, 0x10, 0xa3, 0x38, 0x0f,
	0x89, 0xbe, 0x80, 0x42, 0x1f, 0xfb, 0x2e, 0x1e, 0x44, 0x06, 0xe4, 0xb9, 0x01, 0xc6, 0x7a, 0x40,
	0x95, 0x47, 0xbe, 0x80, 0x22, 0xf1, 0xb0, 0x6f, 0x31, 0xc7, 0xbd, 0x35, 0xe9, 0x98, 0x32, 0x3c,
	0x54, 0x37, 0x85, 0xe0, 0x46, 0x44, 0xef, 0x08, 0x32, 0x3a, 0x81, 0x2c, 0xa1, 0xa6, 0x33, 0xb4,
	0x6e, 0xb1, 0xba, 0x26, 0x9c, 0xf9, 0x7c, 0x3a, 0xd1, 0x34, 0x99, 0x84, 0x73, 0x29, 0xae, 0x07,
	0xf2, 0x32, 0x0d, 0xab, 0x84, 0xb6, 0xb8, 0x0e, 0xfa, 0x0a, 0x36, 0xfa, 0xa3, 0x6b, 0x3c, 0xc0,
	0x2c, 0x32, 0x69, 0x43, 0x9c, 0x54, 0x08, 0xc9, 0xd2, 0xa6, 0x03, 0x40, 0x9c, 0x62, 0x7a, 0x3e,
	0x79, 0x18, 0x47, 0xb2, 0x45, 0x21, 0x5b, 0xe4, 0x9c, 0x0b, 0xce, 0x90, 0xd2, 0x26, 0xac, 0x0d,
	0x2c, 0xca, 0xcc, 0x91, 0x67, 0x5b, 0x0c, 0xdb, 0xea, 0xce, 0x27, 0x6b, 0x47, 0x9f, 0x4e, 0xb4,
	0xe7, 0xd2, 0xec, 0x33, 0x8b, 0x32, 0xfd, 0x32, 0xd0, 0x3d, 0xb8, 0x73, 0x6c, 0x1b, 0xf3, 0xca,
	0xe4, 0x88, 0x21, 0x11, 0x75, 0x21, 0xdf, 0x7f, 0x45, 0x23, 0xfc, 0xd2, 0x27, 0xf1, 0xc3, 0x5e,
	0x72, 0x29, 0xf1, 0xef, 0x2c, 0x7a, 0x77, 0x5c, 0x76, 0x6e, 0x5d, 0x11, 0x0a, 0xe8, 0xbf, 0xa2,
	0x12, 0xf5, 0x35, 0x64, 0x68, 0xcf, 0x72, 0x55, 0x24, 0xe0, 0x36, 0x13, 0x8d, 0xd4, 0xe9, 0x59,
	0x6e, 0x7d, 0x6b, 0x3a, 0xd1, 0x90, 0x47, 0x06, 0x4e, 0x6f, 0x1c, 0x56, 0x38, 0x27, 0x97, 0x0d,
	0xa1, 0x86, 0xbe, 0x07, 0xe8, 0x91, 0xa1, 0x47, 0x5c, 0xcc, 0x87, 0xd6, 0x13, 0x5d, 0xa9, 0x2c,
	0xd7, 0x5f, 0x4c, 0x27, 0xda, 0x17, 0xd1, 0x5c, 0x90, 0x5c, 0xbd, 0x41, 0x46, 0x2e, 0x0b, 0xb2,
	0x21, 0x1d, 0x7c, 0xb7, 0x64, 0xc4, 0xd4, 0xd1, 0x77, 0x90, 0xe9, 0xdd, 0x63, 0xaa, 0x3e, 0x15,
	0x30, 0x89, 0xac, 0x36, 0xae, 0x9a, 0x8f, 0x02, 0x28, 0x86, 0x50, 0x41, 0x17, 0xb0, 0x76, 0xe3,
	0x3c, 0x58, 0xd7, 0x03, 0x6c, 0x0a, 0x88, 0x67, 0x02, 0xe2, 0x9b, 0xe9, 0x44, 0xfb, 0x4a, 0x42,
	0xbc, 0x09, 0xf8, 0xfa, 0xc7, 0xa0, 0x52, 0x46, 0x3e, 0x84, 0x68, 0x70, 0xc4, 0x3a, 0x64, 0x3d,
	0xdf, 0x21, 0xbe, 0xc3, 0xc6, 0xea, 0x96, 0xae, 0x54, 0xd2, 0xf5, 0x2f, 0xa7, 0x13, 0xad, 0x9c,
	0xe8, 0x75, 0xc3, 0xa1, 0x7d, 0xfd, 0x22, 0x94, 0x8a, 0xb2, 0x16, 0xe9, 0xa1, 0x3a, 0x80, 0xef,
	0xd0, 0xbe, 0x49, 0x7b, 0xc4, 0xc7, 0xea, 0xb6, 0xae, 0x54, 0x52, 0x49, 0xb7, 0x66, 0x28, 0x9d,
	0x5e, 0xcc, 0x16, 0x23, 0xc7, 0xd5, 0x04, 0x09, 0xbd, 0x86, 0x2c, 0x23, 0x9e, 0xd9, 0xbb, 0xa7,
	0x54, 0x55, 0x05, 0x42, 0xa2, 0x6e, 0x04, 0x42, 0x97, 0x78, 0x7a, 0xe3, 0xaa, 0xd3, 0x09, 0x6b,
	0xfd, 0x5d, 0xda, 0x58, 0x65, 0xc4, 0x6b, 0xdc, 0x53, 0x8a, 0x2a, 0xb0, 0xec, 0x12, 0x86, 0xa9,
	0xba, 0xab, 0xa7, 0x2b, 0x85, 0x23, 0x94, 0x9c, 0x94, 0x6d, 0xc2, 0xb0, 0x11, 0x08, 0x94, 0xbe,
	0x83, 0x7c, 0x6c, 0x12, 0xa3, 0x22, 0xa4, 0xfb, 0x78, 0x1c, 0x5c, 0x7c, 0x06, 0xff, 0x44, 0x4f,
	0x61, 0xf9, 0xde, 0x1a, 0x8c, 0xc2, 0xab, 0xcc, 0x08, 0x7e, 0x8e, 0x53, 0xaf, 0x94, 0xd2, 0x09,
	0x14, 0xe7, 0x67, 0xee, 0x2f, 0xd1, 0x2f, 0xef, 0xf1, 0xbb, 0x96, 0x61, 0xf4, 0x0c, 0x36, 0x7f,
	0x68, 0x75, 0x3a, 0xad, 0xf6, 0x5b, 0xb3, 0xd3, 0xa8, 0xb5, 0xcd, 0xd3, 0x5a, 0xb7, 0x56, 0x5c,
	0xaa, 0x17, 0xa1, 0x40, 0x31, 0x33, 0x67, 0x95, 0x52, 0x07, 0xc8, 0x0a, 0xca, 0x3d, 0xa6, 0xf5,
	0x75, 0xc8, 0xf3, 0xef, 0x30, 0x77, 0xf5, 0x02, 0xac, 0xf1, 0x5f, 0x19, 0xb3, 0xf2, 0x7f, 0x52,
	0x90, 0x95, 0xc5, 0xcc, 0xa7, 0x3b, 0x2f, 0x5b, 0x53, 0x4c, 0x34, 0xe5, 0x57, 0x4c, 0x77, 0x8e,
	0x92, 0x9c, 0xee, 0x1c, 0x8f, 0x13, 0x1e, 0x1d, 0x61, 0xe9, 0xc7, 0x47, 0xd8, 0x79, 0xa2, 0x6b,
	0x52, 0xe2, 0x0e, 0x2b, 0x47, 0x99, 0x69, 0x0e, 0xaf, 0xb1, 0x6d, 0x63, 0x5b, 0x5a, 0x1d, 0xb5,
	0x50, 0x3d, 0x3f, 0x9d, 0x68, 0xab, 0xe2, 0x22, 0x7f, 0x59, 0x4e, 0x74, 0xce, 0x81, 0xcc, 0x72,
	0x46, 0x64, 0x79, 0x6b, 0xa1, 0x8d, 0xe3, 0x99, 0x2e, 0x9b, 0x61, 0xb8, 0x73, 0xb0, 0x7c, 0xd9,
	0xee, 0x34, 0xbb, 0xc5, 0x25, 0xb4, 0x01, 0xf9, 0xcb, 0x76, 0xe7, 0xf2, 0xe2, 0xe2, 0xdc, 0xe8,
	0x36, 0x4f, 0x8b, 0x0a, 0xda, 0x02, 0xf4, 0x7d, 0xd3, 0x68, 0x37, 0xcf, 0xcc, 0x38, 0x3d, 0x85,
	0x3e, 0x07, 0xad, 0xd1, 0x34, 0xba, 0xad, 0x37, 0xad, 0xe6, 0xa9, 0x69, 0xbc, 0x6b, 0x9e, 0x99,
	0x8d, 0xab, 0x66, 0xc7, 0xbc, 0x6c, 0xd7, 0xae, 0x6a, 0xad, 0xb3, 0x5a, 0xfd, 0xac, 0x59, 0x4c,
	0x97, 0xff, 0x9e, 0x85, 0x75, 0x7e, 0x72, 0xcb, 0xbd, 0xc7, 0x2e, 0x23, 0xfe, 0x18, 0x6d, 0xc3,
	0x2a, 0x5f, 0xf8, 0x4c, 0xb9, 0x4a, 0x19, 0x2b, 0xfc, 0xb7, 0x65, 0xa3, 0x5d, 0xc8, 0x09, 0xc6,
	0x6c, 0x47, 0x32, 0xb2, 0x9c, 0x20, 0x16, 0x87, 0xdf, 0xc5, 0xd3, 0x95, 0xfe, 0x54, 0xba, 0x62,
	0xb9, 0xa8, 0x25, 0x02, 0x9c, 0x11, 0x9a, 0x9f, 0x25, 0x82, 0x12, 0x99, 0x56, 0x8d, 0xc2, 0x4b,
	0x13, 0x21, 0xfd, 0x8d, 0x0c, 0xe9, 0xb2, 0x08, 0xe9, 0xee, 0x47, 0xb4, 0xe3, 0x1d, 0xf4, 0xb7,
	0x65, 0x80, 0x19, 0x1a, 0x7a, 0x0e, 0x39, 0xee, 0x15, 0xf5, 0xac, 0x1e, 0x0e, 0xbd, 0x9e, 0x11,
	0xd0, 0xef, 0x61, 0xc3, 0xbf, 0xc3, 0x03, 0x73, 0xa1, 0x10, 0x0e, 0x3f, 0x69, 0x67, 0x95, 0xc7,
	0x3d, 0xfa, 0x35, 0x0a, 0x1c, 0x27, 0x76, 0xee, 0xd7, 0xb0, 0x19, 0x22, 0xbb, 0x0c, 0xbb, 0xcc,
	0xa4, 0x38, 0xdc, 0x27, 0x73, 0xc6, 0x46, 0x20, 0x2a, 0xe8, 0x1d, 0xcc, 0x68, 0xe9, 0xbf, 0x69,
	0x58, 0x4f, 0xa0, 0xa1, 0x42, 0xb4, 0xef, 0xa6, 0xc5, 0xfe, 0x8a, 0xe2, 0xfb, 0x6b, 0xb8, 0xa6,
	0x26, 0x3c, 0x4b, 0xcf, 0x7b, 0xa6, 0xc2, 0xaa, 0xbc, 0x2c, 0xc5, 0x66, 0x6a, 0xc8, 0x5f, 0x8e,
	0xc5, 0x7b, 0x29, 0xd8, 0x1f, 0x0d, 0xf1, 0x8d, 0xb6, 0x60, 0x65, 0x48, 0xec, 0xd1, 0x00, 0xab,
	0x2b, 0x41, 0x61, 0x04, 0x7f, 0x68, 0x07, 0xb2, 0x16, 0xef, 0x02, 0xf3, 0x7a, 0xac, 0xae, 0x06,
	0x30, 0xe2, 0xbf, 0x3e, 0x46, 0x7f, 0x80, 0x3c, 0x7e, 0xc0, 0xbd, 0x11, 0xe3, 0x0d, 0x1f, 0x6c,
	0x4f, 0xf9, 0xa3, 0xe3, 0x5f, 0x18, 0xb6, 0x6a, 0x33, 0x82, 0x30, 0xe2, 0x70, 0xa5, 0x9f, 0x15,
	0x80, 0x19, 0x8f, 0xdb, 0xec, 0x59, 0xec, 0x2e, 0x4c, 0xa0, 0xf8, 0x46, 0x7f, 0x86, 0x4d, 0x1f,
	0xff, 0x34, 0x72, 0x7c, 0x6c, 0x9b, 0x37, 0xd8, 0x62, 0x23, 0x1f, 0xcb, 0xec, 0xfd, 0xf0, 0xeb,
	0xcd, 0xa8, 0xbe, 0x09, 0xa0, 0x78, 0xe9, 0x87, 0x5b, 0x85, 0x51, 0x94, 0xe7, 0x84, 0x3c, 0x5a,
	0xaa, 0x03, 0x5a, 0x94, 0x8b, 0xb2, 0xa4, 0xc4, 0xb2, 0x14, 0xcb, 0x43, 0x2a, 0x91, 0x87, 0xf2,
	0x5f, 0x94, 0x70, 0x02, 0x6c, 0xc3, 0x93, 0xf3, 0xce, 0x62, 0x07, 0x2f, 0xa1, 0x4d, 0x58, 0x97,
	0x8c, 0x4e, 0xb7, 0x76, 0xd6, 0x2c, 0x2a, 0x68, 0x0f, 0x76, 0xce, 0x6a, 0xed, 0xb7, 0x97, 0xb5,
	0xb7, 0xcd, 0x45, 0x8d, 0xc7, 0x06, 0x83, 0x18, 0xe1, 0x89, 0xc1, 0x80, 0x9e, 0x83, 0xda, 0x38,
	0x6f, 0x77, 0x9b, 0xed, 0xae, 0xd9, 0x69, 0x76, 0x93, 0x10, 0x19, 0x3e, 0xaa, 0x77, 0x3e, 0x3a,
	0xfc, 0xd0, 0xff, 0xc7, 0x5d, 0x4c, 0xae, 0xf4, 0x91, 0x50, 0xf2, 0x35, 0x75, 0x32, 0x17, 0x80,
	0xfa, 0xff, 0x4d, 0x27, 0x9a, 0xbe, 0xb8, 0x99, 0x84, 0x41, 0x8c, 0x36, 0x45, 0x59, 0xae, 0xdf,
	0xc2, 0x32, 0x7f, 0x30, 0xca, 0xc7, 0xd8, 0xfe, 0xc2, 0x84, 0xbe, 0x8a, 0x3f, 0x27, 0x8d, 0x40,
	0x18, 0x9d, 0xc2, 0x46, 0xfc, 0x99, 0xe9, 0x60, 0xf9, 0x4a, 0x29, 0x25, 0x4a, 0x23, 0xa9, 0x3b,
	0xaf, 0x82, 0x4a, 0xb1, 0xf5, 0x23, 0x23, 0x9a, 0x71, 0xb6, 0x56, 0xec, 0xc6, 0x56, 0x02, 0xde,
	0x4a, 0xa9, 0x77, 0x4b, 0xb3, 0x0b, 0x7f, 0x2f, 0xb1, 0x73, 0xf0, 0x9e, 0x4a, 0xc5, 0xd6, 0x89,
	0xf9, 0xeb, 0xb1, 0xfe, 0xed, 0x3f, 0x3f, 0xec, 0x2b, 0xff, 0xfa, 0xb0, 0xaf, 0xfc, 0xfc, 0x61,
	0x5f, 0xf9, 0xeb, 0xbf, 0xf7, 0x97, 0x60, 0xc7, 0x21, 0x55, 0xca, 0xac, 0x5e, 0xdf, 0x27, 0x0f,
	0xc1, 0x94, 0x95, 0x76, 0xff, 0x28, 0x1f, 0xea, 0xd7, 0x2b, 0x82, 0xfe, 0xdb, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x3b, 0xe7, 0x9d, 0x24, 0xce, 0x0f, 0x00, 0x00,
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA2 := make([]byte, len(m.Notes)*10)
		var j1 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintNode(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.K8SUpdated != nil {
		{
			size, err := m.K8SUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.SetTopCvss != nil {
		{
			size := m.SetTopCvss.Size()
			i -= size
			if _, err := m.SetTopCvss.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RiskScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RiskScore))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbd
	}
	if m.Priority != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SetFixable != nil {
		{
			size := m.SetFixable.Size()
			i -= size
			if _, err := m.SetFixable.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SetCves != nil {
		{
			size := m.SetCves.Size()
			i -= size
			if _, err := m.SetCves.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SetComponents != nil {
		{
			size := m.SetComponents.Size()
			i -= size
			if _, err := m.SetComponents.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Scan != nil {
		{
			size, err := m.Scan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.OperatingSystem) > 0 {
		i -= len(m.OperatingSystem)
		copy(dAtA[i:], m.OperatingSystem)
		i = encodeVarintNode(dAtA, i, uint64(len(m.OperatingSystem)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.KubeProxyVersion) > 0 {
		i -= len(m.KubeProxyVersion)
		copy(dAtA[i:], m.KubeProxyVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.KubeProxyVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.KubeletVersion) > 0 {
		i -= len(m.KubeletVersion)
		copy(dAtA[i:], m.KubeletVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.KubeletVersion)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ContainerRuntime != nil {
		{
			size, err := m.ContainerRuntime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.JoinedAt != nil {
		{
			size, err := m.JoinedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OsImage) > 0 {
		i -= len(m.OsImage)
		copy(dAtA[i:], m.OsImage)
		i = encodeVarintNode(dAtA, i, uint64(len(m.OsImage)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ContainerRuntimeVersion) > 0 {
		i -= len(m.ContainerRuntimeVersion)
		copy(dAtA[i:], m.ContainerRuntimeVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ContainerRuntimeVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExternalIpAddresses) > 0 {
		for iNdEx := len(m.ExternalIpAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIpAddresses[iNdEx])
			copy(dAtA[i:], m.ExternalIpAddresses[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.ExternalIpAddresses[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.InternalIpAddresses) > 0 {
		for iNdEx := len(m.InternalIpAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InternalIpAddresses[iNdEx])
			copy(dAtA[i:], m.InternalIpAddresses[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.InternalIpAddresses[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNode(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNode(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Taints) > 0 {
		for iNdEx := len(m.Taints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Taints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Node_Components) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_Components) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNode(dAtA, i, uint64(m.Components))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	return len(dAtA) - i, nil
}
func (m *Node_Cves) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_Cves) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNode(dAtA, i, uint64(m.Cves))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *Node_FixableCves) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_FixableCves) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNode(dAtA, i, uint64(m.FixableCves))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *Node_TopCvss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node_TopCvss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopCvss))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc5
	return len(dAtA) - i, nil
}
func (m *NodeScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA9 := make([]byte, len(m.Notes)*10)
		var j8 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintNode(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatingSystem) > 0 {
		i -= len(m.OperatingSystem)
		copy(dAtA[i:], m.OperatingSystem)
		i = encodeVarintNode(dAtA, i, uint64(len(m.OperatingSystem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ScanTime != nil {
		{
			size, err := m.ScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA12 := make([]byte, len(m.Notes)*10)
		var j11 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintNode(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x2a
	}
	if m.Components != nil {
		{
			size, err := m.Components.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ScanTime != nil {
		{
			size, err := m.ScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInventory_Components) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventory_Components) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventory_Components) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RhelContentSets) > 0 {
		for iNdEx := len(m.RhelContentSets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RhelContentSets[iNdEx])
			copy(dAtA[i:], m.RhelContentSets[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.RhelContentSets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RhelComponents) > 0 {
		for iNdEx := len(m.RhelComponents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RhelComponents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInventory_Components_RHELComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventory_Components_RHELComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventory_Components_RHELComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Executables) > 0 {
		for iNdEx := len(m.Executables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AddedBy) > 0 {
		i -= len(m.AddedBy)
		copy(dAtA[i:], m.AddedBy)
		i = encodeVarintNode(dAtA, i, uint64(len(m.AddedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInventory_Components_RHELComponent_Executable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventory_Components_RHELComponent_Executable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventory_Components_RHELComponent_Executable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequiredFeatures) > 0 {
		for iNdEx := len(m.RequiredFeatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredFeatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmbeddedNodeScanComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmbeddedNodeScanComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmbeddedNodeScanComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vulnerabilities) > 0 {
		for iNdEx := len(m.Vulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RiskScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RiskScore))))
		i--
		dAtA[i] = 0x35
	}
	if m.SetTopCvss != nil {
		{
			size := m.SetTopCvss.Size()
			i -= size
			if _, err := m.SetTopCvss.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Priority != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Vulns) > 0 {
		for iNdEx := len(m.Vulns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vulns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmbeddedNodeScanComponent_TopCvss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmbeddedNodeScanComponent_TopCvss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopCvss))))
	i--
	dAtA[i] = 0x2d
	return len(dAtA) - i, nil
}
func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Taints) > 0 {
		for _, e := range m.Taints {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNode(uint64(len(k))) + 1 + len(v) + sovNode(uint64(len(v)))
			n += mapEntrySize + 1 + sovNode(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNode(uint64(len(k))) + 1 + len(v) + sovNode(uint64(len(v)))
			n += mapEntrySize + 1 + sovNode(uint64(mapEntrySize))
		}
	}
	if len(m.InternalIpAddresses) > 0 {
		for _, s := range m.InternalIpAddresses {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if len(m.ExternalIpAddresses) > 0 {
		for _, s := range m.ExternalIpAddresses {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = len(m.ContainerRuntimeVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.OsImage)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.JoinedAt != nil {
		l = m.JoinedAt.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ContainerRuntime != nil {
		l = m.ContainerRuntime.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.KubeletVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.KubeProxyVersion)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	l = len(m.OperatingSystem)
	if l > 0 {
		n += 2 + l + sovNode(uint64(l))
	}
	if m.Scan != nil {
		l = m.Scan.Size()
		n += 2 + l + sovNode(uint64(l))
	}
	if m.SetComponents != nil {
		n += m.SetComponents.Size()
	}
	if m.SetCves != nil {
		n += m.SetCves.Size()
	}
	if m.SetFixable != nil {
		n += m.SetFixable.Size()
	}
	if m.Priority != 0 {
		n += 2 + sovNode(uint64(m.Priority))
	}
	if m.RiskScore != 0 {
		n += 6
	}
	if m.SetTopCvss != nil {
		n += m.SetTopCvss.Size()
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 2 + l + sovNode(uint64(l))
	}
	if m.K8SUpdated != nil {
		l = m.K8SUpdated.Size()
		n += 2 + l + sovNode(uint64(l))
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovNode(uint64(e))
		}
		n += 2 + sovNode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node_Components) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovNode(uint64(m.Components))
	return n
}
func (m *Node_Cves) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovNode(uint64(m.Cves))
	return n
}
func (m *Node_FixableCves) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovNode(uint64(m.FixableCves))
	return n
}
func (m *Node_TopCvss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 6
	return n
}
func (m *NodeScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanTime != nil {
		l = m.ScanTime.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = len(m.OperatingSystem)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovNode(uint64(e))
		}
		n += 1 + sovNode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInventory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ScanTime != nil {
		l = m.ScanTime.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Components != nil {
		l = m.Components.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovNode(uint64(e))
		}
		n += 1 + sovNode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInventory_Components) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.RhelComponents) > 0 {
		for _, e := range m.RhelComponents {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if len(m.RhelContentSets) > 0 {
		for _, s := range m.RhelContentSets {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInventory_Components_RHELComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNode(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Executables) > 0 {
		for _, e := range m.Executables {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInventory_Components_RHELComponent_Executable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.RequiredFeatures) > 0 {
		for _, e := range m.RequiredFeatures {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmbeddedNodeScanComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Vulns) > 0 {
		for _, e := range m.Vulns {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.Priority != 0 {
		n += 1 + sovNode(uint64(m.Priority))
	}
	if m.SetTopCvss != nil {
		n += m.SetTopCvss.Size()
	}
	if m.RiskScore != 0 {
		n += 5
	}
	if len(m.Vulnerabilities) > 0 {
		for _, e := range m.Vulnerabilities {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmbeddedNodeScanComponent_TopCvss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taints = append(m.Taints, &Taint{})
			if err := m.Taints[len(m.Taints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIpAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIpAddresses = append(m.InternalIpAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIpAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIpAddresses = append(m.ExternalIpAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntimeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerRuntimeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinedAt == nil {
				m.JoinedAt = &types.Timestamp{}
			}
			if err := m.JoinedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerRuntime == nil {
				m.ContainerRuntime = &ContainerRuntimeInfo{}
			}
			if err := m.ContainerRuntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeletVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeProxyVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeProxyVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scan == nil {
				m.Scan = &NodeScan{}
			}
			if err := m.Scan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetComponents = &Node_Components{v}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetCves = &Node_Cves{v}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixableCves", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetFixable = &Node_FixableCves{v}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RiskScore = float32(math.Float32frombits(v))
		case 24:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopCvss", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SetTopCvss = &Node_TopCvss{float32(math.Float32frombits(v))}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SUpdated == nil {
				m.K8SUpdated = &types.Timestamp{}
			}
			if err := m.K8SUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType == 0 {
				var v Node_Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Node_Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNode
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNode
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]Node_Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Node_Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Node_Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanTime == nil {
				m.ScanTime = &types.Timestamp{}
			}
			if err := m.ScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, &EmbeddedNodeScanComponent{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v NodeScan_Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NodeScan_Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNode
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNode
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]NodeScan_Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NodeScan_Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NodeScan_Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanTime == nil {
				m.ScanTime = &types.Timestamp{}
			}
			if err := m.ScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Components == nil {
				m.Components = &NodeInventory_Components{}
			}
			if err := m.Components.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v NodeInventory_Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NodeInventory_Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNode
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNode
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]NodeInventory_Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NodeInventory_Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NodeInventory_Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventory_Components) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Components: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Components: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhelComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RhelComponents = append(m.RhelComponents, &NodeInventory_Components_RHELComponent{})
			if err := m.RhelComponents[len(m.RhelComponents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhelContentSets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RhelContentSets = append(m.RhelContentSets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventory_Components_RHELComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RHELComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RHELComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executables = append(m.Executables, &NodeInventory_Components_RHELComponent_Executable{})
			if err := m.Executables[len(m.Executables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventory_Components_RHELComponent_Executable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Executable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Executable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredFeatures = append(m.RequiredFeatures, &NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion{})
			if err := m.RequiredFeatures[len(m.RequiredFeatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInventory_Components_RHELComponent_Executable_FeatureNameVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureNameVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureNameVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmbeddedNodeScanComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmbeddedNodeScanComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmbeddedNodeScanComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulns = append(m.Vulns, &EmbeddedVulnerability{})
			if err := m.Vulns[len(m.Vulns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopCvss", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SetTopCvss = &EmbeddedNodeScanComponent_TopCvss{float32(math.Float32frombits(v))}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RiskScore = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerabilities = append(m.Vulnerabilities, &NodeVulnerability{})
			if err := m.Vulnerabilities[len(m.Vulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
