// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/compliance.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComplianceState int32

const (
	ComplianceState_COMPLIANCE_STATE_UNKNOWN ComplianceState = 0
	ComplianceState_COMPLIANCE_STATE_SKIP    ComplianceState = 1
	ComplianceState_COMPLIANCE_STATE_NOTE    ComplianceState = 2
	ComplianceState_COMPLIANCE_STATE_SUCCESS ComplianceState = 3
	ComplianceState_COMPLIANCE_STATE_FAILURE ComplianceState = 4
	ComplianceState_COMPLIANCE_STATE_ERROR   ComplianceState = 5
)

// Enum value maps for ComplianceState.
var (
	ComplianceState_name = map[int32]string{
		0: "COMPLIANCE_STATE_UNKNOWN",
		1: "COMPLIANCE_STATE_SKIP",
		2: "COMPLIANCE_STATE_NOTE",
		3: "COMPLIANCE_STATE_SUCCESS",
		4: "COMPLIANCE_STATE_FAILURE",
		5: "COMPLIANCE_STATE_ERROR",
	}
	ComplianceState_value = map[string]int32{
		"COMPLIANCE_STATE_UNKNOWN": 0,
		"COMPLIANCE_STATE_SKIP":    1,
		"COMPLIANCE_STATE_NOTE":    2,
		"COMPLIANCE_STATE_SUCCESS": 3,
		"COMPLIANCE_STATE_FAILURE": 4,
		"COMPLIANCE_STATE_ERROR":   5,
	}
)

func (x ComplianceState) Enum() *ComplianceState {
	p := new(ComplianceState)
	*p = x
	return p
}

func (x ComplianceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_proto_enumTypes[0].Descriptor()
}

func (ComplianceState) Type() protoreflect.EnumType {
	return &file_storage_compliance_proto_enumTypes[0]
}

func (x ComplianceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceState.Descriptor instead.
func (ComplianceState) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{0}
}

type ComplianceAggregation_Scope int32

const (
	ComplianceAggregation_UNKNOWN    ComplianceAggregation_Scope = 0
	ComplianceAggregation_STANDARD   ComplianceAggregation_Scope = 1
	ComplianceAggregation_CLUSTER    ComplianceAggregation_Scope = 2
	ComplianceAggregation_CATEGORY   ComplianceAggregation_Scope = 3
	ComplianceAggregation_CONTROL    ComplianceAggregation_Scope = 4
	ComplianceAggregation_NAMESPACE  ComplianceAggregation_Scope = 5
	ComplianceAggregation_NODE       ComplianceAggregation_Scope = 6
	ComplianceAggregation_DEPLOYMENT ComplianceAggregation_Scope = 7
	ComplianceAggregation_CHECK      ComplianceAggregation_Scope = 8
)

// Enum value maps for ComplianceAggregation_Scope.
var (
	ComplianceAggregation_Scope_name = map[int32]string{
		0: "UNKNOWN",
		1: "STANDARD",
		2: "CLUSTER",
		3: "CATEGORY",
		4: "CONTROL",
		5: "NAMESPACE",
		6: "NODE",
		7: "DEPLOYMENT",
		8: "CHECK",
	}
	ComplianceAggregation_Scope_value = map[string]int32{
		"UNKNOWN":    0,
		"STANDARD":   1,
		"CLUSTER":    2,
		"CATEGORY":   3,
		"CONTROL":    4,
		"NAMESPACE":  5,
		"NODE":       6,
		"DEPLOYMENT": 7,
		"CHECK":      8,
	}
)

func (x ComplianceAggregation_Scope) Enum() *ComplianceAggregation_Scope {
	p := new(ComplianceAggregation_Scope)
	*p = x
	return p
}

func (x ComplianceAggregation_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceAggregation_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_proto_enumTypes[1].Descriptor()
}

func (ComplianceAggregation_Scope) Type() protoreflect.EnumType {
	return &file_storage_compliance_proto_enumTypes[1]
}

func (x ComplianceAggregation_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceAggregation_Scope.Descriptor instead.
func (ComplianceAggregation_Scope) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7, 0}
}

type ComplianceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*ComplianceResource_Cluster
	//	*ComplianceResource_Deployment
	//	*ComplianceResource_Node
	//	*ComplianceResource_Image
	Resource isComplianceResource_Resource `protobuf_oneof:"resource"`
}

func (x *ComplianceResource) Reset() {
	*x = ComplianceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResource) ProtoMessage() {}

func (x *ComplianceResource) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResource.ProtoReflect.Descriptor instead.
func (*ComplianceResource) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{0}
}

func (m *ComplianceResource) GetResource() isComplianceResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *ComplianceResource) GetCluster() *ComplianceResource_ClusterName {
	if x, ok := x.GetResource().(*ComplianceResource_Cluster); ok {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceResource) GetDeployment() *ComplianceResource_DeploymentName {
	if x, ok := x.GetResource().(*ComplianceResource_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *ComplianceResource) GetNode() *ComplianceResource_NodeName {
	if x, ok := x.GetResource().(*ComplianceResource_Node); ok {
		return x.Node
	}
	return nil
}

func (x *ComplianceResource) GetImage() *ImageName {
	if x, ok := x.GetResource().(*ComplianceResource_Image); ok {
		return x.Image
	}
	return nil
}

type isComplianceResource_Resource interface {
	isComplianceResource_Resource()
}

type ComplianceResource_Cluster struct {
	Cluster *ComplianceResource_ClusterName `protobuf:"bytes,1,opt,name=cluster,proto3,oneof"`
}

type ComplianceResource_Deployment struct {
	Deployment *ComplianceResource_DeploymentName `protobuf:"bytes,2,opt,name=deployment,proto3,oneof"`
}

type ComplianceResource_Node struct {
	Node *ComplianceResource_NodeName `protobuf:"bytes,3,opt,name=node,proto3,oneof"`
}

type ComplianceResource_Image struct {
	Image *ImageName `protobuf:"bytes,4,opt,name=image,proto3,oneof"`
}

func (*ComplianceResource_Cluster) isComplianceResource_Resource() {}

func (*ComplianceResource_Deployment) isComplianceResource_Resource() {}

func (*ComplianceResource_Node) isComplianceResource_Resource() {}

func (*ComplianceResource_Image) isComplianceResource_Resource() {}

type ComplianceResultValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evidence     []*ComplianceResultValue_Evidence `protobuf:"bytes,1,rep,name=evidence,proto3" json:"evidence,omitempty"`
	OverallState ComplianceState                   `protobuf:"varint,2,opt,name=overall_state,json=overallState,proto3,enum=storage.ComplianceState" json:"overall_state,omitempty"`
}

func (x *ComplianceResultValue) Reset() {
	*x = ComplianceResultValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResultValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResultValue) ProtoMessage() {}

func (x *ComplianceResultValue) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResultValue.ProtoReflect.Descriptor instead.
func (*ComplianceResultValue) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceResultValue) GetEvidence() []*ComplianceResultValue_Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *ComplianceResultValue) GetOverallState() ComplianceState {
	if x != nil {
		return x.OverallState
	}
	return ComplianceState_COMPLIANCE_STATE_UNKNOWN
}

type ComplianceControlResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource  *ComplianceResource    `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	ControlId string                 `protobuf:"bytes,2,opt,name=control_id,json=controlId,proto3" json:"control_id,omitempty"`
	Value     *ComplianceResultValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ComplianceControlResult) Reset() {
	*x = ComplianceControlResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceControlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceControlResult) ProtoMessage() {}

func (x *ComplianceControlResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceControlResult.ProtoReflect.Descriptor instead.
func (*ComplianceControlResult) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceControlResult) GetResource() *ComplianceResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ComplianceControlResult) GetControlId() string {
	if x != nil {
		return x.ControlId
	}
	return ""
}

func (x *ComplianceControlResult) GetValue() *ComplianceResultValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Next available tag: 5
type ComplianceDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                                  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty" sql:"pk" search:"Compliance Domain ID,hidden"` // @gotags: sql:"pk" search:"Compliance Domain ID,hidden"
	Cluster     *ComplianceDomain_Cluster               `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Nodes       map[string]*ComplianceDomain_Node       `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deployments map[string]*ComplianceDomain_Deployment `protobuf:"bytes,3,rep,name=deployments,proto3" json:"deployments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComplianceDomain) Reset() {
	*x = ComplianceDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDomain) ProtoMessage() {}

func (x *ComplianceDomain) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDomain.ProtoReflect.Descriptor instead.
func (*ComplianceDomain) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceDomain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceDomain) GetCluster() *ComplianceDomain_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceDomain) GetNodes() map[string]*ComplianceDomain_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ComplianceDomain) GetDeployments() map[string]*ComplianceDomain_Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

// Next available tag: 5
type ComplianceRunMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId           string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty" sql:"pk" search:"Compliance Run ID,hidden"`                // @gotags: sql:"pk" search:"Compliance Run ID,hidden"
	StandardId      string                 `protobuf:"bytes,2,opt,name=standard_id,json=standardId,proto3" json:"standard_id,omitempty" search:"Standard ID,hidden,store"` // @gotags: search:"Standard ID,hidden,store"
	ClusterId       string                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,hidden,store" sql:"type(uuid)"`    // @gotags: search:"Cluster ID,hidden,store" sql:"type(uuid)"
	StartTimestamp  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	FinishTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finish_timestamp,json=finishTimestamp,proto3" json:"finish_timestamp,omitempty" search:"Compliance Run Finished Timestamp,hidden,store"` // @gotags: search:"Compliance Run Finished Timestamp,hidden,store"
	Success         bool                   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage    string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	DomainId        string                 `protobuf:"bytes,8,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *ComplianceRunMetadata) Reset() {
	*x = ComplianceRunMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRunMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRunMetadata) ProtoMessage() {}

func (x *ComplianceRunMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRunMetadata.ProtoReflect.Descriptor instead.
func (*ComplianceRunMetadata) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceRunMetadata) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ComplianceRunMetadata) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

func (x *ComplianceRunMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceRunMetadata) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *ComplianceRunMetadata) GetFinishTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTimestamp
	}
	return nil
}

func (x *ComplianceRunMetadata) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ComplianceRunMetadata) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ComplianceRunMetadata) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

// Next available tag: 6
type ComplianceRunResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain               *ComplianceDomain                              `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" sql:"-"` // @gotags: sql:"-"
	RunMetadata          *ComplianceRunMetadata                         `protobuf:"bytes,2,opt,name=run_metadata,json=runMetadata,proto3" json:"run_metadata,omitempty"`
	ClusterResults       *ComplianceRunResults_EntityResults            `protobuf:"bytes,3,opt,name=cluster_results,json=clusterResults,proto3" json:"cluster_results,omitempty"`
	NodeResults          map[string]*ComplianceRunResults_EntityResults `protobuf:"bytes,4,rep,name=node_results,json=nodeResults,proto3" json:"node_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeploymentResults    map[string]*ComplianceRunResults_EntityResults `protobuf:"bytes,5,rep,name=deployment_results,json=deploymentResults,proto3" json:"deployment_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MachineConfigResults map[string]*ComplianceRunResults_EntityResults `protobuf:"bytes,6,rep,name=machine_config_results,json=machineConfigResults,proto3" json:"machine_config_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComplianceRunResults) Reset() {
	*x = ComplianceRunResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRunResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRunResults) ProtoMessage() {}

func (x *ComplianceRunResults) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRunResults.ProtoReflect.Descriptor instead.
func (*ComplianceRunResults) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{5}
}

func (x *ComplianceRunResults) GetDomain() *ComplianceDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *ComplianceRunResults) GetRunMetadata() *ComplianceRunMetadata {
	if x != nil {
		return x.RunMetadata
	}
	return nil
}

func (x *ComplianceRunResults) GetClusterResults() *ComplianceRunResults_EntityResults {
	if x != nil {
		return x.ClusterResults
	}
	return nil
}

func (x *ComplianceRunResults) GetNodeResults() map[string]*ComplianceRunResults_EntityResults {
	if x != nil {
		return x.NodeResults
	}
	return nil
}

func (x *ComplianceRunResults) GetDeploymentResults() map[string]*ComplianceRunResults_EntityResults {
	if x != nil {
		return x.DeploymentResults
	}
	return nil
}

func (x *ComplianceRunResults) GetMachineConfigResults() map[string]*ComplianceRunResults_EntityResults {
	if x != nil {
		return x.MachineConfigResults
	}
	return nil
}

// Next available tag: 2
type ComplianceStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" sql:"pk"` // @gotags: sql:"pk"
	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *ComplianceStrings) Reset() {
	*x = ComplianceStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceStrings) ProtoMessage() {}

func (x *ComplianceStrings) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceStrings.ProtoReflect.Descriptor instead.
func (*ComplianceStrings) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{6}
}

func (x *ComplianceStrings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceStrings) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type ComplianceAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ComplianceAggregation) Reset() {
	*x = ComplianceAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAggregation) ProtoMessage() {}

func (x *ComplianceAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAggregation.ProtoReflect.Descriptor instead.
func (*ComplianceAggregation) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7}
}

type PreComputedComplianceAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        []*ComplianceAggregation_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Sources        []*ComplianceAggregation_Source `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	DomainPointers []string                        `protobuf:"bytes,3,rep,name=domain_pointers,json=domainPointers,proto3" json:"domain_pointers,omitempty"`
}

func (x *PreComputedComplianceAggregation) Reset() {
	*x = PreComputedComplianceAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreComputedComplianceAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreComputedComplianceAggregation) ProtoMessage() {}

func (x *PreComputedComplianceAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreComputedComplianceAggregation.ProtoReflect.Descriptor instead.
func (*PreComputedComplianceAggregation) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{8}
}

func (x *PreComputedComplianceAggregation) GetResults() []*ComplianceAggregation_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PreComputedComplianceAggregation) GetSources() []*ComplianceAggregation_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *PreComputedComplianceAggregation) GetDomainPointers() []string {
	if x != nil {
		return x.DomainPointers
	}
	return nil
}

type ComplianceResource_ClusterName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ComplianceResource_ClusterName) Reset() {
	*x = ComplianceResource_ClusterName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResource_ClusterName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResource_ClusterName) ProtoMessage() {}

func (x *ComplianceResource_ClusterName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResource_ClusterName.ProtoReflect.Descriptor instead.
func (*ComplianceResource_ClusterName) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ComplianceResource_ClusterName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceResource_ClusterName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComplianceResource_DeploymentName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   *ComplianceResource_ClusterName `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Id        string                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string                          `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ComplianceResource_DeploymentName) Reset() {
	*x = ComplianceResource_DeploymentName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResource_DeploymentName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResource_DeploymentName) ProtoMessage() {}

func (x *ComplianceResource_DeploymentName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResource_DeploymentName.ProtoReflect.Descriptor instead.
func (*ComplianceResource_DeploymentName) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ComplianceResource_DeploymentName) GetCluster() *ComplianceResource_ClusterName {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceResource_DeploymentName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceResource_DeploymentName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceResource_DeploymentName) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ComplianceResource_NodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *ComplianceResource_ClusterName `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Id      string                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ComplianceResource_NodeName) Reset() {
	*x = ComplianceResource_NodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResource_NodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResource_NodeName) ProtoMessage() {}

func (x *ComplianceResource_NodeName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResource_NodeName.ProtoReflect.Descriptor instead.
func (*ComplianceResource_NodeName) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ComplianceResource_NodeName) GetCluster() *ComplianceResource_ClusterName {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceResource_NodeName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceResource_NodeName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComplianceResultValue_Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     ComplianceState `protobuf:"varint,1,opt,name=state,proto3,enum=storage.ComplianceState" json:"state,omitempty"`
	Message   string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MessageId int32           `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *ComplianceResultValue_Evidence) Reset() {
	*x = ComplianceResultValue_Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceResultValue_Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceResultValue_Evidence) ProtoMessage() {}

func (x *ComplianceResultValue_Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceResultValue_Evidence.ProtoReflect.Descriptor instead.
func (*ComplianceResultValue_Evidence) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ComplianceResultValue_Evidence) GetState() ComplianceState {
	if x != nil {
		return x.State
	}
	return ComplianceState_COMPLIANCE_STATE_UNKNOWN
}

func (x *ComplianceResultValue_Evidence) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ComplianceResultValue_Evidence) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// These must mirror the tags _exactly_ in cluster.proto for backwards compatibility
type ComplianceDomain_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ComplianceDomain_Cluster) Reset() {
	*x = ComplianceDomain_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDomain_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDomain_Cluster) ProtoMessage() {}

func (x *ComplianceDomain_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDomain_Cluster.ProtoReflect.Descriptor instead.
func (*ComplianceDomain_Cluster) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ComplianceDomain_Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceDomain_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// These must mirror the tags _exactly_ in node.proto for backwards compatibility
type ComplianceDomain_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId   string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName string `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ComplianceDomain_Node) Reset() {
	*x = ComplianceDomain_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDomain_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDomain_Node) ProtoMessage() {}

func (x *ComplianceDomain_Node) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDomain_Node.ProtoReflect.Descriptor instead.
func (*ComplianceDomain_Node) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ComplianceDomain_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceDomain_Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceDomain_Node) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceDomain_Node) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// This must mirror the tags _exactly_ in deployment.proto for backwards compatibility
type ComplianceDomain_Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Namespace   string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId string `protobuf:"bytes,23,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	ClusterId   string `protobuf:"bytes,9,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName string `protobuf:"bytes,10,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ComplianceDomain_Deployment) Reset() {
	*x = ComplianceDomain_Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceDomain_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceDomain_Deployment) ProtoMessage() {}

func (x *ComplianceDomain_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceDomain_Deployment.ProtoReflect.Descriptor instead.
func (*ComplianceDomain_Deployment) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ComplianceDomain_Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceDomain_Deployment) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ComplianceRunResults_EntityResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlResults map[string]*ComplianceResultValue `protobuf:"bytes,1,rep,name=control_results,json=controlResults,proto3" json:"control_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComplianceRunResults_EntityResults) Reset() {
	*x = ComplianceRunResults_EntityResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRunResults_EntityResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRunResults_EntityResults) ProtoMessage() {}

func (x *ComplianceRunResults_EntityResults) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRunResults_EntityResults.ProtoReflect.Descriptor instead.
func (*ComplianceRunResults_EntityResults) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ComplianceRunResults_EntityResults) GetControlResults() map[string]*ComplianceResultValue {
	if x != nil {
		return x.ControlResults
	}
	return nil
}

// Next available tag: 3
type ComplianceAggregation_AggregationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope ComplianceAggregation_Scope `protobuf:"varint,1,opt,name=scope,proto3,enum=storage.ComplianceAggregation_Scope" json:"scope,omitempty"`
	Id    string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ComplianceAggregation_AggregationKey) Reset() {
	*x = ComplianceAggregation_AggregationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAggregation_AggregationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAggregation_AggregationKey) ProtoMessage() {}

func (x *ComplianceAggregation_AggregationKey) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAggregation_AggregationKey.ProtoReflect.Descriptor instead.
func (*ComplianceAggregation_AggregationKey) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ComplianceAggregation_AggregationKey) GetScope() ComplianceAggregation_Scope {
	if x != nil {
		return x.Scope
	}
	return ComplianceAggregation_UNKNOWN
}

func (x *ComplianceAggregation_AggregationKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Next available tag: 5
type ComplianceAggregation_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationKeys []*ComplianceAggregation_AggregationKey `protobuf:"bytes,1,rep,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
	Unit            ComplianceAggregation_Scope             `protobuf:"varint,2,opt,name=unit,proto3,enum=storage.ComplianceAggregation_Scope" json:"unit,omitempty"`
	NumPassing      int32                                   `protobuf:"varint,3,opt,name=num_passing,json=numPassing,proto3" json:"num_passing,omitempty"`
	NumFailing      int32                                   `protobuf:"varint,4,opt,name=num_failing,json=numFailing,proto3" json:"num_failing,omitempty"`
	NumSkipped      int32                                   `protobuf:"varint,5,opt,name=num_skipped,json=numSkipped,proto3" json:"num_skipped,omitempty"`
}

func (x *ComplianceAggregation_Result) Reset() {
	*x = ComplianceAggregation_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAggregation_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAggregation_Result) ProtoMessage() {}

func (x *ComplianceAggregation_Result) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAggregation_Result.ProtoReflect.Descriptor instead.
func (*ComplianceAggregation_Result) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ComplianceAggregation_Result) GetAggregationKeys() []*ComplianceAggregation_AggregationKey {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

func (x *ComplianceAggregation_Result) GetUnit() ComplianceAggregation_Scope {
	if x != nil {
		return x.Unit
	}
	return ComplianceAggregation_UNKNOWN
}

func (x *ComplianceAggregation_Result) GetNumPassing() int32 {
	if x != nil {
		return x.NumPassing
	}
	return 0
}

func (x *ComplianceAggregation_Result) GetNumFailing() int32 {
	if x != nil {
		return x.NumFailing
	}
	return 0
}

func (x *ComplianceAggregation_Result) GetNumSkipped() int32 {
	if x != nil {
		return x.NumSkipped
	}
	return 0
}

// Next available tag: 5
type ComplianceAggregation_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId     string                   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	StandardId    string                   `protobuf:"bytes,2,opt,name=standard_id,json=standardId,proto3" json:"standard_id,omitempty"`
	SuccessfulRun *ComplianceRunMetadata   `protobuf:"bytes,3,opt,name=successful_run,json=successfulRun,proto3" json:"successful_run,omitempty"`
	FailedRuns    []*ComplianceRunMetadata `protobuf:"bytes,4,rep,name=failed_runs,json=failedRuns,proto3" json:"failed_runs,omitempty"`
}

func (x *ComplianceAggregation_Source) Reset() {
	*x = ComplianceAggregation_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAggregation_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAggregation_Source) ProtoMessage() {}

func (x *ComplianceAggregation_Source) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAggregation_Source.ProtoReflect.Descriptor instead.
func (*ComplianceAggregation_Source) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7, 2}
}

func (x *ComplianceAggregation_Source) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceAggregation_Source) GetStandardId() string {
	if x != nil {
		return x.StandardId
	}
	return ""
}

func (x *ComplianceAggregation_Source) GetSuccessfulRun() *ComplianceRunMetadata {
	if x != nil {
		return x.SuccessfulRun
	}
	return nil
}

func (x *ComplianceAggregation_Source) GetFailedRuns() []*ComplianceRunMetadata {
	if x != nil {
		return x.FailedRuns
	}
	return nil
}

// Next available tag: 3
type ComplianceAggregation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results      []*ComplianceAggregation_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Sources      []*ComplianceAggregation_Source `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	ErrorMessage string                          `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ComplianceAggregation_Response) Reset() {
	*x = ComplianceAggregation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAggregation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAggregation_Response) ProtoMessage() {}

func (x *ComplianceAggregation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAggregation_Response.ProtoReflect.Descriptor instead.
func (*ComplianceAggregation_Response) Descriptor() ([]byte, []int) {
	return file_storage_compliance_proto_rawDescGZIP(), []int{7, 3}
}

func (x *ComplianceAggregation_Response) GetResults() []*ComplianceAggregation_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ComplianceAggregation_Response) GetSources() []*ComplianceAggregation_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ComplianceAggregation_Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_storage_compliance_proto protoreflect.FileDescriptor

var file_storage_compliance_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x31, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x95,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x71, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x73, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x90, 0x06, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2d,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x6c, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x58, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc7, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x64, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xbe,
	0x08, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x75,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x16, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x10, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x19, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfe,
	0x06, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5c, 0x0a, 0x0e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xff, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x58, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x7e, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x08, 0x22,
	0xcd, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2a,
	0xbd, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42,
	0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5a, 0x11, 0x2e, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_compliance_proto_rawDescOnce sync.Once
	file_storage_compliance_proto_rawDescData = file_storage_compliance_proto_rawDesc
)

func file_storage_compliance_proto_rawDescGZIP() []byte {
	file_storage_compliance_proto_rawDescOnce.Do(func() {
		file_storage_compliance_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_compliance_proto_rawDescData)
	})
	return file_storage_compliance_proto_rawDescData
}

var file_storage_compliance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_compliance_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_storage_compliance_proto_goTypes = []any{
	(ComplianceState)(0),                       // 0: storage.ComplianceState
	(ComplianceAggregation_Scope)(0),           // 1: storage.ComplianceAggregation.Scope
	(*ComplianceResource)(nil),                 // 2: storage.ComplianceResource
	(*ComplianceResultValue)(nil),              // 3: storage.ComplianceResultValue
	(*ComplianceControlResult)(nil),            // 4: storage.ComplianceControlResult
	(*ComplianceDomain)(nil),                   // 5: storage.ComplianceDomain
	(*ComplianceRunMetadata)(nil),              // 6: storage.ComplianceRunMetadata
	(*ComplianceRunResults)(nil),               // 7: storage.ComplianceRunResults
	(*ComplianceStrings)(nil),                  // 8: storage.ComplianceStrings
	(*ComplianceAggregation)(nil),              // 9: storage.ComplianceAggregation
	(*PreComputedComplianceAggregation)(nil),   // 10: storage.PreComputedComplianceAggregation
	(*ComplianceResource_ClusterName)(nil),     // 11: storage.ComplianceResource.ClusterName
	(*ComplianceResource_DeploymentName)(nil),  // 12: storage.ComplianceResource.DeploymentName
	(*ComplianceResource_NodeName)(nil),        // 13: storage.ComplianceResource.NodeName
	(*ComplianceResultValue_Evidence)(nil),     // 14: storage.ComplianceResultValue.Evidence
	(*ComplianceDomain_Cluster)(nil),           // 15: storage.ComplianceDomain.Cluster
	(*ComplianceDomain_Node)(nil),              // 16: storage.ComplianceDomain.Node
	nil,                                        // 17: storage.ComplianceDomain.NodesEntry
	(*ComplianceDomain_Deployment)(nil),        // 18: storage.ComplianceDomain.Deployment
	nil,                                        // 19: storage.ComplianceDomain.DeploymentsEntry
	(*ComplianceRunResults_EntityResults)(nil), // 20: storage.ComplianceRunResults.EntityResults
	nil, // 21: storage.ComplianceRunResults.NodeResultsEntry
	nil, // 22: storage.ComplianceRunResults.DeploymentResultsEntry
	nil, // 23: storage.ComplianceRunResults.MachineConfigResultsEntry
	nil, // 24: storage.ComplianceRunResults.EntityResults.ControlResultsEntry
	(*ComplianceAggregation_AggregationKey)(nil), // 25: storage.ComplianceAggregation.AggregationKey
	(*ComplianceAggregation_Result)(nil),         // 26: storage.ComplianceAggregation.Result
	(*ComplianceAggregation_Source)(nil),         // 27: storage.ComplianceAggregation.Source
	(*ComplianceAggregation_Response)(nil),       // 28: storage.ComplianceAggregation.Response
	(*ImageName)(nil),                            // 29: storage.ImageName
	(*timestamppb.Timestamp)(nil),                // 30: google.protobuf.Timestamp
}
var file_storage_compliance_proto_depIdxs = []int32{
	11, // 0: storage.ComplianceResource.cluster:type_name -> storage.ComplianceResource.ClusterName
	12, // 1: storage.ComplianceResource.deployment:type_name -> storage.ComplianceResource.DeploymentName
	13, // 2: storage.ComplianceResource.node:type_name -> storage.ComplianceResource.NodeName
	29, // 3: storage.ComplianceResource.image:type_name -> storage.ImageName
	14, // 4: storage.ComplianceResultValue.evidence:type_name -> storage.ComplianceResultValue.Evidence
	0,  // 5: storage.ComplianceResultValue.overall_state:type_name -> storage.ComplianceState
	2,  // 6: storage.ComplianceControlResult.resource:type_name -> storage.ComplianceResource
	3,  // 7: storage.ComplianceControlResult.value:type_name -> storage.ComplianceResultValue
	15, // 8: storage.ComplianceDomain.cluster:type_name -> storage.ComplianceDomain.Cluster
	17, // 9: storage.ComplianceDomain.nodes:type_name -> storage.ComplianceDomain.NodesEntry
	19, // 10: storage.ComplianceDomain.deployments:type_name -> storage.ComplianceDomain.DeploymentsEntry
	30, // 11: storage.ComplianceRunMetadata.start_timestamp:type_name -> google.protobuf.Timestamp
	30, // 12: storage.ComplianceRunMetadata.finish_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 13: storage.ComplianceRunResults.domain:type_name -> storage.ComplianceDomain
	6,  // 14: storage.ComplianceRunResults.run_metadata:type_name -> storage.ComplianceRunMetadata
	20, // 15: storage.ComplianceRunResults.cluster_results:type_name -> storage.ComplianceRunResults.EntityResults
	21, // 16: storage.ComplianceRunResults.node_results:type_name -> storage.ComplianceRunResults.NodeResultsEntry
	22, // 17: storage.ComplianceRunResults.deployment_results:type_name -> storage.ComplianceRunResults.DeploymentResultsEntry
	23, // 18: storage.ComplianceRunResults.machine_config_results:type_name -> storage.ComplianceRunResults.MachineConfigResultsEntry
	26, // 19: storage.PreComputedComplianceAggregation.results:type_name -> storage.ComplianceAggregation.Result
	27, // 20: storage.PreComputedComplianceAggregation.sources:type_name -> storage.ComplianceAggregation.Source
	11, // 21: storage.ComplianceResource.DeploymentName.cluster:type_name -> storage.ComplianceResource.ClusterName
	11, // 22: storage.ComplianceResource.NodeName.cluster:type_name -> storage.ComplianceResource.ClusterName
	0,  // 23: storage.ComplianceResultValue.Evidence.state:type_name -> storage.ComplianceState
	16, // 24: storage.ComplianceDomain.NodesEntry.value:type_name -> storage.ComplianceDomain.Node
	18, // 25: storage.ComplianceDomain.DeploymentsEntry.value:type_name -> storage.ComplianceDomain.Deployment
	24, // 26: storage.ComplianceRunResults.EntityResults.control_results:type_name -> storage.ComplianceRunResults.EntityResults.ControlResultsEntry
	20, // 27: storage.ComplianceRunResults.NodeResultsEntry.value:type_name -> storage.ComplianceRunResults.EntityResults
	20, // 28: storage.ComplianceRunResults.DeploymentResultsEntry.value:type_name -> storage.ComplianceRunResults.EntityResults
	20, // 29: storage.ComplianceRunResults.MachineConfigResultsEntry.value:type_name -> storage.ComplianceRunResults.EntityResults
	3,  // 30: storage.ComplianceRunResults.EntityResults.ControlResultsEntry.value:type_name -> storage.ComplianceResultValue
	1,  // 31: storage.ComplianceAggregation.AggregationKey.scope:type_name -> storage.ComplianceAggregation.Scope
	25, // 32: storage.ComplianceAggregation.Result.aggregation_keys:type_name -> storage.ComplianceAggregation.AggregationKey
	1,  // 33: storage.ComplianceAggregation.Result.unit:type_name -> storage.ComplianceAggregation.Scope
	6,  // 34: storage.ComplianceAggregation.Source.successful_run:type_name -> storage.ComplianceRunMetadata
	6,  // 35: storage.ComplianceAggregation.Source.failed_runs:type_name -> storage.ComplianceRunMetadata
	26, // 36: storage.ComplianceAggregation.Response.results:type_name -> storage.ComplianceAggregation.Result
	27, // 37: storage.ComplianceAggregation.Response.sources:type_name -> storage.ComplianceAggregation.Source
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_storage_compliance_proto_init() }
func file_storage_compliance_proto_init() {
	if File_storage_compliance_proto != nil {
		return
	}
	file_storage_image_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_compliance_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResultValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceControlResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRunMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRunResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PreComputedComplianceAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResource_ClusterName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResource_DeploymentName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResource_NodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceResultValue_Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceDomain_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceDomain_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceDomain_Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRunResults_EntityResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceAggregation_AggregationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceAggregation_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceAggregation_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceAggregation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_compliance_proto_msgTypes[0].OneofWrappers = []any{
		(*ComplianceResource_Cluster)(nil),
		(*ComplianceResource_Deployment)(nil),
		(*ComplianceResource_Node)(nil),
		(*ComplianceResource_Image)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_compliance_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_compliance_proto_goTypes,
		DependencyIndexes: file_storage_compliance_proto_depIdxs,
		EnumInfos:         file_storage_compliance_proto_enumTypes,
		MessageInfos:      file_storage_compliance_proto_msgTypes,
	}.Build()
	File_storage_compliance_proto = out.File
	file_storage_compliance_proto_rawDesc = nil
	file_storage_compliance_proto_goTypes = nil
	file_storage_compliance_proto_depIdxs = nil
}
