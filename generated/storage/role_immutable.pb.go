// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
)

// ImmutableRole is an immutable interface for Role
type ImmutableRole interface {
	// `name` and `description` are provided by the user and can be changed.
	GetName() string
	GetDescription() string
	// The associated PermissionSet and AccessScope for this Role.
	GetPermissionSetId() string
	GetAccessScopeId() string
	// Minimum (not default!) access level for every resource. Can be extended
	// below by explicit permissions but not shrunk.
	// Deprecated 2021-04-20 in favor of `permission_set_id`.
	// This field now should be always NO_ACCESS
	GetGlobalAccess() Access
	// Deprecated 2021-04-20 in favor of `permission_set_id`.
	GetImmutableResourceToAccess() iter.Seq2[string, Access]
	GetImmutableTraits() ImmutableTraits
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Role
}

// GetImmutableResourceToAccess implements ImmutableRole
func (m *Role) GetImmutableResourceToAccess() iter.Seq2[string, Access] {
	return func(yield func(string, Access) bool) {
		if m == nil || m.ResourceToAccess == nil {
			return
		}
		for k, v := range m.ResourceToAccess {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableTraits implements ImmutableRole
func (m *Role) GetImmutableTraits() ImmutableTraits {
	return m.GetTraits()
}

// Verify that Role implements ImmutableRole
var _ ImmutableRole = (*Role)(nil)

// ImmutablePermissionSet is an immutable interface for PermissionSet
type ImmutablePermissionSet interface {
	// id is generated and cannot be changed.
	GetId() string
	// `name` and `description` are provided by the user and can be changed.
	GetName() string
	GetDescription() string
	GetImmutableResourceToAccess() iter.Seq2[string, Access]
	GetImmutableTraits() ImmutableTraits
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *PermissionSet
}

// GetImmutableResourceToAccess implements ImmutablePermissionSet
func (m *PermissionSet) GetImmutableResourceToAccess() iter.Seq2[string, Access] {
	return func(yield func(string, Access) bool) {
		if m == nil || m.ResourceToAccess == nil {
			return
		}
		for k, v := range m.ResourceToAccess {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableTraits implements ImmutablePermissionSet
func (m *PermissionSet) GetImmutableTraits() ImmutableTraits {
	return m.GetTraits()
}

// Verify that PermissionSet implements ImmutablePermissionSet
var _ ImmutablePermissionSet = (*PermissionSet)(nil)

// ImmutableSimpleAccessScope is an immutable interface for SimpleAccessScope
type ImmutableSimpleAccessScope interface {
	// `id` is generated and cannot be changed.
	GetId() string
	// `name` and `description` are provided by the user and can be changed.
	GetName() string
	GetDescription() string
	GetImmutableRules() ImmutableSimpleAccessScope_Rules
	GetImmutableTraits() ImmutableTraits
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SimpleAccessScope
}

// GetImmutableRules implements ImmutableSimpleAccessScope
func (m *SimpleAccessScope) GetImmutableRules() ImmutableSimpleAccessScope_Rules {
	return m.GetRules()
}

// GetImmutableTraits implements ImmutableSimpleAccessScope
func (m *SimpleAccessScope) GetImmutableTraits() ImmutableTraits {
	return m.GetTraits()
}

// Verify that SimpleAccessScope implements ImmutableSimpleAccessScope
var _ ImmutableSimpleAccessScope = (*SimpleAccessScope)(nil)

// ImmutableSimpleAccessScope_Rules is an immutable interface for SimpleAccessScope_Rules
type ImmutableSimpleAccessScope_Rules interface {
	GetImmutableIncludedClusters() iter.Seq[string]
	GetImmutableIncludedNamespaces() iter.Seq[ImmutableSimpleAccessScope_Rules_Namespace]
	GetImmutableClusterLabelSelectors() iter.Seq[ImmutableSetBasedLabelSelector]
	GetImmutableNamespaceLabelSelectors() iter.Seq[ImmutableSetBasedLabelSelector]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SimpleAccessScope_Rules
}

// GetImmutableIncludedClusters implements ImmutableSimpleAccessScope_Rules
func (m *SimpleAccessScope_Rules) GetImmutableIncludedClusters() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.IncludedClusters == nil {
			return
		}
		for _, v := range m.IncludedClusters {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableIncludedNamespaces implements ImmutableSimpleAccessScope_Rules
func (m *SimpleAccessScope_Rules) GetImmutableIncludedNamespaces() iter.Seq[ImmutableSimpleAccessScope_Rules_Namespace] {
	return func(yield func(ImmutableSimpleAccessScope_Rules_Namespace) bool) {
		if m == nil || m.IncludedNamespaces == nil {
			return
		}
		for _, v := range m.IncludedNamespaces {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableClusterLabelSelectors implements ImmutableSimpleAccessScope_Rules
func (m *SimpleAccessScope_Rules) GetImmutableClusterLabelSelectors() iter.Seq[ImmutableSetBasedLabelSelector] {
	return func(yield func(ImmutableSetBasedLabelSelector) bool) {
		if m == nil || m.ClusterLabelSelectors == nil {
			return
		}
		for _, v := range m.ClusterLabelSelectors {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableNamespaceLabelSelectors implements ImmutableSimpleAccessScope_Rules
func (m *SimpleAccessScope_Rules) GetImmutableNamespaceLabelSelectors() iter.Seq[ImmutableSetBasedLabelSelector] {
	return func(yield func(ImmutableSetBasedLabelSelector) bool) {
		if m == nil || m.NamespaceLabelSelectors == nil {
			return
		}
		for _, v := range m.NamespaceLabelSelectors {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that SimpleAccessScope_Rules implements ImmutableSimpleAccessScope_Rules
var _ ImmutableSimpleAccessScope_Rules = (*SimpleAccessScope_Rules)(nil)

// ImmutableSimpleAccessScope_Rules_Namespace is an immutable interface for SimpleAccessScope_Rules_Namespace
type ImmutableSimpleAccessScope_Rules_Namespace interface {
	// Both fields must be set.
	GetClusterName() string
	GetNamespaceName() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SimpleAccessScope_Rules_Namespace
}

// Verify that SimpleAccessScope_Rules_Namespace implements ImmutableSimpleAccessScope_Rules_Namespace
var _ ImmutableSimpleAccessScope_Rules_Namespace = (*SimpleAccessScope_Rules_Namespace)(nil)

// ImmutableEffectiveAccessScope is an immutable interface for EffectiveAccessScope
type ImmutableEffectiveAccessScope interface {
	GetImmutableClusters() iter.Seq[ImmutableEffectiveAccessScope_Cluster]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *EffectiveAccessScope
}

// GetImmutableClusters implements ImmutableEffectiveAccessScope
func (m *EffectiveAccessScope) GetImmutableClusters() iter.Seq[ImmutableEffectiveAccessScope_Cluster] {
	return func(yield func(ImmutableEffectiveAccessScope_Cluster) bool) {
		if m == nil || m.Clusters == nil {
			return
		}
		for _, v := range m.Clusters {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that EffectiveAccessScope implements ImmutableEffectiveAccessScope
var _ ImmutableEffectiveAccessScope = (*EffectiveAccessScope)(nil)

// ImmutableEffectiveAccessScope_Namespace is an immutable interface for EffectiveAccessScope_Namespace
type ImmutableEffectiveAccessScope_Namespace interface {
	GetId() string
	GetName() string
	GetState() EffectiveAccessScope_State
	GetImmutableLabels() iter.Seq2[string, string]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *EffectiveAccessScope_Namespace
}

// GetImmutableLabels implements ImmutableEffectiveAccessScope_Namespace
func (m *EffectiveAccessScope_Namespace) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// Verify that EffectiveAccessScope_Namespace implements ImmutableEffectiveAccessScope_Namespace
var _ ImmutableEffectiveAccessScope_Namespace = (*EffectiveAccessScope_Namespace)(nil)

// ImmutableEffectiveAccessScope_Cluster is an immutable interface for EffectiveAccessScope_Cluster
type ImmutableEffectiveAccessScope_Cluster interface {
	GetId() string
	GetName() string
	GetState() EffectiveAccessScope_State
	GetImmutableLabels() iter.Seq2[string, string]
	GetImmutableNamespaces() iter.Seq[ImmutableEffectiveAccessScope_Namespace]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *EffectiveAccessScope_Cluster
}

// GetImmutableLabels implements ImmutableEffectiveAccessScope_Cluster
func (m *EffectiveAccessScope_Cluster) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableNamespaces implements ImmutableEffectiveAccessScope_Cluster
func (m *EffectiveAccessScope_Cluster) GetImmutableNamespaces() iter.Seq[ImmutableEffectiveAccessScope_Namespace] {
	return func(yield func(ImmutableEffectiveAccessScope_Namespace) bool) {
		if m == nil || m.Namespaces == nil {
			return
		}
		for _, v := range m.Namespaces {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that EffectiveAccessScope_Cluster implements ImmutableEffectiveAccessScope_Cluster
var _ ImmutableEffectiveAccessScope_Cluster = (*EffectiveAccessScope_Cluster)(nil)
