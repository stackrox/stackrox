// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableSecret is an immutable interface for Secret
type ImmutableSecret interface {
	GetId() string
	GetName() string
	GetClusterId() string
	GetClusterName() string
	GetNamespace() string
	GetType() string
	GetImmutableLabels() iter.Seq2[string, string]
	GetImmutableAnnotations() iter.Seq2[string, string]
	GetImmutableCreatedAt() time.Time
	// Metadata about the secrets.
	// The secret need not be a file, but rather may be an arbitrary value.
	GetImmutableFiles() iter.Seq[ImmutableSecretDataFile]
	GetImmutableRelationship() ImmutableSecretRelationship
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Secret
}

// GetImmutableLabels implements ImmutableSecret
func (m *Secret) GetImmutableLabels() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Labels == nil {
			return
		}
		for k, v := range m.Labels {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableAnnotations implements ImmutableSecret
func (m *Secret) GetImmutableAnnotations() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.Annotations == nil {
			return
		}
		for k, v := range m.Annotations {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableCreatedAt implements ImmutableSecret
func (m *Secret) GetImmutableCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return m.CreatedAt.AsTime()
}

// GetImmutableFiles implements ImmutableSecret
func (m *Secret) GetImmutableFiles() iter.Seq[ImmutableSecretDataFile] {
	return func(yield func(ImmutableSecretDataFile) bool) {
		if m == nil || m.Files == nil {
			return
		}
		for _, v := range m.Files {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableRelationship implements ImmutableSecret
func (m *Secret) GetImmutableRelationship() ImmutableSecretRelationship {
	return m.GetRelationship()
}

// Verify that Secret implements ImmutableSecret
var _ ImmutableSecret = (*Secret)(nil)

// ImmutableListSecret is an immutable interface for ListSecret
type ImmutableListSecret interface {
	GetId() string
	GetName() string
	GetClusterId() string
	GetClusterName() string
	GetNamespace() string
	GetImmutableTypes() iter.Seq[SecretType]
	GetImmutableCreatedAt() time.Time
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ListSecret
}

// GetImmutableTypes implements ImmutableListSecret
func (m *ListSecret) GetImmutableTypes() iter.Seq[SecretType] {
	return func(yield func(SecretType) bool) {
		if m == nil || m.Types == nil {
			return
		}
		for _, v := range m.Types {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableCreatedAt implements ImmutableListSecret
func (m *ListSecret) GetImmutableCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return m.CreatedAt.AsTime()
}

// Verify that ListSecret implements ImmutableListSecret
var _ ImmutableListSecret = (*ListSecret)(nil)

// ImmutableSecretRelationship is an immutable interface for SecretRelationship
type ImmutableSecretRelationship interface {
	// Secret id
	GetId() string
	// Container id to relationship.s
	GetImmutableContainerRelationships() iter.Seq[ImmutableSecretContainerRelationship]
	// Deployment id to relationship.
	GetImmutableDeploymentRelationships() iter.Seq[ImmutableSecretDeploymentRelationship]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SecretRelationship
}

// GetImmutableContainerRelationships implements ImmutableSecretRelationship
func (m *SecretRelationship) GetImmutableContainerRelationships() iter.Seq[ImmutableSecretContainerRelationship] {
	return func(yield func(ImmutableSecretContainerRelationship) bool) {
		if m == nil || m.ContainerRelationships == nil {
			return
		}
		for _, v := range m.ContainerRelationships {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableDeploymentRelationships implements ImmutableSecretRelationship
func (m *SecretRelationship) GetImmutableDeploymentRelationships() iter.Seq[ImmutableSecretDeploymentRelationship] {
	return func(yield func(ImmutableSecretDeploymentRelationship) bool) {
		if m == nil || m.DeploymentRelationships == nil {
			return
		}
		for _, v := range m.DeploymentRelationships {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that SecretRelationship implements ImmutableSecretRelationship
var _ ImmutableSecretRelationship = (*SecretRelationship)(nil)

// ImmutableSecretDeploymentRelationship is an immutable interface for SecretDeploymentRelationship
type ImmutableSecretDeploymentRelationship interface {
	// Id of the deployment using the secret within a container.
	GetId() string
	// Name of the deployment.
	GetName() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SecretDeploymentRelationship
}

// Verify that SecretDeploymentRelationship implements ImmutableSecretDeploymentRelationship
var _ ImmutableSecretDeploymentRelationship = (*SecretDeploymentRelationship)(nil)

// ImmutableSecretContainerRelationship is an immutable interface for SecretContainerRelationship
type ImmutableSecretContainerRelationship interface {
	// Id of the container the secret is mounted in.
	GetId() string
	// Path is a container specific mounting directory.
	GetPath() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SecretContainerRelationship
}

// Verify that SecretContainerRelationship implements ImmutableSecretContainerRelationship
var _ ImmutableSecretContainerRelationship = (*SecretContainerRelationship)(nil)

// ImmutableImagePullSecret is an immutable interface for ImagePullSecret
type ImmutableImagePullSecret interface {
	GetImmutableRegistries() iter.Seq[ImmutableImagePullSecret_Registry]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ImagePullSecret
}

// GetImmutableRegistries implements ImmutableImagePullSecret
func (m *ImagePullSecret) GetImmutableRegistries() iter.Seq[ImmutableImagePullSecret_Registry] {
	return func(yield func(ImmutableImagePullSecret_Registry) bool) {
		if m == nil || m.Registries == nil {
			return
		}
		for _, v := range m.Registries {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that ImagePullSecret implements ImmutableImagePullSecret
var _ ImmutableImagePullSecret = (*ImagePullSecret)(nil)

// ImmutableImagePullSecret_Registry is an immutable interface for ImagePullSecret_Registry
type ImmutableImagePullSecret_Registry interface {
	GetName() string
	GetUsername() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ImagePullSecret_Registry
}

// Verify that ImagePullSecret_Registry implements ImmutableImagePullSecret_Registry
var _ ImmutableImagePullSecret_Registry = (*ImagePullSecret_Registry)(nil)

// ImmutableSecretDataFile is an immutable interface for SecretDataFile
type ImmutableSecretDataFile interface {
	GetName() string
	GetType() SecretType
	GetImmutableCert() ImmutableCert
	GetImmutableImagePullSecret() ImmutableImagePullSecret
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SecretDataFile
}

// GetImmutableCert implements ImmutableSecretDataFile
func (m *SecretDataFile) GetImmutableCert() ImmutableCert {
	return m.GetCert()
}

// GetImmutableImagePullSecret implements ImmutableSecretDataFile
func (m *SecretDataFile) GetImmutableImagePullSecret() ImmutableImagePullSecret {
	return m.GetImagePullSecret()
}

// Verify that SecretDataFile implements ImmutableSecretDataFile
var _ ImmutableSecretDataFile = (*SecretDataFile)(nil)

// ImmutableCert is an immutable interface for Cert
type ImmutableCert interface {
	GetImmutableSubject() ImmutableCertName
	GetImmutableIssuer() ImmutableCertName
	GetImmutableSans() iter.Seq[string]
	GetImmutableStartDate() time.Time
	GetImmutableEndDate() time.Time
	GetAlgorithm() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Cert
}

// GetImmutableSubject implements ImmutableCert
func (m *Cert) GetImmutableSubject() ImmutableCertName {
	return m.GetSubject()
}

// GetImmutableIssuer implements ImmutableCert
func (m *Cert) GetImmutableIssuer() ImmutableCertName {
	return m.GetIssuer()
}

// GetImmutableSans implements ImmutableCert
func (m *Cert) GetImmutableSans() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.Sans == nil {
			return
		}
		for _, v := range m.Sans {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableStartDate implements ImmutableCert
func (m *Cert) GetImmutableStartDate() time.Time {
	if m == nil || m.StartDate == nil {
		return time.Time{}
	}
	return m.StartDate.AsTime()
}

// GetImmutableEndDate implements ImmutableCert
func (m *Cert) GetImmutableEndDate() time.Time {
	if m == nil || m.EndDate == nil {
		return time.Time{}
	}
	return m.EndDate.AsTime()
}

// Verify that Cert implements ImmutableCert
var _ ImmutableCert = (*Cert)(nil)

// ImmutableCertName is an immutable interface for CertName
type ImmutableCertName interface {
	GetCommonName() string
	GetCountry() string
	GetOrganization() string
	GetOrganizationUnit() string
	GetLocality() string
	GetProvince() string
	GetStreetAddress() string
	GetPostalCode() string
	GetImmutableNames() iter.Seq[string]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CertName
}

// GetImmutableNames implements ImmutableCertName
func (m *CertName) GetImmutableNames() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.Names == nil {
			return
		}
		for _, v := range m.Names {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that CertName implements ImmutableCertName
var _ ImmutableCertName = (*CertName)(nil)
