// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
)

// ImmutableSignatureIntegration is an immutable interface for SignatureIntegration
type ImmutableSignatureIntegration interface {
	GetId() string
	GetName() string
	GetImmutableCosign() ImmutableCosignPublicKeyVerification
	GetImmutableCosignCertificates() iter.Seq[ImmutableCosignCertificateVerification]
	GetImmutableTransparencyLog() ImmutableTransparencyLogVerification
	GetImmutableTraits() ImmutableTraits
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SignatureIntegration
}

// GetImmutableCosign implements ImmutableSignatureIntegration
func (m *SignatureIntegration) GetImmutableCosign() ImmutableCosignPublicKeyVerification {
	return m.GetCosign()
}

// GetImmutableCosignCertificates implements ImmutableSignatureIntegration
func (m *SignatureIntegration) GetImmutableCosignCertificates() iter.Seq[ImmutableCosignCertificateVerification] {
	return func(yield func(ImmutableCosignCertificateVerification) bool) {
		if m == nil || m.CosignCertificates == nil {
			return
		}
		for _, v := range m.CosignCertificates {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableTransparencyLog implements ImmutableSignatureIntegration
func (m *SignatureIntegration) GetImmutableTransparencyLog() ImmutableTransparencyLogVerification {
	return m.GetTransparencyLog()
}

// GetImmutableTraits implements ImmutableSignatureIntegration
func (m *SignatureIntegration) GetImmutableTraits() ImmutableTraits {
	return m.GetTraits()
}

// Verify that SignatureIntegration implements ImmutableSignatureIntegration
var _ ImmutableSignatureIntegration = (*SignatureIntegration)(nil)

// ImmutableCosignPublicKeyVerification is an immutable interface for CosignPublicKeyVerification
type ImmutableCosignPublicKeyVerification interface {
	GetImmutablePublicKeys() iter.Seq[ImmutableCosignPublicKeyVerification_PublicKey]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CosignPublicKeyVerification
}

// GetImmutablePublicKeys implements ImmutableCosignPublicKeyVerification
func (m *CosignPublicKeyVerification) GetImmutablePublicKeys() iter.Seq[ImmutableCosignPublicKeyVerification_PublicKey] {
	return func(yield func(ImmutableCosignPublicKeyVerification_PublicKey) bool) {
		if m == nil || m.PublicKeys == nil {
			return
		}
		for _, v := range m.PublicKeys {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that CosignPublicKeyVerification implements ImmutableCosignPublicKeyVerification
var _ ImmutableCosignPublicKeyVerification = (*CosignPublicKeyVerification)(nil)

// ImmutableCosignPublicKeyVerification_PublicKey is an immutable interface for CosignPublicKeyVerification_PublicKey
type ImmutableCosignPublicKeyVerification_PublicKey interface {
	GetName() string
	GetPublicKeyPemEnc() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CosignPublicKeyVerification_PublicKey
}

// Verify that CosignPublicKeyVerification_PublicKey implements ImmutableCosignPublicKeyVerification_PublicKey
var _ ImmutableCosignPublicKeyVerification_PublicKey = (*CosignPublicKeyVerification_PublicKey)(nil)

// ImmutableCosignCertificateVerification is an immutable interface for CosignCertificateVerification
type ImmutableCosignCertificateVerification interface {
	// PEM encoded certificate to use for verification. Leave empty when
	// using short-lived certificates as issued by Fulcio.
	GetCertificatePemEnc() string
	// PEM encoded certificate chain to use for verification. Defaults to the
	// root certificate authority of the public Sigstore instance if left empty.
	GetCertificateChainPemEnc() string
	// Certificate OIDC issuer to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an OIDC issuer, you may use '.*' as the OIDC issuer. However,
	// it is recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	GetCertificateOidcIssuer() string
	// Certificate identity to verify against.
	// This supports regular expressions following the RE2 syntax: https://github.com/google/re2/wiki/Syntax.
	// In case the certificate does not specify an identity, you may use '.*' as the identity. However, it is
	// recommended to use Fulcio compatible certificates according to the specification:
	// https://github.com/sigstore/fulcio/blob/main/docs/certificate-specification.md.
	GetCertificateIdentity() string
	// Validate that the signature certificate contains a signed
	// certificate timestamp as proof of inclusion into the certificate
	// transparency log.
	GetImmutableCertificateTransparencyLog() ImmutableCertificateTransparencyLogVerification
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CosignCertificateVerification
}

// GetImmutableCertificateTransparencyLog implements ImmutableCosignCertificateVerification
func (m *CosignCertificateVerification) GetImmutableCertificateTransparencyLog() ImmutableCertificateTransparencyLogVerification {
	return m.GetCertificateTransparencyLog()
}

// Verify that CosignCertificateVerification implements ImmutableCosignCertificateVerification
var _ ImmutableCosignCertificateVerification = (*CosignCertificateVerification)(nil)

// ImmutableCertificateTransparencyLogVerification is an immutable interface for CertificateTransparencyLogVerification
type ImmutableCertificateTransparencyLogVerification interface {
	// Validate the inclusion of certificates into a certificate transparency log.
	// Disables validation if not enabled.
	GetEnabled() bool
	// PEM encoded public key used to validate the proof of inclusion into the
	// certificate transparency log. Defaults to the key of the public Sigstore
	// instance if left empty.
	GetPublicKeyPemEnc() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CertificateTransparencyLogVerification
}

// Verify that CertificateTransparencyLogVerification implements ImmutableCertificateTransparencyLogVerification
var _ ImmutableCertificateTransparencyLogVerification = (*CertificateTransparencyLogVerification)(nil)

// ImmutableTransparencyLogVerification is an immutable interface for TransparencyLogVerification
type ImmutableTransparencyLogVerification interface {
	// Validate the inclusion of signatures into a transparency log.
	// Disables validation if not enabled.
	GetEnabled() bool
	// The URL of the transparency log. Required for online confirmation of
	// inclusion into the transparency log. Defaults to the Sigstore instance
	// `rekor.sigstore.dev`.
	GetUrl() string
	// Force offline validation of the signature proof of inclusion into the
	// transparency log. Do not fall back to request confirmation from the
	// transparency log over network.
	GetValidateOffline() bool
	// PEM encoded public key used to validate the proof of inclusion into the
	// transparency log. Defaults to the key of the public Sigstore instance if
	// left empty.
	GetPublicKeyPemEnc() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TransparencyLogVerification
}

// Verify that TransparencyLogVerification implements ImmutableTransparencyLogVerification
var _ ImmutableTransparencyLogVerification = (*TransparencyLogVerification)(nil)
