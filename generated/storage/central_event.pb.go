// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/central_event.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CentralEventType is the storage representation of the Central event type.
//
// Refer to v1.CentralEventType for a more detailed doc.
type CentralEventType int32

const (
	CentralEventType_CENTRAL_EVENT_TYPE_UNKNOWN     CentralEventType = 0
	CentralEventType_CENTRAL_EVENT_TYPE_GENERIC     CentralEventType = 1
	CentralEventType_CENTRAL_EVENT_TYPE_LOG_MESSAGE CentralEventType = 2
)

var CentralEventType_name = map[int32]string{
	0: "CENTRAL_EVENT_TYPE_UNKNOWN",
	1: "CENTRAL_EVENT_TYPE_GENERIC",
	2: "CENTRAL_EVENT_TYPE_LOG_MESSAGE",
}

var CentralEventType_value = map[string]int32{
	"CENTRAL_EVENT_TYPE_UNKNOWN":     0,
	"CENTRAL_EVENT_TYPE_GENERIC":     1,
	"CENTRAL_EVENT_TYPE_LOG_MESSAGE": 2,
}

func (x CentralEventType) String() string {
	return proto.EnumName(CentralEventType_name, int32(x))
}

func (CentralEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e6b9ef75bf23593, []int{0}
}

// CentralEventLevel is the storage representation of the Central event level.
//
// Refer to v1.CentralEventLevel for a more detailed doc.
type CentralEventLevel int32

const (
	CentralEventLevel_CENTRAL_EVENT_LEVEL_UNKNOWN CentralEventLevel = 0
	CentralEventLevel_CENTRAL_EVENT_LEVEL_INFO    CentralEventLevel = 1
	CentralEventLevel_CENTRAL_EVENT_LEVEL_SUCCESS CentralEventLevel = 2
	CentralEventLevel_CENTRAL_EVENT_LEVEL_WARN    CentralEventLevel = 3
	CentralEventLevel_CENTRAL_EVENT_LEVEL_DANGER  CentralEventLevel = 4
)

var CentralEventLevel_name = map[int32]string{
	0: "CENTRAL_EVENT_LEVEL_UNKNOWN",
	1: "CENTRAL_EVENT_LEVEL_INFO",
	2: "CENTRAL_EVENT_LEVEL_SUCCESS",
	3: "CENTRAL_EVENT_LEVEL_WARN",
	4: "CENTRAL_EVENT_LEVEL_DANGER",
}

var CentralEventLevel_value = map[string]int32{
	"CENTRAL_EVENT_LEVEL_UNKNOWN": 0,
	"CENTRAL_EVENT_LEVEL_INFO":    1,
	"CENTRAL_EVENT_LEVEL_SUCCESS": 2,
	"CENTRAL_EVENT_LEVEL_WARN":    3,
	"CENTRAL_EVENT_LEVEL_DANGER":  4,
}

func (x CentralEventLevel) String() string {
	return proto.EnumName(CentralEventLevel_name, int32(x))
}

func (CentralEventLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9e6b9ef75bf23593, []int{1}
}

// CentralEvent is the storage representation of events in Central.
//
// Refer to v1.CentralEvent for a more detailed doc.
type CentralEvent struct {
	// The id is a UUIDv5 generated deterministically from the tuple (type, level, domain,
	// resource_type, resource_id, message). It is used for deduplication of events.
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"`
	Type                 CentralEventType  `protobuf:"varint,2,opt,name=type,proto3,enum=storage.CentralEventType" json:"type,omitempty" search:"Event Type,hidden"`
	Level                CentralEventLevel `protobuf:"varint,3,opt,name=level,proto3,enum=storage.CentralEventLevel" json:"level,omitempty" search:"Event Level,hidden"`
	Message              string            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Hint                 string            `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	Domain               string            `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty" search:"Event Domain,hidden"`
	ResourceType         string            `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty" search:"Resource,hidden"`
	ResourceId           string            `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	NumOccurrences       int64             `protobuf:"varint,9,opt,name=num_occurrences,json=numOccurrences,proto3" json:"num_occurrences,omitempty"`
	LastOccurredAt       *types.Timestamp  `protobuf:"bytes,10,opt,name=last_occurred_at,json=lastOccurredAt,proto3" json:"last_occurred_at,omitempty" search:"Last Updated,hidden"`
	CreatedAt            *types.Timestamp  `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" search:"Created Time,hidden"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CentralEvent) Reset()         { *m = CentralEvent{} }
func (m *CentralEvent) String() string { return proto.CompactTextString(m) }
func (*CentralEvent) ProtoMessage()    {}
func (*CentralEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e6b9ef75bf23593, []int{0}
}
func (m *CentralEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CentralEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CentralEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CentralEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentralEvent.Merge(m, src)
}
func (m *CentralEvent) XXX_Size() int {
	return m.Size()
}
func (m *CentralEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CentralEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CentralEvent proto.InternalMessageInfo

func (m *CentralEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CentralEvent) GetType() CentralEventType {
	if m != nil {
		return m.Type
	}
	return CentralEventType_CENTRAL_EVENT_TYPE_UNKNOWN
}

func (m *CentralEvent) GetLevel() CentralEventLevel {
	if m != nil {
		return m.Level
	}
	return CentralEventLevel_CENTRAL_EVENT_LEVEL_UNKNOWN
}

func (m *CentralEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CentralEvent) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *CentralEvent) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CentralEvent) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *CentralEvent) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *CentralEvent) GetNumOccurrences() int64 {
	if m != nil {
		return m.NumOccurrences
	}
	return 0
}

func (m *CentralEvent) GetLastOccurredAt() *types.Timestamp {
	if m != nil {
		return m.LastOccurredAt
	}
	return nil
}

func (m *CentralEvent) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CentralEvent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CentralEvent) Clone() *CentralEvent {
	if m == nil {
		return nil
	}
	cloned := new(CentralEvent)
	*cloned = *m

	cloned.LastOccurredAt = m.LastOccurredAt.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.CentralEventType", CentralEventType_name, CentralEventType_value)
	proto.RegisterEnum("storage.CentralEventLevel", CentralEventLevel_name, CentralEventLevel_value)
	proto.RegisterType((*CentralEvent)(nil), "storage.CentralEvent")
}

func init() { proto.RegisterFile("storage/central_event.proto", fileDescriptor_9e6b9ef75bf23593) }

var fileDescriptor_9e6b9ef75bf23593 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0x71, 0x08, 0xf0, 0x31, 0xf0, 0x51, 0x77, 0x5a, 0xa9, 0x43, 0x40, 0xb6, 0x95, 0x0d,
	0x29, 0x42, 0x8e, 0x44, 0xbb, 0xa8, 0xd8, 0x39, 0x61, 0x1a, 0xa1, 0x06, 0xa7, 0x75, 0x02, 0xa8,
	0xed, 0xc2, 0x32, 0x9e, 0x21, 0x58, 0xd8, 0x1e, 0xd7, 0x1e, 0xa3, 0xf2, 0x1c, 0xdd, 0xf4, 0x35,
	0xfa, 0x16, 0x5d, 0xf6, 0x09, 0xa2, 0x8a, 0xbe, 0x41, 0x9e, 0xa0, 0xf2, 0xf8, 0x4f, 0x49, 0x21,
	0x8b, 0xee, 0x26, 0xe7, 0x9e, 0xfb, 0x3b, 0x73, 0x27, 0x37, 0x01, 0x5b, 0x09, 0x67, 0xb1, 0x33,
	0xa6, 0x6d, 0x97, 0x86, 0x3c, 0x76, 0x7c, 0x9b, 0x5e, 0xd3, 0x90, 0xeb, 0x51, 0xcc, 0x38, 0x83,
	0x2b, 0x45, 0xb1, 0xa1, 0x8e, 0x19, 0x1b, 0xfb, 0xb4, 0x2d, 0xe4, 0xf3, 0xf4, 0xa2, 0xcd, 0xbd,
	0x80, 0x26, 0xdc, 0x09, 0xa2, 0xdc, 0xd9, 0x78, 0x3a, 0x66, 0x63, 0x26, 0x8e, 0xed, 0xec, 0x94,
	0xab, 0xcd, 0x2f, 0x4b, 0x60, 0xbd, 0x9b, 0x73, 0x71, 0x86, 0x85, 0x3b, 0xa0, 0xe6, 0x11, 0x24,
	0x69, 0x52, 0x6b, 0xb5, 0xf3, 0x6c, 0x3a, 0x51, 0x9f, 0x24, 0x9f, 0xfc, 0x83, 0x66, 0x74, 0xb5,
	0xc7, 0x6f, 0x22, 0xda, 0x4a, 0x53, 0x8f, 0x3c, 0x6f, 0x5a, 0x35, 0x8f, 0xc0, 0x63, 0x50, 0xcf,
	0x24, 0x54, 0xd3, 0xa4, 0xd6, 0xc6, 0xfe, 0xa6, 0x5e, 0x5c, 0x44, 0xbf, 0x4b, 0x1b, 0xdd, 0x44,
	0xb4, 0xa3, 0x4c, 0x27, 0x6a, 0x23, 0xa1, 0x4e, 0xec, 0x5e, 0x1e, 0x34, 0x85, 0xac, 0x65, 0xfa,
	0xde, 0xa5, 0x47, 0x08, 0x0d, 0x9b, 0x96, 0xc0, 0xc0, 0x77, 0x60, 0xc9, 0xa7, 0xd7, 0xd4, 0x47,
	0x8b, 0x82, 0xd7, 0x78, 0x90, 0xd7, 0xcf, 0x1c, 0x1d, 0x75, 0x3a, 0x51, 0xb7, 0x66, 0x81, 0xa2,
	0x50, 0x11, 0x73, 0x12, 0x44, 0x60, 0x25, 0xa0, 0x49, 0xe2, 0x8c, 0x29, 0xaa, 0x67, 0xf3, 0x58,
	0xe5, 0x47, 0x08, 0x41, 0xfd, 0xd2, 0x0b, 0x39, 0x5a, 0x12, 0xb2, 0x38, 0xc3, 0x57, 0x60, 0x99,
	0xb0, 0xc0, 0xf1, 0x42, 0xb4, 0x2c, 0x86, 0xd7, 0xa6, 0x13, 0x75, 0x7b, 0x36, 0xe5, 0x50, 0xd4,
	0xab, 0x98, 0xc2, 0x0f, 0x0d, 0xf0, 0x7f, 0x4c, 0x13, 0x96, 0xc6, 0x2e, 0xb5, 0xc5, 0x93, 0xac,
	0x08, 0xc0, 0xf6, 0x74, 0xa2, 0xa2, 0x12, 0x60, 0x15, 0x86, 0xaa, 0x79, 0xbd, 0x6c, 0xc9, 0xde,
	0x02, 0xaa, 0x60, 0xad, 0x42, 0x78, 0x04, 0xfd, 0x27, 0xee, 0x05, 0x4a, 0xe9, 0x88, 0xc0, 0x1d,
	0xf0, 0x28, 0x4c, 0x03, 0x9b, 0xb9, 0x6e, 0x1a, 0xc7, 0x34, 0x74, 0x69, 0x82, 0x56, 0x35, 0xa9,
	0xb5, 0x68, 0x6d, 0x84, 0x69, 0x30, 0xf8, 0xa3, 0xc2, 0x0b, 0x20, 0xfb, 0x4e, 0xc2, 0x4b, 0x27,
	0xb1, 0x1d, 0x8e, 0x80, 0x26, 0xb5, 0xd6, 0xf6, 0x1b, 0x7a, 0xbe, 0x22, 0x7a, 0xb9, 0x22, 0xfa,
	0xa8, 0x5c, 0x91, 0xd9, 0x61, 0xfb, 0x4e, 0xc2, 0xb5, 0x93, 0x88, 0x38, 0x9c, 0x92, 0xea, 0xbe,
	0x1b, 0x19, 0xb5, 0x08, 0x22, 0x06, 0x87, 0x1f, 0x01, 0x70, 0x63, 0x9a, 0x59, 0xb2, 0x84, 0xb5,
	0x7f, 0x4b, 0xe8, 0xe6, 0x9d, 0x5a, 0x56, 0xae, 0x12, 0x56, 0x0b, 0x9e, 0xc1, 0x77, 0xaf, 0x81,
	0xfc, 0xf7, 0x1a, 0x41, 0x05, 0x34, 0xba, 0xd8, 0x1c, 0x59, 0x46, 0xdf, 0xc6, 0xa7, 0xd8, 0x1c,
	0xd9, 0xa3, 0xf7, 0x6f, 0xb1, 0x7d, 0x62, 0xbe, 0x31, 0x07, 0x67, 0xa6, 0xbc, 0x30, 0xa7, 0xde,
	0xc3, 0x26, 0xb6, 0x8e, 0xba, 0xb2, 0x04, 0x9b, 0x40, 0x79, 0xa0, 0xde, 0x1f, 0xf4, 0xec, 0x63,
	0x3c, 0x1c, 0x1a, 0x3d, 0x2c, 0xd7, 0x76, 0xbf, 0x49, 0xe0, 0xf1, 0xbd, 0x7d, 0x83, 0x2a, 0xd8,
	0x9a, 0xed, 0xec, 0xe3, 0x53, 0xdc, 0xbf, 0x13, 0xbd, 0x0d, 0xd0, 0x43, 0x86, 0x23, 0xf3, 0xf5,
	0x40, 0x96, 0xe6, 0xb5, 0x0f, 0x4f, 0xba, 0x5d, 0x3c, 0x1c, 0xca, 0xb5, 0x79, 0xed, 0x67, 0x86,
	0x65, 0xca, 0x8b, 0xf7, 0xe7, 0xca, 0xab, 0x87, 0x86, 0xd9, 0xc3, 0x96, 0x5c, 0xef, 0xbc, 0xfc,
	0x7e, 0xab, 0x48, 0x3f, 0x6e, 0x15, 0xe9, 0xe7, 0xad, 0x22, 0x7d, 0xfd, 0xa5, 0x2c, 0x80, 0x4d,
	0x8f, 0xe9, 0x09, 0x77, 0xdc, 0xab, 0x98, 0x7d, 0xce, 0xbf, 0x8a, 0xf2, 0xc7, 0xf4, 0xa1, 0xfc,
	0xbb, 0x38, 0x5f, 0x16, 0xfa, 0x8b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xb5, 0x97, 0x2c,
	0x5d, 0x04, 0x00, 0x00,
}

func (m *CentralEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CentralEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CentralEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LastOccurredAt != nil {
		{
			size, err := m.LastOccurredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NumOccurrences != 0 {
		i = encodeVarintCentralEvent(dAtA, i, uint64(m.NumOccurrences))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintCentralEvent(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintCentralEvent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCentralEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovCentralEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CentralEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCentralEvent(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovCentralEvent(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	if m.NumOccurrences != 0 {
		n += 1 + sovCentralEvent(uint64(m.NumOccurrences))
	}
	if m.LastOccurredAt != nil {
		l = m.LastOccurredAt.Size()
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCentralEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCentralEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCentralEvent(x uint64) (n int) {
	return sovCentralEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CentralEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CentralEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CentralEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CentralEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= CentralEventLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOccurrences", wireType)
			}
			m.NumOccurrences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOccurrences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOccurredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastOccurredAt == nil {
				m.LastOccurredAt = &types.Timestamp{}
			}
			if err := m.LastOccurredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCentralEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCentralEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCentralEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCentralEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCentralEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCentralEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCentralEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCentralEvent = fmt.Errorf("proto: unexpected end of group")
)
