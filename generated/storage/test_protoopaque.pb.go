// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/test.proto

//go:build protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSingleKeyStruct_Enum int32

const (
	TestSingleKeyStruct_ENUM0 TestSingleKeyStruct_Enum = 0
	TestSingleKeyStruct_ENUM1 TestSingleKeyStruct_Enum = 1
	TestSingleKeyStruct_ENUM2 TestSingleKeyStruct_Enum = 2
)

// Enum value maps for TestSingleKeyStruct_Enum.
var (
	TestSingleKeyStruct_Enum_name = map[int32]string{
		0: "ENUM0",
		1: "ENUM1",
		2: "ENUM2",
	}
	TestSingleKeyStruct_Enum_value = map[string]int32{
		"ENUM0": 0,
		"ENUM1": 1,
		"ENUM2": 2,
	}
)

func (x TestSingleKeyStruct_Enum) Enum() *TestSingleKeyStruct_Enum {
	p := new(TestSingleKeyStruct_Enum)
	*p = x
	return p
}

func (x TestSingleKeyStruct_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSingleKeyStruct_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_test_proto_enumTypes[0].Descriptor()
}

func (TestSingleKeyStruct_Enum) Type() protoreflect.EnumType {
	return &file_storage_test_proto_enumTypes[0]
}

func (x TestSingleKeyStruct_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TestSingleUUIDKeyStruct_Enum int32

const (
	TestSingleUUIDKeyStruct_ENUM0 TestSingleUUIDKeyStruct_Enum = 0
	TestSingleUUIDKeyStruct_ENUM1 TestSingleUUIDKeyStruct_Enum = 1
	TestSingleUUIDKeyStruct_ENUM2 TestSingleUUIDKeyStruct_Enum = 2
)

// Enum value maps for TestSingleUUIDKeyStruct_Enum.
var (
	TestSingleUUIDKeyStruct_Enum_name = map[int32]string{
		0: "ENUM0",
		1: "ENUM1",
		2: "ENUM2",
	}
	TestSingleUUIDKeyStruct_Enum_value = map[string]int32{
		"ENUM0": 0,
		"ENUM1": 1,
		"ENUM2": 2,
	}
)

func (x TestSingleUUIDKeyStruct_Enum) Enum() *TestSingleUUIDKeyStruct_Enum {
	p := new(TestSingleUUIDKeyStruct_Enum)
	*p = x
	return p
}

func (x TestSingleUUIDKeyStruct_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSingleUUIDKeyStruct_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_test_proto_enumTypes[1].Descriptor()
}

func (TestSingleUUIDKeyStruct_Enum) Type() protoreflect.EnumType {
	return &file_storage_test_proto_enumTypes[1]
}

func (x TestSingleUUIDKeyStruct_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TestStruct_Enum int32

const (
	TestStruct_ENUM0 TestStruct_Enum = 0
	TestStruct_ENUM1 TestStruct_Enum = 1
	TestStruct_ENUM2 TestStruct_Enum = 2
)

// Enum value maps for TestStruct_Enum.
var (
	TestStruct_Enum_name = map[int32]string{
		0: "ENUM0",
		1: "ENUM1",
		2: "ENUM2",
	}
	TestStruct_Enum_value = map[string]int32{
		"ENUM0": 0,
		"ENUM1": 1,
		"ENUM2": 2,
	}
)

func (x TestStruct_Enum) Enum() *TestStruct_Enum {
	p := new(TestStruct_Enum)
	*p = x
	return p
}

func (x TestStruct_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStruct_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_test_proto_enumTypes[2].Descriptor()
}

func (TestStruct_Enum) Type() protoreflect.EnumType {
	return &file_storage_test_proto_enumTypes[2]
}

func (x TestStruct_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TestSingleKeyStruct struct {
	state                  protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Key         *string                        `protobuf:"bytes,1,opt,name=key"`
	xxx_hidden_Name        *string                        `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_StringSlice []string                       `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice"`
	xxx_hidden_Bool        bool                           `protobuf:"varint,4,opt,name=bool"`
	xxx_hidden_Uint64      uint64                         `protobuf:"varint,5,opt,name=uint64"`
	xxx_hidden_Int64       int64                          `protobuf:"varint,6,opt,name=int64"`
	xxx_hidden_Float       float32                        `protobuf:"fixed32,7,opt,name=float"`
	xxx_hidden_Labels      map[string]string              `protobuf:"bytes,8,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp         `protobuf:"bytes,9,opt,name=timestamp"`
	xxx_hidden_Enum        TestSingleKeyStruct_Enum       `protobuf:"varint,10,opt,name=enum,enum=storage.TestSingleKeyStruct_Enum"`
	xxx_hidden_Enums       []TestSingleKeyStruct_Enum     `protobuf:"varint,11,rep,packed,name=enums,enum=storage.TestSingleKeyStruct_Enum"`
	xxx_hidden_Embedded    *TestSingleKeyStruct_Embedded  `protobuf:"bytes,12,opt,name=embedded"`
	xxx_hidden_Nested      *[]*TestSingleKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested"`
	xxx_hidden_Oneof       isTestSingleKeyStruct_Oneof    `protobuf_oneof:"oneof"`
	xxx_hidden_Bytess      []byte                         `protobuf:"bytes,16,opt,name=bytess"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct) Reset() {
	*x = TestSingleKeyStruct{}
	mi := &file_storage_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct) ProtoMessage() {}

func (x *TestSingleKeyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct) GetKey() string {
	if x != nil {
		if x.xxx_hidden_Key != nil {
			return *x.xxx_hidden_Key
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct) GetStringSlice() []string {
	if x != nil {
		return x.xxx_hidden_StringSlice
	}
	return nil
}

func (x *TestSingleKeyStruct) GetBool() bool {
	if x != nil {
		return x.xxx_hidden_Bool
	}
	return false
}

func (x *TestSingleKeyStruct) GetUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_Uint64
	}
	return 0
}

func (x *TestSingleKeyStruct) GetInt64() int64 {
	if x != nil {
		return x.xxx_hidden_Int64
	}
	return 0
}

func (x *TestSingleKeyStruct) GetFloat() float32 {
	if x != nil {
		return x.xxx_hidden_Float
	}
	return 0
}

func (x *TestSingleKeyStruct) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *TestSingleKeyStruct) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *TestSingleKeyStruct) GetEnum() TestSingleKeyStruct_Enum {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_Enum
		}
	}
	return TestSingleKeyStruct_ENUM0
}

func (x *TestSingleKeyStruct) GetEnums() []TestSingleKeyStruct_Enum {
	if x != nil {
		return x.xxx_hidden_Enums
	}
	return nil
}

func (x *TestSingleKeyStruct) GetEmbedded() *TestSingleKeyStruct_Embedded {
	if x != nil {
		return x.xxx_hidden_Embedded
	}
	return nil
}

func (x *TestSingleKeyStruct) GetNested() []*TestSingleKeyStruct_Nested {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
	}
	return nil
}

func (x *TestSingleKeyStruct) GetOneofstring() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofstring); ok {
			return x.Oneofstring
		}
	}
	return ""
}

func (x *TestSingleKeyStruct) GetOneofnested() *TestSingleKeyStruct_OneOfNested {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofnested); ok {
			return x.Oneofnested
		}
	}
	return nil
}

func (x *TestSingleKeyStruct) GetBytess() []byte {
	if x != nil {
		return x.xxx_hidden_Bytess
	}
	return nil
}

func (x *TestSingleKeyStruct) SetKey(v string) {
	x.xxx_hidden_Key = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 15)
}

func (x *TestSingleKeyStruct) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 15)
}

func (x *TestSingleKeyStruct) SetStringSlice(v []string) {
	x.xxx_hidden_StringSlice = v
}

func (x *TestSingleKeyStruct) SetBool(v bool) {
	x.xxx_hidden_Bool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 15)
}

func (x *TestSingleKeyStruct) SetUint64(v uint64) {
	x.xxx_hidden_Uint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 15)
}

func (x *TestSingleKeyStruct) SetInt64(v int64) {
	x.xxx_hidden_Int64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 15)
}

func (x *TestSingleKeyStruct) SetFloat(v float32) {
	x.xxx_hidden_Float = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 15)
}

func (x *TestSingleKeyStruct) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *TestSingleKeyStruct) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *TestSingleKeyStruct) SetEnum(v TestSingleKeyStruct_Enum) {
	x.xxx_hidden_Enum = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 15)
}

func (x *TestSingleKeyStruct) SetEnums(v []TestSingleKeyStruct_Enum) {
	x.xxx_hidden_Enums = v
}

func (x *TestSingleKeyStruct) SetEmbedded(v *TestSingleKeyStruct_Embedded) {
	x.xxx_hidden_Embedded = v
}

func (x *TestSingleKeyStruct) SetNested(v []*TestSingleKeyStruct_Nested) {
	x.xxx_hidden_Nested = &v
}

func (x *TestSingleKeyStruct) SetOneofstring(v string) {
	x.xxx_hidden_Oneof = &testSingleKeyStruct_Oneofstring{v}
}

func (x *TestSingleKeyStruct) SetOneofnested(v *TestSingleKeyStruct_OneOfNested) {
	if v == nil {
		x.xxx_hidden_Oneof = nil
		return
	}
	x.xxx_hidden_Oneof = &testSingleKeyStruct_Oneofnested{v}
}

func (x *TestSingleKeyStruct) SetBytess(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Bytess = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 15)
}

func (x *TestSingleKeyStruct) HasKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestSingleKeyStruct) HasBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestSingleKeyStruct) HasUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TestSingleKeyStruct) HasInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TestSingleKeyStruct) HasFloat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TestSingleKeyStruct) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *TestSingleKeyStruct) HasEnum() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TestSingleKeyStruct) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Embedded != nil
}

func (x *TestSingleKeyStruct) HasOneof() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Oneof != nil
}

func (x *TestSingleKeyStruct) HasOneofstring() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofstring)
	return ok
}

func (x *TestSingleKeyStruct) HasOneofnested() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofnested)
	return ok
}

func (x *TestSingleKeyStruct) HasBytess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *TestSingleKeyStruct) ClearKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Key = nil
}

func (x *TestSingleKeyStruct) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *TestSingleKeyStruct) ClearBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Bool = false
}

func (x *TestSingleKeyStruct) ClearUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Uint64 = 0
}

func (x *TestSingleKeyStruct) ClearInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Int64 = 0
}

func (x *TestSingleKeyStruct) ClearFloat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Float = 0
}

func (x *TestSingleKeyStruct) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *TestSingleKeyStruct) ClearEnum() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Enum = TestSingleKeyStruct_ENUM0
}

func (x *TestSingleKeyStruct) ClearEmbedded() {
	x.xxx_hidden_Embedded = nil
}

func (x *TestSingleKeyStruct) ClearOneof() {
	x.xxx_hidden_Oneof = nil
}

func (x *TestSingleKeyStruct) ClearOneofstring() {
	if _, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofstring); ok {
		x.xxx_hidden_Oneof = nil
	}
}

func (x *TestSingleKeyStruct) ClearOneofnested() {
	if _, ok := x.xxx_hidden_Oneof.(*testSingleKeyStruct_Oneofnested); ok {
		x.xxx_hidden_Oneof = nil
	}
}

func (x *TestSingleKeyStruct) ClearBytess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_Bytess = nil
}

const TestSingleKeyStruct_Oneof_not_set_case case_TestSingleKeyStruct_Oneof = 0
const TestSingleKeyStruct_Oneofstring_case case_TestSingleKeyStruct_Oneof = 14
const TestSingleKeyStruct_Oneofnested_case case_TestSingleKeyStruct_Oneof = 15

func (x *TestSingleKeyStruct) WhichOneof() case_TestSingleKeyStruct_Oneof {
	if x == nil {
		return TestSingleKeyStruct_Oneof_not_set_case
	}
	switch x.xxx_hidden_Oneof.(type) {
	case *testSingleKeyStruct_Oneofstring:
		return TestSingleKeyStruct_Oneofstring_case
	case *testSingleKeyStruct_Oneofnested:
		return TestSingleKeyStruct_Oneofnested_case
	default:
		return TestSingleKeyStruct_Oneof_not_set_case
	}
}

type TestSingleKeyStruct_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key         *string
	Name        *string
	StringSlice []string
	Bool        *bool
	// When using this ensure your precision needs are met and accounted for.  This will use a
	// BigInt which may require you to convert from uint64 to int64 OR update
	// the handling to use numerics.
	Uint64    *uint64
	Int64     *int64
	Float     *float32
	Labels    map[string]string
	Timestamp *timestamppb.Timestamp
	Enum      *TestSingleKeyStruct_Enum
	Enums     []TestSingleKeyStruct_Enum
	Embedded  *TestSingleKeyStruct_Embedded
	Nested    []*TestSingleKeyStruct_Nested
	// Fields of oneof xxx_hidden_Oneof:
	Oneofstring *string
	Oneofnested *TestSingleKeyStruct_OneOfNested
	// -- end of xxx_hidden_Oneof
	Bytess []byte
}

func (b0 TestSingleKeyStruct_builder) Build() *TestSingleKeyStruct {
	m0 := &TestSingleKeyStruct{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Key != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 15)
		x.xxx_hidden_Key = b.Key
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 15)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_StringSlice = b.StringSlice
	if b.Bool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 15)
		x.xxx_hidden_Bool = *b.Bool
	}
	if b.Uint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 15)
		x.xxx_hidden_Uint64 = *b.Uint64
	}
	if b.Int64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 15)
		x.xxx_hidden_Int64 = *b.Int64
	}
	if b.Float != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 15)
		x.xxx_hidden_Float = *b.Float
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.Enum != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 15)
		x.xxx_hidden_Enum = *b.Enum
	}
	x.xxx_hidden_Enums = b.Enums
	x.xxx_hidden_Embedded = b.Embedded
	x.xxx_hidden_Nested = &b.Nested
	if b.Oneofstring != nil {
		x.xxx_hidden_Oneof = &testSingleKeyStruct_Oneofstring{*b.Oneofstring}
	}
	if b.Oneofnested != nil {
		x.xxx_hidden_Oneof = &testSingleKeyStruct_Oneofnested{b.Oneofnested}
	}
	if b.Bytess != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 15)
		x.xxx_hidden_Bytess = b.Bytess
	}
	return m0
}

type case_TestSingleKeyStruct_Oneof protoreflect.FieldNumber

func (x case_TestSingleKeyStruct_Oneof) String() string {
	md := file_storage_test_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestSingleKeyStruct_Oneof interface {
	isTestSingleKeyStruct_Oneof()
}

type testSingleKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,oneof"`
}

type testSingleKeyStruct_Oneofnested struct {
	Oneofnested *TestSingleKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,oneof"`
}

func (*testSingleKeyStruct_Oneofstring) isTestSingleKeyStruct_Oneof() {}

func (*testSingleKeyStruct_Oneofnested) isTestSingleKeyStruct_Oneof() {}

type TestSingleUUIDKeyStruct struct {
	state                  protoimpl.MessageState             `protogen:"opaque.v1"`
	xxx_hidden_Key         *string                            `protobuf:"bytes,1,opt,name=key"`
	xxx_hidden_Name        *string                            `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_StringSlice []string                           `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice"`
	xxx_hidden_Bool        bool                               `protobuf:"varint,4,opt,name=bool"`
	xxx_hidden_Uint64      uint64                             `protobuf:"varint,5,opt,name=uint64"`
	xxx_hidden_Int64       int64                              `protobuf:"varint,6,opt,name=int64"`
	xxx_hidden_Float       float32                            `protobuf:"fixed32,7,opt,name=float"`
	xxx_hidden_Labels      map[string]string                  `protobuf:"bytes,8,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp             `protobuf:"bytes,9,opt,name=timestamp"`
	xxx_hidden_Enum        TestSingleUUIDKeyStruct_Enum       `protobuf:"varint,10,opt,name=enum,enum=storage.TestSingleUUIDKeyStruct_Enum"`
	xxx_hidden_Enums       []TestSingleUUIDKeyStruct_Enum     `protobuf:"varint,11,rep,packed,name=enums,enum=storage.TestSingleUUIDKeyStruct_Enum"`
	xxx_hidden_Embedded    *TestSingleUUIDKeyStruct_Embedded  `protobuf:"bytes,12,opt,name=embedded"`
	xxx_hidden_Nested      *[]*TestSingleUUIDKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested"`
	xxx_hidden_Oneof       isTestSingleUUIDKeyStruct_Oneof    `protobuf_oneof:"oneof"`
	xxx_hidden_Bytess      []byte                             `protobuf:"bytes,16,opt,name=bytess"`
	xxx_hidden_OneofTwo    isTestSingleUUIDKeyStruct_OneofTwo `protobuf_oneof:"oneof_two"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct) Reset() {
	*x = TestSingleUUIDKeyStruct{}
	mi := &file_storage_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct) GetKey() string {
	if x != nil {
		if x.xxx_hidden_Key != nil {
			return *x.xxx_hidden_Key
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct) GetStringSlice() []string {
	if x != nil {
		return x.xxx_hidden_StringSlice
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetBool() bool {
	if x != nil {
		return x.xxx_hidden_Bool
	}
	return false
}

func (x *TestSingleUUIDKeyStruct) GetUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_Uint64
	}
	return 0
}

func (x *TestSingleUUIDKeyStruct) GetInt64() int64 {
	if x != nil {
		return x.xxx_hidden_Int64
	}
	return 0
}

func (x *TestSingleUUIDKeyStruct) GetFloat() float32 {
	if x != nil {
		return x.xxx_hidden_Float
	}
	return 0
}

func (x *TestSingleUUIDKeyStruct) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetEnum() TestSingleUUIDKeyStruct_Enum {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_Enum
		}
	}
	return TestSingleUUIDKeyStruct_ENUM0
}

func (x *TestSingleUUIDKeyStruct) GetEnums() []TestSingleUUIDKeyStruct_Enum {
	if x != nil {
		return x.xxx_hidden_Enums
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetEmbedded() *TestSingleUUIDKeyStruct_Embedded {
	if x != nil {
		return x.xxx_hidden_Embedded
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetNested() []*TestSingleUUIDKeyStruct_Nested {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetOneofstring() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofstring); ok {
			return x.Oneofstring
		}
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct) GetOneofnested() *TestSingleUUIDKeyStruct_OneOfNested {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofnested); ok {
			return x.Oneofnested
		}
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetBytess() []byte {
	if x != nil {
		return x.xxx_hidden_Bytess
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct) GetOneofTwoString() string {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoString); ok {
			return x.OneofTwoString
		}
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct) GetOneofTwoInt() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoInt); ok {
			return x.OneofTwoInt
		}
	}
	return 0
}

func (x *TestSingleUUIDKeyStruct) SetKey(v string) {
	x.xxx_hidden_Key = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 16)
}

func (x *TestSingleUUIDKeyStruct) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 16)
}

func (x *TestSingleUUIDKeyStruct) SetStringSlice(v []string) {
	x.xxx_hidden_StringSlice = v
}

func (x *TestSingleUUIDKeyStruct) SetBool(v bool) {
	x.xxx_hidden_Bool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 16)
}

func (x *TestSingleUUIDKeyStruct) SetUint64(v uint64) {
	x.xxx_hidden_Uint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 16)
}

func (x *TestSingleUUIDKeyStruct) SetInt64(v int64) {
	x.xxx_hidden_Int64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 16)
}

func (x *TestSingleUUIDKeyStruct) SetFloat(v float32) {
	x.xxx_hidden_Float = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 16)
}

func (x *TestSingleUUIDKeyStruct) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *TestSingleUUIDKeyStruct) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *TestSingleUUIDKeyStruct) SetEnum(v TestSingleUUIDKeyStruct_Enum) {
	x.xxx_hidden_Enum = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 16)
}

func (x *TestSingleUUIDKeyStruct) SetEnums(v []TestSingleUUIDKeyStruct_Enum) {
	x.xxx_hidden_Enums = v
}

func (x *TestSingleUUIDKeyStruct) SetEmbedded(v *TestSingleUUIDKeyStruct_Embedded) {
	x.xxx_hidden_Embedded = v
}

func (x *TestSingleUUIDKeyStruct) SetNested(v []*TestSingleUUIDKeyStruct_Nested) {
	x.xxx_hidden_Nested = &v
}

func (x *TestSingleUUIDKeyStruct) SetOneofstring(v string) {
	x.xxx_hidden_Oneof = &testSingleUUIDKeyStruct_Oneofstring{v}
}

func (x *TestSingleUUIDKeyStruct) SetOneofnested(v *TestSingleUUIDKeyStruct_OneOfNested) {
	if v == nil {
		x.xxx_hidden_Oneof = nil
		return
	}
	x.xxx_hidden_Oneof = &testSingleUUIDKeyStruct_Oneofnested{v}
}

func (x *TestSingleUUIDKeyStruct) SetBytess(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Bytess = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 16)
}

func (x *TestSingleUUIDKeyStruct) SetOneofTwoString(v string) {
	x.xxx_hidden_OneofTwo = &testSingleUUIDKeyStruct_OneofTwoString{v}
}

func (x *TestSingleUUIDKeyStruct) SetOneofTwoInt(v int64) {
	x.xxx_hidden_OneofTwo = &testSingleUUIDKeyStruct_OneofTwoInt{v}
}

func (x *TestSingleUUIDKeyStruct) HasKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestSingleUUIDKeyStruct) HasBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestSingleUUIDKeyStruct) HasUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TestSingleUUIDKeyStruct) HasInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TestSingleUUIDKeyStruct) HasFloat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TestSingleUUIDKeyStruct) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *TestSingleUUIDKeyStruct) HasEnum() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TestSingleUUIDKeyStruct) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Embedded != nil
}

func (x *TestSingleUUIDKeyStruct) HasOneof() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Oneof != nil
}

func (x *TestSingleUUIDKeyStruct) HasOneofstring() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofstring)
	return ok
}

func (x *TestSingleUUIDKeyStruct) HasOneofnested() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofnested)
	return ok
}

func (x *TestSingleUUIDKeyStruct) HasBytess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *TestSingleUUIDKeyStruct) HasOneofTwo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OneofTwo != nil
}

func (x *TestSingleUUIDKeyStruct) HasOneofTwoString() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoString)
	return ok
}

func (x *TestSingleUUIDKeyStruct) HasOneofTwoInt() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoInt)
	return ok
}

func (x *TestSingleUUIDKeyStruct) ClearKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Key = nil
}

func (x *TestSingleUUIDKeyStruct) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *TestSingleUUIDKeyStruct) ClearBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Bool = false
}

func (x *TestSingleUUIDKeyStruct) ClearUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Uint64 = 0
}

func (x *TestSingleUUIDKeyStruct) ClearInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Int64 = 0
}

func (x *TestSingleUUIDKeyStruct) ClearFloat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Float = 0
}

func (x *TestSingleUUIDKeyStruct) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *TestSingleUUIDKeyStruct) ClearEnum() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Enum = TestSingleUUIDKeyStruct_ENUM0
}

func (x *TestSingleUUIDKeyStruct) ClearEmbedded() {
	x.xxx_hidden_Embedded = nil
}

func (x *TestSingleUUIDKeyStruct) ClearOneof() {
	x.xxx_hidden_Oneof = nil
}

func (x *TestSingleUUIDKeyStruct) ClearOneofstring() {
	if _, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofstring); ok {
		x.xxx_hidden_Oneof = nil
	}
}

func (x *TestSingleUUIDKeyStruct) ClearOneofnested() {
	if _, ok := x.xxx_hidden_Oneof.(*testSingleUUIDKeyStruct_Oneofnested); ok {
		x.xxx_hidden_Oneof = nil
	}
}

func (x *TestSingleUUIDKeyStruct) ClearBytess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_Bytess = nil
}

func (x *TestSingleUUIDKeyStruct) ClearOneofTwo() {
	x.xxx_hidden_OneofTwo = nil
}

func (x *TestSingleUUIDKeyStruct) ClearOneofTwoString() {
	if _, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoString); ok {
		x.xxx_hidden_OneofTwo = nil
	}
}

func (x *TestSingleUUIDKeyStruct) ClearOneofTwoInt() {
	if _, ok := x.xxx_hidden_OneofTwo.(*testSingleUUIDKeyStruct_OneofTwoInt); ok {
		x.xxx_hidden_OneofTwo = nil
	}
}

const TestSingleUUIDKeyStruct_Oneof_not_set_case case_TestSingleUUIDKeyStruct_Oneof = 0
const TestSingleUUIDKeyStruct_Oneofstring_case case_TestSingleUUIDKeyStruct_Oneof = 14
const TestSingleUUIDKeyStruct_Oneofnested_case case_TestSingleUUIDKeyStruct_Oneof = 15

func (x *TestSingleUUIDKeyStruct) WhichOneof() case_TestSingleUUIDKeyStruct_Oneof {
	if x == nil {
		return TestSingleUUIDKeyStruct_Oneof_not_set_case
	}
	switch x.xxx_hidden_Oneof.(type) {
	case *testSingleUUIDKeyStruct_Oneofstring:
		return TestSingleUUIDKeyStruct_Oneofstring_case
	case *testSingleUUIDKeyStruct_Oneofnested:
		return TestSingleUUIDKeyStruct_Oneofnested_case
	default:
		return TestSingleUUIDKeyStruct_Oneof_not_set_case
	}
}

const TestSingleUUIDKeyStruct_OneofTwo_not_set_case case_TestSingleUUIDKeyStruct_OneofTwo = 0
const TestSingleUUIDKeyStruct_OneofTwoString_case case_TestSingleUUIDKeyStruct_OneofTwo = 17
const TestSingleUUIDKeyStruct_OneofTwoInt_case case_TestSingleUUIDKeyStruct_OneofTwo = 18

func (x *TestSingleUUIDKeyStruct) WhichOneofTwo() case_TestSingleUUIDKeyStruct_OneofTwo {
	if x == nil {
		return TestSingleUUIDKeyStruct_OneofTwo_not_set_case
	}
	switch x.xxx_hidden_OneofTwo.(type) {
	case *testSingleUUIDKeyStruct_OneofTwoString:
		return TestSingleUUIDKeyStruct_OneofTwoString_case
	case *testSingleUUIDKeyStruct_OneofTwoInt:
		return TestSingleUUIDKeyStruct_OneofTwoInt_case
	default:
		return TestSingleUUIDKeyStruct_OneofTwo_not_set_case
	}
}

type TestSingleUUIDKeyStruct_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key         *string
	Name        *string
	StringSlice []string
	Bool        *bool
	// When using this ensure your precision needs are met and accounted for.  This will use a
	// BigInt which may require you to convert from uint64 to int64 OR update
	// the handling to use numerics.
	Uint64    *uint64
	Int64     *int64
	Float     *float32
	Labels    map[string]string
	Timestamp *timestamppb.Timestamp
	Enum      *TestSingleUUIDKeyStruct_Enum
	Enums     []TestSingleUUIDKeyStruct_Enum
	Embedded  *TestSingleUUIDKeyStruct_Embedded
	Nested    []*TestSingleUUIDKeyStruct_Nested
	// Fields of oneof xxx_hidden_Oneof:
	Oneofstring *string
	Oneofnested *TestSingleUUIDKeyStruct_OneOfNested
	// -- end of xxx_hidden_Oneof
	Bytess []byte
	// Fields of oneof xxx_hidden_OneofTwo:
	OneofTwoString *string
	OneofTwoInt    *int64
	// -- end of xxx_hidden_OneofTwo
}

func (b0 TestSingleUUIDKeyStruct_builder) Build() *TestSingleUUIDKeyStruct {
	m0 := &TestSingleUUIDKeyStruct{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Key != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 16)
		x.xxx_hidden_Key = b.Key
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 16)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_StringSlice = b.StringSlice
	if b.Bool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 16)
		x.xxx_hidden_Bool = *b.Bool
	}
	if b.Uint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 16)
		x.xxx_hidden_Uint64 = *b.Uint64
	}
	if b.Int64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 16)
		x.xxx_hidden_Int64 = *b.Int64
	}
	if b.Float != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 16)
		x.xxx_hidden_Float = *b.Float
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.Enum != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 16)
		x.xxx_hidden_Enum = *b.Enum
	}
	x.xxx_hidden_Enums = b.Enums
	x.xxx_hidden_Embedded = b.Embedded
	x.xxx_hidden_Nested = &b.Nested
	if b.Oneofstring != nil {
		x.xxx_hidden_Oneof = &testSingleUUIDKeyStruct_Oneofstring{*b.Oneofstring}
	}
	if b.Oneofnested != nil {
		x.xxx_hidden_Oneof = &testSingleUUIDKeyStruct_Oneofnested{b.Oneofnested}
	}
	if b.Bytess != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 16)
		x.xxx_hidden_Bytess = b.Bytess
	}
	if b.OneofTwoString != nil {
		x.xxx_hidden_OneofTwo = &testSingleUUIDKeyStruct_OneofTwoString{*b.OneofTwoString}
	}
	if b.OneofTwoInt != nil {
		x.xxx_hidden_OneofTwo = &testSingleUUIDKeyStruct_OneofTwoInt{*b.OneofTwoInt}
	}
	return m0
}

type case_TestSingleUUIDKeyStruct_Oneof protoreflect.FieldNumber

func (x case_TestSingleUUIDKeyStruct_Oneof) String() string {
	md := file_storage_test_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_TestSingleUUIDKeyStruct_OneofTwo protoreflect.FieldNumber

func (x case_TestSingleUUIDKeyStruct_OneofTwo) String() string {
	md := file_storage_test_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestSingleUUIDKeyStruct_Oneof interface {
	isTestSingleUUIDKeyStruct_Oneof()
}

type testSingleUUIDKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,oneof"`
}

type testSingleUUIDKeyStruct_Oneofnested struct {
	Oneofnested *TestSingleUUIDKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,oneof"`
}

func (*testSingleUUIDKeyStruct_Oneofstring) isTestSingleUUIDKeyStruct_Oneof() {}

func (*testSingleUUIDKeyStruct_Oneofnested) isTestSingleUUIDKeyStruct_Oneof() {}

type isTestSingleUUIDKeyStruct_OneofTwo interface {
	isTestSingleUUIDKeyStruct_OneofTwo()
}

type testSingleUUIDKeyStruct_OneofTwoString struct {
	OneofTwoString string `protobuf:"bytes,17,opt,name=oneof_two_string,json=oneofTwoString,oneof"`
}

type testSingleUUIDKeyStruct_OneofTwoInt struct {
	OneofTwoInt int64 `protobuf:"varint,18,opt,name=oneof_two_int,json=oneofTwoInt,oneof"`
}

func (*testSingleUUIDKeyStruct_OneofTwoString) isTestSingleUUIDKeyStruct_OneofTwo() {}

func (*testSingleUUIDKeyStruct_OneofTwoInt) isTestSingleUUIDKeyStruct_OneofTwo() {}

type TestStruct struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key1               *string                `protobuf:"bytes,1,opt,name=key1"`
	xxx_hidden_Key2               *string                `protobuf:"bytes,2,opt,name=key2"`
	xxx_hidden_StringSlice        []string               `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice"`
	xxx_hidden_Bool               bool                   `protobuf:"varint,4,opt,name=bool"`
	xxx_hidden_Uint64             uint64                 `protobuf:"varint,5,opt,name=uint64"`
	xxx_hidden_Int64              int64                  `protobuf:"varint,6,opt,name=int64"`
	xxx_hidden_Float              float32                `protobuf:"fixed32,7,opt,name=float"`
	xxx_hidden_Labels             map[string]string      `protobuf:"bytes,8,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Timestamp          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp"`
	xxx_hidden_Enum               TestStruct_Enum        `protobuf:"varint,10,opt,name=enum,enum=storage.TestStruct_Enum"`
	xxx_hidden_Enums              []TestStruct_Enum      `protobuf:"varint,11,rep,packed,name=enums,enum=storage.TestStruct_Enum"`
	xxx_hidden_String_            *string                `protobuf:"bytes,16,opt,name=string"`
	xxx_hidden_IntSliceDeprecated []int64                `protobuf:"varint,17,rep,packed,name=int_slice_deprecated,json=intSliceDeprecated"`
	xxx_hidden_Int32Slice         []int32                `protobuf:"varint,18,rep,packed,name=int32_slice,json=int32Slice"`
	xxx_hidden_Embedded           *TestStruct_Embedded   `protobuf:"bytes,12,opt,name=embedded"`
	xxx_hidden_Nested             *[]*TestStruct_Nested  `protobuf:"bytes,13,rep,name=nested"`
	xxx_hidden_Oneof              isTestStruct_Oneof     `protobuf_oneof:"oneof"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *TestStruct) Reset() {
	*x = TestStruct{}
	mi := &file_storage_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct) ProtoMessage() {}

func (x *TestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct) GetKey1() string {
	if x != nil {
		if x.xxx_hidden_Key1 != nil {
			return *x.xxx_hidden_Key1
		}
		return ""
	}
	return ""
}

func (x *TestStruct) GetKey2() string {
	if x != nil {
		if x.xxx_hidden_Key2 != nil {
			return *x.xxx_hidden_Key2
		}
		return ""
	}
	return ""
}

func (x *TestStruct) GetStringSlice() []string {
	if x != nil {
		return x.xxx_hidden_StringSlice
	}
	return nil
}

func (x *TestStruct) GetBool() bool {
	if x != nil {
		return x.xxx_hidden_Bool
	}
	return false
}

func (x *TestStruct) GetUint64() uint64 {
	if x != nil {
		return x.xxx_hidden_Uint64
	}
	return 0
}

func (x *TestStruct) GetInt64() int64 {
	if x != nil {
		return x.xxx_hidden_Int64
	}
	return 0
}

func (x *TestStruct) GetFloat() float32 {
	if x != nil {
		return x.xxx_hidden_Float
	}
	return 0
}

func (x *TestStruct) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *TestStruct) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *TestStruct) GetEnum() TestStruct_Enum {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_Enum
		}
	}
	return TestStruct_ENUM0
}

func (x *TestStruct) GetEnums() []TestStruct_Enum {
	if x != nil {
		return x.xxx_hidden_Enums
	}
	return nil
}

func (x *TestStruct) GetString() string {
	if x != nil {
		if x.xxx_hidden_String_ != nil {
			return *x.xxx_hidden_String_
		}
		return ""
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/test.proto.
func (x *TestStruct) GetIntSliceDeprecated() []int64 {
	if x != nil {
		return x.xxx_hidden_IntSliceDeprecated
	}
	return nil
}

func (x *TestStruct) GetInt32Slice() []int32 {
	if x != nil {
		return x.xxx_hidden_Int32Slice
	}
	return nil
}

func (x *TestStruct) GetEmbedded() *TestStruct_Embedded {
	if x != nil {
		return x.xxx_hidden_Embedded
	}
	return nil
}

func (x *TestStruct) GetNested() []*TestStruct_Nested {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
	}
	return nil
}

func (x *TestStruct) GetOneofstring() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofstring); ok {
			return x.Oneofstring
		}
	}
	return ""
}

func (x *TestStruct) GetOneofnested() *TestStruct_OneOfNested {
	if x != nil {
		if x, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofnested); ok {
			return x.Oneofnested
		}
	}
	return nil
}

func (x *TestStruct) SetKey1(v string) {
	x.xxx_hidden_Key1 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 17)
}

func (x *TestStruct) SetKey2(v string) {
	x.xxx_hidden_Key2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 17)
}

func (x *TestStruct) SetStringSlice(v []string) {
	x.xxx_hidden_StringSlice = v
}

func (x *TestStruct) SetBool(v bool) {
	x.xxx_hidden_Bool = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 17)
}

func (x *TestStruct) SetUint64(v uint64) {
	x.xxx_hidden_Uint64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 17)
}

func (x *TestStruct) SetInt64(v int64) {
	x.xxx_hidden_Int64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 17)
}

func (x *TestStruct) SetFloat(v float32) {
	x.xxx_hidden_Float = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 17)
}

func (x *TestStruct) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *TestStruct) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *TestStruct) SetEnum(v TestStruct_Enum) {
	x.xxx_hidden_Enum = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 17)
}

func (x *TestStruct) SetEnums(v []TestStruct_Enum) {
	x.xxx_hidden_Enums = v
}

func (x *TestStruct) SetString(v string) {
	x.xxx_hidden_String_ = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 17)
}

// Deprecated: Marked as deprecated in storage/test.proto.
func (x *TestStruct) SetIntSliceDeprecated(v []int64) {
	x.xxx_hidden_IntSliceDeprecated = v
}

func (x *TestStruct) SetInt32Slice(v []int32) {
	x.xxx_hidden_Int32Slice = v
}

func (x *TestStruct) SetEmbedded(v *TestStruct_Embedded) {
	x.xxx_hidden_Embedded = v
}

func (x *TestStruct) SetNested(v []*TestStruct_Nested) {
	x.xxx_hidden_Nested = &v
}

func (x *TestStruct) SetOneofstring(v string) {
	x.xxx_hidden_Oneof = &testStruct_Oneofstring{v}
}

func (x *TestStruct) SetOneofnested(v *TestStruct_OneOfNested) {
	if v == nil {
		x.xxx_hidden_Oneof = nil
		return
	}
	x.xxx_hidden_Oneof = &testStruct_Oneofnested{v}
}

func (x *TestStruct) HasKey1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct) HasKey2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestStruct) HasBool() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestStruct) HasUint64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TestStruct) HasInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TestStruct) HasFloat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TestStruct) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *TestStruct) HasEnum() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TestStruct) HasString() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *TestStruct) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Embedded != nil
}

func (x *TestStruct) HasOneof() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Oneof != nil
}

func (x *TestStruct) HasOneofstring() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofstring)
	return ok
}

func (x *TestStruct) HasOneofnested() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofnested)
	return ok
}

func (x *TestStruct) ClearKey1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Key1 = nil
}

func (x *TestStruct) ClearKey2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Key2 = nil
}

func (x *TestStruct) ClearBool() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Bool = false
}

func (x *TestStruct) ClearUint64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Uint64 = 0
}

func (x *TestStruct) ClearInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Int64 = 0
}

func (x *TestStruct) ClearFloat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Float = 0
}

func (x *TestStruct) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *TestStruct) ClearEnum() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Enum = TestStruct_ENUM0
}

func (x *TestStruct) ClearString() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_String_ = nil
}

func (x *TestStruct) ClearEmbedded() {
	x.xxx_hidden_Embedded = nil
}

func (x *TestStruct) ClearOneof() {
	x.xxx_hidden_Oneof = nil
}

func (x *TestStruct) ClearOneofstring() {
	if _, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofstring); ok {
		x.xxx_hidden_Oneof = nil
	}
}

func (x *TestStruct) ClearOneofnested() {
	if _, ok := x.xxx_hidden_Oneof.(*testStruct_Oneofnested); ok {
		x.xxx_hidden_Oneof = nil
	}
}

const TestStruct_Oneof_not_set_case case_TestStruct_Oneof = 0
const TestStruct_Oneofstring_case case_TestStruct_Oneof = 14
const TestStruct_Oneofnested_case case_TestStruct_Oneof = 15

func (x *TestStruct) WhichOneof() case_TestStruct_Oneof {
	if x == nil {
		return TestStruct_Oneof_not_set_case
	}
	switch x.xxx_hidden_Oneof.(type) {
	case *testStruct_Oneofstring:
		return TestStruct_Oneofstring_case
	case *testStruct_Oneofnested:
		return TestStruct_Oneofnested_case
	default:
		return TestStruct_Oneof_not_set_case
	}
}

type TestStruct_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key1        *string
	Key2        *string
	StringSlice []string
	Bool        *bool
	Uint64      *uint64
	Int64       *int64
	Float       *float32
	Labels      map[string]string
	Timestamp   *timestamppb.Timestamp
	Enum        *TestStruct_Enum
	Enums       []TestStruct_Enum
	String      *string
	// repeated int64: currently unsupported
	//
	// Deprecated: Marked as deprecated in storage/test.proto.
	IntSliceDeprecated []int64
	Int32Slice         []int32
	Embedded           *TestStruct_Embedded
	Nested             []*TestStruct_Nested
	// Fields of oneof xxx_hidden_Oneof:
	Oneofstring *string
	Oneofnested *TestStruct_OneOfNested
	// -- end of xxx_hidden_Oneof
}

func (b0 TestStruct_builder) Build() *TestStruct {
	m0 := &TestStruct{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Key1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 17)
		x.xxx_hidden_Key1 = b.Key1
	}
	if b.Key2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 17)
		x.xxx_hidden_Key2 = b.Key2
	}
	x.xxx_hidden_StringSlice = b.StringSlice
	if b.Bool != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 17)
		x.xxx_hidden_Bool = *b.Bool
	}
	if b.Uint64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 17)
		x.xxx_hidden_Uint64 = *b.Uint64
	}
	if b.Int64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 17)
		x.xxx_hidden_Int64 = *b.Int64
	}
	if b.Float != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 17)
		x.xxx_hidden_Float = *b.Float
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.Enum != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 17)
		x.xxx_hidden_Enum = *b.Enum
	}
	x.xxx_hidden_Enums = b.Enums
	if b.String != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 17)
		x.xxx_hidden_String_ = b.String
	}
	x.xxx_hidden_IntSliceDeprecated = b.IntSliceDeprecated
	x.xxx_hidden_Int32Slice = b.Int32Slice
	x.xxx_hidden_Embedded = b.Embedded
	x.xxx_hidden_Nested = &b.Nested
	if b.Oneofstring != nil {
		x.xxx_hidden_Oneof = &testStruct_Oneofstring{*b.Oneofstring}
	}
	if b.Oneofnested != nil {
		x.xxx_hidden_Oneof = &testStruct_Oneofnested{b.Oneofnested}
	}
	return m0
}

type case_TestStruct_Oneof protoreflect.FieldNumber

func (x case_TestStruct_Oneof) String() string {
	md := file_storage_test_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestStruct_Oneof interface {
	isTestStruct_Oneof()
}

type testStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,oneof"`
}

type testStruct_Oneofnested struct {
	Oneofnested *TestStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,oneof"`
}

func (*testStruct_Oneofstring) isTestStruct_Oneof() {}

func (*testStruct_Oneofnested) isTestStruct_Oneof() {}

// The test graph is as below. The numbers next to the edges
// indicate the cardinality of the relationship, either n-1, 1-n or n-n.
// The first element is the child and second is the parent.
//
//	      TestGrandparent
//	 (n-1) /      (n-1) |   (n-1) \          \ (n-1) (namespaced search)
//	TestParent1  TestParent2   TestParent3   TestParent4
//	(n-n) |           | (n-1)                   \ (n-1)
//	TestChild1    TestChild2                TestChild1P4
//	  (1-n)  |
//	TestGrandChild1
//	  (n-1)  |
//	TestGGrandChild1
//	  (1-n)   |
//	TestG2GrandChild1
//	 (n-1)   |
//	 TestG3GrandChild1
type TestGrandparent struct {
	state                  protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                      `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Val         *string                      `protobuf:"bytes,2,opt,name=val"`
	xxx_hidden_Embedded    *[]*TestGrandparent_Embedded `protobuf:"bytes,3,rep,name=embedded"`
	xxx_hidden_Priority    int64                        `protobuf:"varint,4,opt,name=priority"`
	xxx_hidden_RiskScore   float32                      `protobuf:"fixed32,5,opt,name=risk_score,json=riskScore"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestGrandparent) Reset() {
	*x = TestGrandparent{}
	mi := &file_storage_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGrandparent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent) ProtoMessage() {}

func (x *TestGrandparent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestGrandparent) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestGrandparent) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestGrandparent) GetEmbedded() []*TestGrandparent_Embedded {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
	}
	return nil
}

func (x *TestGrandparent) GetPriority() int64 {
	if x != nil {
		return x.xxx_hidden_Priority
	}
	return 0
}

func (x *TestGrandparent) GetRiskScore() float32 {
	if x != nil {
		return x.xxx_hidden_RiskScore
	}
	return 0
}

func (x *TestGrandparent) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TestGrandparent) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TestGrandparent) SetEmbedded(v []*TestGrandparent_Embedded) {
	x.xxx_hidden_Embedded = &v
}

func (x *TestGrandparent) SetPriority(v int64) {
	x.xxx_hidden_Priority = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *TestGrandparent) SetRiskScore(v float32) {
	x.xxx_hidden_RiskScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *TestGrandparent) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestGrandparent) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestGrandparent) HasPriority() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestGrandparent) HasRiskScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TestGrandparent) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestGrandparent) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Val = nil
}

func (x *TestGrandparent) ClearPriority() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Priority = 0
}

func (x *TestGrandparent) ClearRiskScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_RiskScore = 0
}

type TestGrandparent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        *string
	Val       *string
	Embedded  []*TestGrandparent_Embedded
	Priority  *int64
	RiskScore *float32
}

func (b0 TestGrandparent_builder) Build() *TestGrandparent {
	m0 := &TestGrandparent{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Id = b.Id
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Val = b.Val
	}
	x.xxx_hidden_Embedded = &b.Embedded
	if b.Priority != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Priority = *b.Priority
	}
	if b.RiskScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_RiskScore = *b.RiskScore
	}
	return m0
}

type TestParent1 struct {
	state                  protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                   `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                   `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_Children    *[]*TestParent1_Child1Ref `protobuf:"bytes,3,rep,name=children"`
	xxx_hidden_Val         *string                   `protobuf:"bytes,4,opt,name=val"`
	xxx_hidden_StringSlice []string                  `protobuf:"bytes,5,rep,name=string_slice,json=stringSlice"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestParent1) Reset() {
	*x = TestParent1{}
	mi := &file_storage_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestParent1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent1) ProtoMessage() {}

func (x *TestParent1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestParent1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestParent1) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestParent1) GetChildren() []*TestParent1_Child1Ref {
	if x != nil {
		if x.xxx_hidden_Children != nil {
			return *x.xxx_hidden_Children
		}
	}
	return nil
}

func (x *TestParent1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestParent1) GetStringSlice() []string {
	if x != nil {
		return x.xxx_hidden_StringSlice
	}
	return nil
}

func (x *TestParent1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TestParent1) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TestParent1) SetChildren(v []*TestParent1_Child1Ref) {
	x.xxx_hidden_Children = &v
}

func (x *TestParent1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *TestParent1) SetStringSlice(v []string) {
	x.xxx_hidden_StringSlice = v
}

func (x *TestParent1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestParent1) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestParent1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestParent1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestParent1) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestParent1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Val = nil
}

type TestParent1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	ParentId    *string
	Children    []*TestParent1_Child1Ref
	Val         *string
	StringSlice []string
}

func (b0 TestParent1_builder) Build() *TestParent1 {
	m0 := &TestParent1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ParentId = b.ParentId
	}
	x.xxx_hidden_Children = &b.Children
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Val = b.Val
	}
	x.xxx_hidden_StringSlice = b.StringSlice
	return m0
}

type TestChild1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Val         *string                `protobuf:"bytes,2,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestChild1) Reset() {
	*x = TestChild1{}
	mi := &file_storage_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild1) ProtoMessage() {}

func (x *TestChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestChild1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestChild1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestChild1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestChild1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TestChild1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestChild1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestChild1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestChild1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Val = nil
}

type TestChild1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id  *string
	Val *string
}

func (b0 TestChild1_builder) Build() *TestChild1 {
	m0 := &TestChild1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestGrandChild1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_ChildId     *string                `protobuf:"bytes,3,opt,name=child_id,json=childId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,4,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestGrandChild1) Reset() {
	*x = TestGrandChild1{}
	mi := &file_storage_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandChild1) ProtoMessage() {}

func (x *TestGrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestGrandChild1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestGrandChild1) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestGrandChild1) GetChildId() string {
	if x != nil {
		if x.xxx_hidden_ChildId != nil {
			return *x.xxx_hidden_ChildId
		}
		return ""
	}
	return ""
}

func (x *TestGrandChild1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestGrandChild1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestGrandChild1) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestGrandChild1) SetChildId(v string) {
	x.xxx_hidden_ChildId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestGrandChild1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TestGrandChild1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestGrandChild1) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestGrandChild1) HasChildId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestGrandChild1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestGrandChild1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestGrandChild1) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestGrandChild1) ClearChildId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ChildId = nil
}

func (x *TestGrandChild1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Val = nil
}

type TestGrandChild1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	ChildId  *string
	Val      *string
}

func (b0 TestGrandChild1_builder) Build() *TestGrandChild1 {
	m0 := &TestGrandChild1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.ChildId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_ChildId = b.ChildId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestGGrandChild1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Val         *string                `protobuf:"bytes,2,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestGGrandChild1) Reset() {
	*x = TestGGrandChild1{}
	mi := &file_storage_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGGrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGGrandChild1) ProtoMessage() {}

func (x *TestGGrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestGGrandChild1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestGGrandChild1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestGGrandChild1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestGGrandChild1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TestGGrandChild1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestGGrandChild1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestGGrandChild1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestGGrandChild1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Val = nil
}

type TestGGrandChild1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id  *string
	Val *string
}

func (b0 TestGGrandChild1_builder) Build() *TestGGrandChild1 {
	m0 := &TestGGrandChild1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestG2GrandChild1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_ChildId     *string                `protobuf:"bytes,3,opt,name=child_id,json=childId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,4,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestG2GrandChild1) Reset() {
	*x = TestG2GrandChild1{}
	mi := &file_storage_test_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestG2GrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestG2GrandChild1) ProtoMessage() {}

func (x *TestG2GrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestG2GrandChild1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestG2GrandChild1) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestG2GrandChild1) GetChildId() string {
	if x != nil {
		if x.xxx_hidden_ChildId != nil {
			return *x.xxx_hidden_ChildId
		}
		return ""
	}
	return ""
}

func (x *TestG2GrandChild1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestG2GrandChild1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestG2GrandChild1) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestG2GrandChild1) SetChildId(v string) {
	x.xxx_hidden_ChildId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestG2GrandChild1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TestG2GrandChild1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestG2GrandChild1) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestG2GrandChild1) HasChildId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestG2GrandChild1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestG2GrandChild1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestG2GrandChild1) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestG2GrandChild1) ClearChildId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ChildId = nil
}

func (x *TestG2GrandChild1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Val = nil
}

type TestG2GrandChild1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	ChildId  *string
	Val      *string
}

func (b0 TestG2GrandChild1_builder) Build() *TestG2GrandChild1 {
	m0 := &TestG2GrandChild1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.ChildId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_ChildId = b.ChildId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestG3GrandChild1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Val         *string                `protobuf:"bytes,2,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestG3GrandChild1) Reset() {
	*x = TestG3GrandChild1{}
	mi := &file_storage_test_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestG3GrandChild1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestG3GrandChild1) ProtoMessage() {}

func (x *TestG3GrandChild1) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestG3GrandChild1) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestG3GrandChild1) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestG3GrandChild1) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestG3GrandChild1) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TestG3GrandChild1) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestG3GrandChild1) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestG3GrandChild1) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestG3GrandChild1) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Val = nil
}

type TestG3GrandChild1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id  *string
	Val *string
}

func (b0 TestG3GrandChild1_builder) Build() *TestG3GrandChild1 {
	m0 := &TestG3GrandChild1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestParent2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,3,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestParent2) Reset() {
	*x = TestParent2{}
	mi := &file_storage_test_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestParent2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent2) ProtoMessage() {}

func (x *TestParent2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestParent2) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestParent2) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestParent2) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestParent2) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestParent2) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestParent2) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestParent2) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestParent2) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestParent2) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestParent2) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestParent2) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestParent2) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Val = nil
}

type TestParent2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	Val      *string
}

func (b0 TestParent2_builder) Build() *TestParent2 {
	m0 := &TestParent2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestChild2 struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id            *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId      *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_GrandparentId *string                `protobuf:"bytes,3,opt,name=grandparent_id,json=grandparentId"`
	xxx_hidden_Val           *string                `protobuf:"bytes,4,opt,name=val"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TestChild2) Reset() {
	*x = TestChild2{}
	mi := &file_storage_test_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestChild2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild2) ProtoMessage() {}

func (x *TestChild2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestChild2) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestChild2) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestChild2) GetGrandparentId() string {
	if x != nil {
		if x.xxx_hidden_GrandparentId != nil {
			return *x.xxx_hidden_GrandparentId
		}
		return ""
	}
	return ""
}

func (x *TestChild2) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestChild2) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestChild2) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestChild2) SetGrandparentId(v string) {
	x.xxx_hidden_GrandparentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestChild2) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TestChild2) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestChild2) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestChild2) HasGrandparentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestChild2) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestChild2) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestChild2) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestChild2) ClearGrandparentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_GrandparentId = nil
}

func (x *TestChild2) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Val = nil
}

type TestChild2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	// For a potential optimization, insert a direct link from child to grandparent.
	GrandparentId *string
	Val           *string
}

func (b0 TestChild2_builder) Build() *TestChild2 {
	m0 := &TestChild2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.GrandparentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_GrandparentId = b.GrandparentId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestParent3 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,3,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestParent3) Reset() {
	*x = TestParent3{}
	mi := &file_storage_test_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestParent3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent3) ProtoMessage() {}

func (x *TestParent3) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestParent3) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestParent3) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestParent3) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestParent3) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestParent3) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestParent3) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestParent3) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestParent3) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestParent3) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestParent3) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestParent3) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestParent3) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Val = nil
}

type TestParent3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	Val      *string
}

func (b0 TestParent3_builder) Build() *TestParent3 {
	m0 := &TestParent3{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestParent4 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,3,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestParent4) Reset() {
	*x = TestParent4{}
	mi := &file_storage_test_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestParent4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent4) ProtoMessage() {}

func (x *TestParent4) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestParent4) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestParent4) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestParent4) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestParent4) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestParent4) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestParent4) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestParent4) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestParent4) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestParent4) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestParent4) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestParent4) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestParent4) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Val = nil
}

type TestParent4_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	Val      *string
}

func (b0 TestParent4_builder) Build() *TestParent4 {
	m0 := &TestParent4{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestChild1P4 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId    *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_Val         *string                `protobuf:"bytes,3,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestChild1P4) Reset() {
	*x = TestChild1P4{}
	mi := &file_storage_test_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestChild1P4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestChild1P4) ProtoMessage() {}

func (x *TestChild1P4) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestChild1P4) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestChild1P4) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *TestChild1P4) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestChild1P4) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestChild1P4) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestChild1P4) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestChild1P4) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestChild1P4) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestChild1P4) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestChild1P4) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestChild1P4) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ParentId = nil
}

func (x *TestChild1P4) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Val = nil
}

type TestChild1P4_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	ParentId *string
	Val      *string
}

func (b0 TestChild1P4_builder) Build() *TestChild1P4 {
	m0 := &TestChild1P4{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ParentId = b.ParentId
	}
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestShortCircuit struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id             *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ChildId        *string                `protobuf:"bytes,2,opt,name=child_id,json=childId"`
	xxx_hidden_G2GrandchildId *string                `protobuf:"bytes,3,opt,name=g2_grandchild_id,json=g2GrandchildId"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TestShortCircuit) Reset() {
	*x = TestShortCircuit{}
	mi := &file_storage_test_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestShortCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestShortCircuit) ProtoMessage() {}

func (x *TestShortCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestShortCircuit) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestShortCircuit) GetChildId() string {
	if x != nil {
		if x.xxx_hidden_ChildId != nil {
			return *x.xxx_hidden_ChildId
		}
		return ""
	}
	return ""
}

func (x *TestShortCircuit) GetG2GrandchildId() string {
	if x != nil {
		if x.xxx_hidden_G2GrandchildId != nil {
			return *x.xxx_hidden_G2GrandchildId
		}
		return ""
	}
	return ""
}

func (x *TestShortCircuit) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestShortCircuit) SetChildId(v string) {
	x.xxx_hidden_ChildId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestShortCircuit) SetG2GrandchildId(v string) {
	x.xxx_hidden_G2GrandchildId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestShortCircuit) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestShortCircuit) HasChildId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestShortCircuit) HasG2GrandchildId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestShortCircuit) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestShortCircuit) ClearChildId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ChildId = nil
}

func (x *TestShortCircuit) ClearG2GrandchildId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_G2GrandchildId = nil
}

type TestShortCircuit_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id             *string
	ChildId        *string
	G2GrandchildId *string
}

func (b0 TestShortCircuit_builder) Build() *TestShortCircuit {
	m0 := &TestShortCircuit{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.ChildId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ChildId = b.ChildId
	}
	if b.G2GrandchildId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_G2GrandchildId = b.G2GrandchildId
	}
	return m0
}

type TestSingleKeyStruct_Embedded struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,1,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_Embedded) Reset() {
	*x = TestSingleKeyStruct_Embedded{}
	mi := &file_storage_test_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Embedded) ProtoMessage() {}

func (x *TestSingleKeyStruct_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_Embedded) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_Embedded) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleKeyStruct_Embedded) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_Embedded) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestSingleKeyStruct_Embedded_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestSingleKeyStruct_Embedded_builder) Build() *TestSingleKeyStruct_Embedded {
	m0 := &TestSingleKeyStruct_Embedded{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestSingleKeyStruct_Nested struct {
	state                  protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                             `protobuf:"bytes,1,opt,name=nested"`
	xxx_hidden_Nested2     *TestSingleKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_Nested) Reset() {
	*x = TestSingleKeyStruct_Nested{}
	mi := &file_storage_test_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Nested) ProtoMessage() {}

func (x *TestSingleKeyStruct_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_Nested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_Nested) GetNested2() *TestSingleKeyStruct_Nested_Nested2 {
	if x != nil {
		return x.xxx_hidden_Nested2
	}
	return nil
}

func (x *TestSingleKeyStruct_Nested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestSingleKeyStruct_Nested) SetNested2(v *TestSingleKeyStruct_Nested_Nested2) {
	x.xxx_hidden_Nested2 = v
}

func (x *TestSingleKeyStruct_Nested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_Nested) HasNested2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Nested2 != nil
}

func (x *TestSingleKeyStruct_Nested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

func (x *TestSingleKeyStruct_Nested) ClearNested2() {
	x.xxx_hidden_Nested2 = nil
}

type TestSingleKeyStruct_Nested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested  *string
	Nested2 *TestSingleKeyStruct_Nested_Nested2
}

func (b0 TestSingleKeyStruct_Nested_builder) Build() *TestSingleKeyStruct_Nested {
	m0 := &TestSingleKeyStruct_Nested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Nested = b.Nested
	}
	x.xxx_hidden_Nested2 = b.Nested2
	return m0
}

type TestSingleKeyStruct_OneOfNested struct {
	state                  protoimpl.MessageState                   `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                                  `protobuf:"bytes,1,opt,name=nested"`
	xxx_hidden_Nested2     *TestSingleKeyStruct_OneOfNested_Nested2 `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_OneOfNested) Reset() {
	*x = TestSingleKeyStruct_OneOfNested{}
	mi := &file_storage_test_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_OneOfNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_OneOfNested) ProtoMessage() {}

func (x *TestSingleKeyStruct_OneOfNested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_OneOfNested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_OneOfNested) GetNested2() *TestSingleKeyStruct_OneOfNested_Nested2 {
	if x != nil {
		return x.xxx_hidden_Nested2
	}
	return nil
}

func (x *TestSingleKeyStruct_OneOfNested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestSingleKeyStruct_OneOfNested) SetNested2(v *TestSingleKeyStruct_OneOfNested_Nested2) {
	x.xxx_hidden_Nested2 = v
}

func (x *TestSingleKeyStruct_OneOfNested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_OneOfNested) HasNested2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Nested2 != nil
}

func (x *TestSingleKeyStruct_OneOfNested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

func (x *TestSingleKeyStruct_OneOfNested) ClearNested2() {
	x.xxx_hidden_Nested2 = nil
}

type TestSingleKeyStruct_OneOfNested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested  *string
	Nested2 *TestSingleKeyStruct_OneOfNested_Nested2
}

func (b0 TestSingleKeyStruct_OneOfNested_builder) Build() *TestSingleKeyStruct_OneOfNested {
	m0 := &TestSingleKeyStruct_OneOfNested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Nested = b.Nested
	}
	x.xxx_hidden_Nested2 = b.Nested2
	return m0
}

type TestSingleKeyStruct_Embedded_Embedded2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,2,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) Reset() {
	*x = TestSingleKeyStruct_Embedded_Embedded2{}
	mi := &file_storage_test_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Embedded_Embedded2) ProtoMessage() {}

func (x *TestSingleKeyStruct_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_Embedded_Embedded2) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestSingleKeyStruct_Embedded_Embedded2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestSingleKeyStruct_Embedded_Embedded2_builder) Build() *TestSingleKeyStruct_Embedded_Embedded2 {
	m0 := &TestSingleKeyStruct_Embedded_Embedded2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestSingleKeyStruct_Nested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_Nested_Nested2) Reset() {
	*x = TestSingleKeyStruct_Nested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_Nested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_Nested_Nested2) ProtoMessage() {}

func (x *TestSingleKeyStruct_Nested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_Nested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_Nested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleKeyStruct_Nested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_Nested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

type TestSingleKeyStruct_Nested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2 *string
}

func (b0 TestSingleKeyStruct_Nested_Nested2_builder) Build() *TestSingleKeyStruct_Nested_Nested2 {
	m0 := &TestSingleKeyStruct_Nested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	return m0
}

type TestSingleKeyStruct_OneOfNested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) Reset() {
	*x = TestSingleKeyStruct_OneOfNested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleKeyStruct_OneOfNested_Nested2) ProtoMessage() {}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleKeyStruct_OneOfNested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

type TestSingleKeyStruct_OneOfNested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2 *string
}

func (b0 TestSingleKeyStruct_OneOfNested_Nested2_builder) Build() *TestSingleKeyStruct_OneOfNested_Nested2 {
	m0 := &TestSingleKeyStruct_OneOfNested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	return m0
}

type TestSingleUUIDKeyStruct_Embedded struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,1,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_Embedded) Reset() {
	*x = TestSingleUUIDKeyStruct_Embedded{}
	mi := &file_storage_test_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_Embedded) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_Embedded) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_Embedded) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleUUIDKeyStruct_Embedded) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_Embedded) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestSingleUUIDKeyStruct_Embedded_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestSingleUUIDKeyStruct_Embedded_builder) Build() *TestSingleUUIDKeyStruct_Embedded {
	m0 := &TestSingleUUIDKeyStruct_Embedded{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestSingleUUIDKeyStruct_Nested struct {
	state                  protoimpl.MessageState                  `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                                 `protobuf:"bytes,1,opt,name=nested"`
	xxx_hidden_Nested2     *TestSingleUUIDKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_Nested) Reset() {
	*x = TestSingleUUIDKeyStruct_Nested{}
	mi := &file_storage_test_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_Nested) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_Nested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_Nested) GetNested2() *TestSingleUUIDKeyStruct_Nested_Nested2 {
	if x != nil {
		return x.xxx_hidden_Nested2
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct_Nested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestSingleUUIDKeyStruct_Nested) SetNested2(v *TestSingleUUIDKeyStruct_Nested_Nested2) {
	x.xxx_hidden_Nested2 = v
}

func (x *TestSingleUUIDKeyStruct_Nested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_Nested) HasNested2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Nested2 != nil
}

func (x *TestSingleUUIDKeyStruct_Nested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

func (x *TestSingleUUIDKeyStruct_Nested) ClearNested2() {
	x.xxx_hidden_Nested2 = nil
}

type TestSingleUUIDKeyStruct_Nested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested  *string
	Nested2 *TestSingleUUIDKeyStruct_Nested_Nested2
}

func (b0 TestSingleUUIDKeyStruct_Nested_builder) Build() *TestSingleUUIDKeyStruct_Nested {
	m0 := &TestSingleUUIDKeyStruct_Nested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Nested = b.Nested
	}
	x.xxx_hidden_Nested2 = b.Nested2
	return m0
}

type TestSingleUUIDKeyStruct_OneOfNested struct {
	state                  protoimpl.MessageState                       `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                                      `protobuf:"bytes,1,opt,name=nested"`
	xxx_hidden_Nested2     *TestSingleUUIDKeyStruct_OneOfNested_Nested2 `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) Reset() {
	*x = TestSingleUUIDKeyStruct_OneOfNested{}
	mi := &file_storage_test_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_OneOfNested) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_OneOfNested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) GetNested2() *TestSingleUUIDKeyStruct_OneOfNested_Nested2 {
	if x != nil {
		return x.xxx_hidden_Nested2
	}
	return nil
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) SetNested2(v *TestSingleUUIDKeyStruct_OneOfNested_Nested2) {
	x.xxx_hidden_Nested2 = v
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) HasNested2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Nested2 != nil
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

func (x *TestSingleUUIDKeyStruct_OneOfNested) ClearNested2() {
	x.xxx_hidden_Nested2 = nil
}

type TestSingleUUIDKeyStruct_OneOfNested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested  *string
	Nested2 *TestSingleUUIDKeyStruct_OneOfNested_Nested2
}

func (b0 TestSingleUUIDKeyStruct_OneOfNested_builder) Build() *TestSingleUUIDKeyStruct_OneOfNested {
	m0 := &TestSingleUUIDKeyStruct_OneOfNested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Nested = b.Nested
	}
	x.xxx_hidden_Nested2 = b.Nested2
	return m0
}

type TestSingleUUIDKeyStruct_Embedded_Embedded2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,2,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) Reset() {
	*x = TestSingleUUIDKeyStruct_Embedded_Embedded2{}
	mi := &file_storage_test_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_Embedded_Embedded2) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_Embedded_Embedded2) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestSingleUUIDKeyStruct_Embedded_Embedded2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestSingleUUIDKeyStruct_Embedded_Embedded2_builder) Build() *TestSingleUUIDKeyStruct_Embedded_Embedded2 {
	m0 := &TestSingleUUIDKeyStruct_Embedded_Embedded2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestSingleUUIDKeyStruct_Nested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) Reset() {
	*x = TestSingleUUIDKeyStruct_Nested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_Nested_Nested2) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_Nested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

type TestSingleUUIDKeyStruct_Nested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2 *string
}

func (b0 TestSingleUUIDKeyStruct_Nested_Nested2_builder) Build() *TestSingleUUIDKeyStruct_Nested_Nested2 {
	m0 := &TestSingleUUIDKeyStruct_Nested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	return m0
}

type TestSingleUUIDKeyStruct_OneOfNested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Reset() {
	*x = TestSingleUUIDKeyStruct_OneOfNested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleUUIDKeyStruct_OneOfNested_Nested2) ProtoMessage() {}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestSingleUUIDKeyStruct_OneOfNested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

type TestSingleUUIDKeyStruct_OneOfNested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2 *string
}

func (b0 TestSingleUUIDKeyStruct_OneOfNested_Nested2_builder) Build() *TestSingleUUIDKeyStruct_OneOfNested_Nested2 {
	m0 := &TestSingleUUIDKeyStruct_OneOfNested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	return m0
}

type TestStruct_Embedded struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,1,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_Embedded) Reset() {
	*x = TestStruct_Embedded{}
	mi := &file_storage_test_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_Embedded) ProtoMessage() {}

func (x *TestStruct_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_Embedded) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestStruct_Embedded) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestStruct_Embedded) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_Embedded) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestStruct_Embedded_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestStruct_Embedded_builder) Build() *TestStruct_Embedded {
	m0 := &TestStruct_Embedded{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestStruct_Nested struct {
	state                  protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                    `protobuf:"bytes,1,opt,name=nested"`
	xxx_hidden_IsNested    bool                       `protobuf:"varint,3,opt,name=is_nested,json=isNested"`
	xxx_hidden_Int64       int64                      `protobuf:"varint,4,opt,name=int64"`
	xxx_hidden_Nested2     *TestStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_Nested) Reset() {
	*x = TestStruct_Nested{}
	mi := &file_storage_test_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_Nested) ProtoMessage() {}

func (x *TestStruct_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_Nested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestStruct_Nested) GetIsNested() bool {
	if x != nil {
		return x.xxx_hidden_IsNested
	}
	return false
}

func (x *TestStruct_Nested) GetInt64() int64 {
	if x != nil {
		return x.xxx_hidden_Int64
	}
	return 0
}

func (x *TestStruct_Nested) GetNested2() *TestStruct_Nested_Nested2 {
	if x != nil {
		return x.xxx_hidden_Nested2
	}
	return nil
}

func (x *TestStruct_Nested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestStruct_Nested) SetIsNested(v bool) {
	x.xxx_hidden_IsNested = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestStruct_Nested) SetInt64(v int64) {
	x.xxx_hidden_Int64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestStruct_Nested) SetNested2(v *TestStruct_Nested_Nested2) {
	x.xxx_hidden_Nested2 = v
}

func (x *TestStruct_Nested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_Nested) HasIsNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestStruct_Nested) HasInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestStruct_Nested) HasNested2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Nested2 != nil
}

func (x *TestStruct_Nested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

func (x *TestStruct_Nested) ClearIsNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_IsNested = false
}

func (x *TestStruct_Nested) ClearInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Int64 = 0
}

func (x *TestStruct_Nested) ClearNested2() {
	x.xxx_hidden_Nested2 = nil
}

type TestStruct_Nested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested   *string
	IsNested *bool
	Int64    *int64
	Nested2  *TestStruct_Nested_Nested2
}

func (b0 TestStruct_Nested_builder) Build() *TestStruct_Nested {
	m0 := &TestStruct_Nested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Nested = b.Nested
	}
	if b.IsNested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_IsNested = *b.IsNested
	}
	if b.Int64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Int64 = *b.Int64
	}
	x.xxx_hidden_Nested2 = b.Nested2
	return m0
}

type TestStruct_OneOfNested struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested      *string                `protobuf:"bytes,1,opt,name=nested"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_OneOfNested) Reset() {
	*x = TestStruct_OneOfNested{}
	mi := &file_storage_test_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_OneOfNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_OneOfNested) ProtoMessage() {}

func (x *TestStruct_OneOfNested) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_OneOfNested) GetNested() string {
	if x != nil {
		if x.xxx_hidden_Nested != nil {
			return *x.xxx_hidden_Nested
		}
		return ""
	}
	return ""
}

func (x *TestStruct_OneOfNested) SetNested(v string) {
	x.xxx_hidden_Nested = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestStruct_OneOfNested) HasNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_OneOfNested) ClearNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested = nil
}

type TestStruct_OneOfNested_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested *string
}

func (b0 TestStruct_OneOfNested_builder) Build() *TestStruct_OneOfNested {
	m0 := &TestStruct_OneOfNested{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested = b.Nested
	}
	return m0
}

type TestStruct_Embedded_Embedded2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Embedded    *string                `protobuf:"bytes,2,opt,name=embedded"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_Embedded_Embedded2) Reset() {
	*x = TestStruct_Embedded_Embedded2{}
	mi := &file_storage_test_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_Embedded_Embedded2) ProtoMessage() {}

func (x *TestStruct_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_Embedded_Embedded2) GetEmbedded() string {
	if x != nil {
		if x.xxx_hidden_Embedded != nil {
			return *x.xxx_hidden_Embedded
		}
		return ""
	}
	return ""
}

func (x *TestStruct_Embedded_Embedded2) SetEmbedded(v string) {
	x.xxx_hidden_Embedded = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestStruct_Embedded_Embedded2) HasEmbedded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_Embedded_Embedded2) ClearEmbedded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Embedded = nil
}

type TestStruct_Embedded_Embedded2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Embedded *string
}

func (b0 TestStruct_Embedded_Embedded2_builder) Build() *TestStruct_Embedded_Embedded2 {
	m0 := &TestStruct_Embedded_Embedded2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Embedded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Embedded = b.Embedded
	}
	return m0
}

type TestStruct_Nested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	xxx_hidden_IsNested    bool                   `protobuf:"varint,3,opt,name=is_nested,json=isNested"`
	xxx_hidden_Int64       int64                  `protobuf:"varint,4,opt,name=int64"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_Nested_Nested2) Reset() {
	*x = TestStruct_Nested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_Nested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_Nested_Nested2) ProtoMessage() {}

func (x *TestStruct_Nested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_Nested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestStruct_Nested_Nested2) GetIsNested() bool {
	if x != nil {
		return x.xxx_hidden_IsNested
	}
	return false
}

func (x *TestStruct_Nested_Nested2) GetInt64() int64 {
	if x != nil {
		return x.xxx_hidden_Int64
	}
	return 0
}

func (x *TestStruct_Nested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *TestStruct_Nested_Nested2) SetIsNested(v bool) {
	x.xxx_hidden_IsNested = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestStruct_Nested_Nested2) SetInt64(v int64) {
	x.xxx_hidden_Int64 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestStruct_Nested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_Nested_Nested2) HasIsNested() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestStruct_Nested_Nested2) HasInt64() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestStruct_Nested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

func (x *TestStruct_Nested_Nested2) ClearIsNested() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_IsNested = false
}

func (x *TestStruct_Nested_Nested2) ClearInt64() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Int64 = 0
}

type TestStruct_Nested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2  *string
	IsNested *bool
	Int64    *int64
}

func (b0 TestStruct_Nested_Nested2_builder) Build() *TestStruct_Nested_Nested2 {
	m0 := &TestStruct_Nested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	if b.IsNested != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_IsNested = *b.IsNested
	}
	if b.Int64 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Int64 = *b.Int64
	}
	return m0
}

type TestStruct_OneOfNested_Nested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nested2     *string                `protobuf:"bytes,2,opt,name=nested2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestStruct_OneOfNested_Nested2) Reset() {
	*x = TestStruct_OneOfNested_Nested2{}
	mi := &file_storage_test_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct_OneOfNested_Nested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct_OneOfNested_Nested2) ProtoMessage() {}

func (x *TestStruct_OneOfNested_Nested2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestStruct_OneOfNested_Nested2) GetNested2() string {
	if x != nil {
		if x.xxx_hidden_Nested2 != nil {
			return *x.xxx_hidden_Nested2
		}
		return ""
	}
	return ""
}

func (x *TestStruct_OneOfNested_Nested2) SetNested2(v string) {
	x.xxx_hidden_Nested2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestStruct_OneOfNested_Nested2) HasNested2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestStruct_OneOfNested_Nested2) ClearNested2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Nested2 = nil
}

type TestStruct_OneOfNested_Nested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested2 *string
}

func (b0 TestStruct_OneOfNested_Nested2_builder) Build() *TestStruct_OneOfNested_Nested2 {
	m0 := &TestStruct_OneOfNested_Nested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nested2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Nested2 = b.Nested2
	}
	return m0
}

type TestGrandparent_Embedded struct {
	state                  protoimpl.MessageState                 `protogen:"opaque.v1"`
	xxx_hidden_Val         *string                                `protobuf:"bytes,1,opt,name=val"`
	xxx_hidden_Embedded2   *[]*TestGrandparent_Embedded_Embedded2 `protobuf:"bytes,2,rep,name=embedded2"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestGrandparent_Embedded) Reset() {
	*x = TestGrandparent_Embedded{}
	mi := &file_storage_test_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGrandparent_Embedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent_Embedded) ProtoMessage() {}

func (x *TestGrandparent_Embedded) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestGrandparent_Embedded) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestGrandparent_Embedded) GetEmbedded2() []*TestGrandparent_Embedded_Embedded2 {
	if x != nil {
		if x.xxx_hidden_Embedded2 != nil {
			return *x.xxx_hidden_Embedded2
		}
	}
	return nil
}

func (x *TestGrandparent_Embedded) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestGrandparent_Embedded) SetEmbedded2(v []*TestGrandparent_Embedded_Embedded2) {
	x.xxx_hidden_Embedded2 = &v
}

func (x *TestGrandparent_Embedded) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestGrandparent_Embedded) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Val = nil
}

type TestGrandparent_Embedded_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Val       *string
	Embedded2 []*TestGrandparent_Embedded_Embedded2
}

func (b0 TestGrandparent_Embedded_builder) Build() *TestGrandparent_Embedded {
	m0 := &TestGrandparent_Embedded{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Val = b.Val
	}
	x.xxx_hidden_Embedded2 = &b.Embedded2
	return m0
}

type TestGrandparent_Embedded_Embedded2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Val         *string                `protobuf:"bytes,1,opt,name=val"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestGrandparent_Embedded_Embedded2) Reset() {
	*x = TestGrandparent_Embedded_Embedded2{}
	mi := &file_storage_test_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGrandparent_Embedded_Embedded2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGrandparent_Embedded_Embedded2) ProtoMessage() {}

func (x *TestGrandparent_Embedded_Embedded2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestGrandparent_Embedded_Embedded2) GetVal() string {
	if x != nil {
		if x.xxx_hidden_Val != nil {
			return *x.xxx_hidden_Val
		}
		return ""
	}
	return ""
}

func (x *TestGrandparent_Embedded_Embedded2) SetVal(v string) {
	x.xxx_hidden_Val = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestGrandparent_Embedded_Embedded2) HasVal() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestGrandparent_Embedded_Embedded2) ClearVal() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Val = nil
}

type TestGrandparent_Embedded_Embedded2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Val *string
}

func (b0 TestGrandparent_Embedded_Embedded2_builder) Build() *TestGrandparent_Embedded_Embedded2 {
	m0 := &TestGrandparent_Embedded_Embedded2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Val != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Val = b.Val
	}
	return m0
}

type TestParent1_Child1Ref struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ChildId     *string                `protobuf:"bytes,1,opt,name=child_id,json=childId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestParent1_Child1Ref) Reset() {
	*x = TestParent1_Child1Ref{}
	mi := &file_storage_test_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestParent1_Child1Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestParent1_Child1Ref) ProtoMessage() {}

func (x *TestParent1_Child1Ref) ProtoReflect() protoreflect.Message {
	mi := &file_storage_test_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestParent1_Child1Ref) GetChildId() string {
	if x != nil {
		if x.xxx_hidden_ChildId != nil {
			return *x.xxx_hidden_ChildId
		}
		return ""
	}
	return ""
}

func (x *TestParent1_Child1Ref) SetChildId(v string) {
	x.xxx_hidden_ChildId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestParent1_Child1Ref) HasChildId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestParent1_Child1Ref) ClearChildId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ChildId = nil
}

type TestParent1_Child1Ref_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ChildId *string
}

func (b0 TestParent1_Child1Ref_builder) Build() *TestParent1_Child1Ref {
	m0 := &TestParent1_Child1Ref{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ChildId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_ChildId = b.ChildId
	}
	return m0
}

var File_storage_test_proto protoreflect.FileDescriptor

const file_storage_test_proto_rawDesc = "" +
	"\n" +
	"\x12storage/test.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x92\t\n" +
	"\x13TestSingleKeyStruct\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fstring_slice\x18\x03 \x03(\tR\vstringSlice\x12\x12\n" +
	"\x04bool\x18\x04 \x01(\bR\x04bool\x12\x16\n" +
	"\x06uint64\x18\x05 \x01(\x04R\x06uint64\x12\x14\n" +
	"\x05int64\x18\x06 \x01(\x03R\x05int64\x12\x14\n" +
	"\x05float\x18\a \x01(\x02R\x05float\x12@\n" +
	"\x06labels\x18\b \x03(\v2(.storage.TestSingleKeyStruct.LabelsEntryR\x06labels\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\x04enum\x18\n" +
	" \x01(\x0e2!.storage.TestSingleKeyStruct.EnumR\x04enum\x127\n" +
	"\x05enums\x18\v \x03(\x0e2!.storage.TestSingleKeyStruct.EnumR\x05enums\x12A\n" +
	"\bembedded\x18\f \x01(\v2%.storage.TestSingleKeyStruct.EmbeddedR\bembedded\x12;\n" +
	"\x06nested\x18\r \x03(\v2#.storage.TestSingleKeyStruct.NestedR\x06nested\x12\"\n" +
	"\voneofstring\x18\x0e \x01(\tH\x00R\voneofstring\x12L\n" +
	"\voneofnested\x18\x0f \x01(\v2(.storage.TestSingleKeyStruct.OneOfNestedH\x00R\voneofnested\x12\x16\n" +
	"\x06bytess\x18\x10 \x01(\fR\x06bytess\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aO\n" +
	"\bEmbedded\x12\x1a\n" +
	"\bembedded\x18\x01 \x01(\tR\bembedded\x1a'\n" +
	"\tEmbedded2\x12\x1a\n" +
	"\bembedded\x18\x02 \x01(\tR\bembedded\x1a\x8c\x01\n" +
	"\x06Nested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x12E\n" +
	"\anested2\x18\x02 \x01(\v2+.storage.TestSingleKeyStruct.Nested.Nested2R\anested2\x1a#\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\x1a\x96\x01\n" +
	"\vOneOfNested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x12J\n" +
	"\anested2\x18\x02 \x01(\v20.storage.TestSingleKeyStruct.OneOfNested.Nested2R\anested2\x1a#\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\"'\n" +
	"\x04Enum\x12\t\n" +
	"\x05ENUM0\x10\x00\x12\t\n" +
	"\x05ENUM1\x10\x01\x12\t\n" +
	"\x05ENUM2\x10\x02B\a\n" +
	"\x05oneof\"\x95\n" +
	"\n" +
	"\x17TestSingleUUIDKeyStruct\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fstring_slice\x18\x03 \x03(\tR\vstringSlice\x12\x12\n" +
	"\x04bool\x18\x04 \x01(\bR\x04bool\x12\x16\n" +
	"\x06uint64\x18\x05 \x01(\x04R\x06uint64\x12\x14\n" +
	"\x05int64\x18\x06 \x01(\x03R\x05int64\x12\x14\n" +
	"\x05float\x18\a \x01(\x02R\x05float\x12D\n" +
	"\x06labels\x18\b \x03(\v2,.storage.TestSingleUUIDKeyStruct.LabelsEntryR\x06labels\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x129\n" +
	"\x04enum\x18\n" +
	" \x01(\x0e2%.storage.TestSingleUUIDKeyStruct.EnumR\x04enum\x12;\n" +
	"\x05enums\x18\v \x03(\x0e2%.storage.TestSingleUUIDKeyStruct.EnumR\x05enums\x12E\n" +
	"\bembedded\x18\f \x01(\v2).storage.TestSingleUUIDKeyStruct.EmbeddedR\bembedded\x12?\n" +
	"\x06nested\x18\r \x03(\v2'.storage.TestSingleUUIDKeyStruct.NestedR\x06nested\x12\"\n" +
	"\voneofstring\x18\x0e \x01(\tH\x00R\voneofstring\x12P\n" +
	"\voneofnested\x18\x0f \x01(\v2,.storage.TestSingleUUIDKeyStruct.OneOfNestedH\x00R\voneofnested\x12\x16\n" +
	"\x06bytess\x18\x10 \x01(\fR\x06bytess\x12*\n" +
	"\x10oneof_two_string\x18\x11 \x01(\tH\x01R\x0eoneofTwoString\x12$\n" +
	"\roneof_two_int\x18\x12 \x01(\x03H\x01R\voneofTwoInt\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aO\n" +
	"\bEmbedded\x12\x1a\n" +
	"\bembedded\x18\x01 \x01(\tR\bembedded\x1a'\n" +
	"\tEmbedded2\x12\x1a\n" +
	"\bembedded\x18\x02 \x01(\tR\bembedded\x1a\x90\x01\n" +
	"\x06Nested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x12I\n" +
	"\anested2\x18\x02 \x01(\v2/.storage.TestSingleUUIDKeyStruct.Nested.Nested2R\anested2\x1a#\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\x1a\x9a\x01\n" +
	"\vOneOfNested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x12N\n" +
	"\anested2\x18\x02 \x01(\v24.storage.TestSingleUUIDKeyStruct.OneOfNested.Nested2R\anested2\x1a#\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\"'\n" +
	"\x04Enum\x12\t\n" +
	"\x05ENUM0\x10\x00\x12\t\n" +
	"\x05ENUM1\x10\x01\x12\t\n" +
	"\x05ENUM2\x10\x02B\a\n" +
	"\x05oneofB\v\n" +
	"\toneof_two\"\xbc\t\n" +
	"\n" +
	"TestStruct\x12\x12\n" +
	"\x04key1\x18\x01 \x01(\tR\x04key1\x12\x12\n" +
	"\x04key2\x18\x02 \x01(\tR\x04key2\x12!\n" +
	"\fstring_slice\x18\x03 \x03(\tR\vstringSlice\x12\x12\n" +
	"\x04bool\x18\x04 \x01(\bR\x04bool\x12\x16\n" +
	"\x06uint64\x18\x05 \x01(\x04R\x06uint64\x12\x14\n" +
	"\x05int64\x18\x06 \x01(\x03R\x05int64\x12\x14\n" +
	"\x05float\x18\a \x01(\x02R\x05float\x127\n" +
	"\x06labels\x18\b \x03(\v2\x1f.storage.TestStruct.LabelsEntryR\x06labels\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12,\n" +
	"\x04enum\x18\n" +
	" \x01(\x0e2\x18.storage.TestStruct.EnumR\x04enum\x12.\n" +
	"\x05enums\x18\v \x03(\x0e2\x18.storage.TestStruct.EnumR\x05enums\x12\x16\n" +
	"\x06string\x18\x10 \x01(\tR\x06string\x124\n" +
	"\x14int_slice_deprecated\x18\x11 \x03(\x03B\x02\x18\x01R\x12intSliceDeprecated\x12\x1f\n" +
	"\vint32_slice\x18\x12 \x03(\x05R\n" +
	"int32Slice\x128\n" +
	"\bembedded\x18\f \x01(\v2\x1c.storage.TestStruct.EmbeddedR\bembedded\x122\n" +
	"\x06nested\x18\r \x03(\v2\x1a.storage.TestStruct.NestedR\x06nested\x12\"\n" +
	"\voneofstring\x18\x0e \x01(\tH\x00R\voneofstring\x12C\n" +
	"\voneofnested\x18\x0f \x01(\v2\x1f.storage.TestStruct.OneOfNestedH\x00R\voneofnested\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aO\n" +
	"\bEmbedded\x12\x1a\n" +
	"\bembedded\x18\x01 \x01(\tR\bembedded\x1a'\n" +
	"\tEmbedded2\x12\x1a\n" +
	"\bembedded\x18\x02 \x01(\tR\bembedded\x1a\xe9\x01\n" +
	"\x06Nested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x12\x1b\n" +
	"\tis_nested\x18\x03 \x01(\bR\bisNested\x12\x14\n" +
	"\x05int64\x18\x04 \x01(\x03R\x05int64\x12<\n" +
	"\anested2\x18\x02 \x01(\v2\".storage.TestStruct.Nested.Nested2R\anested2\x1aV\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\x12\x1b\n" +
	"\tis_nested\x18\x03 \x01(\bR\bisNested\x12\x14\n" +
	"\x05int64\x18\x04 \x01(\x03R\x05int64\x1aJ\n" +
	"\vOneOfNested\x12\x16\n" +
	"\x06nested\x18\x01 \x01(\tR\x06nested\x1a#\n" +
	"\aNested2\x12\x18\n" +
	"\anested2\x18\x02 \x01(\tR\anested2\"'\n" +
	"\x04Enum\x12\t\n" +
	"\x05ENUM0\x10\x00\x12\t\n" +
	"\x05ENUM1\x10\x01\x12\t\n" +
	"\x05ENUM2\x10\x02B\a\n" +
	"\x05oneof\"\xb6\x02\n" +
	"\x0fTestGrandparent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03val\x18\x02 \x01(\tR\x03val\x12=\n" +
	"\bembedded\x18\x03 \x03(\v2!.storage.TestGrandparent.EmbeddedR\bembedded\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x03R\bpriority\x12\x1d\n" +
	"\n" +
	"risk_score\x18\x05 \x01(\x02R\triskScore\x1a\x86\x01\n" +
	"\bEmbedded\x12\x10\n" +
	"\x03val\x18\x01 \x01(\tR\x03val\x12I\n" +
	"\tembedded2\x18\x02 \x03(\v2+.storage.TestGrandparent.Embedded.Embedded2R\tembedded2\x1a\x1d\n" +
	"\tEmbedded2\x12\x10\n" +
	"\x03val\x18\x01 \x01(\tR\x03val\"\xd3\x01\n" +
	"\vTestParent1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12:\n" +
	"\bchildren\x18\x03 \x03(\v2\x1e.storage.TestParent1.Child1RefR\bchildren\x12\x10\n" +
	"\x03val\x18\x04 \x01(\tR\x03val\x12!\n" +
	"\fstring_slice\x18\x05 \x03(\tR\vstringSlice\x1a&\n" +
	"\tChild1Ref\x12\x19\n" +
	"\bchild_id\x18\x01 \x01(\tR\achildId\".\n" +
	"\n" +
	"TestChild1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03val\x18\x02 \x01(\tR\x03val\"k\n" +
	"\x0fTestGrandChild1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x19\n" +
	"\bchild_id\x18\x03 \x01(\tR\achildId\x12\x10\n" +
	"\x03val\x18\x04 \x01(\tR\x03val\"4\n" +
	"\x10TestGGrandChild1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03val\x18\x02 \x01(\tR\x03val\"m\n" +
	"\x11TestG2GrandChild1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x19\n" +
	"\bchild_id\x18\x03 \x01(\tR\achildId\x12\x10\n" +
	"\x03val\x18\x04 \x01(\tR\x03val\"5\n" +
	"\x11TestG3GrandChild1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03val\x18\x02 \x01(\tR\x03val\"L\n" +
	"\vTestParent2\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x10\n" +
	"\x03val\x18\x03 \x01(\tR\x03val\"r\n" +
	"\n" +
	"TestChild2\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12%\n" +
	"\x0egrandparent_id\x18\x03 \x01(\tR\rgrandparentId\x12\x10\n" +
	"\x03val\x18\x04 \x01(\tR\x03val\"L\n" +
	"\vTestParent3\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x10\n" +
	"\x03val\x18\x03 \x01(\tR\x03val\"L\n" +
	"\vTestParent4\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x10\n" +
	"\x03val\x18\x03 \x01(\tR\x03val\"M\n" +
	"\fTestChild1P4\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x10\n" +
	"\x03val\x18\x03 \x01(\tR\x03val\"g\n" +
	"\x10TestShortCircuit\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bchild_id\x18\x02 \x01(\tR\achildId\x12(\n" +
	"\x10g2_grandchild_id\x18\x03 \x01(\tR\x0eg2GrandchildIdB9\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\xf8\x01\x01\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_test_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_storage_test_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_storage_test_proto_goTypes = []any{
	(TestSingleKeyStruct_Enum)(0),                   // 0: storage.TestSingleKeyStruct.Enum
	(TestSingleUUIDKeyStruct_Enum)(0),               // 1: storage.TestSingleUUIDKeyStruct.Enum
	(TestStruct_Enum)(0),                            // 2: storage.TestStruct.Enum
	(*TestSingleKeyStruct)(nil),                     // 3: storage.TestSingleKeyStruct
	(*TestSingleUUIDKeyStruct)(nil),                 // 4: storage.TestSingleUUIDKeyStruct
	(*TestStruct)(nil),                              // 5: storage.TestStruct
	(*TestGrandparent)(nil),                         // 6: storage.TestGrandparent
	(*TestParent1)(nil),                             // 7: storage.TestParent1
	(*TestChild1)(nil),                              // 8: storage.TestChild1
	(*TestGrandChild1)(nil),                         // 9: storage.TestGrandChild1
	(*TestGGrandChild1)(nil),                        // 10: storage.TestGGrandChild1
	(*TestG2GrandChild1)(nil),                       // 11: storage.TestG2GrandChild1
	(*TestG3GrandChild1)(nil),                       // 12: storage.TestG3GrandChild1
	(*TestParent2)(nil),                             // 13: storage.TestParent2
	(*TestChild2)(nil),                              // 14: storage.TestChild2
	(*TestParent3)(nil),                             // 15: storage.TestParent3
	(*TestParent4)(nil),                             // 16: storage.TestParent4
	(*TestChild1P4)(nil),                            // 17: storage.TestChild1P4
	(*TestShortCircuit)(nil),                        // 18: storage.TestShortCircuit
	nil,                                             // 19: storage.TestSingleKeyStruct.LabelsEntry
	(*TestSingleKeyStruct_Embedded)(nil),            // 20: storage.TestSingleKeyStruct.Embedded
	(*TestSingleKeyStruct_Nested)(nil),              // 21: storage.TestSingleKeyStruct.Nested
	(*TestSingleKeyStruct_OneOfNested)(nil),         // 22: storage.TestSingleKeyStruct.OneOfNested
	(*TestSingleKeyStruct_Embedded_Embedded2)(nil),  // 23: storage.TestSingleKeyStruct.Embedded.Embedded2
	(*TestSingleKeyStruct_Nested_Nested2)(nil),      // 24: storage.TestSingleKeyStruct.Nested.Nested2
	(*TestSingleKeyStruct_OneOfNested_Nested2)(nil), // 25: storage.TestSingleKeyStruct.OneOfNested.Nested2
	nil,                                      // 26: storage.TestSingleUUIDKeyStruct.LabelsEntry
	(*TestSingleUUIDKeyStruct_Embedded)(nil), // 27: storage.TestSingleUUIDKeyStruct.Embedded
	(*TestSingleUUIDKeyStruct_Nested)(nil),   // 28: storage.TestSingleUUIDKeyStruct.Nested
	(*TestSingleUUIDKeyStruct_OneOfNested)(nil),         // 29: storage.TestSingleUUIDKeyStruct.OneOfNested
	(*TestSingleUUIDKeyStruct_Embedded_Embedded2)(nil),  // 30: storage.TestSingleUUIDKeyStruct.Embedded.Embedded2
	(*TestSingleUUIDKeyStruct_Nested_Nested2)(nil),      // 31: storage.TestSingleUUIDKeyStruct.Nested.Nested2
	(*TestSingleUUIDKeyStruct_OneOfNested_Nested2)(nil), // 32: storage.TestSingleUUIDKeyStruct.OneOfNested.Nested2
	nil,                                        // 33: storage.TestStruct.LabelsEntry
	(*TestStruct_Embedded)(nil),                // 34: storage.TestStruct.Embedded
	(*TestStruct_Nested)(nil),                  // 35: storage.TestStruct.Nested
	(*TestStruct_OneOfNested)(nil),             // 36: storage.TestStruct.OneOfNested
	(*TestStruct_Embedded_Embedded2)(nil),      // 37: storage.TestStruct.Embedded.Embedded2
	(*TestStruct_Nested_Nested2)(nil),          // 38: storage.TestStruct.Nested.Nested2
	(*TestStruct_OneOfNested_Nested2)(nil),     // 39: storage.TestStruct.OneOfNested.Nested2
	(*TestGrandparent_Embedded)(nil),           // 40: storage.TestGrandparent.Embedded
	(*TestGrandparent_Embedded_Embedded2)(nil), // 41: storage.TestGrandparent.Embedded.Embedded2
	(*TestParent1_Child1Ref)(nil),              // 42: storage.TestParent1.Child1Ref
	(*timestamppb.Timestamp)(nil),              // 43: google.protobuf.Timestamp
}
var file_storage_test_proto_depIdxs = []int32{
	19, // 0: storage.TestSingleKeyStruct.labels:type_name -> storage.TestSingleKeyStruct.LabelsEntry
	43, // 1: storage.TestSingleKeyStruct.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: storage.TestSingleKeyStruct.enum:type_name -> storage.TestSingleKeyStruct.Enum
	0,  // 3: storage.TestSingleKeyStruct.enums:type_name -> storage.TestSingleKeyStruct.Enum
	20, // 4: storage.TestSingleKeyStruct.embedded:type_name -> storage.TestSingleKeyStruct.Embedded
	21, // 5: storage.TestSingleKeyStruct.nested:type_name -> storage.TestSingleKeyStruct.Nested
	22, // 6: storage.TestSingleKeyStruct.oneofnested:type_name -> storage.TestSingleKeyStruct.OneOfNested
	26, // 7: storage.TestSingleUUIDKeyStruct.labels:type_name -> storage.TestSingleUUIDKeyStruct.LabelsEntry
	43, // 8: storage.TestSingleUUIDKeyStruct.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 9: storage.TestSingleUUIDKeyStruct.enum:type_name -> storage.TestSingleUUIDKeyStruct.Enum
	1,  // 10: storage.TestSingleUUIDKeyStruct.enums:type_name -> storage.TestSingleUUIDKeyStruct.Enum
	27, // 11: storage.TestSingleUUIDKeyStruct.embedded:type_name -> storage.TestSingleUUIDKeyStruct.Embedded
	28, // 12: storage.TestSingleUUIDKeyStruct.nested:type_name -> storage.TestSingleUUIDKeyStruct.Nested
	29, // 13: storage.TestSingleUUIDKeyStruct.oneofnested:type_name -> storage.TestSingleUUIDKeyStruct.OneOfNested
	33, // 14: storage.TestStruct.labels:type_name -> storage.TestStruct.LabelsEntry
	43, // 15: storage.TestStruct.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 16: storage.TestStruct.enum:type_name -> storage.TestStruct.Enum
	2,  // 17: storage.TestStruct.enums:type_name -> storage.TestStruct.Enum
	34, // 18: storage.TestStruct.embedded:type_name -> storage.TestStruct.Embedded
	35, // 19: storage.TestStruct.nested:type_name -> storage.TestStruct.Nested
	36, // 20: storage.TestStruct.oneofnested:type_name -> storage.TestStruct.OneOfNested
	40, // 21: storage.TestGrandparent.embedded:type_name -> storage.TestGrandparent.Embedded
	42, // 22: storage.TestParent1.children:type_name -> storage.TestParent1.Child1Ref
	24, // 23: storage.TestSingleKeyStruct.Nested.nested2:type_name -> storage.TestSingleKeyStruct.Nested.Nested2
	25, // 24: storage.TestSingleKeyStruct.OneOfNested.nested2:type_name -> storage.TestSingleKeyStruct.OneOfNested.Nested2
	31, // 25: storage.TestSingleUUIDKeyStruct.Nested.nested2:type_name -> storage.TestSingleUUIDKeyStruct.Nested.Nested2
	32, // 26: storage.TestSingleUUIDKeyStruct.OneOfNested.nested2:type_name -> storage.TestSingleUUIDKeyStruct.OneOfNested.Nested2
	38, // 27: storage.TestStruct.Nested.nested2:type_name -> storage.TestStruct.Nested.Nested2
	41, // 28: storage.TestGrandparent.Embedded.embedded2:type_name -> storage.TestGrandparent.Embedded.Embedded2
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_storage_test_proto_init() }
func file_storage_test_proto_init() {
	if File_storage_test_proto != nil {
		return
	}
	file_storage_test_proto_msgTypes[0].OneofWrappers = []any{
		(*testSingleKeyStruct_Oneofstring)(nil),
		(*testSingleKeyStruct_Oneofnested)(nil),
	}
	file_storage_test_proto_msgTypes[1].OneofWrappers = []any{
		(*testSingleUUIDKeyStruct_Oneofstring)(nil),
		(*testSingleUUIDKeyStruct_Oneofnested)(nil),
		(*testSingleUUIDKeyStruct_OneofTwoString)(nil),
		(*testSingleUUIDKeyStruct_OneofTwoInt)(nil),
	}
	file_storage_test_proto_msgTypes[2].OneofWrappers = []any{
		(*testStruct_Oneofstring)(nil),
		(*testStruct_Oneofnested)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_test_proto_rawDesc), len(file_storage_test_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_test_proto_goTypes,
		DependencyIndexes: file_storage_test_proto_depIdxs,
		EnumInfos:         file_storage_test_proto_enumTypes,
		MessageInfos:      file_storage_test_proto_msgTypes,
	}.Build()
	File_storage_test_proto = out.File
	file_storage_test_proto_goTypes = nil
	file_storage_test_proto_depIdxs = nil
}
