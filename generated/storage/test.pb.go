// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/test.proto

package storage

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestSingleKeyStruct_Enum int32

const (
	TestSingleKeyStruct_ENUM0 TestSingleKeyStruct_Enum = 0
	TestSingleKeyStruct_ENUM1 TestSingleKeyStruct_Enum = 1
	TestSingleKeyStruct_ENUM2 TestSingleKeyStruct_Enum = 2
)

var TestSingleKeyStruct_Enum_name = map[int32]string{
	0: "ENUM0",
	1: "ENUM1",
	2: "ENUM2",
}

var TestSingleKeyStruct_Enum_value = map[string]int32{
	"ENUM0": 0,
	"ENUM1": 1,
	"ENUM2": 2,
}

func (x TestSingleKeyStruct_Enum) String() string {
	return proto.EnumName(TestSingleKeyStruct_Enum_name, int32(x))
}

func (TestSingleKeyStruct_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 0}
}

type TestSingleUUIDKeyStruct_Enum int32

const (
	TestSingleUUIDKeyStruct_ENUM0 TestSingleUUIDKeyStruct_Enum = 0
	TestSingleUUIDKeyStruct_ENUM1 TestSingleUUIDKeyStruct_Enum = 1
	TestSingleUUIDKeyStruct_ENUM2 TestSingleUUIDKeyStruct_Enum = 2
)

var TestSingleUUIDKeyStruct_Enum_name = map[int32]string{
	0: "ENUM0",
	1: "ENUM1",
	2: "ENUM2",
}

var TestSingleUUIDKeyStruct_Enum_value = map[string]int32{
	"ENUM0": 0,
	"ENUM1": 1,
	"ENUM2": 2,
}

func (x TestSingleUUIDKeyStruct_Enum) String() string {
	return proto.EnumName(TestSingleUUIDKeyStruct_Enum_name, int32(x))
}

func (TestSingleUUIDKeyStruct_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 0}
}

type TestMultiKeyStruct_Enum int32

const (
	TestMultiKeyStruct_ENUM0 TestMultiKeyStruct_Enum = 0
	TestMultiKeyStruct_ENUM1 TestMultiKeyStruct_Enum = 1
	TestMultiKeyStruct_ENUM2 TestMultiKeyStruct_Enum = 2
)

var TestMultiKeyStruct_Enum_name = map[int32]string{
	0: "ENUM0",
	1: "ENUM1",
	2: "ENUM2",
}

var TestMultiKeyStruct_Enum_value = map[string]int32{
	"ENUM0": 0,
	"ENUM1": 1,
	"ENUM2": 2,
}

func (x TestMultiKeyStruct_Enum) String() string {
	return proto.EnumName(TestMultiKeyStruct_Enum_name, int32(x))
}

func (TestMultiKeyStruct_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 0}
}

type TestSingleKeyStruct struct {
	Key         string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" sql:"pk,index=hash" search:"Test Key"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:"unique" search:"Test Name"`
	StringSlice []string `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty" search:"Test String Slice"`
	Bool        bool     `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty" search:"Test Bool"`
	// When using this ensure your precision needs are met and accounted for.  This will use a
	// BigInt which may require you to convert from uint64 to int64 OR update
	// the handling to use numerics.
	Uint64    uint64                        `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty" search:"Test Uint64"`
	Int64     int64                         `protobuf:"varint,6,opt,name=int64,proto3" json:"int64,omitempty" search:"Test Int64"`
	Float     float32                       `protobuf:"fixed32,7,opt,name=float,proto3" json:"float,omitempty" search:"Test Float"`
	Labels    map[string]string             `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" search:"Test Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp *types.Timestamp              `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty" search:"Test Timestamp"`
	Enum      TestSingleKeyStruct_Enum      `protobuf:"varint,10,opt,name=enum,proto3,enum=storage.TestSingleKeyStruct_Enum" json:"enum,omitempty" search:"Test Enum"`
	Enums     []TestSingleKeyStruct_Enum    `protobuf:"varint,11,rep,packed,name=enums,proto3,enum=storage.TestSingleKeyStruct_Enum" json:"enums,omitempty" search:"Test Enum Slice"`
	Embedded  *TestSingleKeyStruct_Embedded `protobuf:"bytes,12,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Nested    []*TestSingleKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested,proto3" json:"nested,omitempty"`
	// Types that are valid to be assigned to Oneof:
	//	*TestSingleKeyStruct_Oneofstring
	//	*TestSingleKeyStruct_Oneofnested
	Oneof                isTestSingleKeyStruct_Oneof `protobuf_oneof:"oneof"`
	Bytess               []byte                      `protobuf:"bytes,16,opt,name=bytess,proto3" json:"bytess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TestSingleKeyStruct) Reset()         { *m = TestSingleKeyStruct{} }
func (m *TestSingleKeyStruct) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct) ProtoMessage()    {}
func (*TestSingleKeyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0}
}
func (m *TestSingleKeyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct.Merge(m, src)
}
func (m *TestSingleKeyStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct proto.InternalMessageInfo

type isTestSingleKeyStruct_Oneof interface {
	isTestSingleKeyStruct_Oneof()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isTestSingleKeyStruct_Oneof
}

type TestSingleKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,proto3,oneof" json:"oneofstring,omitempty"`
}
type TestSingleKeyStruct_Oneofnested struct {
	Oneofnested *TestSingleKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,proto3,oneof" json:"oneofnested,omitempty"`
}

func (*TestSingleKeyStruct_Oneofstring) isTestSingleKeyStruct_Oneof() {}
func (m *TestSingleKeyStruct_Oneofstring) Clone() isTestSingleKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Oneofstring)
	*cloned = *m

	return cloned
}
func (*TestSingleKeyStruct_Oneofnested) isTestSingleKeyStruct_Oneof() {}
func (m *TestSingleKeyStruct_Oneofnested) Clone() isTestSingleKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Oneofnested)
	*cloned = *m

	cloned.Oneofnested = m.Oneofnested.Clone()
	return cloned
}

func (m *TestSingleKeyStruct) GetOneof() isTestSingleKeyStruct_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (m *TestSingleKeyStruct) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TestSingleKeyStruct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestSingleKeyStruct) GetStringSlice() []string {
	if m != nil {
		return m.StringSlice
	}
	return nil
}

func (m *TestSingleKeyStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *TestSingleKeyStruct) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *TestSingleKeyStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestSingleKeyStruct) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *TestSingleKeyStruct) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TestSingleKeyStruct) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TestSingleKeyStruct) GetEnum() TestSingleKeyStruct_Enum {
	if m != nil {
		return m.Enum
	}
	return TestSingleKeyStruct_ENUM0
}

func (m *TestSingleKeyStruct) GetEnums() []TestSingleKeyStruct_Enum {
	if m != nil {
		return m.Enums
	}
	return nil
}

func (m *TestSingleKeyStruct) GetEmbedded() *TestSingleKeyStruct_Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *TestSingleKeyStruct) GetNested() []*TestSingleKeyStruct_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *TestSingleKeyStruct) GetOneofstring() string {
	if x, ok := m.GetOneof().(*TestSingleKeyStruct_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (m *TestSingleKeyStruct) GetOneofnested() *TestSingleKeyStruct_OneOfNested {
	if x, ok := m.GetOneof().(*TestSingleKeyStruct_Oneofnested); ok {
		return x.Oneofnested
	}
	return nil
}

func (m *TestSingleKeyStruct) GetBytess() []byte {
	if m != nil {
		return m.Bytess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestSingleKeyStruct) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestSingleKeyStruct_Oneofstring)(nil),
		(*TestSingleKeyStruct_Oneofnested)(nil),
	}
}

func (m *TestSingleKeyStruct) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct) Clone() *TestSingleKeyStruct {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct)
	*cloned = *m

	if m.StringSlice != nil {
		cloned.StringSlice = make([]string, len(m.StringSlice))
		copy(cloned.StringSlice, m.StringSlice)
	}
	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	cloned.Timestamp = m.Timestamp.Clone()
	if m.Enums != nil {
		cloned.Enums = make([]TestSingleKeyStruct_Enum, len(m.Enums))
		copy(cloned.Enums, m.Enums)
	}
	cloned.Embedded = m.Embedded.Clone()
	if m.Nested != nil {
		cloned.Nested = make([]*TestSingleKeyStruct_Nested, len(m.Nested))
		for idx, v := range m.Nested {
			cloned.Nested[idx] = v.Clone()
		}
	}
	if m.Oneof != nil {
		cloned.Oneof = m.Oneof.Clone()
	}
	if m.Bytess != nil {
		cloned.Bytess = make([]byte, len(m.Bytess))
		copy(cloned.Bytess, m.Bytess)
	}
	return cloned
}

type TestSingleKeyStruct_Embedded struct {
	Embedded             string   `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleKeyStruct_Embedded) Reset()         { *m = TestSingleKeyStruct_Embedded{} }
func (m *TestSingleKeyStruct_Embedded) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_Embedded) ProtoMessage()    {}
func (*TestSingleKeyStruct_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 1}
}
func (m *TestSingleKeyStruct_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_Embedded.Merge(m, src)
}
func (m *TestSingleKeyStruct_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_Embedded proto.InternalMessageInfo

func (m *TestSingleKeyStruct_Embedded) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestSingleKeyStruct_Embedded) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_Embedded) Clone() *TestSingleKeyStruct_Embedded {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Embedded)
	*cloned = *m

	return cloned
}

type TestSingleKeyStruct_Embedded_Embedded2 struct {
	Embedded             string   `protobuf:"bytes,2,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) Reset() {
	*m = TestSingleKeyStruct_Embedded_Embedded2{}
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_Embedded_Embedded2) ProtoMessage()    {}
func (*TestSingleKeyStruct_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 1, 0}
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_Embedded_Embedded2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_Embedded_Embedded2.Merge(m, src)
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_Embedded_Embedded2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_Embedded_Embedded2 proto.InternalMessageInfo

func (m *TestSingleKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) Clone() *TestSingleKeyStruct_Embedded_Embedded2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Embedded_Embedded2)
	*cloned = *m

	return cloned
}

type TestSingleKeyStruct_Nested struct {
	Nested               string                              `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2              *TestSingleKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TestSingleKeyStruct_Nested) Reset()         { *m = TestSingleKeyStruct_Nested{} }
func (m *TestSingleKeyStruct_Nested) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_Nested) ProtoMessage()    {}
func (*TestSingleKeyStruct_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 2}
}
func (m *TestSingleKeyStruct_Nested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_Nested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_Nested.Merge(m, src)
}
func (m *TestSingleKeyStruct_Nested) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_Nested proto.InternalMessageInfo

func (m *TestSingleKeyStruct_Nested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestSingleKeyStruct_Nested) GetNested2() *TestSingleKeyStruct_Nested_Nested2 {
	if m != nil {
		return m.Nested2
	}
	return nil
}

func (m *TestSingleKeyStruct_Nested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_Nested) Clone() *TestSingleKeyStruct_Nested {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Nested)
	*cloned = *m

	cloned.Nested2 = m.Nested2.Clone()
	return cloned
}

type TestSingleKeyStruct_Nested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleKeyStruct_Nested_Nested2) Reset()         { *m = TestSingleKeyStruct_Nested_Nested2{} }
func (m *TestSingleKeyStruct_Nested_Nested2) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_Nested_Nested2) ProtoMessage()    {}
func (*TestSingleKeyStruct_Nested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 2, 0}
}
func (m *TestSingleKeyStruct_Nested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_Nested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_Nested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_Nested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_Nested_Nested2.Merge(m, src)
}
func (m *TestSingleKeyStruct_Nested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_Nested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_Nested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_Nested_Nested2 proto.InternalMessageInfo

func (m *TestSingleKeyStruct_Nested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestSingleKeyStruct_Nested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_Nested_Nested2) Clone() *TestSingleKeyStruct_Nested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_Nested_Nested2)
	*cloned = *m

	return cloned
}

type TestSingleKeyStruct_OneOfNested struct {
	Nested               string                                   `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2              *TestSingleKeyStruct_OneOfNested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *TestSingleKeyStruct_OneOfNested) Reset()         { *m = TestSingleKeyStruct_OneOfNested{} }
func (m *TestSingleKeyStruct_OneOfNested) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_OneOfNested) ProtoMessage()    {}
func (*TestSingleKeyStruct_OneOfNested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 3}
}
func (m *TestSingleKeyStruct_OneOfNested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_OneOfNested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_OneOfNested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_OneOfNested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_OneOfNested.Merge(m, src)
}
func (m *TestSingleKeyStruct_OneOfNested) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_OneOfNested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_OneOfNested.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_OneOfNested proto.InternalMessageInfo

func (m *TestSingleKeyStruct_OneOfNested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestSingleKeyStruct_OneOfNested) GetNested2() *TestSingleKeyStruct_OneOfNested_Nested2 {
	if m != nil {
		return m.Nested2
	}
	return nil
}

func (m *TestSingleKeyStruct_OneOfNested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_OneOfNested) Clone() *TestSingleKeyStruct_OneOfNested {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_OneOfNested)
	*cloned = *m

	cloned.Nested2 = m.Nested2.Clone()
	return cloned
}

type TestSingleKeyStruct_OneOfNested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) Reset() {
	*m = TestSingleKeyStruct_OneOfNested_Nested2{}
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) String() string { return proto.CompactTextString(m) }
func (*TestSingleKeyStruct_OneOfNested_Nested2) ProtoMessage()    {}
func (*TestSingleKeyStruct_OneOfNested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{0, 3, 0}
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleKeyStruct_OneOfNested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleKeyStruct_OneOfNested_Nested2.Merge(m, src)
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleKeyStruct_OneOfNested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleKeyStruct_OneOfNested_Nested2 proto.InternalMessageInfo

func (m *TestSingleKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) Clone() *TestSingleKeyStruct_OneOfNested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleKeyStruct_OneOfNested_Nested2)
	*cloned = *m

	return cloned
}

type TestSingleUUIDKeyStruct struct {
	Key         string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" sql:"pk,index=hash,type(uuid)" search:"Test Key"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" sql:"unique" search:"Test Name"`
	StringSlice []string `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty" search:"Test String Slice"`
	Bool        bool     `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty" search:"Test Bool"`
	// When using this ensure your precision needs are met and accounted for.  This will use a
	// BigInt which may require you to convert from uint64 to int64 OR update
	// the handling to use numerics.
	Uint64    uint64                            `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty" search:"Test Uint64"`
	Int64     int64                             `protobuf:"varint,6,opt,name=int64,proto3" json:"int64,omitempty" search:"Test Int64"`
	Float     float32                           `protobuf:"fixed32,7,opt,name=float,proto3" json:"float,omitempty" search:"Test Float"`
	Labels    map[string]string                 `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" search:"Test Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp *types.Timestamp                  `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty" search:"Test Timestamp"`
	Enum      TestSingleUUIDKeyStruct_Enum      `protobuf:"varint,10,opt,name=enum,proto3,enum=storage.TestSingleUUIDKeyStruct_Enum" json:"enum,omitempty" search:"Test Enum"`
	Enums     []TestSingleUUIDKeyStruct_Enum    `protobuf:"varint,11,rep,packed,name=enums,proto3,enum=storage.TestSingleUUIDKeyStruct_Enum" json:"enums,omitempty" search:"Test Enum Slice"`
	Embedded  *TestSingleUUIDKeyStruct_Embedded `protobuf:"bytes,12,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Nested    []*TestSingleUUIDKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested,proto3" json:"nested,omitempty"`
	// Types that are valid to be assigned to Oneof:
	//	*TestSingleUUIDKeyStruct_Oneofstring
	//	*TestSingleUUIDKeyStruct_Oneofnested
	Oneof                isTestSingleUUIDKeyStruct_Oneof `protobuf_oneof:"oneof"`
	Bytess               []byte                          `protobuf:"bytes,16,opt,name=bytess,proto3" json:"bytess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TestSingleUUIDKeyStruct) Reset()         { *m = TestSingleUUIDKeyStruct{} }
func (m *TestSingleUUIDKeyStruct) String() string { return proto.CompactTextString(m) }
func (*TestSingleUUIDKeyStruct) ProtoMessage()    {}
func (*TestSingleUUIDKeyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1}
}
func (m *TestSingleUUIDKeyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct proto.InternalMessageInfo

type isTestSingleUUIDKeyStruct_Oneof interface {
	isTestSingleUUIDKeyStruct_Oneof()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isTestSingleUUIDKeyStruct_Oneof
}

type TestSingleUUIDKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,proto3,oneof" json:"oneofstring,omitempty"`
}
type TestSingleUUIDKeyStruct_Oneofnested struct {
	Oneofnested *TestSingleUUIDKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,proto3,oneof" json:"oneofnested,omitempty"`
}

func (*TestSingleUUIDKeyStruct_Oneofstring) isTestSingleUUIDKeyStruct_Oneof() {}
func (m *TestSingleUUIDKeyStruct_Oneofstring) Clone() isTestSingleUUIDKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Oneofstring)
	*cloned = *m

	return cloned
}
func (*TestSingleUUIDKeyStruct_Oneofnested) isTestSingleUUIDKeyStruct_Oneof() {}
func (m *TestSingleUUIDKeyStruct_Oneofnested) Clone() isTestSingleUUIDKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Oneofnested)
	*cloned = *m

	cloned.Oneofnested = m.Oneofnested.Clone()
	return cloned
}

func (m *TestSingleUUIDKeyStruct) GetOneof() isTestSingleUUIDKeyStruct_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct) GetStringSlice() []string {
	if m != nil {
		return m.StringSlice
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *TestSingleUUIDKeyStruct) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *TestSingleUUIDKeyStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestSingleUUIDKeyStruct) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *TestSingleUUIDKeyStruct) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetEnum() TestSingleUUIDKeyStruct_Enum {
	if m != nil {
		return m.Enum
	}
	return TestSingleUUIDKeyStruct_ENUM0
}

func (m *TestSingleUUIDKeyStruct) GetEnums() []TestSingleUUIDKeyStruct_Enum {
	if m != nil {
		return m.Enums
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetEmbedded() *TestSingleUUIDKeyStruct_Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetNested() []*TestSingleUUIDKeyStruct_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetOneofstring() string {
	if x, ok := m.GetOneof().(*TestSingleUUIDKeyStruct_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct) GetOneofnested() *TestSingleUUIDKeyStruct_OneOfNested {
	if x, ok := m.GetOneof().(*TestSingleUUIDKeyStruct_Oneofnested); ok {
		return x.Oneofnested
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct) GetBytess() []byte {
	if m != nil {
		return m.Bytess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestSingleUUIDKeyStruct) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestSingleUUIDKeyStruct_Oneofstring)(nil),
		(*TestSingleUUIDKeyStruct_Oneofnested)(nil),
	}
}

func (m *TestSingleUUIDKeyStruct) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct) Clone() *TestSingleUUIDKeyStruct {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct)
	*cloned = *m

	if m.StringSlice != nil {
		cloned.StringSlice = make([]string, len(m.StringSlice))
		copy(cloned.StringSlice, m.StringSlice)
	}
	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	cloned.Timestamp = m.Timestamp.Clone()
	if m.Enums != nil {
		cloned.Enums = make([]TestSingleUUIDKeyStruct_Enum, len(m.Enums))
		copy(cloned.Enums, m.Enums)
	}
	cloned.Embedded = m.Embedded.Clone()
	if m.Nested != nil {
		cloned.Nested = make([]*TestSingleUUIDKeyStruct_Nested, len(m.Nested))
		for idx, v := range m.Nested {
			cloned.Nested[idx] = v.Clone()
		}
	}
	if m.Oneof != nil {
		cloned.Oneof = m.Oneof.Clone()
	}
	if m.Bytess != nil {
		cloned.Bytess = make([]byte, len(m.Bytess))
		copy(cloned.Bytess, m.Bytess)
	}
	return cloned
}

type TestSingleUUIDKeyStruct_Embedded struct {
	Embedded             string   `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_Embedded) Reset()         { *m = TestSingleUUIDKeyStruct_Embedded{} }
func (m *TestSingleUUIDKeyStruct_Embedded) String() string { return proto.CompactTextString(m) }
func (*TestSingleUUIDKeyStruct_Embedded) ProtoMessage()    {}
func (*TestSingleUUIDKeyStruct_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 1}
}
func (m *TestSingleUUIDKeyStruct_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_Embedded) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_Embedded) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_Embedded) Clone() *TestSingleUUIDKeyStruct_Embedded {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Embedded)
	*cloned = *m

	return cloned
}

type TestSingleUUIDKeyStruct_Embedded_Embedded2 struct {
	Embedded             string   `protobuf:"bytes,2,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) Reset() {
	*m = TestSingleUUIDKeyStruct_Embedded_Embedded2{}
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) String() string {
	return proto.CompactTextString(m)
}
func (*TestSingleUUIDKeyStruct_Embedded_Embedded2) ProtoMessage() {}
func (*TestSingleUUIDKeyStruct_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 1, 0}
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded_Embedded2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded_Embedded2.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded_Embedded2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_Embedded_Embedded2 proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) Clone() *TestSingleUUIDKeyStruct_Embedded_Embedded2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Embedded_Embedded2)
	*cloned = *m

	return cloned
}

type TestSingleUUIDKeyStruct_Nested struct {
	Nested               string                                  `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2              *TestSingleUUIDKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_Nested) Reset()         { *m = TestSingleUUIDKeyStruct_Nested{} }
func (m *TestSingleUUIDKeyStruct_Nested) String() string { return proto.CompactTextString(m) }
func (*TestSingleUUIDKeyStruct_Nested) ProtoMessage()    {}
func (*TestSingleUUIDKeyStruct_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 2}
}
func (m *TestSingleUUIDKeyStruct_Nested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_Nested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Nested.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_Nested) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_Nested proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_Nested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_Nested) GetNested2() *TestSingleUUIDKeyStruct_Nested_Nested2 {
	if m != nil {
		return m.Nested2
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct_Nested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_Nested) Clone() *TestSingleUUIDKeyStruct_Nested {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Nested)
	*cloned = *m

	cloned.Nested2 = m.Nested2.Clone()
	return cloned
}

type TestSingleUUIDKeyStruct_Nested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) Reset() {
	*m = TestSingleUUIDKeyStruct_Nested_Nested2{}
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) String() string { return proto.CompactTextString(m) }
func (*TestSingleUUIDKeyStruct_Nested_Nested2) ProtoMessage()    {}
func (*TestSingleUUIDKeyStruct_Nested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 2, 0}
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_Nested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Nested_Nested2.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_Nested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_Nested_Nested2 proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) Clone() *TestSingleUUIDKeyStruct_Nested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_Nested_Nested2)
	*cloned = *m

	return cloned
}

type TestSingleUUIDKeyStruct_OneOfNested struct {
	Nested               string                                       `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Nested2              *TestSingleUUIDKeyStruct_OneOfNested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) Reset()         { *m = TestSingleUUIDKeyStruct_OneOfNested{} }
func (m *TestSingleUUIDKeyStruct_OneOfNested) String() string { return proto.CompactTextString(m) }
func (*TestSingleUUIDKeyStruct_OneOfNested) ProtoMessage()    {}
func (*TestSingleUUIDKeyStruct_OneOfNested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 3}
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_OneOfNested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) GetNested2() *TestSingleUUIDKeyStruct_OneOfNested_Nested2 {
	if m != nil {
		return m.Nested2
	}
	return nil
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) Clone() *TestSingleUUIDKeyStruct_OneOfNested {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_OneOfNested)
	*cloned = *m

	cloned.Nested2 = m.Nested2.Clone()
	return cloned
}

type TestSingleUUIDKeyStruct_OneOfNested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Reset() {
	*m = TestSingleUUIDKeyStruct_OneOfNested_Nested2{}
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) String() string {
	return proto.CompactTextString(m)
}
func (*TestSingleUUIDKeyStruct_OneOfNested_Nested2) ProtoMessage() {}
func (*TestSingleUUIDKeyStruct_OneOfNested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{1, 3, 0}
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested_Nested2.Merge(m, src)
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestSingleUUIDKeyStruct_OneOfNested_Nested2 proto.InternalMessageInfo

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Clone() *TestSingleUUIDKeyStruct_OneOfNested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestSingleUUIDKeyStruct_OneOfNested_Nested2)
	*cloned = *m

	return cloned
}

type TestMultiKeyStruct struct {
	Key1        string                    `protobuf:"bytes,1,opt,name=key1,proto3" json:"key1,omitempty" sql:"pk,id" search:"Test Key"`
	Key2        string                    `protobuf:"bytes,2,opt,name=key2,proto3" json:"key2,omitempty" sql:"pk" search:"Test Key 2,store,hidden"`
	StringSlice []string                  `protobuf:"bytes,3,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty" search:"Test String Slice"`
	Bool        bool                      `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty" search:"Test Bool"`
	Uint64      uint64                    `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty" search:"Test Uint64"`
	Int64       int64                     `protobuf:"varint,6,opt,name=int64,proto3" json:"int64,omitempty" search:"Test Int64"`
	Float       float32                   `protobuf:"fixed32,7,opt,name=float,proto3" json:"float,omitempty" search:"Test Float"`
	Labels      map[string]string         `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" search:"Test Labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp   *types.Timestamp          `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty" search:"Test Timestamp"`
	Enum        TestMultiKeyStruct_Enum   `protobuf:"varint,10,opt,name=enum,proto3,enum=storage.TestMultiKeyStruct_Enum" json:"enum,omitempty" search:"Test Enum"`
	Enums       []TestMultiKeyStruct_Enum `protobuf:"varint,11,rep,packed,name=enums,proto3,enum=storage.TestMultiKeyStruct_Enum" json:"enums,omitempty" search:"Test Enum Slice"`
	String_     string                    `protobuf:"bytes,16,opt,name=string,proto3" json:"string,omitempty" search:"Test String"`
	// repeated int64: currently unsupported
	IntSliceDeprecated []int64                      `protobuf:"varint,17,rep,packed,name=int_slice_deprecated,json=intSliceDeprecated,proto3" json:"int_slice_deprecated,omitempty" sql:"-"` // Deprecated: Do not use.
	Int32Slice         []int32                      `protobuf:"varint,18,rep,packed,name=int32_slice,json=int32Slice,proto3" json:"int32_slice,omitempty" search:"Test Int32 Slice"`
	Embedded           *TestMultiKeyStruct_Embedded `protobuf:"bytes,12,opt,name=embedded,proto3" json:"embedded,omitempty"`
	Nested             []*TestMultiKeyStruct_Nested `protobuf:"bytes,13,rep,name=nested,proto3" json:"nested,omitempty"`
	// Types that are valid to be assigned to Oneof:
	//	*TestMultiKeyStruct_Oneofstring
	//	*TestMultiKeyStruct_Oneofnested
	Oneof                isTestMultiKeyStruct_Oneof `protobuf_oneof:"oneof"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TestMultiKeyStruct) Reset()         { *m = TestMultiKeyStruct{} }
func (m *TestMultiKeyStruct) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct) ProtoMessage()    {}
func (*TestMultiKeyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2}
}
func (m *TestMultiKeyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct.Merge(m, src)
}
func (m *TestMultiKeyStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct proto.InternalMessageInfo

type isTestMultiKeyStruct_Oneof interface {
	isTestMultiKeyStruct_Oneof()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isTestMultiKeyStruct_Oneof
}

type TestMultiKeyStruct_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,14,opt,name=oneofstring,proto3,oneof" json:"oneofstring,omitempty"`
}
type TestMultiKeyStruct_Oneofnested struct {
	Oneofnested *TestMultiKeyStruct_OneOfNested `protobuf:"bytes,15,opt,name=oneofnested,proto3,oneof" json:"oneofnested,omitempty"`
}

func (*TestMultiKeyStruct_Oneofstring) isTestMultiKeyStruct_Oneof() {}
func (m *TestMultiKeyStruct_Oneofstring) Clone() isTestMultiKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Oneofstring)
	*cloned = *m

	return cloned
}
func (*TestMultiKeyStruct_Oneofnested) isTestMultiKeyStruct_Oneof() {}
func (m *TestMultiKeyStruct_Oneofnested) Clone() isTestMultiKeyStruct_Oneof {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Oneofnested)
	*cloned = *m

	cloned.Oneofnested = m.Oneofnested.Clone()
	return cloned
}

func (m *TestMultiKeyStruct) GetOneof() isTestMultiKeyStruct_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (m *TestMultiKeyStruct) GetKey1() string {
	if m != nil {
		return m.Key1
	}
	return ""
}

func (m *TestMultiKeyStruct) GetKey2() string {
	if m != nil {
		return m.Key2
	}
	return ""
}

func (m *TestMultiKeyStruct) GetStringSlice() []string {
	if m != nil {
		return m.StringSlice
	}
	return nil
}

func (m *TestMultiKeyStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *TestMultiKeyStruct) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *TestMultiKeyStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestMultiKeyStruct) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *TestMultiKeyStruct) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TestMultiKeyStruct) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TestMultiKeyStruct) GetEnum() TestMultiKeyStruct_Enum {
	if m != nil {
		return m.Enum
	}
	return TestMultiKeyStruct_ENUM0
}

func (m *TestMultiKeyStruct) GetEnums() []TestMultiKeyStruct_Enum {
	if m != nil {
		return m.Enums
	}
	return nil
}

func (m *TestMultiKeyStruct) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

// Deprecated: Do not use.
func (m *TestMultiKeyStruct) GetIntSliceDeprecated() []int64 {
	if m != nil {
		return m.IntSliceDeprecated
	}
	return nil
}

func (m *TestMultiKeyStruct) GetInt32Slice() []int32 {
	if m != nil {
		return m.Int32Slice
	}
	return nil
}

func (m *TestMultiKeyStruct) GetEmbedded() *TestMultiKeyStruct_Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *TestMultiKeyStruct) GetNested() []*TestMultiKeyStruct_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *TestMultiKeyStruct) GetOneofstring() string {
	if x, ok := m.GetOneof().(*TestMultiKeyStruct_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (m *TestMultiKeyStruct) GetOneofnested() *TestMultiKeyStruct_OneOfNested {
	if x, ok := m.GetOneof().(*TestMultiKeyStruct_Oneofnested); ok {
		return x.Oneofnested
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestMultiKeyStruct) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestMultiKeyStruct_Oneofstring)(nil),
		(*TestMultiKeyStruct_Oneofnested)(nil),
	}
}

func (m *TestMultiKeyStruct) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct) Clone() *TestMultiKeyStruct {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct)
	*cloned = *m

	if m.StringSlice != nil {
		cloned.StringSlice = make([]string, len(m.StringSlice))
		copy(cloned.StringSlice, m.StringSlice)
	}
	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	cloned.Timestamp = m.Timestamp.Clone()
	if m.Enums != nil {
		cloned.Enums = make([]TestMultiKeyStruct_Enum, len(m.Enums))
		copy(cloned.Enums, m.Enums)
	}
	if m.IntSliceDeprecated != nil {
		cloned.IntSliceDeprecated = make([]int64, len(m.IntSliceDeprecated))
		copy(cloned.IntSliceDeprecated, m.IntSliceDeprecated)
	}
	if m.Int32Slice != nil {
		cloned.Int32Slice = make([]int32, len(m.Int32Slice))
		copy(cloned.Int32Slice, m.Int32Slice)
	}
	cloned.Embedded = m.Embedded.Clone()
	if m.Nested != nil {
		cloned.Nested = make([]*TestMultiKeyStruct_Nested, len(m.Nested))
		for idx, v := range m.Nested {
			cloned.Nested[idx] = v.Clone()
		}
	}
	if m.Oneof != nil {
		cloned.Oneof = m.Oneof.Clone()
	}
	return cloned
}

type TestMultiKeyStruct_Embedded struct {
	Embedded             string   `protobuf:"bytes,1,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMultiKeyStruct_Embedded) Reset()         { *m = TestMultiKeyStruct_Embedded{} }
func (m *TestMultiKeyStruct_Embedded) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_Embedded) ProtoMessage()    {}
func (*TestMultiKeyStruct_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 1}
}
func (m *TestMultiKeyStruct_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_Embedded.Merge(m, src)
}
func (m *TestMultiKeyStruct_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_Embedded proto.InternalMessageInfo

func (m *TestMultiKeyStruct_Embedded) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestMultiKeyStruct_Embedded) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_Embedded) Clone() *TestMultiKeyStruct_Embedded {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Embedded)
	*cloned = *m

	return cloned
}

type TestMultiKeyStruct_Embedded_Embedded2 struct {
	Embedded             string   `protobuf:"bytes,2,opt,name=embedded,proto3" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) Reset()         { *m = TestMultiKeyStruct_Embedded_Embedded2{} }
func (m *TestMultiKeyStruct_Embedded_Embedded2) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_Embedded_Embedded2) ProtoMessage()    {}
func (*TestMultiKeyStruct_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 1, 0}
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_Embedded_Embedded2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_Embedded_Embedded2.Merge(m, src)
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_Embedded_Embedded2.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_Embedded_Embedded2 proto.InternalMessageInfo

func (m *TestMultiKeyStruct_Embedded_Embedded2) GetEmbedded() string {
	if m != nil {
		return m.Embedded
	}
	return ""
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) Clone() *TestMultiKeyStruct_Embedded_Embedded2 {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Embedded_Embedded2)
	*cloned = *m

	return cloned
}

type TestMultiKeyStruct_Nested struct {
	Nested               string                             `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty" search:"Test Nested String"`
	IsNested             bool                               `protobuf:"varint,3,opt,name=is_nested,json=isNested,proto3" json:"is_nested,omitempty" search:"Test Nested Bool"`
	Int64                int64                              `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty" search:"Test Nested Int64"`
	Nested2              *TestMultiKeyStruct_Nested_Nested2 `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *TestMultiKeyStruct_Nested) Reset()         { *m = TestMultiKeyStruct_Nested{} }
func (m *TestMultiKeyStruct_Nested) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_Nested) ProtoMessage()    {}
func (*TestMultiKeyStruct_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 2}
}
func (m *TestMultiKeyStruct_Nested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_Nested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_Nested.Merge(m, src)
}
func (m *TestMultiKeyStruct_Nested) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_Nested proto.InternalMessageInfo

func (m *TestMultiKeyStruct_Nested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestMultiKeyStruct_Nested) GetIsNested() bool {
	if m != nil {
		return m.IsNested
	}
	return false
}

func (m *TestMultiKeyStruct_Nested) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestMultiKeyStruct_Nested) GetNested2() *TestMultiKeyStruct_Nested_Nested2 {
	if m != nil {
		return m.Nested2
	}
	return nil
}

func (m *TestMultiKeyStruct_Nested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_Nested) Clone() *TestMultiKeyStruct_Nested {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Nested)
	*cloned = *m

	cloned.Nested2 = m.Nested2.Clone()
	return cloned
}

type TestMultiKeyStruct_Nested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty" search:"Test Nested String 2"`
	IsNested             bool     `protobuf:"varint,3,opt,name=is_nested,json=isNested,proto3" json:"is_nested,omitempty" search:"Test Nested Bool 2"`
	Int64                int64    `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty" search:"Test Nested Int64 2"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMultiKeyStruct_Nested_Nested2) Reset()         { *m = TestMultiKeyStruct_Nested_Nested2{} }
func (m *TestMultiKeyStruct_Nested_Nested2) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_Nested_Nested2) ProtoMessage()    {}
func (*TestMultiKeyStruct_Nested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 2, 0}
}
func (m *TestMultiKeyStruct_Nested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_Nested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_Nested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_Nested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_Nested_Nested2.Merge(m, src)
}
func (m *TestMultiKeyStruct_Nested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_Nested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_Nested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_Nested_Nested2 proto.InternalMessageInfo

func (m *TestMultiKeyStruct_Nested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestMultiKeyStruct_Nested_Nested2) GetIsNested() bool {
	if m != nil {
		return m.IsNested
	}
	return false
}

func (m *TestMultiKeyStruct_Nested_Nested2) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestMultiKeyStruct_Nested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_Nested_Nested2) Clone() *TestMultiKeyStruct_Nested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_Nested_Nested2)
	*cloned = *m

	return cloned
}

type TestMultiKeyStruct_OneOfNested struct {
	Nested               string   `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty" search:"Test Oneof Nested String"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMultiKeyStruct_OneOfNested) Reset()         { *m = TestMultiKeyStruct_OneOfNested{} }
func (m *TestMultiKeyStruct_OneOfNested) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_OneOfNested) ProtoMessage()    {}
func (*TestMultiKeyStruct_OneOfNested) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 3}
}
func (m *TestMultiKeyStruct_OneOfNested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_OneOfNested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_OneOfNested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_OneOfNested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_OneOfNested.Merge(m, src)
}
func (m *TestMultiKeyStruct_OneOfNested) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_OneOfNested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_OneOfNested.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_OneOfNested proto.InternalMessageInfo

func (m *TestMultiKeyStruct_OneOfNested) GetNested() string {
	if m != nil {
		return m.Nested
	}
	return ""
}

func (m *TestMultiKeyStruct_OneOfNested) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_OneOfNested) Clone() *TestMultiKeyStruct_OneOfNested {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_OneOfNested)
	*cloned = *m

	return cloned
}

type TestMultiKeyStruct_OneOfNested_Nested2 struct {
	Nested2              string   `protobuf:"bytes,2,opt,name=nested2,proto3" json:"nested2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) Reset() {
	*m = TestMultiKeyStruct_OneOfNested_Nested2{}
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) String() string { return proto.CompactTextString(m) }
func (*TestMultiKeyStruct_OneOfNested_Nested2) ProtoMessage()    {}
func (*TestMultiKeyStruct_OneOfNested_Nested2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{2, 3, 0}
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMultiKeyStruct_OneOfNested_Nested2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMultiKeyStruct_OneOfNested_Nested2.Merge(m, src)
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) XXX_Size() int {
	return m.Size()
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMultiKeyStruct_OneOfNested_Nested2.DiscardUnknown(m)
}

var xxx_messageInfo_TestMultiKeyStruct_OneOfNested_Nested2 proto.InternalMessageInfo

func (m *TestMultiKeyStruct_OneOfNested_Nested2) GetNested2() string {
	if m != nil {
		return m.Nested2
	}
	return ""
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) Clone() *TestMultiKeyStruct_OneOfNested_Nested2 {
	if m == nil {
		return nil
	}
	cloned := new(TestMultiKeyStruct_OneOfNested_Nested2)
	*cloned = *m

	return cloned
}

// The test graph is as below. The numbers next to the edges
// indicate the cardinality of the relationship, either n-1, 1-n or n-n.
// The first element is the child and second is the parent.
//             TestGrandparent
//        (n-1) /      (n-1) |   (n-1) \          \ (n-1) (namespaced search)
//       TestParent1  TestParent2   TestParent3   TestParent4
//       (n-n) |           | (n-1)                   \ (n-1)
//       TestChild1    TestChild2                TestChild1P4
//         (1-n)  |
//       TestGrandChild1
//         (n-1)  |
//       TestGGrandChild1
//         (1-n)   |
//       TestG2GrandChild1
//        (n-1)   |
//        TestG3GrandChild1
type TestGrandparent struct {
	Id                   string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Grandparent ID" sql:"pk"`
	Val                  string                      `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty" search:"Test Grandparent Val"`
	Embedded             []*TestGrandparent_Embedded `protobuf:"bytes,3,rep,name=embedded,proto3" json:"embedded,omitempty"`
	Priority             int64                       `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty" search:"Test Grandparent Priority"`
	RiskScore            float32                     `protobuf:"fixed32,5,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty" search:"Test Grandparent Risk Score"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *TestGrandparent) Reset()         { *m = TestGrandparent{} }
func (m *TestGrandparent) String() string { return proto.CompactTextString(m) }
func (*TestGrandparent) ProtoMessage()    {}
func (*TestGrandparent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{3}
}
func (m *TestGrandparent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGrandparent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGrandparent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGrandparent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGrandparent.Merge(m, src)
}
func (m *TestGrandparent) XXX_Size() int {
	return m.Size()
}
func (m *TestGrandparent) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGrandparent.DiscardUnknown(m)
}

var xxx_messageInfo_TestGrandparent proto.InternalMessageInfo

func (m *TestGrandparent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestGrandparent) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestGrandparent) GetEmbedded() []*TestGrandparent_Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *TestGrandparent) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TestGrandparent) GetRiskScore() float32 {
	if m != nil {
		return m.RiskScore
	}
	return 0
}

func (m *TestGrandparent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestGrandparent) Clone() *TestGrandparent {
	if m == nil {
		return nil
	}
	cloned := new(TestGrandparent)
	*cloned = *m

	if m.Embedded != nil {
		cloned.Embedded = make([]*TestGrandparent_Embedded, len(m.Embedded))
		for idx, v := range m.Embedded {
			cloned.Embedded[idx] = v.Clone()
		}
	}
	return cloned
}

type TestGrandparent_Embedded struct {
	Val                  string                                `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty" search:"Test Grandparent Embedded"`
	Embedded2            []*TestGrandparent_Embedded_Embedded2 `protobuf:"bytes,2,rep,name=embedded2,proto3" json:"embedded2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *TestGrandparent_Embedded) Reset()         { *m = TestGrandparent_Embedded{} }
func (m *TestGrandparent_Embedded) String() string { return proto.CompactTextString(m) }
func (*TestGrandparent_Embedded) ProtoMessage()    {}
func (*TestGrandparent_Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{3, 0}
}
func (m *TestGrandparent_Embedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGrandparent_Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGrandparent_Embedded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGrandparent_Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGrandparent_Embedded.Merge(m, src)
}
func (m *TestGrandparent_Embedded) XXX_Size() int {
	return m.Size()
}
func (m *TestGrandparent_Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGrandparent_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_TestGrandparent_Embedded proto.InternalMessageInfo

func (m *TestGrandparent_Embedded) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestGrandparent_Embedded) GetEmbedded2() []*TestGrandparent_Embedded_Embedded2 {
	if m != nil {
		return m.Embedded2
	}
	return nil
}

func (m *TestGrandparent_Embedded) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestGrandparent_Embedded) Clone() *TestGrandparent_Embedded {
	if m == nil {
		return nil
	}
	cloned := new(TestGrandparent_Embedded)
	*cloned = *m

	if m.Embedded2 != nil {
		cloned.Embedded2 = make([]*TestGrandparent_Embedded_Embedded2, len(m.Embedded2))
		for idx, v := range m.Embedded2 {
			cloned.Embedded2[idx] = v.Clone()
		}
	}
	return cloned
}

type TestGrandparent_Embedded_Embedded2 struct {
	Val                  string   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty" search:"Test Grandparent Embedded2"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestGrandparent_Embedded_Embedded2) Reset()         { *m = TestGrandparent_Embedded_Embedded2{} }
func (m *TestGrandparent_Embedded_Embedded2) String() string { return proto.CompactTextString(m) }
func (*TestGrandparent_Embedded_Embedded2) ProtoMessage()    {}
func (*TestGrandparent_Embedded_Embedded2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{3, 0, 0}
}
func (m *TestGrandparent_Embedded_Embedded2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGrandparent_Embedded_Embedded2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGrandparent_Embedded_Embedded2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGrandparent_Embedded_Embedded2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGrandparent_Embedded_Embedded2.Merge(m, src)
}
func (m *TestGrandparent_Embedded_Embedded2) XXX_Size() int {
	return m.Size()
}
func (m *TestGrandparent_Embedded_Embedded2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGrandparent_Embedded_Embedded2.DiscardUnknown(m)
}

var xxx_messageInfo_TestGrandparent_Embedded_Embedded2 proto.InternalMessageInfo

func (m *TestGrandparent_Embedded_Embedded2) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestGrandparent_Embedded_Embedded2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestGrandparent_Embedded_Embedded2) Clone() *TestGrandparent_Embedded_Embedded2 {
	if m == nil {
		return nil
	}
	cloned := new(TestGrandparent_Embedded_Embedded2)
	*cloned = *m

	return cloned
}

type TestParent1 struct {
	Id                   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Parent1 ID" sql:"pk"`
	ParentId             string                   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestGrandparent:id)"`
	Children             []*TestParent1_Child1Ref `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Val                  string                   `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty" search:"Test Parent1 Val"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TestParent1) Reset()         { *m = TestParent1{} }
func (m *TestParent1) String() string { return proto.CompactTextString(m) }
func (*TestParent1) ProtoMessage()    {}
func (*TestParent1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{4}
}
func (m *TestParent1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestParent1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestParent1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestParent1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestParent1.Merge(m, src)
}
func (m *TestParent1) XXX_Size() int {
	return m.Size()
}
func (m *TestParent1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestParent1.DiscardUnknown(m)
}

var xxx_messageInfo_TestParent1 proto.InternalMessageInfo

func (m *TestParent1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestParent1) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestParent1) GetChildren() []*TestParent1_Child1Ref {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *TestParent1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestParent1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestParent1) Clone() *TestParent1 {
	if m == nil {
		return nil
	}
	cloned := new(TestParent1)
	*cloned = *m

	if m.Children != nil {
		cloned.Children = make([]*TestParent1_Child1Ref, len(m.Children))
		for idx, v := range m.Children {
			cloned.Children[idx] = v.Clone()
		}
	}
	return cloned
}

type TestParent1_Child1Ref struct {
	ChildId              string   `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty" sql:"fk(TestChild1:id),no-fk-constraint"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestParent1_Child1Ref) Reset()         { *m = TestParent1_Child1Ref{} }
func (m *TestParent1_Child1Ref) String() string { return proto.CompactTextString(m) }
func (*TestParent1_Child1Ref) ProtoMessage()    {}
func (*TestParent1_Child1Ref) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{4, 0}
}
func (m *TestParent1_Child1Ref) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestParent1_Child1Ref) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestParent1_Child1Ref.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestParent1_Child1Ref) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestParent1_Child1Ref.Merge(m, src)
}
func (m *TestParent1_Child1Ref) XXX_Size() int {
	return m.Size()
}
func (m *TestParent1_Child1Ref) XXX_DiscardUnknown() {
	xxx_messageInfo_TestParent1_Child1Ref.DiscardUnknown(m)
}

var xxx_messageInfo_TestParent1_Child1Ref proto.InternalMessageInfo

func (m *TestParent1_Child1Ref) GetChildId() string {
	if m != nil {
		return m.ChildId
	}
	return ""
}

func (m *TestParent1_Child1Ref) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestParent1_Child1Ref) Clone() *TestParent1_Child1Ref {
	if m == nil {
		return nil
	}
	cloned := new(TestParent1_Child1Ref)
	*cloned = *m

	return cloned
}

type TestChild1 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Child1 ID" sql:"pk"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty" search:"Test Child1 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestChild1) Reset()         { *m = TestChild1{} }
func (m *TestChild1) String() string { return proto.CompactTextString(m) }
func (*TestChild1) ProtoMessage()    {}
func (*TestChild1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{5}
}
func (m *TestChild1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestChild1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestChild1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestChild1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestChild1.Merge(m, src)
}
func (m *TestChild1) XXX_Size() int {
	return m.Size()
}
func (m *TestChild1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestChild1.DiscardUnknown(m)
}

var xxx_messageInfo_TestChild1 proto.InternalMessageInfo

func (m *TestChild1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestChild1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestChild1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestChild1) Clone() *TestChild1 {
	if m == nil {
		return nil
	}
	cloned := new(TestChild1)
	*cloned = *m

	return cloned
}

type TestGrandChild1 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Grandchild1 ID" sql:"pk"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestChild1:id)"`
	ChildId              string   `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty" sql:"fk(TestGGrandChild1:id),no-fk-constraint"`
	Val                  string   `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty" search:"Test Grandchild1 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestGrandChild1) Reset()         { *m = TestGrandChild1{} }
func (m *TestGrandChild1) String() string { return proto.CompactTextString(m) }
func (*TestGrandChild1) ProtoMessage()    {}
func (*TestGrandChild1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{6}
}
func (m *TestGrandChild1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGrandChild1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGrandChild1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGrandChild1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGrandChild1.Merge(m, src)
}
func (m *TestGrandChild1) XXX_Size() int {
	return m.Size()
}
func (m *TestGrandChild1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGrandChild1.DiscardUnknown(m)
}

var xxx_messageInfo_TestGrandChild1 proto.InternalMessageInfo

func (m *TestGrandChild1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestGrandChild1) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestGrandChild1) GetChildId() string {
	if m != nil {
		return m.ChildId
	}
	return ""
}

func (m *TestGrandChild1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestGrandChild1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestGrandChild1) Clone() *TestGrandChild1 {
	if m == nil {
		return nil
	}
	cloned := new(TestGrandChild1)
	*cloned = *m

	return cloned
}

type TestGGrandChild1 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test GGrandchild1 ID" sql:"pk"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty" search:"Test GGrandchild1 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestGGrandChild1) Reset()         { *m = TestGGrandChild1{} }
func (m *TestGGrandChild1) String() string { return proto.CompactTextString(m) }
func (*TestGGrandChild1) ProtoMessage()    {}
func (*TestGGrandChild1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{7}
}
func (m *TestGGrandChild1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGGrandChild1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGGrandChild1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGGrandChild1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGGrandChild1.Merge(m, src)
}
func (m *TestGGrandChild1) XXX_Size() int {
	return m.Size()
}
func (m *TestGGrandChild1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGGrandChild1.DiscardUnknown(m)
}

var xxx_messageInfo_TestGGrandChild1 proto.InternalMessageInfo

func (m *TestGGrandChild1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestGGrandChild1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestGGrandChild1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestGGrandChild1) Clone() *TestGGrandChild1 {
	if m == nil {
		return nil
	}
	cloned := new(TestGGrandChild1)
	*cloned = *m

	return cloned
}

type TestG2GrandChild1 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test G2Grandchild1 ID" sql:"pk"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestGGrandChild1:id)"`
	ChildId              string   `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty" sql:"fk(TestG3GrandChild1:id),no-fk-constraint"`
	Val                  string   `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty" search:"Test G2Grandchild1 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestG2GrandChild1) Reset()         { *m = TestG2GrandChild1{} }
func (m *TestG2GrandChild1) String() string { return proto.CompactTextString(m) }
func (*TestG2GrandChild1) ProtoMessage()    {}
func (*TestG2GrandChild1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{8}
}
func (m *TestG2GrandChild1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestG2GrandChild1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestG2GrandChild1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestG2GrandChild1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestG2GrandChild1.Merge(m, src)
}
func (m *TestG2GrandChild1) XXX_Size() int {
	return m.Size()
}
func (m *TestG2GrandChild1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestG2GrandChild1.DiscardUnknown(m)
}

var xxx_messageInfo_TestG2GrandChild1 proto.InternalMessageInfo

func (m *TestG2GrandChild1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestG2GrandChild1) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestG2GrandChild1) GetChildId() string {
	if m != nil {
		return m.ChildId
	}
	return ""
}

func (m *TestG2GrandChild1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestG2GrandChild1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestG2GrandChild1) Clone() *TestG2GrandChild1 {
	if m == nil {
		return nil
	}
	cloned := new(TestG2GrandChild1)
	*cloned = *m

	return cloned
}

type TestG3GrandChild1 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test G3Grandchild1 ID" sql:"pk"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty" search:"Test G3Grandchild1 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestG3GrandChild1) Reset()         { *m = TestG3GrandChild1{} }
func (m *TestG3GrandChild1) String() string { return proto.CompactTextString(m) }
func (*TestG3GrandChild1) ProtoMessage()    {}
func (*TestG3GrandChild1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{9}
}
func (m *TestG3GrandChild1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestG3GrandChild1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestG3GrandChild1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestG3GrandChild1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestG3GrandChild1.Merge(m, src)
}
func (m *TestG3GrandChild1) XXX_Size() int {
	return m.Size()
}
func (m *TestG3GrandChild1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestG3GrandChild1.DiscardUnknown(m)
}

var xxx_messageInfo_TestG3GrandChild1 proto.InternalMessageInfo

func (m *TestG3GrandChild1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestG3GrandChild1) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestG3GrandChild1) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestG3GrandChild1) Clone() *TestG3GrandChild1 {
	if m == nil {
		return nil
	}
	cloned := new(TestG3GrandChild1)
	*cloned = *m

	return cloned
}

type TestParent2 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Parent2 ID" sql:"pk,type(uuid)"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestGrandparent:id)"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty" search:"Test Parent2 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestParent2) Reset()         { *m = TestParent2{} }
func (m *TestParent2) String() string { return proto.CompactTextString(m) }
func (*TestParent2) ProtoMessage()    {}
func (*TestParent2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{10}
}
func (m *TestParent2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestParent2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestParent2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestParent2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestParent2.Merge(m, src)
}
func (m *TestParent2) XXX_Size() int {
	return m.Size()
}
func (m *TestParent2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestParent2.DiscardUnknown(m)
}

var xxx_messageInfo_TestParent2 proto.InternalMessageInfo

func (m *TestParent2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestParent2) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestParent2) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestParent2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestParent2) Clone() *TestParent2 {
	if m == nil {
		return nil
	}
	cloned := new(TestParent2)
	*cloned = *m

	return cloned
}

type TestChild2 struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Child2 ID" sql:"pk,type(uuid)"`
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestParent2:id)"`
	// For a potential optimization, insert a direct link from child to grandparent.
	GrandparentId        string   `protobuf:"bytes,3,opt,name=grandparent_id,json=grandparentId,proto3" json:"grandparent_id,omitempty" sql:"fk(TestGrandparent:id),no-fk-constraint"`
	Val                  string   `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty" search:"Test Child2 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestChild2) Reset()         { *m = TestChild2{} }
func (m *TestChild2) String() string { return proto.CompactTextString(m) }
func (*TestChild2) ProtoMessage()    {}
func (*TestChild2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{11}
}
func (m *TestChild2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestChild2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestChild2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestChild2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestChild2.Merge(m, src)
}
func (m *TestChild2) XXX_Size() int {
	return m.Size()
}
func (m *TestChild2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestChild2.DiscardUnknown(m)
}

var xxx_messageInfo_TestChild2 proto.InternalMessageInfo

func (m *TestChild2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestChild2) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestChild2) GetGrandparentId() string {
	if m != nil {
		return m.GrandparentId
	}
	return ""
}

func (m *TestChild2) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestChild2) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestChild2) Clone() *TestChild2 {
	if m == nil {
		return nil
	}
	cloned := new(TestChild2)
	*cloned = *m

	return cloned
}

type TestParent3 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Parent3 ID" sql:"pk"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestGrandparent:id)"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty" search:"Test Parent3 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestParent3) Reset()         { *m = TestParent3{} }
func (m *TestParent3) String() string { return proto.CompactTextString(m) }
func (*TestParent3) ProtoMessage()    {}
func (*TestParent3) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{12}
}
func (m *TestParent3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestParent3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestParent3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestParent3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestParent3.Merge(m, src)
}
func (m *TestParent3) XXX_Size() int {
	return m.Size()
}
func (m *TestParent3) XXX_DiscardUnknown() {
	xxx_messageInfo_TestParent3.DiscardUnknown(m)
}

var xxx_messageInfo_TestParent3 proto.InternalMessageInfo

func (m *TestParent3) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestParent3) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestParent3) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestParent3) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestParent3) Clone() *TestParent3 {
	if m == nil {
		return nil
	}
	cloned := new(TestParent3)
	*cloned = *m

	return cloned
}

type TestParent4 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Parent4 ID" sql:"pk"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestGrandparent:id)"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty" search:"Test Parent4 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestParent4) Reset()         { *m = TestParent4{} }
func (m *TestParent4) String() string { return proto.CompactTextString(m) }
func (*TestParent4) ProtoMessage()    {}
func (*TestParent4) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{13}
}
func (m *TestParent4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestParent4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestParent4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestParent4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestParent4.Merge(m, src)
}
func (m *TestParent4) XXX_Size() int {
	return m.Size()
}
func (m *TestParent4) XXX_DiscardUnknown() {
	xxx_messageInfo_TestParent4.DiscardUnknown(m)
}

var xxx_messageInfo_TestParent4 proto.InternalMessageInfo

func (m *TestParent4) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestParent4) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestParent4) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestParent4) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestParent4) Clone() *TestParent4 {
	if m == nil {
		return nil
	}
	cloned := new(TestParent4)
	*cloned = *m

	return cloned
}

type TestChild1P4 struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test Child1P4 ID" sql:"pk"`
	ParentId             string   `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" sql:"fk(TestParent4:id)"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty" search:"Test Child1P4 Val"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestChild1P4) Reset()         { *m = TestChild1P4{} }
func (m *TestChild1P4) String() string { return proto.CompactTextString(m) }
func (*TestChild1P4) ProtoMessage()    {}
func (*TestChild1P4) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{14}
}
func (m *TestChild1P4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestChild1P4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestChild1P4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestChild1P4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestChild1P4.Merge(m, src)
}
func (m *TestChild1P4) XXX_Size() int {
	return m.Size()
}
func (m *TestChild1P4) XXX_DiscardUnknown() {
	xxx_messageInfo_TestChild1P4.DiscardUnknown(m)
}

var xxx_messageInfo_TestChild1P4 proto.InternalMessageInfo

func (m *TestChild1P4) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestChild1P4) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *TestChild1P4) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *TestChild1P4) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestChild1P4) Clone() *TestChild1P4 {
	if m == nil {
		return nil
	}
	cloned := new(TestChild1P4)
	*cloned = *m

	return cloned
}

type TestShortCircuit struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Test ShortCircuit ID" sql:"pk"`
	ChildId              string   `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty" search:"Test Child1 ID" sql:"fk(TestChild1:id),no-fk-constraint,directional"`
	G2GrandchildId       string   `protobuf:"bytes,3,opt,name=g2_grandchild_id,json=g2GrandchildId,proto3" json:"g2_grandchild_id,omitempty" search:"Test G2Grandchild1 ID" sql:"fk(TestG2GrandChild1:id),no-fk-constraint,directional"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestShortCircuit) Reset()         { *m = TestShortCircuit{} }
func (m *TestShortCircuit) String() string { return proto.CompactTextString(m) }
func (*TestShortCircuit) ProtoMessage()    {}
func (*TestShortCircuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80f1f1db1167453, []int{15}
}
func (m *TestShortCircuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestShortCircuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestShortCircuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestShortCircuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestShortCircuit.Merge(m, src)
}
func (m *TestShortCircuit) XXX_Size() int {
	return m.Size()
}
func (m *TestShortCircuit) XXX_DiscardUnknown() {
	xxx_messageInfo_TestShortCircuit.DiscardUnknown(m)
}

var xxx_messageInfo_TestShortCircuit proto.InternalMessageInfo

func (m *TestShortCircuit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestShortCircuit) GetChildId() string {
	if m != nil {
		return m.ChildId
	}
	return ""
}

func (m *TestShortCircuit) GetG2GrandchildId() string {
	if m != nil {
		return m.G2GrandchildId
	}
	return ""
}

func (m *TestShortCircuit) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestShortCircuit) Clone() *TestShortCircuit {
	if m == nil {
		return nil
	}
	cloned := new(TestShortCircuit)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.TestSingleKeyStruct_Enum", TestSingleKeyStruct_Enum_name, TestSingleKeyStruct_Enum_value)
	proto.RegisterEnum("storage.TestSingleUUIDKeyStruct_Enum", TestSingleUUIDKeyStruct_Enum_name, TestSingleUUIDKeyStruct_Enum_value)
	proto.RegisterEnum("storage.TestMultiKeyStruct_Enum", TestMultiKeyStruct_Enum_name, TestMultiKeyStruct_Enum_value)
	proto.RegisterType((*TestSingleKeyStruct)(nil), "storage.TestSingleKeyStruct")
	proto.RegisterMapType((map[string]string)(nil), "storage.TestSingleKeyStruct.LabelsEntry")
	proto.RegisterType((*TestSingleKeyStruct_Embedded)(nil), "storage.TestSingleKeyStruct.Embedded")
	proto.RegisterType((*TestSingleKeyStruct_Embedded_Embedded2)(nil), "storage.TestSingleKeyStruct.Embedded.Embedded2")
	proto.RegisterType((*TestSingleKeyStruct_Nested)(nil), "storage.TestSingleKeyStruct.Nested")
	proto.RegisterType((*TestSingleKeyStruct_Nested_Nested2)(nil), "storage.TestSingleKeyStruct.Nested.Nested2")
	proto.RegisterType((*TestSingleKeyStruct_OneOfNested)(nil), "storage.TestSingleKeyStruct.OneOfNested")
	proto.RegisterType((*TestSingleKeyStruct_OneOfNested_Nested2)(nil), "storage.TestSingleKeyStruct.OneOfNested.Nested2")
	proto.RegisterType((*TestSingleUUIDKeyStruct)(nil), "storage.TestSingleUUIDKeyStruct")
	proto.RegisterMapType((map[string]string)(nil), "storage.TestSingleUUIDKeyStruct.LabelsEntry")
	proto.RegisterType((*TestSingleUUIDKeyStruct_Embedded)(nil), "storage.TestSingleUUIDKeyStruct.Embedded")
	proto.RegisterType((*TestSingleUUIDKeyStruct_Embedded_Embedded2)(nil), "storage.TestSingleUUIDKeyStruct.Embedded.Embedded2")
	proto.RegisterType((*TestSingleUUIDKeyStruct_Nested)(nil), "storage.TestSingleUUIDKeyStruct.Nested")
	proto.RegisterType((*TestSingleUUIDKeyStruct_Nested_Nested2)(nil), "storage.TestSingleUUIDKeyStruct.Nested.Nested2")
	proto.RegisterType((*TestSingleUUIDKeyStruct_OneOfNested)(nil), "storage.TestSingleUUIDKeyStruct.OneOfNested")
	proto.RegisterType((*TestSingleUUIDKeyStruct_OneOfNested_Nested2)(nil), "storage.TestSingleUUIDKeyStruct.OneOfNested.Nested2")
	proto.RegisterType((*TestMultiKeyStruct)(nil), "storage.TestMultiKeyStruct")
	proto.RegisterMapType((map[string]string)(nil), "storage.TestMultiKeyStruct.LabelsEntry")
	proto.RegisterType((*TestMultiKeyStruct_Embedded)(nil), "storage.TestMultiKeyStruct.Embedded")
	proto.RegisterType((*TestMultiKeyStruct_Embedded_Embedded2)(nil), "storage.TestMultiKeyStruct.Embedded.Embedded2")
	proto.RegisterType((*TestMultiKeyStruct_Nested)(nil), "storage.TestMultiKeyStruct.Nested")
	proto.RegisterType((*TestMultiKeyStruct_Nested_Nested2)(nil), "storage.TestMultiKeyStruct.Nested.Nested2")
	proto.RegisterType((*TestMultiKeyStruct_OneOfNested)(nil), "storage.TestMultiKeyStruct.OneOfNested")
	proto.RegisterType((*TestMultiKeyStruct_OneOfNested_Nested2)(nil), "storage.TestMultiKeyStruct.OneOfNested.Nested2")
	proto.RegisterType((*TestGrandparent)(nil), "storage.TestGrandparent")
	proto.RegisterType((*TestGrandparent_Embedded)(nil), "storage.TestGrandparent.Embedded")
	proto.RegisterType((*TestGrandparent_Embedded_Embedded2)(nil), "storage.TestGrandparent.Embedded.Embedded2")
	proto.RegisterType((*TestParent1)(nil), "storage.TestParent1")
	proto.RegisterType((*TestParent1_Child1Ref)(nil), "storage.TestParent1.Child1Ref")
	proto.RegisterType((*TestChild1)(nil), "storage.TestChild1")
	proto.RegisterType((*TestGrandChild1)(nil), "storage.TestGrandChild1")
	proto.RegisterType((*TestGGrandChild1)(nil), "storage.TestGGrandChild1")
	proto.RegisterType((*TestG2GrandChild1)(nil), "storage.TestG2GrandChild1")
	proto.RegisterType((*TestG3GrandChild1)(nil), "storage.TestG3GrandChild1")
	proto.RegisterType((*TestParent2)(nil), "storage.TestParent2")
	proto.RegisterType((*TestChild2)(nil), "storage.TestChild2")
	proto.RegisterType((*TestParent3)(nil), "storage.TestParent3")
	proto.RegisterType((*TestParent4)(nil), "storage.TestParent4")
	proto.RegisterType((*TestChild1P4)(nil), "storage.TestChild1P4")
	proto.RegisterType((*TestShortCircuit)(nil), "storage.TestShortCircuit")
}

func init() { proto.RegisterFile("storage/test.proto", fileDescriptor_f80f1f1db1167453) }

var fileDescriptor_f80f1f1db1167453 = []byte{
	// 1982 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x6f, 0xdb, 0xc8,
	0x19, 0x0e, 0x25, 0xf9, 0x43, 0x23, 0xc7, 0xeb, 0x9d, 0x0d, 0x36, 0x5c, 0xed, 0xae, 0x87, 0x61,
	0x92, 0x35, 0x93, 0xd8, 0xb2, 0x4d, 0x29, 0x5f, 0x4e, 0xb3, 0xd9, 0x68, 0xe3, 0xa4, 0x6a, 0x12,
	0xc7, 0xa5, 0xe3, 0xa2, 0x9b, 0xc3, 0x1a, 0xb2, 0x38, 0x96, 0x09, 0xc9, 0xa4, 0x43, 0x52, 0x8b,
	0xf5, 0xb5, 0x28, 0xd0, 0xa2, 0xe8, 0xa1, 0xe8, 0xa1, 0x2d, 0xfa, 0x07, 0xfa, 0x03, 0xda, 0x43,
	0x0f, 0x05, 0x7a, 0x0b, 0x7a, 0x2c, 0xd0, 0x43, 0x6f, 0x44, 0x91, 0xfe, 0x82, 0xf2, 0xd4, 0x63,
	0xc1, 0x99, 0x21, 0x39, 0x24, 0x25, 0x4a, 0x09, 0xd2, 0x36, 0x45, 0xf7, 0x64, 0x7e, 0x3c, 0xcf,
	0x3b, 0xcf, 0xbc, 0xef, 0xcb, 0xe7, 0xa5, 0x08, 0x03, 0xe8, 0xb8, 0x96, 0xdd, 0xee, 0xe2, 0x55,
	0x17, 0x3b, 0x6e, 0xed, 0xd8, 0xb6, 0x5c, 0x0b, 0xce, 0xb0, 0x6b, 0x55, 0xd4, 0xb5, 0xac, 0x6e,
	0x1f, 0xaf, 0x92, 0xcb, 0xfb, 0x83, 0x83, 0x55, 0xd7, 0x38, 0xc2, 0x8e, 0xdb, 0x3e, 0x3a, 0xa6,
	0xc8, 0xea, 0x99, 0xae, 0xd5, 0xb5, 0xc8, 0xe1, 0x6a, 0x70, 0x44, 0xaf, 0xca, 0x7f, 0xa9, 0x80,
	0xf7, 0x9e, 0x62, 0xc7, 0xdd, 0x31, 0xcc, 0x6e, 0x1f, 0x3f, 0xc4, 0x27, 0x3b, 0xae, 0x3d, 0xe8,
	0xb8, 0xf0, 0x16, 0x28, 0xf6, 0xf0, 0x89, 0x28, 0x48, 0x82, 0x52, 0x6e, 0x5e, 0xf2, 0x3d, 0x74,
	0xd1, 0x79, 0xde, 0xdf, 0x90, 0x8f, 0x7b, 0xcb, 0x86, 0xa9, 0xe3, 0xaf, 0x6f, 0x1f, 0xb6, 0x9d,
	0x43, 0x59, 0x72, 0x70, 0xdb, 0xee, 0x1c, 0x6e, 0xc8, 0x41, 0x04, 0xe9, 0x21, 0x3e, 0x91, 0xb5,
	0x80, 0x05, 0xaf, 0x83, 0x92, 0xd9, 0x3e, 0xc2, 0x62, 0x81, 0xb0, 0xcf, 0xfb, 0x1e, 0x42, 0x84,
	0x3d, 0x30, 0x8d, 0xe7, 0x03, 0x9c, 0xa2, 0x6d, 0xb5, 0x8f, 0xb0, 0xac, 0x11, 0x02, 0xbc, 0x0b,
	0xe6, 0x1c, 0xd7, 0x36, 0xcc, 0xee, 0x9e, 0xd3, 0x37, 0x3a, 0x58, 0x2c, 0x4a, 0x45, 0xa5, 0xdc,
	0x5c, 0xf4, 0x3d, 0x54, 0x4d, 0x70, 0x76, 0x08, 0x48, 0xda, 0x09, 0x40, 0xb2, 0x56, 0xa1, 0x1c,
	0x72, 0x06, 0x2f, 0x83, 0xd2, 0xbe, 0x65, 0xf5, 0xc5, 0x92, 0x24, 0x28, 0xb3, 0xcd, 0xf7, 0x7d,
	0x0f, 0xc1, 0x04, 0xb5, 0x69, 0x59, 0x7d, 0x59, 0x23, 0x18, 0xb8, 0x06, 0xa6, 0x07, 0x86, 0xe9,
	0x5e, 0x6b, 0x88, 0x53, 0x92, 0xa0, 0x94, 0x9a, 0xa2, 0xef, 0xa1, 0x33, 0x09, 0xf4, 0x2e, 0xb9,
	0x2d, 0x6b, 0x0c, 0x07, 0x57, 0xc0, 0x14, 0x25, 0x4c, 0x4b, 0x82, 0x52, 0x6c, 0x9e, 0xf5, 0x3d,
	0xf4, 0x5e, 0x82, 0xd0, 0xa2, 0xf8, 0xa9, 0x08, 0x7e, 0xd0, 0xb7, 0xda, 0xae, 0x38, 0x23, 0x09,
	0x4a, 0x61, 0x08, 0xfc, 0x7e, 0x70, 0x57, 0xd6, 0x28, 0x0a, 0x3e, 0x03, 0xd3, 0xfd, 0xf6, 0x3e,
	0xee, 0x3b, 0xe2, 0xac, 0x54, 0x54, 0x2a, 0xaa, 0x52, 0x63, 0xd5, 0xad, 0x0d, 0x29, 0x51, 0xed,
	0x11, 0x81, 0x6e, 0x9a, 0xae, 0x7d, 0x32, 0x44, 0x39, 0xbd, 0x2b, 0x6b, 0x2c, 0x22, 0xdc, 0x05,
	0xe5, 0xa8, 0x23, 0xc4, 0xb2, 0x24, 0x28, 0x15, 0xb5, 0x5a, 0xa3, 0x3d, 0x53, 0x0b, 0x7b, 0xa6,
	0xf6, 0x34, 0x44, 0x34, 0x3f, 0xf4, 0x3d, 0x74, 0x36, 0x11, 0x30, 0xba, 0x27, 0x6b, 0x71, 0x24,
	0xf8, 0x18, 0x94, 0xb0, 0x39, 0x38, 0x12, 0x81, 0x24, 0x28, 0xf3, 0xea, 0xb9, 0x5c, 0xc1, 0x9b,
	0xe6, 0xe0, 0x68, 0x48, 0x45, 0x82, 0xcb, 0xb2, 0x46, 0xc2, 0xc0, 0x5d, 0x30, 0x15, 0xfc, 0x75,
	0xc4, 0x8a, 0x54, 0x9c, 0x2c, 0xde, 0x47, 0xbe, 0x87, 0xc4, 0x4c, 0xbc, 0xb0, 0x35, 0x68, 0x34,
	0x78, 0x17, 0xcc, 0xe2, 0xa3, 0x7d, 0xac, 0xeb, 0x58, 0x17, 0xe7, 0xc8, 0xde, 0x2f, 0xe6, 0x47,
	0x66, 0x60, 0x2d, 0xa2, 0xc1, 0x5b, 0x60, 0xda, 0xc4, 0x8e, 0x8b, 0x75, 0xf1, 0x34, 0xa9, 0xcd,
	0xf9, 0xdc, 0x00, 0x5b, 0x04, 0xaa, 0x31, 0x0a, 0x94, 0x41, 0xc5, 0x32, 0xb1, 0x75, 0x40, 0x1b,
	0x55, 0x9c, 0x0f, 0x9e, 0x8b, 0x6f, 0x9f, 0xd2, 0xf8, 0x8b, 0xf0, 0x11, 0xc3, 0xb0, 0x55, 0xde,
	0x21, 0x32, 0xf3, 0x3b, 0xe0, 0x89, 0x89, 0x9f, 0x1c, 0xd0, 0xa5, 0xa2, 0x68, 0x6c, 0xc5, 0xf7,
	0xc1, 0xf4, 0xfe, 0x89, 0x8b, 0x1d, 0x47, 0x5c, 0x90, 0x04, 0x65, 0x4e, 0x63, 0x67, 0xd5, 0x9b,
	0xa0, 0xc2, 0xf5, 0x0d, 0x5c, 0xe0, 0x1e, 0x73, 0xfa, 0xec, 0x9e, 0x01, 0x53, 0x5f, 0xb5, 0xfb,
	0x03, 0xf6, 0xf0, 0x6a, 0xf4, 0x64, 0xa3, 0x70, 0x43, 0xa8, 0x3e, 0x01, 0xb3, 0x61, 0x5e, 0x60,
	0x95, 0x4b, 0x28, 0x25, 0x47, 0xe7, 0xd5, 0x25, 0x50, 0x0e, 0x71, 0x6a, 0x02, 0x58, 0x48, 0x01,
	0x7f, 0x2a, 0x80, 0xe9, 0xad, 0x48, 0x2e, 0xdb, 0x37, 0x8d, 0x16, 0x26, 0x6e, 0x13, 0xcc, 0xd0,
	0x23, 0x95, 0xb0, 0x2b, 0xea, 0x95, 0x09, 0xd2, 0xce, 0xfe, 0xa8, 0x5a, 0xc8, 0xad, 0x9e, 0x07,
	0x33, 0xec, 0x1a, 0x14, 0x93, 0x11, 0xcb, 0x31, 0xe8, 0x17, 0x02, 0xa8, 0x70, 0x19, 0x1d, 0xa9,
	0xe9, 0x3b, 0x69, 0x4d, 0x6b, 0x93, 0x16, 0xe9, 0xf5, 0x84, 0xc9, 0x4b, 0xa0, 0x14, 0xf4, 0x34,
	0x2c, 0x83, 0xa9, 0xcd, 0xad, 0xdd, 0xc7, 0x6b, 0x0b, 0xa7, 0xc2, 0xc3, 0xf5, 0x05, 0x21, 0x3c,
	0x54, 0x17, 0x0a, 0xcd, 0x19, 0x30, 0x45, 0x7a, 0x40, 0xfe, 0xc1, 0x1c, 0x38, 0x1b, 0x6b, 0xd9,
	0xdd, 0x6d, 0xdd, 0x8b, 0x9d, 0xfd, 0x3e, 0xef, 0xec, 0x0d, 0xdf, 0x43, 0x6b, 0x59, 0x67, 0x5f,
	0x76, 0x4f, 0x8e, 0xb1, 0x32, 0x18, 0x18, 0xfa, 0xa5, 0x6f, 0x4c, 0xfe, 0x0d, 0x9b, 0xfc, 0x97,
	0x29, 0x93, 0x5f, 0x1e, 0xd2, 0x3d, 0x89, 0x8a, 0xbd, 0x1d, 0x46, 0xff, 0xdd, 0x84, 0xd1, 0x5f,
	0x1c, 0x2b, 0x7a, 0x02, 0xb3, 0xff, 0x22, 0x69, 0xf6, 0x13, 0xc6, 0x9c, 0xc8, 0xf0, 0x37, 0x33,
	0x86, 0x7f, 0x69, 0x7c, 0xf4, 0xac, 0xe9, 0xdf, 0x49, 0x99, 0xfe, 0xd2, 0xd8, 0x20, 0xaf, 0x61,
	0xfc, 0xdb, 0xc3, 0x8c, 0x7f, 0x7c, 0x57, 0xfc, 0x8f, 0x9b, 0xff, 0xcf, 0xc6, 0x9b, 0x7f, 0x2b,
	0x6d, 0xb4, 0xab, 0x13, 0xa6, 0xff, 0x35, 0x07, 0xc0, 0xaf, 0x27, 0x1c, 0x00, 0x5b, 0x69, 0x5d,
	0x8d, 0x57, 0x29, 0xd6, 0x7f, 0x6c, 0x08, 0xfc, 0x63, 0x1e, 0xc0, 0x40, 0xcf, 0xe3, 0x41, 0xdf,
	0x35, 0x62, 0xff, 0xbf, 0x0a, 0x4a, 0x3d, 0x7c, 0xb2, 0xce, 0x06, 0xc0, 0x39, 0xdf, 0x43, 0x1f,
	0x47, 0x03, 0x40, 0x1f, 0xe6, 0xf6, 0x04, 0x0e, 0xef, 0x12, 0x1a, 0x93, 0xd5, 0x5c, 0xf1, 0x3d,
	0x74, 0x89, 0xd1, 0xb2, 0x1c, 0x49, 0x5d, 0x0e, 0x12, 0x82, 0x97, 0x0f, 0x0d, 0x5d, 0xc7, 0x26,
	0x0d, 0xa1, 0xfe, 0xbf, 0x1b, 0xff, 0x17, 0x29, 0xe3, 0x4f, 0x9a, 0x49, 0xb2, 0x4a, 0x6f, 0x87,
	0xe7, 0x3f, 0x4a, 0x78, 0xbe, 0x94, 0xa7, 0x77, 0x02, 0xbb, 0x7f, 0x9a, 0xb4, 0xfb, 0xf1, 0xe1,
	0x26, 0x72, 0xfa, 0x35, 0x30, 0xcd, 0xcc, 0x75, 0x81, 0x74, 0x66, 0x36, 0x59, 0xb4, 0x9d, 0x64,
	0x8d, 0xe1, 0xe0, 0x1d, 0x70, 0xc6, 0x30, 0x5d, 0xda, 0x83, 0x7b, 0x3a, 0x3e, 0xb6, 0x71, 0xa7,
	0x1d, 0x3c, 0xe4, 0xef, 0x4a, 0x45, 0xa5, 0xd8, 0x3c, 0xed, 0x7b, 0x68, 0x86, 0x74, 0xf6, 0x8a,
	0x2c, 0x0a, 0x1a, 0x34, 0x4c, 0x97, 0x2c, 0x78, 0x2f, 0x02, 0xc2, 0x4f, 0x41, 0xc5, 0x30, 0xdd,
	0xba, 0xca, 0xda, 0x18, 0x4a, 0x45, 0x65, 0xaa, 0xf9, 0xb1, 0xef, 0xa1, 0x0f, 0xd2, 0xcd, 0x52,
	0x57, 0x43, 0xb5, 0x80, 0x30, 0x68, 0x13, 0x7f, 0x96, 0x19, 0x4e, 0x17, 0x72, 0x73, 0x91, 0x9d,
	0x4b, 0x1b, 0xa9, 0xb9, 0x24, 0xe7, 0xf1, 0x5f, 0x63, 0x24, 0x3d, 0x1c, 0x36, 0x92, 0x72, 0xfb,
	0x75, 0xf4, 0x34, 0x7a, 0xab, 0xa6, 0xce, 0xef, 0x8b, 0xd1, 0xd4, 0xb9, 0x9e, 0x74, 0xf7, 0x26,
	0xf2, 0x3d, 0xf4, 0x61, 0xf2, 0xa5, 0x95, 0xdc, 0x8e, 0xfb, 0x87, 0x25, 0x70, 0x03, 0x94, 0x0d,
	0x67, 0x8f, 0x71, 0x8b, 0xc4, 0x88, 0xb2, 0xc5, 0x67, 0x5c, 0xea, 0x47, 0xb3, 0x86, 0xc3, 0x16,
	0x6d, 0x84, 0x0e, 0x53, 0x22, 0x0e, 0x93, 0xf5, 0x3e, 0xc6, 0x4b, 0x1a, 0xcd, 0xbd, 0xf4, 0xc0,
	0xb9, 0x3c, 0xbe, 0xde, 0xd9, 0x31, 0xf3, 0x07, 0x21, 0x9e, 0x33, 0xb7, 0x52, 0x73, 0x86, 0xcd,
	0x81, 0x91, 0xbb, 0x97, 0x54, 0x39, 0x0a, 0x04, 0xbf, 0x95, 0x4d, 0xc0, 0xc8, 0xe4, 0x05, 0x09,
	0x08, 0xc8, 0x71, 0x0a, 0xae, 0x25, 0x53, 0x20, 0xf9, 0x1e, 0xfa, 0x68, 0x64, 0x0a, 0x02, 0x2a,
	0x85, 0x57, 0x9f, 0x27, 0x87, 0xf3, 0xed, 0x54, 0xf9, 0x2e, 0xfa, 0x1e, 0x3a, 0x97, 0x88, 0xf3,
	0x24, 0xe8, 0xc1, 0x11, 0x45, 0xfc, 0x77, 0xcd, 0xdc, 0xdf, 0x94, 0xc0, 0x3b, 0xc1, 0xe2, 0x0f,
	0xec, 0xb6, 0xa9, 0x1f, 0xb7, 0x6d, 0x6c, 0xba, 0xf0, 0x26, 0x28, 0x18, 0x7a, 0xe2, 0x4b, 0x1a,
	0xaf, 0x92, 0x43, 0x4a, 0xad, 0x7b, 0xb2, 0x14, 0x0e, 0x55, 0xad, 0x60, 0xe8, 0xb0, 0x0e, 0x8a,
	0x5f, 0xb5, 0xfb, 0x23, 0x4b, 0xc4, 0x73, 0xbf, 0xd7, 0xee, 0xcb, 0x5a, 0x80, 0x86, 0xb7, 0xb9,
	0xfe, 0x2f, 0x12, 0x7b, 0x48, 0x7e, 0x46, 0xe1, 0x58, 0xc3, 0xbc, 0xa5, 0x09, 0x66, 0x8f, 0x6d,
	0xc3, 0xb2, 0x0d, 0xf7, 0x84, 0x95, 0xe8, 0x13, 0xdf, 0x43, 0xf2, 0xc8, 0x85, 0xb7, 0x19, 0x58,
	0xd6, 0x22, 0x1e, 0x7c, 0x00, 0x80, 0x6d, 0x38, 0xbd, 0x3d, 0xa7, 0x63, 0xd9, 0x98, 0x8c, 0xdf,
	0x42, 0x53, 0xf1, 0x3d, 0x74, 0x61, 0x64, 0x14, 0xcd, 0x70, 0x7a, 0xd2, 0x4e, 0x00, 0x97, 0xb5,
	0x72, 0xc0, 0x25, 0xc7, 0xd5, 0xbf, 0x0a, 0x9c, 0x03, 0xdc, 0xa0, 0xd9, 0xa0, 0x99, 0xcc, 0x17,
	0x15, 0x72, 0x58, 0x4a, 0x5a, 0xa0, 0x1c, 0xee, 0x2f, 0x28, 0x72, 0x31, 0xf3, 0x21, 0x61, 0x58,
	0x4e, 0xa2, 0x03, 0x55, 0x8b, 0xd9, 0xd5, 0xfb, 0xbc, 0xd5, 0xdc, 0xe4, 0x15, 0x2d, 0xf9, 0x1e,
	0x3a, 0x3f, 0x56, 0x91, 0x4a, 0x25, 0xc9, 0x2f, 0x0a, 0xa0, 0x12, 0x80, 0xb6, 0xc9, 0xed, 0x75,
	0x78, 0x95, 0xeb, 0x92, 0x6c, 0x2f, 0x33, 0x54, 0xb6, 0x43, 0x6e, 0x83, 0x32, 0x5d, 0x60, 0xcf,
	0x60, 0x6e, 0xc7, 0x9e, 0xa8, 0x00, 0x74, 0xd0, 0x53, 0x52, 0x9b, 0xdb, 0x08, 0x7e, 0xd1, 0x6b,
	0xb3, 0xf4, 0xa4, 0x15, 0x78, 0xd9, 0x6c, 0xe7, 0xd0, 0xe8, 0xeb, 0x36, 0x36, 0x59, 0xaf, 0x2c,
	0x26, 0xf2, 0xc2, 0xd6, 0xad, 0x7d, 0x1e, 0x80, 0xd6, 0x35, 0x7c, 0xa0, 0x45, 0x78, 0xb8, 0x4a,
	0x37, 0x5f, 0x22, 0x8b, 0x66, 0x1d, 0x30, 0x94, 0x1c, 0x35, 0x66, 0xf5, 0x29, 0x28, 0x47, 0x71,
	0xe0, 0x03, 0xb6, 0xf2, 0x5e, 0xb4, 0xeb, 0x65, 0xdf, 0x43, 0x0a, 0xaf, 0x9b, 0x82, 0x03, 0xc9,
	0xcb, 0xa6, 0xb5, 0x72, 0xd0, 0x5b, 0xe9, 0x58, 0xa6, 0xe3, 0xda, 0x6d, 0xc3, 0x74, 0x65, 0x6d,
	0x86, 0xb0, 0x5b, 0xba, 0x6c, 0x03, 0x10, 0x83, 0x61, 0x83, 0x4b, 0xe3, 0x05, 0xdf, 0x43, 0xc9,
	0x77, 0x53, 0x0a, 0xca, 0x66, 0xb1, 0xc6, 0x3f, 0x67, 0xd9, 0xd7, 0x0e, 0x46, 0x8b, 0x76, 0x22,
	0xff, 0xa4, 0xc0, 0x3d, 0xe6, 0x6c, 0xe5, 0x09, 0x1e, 0xf3, 0xce, 0x88, 0xe5, 0x6f, 0x64, 0x8b,
	0x48, 0x5f, 0xd1, 0x86, 0x26, 0x83, 0xaf, 0xdf, 0x63, 0x2e, 0x8b, 0x45, 0x42, 0x54, 0x7d, 0x0f,
	0xd5, 0x12, 0xd5, 0xe7, 0x44, 0x8e, 0xc9, 0x65, 0xe8, 0x37, 0xa5, 0x3c, 0xbf, 0xe9, 0xa4, 0x93,
	0xf1, 0x43, 0x01, 0x2c, 0xa4, 0x17, 0x82, 0x1b, 0x5c, 0x36, 0x2e, 0xfb, 0x1e, 0xfa, 0x24, 0x19,
	0x28, 0x37, 0x1d, 0x0d, 0xbe, 0x1a, 0xb2, 0xef, 0xa1, 0xc5, 0xd1, 0xe4, 0x58, 0xc6, 0x2f, 0x0b,
	0xe0, 0x5d, 0x22, 0x43, 0xe5, 0x75, 0xdc, 0xe2, 0x74, 0x5c, 0xf1, 0x3d, 0xb4, 0x94, 0x0c, 0xa5,
	0xe6, 0x0a, 0xf9, 0x34, 0x5b, 0x97, 0xf8, 0xf7, 0xd2, 0x88, 0xf4, 0xf2, 0xd5, 0xd9, 0xca, 0x54,
	0xa7, 0xee, 0x7b, 0x68, 0x35, 0x41, 0xaf, 0xbf, 0x42, 0x79, 0xae, 0xf2, 0xe5, 0xa1, 0x5f, 0xdc,
	0x46, 0xef, 0x26, 0xce, 0xcc, 0x8f, 0x04, 0x96, 0x99, 0xfa, 0x2b, 0x64, 0xa6, 0x9e, 0x9b, 0x99,
	0xab, 0x7c, 0x89, 0x86, 0x28, 0xa9, 0x0f, 0x57, 0xf2, 0x47, 0x81, 0x37, 0x3d, 0x15, 0x7e, 0xc6,
	0x69, 0x58, 0xf3, 0x3d, 0xb4, 0x3c, 0xc4, 0x41, 0x54, 0x7e, 0x75, 0xfe, 0xc3, 0xe4, 0x9b, 0xf0,
	0x3f, 0xe6, 0x61, 0xc5, 0x5c, 0x0f, 0x53, 0xb9, 0x1d, 0xfc, 0xbc, 0xc0, 0xd9, 0x8d, 0x0a, 0xef,
	0x70, 0x1b, 0x58, 0xf5, 0x3d, 0x74, 0x25, 0xeb, 0x1b, 0xf9, 0xfa, 0x6f, 0x66, 0xf5, 0x53, 0xff,
	0xe1, 0xf4, 0x33, 0x15, 0x69, 0xed, 0xdf, 0x07, 0xf3, 0xdd, 0x78, 0x67, 0x71, 0x8f, 0xad, 0xfb,
	0x1e, 0x5a, 0xc9, 0xd9, 0xff, 0x90, 0x0e, 0x3b, 0xcd, 0x05, 0x6a, 0x45, 0x76, 0x58, 0xca, 0xb3,
	0x43, 0x3e, 0x29, 0xbf, 0x4b, 0x94, 0xb5, 0x3e, 0xd1, 0x2c, 0xab, 0xbf, 0xf1, 0x59, 0x36, 0x51,
	0x2d, 0xeb, 0x23, 0x65, 0x37, 0x26, 0x92, 0xdd, 0xf8, 0xef, 0xc8, 0x6e, 0x70, 0xb2, 0x7f, 0x2b,
	0x80, 0xb9, 0x78, 0x22, 0x6c, 0x37, 0xe0, 0x35, 0x4e, 0x77, 0xf6, 0xb5, 0x28, 0x84, 0x65, 0x85,
	0x4f, 0xde, 0x7b, 0x8d, 0xb4, 0xe8, 0x35, 0x5e, 0x74, 0xf6, 0x57, 0x4c, 0xb4, 0x66, 0xac, 0xfa,
	0x45, 0x81, 0x4e, 0x89, 0x9d, 0x43, 0xcb, 0x76, 0x3f, 0x37, 0xec, 0xce, 0xc0, 0x70, 0xc7, 0x4c,
	0x09, 0x1e, 0x9a, 0x55, 0xdf, 0xe3, 0xcc, 0x95, 0x8a, 0xdf, 0xf6, 0x3d, 0xf4, 0x28, 0x77, 0xde,
	0x8f, 0x7f, 0xb1, 0x58, 0xd6, 0x0d, 0x1b, 0x77, 0x5c, 0xc3, 0x32, 0x03, 0xe5, 0x91, 0xf3, 0xfe,
	0x58, 0x00, 0x0b, 0x5d, 0x75, 0xaf, 0x1b, 0xb9, 0x5a, 0xfc, 0xb8, 0x7d, 0xe9, 0x7b, 0xe8, 0xd9,
	0x24, 0x53, 0x25, 0x6c, 0x05, 0x75, 0x9c, 0xe3, 0x27, 0x35, 0xcc, 0x77, 0xb9, 0x70, 0x2d, 0xbd,
	0x79, 0xfd, 0x4f, 0x2f, 0x17, 0x85, 0x3f, 0xbf, 0x5c, 0x14, 0xfe, 0xf6, 0x72, 0x51, 0xf8, 0xd5,
	0xdf, 0x17, 0x4f, 0x81, 0x0f, 0x0c, 0xab, 0xe6, 0xb8, 0xed, 0x4e, 0xcf, 0xb6, 0xbe, 0xa6, 0x9f,
	0x7b, 0xc2, 0x77, 0xb8, 0x67, 0xe1, 0xbf, 0x07, 0xfc, 0x53, 0x10, 0xf6, 0xa7, 0xc9, 0xad, 0xfa,
	0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x34, 0xc7, 0x0c, 0x47, 0x20, 0x00, 0x00,
}

func (m *TestSingleKeyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bytess) > 0 {
		i -= len(m.Bytess)
		copy(dAtA[i:], m.Bytess)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Bytess)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Oneof != nil {
		{
			size := m.Oneof.Size()
			i -= size
			if _, err := m.Oneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Nested) > 0 {
		for iNdEx := len(m.Nested) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nested[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Embedded != nil {
		{
			size, err := m.Embedded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Enums) > 0 {
		dAtA3 := make([]byte, len(m.Enums)*10)
		var j2 int
		for _, num := range m.Enums {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTest(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x5a
	}
	if m.Enum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Enum))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Float != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Int64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x30
	}
	if m.Uint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Uint64))
		i--
		dAtA[i] = 0x28
	}
	if m.Bool {
		i--
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.StringSlice) > 0 {
		for iNdEx := len(m.StringSlice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StringSlice[iNdEx])
			copy(dAtA[i:], m.StringSlice[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.StringSlice[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_Oneofstring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Oneofstring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Oneofstring)
	copy(dAtA[i:], m.Oneofstring)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Oneofstring)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *TestSingleKeyStruct_Oneofnested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Oneofnested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oneofnested != nil {
		{
			size, err := m.Oneofnested.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *TestSingleKeyStruct_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_Nested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_Nested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Nested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nested2 != nil {
		{
			size, err := m.Nested2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_Nested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_Nested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_Nested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_OneOfNested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_OneOfNested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_OneOfNested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nested2 != nil {
		{
			size, err := m.Nested2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bytess) > 0 {
		i -= len(m.Bytess)
		copy(dAtA[i:], m.Bytess)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Bytess)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Oneof != nil {
		{
			size := m.Oneof.Size()
			i -= size
			if _, err := m.Oneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Nested) > 0 {
		for iNdEx := len(m.Nested) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nested[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Embedded != nil {
		{
			size, err := m.Embedded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Enums) > 0 {
		dAtA10 := make([]byte, len(m.Enums)*10)
		var j9 int
		for _, num := range m.Enums {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintTest(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x5a
	}
	if m.Enum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Enum))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Float != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Int64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x30
	}
	if m.Uint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Uint64))
		i--
		dAtA[i] = 0x28
	}
	if m.Bool {
		i--
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.StringSlice) > 0 {
		for iNdEx := len(m.StringSlice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StringSlice[iNdEx])
			copy(dAtA[i:], m.StringSlice[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.StringSlice[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_Oneofstring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Oneofstring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Oneofstring)
	copy(dAtA[i:], m.Oneofstring)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Oneofstring)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *TestSingleUUIDKeyStruct_Oneofnested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Oneofnested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oneofnested != nil {
		{
			size, err := m.Oneofnested.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *TestSingleUUIDKeyStruct_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_Nested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_Nested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Nested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nested2 != nil {
		{
			size, err := m.Nested2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nested2 != nil {
		{
			size, err := m.Nested2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Int32Slice) > 0 {
		dAtA16 := make([]byte, len(m.Int32Slice)*10)
		var j15 int
		for _, num1 := range m.Int32Slice {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintTest(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.IntSliceDeprecated) > 0 {
		dAtA18 := make([]byte, len(m.IntSliceDeprecated)*10)
		var j17 int
		for _, num1 := range m.IntSliceDeprecated {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintTest(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.String_) > 0 {
		i -= len(m.String_)
		copy(dAtA[i:], m.String_)
		i = encodeVarintTest(dAtA, i, uint64(len(m.String_)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Oneof != nil {
		{
			size := m.Oneof.Size()
			i -= size
			if _, err := m.Oneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Nested) > 0 {
		for iNdEx := len(m.Nested) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nested[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Embedded != nil {
		{
			size, err := m.Embedded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Enums) > 0 {
		dAtA21 := make([]byte, len(m.Enums)*10)
		var j20 int
		for _, num := range m.Enums {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintTest(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x5a
	}
	if m.Enum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Enum))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Float != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Int64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x30
	}
	if m.Uint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Uint64))
		i--
		dAtA[i] = 0x28
	}
	if m.Bool {
		i--
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.StringSlice) > 0 {
		for iNdEx := len(m.StringSlice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StringSlice[iNdEx])
			copy(dAtA[i:], m.StringSlice[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.StringSlice[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Key2) > 0 {
		i -= len(m.Key2)
		copy(dAtA[i:], m.Key2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Key2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key1) > 0 {
		i -= len(m.Key1)
		copy(dAtA[i:], m.Key1)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Key1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_Oneofstring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Oneofstring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Oneofstring)
	copy(dAtA[i:], m.Oneofstring)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Oneofstring)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *TestMultiKeyStruct_Oneofnested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Oneofnested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oneofnested != nil {
		{
			size, err := m.Oneofnested.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *TestMultiKeyStruct_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded) > 0 {
		i -= len(m.Embedded)
		copy(dAtA[i:], m.Embedded)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Embedded)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_Nested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_Nested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Nested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Int64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x20
	}
	if m.IsNested {
		i--
		if m.IsNested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Nested2 != nil {
		{
			size, err := m.Nested2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_Nested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_Nested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_Nested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Int64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x20
	}
	if m.IsNested {
		i--
		if m.IsNested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_OneOfNested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_OneOfNested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_OneOfNested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested) > 0 {
		i -= len(m.Nested)
		copy(dAtA[i:], m.Nested)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nested2) > 0 {
		i -= len(m.Nested2)
		copy(dAtA[i:], m.Nested2)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Nested2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TestGrandparent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGrandparent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGrandparent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RiskScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RiskScore))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Priority != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Embedded) > 0 {
		for iNdEx := len(m.Embedded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Embedded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestGrandparent_Embedded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGrandparent_Embedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGrandparent_Embedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Embedded2) > 0 {
		for iNdEx := len(m.Embedded2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Embedded2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestGrandparent_Embedded_Embedded2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGrandparent_Embedded_Embedded2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGrandparent_Embedded_Embedded2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestParent1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestParent1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestParent1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestParent1_Child1Ref) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestParent1_Child1Ref) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestParent1_Child1Ref) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChildId) > 0 {
		i -= len(m.ChildId)
		copy(dAtA[i:], m.ChildId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ChildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestChild1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestChild1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestChild1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestGrandChild1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGrandChild1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGrandChild1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChildId) > 0 {
		i -= len(m.ChildId)
		copy(dAtA[i:], m.ChildId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ChildId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestGGrandChild1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGGrandChild1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGGrandChild1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestG2GrandChild1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestG2GrandChild1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestG2GrandChild1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChildId) > 0 {
		i -= len(m.ChildId)
		copy(dAtA[i:], m.ChildId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ChildId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestG3GrandChild1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestG3GrandChild1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestG3GrandChild1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestParent2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestParent2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestParent2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestChild2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestChild2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestChild2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GrandparentId) > 0 {
		i -= len(m.GrandparentId)
		copy(dAtA[i:], m.GrandparentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.GrandparentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestParent3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestParent3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestParent3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestParent4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestParent4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestParent4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestChild1P4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestChild1P4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestChild1P4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestShortCircuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestShortCircuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestShortCircuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.G2GrandchildId) > 0 {
		i -= len(m.G2GrandchildId)
		copy(dAtA[i:], m.G2GrandchildId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.G2GrandchildId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChildId) > 0 {
		i -= len(m.ChildId)
		copy(dAtA[i:], m.ChildId)
		i = encodeVarintTest(dAtA, i, uint64(len(m.ChildId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestSingleKeyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.StringSlice) > 0 {
		for _, s := range m.StringSlice {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Bool {
		n += 2
	}
	if m.Uint64 != 0 {
		n += 1 + sovTest(uint64(m.Uint64))
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.Float != 0 {
		n += 5
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Enum != 0 {
		n += 1 + sovTest(uint64(m.Enum))
	}
	if len(m.Enums) > 0 {
		l = 0
		for _, e := range m.Enums {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	if m.Embedded != nil {
		l = m.Embedded.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Nested) > 0 {
		for _, e := range m.Nested {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Oneof != nil {
		n += m.Oneof.Size()
	}
	l = len(m.Bytess)
	if l > 0 {
		n += 2 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_Oneofstring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oneofstring)
	n += 1 + l + sovTest(uint64(l))
	return n
}
func (m *TestSingleKeyStruct_Oneofnested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oneofnested != nil {
		l = m.Oneofnested.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}
func (m *TestSingleKeyStruct_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_Embedded_Embedded2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_Nested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Nested2 != nil {
		l = m.Nested2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_Nested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_OneOfNested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Nested2 != nil {
		l = m.Nested2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleKeyStruct_OneOfNested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.StringSlice) > 0 {
		for _, s := range m.StringSlice {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Bool {
		n += 2
	}
	if m.Uint64 != 0 {
		n += 1 + sovTest(uint64(m.Uint64))
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.Float != 0 {
		n += 5
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Enum != 0 {
		n += 1 + sovTest(uint64(m.Enum))
	}
	if len(m.Enums) > 0 {
		l = 0
		for _, e := range m.Enums {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	if m.Embedded != nil {
		l = m.Embedded.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Nested) > 0 {
		for _, e := range m.Nested {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Oneof != nil {
		n += m.Oneof.Size()
	}
	l = len(m.Bytess)
	if l > 0 {
		n += 2 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_Oneofstring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oneofstring)
	n += 1 + l + sovTest(uint64(l))
	return n
}
func (m *TestSingleUUIDKeyStruct_Oneofnested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oneofnested != nil {
		l = m.Oneofnested.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}
func (m *TestSingleUUIDKeyStruct_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_Nested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Nested2 != nil {
		l = m.Nested2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_Nested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_OneOfNested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Nested2 != nil {
		l = m.Nested2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key1)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Key2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.StringSlice) > 0 {
		for _, s := range m.StringSlice {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Bool {
		n += 2
	}
	if m.Uint64 != 0 {
		n += 1 + sovTest(uint64(m.Uint64))
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.Float != 0 {
		n += 5
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Enum != 0 {
		n += 1 + sovTest(uint64(m.Enum))
	}
	if len(m.Enums) > 0 {
		l = 0
		for _, e := range m.Enums {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	if m.Embedded != nil {
		l = m.Embedded.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Nested) > 0 {
		for _, e := range m.Nested {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Oneof != nil {
		n += m.Oneof.Size()
	}
	l = len(m.String_)
	if l > 0 {
		n += 2 + l + sovTest(uint64(l))
	}
	if len(m.IntSliceDeprecated) > 0 {
		l = 0
		for _, e := range m.IntSliceDeprecated {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Int32Slice) > 0 {
		l = 0
		for _, e := range m.Int32Slice {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_Oneofstring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oneofstring)
	n += 1 + l + sovTest(uint64(l))
	return n
}
func (m *TestMultiKeyStruct_Oneofnested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oneofnested != nil {
		l = m.Oneofnested.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}
func (m *TestMultiKeyStruct_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_Embedded_Embedded2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Embedded)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_Nested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Nested2 != nil {
		l = m.Nested2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.IsNested {
		n += 2
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_Nested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.IsNested {
		n += 2
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_OneOfNested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestMultiKeyStruct_OneOfNested_Nested2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nested2)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGrandparent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Embedded) > 0 {
		for _, e := range m.Embedded {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.Priority != 0 {
		n += 1 + sovTest(uint64(m.Priority))
	}
	if m.RiskScore != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGrandparent_Embedded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Embedded2) > 0 {
		for _, e := range m.Embedded2 {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGrandparent_Embedded_Embedded2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestParent1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestParent1_Child1Ref) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestChild1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGrandChild1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGGrandChild1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestG2GrandChild1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestG3GrandChild1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestParent2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestChild2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.GrandparentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestParent3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestParent4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestChild1P4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestShortCircuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.G2GrandchildId)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestSingleKeyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSingleKeyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSingleKeyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSlice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSlice = append(m.StringSlice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			m.Enum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enum |= TestSingleKeyStruct_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v TestSingleKeyStruct_Enum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= TestSingleKeyStruct_Enum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enums = append(m.Enums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Enums) == 0 {
					m.Enums = make([]TestSingleKeyStruct_Enum, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v TestSingleKeyStruct_Enum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= TestSingleKeyStruct_Enum(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enums = append(m.Enums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enums", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Embedded == nil {
				m.Embedded = &TestSingleKeyStruct_Embedded{}
			}
			if err := m.Embedded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = append(m.Nested, &TestSingleKeyStruct_Nested{})
			if err := m.Nested[len(m.Nested)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oneof = &TestSingleKeyStruct_Oneofstring{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofnested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TestSingleKeyStruct_OneOfNested{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Oneof = &TestSingleKeyStruct_Oneofnested{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytess", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytess = append(m.Bytess[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytess == nil {
				m.Bytess = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_Embedded_Embedded2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_Nested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested2 == nil {
				m.Nested2 = &TestSingleKeyStruct_Nested_Nested2{}
			}
			if err := m.Nested2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_Nested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_OneOfNested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOfNested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOfNested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested2 == nil {
				m.Nested2 = &TestSingleKeyStruct_OneOfNested_Nested2{}
			}
			if err := m.Nested2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleKeyStruct_OneOfNested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSingleUUIDKeyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSingleUUIDKeyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSlice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSlice = append(m.StringSlice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			m.Enum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enum |= TestSingleUUIDKeyStruct_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v TestSingleUUIDKeyStruct_Enum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= TestSingleUUIDKeyStruct_Enum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enums = append(m.Enums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Enums) == 0 {
					m.Enums = make([]TestSingleUUIDKeyStruct_Enum, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v TestSingleUUIDKeyStruct_Enum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= TestSingleUUIDKeyStruct_Enum(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enums = append(m.Enums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enums", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Embedded == nil {
				m.Embedded = &TestSingleUUIDKeyStruct_Embedded{}
			}
			if err := m.Embedded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = append(m.Nested, &TestSingleUUIDKeyStruct_Nested{})
			if err := m.Nested[len(m.Nested)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oneof = &TestSingleUUIDKeyStruct_Oneofstring{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofnested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TestSingleUUIDKeyStruct_OneOfNested{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Oneof = &TestSingleUUIDKeyStruct_Oneofnested{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytess", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytess = append(m.Bytess[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytess == nil {
				m.Bytess = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_Embedded_Embedded2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_Nested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested2 == nil {
				m.Nested2 = &TestSingleUUIDKeyStruct_Nested_Nested2{}
			}
			if err := m.Nested2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_Nested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_OneOfNested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOfNested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOfNested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested2 == nil {
				m.Nested2 = &TestSingleUUIDKeyStruct_OneOfNested_Nested2{}
			}
			if err := m.Nested2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSingleUUIDKeyStruct_OneOfNested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMultiKeyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMultiKeyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSlice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSlice = append(m.StringSlice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			m.Enum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enum |= TestMultiKeyStruct_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v TestMultiKeyStruct_Enum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= TestMultiKeyStruct_Enum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enums = append(m.Enums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Enums) == 0 {
					m.Enums = make([]TestMultiKeyStruct_Enum, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v TestMultiKeyStruct_Enum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= TestMultiKeyStruct_Enum(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enums = append(m.Enums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enums", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Embedded == nil {
				m.Embedded = &TestMultiKeyStruct_Embedded{}
			}
			if err := m.Embedded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = append(m.Nested, &TestMultiKeyStruct_Nested{})
			if err := m.Nested[len(m.Nested)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oneof = &TestMultiKeyStruct_Oneofstring{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oneofnested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TestMultiKeyStruct_OneOfNested{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Oneof = &TestMultiKeyStruct_Oneofnested{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntSliceDeprecated = append(m.IntSliceDeprecated, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntSliceDeprecated) == 0 {
					m.IntSliceDeprecated = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntSliceDeprecated = append(m.IntSliceDeprecated, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntSliceDeprecated", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int32Slice = append(m.Int32Slice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Int32Slice) == 0 {
					m.Int32Slice = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int32Slice = append(m.Int32Slice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Slice", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_Embedded_Embedded2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_Nested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested2 == nil {
				m.Nested2 = &TestMultiKeyStruct_Nested_Nested2{}
			}
			if err := m.Nested2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNested = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_Nested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNested = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_OneOfNested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOfNested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOfNested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMultiKeyStruct_OneOfNested_Nested2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nested2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGrandparent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGrandparent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGrandparent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded = append(m.Embedded, &TestGrandparent_Embedded{})
			if err := m.Embedded[len(m.Embedded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RiskScore = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGrandparent_Embedded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embedded2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embedded2 = append(m.Embedded2, &TestGrandparent_Embedded_Embedded2{})
			if err := m.Embedded2[len(m.Embedded2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGrandparent_Embedded_Embedded2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embedded2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embedded2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestParent1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestParent1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestParent1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &TestParent1_Child1Ref{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestParent1_Child1Ref) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Child1Ref: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Child1Ref: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestChild1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestChild1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestChild1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGrandChild1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGrandChild1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGrandChild1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGGrandChild1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGGrandChild1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGGrandChild1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestG2GrandChild1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestG2GrandChild1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestG2GrandChild1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestG3GrandChild1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestG3GrandChild1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestG3GrandChild1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestParent2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestParent2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestParent2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestChild2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestChild2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestChild2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandparentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrandparentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestParent3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestParent3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestParent3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestParent4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestParent4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestParent4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestChild1P4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestChild1P4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestChild1P4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestShortCircuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestShortCircuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestShortCircuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G2GrandchildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G2GrandchildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
