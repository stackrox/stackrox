// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/external_backup.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type S3URLStyle int32

const (
	S3URLStyle_S3_URL_STYLE_UNSPECIFIED    S3URLStyle = 0
	S3URLStyle_S3_URL_STYLE_VIRTUAL_HOSTED S3URLStyle = 1
	S3URLStyle_S3_URL_STYLE_PATH           S3URLStyle = 2
)

// Enum value maps for S3URLStyle.
var (
	S3URLStyle_name = map[int32]string{
		0: "S3_URL_STYLE_UNSPECIFIED",
		1: "S3_URL_STYLE_VIRTUAL_HOSTED",
		2: "S3_URL_STYLE_PATH",
	}
	S3URLStyle_value = map[string]int32{
		"S3_URL_STYLE_UNSPECIFIED":    0,
		"S3_URL_STYLE_VIRTUAL_HOSTED": 1,
		"S3_URL_STYLE_PATH":           2,
	}
)

func (x S3URLStyle) Enum() *S3URLStyle {
	p := new(S3URLStyle)
	*p = x
	return p
}

func (x S3URLStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3URLStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_external_backup_proto_enumTypes[0].Descriptor()
}

func (S3URLStyle) Type() protoreflect.EnumType {
	return &file_storage_external_backup_proto_enumTypes[0]
}

func (x S3URLStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Next available tag: 10
type ExternalBackup struct {
	state                             protoimpl.MessageState                  `protogen:"opaque.v1"`
	xxx_hidden_Id                     *string                                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name                   *string                                 `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Type                   *string                                 `protobuf:"bytes,3,opt,name=type"`
	xxx_hidden_Schedule               *Schedule                               `protobuf:"bytes,4,opt,name=schedule"`
	xxx_hidden_BackupsToKeep          int32                                   `protobuf:"varint,5,opt,name=backups_to_keep,json=backupsToKeep"`
	xxx_hidden_Config                 isExternalBackup_Config                 `protobuf_oneof:"Config"`
	xxx_hidden_IncludeCertificatesOpt isExternalBackup_IncludeCertificatesOpt `protobuf_oneof:"include_certificates_opt"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExternalBackup) Reset() {
	*x = ExternalBackup{}
	mi := &file_storage_external_backup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalBackup) ProtoMessage() {}

func (x *ExternalBackup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExternalBackup) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ExternalBackup) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ExternalBackup) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *ExternalBackup) GetSchedule() *Schedule {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Schedule) {
				protoimpl.X.UnmarshalField(x, 4)
			}
			var rv *Schedule
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Schedule), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *ExternalBackup) GetBackupsToKeep() int32 {
	if x != nil {
		return x.xxx_hidden_BackupsToKeep
	}
	return 0
}

func (x *ExternalBackup) GetS3() *S3Config {
	if x != nil {
		if x, ok := x.xxx_hidden_Config.(*externalBackup_S3); ok {
			return x.S3
		}
	}
	return nil
}

func (x *ExternalBackup) GetGcs() *GCSConfig {
	if x != nil {
		if x, ok := x.xxx_hidden_Config.(*externalBackup_Gcs); ok {
			return x.Gcs
		}
	}
	return nil
}

func (x *ExternalBackup) GetS3Compatible() *S3Compatible {
	if x != nil {
		if x, ok := x.xxx_hidden_Config.(*externalBackup_S3Compatible); ok {
			return x.S3Compatible
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/external_backup.proto.
func (x *ExternalBackup) GetIncludeCertificates() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_IncludeCertificatesOpt.(*externalBackup_IncludeCertificates); ok {
			return x.IncludeCertificates
		}
	}
	return false
}

func (x *ExternalBackup) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ExternalBackup) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ExternalBackup) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *ExternalBackup) SetSchedule(v *Schedule) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Schedule, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
	}
}

func (x *ExternalBackup) SetBackupsToKeep(v int32) {
	x.xxx_hidden_BackupsToKeep = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *ExternalBackup) SetS3(v *S3Config) {
	if v == nil {
		x.xxx_hidden_Config = nil
		return
	}
	x.xxx_hidden_Config = &externalBackup_S3{v}
}

func (x *ExternalBackup) SetGcs(v *GCSConfig) {
	if v == nil {
		x.xxx_hidden_Config = nil
		return
	}
	x.xxx_hidden_Config = &externalBackup_Gcs{v}
}

func (x *ExternalBackup) SetS3Compatible(v *S3Compatible) {
	if v == nil {
		x.xxx_hidden_Config = nil
		return
	}
	x.xxx_hidden_Config = &externalBackup_S3Compatible{v}
}

// Deprecated: Marked as deprecated in storage/external_backup.proto.
func (x *ExternalBackup) SetIncludeCertificates(v bool) {
	x.xxx_hidden_IncludeCertificatesOpt = &externalBackup_IncludeCertificates{v}
}

func (x *ExternalBackup) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ExternalBackup) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ExternalBackup) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ExternalBackup) HasSchedule() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ExternalBackup) HasBackupsToKeep() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ExternalBackup) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Config != nil
}

func (x *ExternalBackup) HasS3() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Config.(*externalBackup_S3)
	return ok
}

func (x *ExternalBackup) HasGcs() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Config.(*externalBackup_Gcs)
	return ok
}

func (x *ExternalBackup) HasS3Compatible() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Config.(*externalBackup_S3Compatible)
	return ok
}

func (x *ExternalBackup) HasIncludeCertificatesOpt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_IncludeCertificatesOpt != nil
}

// Deprecated: Marked as deprecated in storage/external_backup.proto.
func (x *ExternalBackup) HasIncludeCertificates() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_IncludeCertificatesOpt.(*externalBackup_IncludeCertificates)
	return ok
}

func (x *ExternalBackup) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ExternalBackup) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *ExternalBackup) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = nil
}

func (x *ExternalBackup) ClearSchedule() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Schedule, (*Schedule)(nil))
}

func (x *ExternalBackup) ClearBackupsToKeep() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_BackupsToKeep = 0
}

func (x *ExternalBackup) ClearConfig() {
	x.xxx_hidden_Config = nil
}

func (x *ExternalBackup) ClearS3() {
	if _, ok := x.xxx_hidden_Config.(*externalBackup_S3); ok {
		x.xxx_hidden_Config = nil
	}
}

func (x *ExternalBackup) ClearGcs() {
	if _, ok := x.xxx_hidden_Config.(*externalBackup_Gcs); ok {
		x.xxx_hidden_Config = nil
	}
}

func (x *ExternalBackup) ClearS3Compatible() {
	if _, ok := x.xxx_hidden_Config.(*externalBackup_S3Compatible); ok {
		x.xxx_hidden_Config = nil
	}
}

func (x *ExternalBackup) ClearIncludeCertificatesOpt() {
	x.xxx_hidden_IncludeCertificatesOpt = nil
}

// Deprecated: Marked as deprecated in storage/external_backup.proto.
func (x *ExternalBackup) ClearIncludeCertificates() {
	if _, ok := x.xxx_hidden_IncludeCertificatesOpt.(*externalBackup_IncludeCertificates); ok {
		x.xxx_hidden_IncludeCertificatesOpt = nil
	}
}

const ExternalBackup_Config_not_set_case case_ExternalBackup_Config = 0
const ExternalBackup_S3_case case_ExternalBackup_Config = 6
const ExternalBackup_Gcs_case case_ExternalBackup_Config = 7
const ExternalBackup_S3Compatible_case case_ExternalBackup_Config = 9

func (x *ExternalBackup) WhichConfig() case_ExternalBackup_Config {
	if x == nil {
		return ExternalBackup_Config_not_set_case
	}
	switch x.xxx_hidden_Config.(type) {
	case *externalBackup_S3:
		return ExternalBackup_S3_case
	case *externalBackup_Gcs:
		return ExternalBackup_Gcs_case
	case *externalBackup_S3Compatible:
		return ExternalBackup_S3Compatible_case
	default:
		return ExternalBackup_Config_not_set_case
	}
}

const ExternalBackup_IncludeCertificatesOpt_not_set_case case_ExternalBackup_IncludeCertificatesOpt = 0
const ExternalBackup_IncludeCertificates_case case_ExternalBackup_IncludeCertificatesOpt = 8

func (x *ExternalBackup) WhichIncludeCertificatesOpt() case_ExternalBackup_IncludeCertificatesOpt {
	if x == nil {
		return ExternalBackup_IncludeCertificatesOpt_not_set_case
	}
	switch x.xxx_hidden_IncludeCertificatesOpt.(type) {
	case *externalBackup_IncludeCertificates:
		return ExternalBackup_IncludeCertificates_case
	default:
		return ExternalBackup_IncludeCertificatesOpt_not_set_case
	}
}

type ExternalBackup_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id            *string
	Name          *string
	Type          *string
	Schedule      *Schedule
	BackupsToKeep *int32
	// Fields of oneof xxx_hidden_Config:
	S3           *S3Config
	Gcs          *GCSConfig
	S3Compatible *S3Compatible
	// -- end of xxx_hidden_Config
	// Fields of oneof xxx_hidden_IncludeCertificatesOpt:
	// Deprecated: Marked as deprecated in storage/external_backup.proto.
	IncludeCertificates *bool
	// -- end of xxx_hidden_IncludeCertificatesOpt
}

func (b0 ExternalBackup_builder) Build() *ExternalBackup {
	m0 := &ExternalBackup{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Name = b.Name
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Type = b.Type
	}
	if b.Schedule != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_Schedule = b.Schedule
	}
	if b.BackupsToKeep != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_BackupsToKeep = *b.BackupsToKeep
	}
	if b.S3 != nil {
		x.xxx_hidden_Config = &externalBackup_S3{b.S3}
	}
	if b.Gcs != nil {
		x.xxx_hidden_Config = &externalBackup_Gcs{b.Gcs}
	}
	if b.S3Compatible != nil {
		x.xxx_hidden_Config = &externalBackup_S3Compatible{b.S3Compatible}
	}
	if b.IncludeCertificates != nil {
		x.xxx_hidden_IncludeCertificatesOpt = &externalBackup_IncludeCertificates{*b.IncludeCertificates}
	}
	return m0
}

type case_ExternalBackup_Config protoreflect.FieldNumber

func (x case_ExternalBackup_Config) String() string {
	md := file_storage_external_backup_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ExternalBackup_IncludeCertificatesOpt protoreflect.FieldNumber

func (x case_ExternalBackup_IncludeCertificatesOpt) String() string {
	md := file_storage_external_backup_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isExternalBackup_Config interface {
	isExternalBackup_Config()
}

type externalBackup_S3 struct {
	S3 *S3Config `protobuf:"bytes,6,opt,name=s3,oneof"`
}

type externalBackup_Gcs struct {
	Gcs *GCSConfig `protobuf:"bytes,7,opt,name=gcs,oneof"`
}

type externalBackup_S3Compatible struct {
	S3Compatible *S3Compatible `protobuf:"bytes,9,opt,name=s3compatible,oneof"`
}

func (*externalBackup_S3) isExternalBackup_Config() {}

func (*externalBackup_Gcs) isExternalBackup_Config() {}

func (*externalBackup_S3Compatible) isExternalBackup_Config() {}

type isExternalBackup_IncludeCertificatesOpt interface {
	isExternalBackup_IncludeCertificatesOpt()
}

type externalBackup_IncludeCertificates struct {
	// Deprecated: Marked as deprecated in storage/external_backup.proto.
	IncludeCertificates bool `protobuf:"varint,8,opt,name=include_certificates,json=includeCertificates,oneof"`
}

func (*externalBackup_IncludeCertificates) isExternalBackup_IncludeCertificatesOpt() {}

// S3Config configures the backup integration with AWS S3.
type S3Config struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Bucket          *string                `protobuf:"bytes,1,opt,name=bucket"`
	xxx_hidden_UseIam          bool                   `protobuf:"varint,2,opt,name=use_iam,json=useIam"`
	xxx_hidden_AccessKeyId     *string                `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId"`
	xxx_hidden_SecretAccessKey *string                `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey"`
	xxx_hidden_Region          *string                `protobuf:"bytes,5,opt,name=region"`
	xxx_hidden_ObjectPrefix    *string                `protobuf:"bytes,6,opt,name=object_prefix,json=objectPrefix"`
	xxx_hidden_Endpoint        *string                `protobuf:"bytes,7,opt,name=endpoint"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	mi := &file_storage_external_backup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *S3Config) GetBucket() string {
	if x != nil {
		if x.xxx_hidden_Bucket != nil {
			return *x.xxx_hidden_Bucket
		}
		return ""
	}
	return ""
}

func (x *S3Config) GetUseIam() bool {
	if x != nil {
		return x.xxx_hidden_UseIam
	}
	return false
}

func (x *S3Config) GetAccessKeyId() string {
	if x != nil {
		if x.xxx_hidden_AccessKeyId != nil {
			return *x.xxx_hidden_AccessKeyId
		}
		return ""
	}
	return ""
}

func (x *S3Config) GetSecretAccessKey() string {
	if x != nil {
		if x.xxx_hidden_SecretAccessKey != nil {
			return *x.xxx_hidden_SecretAccessKey
		}
		return ""
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil {
		if x.xxx_hidden_Region != nil {
			return *x.xxx_hidden_Region
		}
		return ""
	}
	return ""
}

func (x *S3Config) GetObjectPrefix() string {
	if x != nil {
		if x.xxx_hidden_ObjectPrefix != nil {
			return *x.xxx_hidden_ObjectPrefix
		}
		return ""
	}
	return ""
}

func (x *S3Config) GetEndpoint() string {
	if x != nil {
		if x.xxx_hidden_Endpoint != nil {
			return *x.xxx_hidden_Endpoint
		}
		return ""
	}
	return ""
}

func (x *S3Config) SetBucket(v string) {
	x.xxx_hidden_Bucket = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *S3Config) SetUseIam(v bool) {
	x.xxx_hidden_UseIam = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *S3Config) SetAccessKeyId(v string) {
	x.xxx_hidden_AccessKeyId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *S3Config) SetSecretAccessKey(v string) {
	x.xxx_hidden_SecretAccessKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *S3Config) SetRegion(v string) {
	x.xxx_hidden_Region = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *S3Config) SetObjectPrefix(v string) {
	x.xxx_hidden_ObjectPrefix = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *S3Config) SetEndpoint(v string) {
	x.xxx_hidden_Endpoint = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *S3Config) HasBucket() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *S3Config) HasUseIam() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *S3Config) HasAccessKeyId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *S3Config) HasSecretAccessKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *S3Config) HasRegion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *S3Config) HasObjectPrefix() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *S3Config) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *S3Config) ClearBucket() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Bucket = nil
}

func (x *S3Config) ClearUseIam() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UseIam = false
}

func (x *S3Config) ClearAccessKeyId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_AccessKeyId = nil
}

func (x *S3Config) ClearSecretAccessKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_SecretAccessKey = nil
}

func (x *S3Config) ClearRegion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Region = nil
}

func (x *S3Config) ClearObjectPrefix() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ObjectPrefix = nil
}

func (x *S3Config) ClearEndpoint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Endpoint = nil
}

type S3Config_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Bucket *string
	UseIam *bool
	// The access key ID for the storage integration. The server will mask the value of this credential in responses and logs.
	AccessKeyId *string
	// The secret access key for the storage integration. The server will mask the value of this credential in responses and logs.
	SecretAccessKey *string
	Region          *string
	ObjectPrefix    *string
	Endpoint        *string
}

func (b0 S3Config_builder) Build() *S3Config {
	m0 := &S3Config{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Bucket != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Bucket = b.Bucket
	}
	if b.UseIam != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_UseIam = *b.UseIam
	}
	if b.AccessKeyId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_AccessKeyId = b.AccessKeyId
	}
	if b.SecretAccessKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_SecretAccessKey = b.SecretAccessKey
	}
	if b.Region != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Region = b.Region
	}
	if b.ObjectPrefix != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_ObjectPrefix = b.ObjectPrefix
	}
	if b.Endpoint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Endpoint = b.Endpoint
	}
	return m0
}

// S3Compatible configures the backup integration with an S3 compatible storage provider.
// S3 compatible is intended for non-AWS providers. For AWS S3 use S3Config.
type S3Compatible struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Bucket          *string                `protobuf:"bytes,1,opt,name=bucket"`
	xxx_hidden_AccessKeyId     *string                `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId"`
	xxx_hidden_SecretAccessKey *string                `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey"`
	xxx_hidden_Region          *string                `protobuf:"bytes,4,opt,name=region"`
	xxx_hidden_ObjectPrefix    *string                `protobuf:"bytes,5,opt,name=object_prefix,json=objectPrefix"`
	xxx_hidden_Endpoint        *string                `protobuf:"bytes,6,opt,name=endpoint"`
	xxx_hidden_UrlStyle        S3URLStyle             `protobuf:"varint,7,opt,name=url_style,json=urlStyle,enum=storage.S3URLStyle"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *S3Compatible) Reset() {
	*x = S3Compatible{}
	mi := &file_storage_external_backup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Compatible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Compatible) ProtoMessage() {}

func (x *S3Compatible) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *S3Compatible) GetBucket() string {
	if x != nil {
		if x.xxx_hidden_Bucket != nil {
			return *x.xxx_hidden_Bucket
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetAccessKeyId() string {
	if x != nil {
		if x.xxx_hidden_AccessKeyId != nil {
			return *x.xxx_hidden_AccessKeyId
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetSecretAccessKey() string {
	if x != nil {
		if x.xxx_hidden_SecretAccessKey != nil {
			return *x.xxx_hidden_SecretAccessKey
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetRegion() string {
	if x != nil {
		if x.xxx_hidden_Region != nil {
			return *x.xxx_hidden_Region
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetObjectPrefix() string {
	if x != nil {
		if x.xxx_hidden_ObjectPrefix != nil {
			return *x.xxx_hidden_ObjectPrefix
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetEndpoint() string {
	if x != nil {
		if x.xxx_hidden_Endpoint != nil {
			return *x.xxx_hidden_Endpoint
		}
		return ""
	}
	return ""
}

func (x *S3Compatible) GetUrlStyle() S3URLStyle {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_UrlStyle
		}
	}
	return S3URLStyle_S3_URL_STYLE_UNSPECIFIED
}

func (x *S3Compatible) SetBucket(v string) {
	x.xxx_hidden_Bucket = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *S3Compatible) SetAccessKeyId(v string) {
	x.xxx_hidden_AccessKeyId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *S3Compatible) SetSecretAccessKey(v string) {
	x.xxx_hidden_SecretAccessKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *S3Compatible) SetRegion(v string) {
	x.xxx_hidden_Region = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *S3Compatible) SetObjectPrefix(v string) {
	x.xxx_hidden_ObjectPrefix = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *S3Compatible) SetEndpoint(v string) {
	x.xxx_hidden_Endpoint = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *S3Compatible) SetUrlStyle(v S3URLStyle) {
	x.xxx_hidden_UrlStyle = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *S3Compatible) HasBucket() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *S3Compatible) HasAccessKeyId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *S3Compatible) HasSecretAccessKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *S3Compatible) HasRegion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *S3Compatible) HasObjectPrefix() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *S3Compatible) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *S3Compatible) HasUrlStyle() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *S3Compatible) ClearBucket() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Bucket = nil
}

func (x *S3Compatible) ClearAccessKeyId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AccessKeyId = nil
}

func (x *S3Compatible) ClearSecretAccessKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_SecretAccessKey = nil
}

func (x *S3Compatible) ClearRegion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Region = nil
}

func (x *S3Compatible) ClearObjectPrefix() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ObjectPrefix = nil
}

func (x *S3Compatible) ClearEndpoint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Endpoint = nil
}

func (x *S3Compatible) ClearUrlStyle() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_UrlStyle = S3URLStyle_S3_URL_STYLE_UNSPECIFIED
}

type S3Compatible_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Bucket *string
	// The access key ID to use. The server will mask the value of this credential in responses and logs.
	AccessKeyId *string
	// The secret access key to use. The server will mask the value of this credential in responses and logs.
	SecretAccessKey *string
	Region          *string
	ObjectPrefix    *string
	Endpoint        *string
	// The URL style defines the bucket URL addressing.
	// Virtual-hosted-style buckets are addressed as `https://<bucket>.<endpoint>'
	// while path-style buckets are addressed as `https://<endpoint>/<bucket>`.
	UrlStyle *S3URLStyle
}

func (b0 S3Compatible_builder) Build() *S3Compatible {
	m0 := &S3Compatible{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Bucket != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Bucket = b.Bucket
	}
	if b.AccessKeyId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_AccessKeyId = b.AccessKeyId
	}
	if b.SecretAccessKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_SecretAccessKey = b.SecretAccessKey
	}
	if b.Region != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_Region = b.Region
	}
	if b.ObjectPrefix != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_ObjectPrefix = b.ObjectPrefix
	}
	if b.Endpoint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Endpoint = b.Endpoint
	}
	if b.UrlStyle != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_UrlStyle = *b.UrlStyle
	}
	return m0
}

type GCSConfig struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Bucket         *string                `protobuf:"bytes,1,opt,name=bucket"`
	xxx_hidden_ServiceAccount *string                `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount"`
	xxx_hidden_ObjectPrefix   *string                `protobuf:"bytes,3,opt,name=object_prefix,json=objectPrefix"`
	xxx_hidden_UseWorkloadId  bool                   `protobuf:"varint,4,opt,name=use_workload_id,json=useWorkloadId"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GCSConfig) Reset() {
	*x = GCSConfig{}
	mi := &file_storage_external_backup_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSConfig) ProtoMessage() {}

func (x *GCSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GCSConfig) GetBucket() string {
	if x != nil {
		if x.xxx_hidden_Bucket != nil {
			return *x.xxx_hidden_Bucket
		}
		return ""
	}
	return ""
}

func (x *GCSConfig) GetServiceAccount() string {
	if x != nil {
		if x.xxx_hidden_ServiceAccount != nil {
			return *x.xxx_hidden_ServiceAccount
		}
		return ""
	}
	return ""
}

func (x *GCSConfig) GetObjectPrefix() string {
	if x != nil {
		if x.xxx_hidden_ObjectPrefix != nil {
			return *x.xxx_hidden_ObjectPrefix
		}
		return ""
	}
	return ""
}

func (x *GCSConfig) GetUseWorkloadId() bool {
	if x != nil {
		return x.xxx_hidden_UseWorkloadId
	}
	return false
}

func (x *GCSConfig) SetBucket(v string) {
	x.xxx_hidden_Bucket = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *GCSConfig) SetServiceAccount(v string) {
	x.xxx_hidden_ServiceAccount = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *GCSConfig) SetObjectPrefix(v string) {
	x.xxx_hidden_ObjectPrefix = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *GCSConfig) SetUseWorkloadId(v bool) {
	x.xxx_hidden_UseWorkloadId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *GCSConfig) HasBucket() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GCSConfig) HasServiceAccount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GCSConfig) HasObjectPrefix() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GCSConfig) HasUseWorkloadId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GCSConfig) ClearBucket() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Bucket = nil
}

func (x *GCSConfig) ClearServiceAccount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ServiceAccount = nil
}

func (x *GCSConfig) ClearObjectPrefix() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ObjectPrefix = nil
}

func (x *GCSConfig) ClearUseWorkloadId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UseWorkloadId = false
}

type GCSConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Bucket *string
	// The service account for the storage integration. The server will mask the value of this credential in responses and logs.
	ServiceAccount *string
	ObjectPrefix   *string
	UseWorkloadId  *bool
}

func (b0 GCSConfig_builder) Build() *GCSConfig {
	m0 := &GCSConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Bucket != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Bucket = b.Bucket
	}
	if b.ServiceAccount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ServiceAccount = b.ServiceAccount
	}
	if b.ObjectPrefix != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_ObjectPrefix = b.ObjectPrefix
	}
	if b.UseWorkloadId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_UseWorkloadId = *b.UseWorkloadId
	}
	return m0
}

var File_storage_external_backup_proto protoreflect.FileDescriptor

const file_storage_external_backup_proto_rawDesc = "" +
	"\n" +
	"\x1dstorage/external_backup.proto\x12\astorage\x1a\x16storage/schedule.proto\x1a!google/protobuf/go_features.proto\"\x8c\x03\n" +
	"\x0eExternalBackup\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x121\n" +
	"\bschedule\x18\x04 \x01(\v2\x11.storage.ScheduleB\x02(\x01R\bschedule\x12&\n" +
	"\x0fbackups_to_keep\x18\x05 \x01(\x05R\rbackupsToKeep\x12#\n" +
	"\x02s3\x18\x06 \x01(\v2\x11.storage.S3ConfigH\x00R\x02s3\x12&\n" +
	"\x03gcs\x18\a \x01(\v2\x12.storage.GCSConfigH\x00R\x03gcs\x12;\n" +
	"\fs3compatible\x18\t \x01(\v2\x15.storage.S3CompatibleH\x00R\fs3compatible\x127\n" +
	"\x14include_certificates\x18\b \x01(\bB\x02\x18\x01H\x01R\x13includeCertificatesB\b\n" +
	"\x06ConfigB\x1a\n" +
	"\x18include_certificates_opt\"\xe4\x01\n" +
	"\bS3Config\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\x17\n" +
	"\ause_iam\x18\x02 \x01(\bR\x06useIam\x12\"\n" +
	"\raccess_key_id\x18\x03 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x04 \x01(\tR\x0fsecretAccessKey\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12#\n" +
	"\robject_prefix\x18\x06 \x01(\tR\fobjectPrefix\x12\x1a\n" +
	"\bendpoint\x18\a \x01(\tR\bendpoint\"\x81\x02\n" +
	"\fS3Compatible\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\"\n" +
	"\raccess_key_id\x18\x02 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x03 \x01(\tR\x0fsecretAccessKey\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12#\n" +
	"\robject_prefix\x18\x05 \x01(\tR\fobjectPrefix\x12\x1a\n" +
	"\bendpoint\x18\x06 \x01(\tR\bendpoint\x120\n" +
	"\turl_style\x18\a \x01(\x0e2\x13.storage.S3URLStyleR\burlStyle\"\x99\x01\n" +
	"\tGCSConfig\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12'\n" +
	"\x0fservice_account\x18\x02 \x01(\tR\x0eserviceAccount\x12#\n" +
	"\robject_prefix\x18\x03 \x01(\tR\fobjectPrefix\x12&\n" +
	"\x0fuse_workload_id\x18\x04 \x01(\bR\ruseWorkloadId*b\n" +
	"\n" +
	"S3URLStyle\x12\x1c\n" +
	"\x18S3_URL_STYLE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bS3_URL_STYLE_VIRTUAL_HOSTED\x10\x01\x12\x15\n" +
	"\x11S3_URL_STYLE_PATH\x10\x02B6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_storage_external_backup_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_storage_external_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_storage_external_backup_proto_goTypes = []any{
	(S3URLStyle)(0),        // 0: storage.S3URLStyle
	(*ExternalBackup)(nil), // 1: storage.ExternalBackup
	(*S3Config)(nil),       // 2: storage.S3Config
	(*S3Compatible)(nil),   // 3: storage.S3Compatible
	(*GCSConfig)(nil),      // 4: storage.GCSConfig
	(*Schedule)(nil),       // 5: storage.Schedule
}
var file_storage_external_backup_proto_depIdxs = []int32{
	5, // 0: storage.ExternalBackup.schedule:type_name -> storage.Schedule
	2, // 1: storage.ExternalBackup.s3:type_name -> storage.S3Config
	4, // 2: storage.ExternalBackup.gcs:type_name -> storage.GCSConfig
	3, // 3: storage.ExternalBackup.s3compatible:type_name -> storage.S3Compatible
	0, // 4: storage.S3Compatible.url_style:type_name -> storage.S3URLStyle
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_storage_external_backup_proto_init() }
func file_storage_external_backup_proto_init() {
	if File_storage_external_backup_proto != nil {
		return
	}
	file_storage_schedule_proto_init()
	file_storage_external_backup_proto_msgTypes[0].OneofWrappers = []any{
		(*externalBackup_S3)(nil),
		(*externalBackup_Gcs)(nil),
		(*externalBackup_S3Compatible)(nil),
		(*externalBackup_IncludeCertificates)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_external_backup_proto_rawDesc), len(file_storage_external_backup_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_external_backup_proto_goTypes,
		DependencyIndexes: file_storage_external_backup_proto_depIdxs,
		EnumInfos:         file_storage_external_backup_proto_enumTypes,
		MessageInfos:      file_storage_external_backup_proto_msgTypes,
	}.Build()
	File_storage_external_backup_proto = out.File
	file_storage_external_backup_proto_goTypes = nil
	file_storage_external_backup_proto_depIdxs = nil
}
