// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.3
// source: storage/external_backup.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExternalBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"` // @gotags: sql:"pk"
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Schedule      *Schedule `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	BackupsToKeep int32     `protobuf:"varint,5,opt,name=backups_to_keep,json=backupsToKeep,proto3" json:"backups_to_keep,omitempty"`
	// Types that are assignable to Config:
	//
	//	*ExternalBackup_S3
	//	*ExternalBackup_Gcs
	Config isExternalBackup_Config `protobuf_oneof:"Config"`
	// Types that are assignable to IncludeCertificatesOpt:
	//
	//	*ExternalBackup_IncludeCertificates
	IncludeCertificatesOpt isExternalBackup_IncludeCertificatesOpt `protobuf_oneof:"include_certificates_opt"`
}

func (x *ExternalBackup) Reset() {
	*x = ExternalBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_external_backup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalBackup) ProtoMessage() {}

func (x *ExternalBackup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalBackup.ProtoReflect.Descriptor instead.
func (*ExternalBackup) Descriptor() ([]byte, []int) {
	return file_storage_external_backup_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalBackup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalBackup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalBackup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExternalBackup) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ExternalBackup) GetBackupsToKeep() int32 {
	if x != nil {
		return x.BackupsToKeep
	}
	return 0
}

func (m *ExternalBackup) GetConfig() isExternalBackup_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ExternalBackup) GetS3() *S3Config {
	if x, ok := x.GetConfig().(*ExternalBackup_S3); ok {
		return x.S3
	}
	return nil
}

func (x *ExternalBackup) GetGcs() *GCSConfig {
	if x, ok := x.GetConfig().(*ExternalBackup_Gcs); ok {
		return x.Gcs
	}
	return nil
}

func (m *ExternalBackup) GetIncludeCertificatesOpt() isExternalBackup_IncludeCertificatesOpt {
	if m != nil {
		return m.IncludeCertificatesOpt
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/external_backup.proto.
func (x *ExternalBackup) GetIncludeCertificates() bool {
	if x, ok := x.GetIncludeCertificatesOpt().(*ExternalBackup_IncludeCertificates); ok {
		return x.IncludeCertificates
	}
	return false
}

type isExternalBackup_Config interface {
	isExternalBackup_Config()
}

type ExternalBackup_S3 struct {
	S3 *S3Config `protobuf:"bytes,6,opt,name=s3,proto3,oneof"`
}

type ExternalBackup_Gcs struct {
	Gcs *GCSConfig `protobuf:"bytes,7,opt,name=gcs,proto3,oneof"`
}

func (*ExternalBackup_S3) isExternalBackup_Config() {}

func (*ExternalBackup_Gcs) isExternalBackup_Config() {}

type isExternalBackup_IncludeCertificatesOpt interface {
	isExternalBackup_IncludeCertificatesOpt()
}

type ExternalBackup_IncludeCertificates struct {
	// Deprecated: Marked as deprecated in storage/external_backup.proto.
	IncludeCertificates bool `protobuf:"varint,8,opt,name=include_certificates,json=includeCertificates,proto3,oneof"`
}

func (*ExternalBackup_IncludeCertificates) isExternalBackup_IncludeCertificatesOpt() {}

type S3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	UseIam bool   `protobuf:"varint,2,opt,name=use_iam,json=useIam,proto3" json:"use_iam,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
	// The access key ID for the storage integration. The server will mask the value of this credential in responses and logs.
	AccessKeyId string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty" scrub:"always"` // @gotags: scrub:"always"
	// The secret access key for the storage integration. The server will mask the value of this credential in responses and logs.
	SecretAccessKey string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty" scrub:"always"` // @gotags: scrub:"always"
	Region          string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	ObjectPrefix    string `protobuf:"bytes,6,opt,name=object_prefix,json=objectPrefix,proto3" json:"object_prefix,omitempty"`
	Endpoint        string `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"` // @gotags: scrub:"dependent" validate:"nolocalendpoint"
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_external_backup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_storage_external_backup_proto_rawDescGZIP(), []int{1}
}

func (x *S3Config) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Config) GetUseIam() bool {
	if x != nil {
		return x.UseIam
	}
	return false
}

func (x *S3Config) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *S3Config) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3Config) GetObjectPrefix() string {
	if x != nil {
		return x.ObjectPrefix
	}
	return ""
}

func (x *S3Config) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type GCSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The service account for the storage integration. The server will mask the value of this credential in responses and logs.
	ServiceAccount string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" scrub:"always"` // @gotags: scrub:"always"
	ObjectPrefix   string `protobuf:"bytes,3,opt,name=object_prefix,json=objectPrefix,proto3" json:"object_prefix,omitempty"`
	UseWorkloadId  bool   `protobuf:"varint,4,opt,name=use_workload_id,json=useWorkloadId,proto3" json:"use_workload_id,omitempty" scrub:"dependent"` // @gotags: scrub:"dependent"
}

func (x *GCSConfig) Reset() {
	*x = GCSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_external_backup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSConfig) ProtoMessage() {}

func (x *GCSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_external_backup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSConfig.ProtoReflect.Descriptor instead.
func (*GCSConfig) Descriptor() ([]byte, []int) {
	return file_storage_external_backup_proto_rawDescGZIP(), []int{2}
}

func (x *GCSConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GCSConfig) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *GCSConfig) GetObjectPrefix() string {
	if x != nil {
		return x.ObjectPrefix
	}
	return ""
}

func (x *GCSConfig) GetUseWorkloadId() bool {
	if x != nil {
		return x.UseWorkloadId
	}
	return false
}

var File_storage_external_backup_proto protoreflect.FileDescriptor

var file_storage_external_backup_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcb, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x54, 0x6f, 0x4b, 0x65,
	0x65, 0x70, 0x12, 0x23, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x43, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x73, 0x12,
	0x37, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x1a, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0xe4,
	0x01, 0x0a, 0x08, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x49, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x47, 0x43, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5a, 0x11,
	0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_external_backup_proto_rawDescOnce sync.Once
	file_storage_external_backup_proto_rawDescData = file_storage_external_backup_proto_rawDesc
)

func file_storage_external_backup_proto_rawDescGZIP() []byte {
	file_storage_external_backup_proto_rawDescOnce.Do(func() {
		file_storage_external_backup_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_external_backup_proto_rawDescData)
	})
	return file_storage_external_backup_proto_rawDescData
}

var file_storage_external_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_storage_external_backup_proto_goTypes = []interface{}{
	(*ExternalBackup)(nil), // 0: storage.ExternalBackup
	(*S3Config)(nil),       // 1: storage.S3Config
	(*GCSConfig)(nil),      // 2: storage.GCSConfig
	(*Schedule)(nil),       // 3: storage.Schedule
}
var file_storage_external_backup_proto_depIdxs = []int32{
	3, // 0: storage.ExternalBackup.schedule:type_name -> storage.Schedule
	1, // 1: storage.ExternalBackup.s3:type_name -> storage.S3Config
	2, // 2: storage.ExternalBackup.gcs:type_name -> storage.GCSConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_storage_external_backup_proto_init() }
func file_storage_external_backup_proto_init() {
	if File_storage_external_backup_proto != nil {
		return
	}
	file_storage_schedule_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_external_backup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_external_backup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_external_backup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_external_backup_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ExternalBackup_S3)(nil),
		(*ExternalBackup_Gcs)(nil),
		(*ExternalBackup_IncludeCertificates)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_external_backup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_external_backup_proto_goTypes,
		DependencyIndexes: file_storage_external_backup_proto_depIdxs,
		MessageInfos:      file_storage_external_backup_proto_msgTypes,
	}.Build()
	File_storage_external_backup_proto = out.File
	file_storage_external_backup_proto_rawDesc = nil
	file_storage_external_backup_proto_goTypes = nil
	file_storage_external_backup_proto_depIdxs = nil
}
