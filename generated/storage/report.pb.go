// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/report.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportStatus_RunState int32

const (
	ReportStatus_WAITING   ReportStatus_RunState = 0
	ReportStatus_PREPARING ReportStatus_RunState = 1
	ReportStatus_SUCCESS   ReportStatus_RunState = 2
	ReportStatus_FAILURE   ReportStatus_RunState = 3
)

var ReportStatus_RunState_name = map[int32]string{
	0: "WAITING",
	1: "PREPARING",
	2: "SUCCESS",
	3: "FAILURE",
}

var ReportStatus_RunState_value = map[string]int32{
	"WAITING":   0,
	"PREPARING": 1,
	"SUCCESS":   2,
	"FAILURE":   3,
}

func (x ReportStatus_RunState) String() string {
	return proto.EnumName(ReportStatus_RunState_name, int32(x))
}

func (ReportStatus_RunState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c33fca74a5c9ce7e, []int{1, 0}
}

type ReportStatus_NotificationMethod int32

const (
	ReportStatus_UNSET    ReportStatus_NotificationMethod = 0
	ReportStatus_EMAIL    ReportStatus_NotificationMethod = 1
	ReportStatus_DOWNLOAD ReportStatus_NotificationMethod = 2
)

var ReportStatus_NotificationMethod_name = map[int32]string{
	0: "UNSET",
	1: "EMAIL",
	2: "DOWNLOAD",
}

var ReportStatus_NotificationMethod_value = map[string]int32{
	"UNSET":    0,
	"EMAIL":    1,
	"DOWNLOAD": 2,
}

func (x ReportStatus_NotificationMethod) String() string {
	return proto.EnumName(ReportStatus_NotificationMethod_name, int32(x))
}

func (ReportStatus_NotificationMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c33fca74a5c9ce7e, []int{1, 1}
}

type ReportStatus_RunMethod int32

const (
	ReportStatus_ON_DEMAND ReportStatus_RunMethod = 0
	ReportStatus_SCHEDULED ReportStatus_RunMethod = 1
)

var ReportStatus_RunMethod_name = map[int32]string{
	0: "ON_DEMAND",
	1: "SCHEDULED",
}

var ReportStatus_RunMethod_value = map[string]int32{
	"ON_DEMAND": 0,
	"SCHEDULED": 1,
}

func (x ReportStatus_RunMethod) String() string {
	return proto.EnumName(ReportStatus_RunMethod_name, int32(x))
}

func (ReportStatus_RunMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c33fca74a5c9ce7e, []int{1, 2}
}

type ReportMetadata struct {
	ReportId       string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" sql:"pk,type(uuid)"`
	ReportConfigId string `protobuf:"bytes,2,opt,name=report_config_id,json=reportConfigId,proto3" json:"report_config_id,omitempty" search:"Report Configuration ID" sql:"fk(ReportConfiguration:id)"`
	// User who requested the report to be run
	Requester    *SlimUser     `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	ReportStatus *ReportStatus `protobuf:"bytes,4,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`
	// only used when report notification method = 'DOWNLOAD'
	IsDownloaded         bool     `protobuf:"varint,5,opt,name=is_downloaded,json=isDownloaded,proto3" json:"is_downloaded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportMetadata) Reset()         { *m = ReportMetadata{} }
func (m *ReportMetadata) String() string { return proto.CompactTextString(m) }
func (*ReportMetadata) ProtoMessage()    {}
func (*ReportMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c33fca74a5c9ce7e, []int{0}
}
func (m *ReportMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportMetadata.Merge(m, src)
}
func (m *ReportMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ReportMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ReportMetadata proto.InternalMessageInfo

func (m *ReportMetadata) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *ReportMetadata) GetReportConfigId() string {
	if m != nil {
		return m.ReportConfigId
	}
	return ""
}

func (m *ReportMetadata) GetRequester() *SlimUser {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *ReportMetadata) GetReportStatus() *ReportStatus {
	if m != nil {
		return m.ReportStatus
	}
	return nil
}

func (m *ReportMetadata) GetIsDownloaded() bool {
	if m != nil {
		return m.IsDownloaded
	}
	return false
}

func (m *ReportMetadata) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportMetadata) Clone() *ReportMetadata {
	if m == nil {
		return nil
	}
	cloned := new(ReportMetadata)
	*cloned = *m

	cloned.Requester = m.Requester.Clone()
	cloned.ReportStatus = m.ReportStatus.Clone()
	return cloned
}

type ReportStatus struct {
	RunState                 ReportStatus_RunState           `protobuf:"varint,1,opt,name=run_state,json=runState,proto3,enum=storage.ReportStatus_RunState" json:"run_state,omitempty" search:"Report State"`
	QueuedAt                 *types.Timestamp                `protobuf:"bytes,2,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty" search:"Report Init Time"`
	CompletedAt              *types.Timestamp                `protobuf:"bytes,3,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty" search:"Report Completion Time"`
	ErrorMsg                 string                          `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	ReportMethod             ReportStatus_RunMethod          `protobuf:"varint,5,opt,name=report_method,json=reportMethod,proto3,enum=storage.ReportStatus_RunMethod" json:"report_method,omitempty" search:"Report Request Type"`
	ReportNotificationMethod ReportStatus_NotificationMethod `protobuf:"varint,6,opt,name=report_notification_method,json=reportNotificationMethod,proto3,enum=storage.ReportStatus_NotificationMethod" json:"report_notification_method,omitempty" search:"Report Notification Method"`
	XXX_NoUnkeyedLiteral     struct{}                        `json:"-"`
	XXX_unrecognized         []byte                          `json:"-"`
	XXX_sizecache            int32                           `json:"-"`
}

func (m *ReportStatus) Reset()         { *m = ReportStatus{} }
func (m *ReportStatus) String() string { return proto.CompactTextString(m) }
func (*ReportStatus) ProtoMessage()    {}
func (*ReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c33fca74a5c9ce7e, []int{1}
}
func (m *ReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportStatus.Merge(m, src)
}
func (m *ReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReportStatus proto.InternalMessageInfo

func (m *ReportStatus) GetRunState() ReportStatus_RunState {
	if m != nil {
		return m.RunState
	}
	return ReportStatus_WAITING
}

func (m *ReportStatus) GetQueuedAt() *types.Timestamp {
	if m != nil {
		return m.QueuedAt
	}
	return nil
}

func (m *ReportStatus) GetCompletedAt() *types.Timestamp {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *ReportStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *ReportStatus) GetReportMethod() ReportStatus_RunMethod {
	if m != nil {
		return m.ReportMethod
	}
	return ReportStatus_ON_DEMAND
}

func (m *ReportStatus) GetReportNotificationMethod() ReportStatus_NotificationMethod {
	if m != nil {
		return m.ReportNotificationMethod
	}
	return ReportStatus_UNSET
}

func (m *ReportStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportStatus) Clone() *ReportStatus {
	if m == nil {
		return nil
	}
	cloned := new(ReportStatus)
	*cloned = *m

	cloned.QueuedAt = m.QueuedAt.Clone()
	cloned.CompletedAt = m.CompletedAt.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.ReportStatus_RunState", ReportStatus_RunState_name, ReportStatus_RunState_value)
	proto.RegisterEnum("storage.ReportStatus_NotificationMethod", ReportStatus_NotificationMethod_name, ReportStatus_NotificationMethod_value)
	proto.RegisterEnum("storage.ReportStatus_RunMethod", ReportStatus_RunMethod_name, ReportStatus_RunMethod_value)
	proto.RegisterType((*ReportMetadata)(nil), "storage.ReportMetadata")
	proto.RegisterType((*ReportStatus)(nil), "storage.ReportStatus")
}

func init() { proto.RegisterFile("storage/report.proto", fileDescriptor_c33fca74a5c9ce7e) }

var fileDescriptor_c33fca74a5c9ce7e = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xc1, 0x6e, 0xda, 0x4a,
	0x14, 0x86, 0x63, 0x72, 0x93, 0xe0, 0x81, 0x20, 0xdf, 0xb9, 0x89, 0x2e, 0xa1, 0x2d, 0xb6, 0x9c,
	0x45, 0x89, 0x54, 0x19, 0x89, 0x66, 0x51, 0xb1, 0xaa, 0xc1, 0x6e, 0x6b, 0x09, 0x48, 0x64, 0xa0,
	0x91, 0xba, 0x41, 0x0e, 0x1e, 0x1c, 0x2b, 0xc0, 0x90, 0x99, 0xb1, 0xda, 0x3c, 0x45, 0xb7, 0x7d,
	0xa4, 0x76, 0xd7, 0x27, 0x40, 0x51, 0xfa, 0x06, 0x7e, 0x82, 0xca, 0x33, 0x36, 0xa5, 0x24, 0x55,
	0x77, 0x33, 0xe7, 0xfc, 0xe7, 0xff, 0xc6, 0xe7, 0x1c, 0x19, 0x1c, 0x50, 0x86, 0x89, 0x17, 0xa0,
	0x3a, 0x41, 0x0b, 0x4c, 0x98, 0xb1, 0x20, 0x98, 0x61, 0xb8, 0x97, 0x46, 0x2b, 0x6a, 0x80, 0x71,
	0x30, 0x45, 0x75, 0x1e, 0xbe, 0x8c, 0x26, 0x75, 0x16, 0xce, 0x10, 0x65, 0xde, 0x6c, 0x21, 0x94,
	0x95, 0x83, 0x00, 0x07, 0x98, 0x1f, 0xeb, 0xc9, 0x29, 0x8d, 0xc2, 0xcc, 0x35, 0xa2, 0x88, 0x88,
	0x98, 0xfe, 0x2d, 0x07, 0x4a, 0x2e, 0x87, 0x74, 0x11, 0xf3, 0x7c, 0x8f, 0x79, 0xf0, 0x14, 0xc8,
	0x02, 0x3b, 0x0a, 0xfd, 0xb2, 0xa4, 0x49, 0x35, 0xb9, 0xf5, 0x7f, 0xbc, 0x54, 0xff, 0xa3, 0x37,
	0xd3, 0xa6, 0xbe, 0xb8, 0x7e, 0xc1, 0x6e, 0x17, 0xa8, 0x16, 0x45, 0xa1, 0x7f, 0xa2, 0xbb, 0x79,
	0xa1, 0x74, 0x7c, 0x88, 0x81, 0x92, 0x56, 0x8d, 0xf1, 0x7c, 0x12, 0x06, 0x49, 0x71, 0x8e, 0x17,
	0xdb, 0xf1, 0x52, 0x35, 0x29, 0xf2, 0xc8, 0xf8, 0xaa, 0xa9, 0x0b, 0x96, 0xd6, 0xe6, 0x9a, 0x88,
	0x78, 0x2c, 0xc4, 0x73, 0xcd, 0xb1, 0x74, 0x8d, 0xbb, 0x4f, 0xae, 0x6b, 0x42, 0xf0, 0x5b, 0xbe,
	0xc9, 0x51, 0x25, 0xb2, 0x96, 0x71, 0x7c, 0x58, 0x4f, 0x9e, 0x79, 0x13, 0x21, 0xca, 0x10, 0x29,
	0x6f, 0x6b, 0x52, 0xad, 0xd0, 0xf8, 0xd7, 0x48, 0xbf, 0xd0, 0xe8, 0x4f, 0xc3, 0xd9, 0x90, 0x22,
	0xe2, 0xfe, 0xd2, 0xc0, 0x26, 0xd8, 0x4f, 0x5f, 0x48, 0x99, 0xc7, 0x22, 0x5a, 0xfe, 0x87, 0x17,
	0x1d, 0xae, 0x8a, 0x04, 0xba, 0xcf, 0x93, 0x6e, 0x91, 0xac, 0xdd, 0xe0, 0x31, 0xd8, 0x0f, 0xe9,
	0xc8, 0xc7, 0x1f, 0xe7, 0x53, 0xec, 0xf9, 0xc8, 0x2f, 0xef, 0x68, 0x52, 0x2d, 0xef, 0x16, 0x43,
	0x6a, 0xad, 0x62, 0xfa, 0xdd, 0x0e, 0x28, 0xae, 0x7b, 0xc0, 0xf7, 0x40, 0x26, 0xd1, 0x9c, 0xe3,
	0x10, 0xef, 0x64, 0xa9, 0x51, 0x7d, 0x94, 0x66, 0xb8, 0xd1, 0x3c, 0x39, 0xa1, 0xd6, 0x51, 0xbc,
	0x54, 0x0f, 0x37, 0x9a, 0xc5, 0x33, 0x49, 0xaf, 0x53, 0x51, 0xe2, 0x7b, 0x13, 0xa1, 0x08, 0xf9,
	0x23, 0x8f, 0xf1, 0x26, 0x17, 0x1a, 0x15, 0x43, 0xec, 0x84, 0x91, 0xed, 0x84, 0x31, 0xc8, 0x76,
	0xa2, 0xf5, 0x2c, 0x5e, 0xaa, 0x47, 0x1b, 0x9e, 0xce, 0x3c, 0x64, 0x5a, 0x22, 0xd1, 0xdd, 0xbc,
	0xf0, 0x32, 0x19, 0xbc, 0x04, 0xc5, 0x31, 0x9e, 0x2d, 0xa6, 0x88, 0x09, 0xeb, 0xed, 0xbf, 0x5a,
	0x1f, 0xc7, 0x4b, 0x55, 0x7d, 0x30, 0x5b, 0x6e, 0x91, 0x0c, 0x56, 0x00, 0x0a, 0x2b, 0x53, 0x93,
	0xc1, 0x27, 0x40, 0x46, 0x84, 0x60, 0x32, 0x9a, 0xd1, 0x80, 0x4f, 0x40, 0x76, 0xf3, 0x3c, 0xd0,
	0xa5, 0x01, 0x9c, 0xac, 0x46, 0x34, 0x43, 0xec, 0x0a, 0x8b, 0x36, 0x97, 0x1a, 0xea, 0x1f, 0x9b,
	0xd6, 0xe5, 0xb2, 0x96, 0x16, 0x2f, 0xd5, 0xa7, 0x1b, 0xcf, 0x70, 0xc5, 0xe0, 0xb5, 0xc1, 0xed,
	0x02, 0xe9, 0xd9, 0x38, 0x85, 0x1e, 0x7e, 0x96, 0x40, 0x25, 0x05, 0xcd, 0x31, 0x0b, 0x27, 0xe1,
	0x98, 0x2f, 0x5a, 0x46, 0xdd, 0xe5, 0xd4, 0xda, 0xe3, 0xd4, 0xde, 0x5a, 0x41, 0x8a, 0x7f, 0x1e,
	0x2f, 0xd5, 0xe3, 0x0d, 0xfc, 0xba, 0x4c, 0x13, 0x3a, 0xdd, 0x2d, 0x0b, 0xe8, 0x43, 0x0b, 0xfd,
	0x35, 0xc8, 0x67, 0x3b, 0x00, 0x0b, 0x60, 0xef, 0xc2, 0x74, 0x06, 0x4e, 0xef, 0xad, 0xb2, 0x05,
	0xf7, 0x81, 0x7c, 0xee, 0xda, 0xe7, 0xa6, 0x9b, 0x5c, 0xa5, 0x24, 0xd7, 0x1f, 0xb6, 0xdb, 0x76,
	0xbf, 0xaf, 0xe4, 0x92, 0xcb, 0x1b, 0xd3, 0xe9, 0x0c, 0x5d, 0x5b, 0xd9, 0xd6, 0x5f, 0x01, 0xf8,
	0xd0, 0x17, 0xca, 0x60, 0x67, 0xd8, 0xeb, 0xdb, 0x03, 0x65, 0x2b, 0x39, 0xda, 0x5d, 0xd3, 0xe9,
	0x28, 0x12, 0x2c, 0x82, 0xbc, 0x75, 0x76, 0xd1, 0xeb, 0x9c, 0x99, 0x96, 0x92, 0xd3, 0x4f, 0x80,
	0xbc, 0x6a, 0x65, 0xc2, 0x3b, 0xeb, 0x8d, 0x2c, 0xbb, 0x6b, 0xf6, 0x2c, 0x81, 0xef, 0xb7, 0xdf,
	0xd9, 0xd6, 0xb0, 0x63, 0x5b, 0x8a, 0xd4, 0x3a, 0xfd, 0x7a, 0x5f, 0x95, 0xbe, 0xdf, 0x57, 0xa5,
	0xbb, 0xfb, 0xaa, 0xf4, 0xe5, 0x47, 0x75, 0x0b, 0x1c, 0x85, 0xd8, 0xa0, 0xcc, 0x1b, 0x5f, 0x13,
	0xfc, 0x49, 0x6c, 0x48, 0xd6, 0xb6, 0x0f, 0xd9, 0xff, 0xea, 0x72, 0x97, 0xc7, 0x5f, 0xfe, 0x0c,
	0x00, 0x00, 0xff, 0xff, 0xf6, 0x25, 0x42, 0x57, 0xd7, 0x04, 0x00, 0x00,
}

func (m *ReportMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDownloaded {
		i--
		if m.IsDownloaded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ReportStatus != nil {
		{
			size, err := m.ReportStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Requester != nil {
		{
			size, err := m.Requester.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReportConfigId) > 0 {
		i -= len(m.ReportConfigId)
		copy(dAtA[i:], m.ReportConfigId)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ReportConfigId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReportId) > 0 {
		i -= len(m.ReportId)
		copy(dAtA[i:], m.ReportId)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ReportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReportNotificationMethod != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.ReportNotificationMethod))
		i--
		dAtA[i] = 0x30
	}
	if m.ReportMethod != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.ReportMethod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x22
	}
	if m.CompletedAt != nil {
		{
			size, err := m.CompletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.QueuedAt != nil {
		{
			size, err := m.QueuedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RunState != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.RunState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportId)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.ReportConfigId)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.Requester != nil {
		l = m.Requester.Size()
		n += 1 + l + sovReport(uint64(l))
	}
	if m.ReportStatus != nil {
		l = m.ReportStatus.Size()
		n += 1 + l + sovReport(uint64(l))
	}
	if m.IsDownloaded {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunState != 0 {
		n += 1 + sovReport(uint64(m.RunState))
	}
	if m.QueuedAt != nil {
		l = m.QueuedAt.Size()
		n += 1 + l + sovReport(uint64(l))
	}
	if m.CompletedAt != nil {
		l = m.CompletedAt.Size()
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.ReportMethod != 0 {
		n += 1 + sovReport(uint64(m.ReportMethod))
	}
	if m.ReportNotificationMethod != 0 {
		n += 1 + sovReport(uint64(m.ReportNotificationMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requester == nil {
				m.Requester = &SlimUser{}
			}
			if err := m.Requester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportStatus == nil {
				m.ReportStatus = &ReportStatus{}
			}
			if err := m.ReportStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDownloaded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDownloaded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunState", wireType)
			}
			m.RunState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunState |= ReportStatus_RunState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedAt == nil {
				m.QueuedAt = &types.Timestamp{}
			}
			if err := m.QueuedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = &types.Timestamp{}
			}
			if err := m.CompletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMethod", wireType)
			}
			m.ReportMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportMethod |= ReportStatus_RunMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportNotificationMethod", wireType)
			}
			m.ReportNotificationMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportNotificationMethod |= ReportStatus_NotificationMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReport = fmt.Errorf("proto: unexpected end of group")
)
