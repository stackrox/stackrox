// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/administration_usage.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SecuredUnits represents a record of an aggregated secured clusters usage
// metrics. The metrics are aggregated periodically, and put into the database.
type SecuredUnits struct {
	// id is not used to retrieve data, but serves mostly for compatibility with
	// the current implementation of the query generator.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"`
	// timestamp stores the moment at which the values of the metrics below are
	// aggregated.
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty" sql:"unique" search:"Administration Usage Timestamp,hidden"`
	// num_nodes is the maximum number of secured nodes, observed across all
	// registered clusters during last aggregation period.
	NumNodes int64 `protobuf:"varint,3,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty" search:"Administration Usage Nodes,hidden"`
	// num_cpu_units is the maximum number of secured CPU units (which are the
	// units reported by Kubernetes), observed across all registered clusters
	// during last aggregation period.
	NumCpuUnits          int64    `protobuf:"varint,4,opt,name=num_cpu_units,json=numCpuUnits,proto3" json:"num_cpu_units,omitempty" search:"Administration Usage CPU Units,hidden"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecuredUnits) Reset()         { *m = SecuredUnits{} }
func (m *SecuredUnits) String() string { return proto.CompactTextString(m) }
func (*SecuredUnits) ProtoMessage()    {}
func (*SecuredUnits) Descriptor() ([]byte, []int) {
	return fileDescriptor_5927926ecf648491, []int{0}
}
func (m *SecuredUnits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuredUnits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuredUnits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuredUnits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuredUnits.Merge(m, src)
}
func (m *SecuredUnits) XXX_Size() int {
	return m.Size()
}
func (m *SecuredUnits) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuredUnits.DiscardUnknown(m)
}

var xxx_messageInfo_SecuredUnits proto.InternalMessageInfo

func (m *SecuredUnits) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecuredUnits) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SecuredUnits) GetNumNodes() int64 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

func (m *SecuredUnits) GetNumCpuUnits() int64 {
	if m != nil {
		return m.NumCpuUnits
	}
	return 0
}

func (m *SecuredUnits) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SecuredUnits) Clone() *SecuredUnits {
	if m == nil {
		return nil
	}
	cloned := new(SecuredUnits)
	*cloned = *m

	cloned.Timestamp = m.Timestamp.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*SecuredUnits)(nil), "storage.SecuredUnits")
}

func init() {
	proto.RegisterFile("storage/administration_usage.proto", fileDescriptor_5927926ecf648491)
}

var fileDescriptor_5927926ecf648491 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x6f, 0xd2, 0xab, 0x7b, 0x6f, 0xd3, 0xcb, 0x12, 0x90, 0x08, 0x1d, 0x92, 0xc8, 0x0b,
	0x01, 0x55, 0x8e, 0x54, 0x98, 0xca, 0x80, 0x48, 0x47, 0x24, 0x84, 0x0a, 0x65, 0x60, 0xa9, 0xdc,
	0xd8, 0xa4, 0x56, 0x1b, 0x3b, 0x8d, 0x6d, 0x89, 0xbe, 0x09, 0x8f, 0xc4, 0xc8, 0xc6, 0x16, 0xa1,
	0xf2, 0x06, 0x79, 0x02, 0x14, 0xa7, 0x0d, 0x62, 0xe9, 0x76, 0xf4, 0xeb, 0x3f, 0xdf, 0x39, 0xe7,
	0x3f, 0x16, 0x10, 0x92, 0xe7, 0x28, 0x21, 0x21, 0xc2, 0x29, 0x65, 0x54, 0xc8, 0x1c, 0x49, 0xca,
	0xd9, 0x44, 0x09, 0x94, 0x10, 0x98, 0xe5, 0x5c, 0x72, 0xfb, 0xef, 0xc6, 0xd3, 0xf5, 0x12, 0xce,
	0x93, 0x05, 0x09, 0xb5, 0x3c, 0x55, 0x4f, 0xa1, 0xa4, 0x29, 0x11, 0x12, 0xa5, 0x59, 0xed, 0xec,
	0x1e, 0x24, 0x3c, 0xe1, 0xba, 0x0c, 0xab, 0xaa, 0x56, 0xc1, 0xbb, 0x69, 0xfd, 0xbf, 0x23, 0xb1,
	0xca, 0x09, 0x1e, 0x33, 0x2a, 0x85, 0x7d, 0x6c, 0x99, 0x14, 0x3b, 0x86, 0x6f, 0x04, 0xed, 0xe8,
	0xb0, 0x2c, 0xbc, 0x7d, 0xb1, 0x5c, 0x0c, 0x40, 0x36, 0xef, 0xc9, 0x55, 0x46, 0x02, 0xa5, 0x28,
	0x3e, 0x01, 0x23, 0x93, 0x62, 0x7b, 0x65, 0xb5, 0x9b, 0x11, 0x8e, 0xe9, 0x1b, 0x41, 0xa7, 0xdf,
	0x85, 0xf5, 0x12, 0x70, 0xbb, 0x04, 0xbc, 0xdf, 0x3a, 0xa2, 0xcb, 0xb2, 0xf0, 0x2e, 0x34, 0x4b,
	0x31, 0xba, 0x54, 0x04, 0xf8, 0x82, 0xa0, 0x3c, 0x9e, 0x0d, 0xc0, 0xd5, 0x8f, 0xeb, 0xfc, 0x71,
	0x75, 0x9d, 0xdf, 0x34, 0xf6, 0x66, 0x14, 0x63, 0xc2, 0xc0, 0xe8, 0x7b, 0x9a, 0x7d, 0x6d, 0xb5,
	0x99, 0x4a, 0x27, 0x8c, 0x63, 0x22, 0x9c, 0x96, 0x6f, 0x04, 0xad, 0x08, 0x96, 0x85, 0x77, 0xba,
	0x93, 0x78, 0x53, 0xb9, 0x1b, 0xda, 0x3f, 0xa6, 0x52, 0xad, 0xd8, 0x0f, 0xd6, 0x5e, 0x05, 0x8b,
	0x33, 0x35, 0x51, 0x55, 0x02, 0xce, 0x6f, 0x0d, 0xec, 0x97, 0x85, 0x07, 0x77, 0x02, 0x87, 0xb7,
	0x63, 0x5f, 0x67, 0xd6, 0x40, 0x3b, 0x4c, 0xa5, 0xc3, 0x4c, 0x69, 0x31, 0x3a, 0x7f, 0x5d, 0xbb,
	0xc6, 0xdb, 0xda, 0x35, 0x3e, 0xd6, 0xae, 0xf1, 0xf2, 0xe9, 0xfe, 0xb2, 0x8e, 0x28, 0x87, 0x42,
	0xa2, 0x78, 0x9e, 0xf3, 0xe7, 0x3a, 0x22, 0xb8, 0xf9, 0xde, 0xe3, 0xf6, 0x8d, 0xd3, 0x3f, 0x5a,
	0x3f, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x5d, 0xc2, 0x4d, 0xfc, 0x01, 0x00, 0x00,
}

func (m *SecuredUnits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuredUnits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuredUnits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumCpuUnits != 0 {
		i = encodeVarintAdministrationUsage(dAtA, i, uint64(m.NumCpuUnits))
		i--
		dAtA[i] = 0x20
	}
	if m.NumNodes != 0 {
		i = encodeVarintAdministrationUsage(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationUsage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAdministrationUsage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdministrationUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdministrationUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecuredUnits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAdministrationUsage(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAdministrationUsage(uint64(l))
	}
	if m.NumNodes != 0 {
		n += 1 + sovAdministrationUsage(uint64(m.NumNodes))
	}
	if m.NumCpuUnits != 0 {
		n += 1 + sovAdministrationUsage(uint64(m.NumCpuUnits))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdministrationUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdministrationUsage(x uint64) (n int) {
	return sovAdministrationUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecuredUnits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecuredUnits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecuredUnits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCpuUnits", wireType)
			}
			m.NumCpuUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCpuUnits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdministrationUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdministrationUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdministrationUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdministrationUsage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdministrationUsage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdministrationUsage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdministrationUsage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdministrationUsage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdministrationUsage = fmt.Errorf("proto: unexpected end of group")
)
