// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/cve.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VulnerabilityState indicates if vulnerability is being observed or deferred(/suppressed). By default, it vulnerabilities are observed.
type VulnerabilityState int32

const (
	VulnerabilityState_OBSERVED       VulnerabilityState = 0 // [Default state]
	VulnerabilityState_DEFERRED       VulnerabilityState = 1
	VulnerabilityState_FALSE_POSITIVE VulnerabilityState = 2
)

// Enum value maps for VulnerabilityState.
var (
	VulnerabilityState_name = map[int32]string{
		0: "OBSERVED",
		1: "DEFERRED",
		2: "FALSE_POSITIVE",
	}
	VulnerabilityState_value = map[string]int32{
		"OBSERVED":       0,
		"DEFERRED":       1,
		"FALSE_POSITIVE": 2,
	}
)

func (x VulnerabilityState) Enum() *VulnerabilityState {
	p := new(VulnerabilityState)
	*p = x
	return p
}

func (x VulnerabilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[0].Descriptor()
}

func (VulnerabilityState) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[0]
}

func (x VulnerabilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilityState.Descriptor instead.
func (VulnerabilityState) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0}
}

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY   VulnerabilitySeverity = 0
	VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY       VulnerabilitySeverity = 1
	VulnerabilitySeverity_MODERATE_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 2
	VulnerabilitySeverity_IMPORTANT_VULNERABILITY_SEVERITY VulnerabilitySeverity = 3
	VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 4
)

// Enum value maps for VulnerabilitySeverity.
var (
	VulnerabilitySeverity_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY_SEVERITY",
		1: "LOW_VULNERABILITY_SEVERITY",
		2: "MODERATE_VULNERABILITY_SEVERITY",
		3: "IMPORTANT_VULNERABILITY_SEVERITY",
		4: "CRITICAL_VULNERABILITY_SEVERITY",
	}
	VulnerabilitySeverity_value = map[string]int32{
		"UNKNOWN_VULNERABILITY_SEVERITY":   0,
		"LOW_VULNERABILITY_SEVERITY":       1,
		"MODERATE_VULNERABILITY_SEVERITY":  2,
		"IMPORTANT_VULNERABILITY_SEVERITY": 3,
		"CRITICAL_VULNERABILITY_SEVERITY":  4,
	}
)

func (x VulnerabilitySeverity) Enum() *VulnerabilitySeverity {
	p := new(VulnerabilitySeverity)
	*p = x
	return p
}

func (x VulnerabilitySeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilitySeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[1].Descriptor()
}

func (VulnerabilitySeverity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[1]
}

func (x VulnerabilitySeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilitySeverity.Descriptor instead.
func (VulnerabilitySeverity) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{1}
}

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SOURCE_RED_HAT Source = 1
	Source_SOURCE_OSV     Source = 2
	Source_SOURCE_NVD     Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SOURCE_RED_HAT",
		2: "SOURCE_OSV",
		3: "SOURCE_NVD",
	}
	Source_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SOURCE_RED_HAT": 1,
		"SOURCE_OSV":     2,
		"SOURCE_NVD":     3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[2].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[2]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{2}
}

type CVE_CVEType int32

const (
	CVE_UNKNOWN_CVE   CVE_CVEType = 0
	CVE_IMAGE_CVE     CVE_CVEType = 1
	CVE_K8S_CVE       CVE_CVEType = 2
	CVE_ISTIO_CVE     CVE_CVEType = 3
	CVE_NODE_CVE      CVE_CVEType = 4
	CVE_OPENSHIFT_CVE CVE_CVEType = 5
)

// Enum value maps for CVE_CVEType.
var (
	CVE_CVEType_name = map[int32]string{
		0: "UNKNOWN_CVE",
		1: "IMAGE_CVE",
		2: "K8S_CVE",
		3: "ISTIO_CVE",
		4: "NODE_CVE",
		5: "OPENSHIFT_CVE",
	}
	CVE_CVEType_value = map[string]int32{
		"UNKNOWN_CVE":   0,
		"IMAGE_CVE":     1,
		"K8S_CVE":       2,
		"ISTIO_CVE":     3,
		"NODE_CVE":      4,
		"OPENSHIFT_CVE": 5,
	}
)

func (x CVE_CVEType) Enum() *CVE_CVEType {
	p := new(CVE_CVEType)
	*p = x
	return p
}

func (x CVE_CVEType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVE_CVEType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[3].Descriptor()
}

func (CVE_CVEType) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[3]
}

func (x CVE_CVEType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVE_CVEType.Descriptor instead.
func (CVE_CVEType) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0, 0}
}

type CVE_ScoreVersion int32

const (
	CVE_V2      CVE_ScoreVersion = 0 // No unset for automatic backwards compatibility
	CVE_V3      CVE_ScoreVersion = 1
	CVE_UNKNOWN CVE_ScoreVersion = 2
)

// Enum value maps for CVE_ScoreVersion.
var (
	CVE_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
		2: "UNKNOWN",
	}
	CVE_ScoreVersion_value = map[string]int32{
		"V2":      0,
		"V3":      1,
		"UNKNOWN": 2,
	}
)

func (x CVE_ScoreVersion) Enum() *CVE_ScoreVersion {
	p := new(CVE_ScoreVersion)
	*p = x
	return p
}

func (x CVE_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVE_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[4].Descriptor()
}

func (CVE_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[4]
}

func (x CVE_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVE_ScoreVersion.Descriptor instead.
func (CVE_ScoreVersion) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0, 1}
}

// ScoreVersion can be deprecated ROX-26066
type CVEInfo_ScoreVersion int32

const (
	CVEInfo_V2      CVEInfo_ScoreVersion = 0 // No unset for automatic backwards compatibility
	CVEInfo_V3      CVEInfo_ScoreVersion = 1
	CVEInfo_UNKNOWN CVEInfo_ScoreVersion = 2
)

// Enum value maps for CVEInfo_ScoreVersion.
var (
	CVEInfo_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
		2: "UNKNOWN",
	}
	CVEInfo_ScoreVersion_value = map[string]int32{
		"V2":      0,
		"V3":      1,
		"UNKNOWN": 2,
	}
)

func (x CVEInfo_ScoreVersion) Enum() *CVEInfo_ScoreVersion {
	p := new(CVEInfo_ScoreVersion)
	*p = x
	return p
}

func (x CVEInfo_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVEInfo_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[5].Descriptor()
}

func (CVEInfo_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[5]
}

func (x CVEInfo_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVEInfo_ScoreVersion.Descriptor instead.
func (CVEInfo_ScoreVersion) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{1, 0}
}

type CVSSV2_Impact int32

const (
	CVSSV2_IMPACT_NONE     CVSSV2_Impact = 0
	CVSSV2_IMPACT_PARTIAL  CVSSV2_Impact = 1
	CVSSV2_IMPACT_COMPLETE CVSSV2_Impact = 2
)

// Enum value maps for CVSSV2_Impact.
var (
	CVSSV2_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_PARTIAL",
		2: "IMPACT_COMPLETE",
	}
	CVSSV2_Impact_value = map[string]int32{
		"IMPACT_NONE":     0,
		"IMPACT_PARTIAL":  1,
		"IMPACT_COMPLETE": 2,
	}
)

func (x CVSSV2_Impact) Enum() *CVSSV2_Impact {
	p := new(CVSSV2_Impact)
	*p = x
	return p
}

func (x CVSSV2_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[6].Descriptor()
}

func (CVSSV2_Impact) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[6]
}

func (x CVSSV2_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Impact.Descriptor instead.
func (CVSSV2_Impact) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6, 0}
}

type CVSSV2_AttackVector int32

const (
	CVSSV2_ATTACK_LOCAL    CVSSV2_AttackVector = 0
	CVSSV2_ATTACK_ADJACENT CVSSV2_AttackVector = 1
	CVSSV2_ATTACK_NETWORK  CVSSV2_AttackVector = 2
)

// Enum value maps for CVSSV2_AttackVector.
var (
	CVSSV2_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
	}
	CVSSV2_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
	}
)

func (x CVSSV2_AttackVector) Enum() *CVSSV2_AttackVector {
	p := new(CVSSV2_AttackVector)
	*p = x
	return p
}

func (x CVSSV2_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[7].Descriptor()
}

func (CVSSV2_AttackVector) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[7]
}

func (x CVSSV2_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_AttackVector.Descriptor instead.
func (CVSSV2_AttackVector) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6, 1}
}

type CVSSV2_AccessComplexity int32

const (
	CVSSV2_ACCESS_HIGH   CVSSV2_AccessComplexity = 0
	CVSSV2_ACCESS_MEDIUM CVSSV2_AccessComplexity = 1
	CVSSV2_ACCESS_LOW    CVSSV2_AccessComplexity = 2
)

// Enum value maps for CVSSV2_AccessComplexity.
var (
	CVSSV2_AccessComplexity_name = map[int32]string{
		0: "ACCESS_HIGH",
		1: "ACCESS_MEDIUM",
		2: "ACCESS_LOW",
	}
	CVSSV2_AccessComplexity_value = map[string]int32{
		"ACCESS_HIGH":   0,
		"ACCESS_MEDIUM": 1,
		"ACCESS_LOW":    2,
	}
)

func (x CVSSV2_AccessComplexity) Enum() *CVSSV2_AccessComplexity {
	p := new(CVSSV2_AccessComplexity)
	*p = x
	return p
}

func (x CVSSV2_AccessComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AccessComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[8].Descriptor()
}

func (CVSSV2_AccessComplexity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[8]
}

func (x CVSSV2_AccessComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_AccessComplexity.Descriptor instead.
func (CVSSV2_AccessComplexity) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6, 2}
}

type CVSSV2_Authentication int32

const (
	CVSSV2_AUTH_MULTIPLE CVSSV2_Authentication = 0
	CVSSV2_AUTH_SINGLE   CVSSV2_Authentication = 1
	CVSSV2_AUTH_NONE     CVSSV2_Authentication = 2
)

// Enum value maps for CVSSV2_Authentication.
var (
	CVSSV2_Authentication_name = map[int32]string{
		0: "AUTH_MULTIPLE",
		1: "AUTH_SINGLE",
		2: "AUTH_NONE",
	}
	CVSSV2_Authentication_value = map[string]int32{
		"AUTH_MULTIPLE": 0,
		"AUTH_SINGLE":   1,
		"AUTH_NONE":     2,
	}
)

func (x CVSSV2_Authentication) Enum() *CVSSV2_Authentication {
	p := new(CVSSV2_Authentication)
	*p = x
	return p
}

func (x CVSSV2_Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[9].Descriptor()
}

func (CVSSV2_Authentication) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[9]
}

func (x CVSSV2_Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Authentication.Descriptor instead.
func (CVSSV2_Authentication) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6, 3}
}

type CVSSV2_Severity int32

const (
	CVSSV2_UNKNOWN CVSSV2_Severity = 0
	CVSSV2_LOW     CVSSV2_Severity = 1
	CVSSV2_MEDIUM  CVSSV2_Severity = 2
	CVSSV2_HIGH    CVSSV2_Severity = 3
)

// Enum value maps for CVSSV2_Severity.
var (
	CVSSV2_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	CVSSV2_Severity_value = map[string]int32{
		"UNKNOWN": 0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
	}
)

func (x CVSSV2_Severity) Enum() *CVSSV2_Severity {
	p := new(CVSSV2_Severity)
	*p = x
	return p
}

func (x CVSSV2_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[10].Descriptor()
}

func (CVSSV2_Severity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[10]
}

func (x CVSSV2_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Severity.Descriptor instead.
func (CVSSV2_Severity) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6, 4}
}

type CVSSV3_Impact int32

const (
	CVSSV3_IMPACT_NONE CVSSV3_Impact = 0
	CVSSV3_IMPACT_LOW  CVSSV3_Impact = 1
	CVSSV3_IMPACT_HIGH CVSSV3_Impact = 2
)

// Enum value maps for CVSSV3_Impact.
var (
	CVSSV3_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_LOW",
		2: "IMPACT_HIGH",
	}
	CVSSV3_Impact_value = map[string]int32{
		"IMPACT_NONE": 0,
		"IMPACT_LOW":  1,
		"IMPACT_HIGH": 2,
	}
)

func (x CVSSV3_Impact) Enum() *CVSSV3_Impact {
	p := new(CVSSV3_Impact)
	*p = x
	return p
}

func (x CVSSV3_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[11].Descriptor()
}

func (CVSSV3_Impact) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[11]
}

func (x CVSSV3_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Impact.Descriptor instead.
func (CVSSV3_Impact) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 0}
}

type CVSSV3_AttackVector int32

const (
	CVSSV3_ATTACK_LOCAL    CVSSV3_AttackVector = 0
	CVSSV3_ATTACK_ADJACENT CVSSV3_AttackVector = 1
	CVSSV3_ATTACK_NETWORK  CVSSV3_AttackVector = 2
	CVSSV3_ATTACK_PHYSICAL CVSSV3_AttackVector = 3
)

// Enum value maps for CVSSV3_AttackVector.
var (
	CVSSV3_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
		3: "ATTACK_PHYSICAL",
	}
	CVSSV3_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
		"ATTACK_PHYSICAL": 3,
	}
)

func (x CVSSV3_AttackVector) Enum() *CVSSV3_AttackVector {
	p := new(CVSSV3_AttackVector)
	*p = x
	return p
}

func (x CVSSV3_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[12].Descriptor()
}

func (CVSSV3_AttackVector) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[12]
}

func (x CVSSV3_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_AttackVector.Descriptor instead.
func (CVSSV3_AttackVector) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 1}
}

type CVSSV3_Complexity int32

const (
	CVSSV3_COMPLEXITY_LOW  CVSSV3_Complexity = 0
	CVSSV3_COMPLEXITY_HIGH CVSSV3_Complexity = 1
)

// Enum value maps for CVSSV3_Complexity.
var (
	CVSSV3_Complexity_name = map[int32]string{
		0: "COMPLEXITY_LOW",
		1: "COMPLEXITY_HIGH",
	}
	CVSSV3_Complexity_value = map[string]int32{
		"COMPLEXITY_LOW":  0,
		"COMPLEXITY_HIGH": 1,
	}
)

func (x CVSSV3_Complexity) Enum() *CVSSV3_Complexity {
	p := new(CVSSV3_Complexity)
	*p = x
	return p
}

func (x CVSSV3_Complexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Complexity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[13].Descriptor()
}

func (CVSSV3_Complexity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[13]
}

func (x CVSSV3_Complexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Complexity.Descriptor instead.
func (CVSSV3_Complexity) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 2}
}

type CVSSV3_Privileges int32

const (
	CVSSV3_PRIVILEGE_NONE CVSSV3_Privileges = 0
	CVSSV3_PRIVILEGE_LOW  CVSSV3_Privileges = 1
	CVSSV3_PRIVILEGE_HIGH CVSSV3_Privileges = 2
)

// Enum value maps for CVSSV3_Privileges.
var (
	CVSSV3_Privileges_name = map[int32]string{
		0: "PRIVILEGE_NONE",
		1: "PRIVILEGE_LOW",
		2: "PRIVILEGE_HIGH",
	}
	CVSSV3_Privileges_value = map[string]int32{
		"PRIVILEGE_NONE": 0,
		"PRIVILEGE_LOW":  1,
		"PRIVILEGE_HIGH": 2,
	}
)

func (x CVSSV3_Privileges) Enum() *CVSSV3_Privileges {
	p := new(CVSSV3_Privileges)
	*p = x
	return p
}

func (x CVSSV3_Privileges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Privileges) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[14].Descriptor()
}

func (CVSSV3_Privileges) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[14]
}

func (x CVSSV3_Privileges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Privileges.Descriptor instead.
func (CVSSV3_Privileges) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 3}
}

type CVSSV3_UserInteraction int32

const (
	CVSSV3_UI_NONE     CVSSV3_UserInteraction = 0
	CVSSV3_UI_REQUIRED CVSSV3_UserInteraction = 1
)

// Enum value maps for CVSSV3_UserInteraction.
var (
	CVSSV3_UserInteraction_name = map[int32]string{
		0: "UI_NONE",
		1: "UI_REQUIRED",
	}
	CVSSV3_UserInteraction_value = map[string]int32{
		"UI_NONE":     0,
		"UI_REQUIRED": 1,
	}
)

func (x CVSSV3_UserInteraction) Enum() *CVSSV3_UserInteraction {
	p := new(CVSSV3_UserInteraction)
	*p = x
	return p
}

func (x CVSSV3_UserInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_UserInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[15].Descriptor()
}

func (CVSSV3_UserInteraction) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[15]
}

func (x CVSSV3_UserInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_UserInteraction.Descriptor instead.
func (CVSSV3_UserInteraction) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 4}
}

type CVSSV3_Scope int32

const (
	CVSSV3_UNCHANGED CVSSV3_Scope = 0
	CVSSV3_CHANGED   CVSSV3_Scope = 1
)

// Enum value maps for CVSSV3_Scope.
var (
	CVSSV3_Scope_name = map[int32]string{
		0: "UNCHANGED",
		1: "CHANGED",
	}
	CVSSV3_Scope_value = map[string]int32{
		"UNCHANGED": 0,
		"CHANGED":   1,
	}
)

func (x CVSSV3_Scope) Enum() *CVSSV3_Scope {
	p := new(CVSSV3_Scope)
	*p = x
	return p
}

func (x CVSSV3_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[16].Descriptor()
}

func (CVSSV3_Scope) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[16]
}

func (x CVSSV3_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Scope.Descriptor instead.
func (CVSSV3_Scope) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 5}
}

type CVSSV3_Severity int32

const (
	CVSSV3_UNKNOWN  CVSSV3_Severity = 0
	CVSSV3_NONE     CVSSV3_Severity = 1
	CVSSV3_LOW      CVSSV3_Severity = 2
	CVSSV3_MEDIUM   CVSSV3_Severity = 3
	CVSSV3_HIGH     CVSSV3_Severity = 4
	CVSSV3_CRITICAL CVSSV3_Severity = 5
)

// Enum value maps for CVSSV3_Severity.
var (
	CVSSV3_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	CVSSV3_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NONE":     1,
		"LOW":      2,
		"MEDIUM":   3,
		"HIGH":     4,
		"CRITICAL": 5,
	}
)

func (x CVSSV3_Severity) Enum() *CVSSV3_Severity {
	p := new(CVSSV3_Severity)
	*p = x
	return p
}

func (x CVSSV3_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[17].Descriptor()
}

func (CVSSV3_Severity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[17]
}

func (x CVSSV3_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Severity.Descriptor instead.
func (CVSSV3_Severity) EnumDescriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7, 6}
}

// ******************************
// This proto is deprecated.
// ******************************
// Next Tag: 23
type CVE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"CVE,store"`                                         // @gotags: search:"CVE,store"
	Cvss        float32       `protobuf:"fixed32,2,opt,name=cvss,proto3" json:"cvss,omitempty" search:"CVSS,store"`                                   // @gotags: search:"CVSS,store"
	ImpactScore float32       `protobuf:"fixed32,14,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty" search:"Impact Score"` // @gotags: search:"Impact Score"
	Type        CVE_CVEType   `protobuf:"varint,3,opt,name=type,proto3,enum=storage.CVE_CVEType" json:"type,omitempty" sql:"-"`           // @gotags: sql:"-"
	Types       []CVE_CVEType `protobuf:"varint,18,rep,packed,name=types,proto3,enum=storage.CVE_CVEType" json:"types,omitempty" search:"CVE Type"` // @gotags: search:"CVE Type"
	Summary     string        `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Link        string        `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	// This indicates the timestamp when the cve was first published in the cve feeds.
	PublishedOn *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=published_on,json=publishedOn,proto3" json:"published_on,omitempty" search:"CVE Published On"` // @gotags: search:"CVE Published On"
	// Time when the CVE was first seen in the system.
	CreatedAt          *timestamppb.Timestamp         `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" search:"CVE Created Time"` // @gotags: search:"CVE Created Time"
	LastModified       *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	References         []*CVE_Reference               `protobuf:"bytes,8,rep,name=references,proto3" json:"references,omitempty"`
	ScoreVersion       CVE_ScoreVersion               `protobuf:"varint,9,opt,name=score_version,json=scoreVersion,proto3,enum=storage.CVE_ScoreVersion" json:"score_version,omitempty"`
	CvssV2             *CVSSV2                        `protobuf:"bytes,10,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3             *CVSSV3                        `protobuf:"bytes,11,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	Suppressed         bool                           `protobuf:"varint,12,opt,name=suppressed,proto3" json:"suppressed,omitempty" search:"CVE Snoozed"` // @gotags: search:"CVE Snoozed"
	SuppressActivation *timestamppb.Timestamp         `protobuf:"bytes,16,opt,name=suppress_activation,json=suppressActivation,proto3" json:"suppress_activation,omitempty"`
	SuppressExpiry     *timestamppb.Timestamp         `protobuf:"bytes,17,opt,name=suppress_expiry,json=suppressExpiry,proto3" json:"suppress_expiry,omitempty" search:"CVE Snooze Expiry,hidden"` // @gotags: search:"CVE Snooze Expiry,hidden"
	DistroSpecifics    map[string]*CVE_DistroSpecific `protobuf:"bytes,19,rep,name=distro_specifics,json=distroSpecifics,proto3" json:"distro_specifics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Severity           VulnerabilitySeverity          `protobuf:"varint,20,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" search:"Severity"` // @gotags: search:"Severity"
}

func (x *CVE) Reset() {
	*x = CVE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE) ProtoMessage() {}

func (x *CVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVE.ProtoReflect.Descriptor instead.
func (*CVE) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0}
}

func (x *CVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *CVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *CVE) GetType() CVE_CVEType {
	if x != nil {
		return x.Type
	}
	return CVE_UNKNOWN_CVE
}

func (x *CVE) GetTypes() []CVE_CVEType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CVE) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CVE) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CVE) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *CVE) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CVE) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *CVE) GetReferences() []*CVE_Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CVE) GetScoreVersion() CVE_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return CVE_V2
}

func (x *CVE) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *CVE) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *CVE) GetSuppressed() bool {
	if x != nil {
		return x.Suppressed
	}
	return false
}

func (x *CVE) GetSuppressActivation() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressActivation
	}
	return nil
}

func (x *CVE) GetSuppressExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressExpiry
	}
	return nil
}

func (x *CVE) GetDistroSpecifics() map[string]*CVE_DistroSpecific {
	if x != nil {
		return x.DistroSpecifics
	}
	return nil
}

func (x *CVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

type CVEInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cve     string `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty" search:"CVE,store" sql:"index=hash"` // @gotags: search:"CVE,store" sql:"index=hash"
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Link    string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// This indicates the timestamp when the cve was first published in the cve feeds.
	PublishedOn *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=published_on,json=publishedOn,proto3" json:"published_on,omitempty" search:"CVE Published On"` // @gotags: search:"CVE Published On"
	// Time when the CVE was first seen in the system.
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" search:"CVE Created Time"` // @gotags: search:"CVE Created Time"
	LastModified *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	ScoreVersion CVEInfo_ScoreVersion   `protobuf:"varint,7,opt,name=score_version,json=scoreVersion,proto3,enum=storage.CVEInfo_ScoreVersion" json:"score_version,omitempty"`
	// CVSSV2 CVSSV3 ScoreVersion can be deprecated ROX-26066
	CvssV2     *CVSSV2              `protobuf:"bytes,8,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3     *CVSSV3              `protobuf:"bytes,9,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	References []*CVEInfo_Reference `protobuf:"bytes,10,rep,name=references,proto3" json:"references,omitempty"`
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics []*CVSSScore `protobuf:"bytes,11,rep,name=cvss_metrics,json=cvssMetrics,proto3" json:"cvss_metrics,omitempty"`
}

func (x *CVEInfo) Reset() {
	*x = CVEInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo) ProtoMessage() {}

func (x *CVEInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo.ProtoReflect.Descriptor instead.
func (*CVEInfo) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{1}
}

func (x *CVEInfo) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *CVEInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CVEInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CVEInfo) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *CVEInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CVEInfo) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *CVEInfo) GetScoreVersion() CVEInfo_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return CVEInfo_V2
}

func (x *CVEInfo) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *CVEInfo) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *CVEInfo) GetReferences() []*CVEInfo_Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CVEInfo) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

type ImageCVE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"CVE ID,hidden" sql:"pk,id"` // This field is composite of cve and operating system. // @gotags: search:"CVE ID,hidden" sql:"pk,id"
	CveBaseInfo     *CVEInfo `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	OperatingSystem string   `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" search:"Operating System"` // @gotags: search:"Operating System"
	// cvss stores ACS preferred cvss score
	Cvss        float32               `protobuf:"fixed32,4,opt,name=cvss,proto3" json:"cvss,omitempty" search:"CVSS,store"`                                           // @gotags: search:"CVSS,store"
	Severity    VulnerabilitySeverity `protobuf:"varint,5,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" search:"Severity"` // @gotags: search:"Severity"
	ImpactScore float32               `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty" search:"Impact Score"`          // @gotags: search:"Impact Score"
	// Deprecated: Marked as deprecated in storage/cve.proto.
	Snoozed bool `protobuf:"varint,7,opt,name=snoozed,proto3" json:"snoozed,omitempty" search:"CVE Snoozed"` // @gotags: search:"CVE Snoozed"
	// Deprecated: Marked as deprecated in storage/cve.proto.
	SnoozeStart *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	// Deprecated: Marked as deprecated in storage/cve.proto.
	SnoozeExpiry *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty" search:"CVE Snooze Expiry,hidden"` // @gotags: search:"CVE Snooze Expiry,hidden"
	// nvdcvss stores cvss score for a cve from NVD
	Nvdcvss float32 `protobuf:"fixed32,10,opt,name=nvdcvss,proto3" json:"nvdcvss,omitempty" search:"NVD CVSS"` // @gotags: search:"NVD CVSS",store"
	// cvss_metrics stores list of cvss metrics from different sources like Redhat, NVD etc
	CvssMetrics []*CVSSScore `protobuf:"bytes,11,rep,name=cvss_metrics,json=cvssMetrics,proto3" json:"cvss_metrics,omitempty"`
}

func (x *ImageCVE) Reset() {
	*x = ImageCVE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCVE) ProtoMessage() {}

func (x *ImageCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCVE.ProtoReflect.Descriptor instead.
func (*ImageCVE) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{2}
}

func (x *ImageCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *ImageCVE) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *ImageCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *ImageCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *ImageCVE) GetNvdcvss() float32 {
	if x != nil {
		return x.Nvdcvss
	}
	return 0
}

func (x *ImageCVE) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

type NodeCVE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"CVE ID,hidden" sql:"pk,id"` // This field is composite of cve and operating system. // @gotags: search:"CVE ID,hidden" sql:"pk,id"
	CveBaseInfo     *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	OperatingSystem string                 `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" search:"Operating System"` // @gotags: search:"Operating System"
	Cvss            float32                `protobuf:"fixed32,4,opt,name=cvss,proto3" json:"cvss,omitempty" search:"CVSS,store"`                                            // @gotags: search:"CVSS,store"
	Severity        VulnerabilitySeverity  `protobuf:"varint,5,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" search:"Severity"`  // @gotags: search:"Severity"
	ImpactScore     float32                `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty" search:"Impact Score"`           // @gotags: search:"Impact Score"
	Snoozed         bool                   `protobuf:"varint,7,opt,name=snoozed,proto3" json:"snoozed,omitempty" search:"CVE Snoozed"`                                       // @gotags: search:"CVE Snoozed"
	SnoozeStart     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty" search:"CVE Snooze Expiry,hidden"`  // @gotags: search:"CVE Snooze Expiry,hidden"
	Orphaned        bool                   `protobuf:"varint,10,opt,name=orphaned,proto3" json:"orphaned,omitempty" search:"CVE Orphaned,hidden"`                            // @gotags: search:"CVE Orphaned,hidden"
	OrphanedTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=orphaned_time,json=orphanedTime,proto3" json:"orphaned_time,omitempty" search:"CVE Orphaned Time,hidden"` // @gotags: search:"CVE Orphaned Time,hidden"
}

func (x *NodeCVE) Reset() {
	*x = NodeCVE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCVE) ProtoMessage() {}

func (x *NodeCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCVE.ProtoReflect.Descriptor instead.
func (*NodeCVE) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{3}
}

func (x *NodeCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *NodeCVE) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *NodeCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *NodeCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *NodeCVE) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *NodeCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *NodeCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *NodeCVE) GetOrphaned() bool {
	if x != nil {
		return x.Orphaned
	}
	return false
}

func (x *NodeCVE) GetOrphanedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrphanedTime
	}
	return nil
}

type ClusterCVE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"CVE ID,hidden" sql:"pk,id"` // This field is composite of cve and type. // @gotags: search:"CVE ID,hidden" sql:"pk,id"
	CveBaseInfo  *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	Cvss         float32                `protobuf:"fixed32,3,opt,name=cvss,proto3" json:"cvss,omitempty" search:"CVSS,store"`                                           // @gotags: search:"CVSS,store"
	Severity     VulnerabilitySeverity  `protobuf:"varint,4,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty" search:"Severity"` // @gotags: search:"Severity"
	ImpactScore  float32                `protobuf:"fixed32,5,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty" search:"Impact Score"`          // @gotags: search:"Impact Score"
	Snoozed      bool                   `protobuf:"varint,6,opt,name=snoozed,proto3" json:"snoozed,omitempty" search:"CVE Snoozed"`                                      // @gotags: search:"CVE Snoozed"
	SnoozeStart  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty" search:"CVE Snooze Expiry,hidden"` // @gotags: search:"CVE Snooze Expiry,hidden"
	Type         CVE_CVEType            `protobuf:"varint,9,opt,name=type,proto3,enum=storage.CVE_CVEType" json:"type,omitempty" search:"CVE Type"`           // @gotags: search:"CVE Type"
}

func (x *ClusterCVE) Reset() {
	*x = ClusterCVE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCVE) ProtoMessage() {}

func (x *ClusterCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCVE.ProtoReflect.Descriptor instead.
func (*ClusterCVE) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *ClusterCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *ClusterCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ClusterCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *ClusterCVE) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *ClusterCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *ClusterCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *ClusterCVE) GetType() CVE_CVEType {
	if x != nil {
		return x.Type
	}
	return CVE_UNKNOWN_CVE
}

type CVSSScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source Source `protobuf:"varint,1,opt,name=source,proto3,enum=storage.Source" json:"source,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Types that are assignable to CvssScore:
	//
	//	*CVSSScore_Cvssv2
	//	*CVSSScore_Cvssv3
	CvssScore isCVSSScore_CvssScore `protobuf_oneof:"cvss_score"`
}

func (x *CVSSScore) Reset() {
	*x = CVSSScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVSSScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSScore) ProtoMessage() {}

func (x *CVSSScore) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSScore.ProtoReflect.Descriptor instead.
func (*CVSSScore) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{5}
}

func (x *CVSSScore) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (m *CVSSScore) GetCvssScore() isCVSSScore_CvssScore {
	if m != nil {
		return m.CvssScore
	}
	return nil
}

func (x *CVSSScore) GetCvssv2() *CVSSV2 {
	if x, ok := x.GetCvssScore().(*CVSSScore_Cvssv2); ok {
		return x.Cvssv2
	}
	return nil
}

func (x *CVSSScore) GetCvssv3() *CVSSV3 {
	if x, ok := x.GetCvssScore().(*CVSSScore_Cvssv3); ok {
		return x.Cvssv3
	}
	return nil
}

type isCVSSScore_CvssScore interface {
	isCVSSScore_CvssScore()
}

type CVSSScore_Cvssv2 struct {
	Cvssv2 *CVSSV2 `protobuf:"bytes,3,opt,name=cvssv2,proto3,oneof"`
}

type CVSSScore_Cvssv3 struct {
	Cvssv3 *CVSSV3 `protobuf:"bytes,4,opt,name=cvssv3,proto3,oneof"`
}

func (*CVSSScore_Cvssv2) isCVSSScore_CvssScore() {}

func (*CVSSScore_Cvssv3) isCVSSScore_CvssScore() {}

type CVSSV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector              string                  `protobuf:"bytes,1,opt,name=vector,proto3" json:"vector,omitempty"`
	AttackVector        CVSSV2_AttackVector     `protobuf:"varint,2,opt,name=attack_vector,json=attackVector,proto3,enum=storage.CVSSV2_AttackVector" json:"attack_vector,omitempty"`
	AccessComplexity    CVSSV2_AccessComplexity `protobuf:"varint,3,opt,name=access_complexity,json=accessComplexity,proto3,enum=storage.CVSSV2_AccessComplexity" json:"access_complexity,omitempty"`
	Authentication      CVSSV2_Authentication   `protobuf:"varint,4,opt,name=authentication,proto3,enum=storage.CVSSV2_Authentication" json:"authentication,omitempty"`
	Confidentiality     CVSSV2_Impact           `protobuf:"varint,5,opt,name=confidentiality,proto3,enum=storage.CVSSV2_Impact" json:"confidentiality,omitempty"`
	Integrity           CVSSV2_Impact           `protobuf:"varint,6,opt,name=integrity,proto3,enum=storage.CVSSV2_Impact" json:"integrity,omitempty"`
	Availability        CVSSV2_Impact           `protobuf:"varint,7,opt,name=availability,proto3,enum=storage.CVSSV2_Impact" json:"availability,omitempty"`
	ExploitabilityScore float32                 `protobuf:"fixed32,8,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float32                 `protobuf:"fixed32,9,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	Score               float32                 `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Severity            CVSSV2_Severity         `protobuf:"varint,11,opt,name=severity,proto3,enum=storage.CVSSV2_Severity" json:"severity,omitempty"`
}

func (x *CVSSV2) Reset() {
	*x = CVSSV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVSSV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV2) ProtoMessage() {}

func (x *CVSSV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSV2.ProtoReflect.Descriptor instead.
func (*CVSSV2) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{6}
}

func (x *CVSSV2) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *CVSSV2) GetAttackVector() CVSSV2_AttackVector {
	if x != nil {
		return x.AttackVector
	}
	return CVSSV2_ATTACK_LOCAL
}

func (x *CVSSV2) GetAccessComplexity() CVSSV2_AccessComplexity {
	if x != nil {
		return x.AccessComplexity
	}
	return CVSSV2_ACCESS_HIGH
}

func (x *CVSSV2) GetAuthentication() CVSSV2_Authentication {
	if x != nil {
		return x.Authentication
	}
	return CVSSV2_AUTH_MULTIPLE
}

func (x *CVSSV2) GetConfidentiality() CVSSV2_Impact {
	if x != nil {
		return x.Confidentiality
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetIntegrity() CVSSV2_Impact {
	if x != nil {
		return x.Integrity
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetAvailability() CVSSV2_Impact {
	if x != nil {
		return x.Availability
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetExploitabilityScore() float32 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVSSV2) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *CVSSV2) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CVSSV2) GetSeverity() CVSSV2_Severity {
	if x != nil {
		return x.Severity
	}
	return CVSSV2_UNKNOWN
}

type CVSSV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector              string                 `protobuf:"bytes,1,opt,name=vector,proto3" json:"vector,omitempty"`
	ExploitabilityScore float32                `protobuf:"fixed32,2,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float32                `protobuf:"fixed32,3,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	AttackVector        CVSSV3_AttackVector    `protobuf:"varint,4,opt,name=attack_vector,json=attackVector,proto3,enum=storage.CVSSV3_AttackVector" json:"attack_vector,omitempty"`
	AttackComplexity    CVSSV3_Complexity      `protobuf:"varint,5,opt,name=attack_complexity,json=attackComplexity,proto3,enum=storage.CVSSV3_Complexity" json:"attack_complexity,omitempty"`
	PrivilegesRequired  CVSSV3_Privileges      `protobuf:"varint,6,opt,name=privileges_required,json=privilegesRequired,proto3,enum=storage.CVSSV3_Privileges" json:"privileges_required,omitempty"`
	UserInteraction     CVSSV3_UserInteraction `protobuf:"varint,7,opt,name=user_interaction,json=userInteraction,proto3,enum=storage.CVSSV3_UserInteraction" json:"user_interaction,omitempty"`
	Scope               CVSSV3_Scope           `protobuf:"varint,8,opt,name=scope,proto3,enum=storage.CVSSV3_Scope" json:"scope,omitempty"`
	Confidentiality     CVSSV3_Impact          `protobuf:"varint,9,opt,name=confidentiality,proto3,enum=storage.CVSSV3_Impact" json:"confidentiality,omitempty"`
	Integrity           CVSSV3_Impact          `protobuf:"varint,10,opt,name=integrity,proto3,enum=storage.CVSSV3_Impact" json:"integrity,omitempty"`
	Availability        CVSSV3_Impact          `protobuf:"varint,11,opt,name=availability,proto3,enum=storage.CVSSV3_Impact" json:"availability,omitempty"`
	Score               float32                `protobuf:"fixed32,12,opt,name=score,proto3" json:"score,omitempty"`
	Severity            CVSSV3_Severity        `protobuf:"varint,13,opt,name=severity,proto3,enum=storage.CVSSV3_Severity" json:"severity,omitempty"`
}

func (x *CVSSV3) Reset() {
	*x = CVSSV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVSSV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV3) ProtoMessage() {}

func (x *CVSSV3) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSV3.ProtoReflect.Descriptor instead.
func (*CVSSV3) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{7}
}

func (x *CVSSV3) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *CVSSV3) GetExploitabilityScore() float32 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVSSV3) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *CVSSV3) GetAttackVector() CVSSV3_AttackVector {
	if x != nil {
		return x.AttackVector
	}
	return CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) GetAttackComplexity() CVSSV3_Complexity {
	if x != nil {
		return x.AttackComplexity
	}
	return CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) GetPrivilegesRequired() CVSSV3_Privileges {
	if x != nil {
		return x.PrivilegesRequired
	}
	return CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) GetUserInteraction() CVSSV3_UserInteraction {
	if x != nil {
		return x.UserInteraction
	}
	return CVSSV3_UI_NONE
}

func (x *CVSSV3) GetScope() CVSSV3_Scope {
	if x != nil {
		return x.Scope
	}
	return CVSSV3_UNCHANGED
}

func (x *CVSSV3) GetConfidentiality() CVSSV3_Impact {
	if x != nil {
		return x.Confidentiality
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetIntegrity() CVSSV3_Impact {
	if x != nil {
		return x.Integrity
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetAvailability() CVSSV3_Impact {
	if x != nil {
		return x.Availability
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CVSSV3) GetSeverity() CVSSV3_Severity {
	if x != nil {
		return x.Severity
	}
	return CVSSV3_UNKNOWN
}

type CVE_DistroSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity     VulnerabilitySeverity `protobuf:"varint,1,opt,name=severity,proto3,enum=storage.VulnerabilitySeverity" json:"severity,omitempty"`
	Cvss         float32               `protobuf:"fixed32,2,opt,name=cvss,proto3" json:"cvss,omitempty"`
	ScoreVersion CVE_ScoreVersion      `protobuf:"varint,3,opt,name=score_version,json=scoreVersion,proto3,enum=storage.CVE_ScoreVersion" json:"score_version,omitempty"`
	CvssV2       *CVSSV2               `protobuf:"bytes,4,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3       *CVSSV3               `protobuf:"bytes,5,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
}

func (x *CVE_DistroSpecific) Reset() {
	*x = CVE_DistroSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVE_DistroSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE_DistroSpecific) ProtoMessage() {}

func (x *CVE_DistroSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVE_DistroSpecific.ProtoReflect.Descriptor instead.
func (*CVE_DistroSpecific) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CVE_DistroSpecific) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *CVE_DistroSpecific) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *CVE_DistroSpecific) GetScoreVersion() CVE_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return CVE_V2
}

func (x *CVE_DistroSpecific) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *CVE_DistroSpecific) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

type CVE_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URI  string   `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CVE_Reference) Reset() {
	*x = CVE_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVE_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE_Reference) ProtoMessage() {}

func (x *CVE_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVE_Reference.ProtoReflect.Descriptor instead.
func (*CVE_Reference) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CVE_Reference) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *CVE_Reference) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CVEInfo_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URI  string   `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CVEInfo_Reference) Reset() {
	*x = CVEInfo_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cve_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEInfo_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo_Reference) ProtoMessage() {}

func (x *CVEInfo_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo_Reference.ProtoReflect.Descriptor instead.
func (*CVEInfo_Reference) Descriptor() ([]byte, []int) {
	return file_storage_cve_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CVEInfo_Reference) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *CVEInfo_Reference) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_storage_cve_proto protoreflect.FileDescriptor

var file_storage_cve_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x76, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x0b,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x2e, 0x43, 0x56, 0x45, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x56, 0x45, 0x2e, 0x43, 0x56, 0x45, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x32, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x32, 0x12, 0x28, 0x0a,
	0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x52,
	0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56,
	0x45, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0xf4, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x32,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53,
	0x56, 0x33, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x1a, 0x31, 0x0a, 0x09, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x5f, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x56, 0x45, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66,
	0x0a, 0x07, 0x43, 0x56, 0x45, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x38, 0x53,
	0x5f, 0x43, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x53, 0x54, 0x49, 0x4f, 0x5f,
	0x43, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x56,
	0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x5f, 0x43, 0x56, 0x45, 0x10, 0x05, 0x22, 0x2b, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x33, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22,
	0xef, 0x04, 0x0a, 0x07, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76,
	0x73, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x52, 0x06, 0x63, 0x76,
	0x73, 0x73, 0x56, 0x32, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x33, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x76,
	0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x76, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x1a, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x2b, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x33, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x02, 0x22, 0xe5, 0x03, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x56, 0x45, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63,
	0x76, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x6f,
	0x7a, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x76, 0x64, 0x63,
	0x76, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x76, 0x64, 0x63, 0x76,
	0x73, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x76,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x07, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x56, 0x45, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x76, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x6f,
	0x6f, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x6f,
	0x7a, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x89, 0x03, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x56, 0x45, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x76, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x6f,
	0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6e, 0x6f, 0x6f, 0x7a,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x45, 0x2e, 0x43,
	0x56, 0x45, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x09, 0x43, 0x56, 0x53, 0x53, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x76, 0x73, 0x73, 0x76, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x48, 0x00, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x76, 0x32,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x76, 0x73, 0x73, 0x76, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x76, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x63,
	0x76, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa4, 0x07, 0x0a, 0x06, 0x43, 0x56,
	0x53, 0x53, 0x56, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56,
	0x53, 0x53, 0x56, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x4d, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x2e, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a,
	0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x32, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x06,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x22, 0x49, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x4a,
	0x41, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x10, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x22, 0x43, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x22, 0x8a, 0x09, 0x0a, 0x06, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56,
	0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x11,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53,
	0x53, 0x56, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x52, 0x12,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56,
	0x33, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x56, 0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x0a, 0x06, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x22, 0x5e, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x48, 0x59,
	0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x35, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x22, 0x47,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x22, 0x2f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x49,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x22, 0x23, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x22, 0x4e, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x44, 0x0a,
	0x12, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0xcb, 0x01, 0x0a, 0x15, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4e, 0x54, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x2a, 0x50, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x53,
	0x56, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x56,
	0x44, 0x10, 0x03, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72,
	0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_cve_proto_rawDescOnce sync.Once
	file_storage_cve_proto_rawDescData = file_storage_cve_proto_rawDesc
)

func file_storage_cve_proto_rawDescGZIP() []byte {
	file_storage_cve_proto_rawDescOnce.Do(func() {
		file_storage_cve_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_cve_proto_rawDescData)
	})
	return file_storage_cve_proto_rawDescData
}

var file_storage_cve_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_storage_cve_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_storage_cve_proto_goTypes = []any{
	(VulnerabilityState)(0),       // 0: storage.VulnerabilityState
	(VulnerabilitySeverity)(0),    // 1: storage.VulnerabilitySeverity
	(Source)(0),                   // 2: storage.Source
	(CVE_CVEType)(0),              // 3: storage.CVE.CVEType
	(CVE_ScoreVersion)(0),         // 4: storage.CVE.ScoreVersion
	(CVEInfo_ScoreVersion)(0),     // 5: storage.CVEInfo.ScoreVersion
	(CVSSV2_Impact)(0),            // 6: storage.CVSSV2.Impact
	(CVSSV2_AttackVector)(0),      // 7: storage.CVSSV2.AttackVector
	(CVSSV2_AccessComplexity)(0),  // 8: storage.CVSSV2.AccessComplexity
	(CVSSV2_Authentication)(0),    // 9: storage.CVSSV2.Authentication
	(CVSSV2_Severity)(0),          // 10: storage.CVSSV2.Severity
	(CVSSV3_Impact)(0),            // 11: storage.CVSSV3.Impact
	(CVSSV3_AttackVector)(0),      // 12: storage.CVSSV3.AttackVector
	(CVSSV3_Complexity)(0),        // 13: storage.CVSSV3.Complexity
	(CVSSV3_Privileges)(0),        // 14: storage.CVSSV3.Privileges
	(CVSSV3_UserInteraction)(0),   // 15: storage.CVSSV3.UserInteraction
	(CVSSV3_Scope)(0),             // 16: storage.CVSSV3.Scope
	(CVSSV3_Severity)(0),          // 17: storage.CVSSV3.Severity
	(*CVE)(nil),                   // 18: storage.CVE
	(*CVEInfo)(nil),               // 19: storage.CVEInfo
	(*ImageCVE)(nil),              // 20: storage.ImageCVE
	(*NodeCVE)(nil),               // 21: storage.NodeCVE
	(*ClusterCVE)(nil),            // 22: storage.ClusterCVE
	(*CVSSScore)(nil),             // 23: storage.CVSSScore
	(*CVSSV2)(nil),                // 24: storage.CVSSV2
	(*CVSSV3)(nil),                // 25: storage.CVSSV3
	(*CVE_DistroSpecific)(nil),    // 26: storage.CVE.DistroSpecific
	(*CVE_Reference)(nil),         // 27: storage.CVE.Reference
	nil,                           // 28: storage.CVE.DistroSpecificsEntry
	(*CVEInfo_Reference)(nil),     // 29: storage.CVEInfo.Reference
	(*timestamppb.Timestamp)(nil), // 30: google.protobuf.Timestamp
}
var file_storage_cve_proto_depIdxs = []int32{
	3,  // 0: storage.CVE.type:type_name -> storage.CVE.CVEType
	3,  // 1: storage.CVE.types:type_name -> storage.CVE.CVEType
	30, // 2: storage.CVE.published_on:type_name -> google.protobuf.Timestamp
	30, // 3: storage.CVE.created_at:type_name -> google.protobuf.Timestamp
	30, // 4: storage.CVE.last_modified:type_name -> google.protobuf.Timestamp
	27, // 5: storage.CVE.references:type_name -> storage.CVE.Reference
	4,  // 6: storage.CVE.score_version:type_name -> storage.CVE.ScoreVersion
	24, // 7: storage.CVE.cvss_v2:type_name -> storage.CVSSV2
	25, // 8: storage.CVE.cvss_v3:type_name -> storage.CVSSV3
	30, // 9: storage.CVE.suppress_activation:type_name -> google.protobuf.Timestamp
	30, // 10: storage.CVE.suppress_expiry:type_name -> google.protobuf.Timestamp
	28, // 11: storage.CVE.distro_specifics:type_name -> storage.CVE.DistroSpecificsEntry
	1,  // 12: storage.CVE.severity:type_name -> storage.VulnerabilitySeverity
	30, // 13: storage.CVEInfo.published_on:type_name -> google.protobuf.Timestamp
	30, // 14: storage.CVEInfo.created_at:type_name -> google.protobuf.Timestamp
	30, // 15: storage.CVEInfo.last_modified:type_name -> google.protobuf.Timestamp
	5,  // 16: storage.CVEInfo.score_version:type_name -> storage.CVEInfo.ScoreVersion
	24, // 17: storage.CVEInfo.cvss_v2:type_name -> storage.CVSSV2
	25, // 18: storage.CVEInfo.cvss_v3:type_name -> storage.CVSSV3
	29, // 19: storage.CVEInfo.references:type_name -> storage.CVEInfo.Reference
	23, // 20: storage.CVEInfo.cvss_metrics:type_name -> storage.CVSSScore
	19, // 21: storage.ImageCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 22: storage.ImageCVE.severity:type_name -> storage.VulnerabilitySeverity
	30, // 23: storage.ImageCVE.snooze_start:type_name -> google.protobuf.Timestamp
	30, // 24: storage.ImageCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	23, // 25: storage.ImageCVE.cvss_metrics:type_name -> storage.CVSSScore
	19, // 26: storage.NodeCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 27: storage.NodeCVE.severity:type_name -> storage.VulnerabilitySeverity
	30, // 28: storage.NodeCVE.snooze_start:type_name -> google.protobuf.Timestamp
	30, // 29: storage.NodeCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	30, // 30: storage.NodeCVE.orphaned_time:type_name -> google.protobuf.Timestamp
	19, // 31: storage.ClusterCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 32: storage.ClusterCVE.severity:type_name -> storage.VulnerabilitySeverity
	30, // 33: storage.ClusterCVE.snooze_start:type_name -> google.protobuf.Timestamp
	30, // 34: storage.ClusterCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	3,  // 35: storage.ClusterCVE.type:type_name -> storage.CVE.CVEType
	2,  // 36: storage.CVSSScore.source:type_name -> storage.Source
	24, // 37: storage.CVSSScore.cvssv2:type_name -> storage.CVSSV2
	25, // 38: storage.CVSSScore.cvssv3:type_name -> storage.CVSSV3
	7,  // 39: storage.CVSSV2.attack_vector:type_name -> storage.CVSSV2.AttackVector
	8,  // 40: storage.CVSSV2.access_complexity:type_name -> storage.CVSSV2.AccessComplexity
	9,  // 41: storage.CVSSV2.authentication:type_name -> storage.CVSSV2.Authentication
	6,  // 42: storage.CVSSV2.confidentiality:type_name -> storage.CVSSV2.Impact
	6,  // 43: storage.CVSSV2.integrity:type_name -> storage.CVSSV2.Impact
	6,  // 44: storage.CVSSV2.availability:type_name -> storage.CVSSV2.Impact
	10, // 45: storage.CVSSV2.severity:type_name -> storage.CVSSV2.Severity
	12, // 46: storage.CVSSV3.attack_vector:type_name -> storage.CVSSV3.AttackVector
	13, // 47: storage.CVSSV3.attack_complexity:type_name -> storage.CVSSV3.Complexity
	14, // 48: storage.CVSSV3.privileges_required:type_name -> storage.CVSSV3.Privileges
	15, // 49: storage.CVSSV3.user_interaction:type_name -> storage.CVSSV3.UserInteraction
	16, // 50: storage.CVSSV3.scope:type_name -> storage.CVSSV3.Scope
	11, // 51: storage.CVSSV3.confidentiality:type_name -> storage.CVSSV3.Impact
	11, // 52: storage.CVSSV3.integrity:type_name -> storage.CVSSV3.Impact
	11, // 53: storage.CVSSV3.availability:type_name -> storage.CVSSV3.Impact
	17, // 54: storage.CVSSV3.severity:type_name -> storage.CVSSV3.Severity
	1,  // 55: storage.CVE.DistroSpecific.severity:type_name -> storage.VulnerabilitySeverity
	4,  // 56: storage.CVE.DistroSpecific.score_version:type_name -> storage.CVE.ScoreVersion
	24, // 57: storage.CVE.DistroSpecific.cvss_v2:type_name -> storage.CVSSV2
	25, // 58: storage.CVE.DistroSpecific.cvss_v3:type_name -> storage.CVSSV3
	26, // 59: storage.CVE.DistroSpecificsEntry.value:type_name -> storage.CVE.DistroSpecific
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_storage_cve_proto_init() }
func file_storage_cve_proto_init() {
	if File_storage_cve_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_cve_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CVE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CVEInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ImageCVE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*NodeCVE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterCVE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CVSSScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CVSSV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CVSSV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CVE_DistroSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CVE_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cve_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CVEInfo_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_cve_proto_msgTypes[5].OneofWrappers = []any{
		(*CVSSScore_Cvssv2)(nil),
		(*CVSSScore_Cvssv3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_cve_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_cve_proto_goTypes,
		DependencyIndexes: file_storage_cve_proto_depIdxs,
		EnumInfos:         file_storage_cve_proto_enumTypes,
		MessageInfos:      file_storage_cve_proto_msgTypes,
	}.Build()
	File_storage_cve_proto = out.File
	file_storage_cve_proto_rawDesc = nil
	file_storage_cve_proto_goTypes = nil
	file_storage_cve_proto_depIdxs = nil
}
