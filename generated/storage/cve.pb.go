// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/cve.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VulnerabilityState indicates if vulnerability is being observed or deferred(/suppressed). By default, it vulnerabilities are observed.
type VulnerabilityState int32

const (
	VulnerabilityState_OBSERVED       VulnerabilityState = 0 // [Default state]
	VulnerabilityState_DEFERRED       VulnerabilityState = 1
	VulnerabilityState_FALSE_POSITIVE VulnerabilityState = 2
)

// Enum value maps for VulnerabilityState.
var (
	VulnerabilityState_name = map[int32]string{
		0: "OBSERVED",
		1: "DEFERRED",
		2: "FALSE_POSITIVE",
	}
	VulnerabilityState_value = map[string]int32{
		"OBSERVED":       0,
		"DEFERRED":       1,
		"FALSE_POSITIVE": 2,
	}
)

func (x VulnerabilityState) Enum() *VulnerabilityState {
	p := new(VulnerabilityState)
	*p = x
	return p
}

func (x VulnerabilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[0].Descriptor()
}

func (VulnerabilityState) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[0]
}

func (x VulnerabilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY   VulnerabilitySeverity = 0
	VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY       VulnerabilitySeverity = 1
	VulnerabilitySeverity_MODERATE_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 2
	VulnerabilitySeverity_IMPORTANT_VULNERABILITY_SEVERITY VulnerabilitySeverity = 3
	VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 4
)

// Enum value maps for VulnerabilitySeverity.
var (
	VulnerabilitySeverity_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY_SEVERITY",
		1: "LOW_VULNERABILITY_SEVERITY",
		2: "MODERATE_VULNERABILITY_SEVERITY",
		3: "IMPORTANT_VULNERABILITY_SEVERITY",
		4: "CRITICAL_VULNERABILITY_SEVERITY",
	}
	VulnerabilitySeverity_value = map[string]int32{
		"UNKNOWN_VULNERABILITY_SEVERITY":   0,
		"LOW_VULNERABILITY_SEVERITY":       1,
		"MODERATE_VULNERABILITY_SEVERITY":  2,
		"IMPORTANT_VULNERABILITY_SEVERITY": 3,
		"CRITICAL_VULNERABILITY_SEVERITY":  4,
	}
)

func (x VulnerabilitySeverity) Enum() *VulnerabilitySeverity {
	p := new(VulnerabilitySeverity)
	*p = x
	return p
}

func (x VulnerabilitySeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilitySeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[1].Descriptor()
}

func (VulnerabilitySeverity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[1]
}

func (x VulnerabilitySeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SOURCE_RED_HAT Source = 1
	Source_SOURCE_OSV     Source = 2
	Source_SOURCE_NVD     Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SOURCE_RED_HAT",
		2: "SOURCE_OSV",
		3: "SOURCE_NVD",
	}
	Source_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SOURCE_RED_HAT": 1,
		"SOURCE_OSV":     2,
		"SOURCE_NVD":     3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[2].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[2]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Added this score version for nvd cvss score. moving out and re using score version from cveinfo will cause backward compatibility issue
type CvssScoreVersion int32

const (
	CvssScoreVersion_UNKNOWN_VERSION CvssScoreVersion = 0
	CvssScoreVersion_V2              CvssScoreVersion = 1 // No unset for automatic backwards compatibility
	CvssScoreVersion_V3              CvssScoreVersion = 2
)

// Enum value maps for CvssScoreVersion.
var (
	CvssScoreVersion_name = map[int32]string{
		0: "UNKNOWN_VERSION",
		1: "V2",
		2: "V3",
	}
	CvssScoreVersion_value = map[string]int32{
		"UNKNOWN_VERSION": 0,
		"V2":              1,
		"V3":              2,
	}
)

func (x CvssScoreVersion) Enum() *CvssScoreVersion {
	p := new(CvssScoreVersion)
	*p = x
	return p
}

func (x CvssScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CvssScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[3].Descriptor()
}

func (CvssScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[3]
}

func (x CvssScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVE_CVEType int32

const (
	CVE_UNKNOWN_CVE   CVE_CVEType = 0
	CVE_IMAGE_CVE     CVE_CVEType = 1
	CVE_K8S_CVE       CVE_CVEType = 2
	CVE_ISTIO_CVE     CVE_CVEType = 3
	CVE_NODE_CVE      CVE_CVEType = 4
	CVE_OPENSHIFT_CVE CVE_CVEType = 5
)

// Enum value maps for CVE_CVEType.
var (
	CVE_CVEType_name = map[int32]string{
		0: "UNKNOWN_CVE",
		1: "IMAGE_CVE",
		2: "K8S_CVE",
		3: "ISTIO_CVE",
		4: "NODE_CVE",
		5: "OPENSHIFT_CVE",
	}
	CVE_CVEType_value = map[string]int32{
		"UNKNOWN_CVE":   0,
		"IMAGE_CVE":     1,
		"K8S_CVE":       2,
		"ISTIO_CVE":     3,
		"NODE_CVE":      4,
		"OPENSHIFT_CVE": 5,
	}
)

func (x CVE_CVEType) Enum() *CVE_CVEType {
	p := new(CVE_CVEType)
	*p = x
	return p
}

func (x CVE_CVEType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVE_CVEType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[4].Descriptor()
}

func (CVE_CVEType) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[4]
}

func (x CVE_CVEType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVE_ScoreVersion int32

const (
	CVE_V2      CVE_ScoreVersion = 0 // No unset for automatic backwards compatibility
	CVE_V3      CVE_ScoreVersion = 1
	CVE_UNKNOWN CVE_ScoreVersion = 2
)

// Enum value maps for CVE_ScoreVersion.
var (
	CVE_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
		2: "UNKNOWN",
	}
	CVE_ScoreVersion_value = map[string]int32{
		"V2":      0,
		"V3":      1,
		"UNKNOWN": 2,
	}
)

func (x CVE_ScoreVersion) Enum() *CVE_ScoreVersion {
	p := new(CVE_ScoreVersion)
	*p = x
	return p
}

func (x CVE_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVE_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[5].Descriptor()
}

func (CVE_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[5]
}

func (x CVE_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// ScoreVersion can be deprecated ROX-26066
type CVEInfo_ScoreVersion int32

const (
	CVEInfo_V2      CVEInfo_ScoreVersion = 0 // No unset for automatic backwards compatibility
	CVEInfo_V3      CVEInfo_ScoreVersion = 1
	CVEInfo_UNKNOWN CVEInfo_ScoreVersion = 2
)

// Enum value maps for CVEInfo_ScoreVersion.
var (
	CVEInfo_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
		2: "UNKNOWN",
	}
	CVEInfo_ScoreVersion_value = map[string]int32{
		"V2":      0,
		"V3":      1,
		"UNKNOWN": 2,
	}
)

func (x CVEInfo_ScoreVersion) Enum() *CVEInfo_ScoreVersion {
	p := new(CVEInfo_ScoreVersion)
	*p = x
	return p
}

func (x CVEInfo_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVEInfo_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[6].Descriptor()
}

func (CVEInfo_ScoreVersion) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[6]
}

func (x CVEInfo_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV2_Impact int32

const (
	CVSSV2_IMPACT_NONE     CVSSV2_Impact = 0
	CVSSV2_IMPACT_PARTIAL  CVSSV2_Impact = 1
	CVSSV2_IMPACT_COMPLETE CVSSV2_Impact = 2
)

// Enum value maps for CVSSV2_Impact.
var (
	CVSSV2_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_PARTIAL",
		2: "IMPACT_COMPLETE",
	}
	CVSSV2_Impact_value = map[string]int32{
		"IMPACT_NONE":     0,
		"IMPACT_PARTIAL":  1,
		"IMPACT_COMPLETE": 2,
	}
)

func (x CVSSV2_Impact) Enum() *CVSSV2_Impact {
	p := new(CVSSV2_Impact)
	*p = x
	return p
}

func (x CVSSV2_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[7].Descriptor()
}

func (CVSSV2_Impact) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[7]
}

func (x CVSSV2_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV2_AttackVector int32

const (
	CVSSV2_ATTACK_LOCAL    CVSSV2_AttackVector = 0
	CVSSV2_ATTACK_ADJACENT CVSSV2_AttackVector = 1
	CVSSV2_ATTACK_NETWORK  CVSSV2_AttackVector = 2
)

// Enum value maps for CVSSV2_AttackVector.
var (
	CVSSV2_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
	}
	CVSSV2_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
	}
)

func (x CVSSV2_AttackVector) Enum() *CVSSV2_AttackVector {
	p := new(CVSSV2_AttackVector)
	*p = x
	return p
}

func (x CVSSV2_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[8].Descriptor()
}

func (CVSSV2_AttackVector) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[8]
}

func (x CVSSV2_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV2_AccessComplexity int32

const (
	CVSSV2_ACCESS_HIGH   CVSSV2_AccessComplexity = 0
	CVSSV2_ACCESS_MEDIUM CVSSV2_AccessComplexity = 1
	CVSSV2_ACCESS_LOW    CVSSV2_AccessComplexity = 2
)

// Enum value maps for CVSSV2_AccessComplexity.
var (
	CVSSV2_AccessComplexity_name = map[int32]string{
		0: "ACCESS_HIGH",
		1: "ACCESS_MEDIUM",
		2: "ACCESS_LOW",
	}
	CVSSV2_AccessComplexity_value = map[string]int32{
		"ACCESS_HIGH":   0,
		"ACCESS_MEDIUM": 1,
		"ACCESS_LOW":    2,
	}
)

func (x CVSSV2_AccessComplexity) Enum() *CVSSV2_AccessComplexity {
	p := new(CVSSV2_AccessComplexity)
	*p = x
	return p
}

func (x CVSSV2_AccessComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AccessComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[9].Descriptor()
}

func (CVSSV2_AccessComplexity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[9]
}

func (x CVSSV2_AccessComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV2_Authentication int32

const (
	CVSSV2_AUTH_MULTIPLE CVSSV2_Authentication = 0
	CVSSV2_AUTH_SINGLE   CVSSV2_Authentication = 1
	CVSSV2_AUTH_NONE     CVSSV2_Authentication = 2
)

// Enum value maps for CVSSV2_Authentication.
var (
	CVSSV2_Authentication_name = map[int32]string{
		0: "AUTH_MULTIPLE",
		1: "AUTH_SINGLE",
		2: "AUTH_NONE",
	}
	CVSSV2_Authentication_value = map[string]int32{
		"AUTH_MULTIPLE": 0,
		"AUTH_SINGLE":   1,
		"AUTH_NONE":     2,
	}
)

func (x CVSSV2_Authentication) Enum() *CVSSV2_Authentication {
	p := new(CVSSV2_Authentication)
	*p = x
	return p
}

func (x CVSSV2_Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[10].Descriptor()
}

func (CVSSV2_Authentication) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[10]
}

func (x CVSSV2_Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV2_Severity int32

const (
	CVSSV2_UNKNOWN CVSSV2_Severity = 0
	CVSSV2_LOW     CVSSV2_Severity = 1
	CVSSV2_MEDIUM  CVSSV2_Severity = 2
	CVSSV2_HIGH    CVSSV2_Severity = 3
)

// Enum value maps for CVSSV2_Severity.
var (
	CVSSV2_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	CVSSV2_Severity_value = map[string]int32{
		"UNKNOWN": 0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
	}
)

func (x CVSSV2_Severity) Enum() *CVSSV2_Severity {
	p := new(CVSSV2_Severity)
	*p = x
	return p
}

func (x CVSSV2_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[11].Descriptor()
}

func (CVSSV2_Severity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[11]
}

func (x CVSSV2_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Impact int32

const (
	CVSSV3_IMPACT_NONE CVSSV3_Impact = 0
	CVSSV3_IMPACT_LOW  CVSSV3_Impact = 1
	CVSSV3_IMPACT_HIGH CVSSV3_Impact = 2
)

// Enum value maps for CVSSV3_Impact.
var (
	CVSSV3_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_LOW",
		2: "IMPACT_HIGH",
	}
	CVSSV3_Impact_value = map[string]int32{
		"IMPACT_NONE": 0,
		"IMPACT_LOW":  1,
		"IMPACT_HIGH": 2,
	}
)

func (x CVSSV3_Impact) Enum() *CVSSV3_Impact {
	p := new(CVSSV3_Impact)
	*p = x
	return p
}

func (x CVSSV3_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[12].Descriptor()
}

func (CVSSV3_Impact) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[12]
}

func (x CVSSV3_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_AttackVector int32

const (
	CVSSV3_ATTACK_LOCAL    CVSSV3_AttackVector = 0
	CVSSV3_ATTACK_ADJACENT CVSSV3_AttackVector = 1
	CVSSV3_ATTACK_NETWORK  CVSSV3_AttackVector = 2
	CVSSV3_ATTACK_PHYSICAL CVSSV3_AttackVector = 3
)

// Enum value maps for CVSSV3_AttackVector.
var (
	CVSSV3_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
		3: "ATTACK_PHYSICAL",
	}
	CVSSV3_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
		"ATTACK_PHYSICAL": 3,
	}
)

func (x CVSSV3_AttackVector) Enum() *CVSSV3_AttackVector {
	p := new(CVSSV3_AttackVector)
	*p = x
	return p
}

func (x CVSSV3_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[13].Descriptor()
}

func (CVSSV3_AttackVector) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[13]
}

func (x CVSSV3_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Complexity int32

const (
	CVSSV3_COMPLEXITY_LOW  CVSSV3_Complexity = 0
	CVSSV3_COMPLEXITY_HIGH CVSSV3_Complexity = 1
)

// Enum value maps for CVSSV3_Complexity.
var (
	CVSSV3_Complexity_name = map[int32]string{
		0: "COMPLEXITY_LOW",
		1: "COMPLEXITY_HIGH",
	}
	CVSSV3_Complexity_value = map[string]int32{
		"COMPLEXITY_LOW":  0,
		"COMPLEXITY_HIGH": 1,
	}
)

func (x CVSSV3_Complexity) Enum() *CVSSV3_Complexity {
	p := new(CVSSV3_Complexity)
	*p = x
	return p
}

func (x CVSSV3_Complexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Complexity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[14].Descriptor()
}

func (CVSSV3_Complexity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[14]
}

func (x CVSSV3_Complexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Privileges int32

const (
	CVSSV3_PRIVILEGE_NONE CVSSV3_Privileges = 0
	CVSSV3_PRIVILEGE_LOW  CVSSV3_Privileges = 1
	CVSSV3_PRIVILEGE_HIGH CVSSV3_Privileges = 2
)

// Enum value maps for CVSSV3_Privileges.
var (
	CVSSV3_Privileges_name = map[int32]string{
		0: "PRIVILEGE_NONE",
		1: "PRIVILEGE_LOW",
		2: "PRIVILEGE_HIGH",
	}
	CVSSV3_Privileges_value = map[string]int32{
		"PRIVILEGE_NONE": 0,
		"PRIVILEGE_LOW":  1,
		"PRIVILEGE_HIGH": 2,
	}
)

func (x CVSSV3_Privileges) Enum() *CVSSV3_Privileges {
	p := new(CVSSV3_Privileges)
	*p = x
	return p
}

func (x CVSSV3_Privileges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Privileges) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[15].Descriptor()
}

func (CVSSV3_Privileges) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[15]
}

func (x CVSSV3_Privileges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_UserInteraction int32

const (
	CVSSV3_UI_NONE     CVSSV3_UserInteraction = 0
	CVSSV3_UI_REQUIRED CVSSV3_UserInteraction = 1
)

// Enum value maps for CVSSV3_UserInteraction.
var (
	CVSSV3_UserInteraction_name = map[int32]string{
		0: "UI_NONE",
		1: "UI_REQUIRED",
	}
	CVSSV3_UserInteraction_value = map[string]int32{
		"UI_NONE":     0,
		"UI_REQUIRED": 1,
	}
)

func (x CVSSV3_UserInteraction) Enum() *CVSSV3_UserInteraction {
	p := new(CVSSV3_UserInteraction)
	*p = x
	return p
}

func (x CVSSV3_UserInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_UserInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[16].Descriptor()
}

func (CVSSV3_UserInteraction) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[16]
}

func (x CVSSV3_UserInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Scope int32

const (
	CVSSV3_UNCHANGED CVSSV3_Scope = 0
	CVSSV3_CHANGED   CVSSV3_Scope = 1
)

// Enum value maps for CVSSV3_Scope.
var (
	CVSSV3_Scope_name = map[int32]string{
		0: "UNCHANGED",
		1: "CHANGED",
	}
	CVSSV3_Scope_value = map[string]int32{
		"UNCHANGED": 0,
		"CHANGED":   1,
	}
)

func (x CVSSV3_Scope) Enum() *CVSSV3_Scope {
	p := new(CVSSV3_Scope)
	*p = x
	return p
}

func (x CVSSV3_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[17].Descriptor()
}

func (CVSSV3_Scope) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[17]
}

func (x CVSSV3_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Severity int32

const (
	CVSSV3_UNKNOWN  CVSSV3_Severity = 0
	CVSSV3_NONE     CVSSV3_Severity = 1
	CVSSV3_LOW      CVSSV3_Severity = 2
	CVSSV3_MEDIUM   CVSSV3_Severity = 3
	CVSSV3_HIGH     CVSSV3_Severity = 4
	CVSSV3_CRITICAL CVSSV3_Severity = 5
)

// Enum value maps for CVSSV3_Severity.
var (
	CVSSV3_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	CVSSV3_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NONE":     1,
		"LOW":      2,
		"MEDIUM":   3,
		"HIGH":     4,
		"CRITICAL": 5,
	}
)

func (x CVSSV3_Severity) Enum() *CVSSV3_Severity {
	p := new(CVSSV3_Severity)
	*p = x
	return p
}

func (x CVSSV3_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cve_proto_enumTypes[18].Descriptor()
}

func (CVSSV3_Severity) Type() protoreflect.EnumType {
	return &file_storage_cve_proto_enumTypes[18]
}

func (x CVSSV3_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// EPSS Score stores two epss metrics returned by scanner - epss probability and epss percentile
type EPSS struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EpssProbability float32                `protobuf:"fixed32,1,opt,name=epss_probability,json=epssProbability"`
	xxx_hidden_EpssPercentile  float32                `protobuf:"fixed32,2,opt,name=epss_percentile,json=epssPercentile"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *EPSS) Reset() {
	*x = EPSS{}
	mi := &file_storage_cve_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EPSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EPSS) ProtoMessage() {}

func (x *EPSS) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EPSS) GetEpssProbability() float32 {
	if x != nil {
		return x.xxx_hidden_EpssProbability
	}
	return 0
}

func (x *EPSS) GetEpssPercentile() float32 {
	if x != nil {
		return x.xxx_hidden_EpssPercentile
	}
	return 0
}

func (x *EPSS) SetEpssProbability(v float32) {
	x.xxx_hidden_EpssProbability = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *EPSS) SetEpssPercentile(v float32) {
	x.xxx_hidden_EpssPercentile = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *EPSS) HasEpssProbability() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EPSS) HasEpssPercentile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EPSS) ClearEpssProbability() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EpssProbability = 0
}

func (x *EPSS) ClearEpssPercentile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EpssPercentile = 0
}

type EPSS_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	EpssProbability *float32
	EpssPercentile  *float32
}

func (b0 EPSS_builder) Build() *EPSS {
	m0 := &EPSS{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EpssProbability != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_EpssProbability = *b.EpssProbability
	}
	if b.EpssPercentile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_EpssPercentile = *b.EpssPercentile
	}
	return m0
}

// ******************************
// This proto is deprecated.
// ******************************
// Next Tag: 23
type CVE struct {
	state                         protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Id                 *string                        `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Cvss               float32                        `protobuf:"fixed32,2,opt,name=cvss"`
	xxx_hidden_ImpactScore        float32                        `protobuf:"fixed32,14,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Type               CVE_CVEType                    `protobuf:"varint,3,opt,name=type,enum=storage.CVE_CVEType"`
	xxx_hidden_Types              []CVE_CVEType                  `protobuf:"varint,18,rep,packed,name=types,enum=storage.CVE_CVEType"`
	xxx_hidden_Summary            *string                        `protobuf:"bytes,4,opt,name=summary"`
	xxx_hidden_Link               *string                        `protobuf:"bytes,5,opt,name=link"`
	xxx_hidden_PublishedOn        *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=published_on,json=publishedOn"`
	xxx_hidden_CreatedAt          *timestamppb.Timestamp         `protobuf:"bytes,15,opt,name=created_at,json=createdAt"`
	xxx_hidden_LastModified       *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=last_modified,json=lastModified"`
	xxx_hidden_References         *[]*CVE_Reference              `protobuf:"bytes,8,rep,name=references"`
	xxx_hidden_ScoreVersion       CVE_ScoreVersion               `protobuf:"varint,9,opt,name=score_version,json=scoreVersion,enum=storage.CVE_ScoreVersion"`
	xxx_hidden_CvssV2             *CVSSV2                        `protobuf:"bytes,10,opt,name=cvss_v2,json=cvssV2"`
	xxx_hidden_CvssV3             *CVSSV3                        `protobuf:"bytes,11,opt,name=cvss_v3,json=cvssV3"`
	xxx_hidden_Suppressed         bool                           `protobuf:"varint,12,opt,name=suppressed"`
	xxx_hidden_SuppressActivation *timestamppb.Timestamp         `protobuf:"bytes,16,opt,name=suppress_activation,json=suppressActivation"`
	xxx_hidden_SuppressExpiry     *timestamppb.Timestamp         `protobuf:"bytes,17,opt,name=suppress_expiry,json=suppressExpiry"`
	xxx_hidden_DistroSpecifics    map[string]*CVE_DistroSpecific `protobuf:"bytes,19,rep,name=distro_specifics,json=distroSpecifics" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Severity           VulnerabilitySeverity          `protobuf:"varint,20,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVE) Reset() {
	*x = CVE{}
	mi := &file_storage_cve_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE) ProtoMessage() {}

func (x *CVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVE) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *CVE) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *CVE) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *CVE) GetType() CVE_CVEType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Type
		}
	}
	return CVE_UNKNOWN_CVE
}

func (x *CVE) GetTypes() []CVE_CVEType {
	if x != nil {
		return x.xxx_hidden_Types
	}
	return nil
}

func (x *CVE) GetSummary() string {
	if x != nil {
		if x.xxx_hidden_Summary != nil {
			return *x.xxx_hidden_Summary
		}
		return ""
	}
	return ""
}

func (x *CVE) GetLink() string {
	if x != nil {
		if x.xxx_hidden_Link != nil {
			return *x.xxx_hidden_Link
		}
		return ""
	}
	return ""
}

func (x *CVE) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PublishedOn
	}
	return nil
}

func (x *CVE) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *CVE) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_LastModified
	}
	return nil
}

func (x *CVE) GetReferences() []*CVE_Reference {
	if x != nil {
		if x.xxx_hidden_References != nil {
			return *x.xxx_hidden_References
		}
	}
	return nil
}

func (x *CVE) GetScoreVersion() CVE_ScoreVersion {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 11) {
			return x.xxx_hidden_ScoreVersion
		}
	}
	return CVE_V2
}

func (x *CVE) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.xxx_hidden_CvssV2
	}
	return nil
}

func (x *CVE) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.xxx_hidden_CvssV3
	}
	return nil
}

func (x *CVE) GetSuppressed() bool {
	if x != nil {
		return x.xxx_hidden_Suppressed
	}
	return false
}

func (x *CVE) GetSuppressActivation() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SuppressActivation
	}
	return nil
}

func (x *CVE) GetSuppressExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SuppressExpiry
	}
	return nil
}

func (x *CVE) GetDistroSpecifics() map[string]*CVE_DistroSpecific {
	if x != nil {
		return x.xxx_hidden_DistroSpecifics
	}
	return nil
}

func (x *CVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 18) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *CVE) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 19)
}

func (x *CVE) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 19)
}

func (x *CVE) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 19)
}

func (x *CVE) SetType(v CVE_CVEType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 19)
}

func (x *CVE) SetTypes(v []CVE_CVEType) {
	x.xxx_hidden_Types = v
}

func (x *CVE) SetSummary(v string) {
	x.xxx_hidden_Summary = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 19)
}

func (x *CVE) SetLink(v string) {
	x.xxx_hidden_Link = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 19)
}

func (x *CVE) SetPublishedOn(v *timestamppb.Timestamp) {
	x.xxx_hidden_PublishedOn = v
}

func (x *CVE) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *CVE) SetLastModified(v *timestamppb.Timestamp) {
	x.xxx_hidden_LastModified = v
}

func (x *CVE) SetReferences(v []*CVE_Reference) {
	x.xxx_hidden_References = &v
}

func (x *CVE) SetScoreVersion(v CVE_ScoreVersion) {
	x.xxx_hidden_ScoreVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 19)
}

func (x *CVE) SetCvssV2(v *CVSSV2) {
	x.xxx_hidden_CvssV2 = v
}

func (x *CVE) SetCvssV3(v *CVSSV3) {
	x.xxx_hidden_CvssV3 = v
}

func (x *CVE) SetSuppressed(v bool) {
	x.xxx_hidden_Suppressed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 19)
}

func (x *CVE) SetSuppressActivation(v *timestamppb.Timestamp) {
	x.xxx_hidden_SuppressActivation = v
}

func (x *CVE) SetSuppressExpiry(v *timestamppb.Timestamp) {
	x.xxx_hidden_SuppressExpiry = v
}

func (x *CVE) SetDistroSpecifics(v map[string]*CVE_DistroSpecific) {
	x.xxx_hidden_DistroSpecifics = v
}

func (x *CVE) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 18, 19)
}

func (x *CVE) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVE) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVE) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVE) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CVE) HasSummary() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CVE) HasLink() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CVE) HasPublishedOn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PublishedOn != nil
}

func (x *CVE) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *CVE) HasLastModified() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastModified != nil
}

func (x *CVE) HasScoreVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *CVE) HasCvssV2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV2 != nil
}

func (x *CVE) HasCvssV3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV3 != nil
}

func (x *CVE) HasSuppressed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *CVE) HasSuppressActivation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SuppressActivation != nil
}

func (x *CVE) HasSuppressExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SuppressExpiry != nil
}

func (x *CVE) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 18)
}

func (x *CVE) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *CVE) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Cvss = 0
}

func (x *CVE) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ImpactScore = 0
}

func (x *CVE) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Type = CVE_UNKNOWN_CVE
}

func (x *CVE) ClearSummary() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Summary = nil
}

func (x *CVE) ClearLink() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Link = nil
}

func (x *CVE) ClearPublishedOn() {
	x.xxx_hidden_PublishedOn = nil
}

func (x *CVE) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

func (x *CVE) ClearLastModified() {
	x.xxx_hidden_LastModified = nil
}

func (x *CVE) ClearScoreVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_ScoreVersion = CVE_V2
}

func (x *CVE) ClearCvssV2() {
	x.xxx_hidden_CvssV2 = nil
}

func (x *CVE) ClearCvssV3() {
	x.xxx_hidden_CvssV3 = nil
}

func (x *CVE) ClearSuppressed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_Suppressed = false
}

func (x *CVE) ClearSuppressActivation() {
	x.xxx_hidden_SuppressActivation = nil
}

func (x *CVE) ClearSuppressExpiry() {
	x.xxx_hidden_SuppressExpiry = nil
}

func (x *CVE) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 18)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

type CVE_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *string
	Cvss        *float32
	ImpactScore *float32
	Type        *CVE_CVEType
	Types       []CVE_CVEType
	Summary     *string
	Link        *string
	// This indicates the timestamp when the cve was first published in the cve feeds.
	PublishedOn *timestamppb.Timestamp
	// Time when the CVE was first seen in the system.
	CreatedAt          *timestamppb.Timestamp
	LastModified       *timestamppb.Timestamp
	References         []*CVE_Reference
	ScoreVersion       *CVE_ScoreVersion
	CvssV2             *CVSSV2
	CvssV3             *CVSSV3
	Suppressed         *bool
	SuppressActivation *timestamppb.Timestamp
	SuppressExpiry     *timestamppb.Timestamp
	DistroSpecifics    map[string]*CVE_DistroSpecific
	Severity           *VulnerabilitySeverity
}

func (b0 CVE_builder) Build() *CVE {
	m0 := &CVE{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 19)
		x.xxx_hidden_Id = b.Id
	}
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 19)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 19)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 19)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_Types = b.Types
	if b.Summary != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 19)
		x.xxx_hidden_Summary = b.Summary
	}
	if b.Link != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 19)
		x.xxx_hidden_Link = b.Link
	}
	x.xxx_hidden_PublishedOn = b.PublishedOn
	x.xxx_hidden_CreatedAt = b.CreatedAt
	x.xxx_hidden_LastModified = b.LastModified
	x.xxx_hidden_References = &b.References
	if b.ScoreVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 19)
		x.xxx_hidden_ScoreVersion = *b.ScoreVersion
	}
	x.xxx_hidden_CvssV2 = b.CvssV2
	x.xxx_hidden_CvssV3 = b.CvssV3
	if b.Suppressed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 19)
		x.xxx_hidden_Suppressed = *b.Suppressed
	}
	x.xxx_hidden_SuppressActivation = b.SuppressActivation
	x.xxx_hidden_SuppressExpiry = b.SuppressExpiry
	x.xxx_hidden_DistroSpecifics = b.DistroSpecifics
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 18, 19)
		x.xxx_hidden_Severity = *b.Severity
	}
	return m0
}

type CVEInfo struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cve          *string                `protobuf:"bytes,1,opt,name=cve"`
	xxx_hidden_Summary      *string                `protobuf:"bytes,2,opt,name=summary"`
	xxx_hidden_Link         *string                `protobuf:"bytes,3,opt,name=link"`
	xxx_hidden_PublishedOn  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=published_on,json=publishedOn"`
	xxx_hidden_CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt"`
	xxx_hidden_LastModified *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified"`
	xxx_hidden_ScoreVersion CVEInfo_ScoreVersion   `protobuf:"varint,7,opt,name=score_version,json=scoreVersion,enum=storage.CVEInfo_ScoreVersion"`
	xxx_hidden_CvssV2       *CVSSV2                `protobuf:"bytes,8,opt,name=cvss_v2,json=cvssV2"`
	xxx_hidden_CvssV3       *CVSSV3                `protobuf:"bytes,9,opt,name=cvss_v3,json=cvssV3"`
	xxx_hidden_References   *[]*CVEInfo_Reference  `protobuf:"bytes,10,rep,name=references"`
	xxx_hidden_CvssMetrics  *[]*CVSSScore          `protobuf:"bytes,11,rep,name=cvss_metrics,json=cvssMetrics"`
	xxx_hidden_Epss         *EPSS                  `protobuf:"bytes,12,opt,name=epss"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CVEInfo) Reset() {
	*x = CVEInfo{}
	mi := &file_storage_cve_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo) ProtoMessage() {}

func (x *CVEInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVEInfo) GetCve() string {
	if x != nil {
		if x.xxx_hidden_Cve != nil {
			return *x.xxx_hidden_Cve
		}
		return ""
	}
	return ""
}

func (x *CVEInfo) GetSummary() string {
	if x != nil {
		if x.xxx_hidden_Summary != nil {
			return *x.xxx_hidden_Summary
		}
		return ""
	}
	return ""
}

func (x *CVEInfo) GetLink() string {
	if x != nil {
		if x.xxx_hidden_Link != nil {
			return *x.xxx_hidden_Link
		}
		return ""
	}
	return ""
}

func (x *CVEInfo) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PublishedOn
	}
	return nil
}

func (x *CVEInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *CVEInfo) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_LastModified
	}
	return nil
}

func (x *CVEInfo) GetScoreVersion() CVEInfo_ScoreVersion {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_ScoreVersion
		}
	}
	return CVEInfo_V2
}

func (x *CVEInfo) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.xxx_hidden_CvssV2
	}
	return nil
}

func (x *CVEInfo) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.xxx_hidden_CvssV3
	}
	return nil
}

func (x *CVEInfo) GetReferences() []*CVEInfo_Reference {
	if x != nil {
		if x.xxx_hidden_References != nil {
			return *x.xxx_hidden_References
		}
	}
	return nil
}

func (x *CVEInfo) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		if x.xxx_hidden_CvssMetrics != nil {
			return *x.xxx_hidden_CvssMetrics
		}
	}
	return nil
}

func (x *CVEInfo) GetEpss() *EPSS {
	if x != nil {
		return x.xxx_hidden_Epss
	}
	return nil
}

func (x *CVEInfo) SetCve(v string) {
	x.xxx_hidden_Cve = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *CVEInfo) SetSummary(v string) {
	x.xxx_hidden_Summary = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *CVEInfo) SetLink(v string) {
	x.xxx_hidden_Link = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
}

func (x *CVEInfo) SetPublishedOn(v *timestamppb.Timestamp) {
	x.xxx_hidden_PublishedOn = v
}

func (x *CVEInfo) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *CVEInfo) SetLastModified(v *timestamppb.Timestamp) {
	x.xxx_hidden_LastModified = v
}

func (x *CVEInfo) SetScoreVersion(v CVEInfo_ScoreVersion) {
	x.xxx_hidden_ScoreVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

func (x *CVEInfo) SetCvssV2(v *CVSSV2) {
	x.xxx_hidden_CvssV2 = v
}

func (x *CVEInfo) SetCvssV3(v *CVSSV3) {
	x.xxx_hidden_CvssV3 = v
}

func (x *CVEInfo) SetReferences(v []*CVEInfo_Reference) {
	x.xxx_hidden_References = &v
}

func (x *CVEInfo) SetCvssMetrics(v []*CVSSScore) {
	x.xxx_hidden_CvssMetrics = &v
}

func (x *CVEInfo) SetEpss(v *EPSS) {
	x.xxx_hidden_Epss = v
}

func (x *CVEInfo) HasCve() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVEInfo) HasSummary() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVEInfo) HasLink() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVEInfo) HasPublishedOn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PublishedOn != nil
}

func (x *CVEInfo) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *CVEInfo) HasLastModified() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastModified != nil
}

func (x *CVEInfo) HasScoreVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CVEInfo) HasCvssV2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV2 != nil
}

func (x *CVEInfo) HasCvssV3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV3 != nil
}

func (x *CVEInfo) HasEpss() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Epss != nil
}

func (x *CVEInfo) ClearCve() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Cve = nil
}

func (x *CVEInfo) ClearSummary() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Summary = nil
}

func (x *CVEInfo) ClearLink() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Link = nil
}

func (x *CVEInfo) ClearPublishedOn() {
	x.xxx_hidden_PublishedOn = nil
}

func (x *CVEInfo) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

func (x *CVEInfo) ClearLastModified() {
	x.xxx_hidden_LastModified = nil
}

func (x *CVEInfo) ClearScoreVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ScoreVersion = CVEInfo_V2
}

func (x *CVEInfo) ClearCvssV2() {
	x.xxx_hidden_CvssV2 = nil
}

func (x *CVEInfo) ClearCvssV3() {
	x.xxx_hidden_CvssV3 = nil
}

func (x *CVEInfo) ClearEpss() {
	x.xxx_hidden_Epss = nil
}

type CVEInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cve     *string
	Summary *string
	Link    *string
	// This indicates the timestamp when the cve was first published in the cve feeds.
	PublishedOn *timestamppb.Timestamp
	// Time when the CVE was first seen in the system.
	CreatedAt    *timestamppb.Timestamp
	LastModified *timestamppb.Timestamp
	ScoreVersion *CVEInfo_ScoreVersion
	// CVSSV2 CVSSV3 ScoreVersion can be deprecated ROX-26066
	CvssV2     *CVSSV2
	CvssV3     *CVSSV3
	References []*CVEInfo_Reference
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics []*CVSSScore
	Epss        *EPSS
}

func (b0 CVEInfo_builder) Build() *CVEInfo {
	m0 := &CVEInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Cve != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Cve = b.Cve
	}
	if b.Summary != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_Summary = b.Summary
	}
	if b.Link != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_Link = b.Link
	}
	x.xxx_hidden_PublishedOn = b.PublishedOn
	x.xxx_hidden_CreatedAt = b.CreatedAt
	x.xxx_hidden_LastModified = b.LastModified
	if b.ScoreVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_ScoreVersion = *b.ScoreVersion
	}
	x.xxx_hidden_CvssV2 = b.CvssV2
	x.xxx_hidden_CvssV3 = b.CvssV3
	x.xxx_hidden_References = &b.References
	x.xxx_hidden_CvssMetrics = &b.CvssMetrics
	x.xxx_hidden_Epss = b.Epss
	return m0
}

type Advisory struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Link        *string                `protobuf:"bytes,2,opt,name=link"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	mi := &file_storage_cve_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Advisory) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Advisory) GetLink() string {
	if x != nil {
		if x.xxx_hidden_Link != nil {
			return *x.xxx_hidden_Link
		}
		return ""
	}
	return ""
}

func (x *Advisory) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Advisory) SetLink(v string) {
	x.xxx_hidden_Link = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Advisory) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Advisory) HasLink() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Advisory) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *Advisory) ClearLink() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Link = nil
}

type Advisory_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
	Link *string
}

func (b0 Advisory_builder) Build() *Advisory {
	m0 := &Advisory{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	if b.Link != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Link = b.Link
	}
	return m0
}

// This proto is deprecated and replaced by ImageCVEV2.
//
// Deprecated: Marked as deprecated in storage/cve.proto.
type ImageCVE struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id              *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_CveBaseInfo     *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo"`
	xxx_hidden_OperatingSystem *string                `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem"`
	xxx_hidden_Cvss            float32                `protobuf:"fixed32,4,opt,name=cvss"`
	xxx_hidden_Severity        VulnerabilitySeverity  `protobuf:"varint,5,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	xxx_hidden_ImpactScore     float32                `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Snoozed         bool                   `protobuf:"varint,7,opt,name=snoozed"`
	xxx_hidden_SnoozeStart     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_start,json=snoozeStart"`
	xxx_hidden_SnoozeExpiry    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=snooze_expiry,json=snoozeExpiry"`
	xxx_hidden_Nvdcvss         float32                `protobuf:"fixed32,10,opt,name=nvdcvss"`
	xxx_hidden_CvssMetrics     *[]*CVSSScore          `protobuf:"bytes,11,rep,name=cvss_metrics,json=cvssMetrics"`
	xxx_hidden_NvdScoreVersion CvssScoreVersion       `protobuf:"varint,12,opt,name=nvd_score_version,json=nvdScoreVersion,enum=storage.CvssScoreVersion"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ImageCVE) Reset() {
	*x = ImageCVE{}
	mi := &file_storage_cve_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCVE) ProtoMessage() {}

func (x *ImageCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageCVE) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ImageCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.xxx_hidden_CveBaseInfo
	}
	return nil
}

func (x *ImageCVE) GetOperatingSystem() string {
	if x != nil {
		if x.xxx_hidden_OperatingSystem != nil {
			return *x.xxx_hidden_OperatingSystem
		}
		return ""
	}
	return ""
}

func (x *ImageCVE) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *ImageCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVE) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozed() bool {
	if x != nil {
		return x.xxx_hidden_Snoozed
	}
	return false
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeStart
	}
	return nil
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeExpiry
	}
	return nil
}

func (x *ImageCVE) GetNvdcvss() float32 {
	if x != nil {
		return x.xxx_hidden_Nvdcvss
	}
	return 0
}

func (x *ImageCVE) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		if x.xxx_hidden_CvssMetrics != nil {
			return *x.xxx_hidden_CvssMetrics
		}
	}
	return nil
}

func (x *ImageCVE) GetNvdScoreVersion() CvssScoreVersion {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 11) {
			return x.xxx_hidden_NvdScoreVersion
		}
	}
	return CvssScoreVersion_UNKNOWN_VERSION
}

func (x *ImageCVE) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *ImageCVE) SetCveBaseInfo(v *CVEInfo) {
	x.xxx_hidden_CveBaseInfo = v
}

func (x *ImageCVE) SetOperatingSystem(v string) {
	x.xxx_hidden_OperatingSystem = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
}

func (x *ImageCVE) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 12)
}

func (x *ImageCVE) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 12)
}

func (x *ImageCVE) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 12)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) SetSnoozed(v bool) {
	x.xxx_hidden_Snoozed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) SetSnoozeStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeStart = v
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) SetSnoozeExpiry(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeExpiry = v
}

func (x *ImageCVE) SetNvdcvss(v float32) {
	x.xxx_hidden_Nvdcvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 12)
}

func (x *ImageCVE) SetCvssMetrics(v []*CVSSScore) {
	x.xxx_hidden_CvssMetrics = &v
}

func (x *ImageCVE) SetNvdScoreVersion(v CvssScoreVersion) {
	x.xxx_hidden_NvdScoreVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 12)
}

func (x *ImageCVE) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ImageCVE) HasCveBaseInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CveBaseInfo != nil
}

func (x *ImageCVE) HasOperatingSystem() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ImageCVE) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ImageCVE) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ImageCVE) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) HasSnoozed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) HasSnoozeStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeStart != nil
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) HasSnoozeExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeExpiry != nil
}

func (x *ImageCVE) HasNvdcvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *ImageCVE) HasNvdScoreVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *ImageCVE) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ImageCVE) ClearCveBaseInfo() {
	x.xxx_hidden_CveBaseInfo = nil
}

func (x *ImageCVE) ClearOperatingSystem() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_OperatingSystem = nil
}

func (x *ImageCVE) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Cvss = 0
}

func (x *ImageCVE) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVE) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ImpactScore = 0
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) ClearSnoozed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Snoozed = false
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) ClearSnoozeStart() {
	x.xxx_hidden_SnoozeStart = nil
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVE) ClearSnoozeExpiry() {
	x.xxx_hidden_SnoozeExpiry = nil
}

func (x *ImageCVE) ClearNvdcvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Nvdcvss = 0
}

func (x *ImageCVE) ClearNvdScoreVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_NvdScoreVersion = CvssScoreVersion_UNKNOWN_VERSION
}

// Deprecated: Marked as deprecated in storage/cve.proto.
type ImageCVE_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id              *string
	CveBaseInfo     *CVEInfo
	OperatingSystem *string
	// cvss stores ACS preferred cvss score
	Cvss        *float32
	Severity    *VulnerabilitySeverity
	ImpactScore *float32
	// Deprecated: Marked as deprecated in storage/cve.proto.
	Snoozed *bool
	// Deprecated: Marked as deprecated in storage/cve.proto.
	SnoozeStart *timestamppb.Timestamp
	// Deprecated: Marked as deprecated in storage/cve.proto.
	SnoozeExpiry *timestamppb.Timestamp
	// nvdcvss stores cvss score for a cve from NVD
	Nvdcvss *float32
	// cvss_metrics stores list of cvss metrics from different sources like Redhat, NVD etc
	CvssMetrics     []*CVSSScore
	NvdScoreVersion *CvssScoreVersion
}

func (b0 ImageCVE_builder) Build() *ImageCVE {
	m0 := &ImageCVE{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Id = b.Id
	}
	x.xxx_hidden_CveBaseInfo = b.CveBaseInfo
	if b.OperatingSystem != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_OperatingSystem = b.OperatingSystem
	}
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 12)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 12)
		x.xxx_hidden_Severity = *b.Severity
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 12)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Snoozed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_Snoozed = *b.Snoozed
	}
	x.xxx_hidden_SnoozeStart = b.SnoozeStart
	x.xxx_hidden_SnoozeExpiry = b.SnoozeExpiry
	if b.Nvdcvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 12)
		x.xxx_hidden_Nvdcvss = *b.Nvdcvss
	}
	x.xxx_hidden_CvssMetrics = &b.CvssMetrics
	if b.NvdScoreVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 12)
		x.xxx_hidden_NvdScoreVersion = *b.NvdScoreVersion
	}
	return m0
}

type ImageCVEV2 struct {
	state                           protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id                   *string                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ImageId              *string                 `protobuf:"bytes,2,opt,name=image_id,json=imageId"`
	xxx_hidden_CveBaseInfo          *CVEInfo                `protobuf:"bytes,3,opt,name=cve_base_info,json=cveBaseInfo"`
	xxx_hidden_Cvss                 float32                 `protobuf:"fixed32,4,opt,name=cvss"`
	xxx_hidden_Severity             VulnerabilitySeverity   `protobuf:"varint,5,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	xxx_hidden_ImpactScore          float32                 `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Nvdcvss              float32                 `protobuf:"fixed32,7,opt,name=nvdcvss"`
	xxx_hidden_NvdScoreVersion      CvssScoreVersion        `protobuf:"varint,8,opt,name=nvd_score_version,json=nvdScoreVersion,enum=storage.CvssScoreVersion"`
	xxx_hidden_FirstImageOccurrence *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=first_image_occurrence,json=firstImageOccurrence"`
	xxx_hidden_State                VulnerabilityState      `protobuf:"varint,10,opt,name=state,enum=storage.VulnerabilityState"`
	xxx_hidden_IsFixable            bool                    `protobuf:"varint,11,opt,name=is_fixable,json=isFixable"`
	xxx_hidden_HasFixedBy           isImageCVEV2_HasFixedBy `protobuf_oneof:"has_fixed_by"`
	xxx_hidden_ComponentId          *string                 `protobuf:"bytes,13,opt,name=component_id,json=componentId"`
	xxx_hidden_Advisory             *Advisory               `protobuf:"bytes,14,opt,name=advisory"`
	xxx_hidden_ImageIdV2            *string                 `protobuf:"bytes,15,opt,name=image_id_v2,json=imageIdV2"`
	XXX_raceDetectHookData          protoimpl.RaceDetectHookData
	XXX_presence                    [1]uint32
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ImageCVEV2) Reset() {
	*x = ImageCVEV2{}
	mi := &file_storage_cve_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageCVEV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCVEV2) ProtoMessage() {}

func (x *ImageCVEV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageCVEV2) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVEV2) GetImageId() string {
	if x != nil {
		if x.xxx_hidden_ImageId != nil {
			return *x.xxx_hidden_ImageId
		}
		return ""
	}
	return ""
}

func (x *ImageCVEV2) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.xxx_hidden_CveBaseInfo
	}
	return nil
}

func (x *ImageCVEV2) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *ImageCVEV2) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVEV2) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *ImageCVEV2) GetNvdcvss() float32 {
	if x != nil {
		return x.xxx_hidden_Nvdcvss
	}
	return 0
}

func (x *ImageCVEV2) GetNvdScoreVersion() CvssScoreVersion {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 7) {
			return x.xxx_hidden_NvdScoreVersion
		}
	}
	return CvssScoreVersion_UNKNOWN_VERSION
}

func (x *ImageCVEV2) GetFirstImageOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_FirstImageOccurrence
	}
	return nil
}

func (x *ImageCVEV2) GetState() VulnerabilityState {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_State
		}
	}
	return VulnerabilityState_OBSERVED
}

func (x *ImageCVEV2) GetIsFixable() bool {
	if x != nil {
		return x.xxx_hidden_IsFixable
	}
	return false
}

func (x *ImageCVEV2) GetFixedBy() string {
	if x != nil {
		if x, ok := x.xxx_hidden_HasFixedBy.(*imageCVEV2_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

func (x *ImageCVEV2) GetComponentId() string {
	if x != nil {
		if x.xxx_hidden_ComponentId != nil {
			return *x.xxx_hidden_ComponentId
		}
		return ""
	}
	return ""
}

func (x *ImageCVEV2) GetAdvisory() *Advisory {
	if x != nil {
		return x.xxx_hidden_Advisory
	}
	return nil
}

func (x *ImageCVEV2) GetImageIdV2() string {
	if x != nil {
		if x.xxx_hidden_ImageIdV2 != nil {
			return *x.xxx_hidden_ImageIdV2
		}
		return ""
	}
	return ""
}

func (x *ImageCVEV2) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 15)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVEV2) SetImageId(v string) {
	x.xxx_hidden_ImageId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 15)
}

func (x *ImageCVEV2) SetCveBaseInfo(v *CVEInfo) {
	x.xxx_hidden_CveBaseInfo = v
}

func (x *ImageCVEV2) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 15)
}

func (x *ImageCVEV2) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 15)
}

func (x *ImageCVEV2) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 15)
}

func (x *ImageCVEV2) SetNvdcvss(v float32) {
	x.xxx_hidden_Nvdcvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 15)
}

func (x *ImageCVEV2) SetNvdScoreVersion(v CvssScoreVersion) {
	x.xxx_hidden_NvdScoreVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 15)
}

func (x *ImageCVEV2) SetFirstImageOccurrence(v *timestamppb.Timestamp) {
	x.xxx_hidden_FirstImageOccurrence = v
}

func (x *ImageCVEV2) SetState(v VulnerabilityState) {
	x.xxx_hidden_State = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 15)
}

func (x *ImageCVEV2) SetIsFixable(v bool) {
	x.xxx_hidden_IsFixable = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 15)
}

func (x *ImageCVEV2) SetFixedBy(v string) {
	x.xxx_hidden_HasFixedBy = &imageCVEV2_FixedBy{v}
}

func (x *ImageCVEV2) SetComponentId(v string) {
	x.xxx_hidden_ComponentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 15)
}

func (x *ImageCVEV2) SetAdvisory(v *Advisory) {
	x.xxx_hidden_Advisory = v
}

func (x *ImageCVEV2) SetImageIdV2(v string) {
	x.xxx_hidden_ImageIdV2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 15)
}

func (x *ImageCVEV2) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVEV2) HasImageId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ImageCVEV2) HasCveBaseInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CveBaseInfo != nil
}

func (x *ImageCVEV2) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ImageCVEV2) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ImageCVEV2) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ImageCVEV2) HasNvdcvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ImageCVEV2) HasNvdScoreVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *ImageCVEV2) HasFirstImageOccurrence() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FirstImageOccurrence != nil
}

func (x *ImageCVEV2) HasState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *ImageCVEV2) HasIsFixable() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *ImageCVEV2) HasHasFixedBy() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HasFixedBy != nil
}

func (x *ImageCVEV2) HasFixedBy() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_HasFixedBy.(*imageCVEV2_FixedBy)
	return ok
}

func (x *ImageCVEV2) HasComponentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *ImageCVEV2) HasAdvisory() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Advisory != nil
}

func (x *ImageCVEV2) HasImageIdV2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *ImageCVEV2) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

// Deprecated: Marked as deprecated in storage/cve.proto.
func (x *ImageCVEV2) ClearImageId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ImageId = nil
}

func (x *ImageCVEV2) ClearCveBaseInfo() {
	x.xxx_hidden_CveBaseInfo = nil
}

func (x *ImageCVEV2) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Cvss = 0
}

func (x *ImageCVEV2) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVEV2) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ImpactScore = 0
}

func (x *ImageCVEV2) ClearNvdcvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Nvdcvss = 0
}

func (x *ImageCVEV2) ClearNvdScoreVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_NvdScoreVersion = CvssScoreVersion_UNKNOWN_VERSION
}

func (x *ImageCVEV2) ClearFirstImageOccurrence() {
	x.xxx_hidden_FirstImageOccurrence = nil
}

func (x *ImageCVEV2) ClearState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_State = VulnerabilityState_OBSERVED
}

func (x *ImageCVEV2) ClearIsFixable() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_IsFixable = false
}

func (x *ImageCVEV2) ClearHasFixedBy() {
	x.xxx_hidden_HasFixedBy = nil
}

func (x *ImageCVEV2) ClearFixedBy() {
	if _, ok := x.xxx_hidden_HasFixedBy.(*imageCVEV2_FixedBy); ok {
		x.xxx_hidden_HasFixedBy = nil
	}
}

func (x *ImageCVEV2) ClearComponentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_ComponentId = nil
}

func (x *ImageCVEV2) ClearAdvisory() {
	x.xxx_hidden_Advisory = nil
}

func (x *ImageCVEV2) ClearImageIdV2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_ImageIdV2 = nil
}

const ImageCVEV2_HasFixedBy_not_set_case case_ImageCVEV2_HasFixedBy = 0
const ImageCVEV2_FixedBy_case case_ImageCVEV2_HasFixedBy = 12

func (x *ImageCVEV2) WhichHasFixedBy() case_ImageCVEV2_HasFixedBy {
	if x == nil {
		return ImageCVEV2_HasFixedBy_not_set_case
	}
	switch x.xxx_hidden_HasFixedBy.(type) {
	case *imageCVEV2_FixedBy:
		return ImageCVEV2_FixedBy_case
	default:
		return ImageCVEV2_HasFixedBy_not_set_case
	}
}

type ImageCVEV2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// keeping id similar construction for now during investigation.  It will include component and index
	// within the component
	Id *string
	// was hash index, making it btree
	//
	// Deprecated: Marked as deprecated in storage/cve.proto.
	ImageId     *string
	CveBaseInfo *CVEInfo
	// cvss stores ACS preferred cvss score
	Cvss        *float32
	Severity    *VulnerabilitySeverity
	ImpactScore *float32
	// nvdcvss stores cvss score for a cve from NVD
	Nvdcvss              *float32
	NvdScoreVersion      *CvssScoreVersion
	FirstImageOccurrence *timestamppb.Timestamp
	State                *VulnerabilityState
	IsFixable            *bool
	// Whether there is a version the CVE is fixed in the component.

	// Fields of oneof xxx_hidden_HasFixedBy:
	FixedBy *string
	// -- end of xxx_hidden_HasFixedBy
	ComponentId *string
	Advisory    *Advisory
	ImageIdV2   *string
}

func (b0 ImageCVEV2_builder) Build() *ImageCVEV2 {
	m0 := &ImageCVEV2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 15)
		x.xxx_hidden_Id = b.Id
	}
	if b.ImageId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 15)
		x.xxx_hidden_ImageId = b.ImageId
	}
	x.xxx_hidden_CveBaseInfo = b.CveBaseInfo
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 15)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 15)
		x.xxx_hidden_Severity = *b.Severity
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 15)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Nvdcvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 15)
		x.xxx_hidden_Nvdcvss = *b.Nvdcvss
	}
	if b.NvdScoreVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 15)
		x.xxx_hidden_NvdScoreVersion = *b.NvdScoreVersion
	}
	x.xxx_hidden_FirstImageOccurrence = b.FirstImageOccurrence
	if b.State != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 15)
		x.xxx_hidden_State = *b.State
	}
	if b.IsFixable != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 15)
		x.xxx_hidden_IsFixable = *b.IsFixable
	}
	if b.FixedBy != nil {
		x.xxx_hidden_HasFixedBy = &imageCVEV2_FixedBy{*b.FixedBy}
	}
	if b.ComponentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 15)
		x.xxx_hidden_ComponentId = b.ComponentId
	}
	x.xxx_hidden_Advisory = b.Advisory
	if b.ImageIdV2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 15)
		x.xxx_hidden_ImageIdV2 = b.ImageIdV2
	}
	return m0
}

type case_ImageCVEV2_HasFixedBy protoreflect.FieldNumber

func (x case_ImageCVEV2_HasFixedBy) String() string {
	md := file_storage_cve_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isImageCVEV2_HasFixedBy interface {
	isImageCVEV2_HasFixedBy()
}

type imageCVEV2_FixedBy struct {
	FixedBy string `protobuf:"bytes,12,opt,name=fixed_by,json=fixedBy,oneof" search:"Fixed By,store,hidden"` // @gotags: search:"Fixed By,store,hidden"
}

func (*imageCVEV2_FixedBy) isImageCVEV2_HasFixedBy() {}

type NodeCVE struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id              *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_CveBaseInfo     *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo"`
	xxx_hidden_OperatingSystem *string                `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem"`
	xxx_hidden_Cvss            float32                `protobuf:"fixed32,4,opt,name=cvss"`
	xxx_hidden_Severity        VulnerabilitySeverity  `protobuf:"varint,5,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	xxx_hidden_ImpactScore     float32                `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Snoozed         bool                   `protobuf:"varint,7,opt,name=snoozed"`
	xxx_hidden_SnoozeStart     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_start,json=snoozeStart"`
	xxx_hidden_SnoozeExpiry    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=snooze_expiry,json=snoozeExpiry"`
	xxx_hidden_Orphaned        bool                   `protobuf:"varint,10,opt,name=orphaned"`
	xxx_hidden_OrphanedTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=orphaned_time,json=orphanedTime"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *NodeCVE) Reset() {
	*x = NodeCVE{}
	mi := &file_storage_cve_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCVE) ProtoMessage() {}

func (x *NodeCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NodeCVE) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *NodeCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.xxx_hidden_CveBaseInfo
	}
	return nil
}

func (x *NodeCVE) GetOperatingSystem() string {
	if x != nil {
		if x.xxx_hidden_OperatingSystem != nil {
			return *x.xxx_hidden_OperatingSystem
		}
		return ""
	}
	return ""
}

func (x *NodeCVE) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *NodeCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeCVE) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *NodeCVE) GetSnoozed() bool {
	if x != nil {
		return x.xxx_hidden_Snoozed
	}
	return false
}

func (x *NodeCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeStart
	}
	return nil
}

func (x *NodeCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeExpiry
	}
	return nil
}

func (x *NodeCVE) GetOrphaned() bool {
	if x != nil {
		return x.xxx_hidden_Orphaned
	}
	return false
}

func (x *NodeCVE) GetOrphanedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_OrphanedTime
	}
	return nil
}

func (x *NodeCVE) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *NodeCVE) SetCveBaseInfo(v *CVEInfo) {
	x.xxx_hidden_CveBaseInfo = v
}

func (x *NodeCVE) SetOperatingSystem(v string) {
	x.xxx_hidden_OperatingSystem = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *NodeCVE) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *NodeCVE) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *NodeCVE) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 11)
}

func (x *NodeCVE) SetSnoozed(v bool) {
	x.xxx_hidden_Snoozed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *NodeCVE) SetSnoozeStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeStart = v
}

func (x *NodeCVE) SetSnoozeExpiry(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeExpiry = v
}

func (x *NodeCVE) SetOrphaned(v bool) {
	x.xxx_hidden_Orphaned = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *NodeCVE) SetOrphanedTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_OrphanedTime = v
}

func (x *NodeCVE) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *NodeCVE) HasCveBaseInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CveBaseInfo != nil
}

func (x *NodeCVE) HasOperatingSystem() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *NodeCVE) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *NodeCVE) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *NodeCVE) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *NodeCVE) HasSnoozed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *NodeCVE) HasSnoozeStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeStart != nil
}

func (x *NodeCVE) HasSnoozeExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeExpiry != nil
}

func (x *NodeCVE) HasOrphaned() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *NodeCVE) HasOrphanedTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OrphanedTime != nil
}

func (x *NodeCVE) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *NodeCVE) ClearCveBaseInfo() {
	x.xxx_hidden_CveBaseInfo = nil
}

func (x *NodeCVE) ClearOperatingSystem() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_OperatingSystem = nil
}

func (x *NodeCVE) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Cvss = 0
}

func (x *NodeCVE) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeCVE) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ImpactScore = 0
}

func (x *NodeCVE) ClearSnoozed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Snoozed = false
}

func (x *NodeCVE) ClearSnoozeStart() {
	x.xxx_hidden_SnoozeStart = nil
}

func (x *NodeCVE) ClearSnoozeExpiry() {
	x.xxx_hidden_SnoozeExpiry = nil
}

func (x *NodeCVE) ClearOrphaned() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Orphaned = false
}

func (x *NodeCVE) ClearOrphanedTime() {
	x.xxx_hidden_OrphanedTime = nil
}

type NodeCVE_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id              *string
	CveBaseInfo     *CVEInfo
	OperatingSystem *string
	Cvss            *float32
	Severity        *VulnerabilitySeverity
	ImpactScore     *float32
	Snoozed         *bool
	SnoozeStart     *timestamppb.Timestamp
	SnoozeExpiry    *timestamppb.Timestamp
	Orphaned        *bool
	OrphanedTime    *timestamppb.Timestamp
}

func (b0 NodeCVE_builder) Build() *NodeCVE {
	m0 := &NodeCVE{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Id = b.Id
	}
	x.xxx_hidden_CveBaseInfo = b.CveBaseInfo
	if b.OperatingSystem != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_OperatingSystem = b.OperatingSystem
	}
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_Severity = *b.Severity
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 11)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Snoozed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_Snoozed = *b.Snoozed
	}
	x.xxx_hidden_SnoozeStart = b.SnoozeStart
	x.xxx_hidden_SnoozeExpiry = b.SnoozeExpiry
	if b.Orphaned != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_Orphaned = *b.Orphaned
	}
	x.xxx_hidden_OrphanedTime = b.OrphanedTime
	return m0
}

type ClusterCVE struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id           *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_CveBaseInfo  *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo"`
	xxx_hidden_Cvss         float32                `protobuf:"fixed32,3,opt,name=cvss"`
	xxx_hidden_Severity     VulnerabilitySeverity  `protobuf:"varint,4,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	xxx_hidden_ImpactScore  float32                `protobuf:"fixed32,5,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Snoozed      bool                   `protobuf:"varint,6,opt,name=snoozed"`
	xxx_hidden_SnoozeStart  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=snooze_start,json=snoozeStart"`
	xxx_hidden_SnoozeExpiry *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_expiry,json=snoozeExpiry"`
	xxx_hidden_Type         CVE_CVEType            `protobuf:"varint,9,opt,name=type,enum=storage.CVE_CVEType"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ClusterCVE) Reset() {
	*x = ClusterCVE{}
	mi := &file_storage_cve_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCVE) ProtoMessage() {}

func (x *ClusterCVE) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterCVE) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ClusterCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.xxx_hidden_CveBaseInfo
	}
	return nil
}

func (x *ClusterCVE) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *ClusterCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ClusterCVE) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *ClusterCVE) GetSnoozed() bool {
	if x != nil {
		return x.xxx_hidden_Snoozed
	}
	return false
}

func (x *ClusterCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeStart
	}
	return nil
}

func (x *ClusterCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SnoozeExpiry
	}
	return nil
}

func (x *ClusterCVE) GetType() CVE_CVEType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			return x.xxx_hidden_Type
		}
	}
	return CVE_UNKNOWN_CVE
}

func (x *ClusterCVE) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *ClusterCVE) SetCveBaseInfo(v *CVEInfo) {
	x.xxx_hidden_CveBaseInfo = v
}

func (x *ClusterCVE) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *ClusterCVE) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *ClusterCVE) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *ClusterCVE) SetSnoozed(v bool) {
	x.xxx_hidden_Snoozed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *ClusterCVE) SetSnoozeStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeStart = v
}

func (x *ClusterCVE) SetSnoozeExpiry(v *timestamppb.Timestamp) {
	x.xxx_hidden_SnoozeExpiry = v
}

func (x *ClusterCVE) SetType(v CVE_CVEType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *ClusterCVE) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ClusterCVE) HasCveBaseInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CveBaseInfo != nil
}

func (x *ClusterCVE) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ClusterCVE) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ClusterCVE) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ClusterCVE) HasSnoozed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ClusterCVE) HasSnoozeStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeStart != nil
}

func (x *ClusterCVE) HasSnoozeExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SnoozeExpiry != nil
}

func (x *ClusterCVE) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *ClusterCVE) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ClusterCVE) ClearCveBaseInfo() {
	x.xxx_hidden_CveBaseInfo = nil
}

func (x *ClusterCVE) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Cvss = 0
}

func (x *ClusterCVE) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ClusterCVE) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ImpactScore = 0
}

func (x *ClusterCVE) ClearSnoozed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Snoozed = false
}

func (x *ClusterCVE) ClearSnoozeStart() {
	x.xxx_hidden_SnoozeStart = nil
}

func (x *ClusterCVE) ClearSnoozeExpiry() {
	x.xxx_hidden_SnoozeExpiry = nil
}

func (x *ClusterCVE) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Type = CVE_UNKNOWN_CVE
}

type ClusterCVE_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id           *string
	CveBaseInfo  *CVEInfo
	Cvss         *float32
	Severity     *VulnerabilitySeverity
	ImpactScore  *float32
	Snoozed      *bool
	SnoozeStart  *timestamppb.Timestamp
	SnoozeExpiry *timestamppb.Timestamp
	Type         *CVE_CVEType
}

func (b0 ClusterCVE_builder) Build() *ClusterCVE {
	m0 := &ClusterCVE{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_Id = b.Id
	}
	x.xxx_hidden_CveBaseInfo = b.CveBaseInfo
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_Severity = *b.Severity
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Snoozed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_Snoozed = *b.Snoozed
	}
	x.xxx_hidden_SnoozeStart = b.SnoozeStart
	x.xxx_hidden_SnoozeExpiry = b.SnoozeExpiry
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_Type = *b.Type
	}
	return m0
}

type CVSSScore struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Source      Source                 `protobuf:"varint,1,opt,name=source,enum=storage.Source"`
	xxx_hidden_Url         *string                `protobuf:"bytes,2,opt,name=url"`
	xxx_hidden_CvssScore   isCVSSScore_CvssScore  `protobuf_oneof:"cvss_score"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVSSScore) Reset() {
	*x = CVSSScore{}
	mi := &file_storage_cve_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSScore) ProtoMessage() {}

func (x *CVSSScore) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVSSScore) GetSource() Source {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Source
		}
	}
	return Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *CVSSScore) GetCvssv2() *CVSSV2 {
	if x != nil {
		if x, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv2); ok {
			return x.Cvssv2
		}
	}
	return nil
}

func (x *CVSSScore) GetCvssv3() *CVSSV3 {
	if x != nil {
		if x, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv3); ok {
			return x.Cvssv3
		}
	}
	return nil
}

func (x *CVSSScore) SetSource(v Source) {
	x.xxx_hidden_Source = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *CVSSScore) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *CVSSScore) SetCvssv2(v *CVSSV2) {
	if v == nil {
		x.xxx_hidden_CvssScore = nil
		return
	}
	x.xxx_hidden_CvssScore = &cVSSScore_Cvssv2{v}
}

func (x *CVSSScore) SetCvssv3(v *CVSSV3) {
	if v == nil {
		x.xxx_hidden_CvssScore = nil
		return
	}
	x.xxx_hidden_CvssScore = &cVSSScore_Cvssv3{v}
}

func (x *CVSSScore) HasSource() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVSSScore) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVSSScore) HasCvssScore() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssScore != nil
}

func (x *CVSSScore) HasCvssv2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv2)
	return ok
}

func (x *CVSSScore) HasCvssv3() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv3)
	return ok
}

func (x *CVSSScore) ClearSource() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Source = Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Url = nil
}

func (x *CVSSScore) ClearCvssScore() {
	x.xxx_hidden_CvssScore = nil
}

func (x *CVSSScore) ClearCvssv2() {
	if _, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv2); ok {
		x.xxx_hidden_CvssScore = nil
	}
}

func (x *CVSSScore) ClearCvssv3() {
	if _, ok := x.xxx_hidden_CvssScore.(*cVSSScore_Cvssv3); ok {
		x.xxx_hidden_CvssScore = nil
	}
}

const CVSSScore_CvssScore_not_set_case case_CVSSScore_CvssScore = 0
const CVSSScore_Cvssv2_case case_CVSSScore_CvssScore = 3
const CVSSScore_Cvssv3_case case_CVSSScore_CvssScore = 4

func (x *CVSSScore) WhichCvssScore() case_CVSSScore_CvssScore {
	if x == nil {
		return CVSSScore_CvssScore_not_set_case
	}
	switch x.xxx_hidden_CvssScore.(type) {
	case *cVSSScore_Cvssv2:
		return CVSSScore_Cvssv2_case
	case *cVSSScore_Cvssv3:
		return CVSSScore_Cvssv3_case
	default:
		return CVSSScore_CvssScore_not_set_case
	}
}

type CVSSScore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Source *Source
	Url    *string
	// Fields of oneof xxx_hidden_CvssScore:
	Cvssv2 *CVSSV2
	Cvssv3 *CVSSV3
	// -- end of xxx_hidden_CvssScore
}

func (b0 CVSSScore_builder) Build() *CVSSScore {
	m0 := &CVSSScore{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Source != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Source = *b.Source
	}
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Url = b.Url
	}
	if b.Cvssv2 != nil {
		x.xxx_hidden_CvssScore = &cVSSScore_Cvssv2{b.Cvssv2}
	}
	if b.Cvssv3 != nil {
		x.xxx_hidden_CvssScore = &cVSSScore_Cvssv3{b.Cvssv3}
	}
	return m0
}

type case_CVSSScore_CvssScore protoreflect.FieldNumber

func (x case_CVSSScore_CvssScore) String() string {
	md := file_storage_cve_proto_msgTypes[8].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCVSSScore_CvssScore interface {
	isCVSSScore_CvssScore()
}

type cVSSScore_Cvssv2 struct {
	Cvssv2 *CVSSV2 `protobuf:"bytes,3,opt,name=cvssv2,oneof"`
}

type cVSSScore_Cvssv3 struct {
	Cvssv3 *CVSSV3 `protobuf:"bytes,4,opt,name=cvssv3,oneof"`
}

func (*cVSSScore_Cvssv2) isCVSSScore_CvssScore() {}

func (*cVSSScore_Cvssv3) isCVSSScore_CvssScore() {}

type CVSSV2 struct {
	state                          protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Vector              *string                 `protobuf:"bytes,1,opt,name=vector"`
	xxx_hidden_AttackVector        CVSSV2_AttackVector     `protobuf:"varint,2,opt,name=attack_vector,json=attackVector,enum=storage.CVSSV2_AttackVector"`
	xxx_hidden_AccessComplexity    CVSSV2_AccessComplexity `protobuf:"varint,3,opt,name=access_complexity,json=accessComplexity,enum=storage.CVSSV2_AccessComplexity"`
	xxx_hidden_Authentication      CVSSV2_Authentication   `protobuf:"varint,4,opt,name=authentication,enum=storage.CVSSV2_Authentication"`
	xxx_hidden_Confidentiality     CVSSV2_Impact           `protobuf:"varint,5,opt,name=confidentiality,enum=storage.CVSSV2_Impact"`
	xxx_hidden_Integrity           CVSSV2_Impact           `protobuf:"varint,6,opt,name=integrity,enum=storage.CVSSV2_Impact"`
	xxx_hidden_Availability        CVSSV2_Impact           `protobuf:"varint,7,opt,name=availability,enum=storage.CVSSV2_Impact"`
	xxx_hidden_ExploitabilityScore float32                 `protobuf:"fixed32,8,opt,name=exploitability_score,json=exploitabilityScore"`
	xxx_hidden_ImpactScore         float32                 `protobuf:"fixed32,9,opt,name=impact_score,json=impactScore"`
	xxx_hidden_Score               float32                 `protobuf:"fixed32,10,opt,name=score"`
	xxx_hidden_Severity            CVSSV2_Severity         `protobuf:"varint,11,opt,name=severity,enum=storage.CVSSV2_Severity"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CVSSV2) Reset() {
	*x = CVSSV2{}
	mi := &file_storage_cve_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV2) ProtoMessage() {}

func (x *CVSSV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVSSV2) GetVector() string {
	if x != nil {
		if x.xxx_hidden_Vector != nil {
			return *x.xxx_hidden_Vector
		}
		return ""
	}
	return ""
}

func (x *CVSSV2) GetAttackVector() CVSSV2_AttackVector {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_AttackVector
		}
	}
	return CVSSV2_ATTACK_LOCAL
}

func (x *CVSSV2) GetAccessComplexity() CVSSV2_AccessComplexity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_AccessComplexity
		}
	}
	return CVSSV2_ACCESS_HIGH
}

func (x *CVSSV2) GetAuthentication() CVSSV2_Authentication {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Authentication
		}
	}
	return CVSSV2_AUTH_MULTIPLE
}

func (x *CVSSV2) GetConfidentiality() CVSSV2_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Confidentiality
		}
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetIntegrity() CVSSV2_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 5) {
			return x.xxx_hidden_Integrity
		}
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetAvailability() CVSSV2_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_Availability
		}
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetExploitabilityScore() float32 {
	if x != nil {
		return x.xxx_hidden_ExploitabilityScore
	}
	return 0
}

func (x *CVSSV2) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *CVSSV2) GetScore() float32 {
	if x != nil {
		return x.xxx_hidden_Score
	}
	return 0
}

func (x *CVSSV2) GetSeverity() CVSSV2_Severity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 10) {
			return x.xxx_hidden_Severity
		}
	}
	return CVSSV2_UNKNOWN
}

func (x *CVSSV2) SetVector(v string) {
	x.xxx_hidden_Vector = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *CVSSV2) SetAttackVector(v CVSSV2_AttackVector) {
	x.xxx_hidden_AttackVector = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *CVSSV2) SetAccessComplexity(v CVSSV2_AccessComplexity) {
	x.xxx_hidden_AccessComplexity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *CVSSV2) SetAuthentication(v CVSSV2_Authentication) {
	x.xxx_hidden_Authentication = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *CVSSV2) SetConfidentiality(v CVSSV2_Impact) {
	x.xxx_hidden_Confidentiality = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *CVSSV2) SetIntegrity(v CVSSV2_Impact) {
	x.xxx_hidden_Integrity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 11)
}

func (x *CVSSV2) SetAvailability(v CVSSV2_Impact) {
	x.xxx_hidden_Availability = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *CVSSV2) SetExploitabilityScore(v float32) {
	x.xxx_hidden_ExploitabilityScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 11)
}

func (x *CVSSV2) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 11)
}

func (x *CVSSV2) SetScore(v float32) {
	x.xxx_hidden_Score = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *CVSSV2) SetSeverity(v CVSSV2_Severity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 11)
}

func (x *CVSSV2) HasVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVSSV2) HasAttackVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVSSV2) HasAccessComplexity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVSSV2) HasAuthentication() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CVSSV2) HasConfidentiality() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CVSSV2) HasIntegrity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CVSSV2) HasAvailability() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CVSSV2) HasExploitabilityScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *CVSSV2) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *CVSSV2) HasScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *CVSSV2) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *CVSSV2) ClearVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Vector = nil
}

func (x *CVSSV2) ClearAttackVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AttackVector = CVSSV2_ATTACK_LOCAL
}

func (x *CVSSV2) ClearAccessComplexity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_AccessComplexity = CVSSV2_ACCESS_HIGH
}

func (x *CVSSV2) ClearAuthentication() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Authentication = CVSSV2_AUTH_MULTIPLE
}

func (x *CVSSV2) ClearConfidentiality() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Confidentiality = CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) ClearIntegrity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Integrity = CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) ClearAvailability() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Availability = CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) ClearExploitabilityScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_ExploitabilityScore = 0
}

func (x *CVSSV2) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_ImpactScore = 0
}

func (x *CVSSV2) ClearScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Score = 0
}

func (x *CVSSV2) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Severity = CVSSV2_UNKNOWN
}

type CVSSV2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Vector              *string
	AttackVector        *CVSSV2_AttackVector
	AccessComplexity    *CVSSV2_AccessComplexity
	Authentication      *CVSSV2_Authentication
	Confidentiality     *CVSSV2_Impact
	Integrity           *CVSSV2_Impact
	Availability        *CVSSV2_Impact
	ExploitabilityScore *float32
	ImpactScore         *float32
	Score               *float32
	Severity            *CVSSV2_Severity
}

func (b0 CVSSV2_builder) Build() *CVSSV2 {
	m0 := &CVSSV2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Vector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Vector = b.Vector
	}
	if b.AttackVector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_AttackVector = *b.AttackVector
	}
	if b.AccessComplexity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_AccessComplexity = *b.AccessComplexity
	}
	if b.Authentication != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_Authentication = *b.Authentication
	}
	if b.Confidentiality != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_Confidentiality = *b.Confidentiality
	}
	if b.Integrity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 11)
		x.xxx_hidden_Integrity = *b.Integrity
	}
	if b.Availability != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_Availability = *b.Availability
	}
	if b.ExploitabilityScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 11)
		x.xxx_hidden_ExploitabilityScore = *b.ExploitabilityScore
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 11)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.Score != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_Score = *b.Score
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 11)
		x.xxx_hidden_Severity = *b.Severity
	}
	return m0
}

type CVSSV3 struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Vector              *string                `protobuf:"bytes,1,opt,name=vector"`
	xxx_hidden_ExploitabilityScore float32                `protobuf:"fixed32,2,opt,name=exploitability_score,json=exploitabilityScore"`
	xxx_hidden_ImpactScore         float32                `protobuf:"fixed32,3,opt,name=impact_score,json=impactScore"`
	xxx_hidden_AttackVector        CVSSV3_AttackVector    `protobuf:"varint,4,opt,name=attack_vector,json=attackVector,enum=storage.CVSSV3_AttackVector"`
	xxx_hidden_AttackComplexity    CVSSV3_Complexity      `protobuf:"varint,5,opt,name=attack_complexity,json=attackComplexity,enum=storage.CVSSV3_Complexity"`
	xxx_hidden_PrivilegesRequired  CVSSV3_Privileges      `protobuf:"varint,6,opt,name=privileges_required,json=privilegesRequired,enum=storage.CVSSV3_Privileges"`
	xxx_hidden_UserInteraction     CVSSV3_UserInteraction `protobuf:"varint,7,opt,name=user_interaction,json=userInteraction,enum=storage.CVSSV3_UserInteraction"`
	xxx_hidden_Scope               CVSSV3_Scope           `protobuf:"varint,8,opt,name=scope,enum=storage.CVSSV3_Scope"`
	xxx_hidden_Confidentiality     CVSSV3_Impact          `protobuf:"varint,9,opt,name=confidentiality,enum=storage.CVSSV3_Impact"`
	xxx_hidden_Integrity           CVSSV3_Impact          `protobuf:"varint,10,opt,name=integrity,enum=storage.CVSSV3_Impact"`
	xxx_hidden_Availability        CVSSV3_Impact          `protobuf:"varint,11,opt,name=availability,enum=storage.CVSSV3_Impact"`
	xxx_hidden_Score               float32                `protobuf:"fixed32,12,opt,name=score"`
	xxx_hidden_Severity            CVSSV3_Severity        `protobuf:"varint,13,opt,name=severity,enum=storage.CVSSV3_Severity"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CVSSV3) Reset() {
	*x = CVSSV3{}
	mi := &file_storage_cve_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV3) ProtoMessage() {}

func (x *CVSSV3) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVSSV3) GetVector() string {
	if x != nil {
		if x.xxx_hidden_Vector != nil {
			return *x.xxx_hidden_Vector
		}
		return ""
	}
	return ""
}

func (x *CVSSV3) GetExploitabilityScore() float32 {
	if x != nil {
		return x.xxx_hidden_ExploitabilityScore
	}
	return 0
}

func (x *CVSSV3) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *CVSSV3) GetAttackVector() CVSSV3_AttackVector {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_AttackVector
		}
	}
	return CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) GetAttackComplexity() CVSSV3_Complexity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_AttackComplexity
		}
	}
	return CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) GetPrivilegesRequired() CVSSV3_Privileges {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 5) {
			return x.xxx_hidden_PrivilegesRequired
		}
	}
	return CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) GetUserInteraction() CVSSV3_UserInteraction {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_UserInteraction
		}
	}
	return CVSSV3_UI_NONE
}

func (x *CVSSV3) GetScope() CVSSV3_Scope {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 7) {
			return x.xxx_hidden_Scope
		}
	}
	return CVSSV3_UNCHANGED
}

func (x *CVSSV3) GetConfidentiality() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			return x.xxx_hidden_Confidentiality
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetIntegrity() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_Integrity
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetAvailability() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 10) {
			return x.xxx_hidden_Availability
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetScore() float32 {
	if x != nil {
		return x.xxx_hidden_Score
	}
	return 0
}

func (x *CVSSV3) GetSeverity() CVSSV3_Severity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 12) {
			return x.xxx_hidden_Severity
		}
	}
	return CVSSV3_UNKNOWN
}

func (x *CVSSV3) SetVector(v string) {
	x.xxx_hidden_Vector = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 13)
}

func (x *CVSSV3) SetExploitabilityScore(v float32) {
	x.xxx_hidden_ExploitabilityScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 13)
}

func (x *CVSSV3) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 13)
}

func (x *CVSSV3) SetAttackVector(v CVSSV3_AttackVector) {
	x.xxx_hidden_AttackVector = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 13)
}

func (x *CVSSV3) SetAttackComplexity(v CVSSV3_Complexity) {
	x.xxx_hidden_AttackComplexity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 13)
}

func (x *CVSSV3) SetPrivilegesRequired(v CVSSV3_Privileges) {
	x.xxx_hidden_PrivilegesRequired = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 13)
}

func (x *CVSSV3) SetUserInteraction(v CVSSV3_UserInteraction) {
	x.xxx_hidden_UserInteraction = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 13)
}

func (x *CVSSV3) SetScope(v CVSSV3_Scope) {
	x.xxx_hidden_Scope = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 13)
}

func (x *CVSSV3) SetConfidentiality(v CVSSV3_Impact) {
	x.xxx_hidden_Confidentiality = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 13)
}

func (x *CVSSV3) SetIntegrity(v CVSSV3_Impact) {
	x.xxx_hidden_Integrity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 13)
}

func (x *CVSSV3) SetAvailability(v CVSSV3_Impact) {
	x.xxx_hidden_Availability = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 13)
}

func (x *CVSSV3) SetScore(v float32) {
	x.xxx_hidden_Score = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 13)
}

func (x *CVSSV3) SetSeverity(v CVSSV3_Severity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 13)
}

func (x *CVSSV3) HasVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVSSV3) HasExploitabilityScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVSSV3) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVSSV3) HasAttackVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CVSSV3) HasAttackComplexity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CVSSV3) HasPrivilegesRequired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CVSSV3) HasUserInteraction() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CVSSV3) HasScope() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *CVSSV3) HasConfidentiality() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *CVSSV3) HasIntegrity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *CVSSV3) HasAvailability() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *CVSSV3) HasScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *CVSSV3) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *CVSSV3) ClearVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Vector = nil
}

func (x *CVSSV3) ClearExploitabilityScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ExploitabilityScore = 0
}

func (x *CVSSV3) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ImpactScore = 0
}

func (x *CVSSV3) ClearAttackVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_AttackVector = CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) ClearAttackComplexity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_AttackComplexity = CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) ClearPrivilegesRequired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_PrivilegesRequired = CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) ClearUserInteraction() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_UserInteraction = CVSSV3_UI_NONE
}

func (x *CVSSV3) ClearScope() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Scope = CVSSV3_UNCHANGED
}

func (x *CVSSV3) ClearConfidentiality() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Confidentiality = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearIntegrity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Integrity = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearAvailability() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Availability = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_Score = 0
}

func (x *CVSSV3) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_Severity = CVSSV3_UNKNOWN
}

type CVSSV3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Vector              *string
	ExploitabilityScore *float32
	ImpactScore         *float32
	AttackVector        *CVSSV3_AttackVector
	AttackComplexity    *CVSSV3_Complexity
	PrivilegesRequired  *CVSSV3_Privileges
	UserInteraction     *CVSSV3_UserInteraction
	Scope               *CVSSV3_Scope
	Confidentiality     *CVSSV3_Impact
	Integrity           *CVSSV3_Impact
	Availability        *CVSSV3_Impact
	Score               *float32
	Severity            *CVSSV3_Severity
}

func (b0 CVSSV3_builder) Build() *CVSSV3 {
	m0 := &CVSSV3{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Vector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 13)
		x.xxx_hidden_Vector = b.Vector
	}
	if b.ExploitabilityScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 13)
		x.xxx_hidden_ExploitabilityScore = *b.ExploitabilityScore
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 13)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.AttackVector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 13)
		x.xxx_hidden_AttackVector = *b.AttackVector
	}
	if b.AttackComplexity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 13)
		x.xxx_hidden_AttackComplexity = *b.AttackComplexity
	}
	if b.PrivilegesRequired != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 13)
		x.xxx_hidden_PrivilegesRequired = *b.PrivilegesRequired
	}
	if b.UserInteraction != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 13)
		x.xxx_hidden_UserInteraction = *b.UserInteraction
	}
	if b.Scope != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 13)
		x.xxx_hidden_Scope = *b.Scope
	}
	if b.Confidentiality != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 13)
		x.xxx_hidden_Confidentiality = *b.Confidentiality
	}
	if b.Integrity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 13)
		x.xxx_hidden_Integrity = *b.Integrity
	}
	if b.Availability != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 13)
		x.xxx_hidden_Availability = *b.Availability
	}
	if b.Score != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 13)
		x.xxx_hidden_Score = *b.Score
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 13)
		x.xxx_hidden_Severity = *b.Severity
	}
	return m0
}

type CVE_DistroSpecific struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Severity     VulnerabilitySeverity  `protobuf:"varint,1,opt,name=severity,enum=storage.VulnerabilitySeverity"`
	xxx_hidden_Cvss         float32                `protobuf:"fixed32,2,opt,name=cvss"`
	xxx_hidden_ScoreVersion CVE_ScoreVersion       `protobuf:"varint,3,opt,name=score_version,json=scoreVersion,enum=storage.CVE_ScoreVersion"`
	xxx_hidden_CvssV2       *CVSSV2                `protobuf:"bytes,4,opt,name=cvss_v2,json=cvssV2"`
	xxx_hidden_CvssV3       *CVSSV3                `protobuf:"bytes,5,opt,name=cvss_v3,json=cvssV3"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CVE_DistroSpecific) Reset() {
	*x = CVE_DistroSpecific{}
	mi := &file_storage_cve_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVE_DistroSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE_DistroSpecific) ProtoMessage() {}

func (x *CVE_DistroSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVE_DistroSpecific) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *CVE_DistroSpecific) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *CVE_DistroSpecific) GetScoreVersion() CVE_ScoreVersion {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_ScoreVersion
		}
	}
	return CVE_V2
}

func (x *CVE_DistroSpecific) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.xxx_hidden_CvssV2
	}
	return nil
}

func (x *CVE_DistroSpecific) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.xxx_hidden_CvssV3
	}
	return nil
}

func (x *CVE_DistroSpecific) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CVE_DistroSpecific) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CVE_DistroSpecific) SetScoreVersion(v CVE_ScoreVersion) {
	x.xxx_hidden_ScoreVersion = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CVE_DistroSpecific) SetCvssV2(v *CVSSV2) {
	x.xxx_hidden_CvssV2 = v
}

func (x *CVE_DistroSpecific) SetCvssV3(v *CVSSV3) {
	x.xxx_hidden_CvssV3 = v
}

func (x *CVE_DistroSpecific) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVE_DistroSpecific) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVE_DistroSpecific) HasScoreVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVE_DistroSpecific) HasCvssV2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV2 != nil
}

func (x *CVE_DistroSpecific) HasCvssV3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CvssV3 != nil
}

func (x *CVE_DistroSpecific) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *CVE_DistroSpecific) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Cvss = 0
}

func (x *CVE_DistroSpecific) ClearScoreVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ScoreVersion = CVE_V2
}

func (x *CVE_DistroSpecific) ClearCvssV2() {
	x.xxx_hidden_CvssV2 = nil
}

func (x *CVE_DistroSpecific) ClearCvssV3() {
	x.xxx_hidden_CvssV3 = nil
}

type CVE_DistroSpecific_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Severity     *VulnerabilitySeverity
	Cvss         *float32
	ScoreVersion *CVE_ScoreVersion
	CvssV2       *CVSSV2
	CvssV3       *CVSSV3
}

func (b0 CVE_DistroSpecific_builder) Build() *CVE_DistroSpecific {
	m0 := &CVE_DistroSpecific{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Severity = *b.Severity
	}
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.ScoreVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ScoreVersion = *b.ScoreVersion
	}
	x.xxx_hidden_CvssV2 = b.CvssV2
	x.xxx_hidden_CvssV3 = b.CvssV3
	return m0
}

type CVE_Reference struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_URI         *string                `protobuf:"bytes,1,opt,name=URI"`
	xxx_hidden_Tags        []string               `protobuf:"bytes,2,rep,name=tags"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVE_Reference) Reset() {
	*x = CVE_Reference{}
	mi := &file_storage_cve_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVE_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE_Reference) ProtoMessage() {}

func (x *CVE_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVE_Reference) GetURI() string {
	if x != nil {
		if x.xxx_hidden_URI != nil {
			return *x.xxx_hidden_URI
		}
		return ""
	}
	return ""
}

func (x *CVE_Reference) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *CVE_Reference) SetURI(v string) {
	x.xxx_hidden_URI = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CVE_Reference) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *CVE_Reference) HasURI() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVE_Reference) ClearURI() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_URI = nil
}

type CVE_Reference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	URI  *string
	Tags []string
}

func (b0 CVE_Reference_builder) Build() *CVE_Reference {
	m0 := &CVE_Reference{}
	b, x := &b0, m0
	_, _ = b, x
	if b.URI != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_URI = b.URI
	}
	x.xxx_hidden_Tags = b.Tags
	return m0
}

type CVEInfo_Reference struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_URI         *string                `protobuf:"bytes,1,opt,name=URI"`
	xxx_hidden_Tags        []string               `protobuf:"bytes,2,rep,name=tags"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVEInfo_Reference) Reset() {
	*x = CVEInfo_Reference{}
	mi := &file_storage_cve_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEInfo_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo_Reference) ProtoMessage() {}

func (x *CVEInfo_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cve_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVEInfo_Reference) GetURI() string {
	if x != nil {
		if x.xxx_hidden_URI != nil {
			return *x.xxx_hidden_URI
		}
		return ""
	}
	return ""
}

func (x *CVEInfo_Reference) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *CVEInfo_Reference) SetURI(v string) {
	x.xxx_hidden_URI = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CVEInfo_Reference) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *CVEInfo_Reference) HasURI() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVEInfo_Reference) ClearURI() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_URI = nil
}

type CVEInfo_Reference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	URI  *string
	Tags []string
}

func (b0 CVEInfo_Reference_builder) Build() *CVEInfo_Reference {
	m0 := &CVEInfo_Reference{}
	b, x := &b0, m0
	_, _ = b, x
	if b.URI != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_URI = b.URI
	}
	x.xxx_hidden_Tags = b.Tags
	return m0
}

var File_storage_cve_proto protoreflect.FileDescriptor

const file_storage_cve_proto_rawDesc = "" +
	"\n" +
	"\x11storage/cve.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"Z\n" +
	"\x04EPSS\x12)\n" +
	"\x10epss_probability\x18\x01 \x01(\x02R\x0fepssProbability\x12'\n" +
	"\x0fepss_percentile\x18\x02 \x01(\x02R\x0eepssPercentile\"\xc3\v\n" +
	"\x03CVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04cvss\x18\x02 \x01(\x02R\x04cvss\x12!\n" +
	"\fimpact_score\x18\x0e \x01(\x02R\vimpactScore\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.storage.CVE.CVETypeR\x04type\x12*\n" +
	"\x05types\x18\x12 \x03(\x0e2\x14.storage.CVE.CVETypeR\x05types\x12\x18\n" +
	"\asummary\x18\x04 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x05 \x01(\tR\x04link\x12=\n" +
	"\fpublished_on\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedOn\x129\n" +
	"\n" +
	"created_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12?\n" +
	"\rlast_modified\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x126\n" +
	"\n" +
	"references\x18\b \x03(\v2\x16.storage.CVE.ReferenceR\n" +
	"references\x12>\n" +
	"\rscore_version\x18\t \x01(\x0e2\x19.storage.CVE.ScoreVersionR\fscoreVersion\x12(\n" +
	"\acvss_v2\x18\n" +
	" \x01(\v2\x0f.storage.CVSSV2R\x06cvssV2\x12(\n" +
	"\acvss_v3\x18\v \x01(\v2\x0f.storage.CVSSV3R\x06cvssV3\x12\x1e\n" +
	"\n" +
	"suppressed\x18\f \x01(\bR\n" +
	"suppressed\x12K\n" +
	"\x13suppress_activation\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\x12suppressActivation\x12C\n" +
	"\x0fsuppress_expiry\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\x0esuppressExpiry\x12P\n" +
	"\x10distro_specifics\x18\x13 \x03(\v2!.storage.CVE.DistroSpecificsEntryB\x02(\x01R\x0fdistroSpecifics\x12:\n" +
	"\bseverity\x18\x14 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x1a\xf4\x01\n" +
	"\x0eDistroSpecific\x12:\n" +
	"\bseverity\x18\x01 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12\x12\n" +
	"\x04cvss\x18\x02 \x01(\x02R\x04cvss\x12>\n" +
	"\rscore_version\x18\x03 \x01(\x0e2\x19.storage.CVE.ScoreVersionR\fscoreVersion\x12(\n" +
	"\acvss_v2\x18\x04 \x01(\v2\x0f.storage.CVSSV2R\x06cvssV2\x12(\n" +
	"\acvss_v3\x18\x05 \x01(\v2\x0f.storage.CVSSV3R\x06cvssV3\x1a1\n" +
	"\tReference\x12\x10\n" +
	"\x03URI\x18\x01 \x01(\tR\x03URI\x12\x12\n" +
	"\x04tags\x18\x02 \x03(\tR\x04tags\x1a_\n" +
	"\x14DistroSpecificsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.storage.CVE.DistroSpecificR\x05value:\x028\x01\"f\n" +
	"\aCVEType\x12\x0f\n" +
	"\vUNKNOWN_CVE\x10\x00\x12\r\n" +
	"\tIMAGE_CVE\x10\x01\x12\v\n" +
	"\aK8S_CVE\x10\x02\x12\r\n" +
	"\tISTIO_CVE\x10\x03\x12\f\n" +
	"\bNODE_CVE\x10\x04\x12\x11\n" +
	"\rOPENSHIFT_CVE\x10\x05\"+\n" +
	"\fScoreVersion\x12\x06\n" +
	"\x02V2\x10\x00\x12\x06\n" +
	"\x02V3\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x02J\x04\b\x16\x10\x17J\x04\b\x15\x10\x16\"\x92\x05\n" +
	"\aCVEInfo\x12\x10\n" +
	"\x03cve\x18\x01 \x01(\tR\x03cve\x12\x18\n" +
	"\asummary\x18\x02 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12=\n" +
	"\fpublished_on\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedOn\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12?\n" +
	"\rlast_modified\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12B\n" +
	"\rscore_version\x18\a \x01(\x0e2\x1d.storage.CVEInfo.ScoreVersionR\fscoreVersion\x12(\n" +
	"\acvss_v2\x18\b \x01(\v2\x0f.storage.CVSSV2R\x06cvssV2\x12(\n" +
	"\acvss_v3\x18\t \x01(\v2\x0f.storage.CVSSV3R\x06cvssV3\x12:\n" +
	"\n" +
	"references\x18\n" +
	" \x03(\v2\x1a.storage.CVEInfo.ReferenceR\n" +
	"references\x125\n" +
	"\fcvss_metrics\x18\v \x03(\v2\x12.storage.CVSSScoreR\vcvssMetrics\x12!\n" +
	"\x04epss\x18\f \x01(\v2\r.storage.EPSSR\x04epss\x1a1\n" +
	"\tReference\x12\x10\n" +
	"\x03URI\x18\x01 \x01(\tR\x03URI\x12\x12\n" +
	"\x04tags\x18\x02 \x03(\tR\x04tags\"+\n" +
	"\fScoreVersion\x12\x06\n" +
	"\x02V2\x10\x00\x12\x06\n" +
	"\x02V3\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x02\"2\n" +
	"\bAdvisory\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04link\x18\x02 \x01(\tR\x04link\"\xb0\x04\n" +
	"\bImageCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\rcve_base_info\x18\x02 \x01(\v2\x10.storage.CVEInfoR\vcveBaseInfo\x12)\n" +
	"\x10operating_system\x18\x03 \x01(\tR\x0foperatingSystem\x12\x12\n" +
	"\x04cvss\x18\x04 \x01(\x02R\x04cvss\x12:\n" +
	"\bseverity\x18\x05 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x06 \x01(\x02R\vimpactScore\x12\x1c\n" +
	"\asnoozed\x18\a \x01(\bB\x02\x18\x01R\asnoozed\x12A\n" +
	"\fsnooze_start\x18\b \x01(\v2\x1a.google.protobuf.TimestampB\x02\x18\x01R\vsnoozeStart\x12C\n" +
	"\rsnooze_expiry\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02\x18\x01R\fsnoozeExpiry\x12\x18\n" +
	"\anvdcvss\x18\n" +
	" \x01(\x02R\anvdcvss\x125\n" +
	"\fcvss_metrics\x18\v \x03(\v2\x12.storage.CVSSScoreR\vcvssMetrics\x12E\n" +
	"\x11nvd_score_version\x18\f \x01(\x0e2\x19.storage.CvssScoreVersionR\x0fnvdScoreVersion:\x02\x18\x01\"\x88\x05\n" +
	"\n" +
	"ImageCVEV2\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\bimage_id\x18\x02 \x01(\tB\x02\x18\x01R\aimageId\x124\n" +
	"\rcve_base_info\x18\x03 \x01(\v2\x10.storage.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x04 \x01(\x02R\x04cvss\x12:\n" +
	"\bseverity\x18\x05 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x06 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\anvdcvss\x18\a \x01(\x02R\anvdcvss\x12E\n" +
	"\x11nvd_score_version\x18\b \x01(\x0e2\x19.storage.CvssScoreVersionR\x0fnvdScoreVersion\x12P\n" +
	"\x16first_image_occurrence\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x14firstImageOccurrence\x121\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\x1b.storage.VulnerabilityStateR\x05state\x12\x1d\n" +
	"\n" +
	"is_fixable\x18\v \x01(\bR\tisFixable\x12\x1b\n" +
	"\bfixed_by\x18\f \x01(\tH\x00R\afixedBy\x12!\n" +
	"\fcomponent_id\x18\r \x01(\tR\vcomponentId\x12-\n" +
	"\badvisory\x18\x0e \x01(\v2\x11.storage.AdvisoryR\badvisory\x12\x1e\n" +
	"\vimage_id_v2\x18\x0f \x01(\tR\timageIdV2B\x0e\n" +
	"\fhas_fixed_by\"\xe4\x03\n" +
	"\aNodeCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\rcve_base_info\x18\x02 \x01(\v2\x10.storage.CVEInfoR\vcveBaseInfo\x12)\n" +
	"\x10operating_system\x18\x03 \x01(\tR\x0foperatingSystem\x12\x12\n" +
	"\x04cvss\x18\x04 \x01(\x02R\x04cvss\x12:\n" +
	"\bseverity\x18\x05 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x06 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\asnoozed\x18\a \x01(\bR\asnoozed\x12=\n" +
	"\fsnooze_start\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vsnoozeStart\x12?\n" +
	"\rsnooze_expiry\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fsnoozeExpiry\x12\x1a\n" +
	"\borphaned\x18\n" +
	" \x01(\bR\borphaned\x12?\n" +
	"\rorphaned_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\forphanedTime\"\x89\x03\n" +
	"\n" +
	"ClusterCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\rcve_base_info\x18\x02 \x01(\v2\x10.storage.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x03 \x01(\x02R\x04cvss\x12:\n" +
	"\bseverity\x18\x04 \x01(\x0e2\x1e.storage.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x05 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\asnoozed\x18\x06 \x01(\bR\asnoozed\x12=\n" +
	"\fsnooze_start\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vsnoozeStart\x12?\n" +
	"\rsnooze_expiry\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\fsnoozeExpiry\x12(\n" +
	"\x04type\x18\t \x01(\x0e2\x14.storage.CVE.CVETypeR\x04type\"\xaa\x01\n" +
	"\tCVSSScore\x12'\n" +
	"\x06source\x18\x01 \x01(\x0e2\x0f.storage.SourceR\x06source\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12)\n" +
	"\x06cvssv2\x18\x03 \x01(\v2\x0f.storage.CVSSV2H\x00R\x06cvssv2\x12)\n" +
	"\x06cvssv3\x18\x04 \x01(\v2\x0f.storage.CVSSV3H\x00R\x06cvssv3B\f\n" +
	"\n" +
	"cvss_score\"\xa4\a\n" +
	"\x06CVSSV2\x12\x16\n" +
	"\x06vector\x18\x01 \x01(\tR\x06vector\x12A\n" +
	"\rattack_vector\x18\x02 \x01(\x0e2\x1c.storage.CVSSV2.AttackVectorR\fattackVector\x12M\n" +
	"\x11access_complexity\x18\x03 \x01(\x0e2 .storage.CVSSV2.AccessComplexityR\x10accessComplexity\x12F\n" +
	"\x0eauthentication\x18\x04 \x01(\x0e2\x1e.storage.CVSSV2.AuthenticationR\x0eauthentication\x12@\n" +
	"\x0fconfidentiality\x18\x05 \x01(\x0e2\x16.storage.CVSSV2.ImpactR\x0fconfidentiality\x124\n" +
	"\tintegrity\x18\x06 \x01(\x0e2\x16.storage.CVSSV2.ImpactR\tintegrity\x12:\n" +
	"\favailability\x18\a \x01(\x0e2\x16.storage.CVSSV2.ImpactR\favailability\x121\n" +
	"\x14exploitability_score\x18\b \x01(\x02R\x13exploitabilityScore\x12!\n" +
	"\fimpact_score\x18\t \x01(\x02R\vimpactScore\x12\x14\n" +
	"\x05score\x18\n" +
	" \x01(\x02R\x05score\x124\n" +
	"\bseverity\x18\v \x01(\x0e2\x18.storage.CVSSV2.SeverityR\bseverity\"B\n" +
	"\x06Impact\x12\x0f\n" +
	"\vIMPACT_NONE\x10\x00\x12\x12\n" +
	"\x0eIMPACT_PARTIAL\x10\x01\x12\x13\n" +
	"\x0fIMPACT_COMPLETE\x10\x02\"I\n" +
	"\fAttackVector\x12\x10\n" +
	"\fATTACK_LOCAL\x10\x00\x12\x13\n" +
	"\x0fATTACK_ADJACENT\x10\x01\x12\x12\n" +
	"\x0eATTACK_NETWORK\x10\x02\"F\n" +
	"\x10AccessComplexity\x12\x0f\n" +
	"\vACCESS_HIGH\x10\x00\x12\x11\n" +
	"\rACCESS_MEDIUM\x10\x01\x12\x0e\n" +
	"\n" +
	"ACCESS_LOW\x10\x02\"C\n" +
	"\x0eAuthentication\x12\x11\n" +
	"\rAUTH_MULTIPLE\x10\x00\x12\x0f\n" +
	"\vAUTH_SINGLE\x10\x01\x12\r\n" +
	"\tAUTH_NONE\x10\x02\"6\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03LOW\x10\x01\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03\"\x8a\t\n" +
	"\x06CVSSV3\x12\x16\n" +
	"\x06vector\x18\x01 \x01(\tR\x06vector\x121\n" +
	"\x14exploitability_score\x18\x02 \x01(\x02R\x13exploitabilityScore\x12!\n" +
	"\fimpact_score\x18\x03 \x01(\x02R\vimpactScore\x12A\n" +
	"\rattack_vector\x18\x04 \x01(\x0e2\x1c.storage.CVSSV3.AttackVectorR\fattackVector\x12G\n" +
	"\x11attack_complexity\x18\x05 \x01(\x0e2\x1a.storage.CVSSV3.ComplexityR\x10attackComplexity\x12K\n" +
	"\x13privileges_required\x18\x06 \x01(\x0e2\x1a.storage.CVSSV3.PrivilegesR\x12privilegesRequired\x12J\n" +
	"\x10user_interaction\x18\a \x01(\x0e2\x1f.storage.CVSSV3.UserInteractionR\x0fuserInteraction\x12+\n" +
	"\x05scope\x18\b \x01(\x0e2\x15.storage.CVSSV3.ScopeR\x05scope\x12@\n" +
	"\x0fconfidentiality\x18\t \x01(\x0e2\x16.storage.CVSSV3.ImpactR\x0fconfidentiality\x124\n" +
	"\tintegrity\x18\n" +
	" \x01(\x0e2\x16.storage.CVSSV3.ImpactR\tintegrity\x12:\n" +
	"\favailability\x18\v \x01(\x0e2\x16.storage.CVSSV3.ImpactR\favailability\x12\x14\n" +
	"\x05score\x18\f \x01(\x02R\x05score\x124\n" +
	"\bseverity\x18\r \x01(\x0e2\x18.storage.CVSSV3.SeverityR\bseverity\":\n" +
	"\x06Impact\x12\x0f\n" +
	"\vIMPACT_NONE\x10\x00\x12\x0e\n" +
	"\n" +
	"IMPACT_LOW\x10\x01\x12\x0f\n" +
	"\vIMPACT_HIGH\x10\x02\"^\n" +
	"\fAttackVector\x12\x10\n" +
	"\fATTACK_LOCAL\x10\x00\x12\x13\n" +
	"\x0fATTACK_ADJACENT\x10\x01\x12\x12\n" +
	"\x0eATTACK_NETWORK\x10\x02\x12\x13\n" +
	"\x0fATTACK_PHYSICAL\x10\x03\"5\n" +
	"\n" +
	"Complexity\x12\x12\n" +
	"\x0eCOMPLEXITY_LOW\x10\x00\x12\x13\n" +
	"\x0fCOMPLEXITY_HIGH\x10\x01\"G\n" +
	"\n" +
	"Privileges\x12\x12\n" +
	"\x0ePRIVILEGE_NONE\x10\x00\x12\x11\n" +
	"\rPRIVILEGE_LOW\x10\x01\x12\x12\n" +
	"\x0ePRIVILEGE_HIGH\x10\x02\"/\n" +
	"\x0fUserInteraction\x12\v\n" +
	"\aUI_NONE\x10\x00\x12\x0f\n" +
	"\vUI_REQUIRED\x10\x01\"#\n" +
	"\x05Scope\x12\r\n" +
	"\tUNCHANGED\x10\x00\x12\v\n" +
	"\aCHANGED\x10\x01\"N\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\a\n" +
	"\x03LOW\x10\x02\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\x12\f\n" +
	"\bCRITICAL\x10\x05*D\n" +
	"\x12VulnerabilityState\x12\f\n" +
	"\bOBSERVED\x10\x00\x12\f\n" +
	"\bDEFERRED\x10\x01\x12\x12\n" +
	"\x0eFALSE_POSITIVE\x10\x02*\xcb\x01\n" +
	"\x15VulnerabilitySeverity\x12\"\n" +
	"\x1eUNKNOWN_VULNERABILITY_SEVERITY\x10\x00\x12\x1e\n" +
	"\x1aLOW_VULNERABILITY_SEVERITY\x10\x01\x12#\n" +
	"\x1fMODERATE_VULNERABILITY_SEVERITY\x10\x02\x12$\n" +
	" IMPORTANT_VULNERABILITY_SEVERITY\x10\x03\x12#\n" +
	"\x1fCRITICAL_VULNERABILITY_SEVERITY\x10\x04*P\n" +
	"\x06Source\x12\x12\n" +
	"\x0eSOURCE_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eSOURCE_RED_HAT\x10\x01\x12\x0e\n" +
	"\n" +
	"SOURCE_OSV\x10\x02\x12\x0e\n" +
	"\n" +
	"SOURCE_NVD\x10\x03*7\n" +
	"\x10CvssScoreVersion\x12\x13\n" +
	"\x0fUNKNOWN_VERSION\x10\x00\x12\x06\n" +
	"\x02V2\x10\x01\x12\x06\n" +
	"\x02V3\x10\x02B6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_storage_cve_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_storage_cve_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_storage_cve_proto_goTypes = []any{
	(VulnerabilityState)(0),       // 0: storage.VulnerabilityState
	(VulnerabilitySeverity)(0),    // 1: storage.VulnerabilitySeverity
	(Source)(0),                   // 2: storage.Source
	(CvssScoreVersion)(0),         // 3: storage.CvssScoreVersion
	(CVE_CVEType)(0),              // 4: storage.CVE.CVEType
	(CVE_ScoreVersion)(0),         // 5: storage.CVE.ScoreVersion
	(CVEInfo_ScoreVersion)(0),     // 6: storage.CVEInfo.ScoreVersion
	(CVSSV2_Impact)(0),            // 7: storage.CVSSV2.Impact
	(CVSSV2_AttackVector)(0),      // 8: storage.CVSSV2.AttackVector
	(CVSSV2_AccessComplexity)(0),  // 9: storage.CVSSV2.AccessComplexity
	(CVSSV2_Authentication)(0),    // 10: storage.CVSSV2.Authentication
	(CVSSV2_Severity)(0),          // 11: storage.CVSSV2.Severity
	(CVSSV3_Impact)(0),            // 12: storage.CVSSV3.Impact
	(CVSSV3_AttackVector)(0),      // 13: storage.CVSSV3.AttackVector
	(CVSSV3_Complexity)(0),        // 14: storage.CVSSV3.Complexity
	(CVSSV3_Privileges)(0),        // 15: storage.CVSSV3.Privileges
	(CVSSV3_UserInteraction)(0),   // 16: storage.CVSSV3.UserInteraction
	(CVSSV3_Scope)(0),             // 17: storage.CVSSV3.Scope
	(CVSSV3_Severity)(0),          // 18: storage.CVSSV3.Severity
	(*EPSS)(nil),                  // 19: storage.EPSS
	(*CVE)(nil),                   // 20: storage.CVE
	(*CVEInfo)(nil),               // 21: storage.CVEInfo
	(*Advisory)(nil),              // 22: storage.Advisory
	(*ImageCVE)(nil),              // 23: storage.ImageCVE
	(*ImageCVEV2)(nil),            // 24: storage.ImageCVEV2
	(*NodeCVE)(nil),               // 25: storage.NodeCVE
	(*ClusterCVE)(nil),            // 26: storage.ClusterCVE
	(*CVSSScore)(nil),             // 27: storage.CVSSScore
	(*CVSSV2)(nil),                // 28: storage.CVSSV2
	(*CVSSV3)(nil),                // 29: storage.CVSSV3
	(*CVE_DistroSpecific)(nil),    // 30: storage.CVE.DistroSpecific
	(*CVE_Reference)(nil),         // 31: storage.CVE.Reference
	nil,                           // 32: storage.CVE.DistroSpecificsEntry
	(*CVEInfo_Reference)(nil),     // 33: storage.CVEInfo.Reference
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
}
var file_storage_cve_proto_depIdxs = []int32{
	4,  // 0: storage.CVE.type:type_name -> storage.CVE.CVEType
	4,  // 1: storage.CVE.types:type_name -> storage.CVE.CVEType
	34, // 2: storage.CVE.published_on:type_name -> google.protobuf.Timestamp
	34, // 3: storage.CVE.created_at:type_name -> google.protobuf.Timestamp
	34, // 4: storage.CVE.last_modified:type_name -> google.protobuf.Timestamp
	31, // 5: storage.CVE.references:type_name -> storage.CVE.Reference
	5,  // 6: storage.CVE.score_version:type_name -> storage.CVE.ScoreVersion
	28, // 7: storage.CVE.cvss_v2:type_name -> storage.CVSSV2
	29, // 8: storage.CVE.cvss_v3:type_name -> storage.CVSSV3
	34, // 9: storage.CVE.suppress_activation:type_name -> google.protobuf.Timestamp
	34, // 10: storage.CVE.suppress_expiry:type_name -> google.protobuf.Timestamp
	32, // 11: storage.CVE.distro_specifics:type_name -> storage.CVE.DistroSpecificsEntry
	1,  // 12: storage.CVE.severity:type_name -> storage.VulnerabilitySeverity
	34, // 13: storage.CVEInfo.published_on:type_name -> google.protobuf.Timestamp
	34, // 14: storage.CVEInfo.created_at:type_name -> google.protobuf.Timestamp
	34, // 15: storage.CVEInfo.last_modified:type_name -> google.protobuf.Timestamp
	6,  // 16: storage.CVEInfo.score_version:type_name -> storage.CVEInfo.ScoreVersion
	28, // 17: storage.CVEInfo.cvss_v2:type_name -> storage.CVSSV2
	29, // 18: storage.CVEInfo.cvss_v3:type_name -> storage.CVSSV3
	33, // 19: storage.CVEInfo.references:type_name -> storage.CVEInfo.Reference
	27, // 20: storage.CVEInfo.cvss_metrics:type_name -> storage.CVSSScore
	19, // 21: storage.CVEInfo.epss:type_name -> storage.EPSS
	21, // 22: storage.ImageCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 23: storage.ImageCVE.severity:type_name -> storage.VulnerabilitySeverity
	34, // 24: storage.ImageCVE.snooze_start:type_name -> google.protobuf.Timestamp
	34, // 25: storage.ImageCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	27, // 26: storage.ImageCVE.cvss_metrics:type_name -> storage.CVSSScore
	3,  // 27: storage.ImageCVE.nvd_score_version:type_name -> storage.CvssScoreVersion
	21, // 28: storage.ImageCVEV2.cve_base_info:type_name -> storage.CVEInfo
	1,  // 29: storage.ImageCVEV2.severity:type_name -> storage.VulnerabilitySeverity
	3,  // 30: storage.ImageCVEV2.nvd_score_version:type_name -> storage.CvssScoreVersion
	34, // 31: storage.ImageCVEV2.first_image_occurrence:type_name -> google.protobuf.Timestamp
	0,  // 32: storage.ImageCVEV2.state:type_name -> storage.VulnerabilityState
	22, // 33: storage.ImageCVEV2.advisory:type_name -> storage.Advisory
	21, // 34: storage.NodeCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 35: storage.NodeCVE.severity:type_name -> storage.VulnerabilitySeverity
	34, // 36: storage.NodeCVE.snooze_start:type_name -> google.protobuf.Timestamp
	34, // 37: storage.NodeCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	34, // 38: storage.NodeCVE.orphaned_time:type_name -> google.protobuf.Timestamp
	21, // 39: storage.ClusterCVE.cve_base_info:type_name -> storage.CVEInfo
	1,  // 40: storage.ClusterCVE.severity:type_name -> storage.VulnerabilitySeverity
	34, // 41: storage.ClusterCVE.snooze_start:type_name -> google.protobuf.Timestamp
	34, // 42: storage.ClusterCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	4,  // 43: storage.ClusterCVE.type:type_name -> storage.CVE.CVEType
	2,  // 44: storage.CVSSScore.source:type_name -> storage.Source
	28, // 45: storage.CVSSScore.cvssv2:type_name -> storage.CVSSV2
	29, // 46: storage.CVSSScore.cvssv3:type_name -> storage.CVSSV3
	8,  // 47: storage.CVSSV2.attack_vector:type_name -> storage.CVSSV2.AttackVector
	9,  // 48: storage.CVSSV2.access_complexity:type_name -> storage.CVSSV2.AccessComplexity
	10, // 49: storage.CVSSV2.authentication:type_name -> storage.CVSSV2.Authentication
	7,  // 50: storage.CVSSV2.confidentiality:type_name -> storage.CVSSV2.Impact
	7,  // 51: storage.CVSSV2.integrity:type_name -> storage.CVSSV2.Impact
	7,  // 52: storage.CVSSV2.availability:type_name -> storage.CVSSV2.Impact
	11, // 53: storage.CVSSV2.severity:type_name -> storage.CVSSV2.Severity
	13, // 54: storage.CVSSV3.attack_vector:type_name -> storage.CVSSV3.AttackVector
	14, // 55: storage.CVSSV3.attack_complexity:type_name -> storage.CVSSV3.Complexity
	15, // 56: storage.CVSSV3.privileges_required:type_name -> storage.CVSSV3.Privileges
	16, // 57: storage.CVSSV3.user_interaction:type_name -> storage.CVSSV3.UserInteraction
	17, // 58: storage.CVSSV3.scope:type_name -> storage.CVSSV3.Scope
	12, // 59: storage.CVSSV3.confidentiality:type_name -> storage.CVSSV3.Impact
	12, // 60: storage.CVSSV3.integrity:type_name -> storage.CVSSV3.Impact
	12, // 61: storage.CVSSV3.availability:type_name -> storage.CVSSV3.Impact
	18, // 62: storage.CVSSV3.severity:type_name -> storage.CVSSV3.Severity
	1,  // 63: storage.CVE.DistroSpecific.severity:type_name -> storage.VulnerabilitySeverity
	5,  // 64: storage.CVE.DistroSpecific.score_version:type_name -> storage.CVE.ScoreVersion
	28, // 65: storage.CVE.DistroSpecific.cvss_v2:type_name -> storage.CVSSV2
	29, // 66: storage.CVE.DistroSpecific.cvss_v3:type_name -> storage.CVSSV3
	30, // 67: storage.CVE.DistroSpecificsEntry.value:type_name -> storage.CVE.DistroSpecific
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_storage_cve_proto_init() }
func file_storage_cve_proto_init() {
	if File_storage_cve_proto != nil {
		return
	}
	file_storage_cve_proto_msgTypes[5].OneofWrappers = []any{
		(*imageCVEV2_FixedBy)(nil),
	}
	file_storage_cve_proto_msgTypes[8].OneofWrappers = []any{
		(*cVSSScore_Cvssv2)(nil),
		(*cVSSScore_Cvssv3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_cve_proto_rawDesc), len(file_storage_cve_proto_rawDesc)),
			NumEnums:      19,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_cve_proto_goTypes,
		DependencyIndexes: file_storage_cve_proto_depIdxs,
		EnumInfos:         file_storage_cve_proto_enumTypes,
		MessageInfos:      file_storage_cve_proto_msgTypes,
	}.Build()
	File_storage_cve_proto = out.File
	file_storage_cve_proto_goTypes = nil
	file_storage_cve_proto_depIdxs = nil
}
