// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/group.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Group is a GroupProperties : Role mapping.
type Group struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// GroupProperties define the properties of a group, applying to users when their properties match.
	// They also uniquely identify the group with the props.id field.
	Props *GroupProperties `protobuf:"bytes,1,opt,name=props" json:"props,omitempty"`
	// This is the name of the role that will apply to users in this group.
	RoleName      *string `protobuf:"bytes,3,opt,name=role_name,json=roleName" json:"role_name,omitempty" search:"Role,hidden" sql:"index=name:groups_unique_indicator;category:unique"` // @gotags: search:"Role,hidden" sql:"index=name:groups_unique_indicator;category:unique"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_storage_group_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_storage_group_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Group) GetProps() *GroupProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Group) GetRoleName() string {
	if x != nil && x.RoleName != nil {
		return *x.RoleName
	}
	return ""
}

func (x *Group) SetProps(v *GroupProperties) {
	x.Props = v
}

func (x *Group) SetRoleName(v string) {
	x.RoleName = &v
}

func (x *Group) HasProps() bool {
	if x == nil {
		return false
	}
	return x.Props != nil
}

func (x *Group) HasRoleName() bool {
	if x == nil {
		return false
	}
	return x.RoleName != nil
}

func (x *Group) ClearProps() {
	x.Props = nil
}

func (x *Group) ClearRoleName() {
	x.RoleName = nil
}

type Group_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// GroupProperties define the properties of a group, applying to users when their properties match.
	// They also uniquely identify the group with the props.id field.
	Props *GroupProperties
	// This is the name of the role that will apply to users in this group.
	RoleName *string
}

func (b0 Group_builder) Build() *Group {
	m0 := &Group{}
	b, x := &b0, m0
	_, _ = b, x
	x.Props = b.Props
	x.RoleName = b.RoleName
	return m0
}

// GroupProperties defines the properties of a group. Groups apply to users when
// their properties match. For instance:
//   - If GroupProperties has only an auth_provider_id, then that group applies
//     to all users logged in with that auth provider.
//   - If GroupProperties in addition has a claim key, then it applies to all
//     users with that auth provider and the claim key, etc.
//
// Note: Changes to GroupProperties may require changes to v1.DeleteGroupRequest.
type GroupProperties struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique identifier for group properties and respectively the group.
	Id             *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty" sql:"pk"` // @gotags: sql:"pk"
	Traits         *Traits `protobuf:"bytes,5,opt,name=traits" json:"traits,omitempty"`
	AuthProviderId *string `protobuf:"bytes,1,opt,name=auth_provider_id,json=authProviderId" json:"auth_provider_id,omitempty" search:"Group Auth Provider,hidden" sql:"index=category:unique;name:groups_unique_indicator"` // @gotags: search:"Group Auth Provider,hidden" sql:"index=category:unique;name:groups_unique_indicator"
	Key            *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" search:"Group Key,hidden" sql:"index=category:unique;name:groups_unique_indicator"`                                               // @gotags: search:"Group Key,hidden" sql:"index=category:unique;name:groups_unique_indicator"
	Value          *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty" search:"Group Value,hidden" sql:"index=category:unique;name:groups_unique_indicator"`                                           // @gotags: search:"Group Value,hidden" sql:"index=category:unique;name:groups_unique_indicator"
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupProperties) Reset() {
	*x = GroupProperties{}
	mi := &file_storage_group_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupProperties) ProtoMessage() {}

func (x *GroupProperties) ProtoReflect() protoreflect.Message {
	mi := &file_storage_group_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GroupProperties) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GroupProperties) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *GroupProperties) GetAuthProviderId() string {
	if x != nil && x.AuthProviderId != nil {
		return *x.AuthProviderId
	}
	return ""
}

func (x *GroupProperties) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *GroupProperties) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *GroupProperties) SetId(v string) {
	x.Id = &v
}

func (x *GroupProperties) SetTraits(v *Traits) {
	x.Traits = v
}

func (x *GroupProperties) SetAuthProviderId(v string) {
	x.AuthProviderId = &v
}

func (x *GroupProperties) SetKey(v string) {
	x.Key = &v
}

func (x *GroupProperties) SetValue(v string) {
	x.Value = &v
}

func (x *GroupProperties) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *GroupProperties) HasTraits() bool {
	if x == nil {
		return false
	}
	return x.Traits != nil
}

func (x *GroupProperties) HasAuthProviderId() bool {
	if x == nil {
		return false
	}
	return x.AuthProviderId != nil
}

func (x *GroupProperties) HasKey() bool {
	if x == nil {
		return false
	}
	return x.Key != nil
}

func (x *GroupProperties) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *GroupProperties) ClearId() {
	x.Id = nil
}

func (x *GroupProperties) ClearTraits() {
	x.Traits = nil
}

func (x *GroupProperties) ClearAuthProviderId() {
	x.AuthProviderId = nil
}

func (x *GroupProperties) ClearKey() {
	x.Key = nil
}

func (x *GroupProperties) ClearValue() {
	x.Value = nil
}

type GroupProperties_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for group properties and respectively the group.
	Id             *string
	Traits         *Traits
	AuthProviderId *string
	Key            *string
	Value          *string
}

func (b0 GroupProperties_builder) Build() *GroupProperties {
	m0 := &GroupProperties{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Traits = b.Traits
	x.AuthProviderId = b.AuthProviderId
	x.Key = b.Key
	x.Value = b.Value
	return m0
}

var File_storage_group_proto protoreflect.FileDescriptor

const file_storage_group_proto_rawDesc = "" +
	"\n" +
	"\x13storage/group.proto\x12\astorage\x1a\x14storage/traits.proto\x1a!google/protobuf/go_features.proto\"T\n" +
	"\x05Group\x12.\n" +
	"\x05props\x18\x01 \x01(\v2\x18.storage.GroupPropertiesR\x05props\x12\x1b\n" +
	"\trole_name\x18\x03 \x01(\tR\broleName\"\x9c\x01\n" +
	"\x0fGroupProperties\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12'\n" +
	"\x06traits\x18\x05 \x01(\v2\x0f.storage.TraitsR\x06traits\x12(\n" +
	"\x10auth_provider_id\x18\x01 \x01(\tR\x0eauthProviderId\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05valueB6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_group_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_group_proto_goTypes = []any{
	(*Group)(nil),           // 0: storage.Group
	(*GroupProperties)(nil), // 1: storage.GroupProperties
	(*Traits)(nil),          // 2: storage.Traits
}
var file_storage_group_proto_depIdxs = []int32{
	1, // 0: storage.Group.props:type_name -> storage.GroupProperties
	2, // 1: storage.GroupProperties.traits:type_name -> storage.Traits
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_storage_group_proto_init() }
func file_storage_group_proto_init() {
	if File_storage_group_proto != nil {
		return
	}
	file_storage_traits_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_group_proto_rawDesc), len(file_storage_group_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_group_proto_goTypes,
		DependencyIndexes: file_storage_group_proto_depIdxs,
		MessageInfos:      file_storage_group_proto_msgTypes,
	}.Build()
	File_storage_group_proto = out.File
	file_storage_group_proto_goTypes = nil
	file_storage_group_proto_depIdxs = nil
}
