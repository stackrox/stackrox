// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/policy.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicySource int32

const (
	PolicySource_IMPERATIVE  PolicySource = 0
	PolicySource_DECLARATIVE PolicySource = 1
)

// Enum value maps for PolicySource.
var (
	PolicySource_name = map[int32]string{
		0: "IMPERATIVE",
		1: "DECLARATIVE",
	}
	PolicySource_value = map[string]int32{
		"IMPERATIVE":  0,
		"DECLARATIVE": 1,
	}
)

func (x PolicySource) Enum() *PolicySource {
	p := new(PolicySource)
	*p = x
	return p
}

func (x PolicySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySource) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[0].Descriptor()
}

func (PolicySource) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[0]
}

func (x PolicySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySource.Descriptor instead.
func (PolicySource) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{0}
}

type EventSource int32

const (
	EventSource_NOT_APPLICABLE   EventSource = 0
	EventSource_DEPLOYMENT_EVENT EventSource = 1
	EventSource_AUDIT_LOG_EVENT  EventSource = 2
)

// Enum value maps for EventSource.
var (
	EventSource_name = map[int32]string{
		0: "NOT_APPLICABLE",
		1: "DEPLOYMENT_EVENT",
		2: "AUDIT_LOG_EVENT",
	}
	EventSource_value = map[string]int32{
		"NOT_APPLICABLE":   0,
		"DEPLOYMENT_EVENT": 1,
		"AUDIT_LOG_EVENT":  2,
	}
)

func (x EventSource) Enum() *EventSource {
	p := new(EventSource)
	*p = x
	return p
}

func (x EventSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSource) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[1].Descriptor()
}

func (EventSource) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[1]
}

func (x EventSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSource.Descriptor instead.
func (EventSource) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{1}
}

type BooleanOperator int32

const (
	BooleanOperator_OR  BooleanOperator = 0
	BooleanOperator_AND BooleanOperator = 1
)

// Enum value maps for BooleanOperator.
var (
	BooleanOperator_name = map[int32]string{
		0: "OR",
		1: "AND",
	}
	BooleanOperator_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x BooleanOperator) Enum() *BooleanOperator {
	p := new(BooleanOperator)
	*p = x
	return p
}

func (x BooleanOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[2].Descriptor()
}

func (BooleanOperator) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[2]
}

func (x BooleanOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanOperator.Descriptor instead.
func (BooleanOperator) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{2}
}

type EnforcementAction int32

const (
	EnforcementAction_UNSET_ENFORCEMENT                         EnforcementAction = 0
	EnforcementAction_SCALE_TO_ZERO_ENFORCEMENT                 EnforcementAction = 1
	EnforcementAction_UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT EnforcementAction = 2
	EnforcementAction_KILL_POD_ENFORCEMENT                      EnforcementAction = 3
	EnforcementAction_FAIL_BUILD_ENFORCEMENT                    EnforcementAction = 4
	// FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
	EnforcementAction_FAIL_KUBE_REQUEST_ENFORCEMENT EnforcementAction = 5
	// FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.
	EnforcementAction_FAIL_DEPLOYMENT_CREATE_ENFORCEMENT EnforcementAction = 6
	// FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
	EnforcementAction_FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT EnforcementAction = 7
)

// Enum value maps for EnforcementAction.
var (
	EnforcementAction_name = map[int32]string{
		0: "UNSET_ENFORCEMENT",
		1: "SCALE_TO_ZERO_ENFORCEMENT",
		2: "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
		3: "KILL_POD_ENFORCEMENT",
		4: "FAIL_BUILD_ENFORCEMENT",
		5: "FAIL_KUBE_REQUEST_ENFORCEMENT",
		6: "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
		7: "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT",
	}
	EnforcementAction_value = map[string]int32{
		"UNSET_ENFORCEMENT":                         0,
		"SCALE_TO_ZERO_ENFORCEMENT":                 1,
		"UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT": 2,
		"KILL_POD_ENFORCEMENT":                      3,
		"FAIL_BUILD_ENFORCEMENT":                    4,
		"FAIL_KUBE_REQUEST_ENFORCEMENT":             5,
		"FAIL_DEPLOYMENT_CREATE_ENFORCEMENT":        6,
		"FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT":        7,
	}
)

func (x EnforcementAction) Enum() *EnforcementAction {
	p := new(EnforcementAction)
	*p = x
	return p
}

func (x EnforcementAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnforcementAction) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[3].Descriptor()
}

func (EnforcementAction) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[3]
}

func (x EnforcementAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnforcementAction.Descriptor instead.
func (EnforcementAction) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{3}
}

type Severity int32

const (
	Severity_UNSET_SEVERITY    Severity = 0
	Severity_LOW_SEVERITY      Severity = 1
	Severity_MEDIUM_SEVERITY   Severity = 2
	Severity_HIGH_SEVERITY     Severity = 3
	Severity_CRITICAL_SEVERITY Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "UNSET_SEVERITY",
		1: "LOW_SEVERITY",
		2: "MEDIUM_SEVERITY",
		3: "HIGH_SEVERITY",
		4: "CRITICAL_SEVERITY",
	}
	Severity_value = map[string]int32{
		"UNSET_SEVERITY":    0,
		"LOW_SEVERITY":      1,
		"MEDIUM_SEVERITY":   2,
		"HIGH_SEVERITY":     3,
		"CRITICAL_SEVERITY": 4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[4].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[4]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{4}
}

type LifecycleStage int32

const (
	LifecycleStage_DEPLOY  LifecycleStage = 0
	LifecycleStage_BUILD   LifecycleStage = 1
	LifecycleStage_RUNTIME LifecycleStage = 2
)

// Enum value maps for LifecycleStage.
var (
	LifecycleStage_name = map[int32]string{
		0: "DEPLOY",
		1: "BUILD",
		2: "RUNTIME",
	}
	LifecycleStage_value = map[string]int32{
		"DEPLOY":  0,
		"BUILD":   1,
		"RUNTIME": 2,
	}
)

func (x LifecycleStage) Enum() *LifecycleStage {
	p := new(LifecycleStage)
	*p = x
	return p
}

func (x LifecycleStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleStage) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[5].Descriptor()
}

func (LifecycleStage) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[5]
}

func (x LifecycleStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifecycleStage.Descriptor instead.
func (LifecycleStage) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{5}
}

type Comparator int32

const (
	Comparator_LESS_THAN              Comparator = 0
	Comparator_LESS_THAN_OR_EQUALS    Comparator = 1
	Comparator_EQUALS                 Comparator = 2
	Comparator_GREATER_THAN_OR_EQUALS Comparator = 3
	Comparator_GREATER_THAN           Comparator = 4
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "LESS_THAN",
		1: "LESS_THAN_OR_EQUALS",
		2: "EQUALS",
		3: "GREATER_THAN_OR_EQUALS",
		4: "GREATER_THAN",
	}
	Comparator_value = map[string]int32{
		"LESS_THAN":              0,
		"LESS_THAN_OR_EQUALS":    1,
		"EQUALS":                 2,
		"GREATER_THAN_OR_EQUALS": 3,
		"GREATER_THAN":           4,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[6].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[6]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{6}
}

// Next tag: 28
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Policy ID,store,hidden" sql:"pk,index=btree"`                   // @gotags: search:"Policy ID,store,hidden" sql:"pk,index=btree"
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Policy,store" sql:"unique"`               // @gotags: search:"Policy,store" sql:"unique"
	Description     string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" search:"Description"` // @gotags: search:"Description"
	Rationale       string           `protobuf:"bytes,4,opt,name=rationale,proto3" json:"rationale,omitempty"`
	Remediation     string           `protobuf:"bytes,5,opt,name=remediation,proto3" json:"remediation,omitempty"`
	Disabled        bool             `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty" search:"Disabled"`                                                                         // @gotags: search:"Disabled"
	Categories      []string         `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty" search:"Category,store"`                                                                      // @gotags: search:"Category,store"
	LifecycleStages []LifecycleStage `protobuf:"varint,9,rep,packed,name=lifecycle_stages,json=lifecycleStages,proto3,enum=storage.LifecycleStage" json:"lifecycle_stages,omitempty" search:"Lifecycle Stage,store"` // @gotags: search:"Lifecycle Stage,store"
	EventSource     EventSource      `protobuf:"varint,22,opt,name=event_source,json=eventSource,proto3,enum=storage.EventSource" json:"event_source,omitempty"`
	Exclusions      []*Exclusion     `protobuf:"bytes,21,rep,name=exclusions,proto3" json:"exclusions,omitempty"`
	Scope           []*Scope         `protobuf:"bytes,11,rep,name=scope,proto3" json:"scope,omitempty"`
	Severity        Severity         `protobuf:"varint,12,opt,name=severity,proto3,enum=storage.Severity" json:"severity,omitempty" search:"Severity,store"` // @gotags: search:"Severity,store"
	// FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.
	// FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
	// FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
	EnforcementActions []EnforcementAction    `protobuf:"varint,13,rep,packed,name=enforcement_actions,json=enforcementActions,proto3,enum=storage.EnforcementAction" json:"enforcement_actions,omitempty" search:"Enforcement"` // @gotags: search:"Enforcement"
	Notifiers          []string               `protobuf:"bytes,14,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	LastUpdated        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" search:"Policy Last Updated"` // @gotags: search:"Policy Last Updated"
	// For internal use only.
	SORTName string `protobuf:"bytes,16,opt,name=SORT_name,json=SORTName,proto3" json:"SORT_name,omitempty" search:"SORT_Policy,hidden,analyzer=keyword"` // @gotags: search:"SORT_Policy,hidden,analyzer=keyword"
	// For internal use only.
	SORTLifecycleStage string `protobuf:"bytes,17,opt,name=SORT_lifecycleStage,json=SORTLifecycleStage,proto3" json:"SORT_lifecycleStage,omitempty" search:"SORT_Lifecycle Stage,hidden"` // @gotags: search:"SORT_Lifecycle Stage,hidden"
	// For internal use only.
	SORTEnforcement    bool                         `protobuf:"varint,18,opt,name=SORT_enforcement,json=SORTEnforcement,proto3" json:"SORT_enforcement,omitempty" search:"SORT_Enforcement,hidden"` // @gotags: search:"SORT_Enforcement,hidden"
	PolicyVersion      string                       `protobuf:"bytes,19,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	PolicySections     []*PolicySection             `protobuf:"bytes,20,rep,name=policy_sections,json=policySections,proto3" json:"policy_sections,omitempty"`
	MitreAttackVectors []*Policy_MitreAttackVectors `protobuf:"bytes,23,rep,name=mitre_attack_vectors,json=mitreAttackVectors,proto3" json:"mitre_attack_vectors,omitempty"`
	// Read-only field. If true, the policy's criteria fields are rendered read-only.
	CriteriaLocked bool `protobuf:"varint,24,opt,name=criteria_locked,json=criteriaLocked,proto3" json:"criteria_locked,omitempty"`
	// Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only.
	MitreVectorsLocked bool `protobuf:"varint,25,opt,name=mitre_vectors_locked,json=mitreVectorsLocked,proto3" json:"mitre_vectors_locked,omitempty"`
	// Read-only field. Indicates the policy is a default policy if true and a custom policy if false.
	IsDefault bool         `protobuf:"varint,26,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Source    PolicySource `protobuf:"varint,27,opt,name=source,proto3,enum=storage.PolicySource" json:"source,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *Policy) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *Policy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Policy) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Policy) GetLifecycleStages() []LifecycleStage {
	if x != nil {
		return x.LifecycleStages
	}
	return nil
}

func (x *Policy) GetEventSource() EventSource {
	if x != nil {
		return x.EventSource
	}
	return EventSource_NOT_APPLICABLE
}

func (x *Policy) GetExclusions() []*Exclusion {
	if x != nil {
		return x.Exclusions
	}
	return nil
}

func (x *Policy) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Policy) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *Policy) GetEnforcementActions() []EnforcementAction {
	if x != nil {
		return x.EnforcementActions
	}
	return nil
}

func (x *Policy) GetNotifiers() []string {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *Policy) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Policy) GetSORTName() string {
	if x != nil {
		return x.SORTName
	}
	return ""
}

func (x *Policy) GetSORTLifecycleStage() string {
	if x != nil {
		return x.SORTLifecycleStage
	}
	return ""
}

func (x *Policy) GetSORTEnforcement() bool {
	if x != nil {
		return x.SORTEnforcement
	}
	return false
}

func (x *Policy) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *Policy) GetPolicySections() []*PolicySection {
	if x != nil {
		return x.PolicySections
	}
	return nil
}

func (x *Policy) GetMitreAttackVectors() []*Policy_MitreAttackVectors {
	if x != nil {
		return x.MitreAttackVectors
	}
	return nil
}

func (x *Policy) GetCriteriaLocked() bool {
	if x != nil {
		return x.CriteriaLocked
	}
	return false
}

func (x *Policy) GetMitreVectorsLocked() bool {
	if x != nil {
		return x.MitreVectorsLocked
	}
	return false
}

func (x *Policy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Policy) GetSource() PolicySource {
	if x != nil {
		return x.Source
	}
	return PolicySource_IMPERATIVE
}

type PolicySection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionName  string         `protobuf:"bytes,1,opt,name=section_name,json=sectionName,proto3" json:"section_name,omitempty"`
	PolicyGroups []*PolicyGroup `protobuf:"bytes,3,rep,name=policy_groups,json=policyGroups,proto3" json:"policy_groups,omitempty"`
}

func (x *PolicySection) Reset() {
	*x = PolicySection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySection) ProtoMessage() {}

func (x *PolicySection) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySection.ProtoReflect.Descriptor instead.
func (*PolicySection) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{1}
}

func (x *PolicySection) GetSectionName() string {
	if x != nil {
		return x.SectionName
	}
	return ""
}

func (x *PolicySection) GetPolicyGroups() []*PolicyGroup {
	if x != nil {
		return x.PolicyGroups
	}
	return nil
}

type PolicyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName       string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	BooleanOperator BooleanOperator `protobuf:"varint,2,opt,name=boolean_operator,json=booleanOperator,proto3,enum=storage.BooleanOperator" json:"boolean_operator,omitempty"`
	Negate          bool            `protobuf:"varint,3,opt,name=negate,proto3" json:"negate,omitempty"`
	Values          []*PolicyValue  `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PolicyGroup) Reset() {
	*x = PolicyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroup) ProtoMessage() {}

func (x *PolicyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroup.ProtoReflect.Descriptor instead.
func (*PolicyGroup) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyGroup) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *PolicyGroup) GetBooleanOperator() BooleanOperator {
	if x != nil {
		return x.BooleanOperator
	}
	return BooleanOperator_OR
}

func (x *PolicyGroup) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *PolicyGroup) GetValues() []*PolicyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type PolicyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PolicyValue) Reset() {
	*x = PolicyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyValue) ProtoMessage() {}

func (x *PolicyValue) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyValue.ProtoReflect.Descriptor instead.
func (*PolicyValue) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PolicyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *PolicyList) Reset() {
	*x = PolicyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyList) ProtoMessage() {}

func (x *PolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyList.ProtoReflect.Descriptor instead.
func (*PolicyList) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyList) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ListPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Severity        Severity               `protobuf:"varint,4,opt,name=severity,proto3,enum=storage.Severity" json:"severity,omitempty"`
	Disabled        bool                   `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	LifecycleStages []LifecycleStage       `protobuf:"varint,6,rep,packed,name=lifecycle_stages,json=lifecycleStages,proto3,enum=storage.LifecycleStage" json:"lifecycle_stages,omitempty"`
	Notifiers       []string               `protobuf:"bytes,7,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	LastUpdated     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	EventSource     EventSource            `protobuf:"varint,9,opt,name=event_source,json=eventSource,proto3,enum=storage.EventSource" json:"event_source,omitempty"`
	IsDefault       bool                   `protobuf:"varint,10,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Source          PolicySource           `protobuf:"varint,11,opt,name=source,proto3,enum=storage.PolicySource" json:"source,omitempty"`
}

func (x *ListPolicy) Reset() {
	*x = ListPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicy) ProtoMessage() {}

func (x *ListPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicy.ProtoReflect.Descriptor instead.
func (*ListPolicy) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{5}
}

func (x *ListPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListPolicy) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *ListPolicy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ListPolicy) GetLifecycleStages() []LifecycleStage {
	if x != nil {
		return x.LifecycleStages
	}
	return nil
}

func (x *ListPolicy) GetNotifiers() []string {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *ListPolicy) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ListPolicy) GetEventSource() EventSource {
	if x != nil {
		return x.EventSource
	}
	return EventSource_NOT_APPLICABLE
}

func (x *ListPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ListPolicy) GetSource() PolicySource {
	if x != nil {
		return x.Source
	}
	return PolicySource_IMPERATIVE
}

type Exclusion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Deployment *Exclusion_Deployment  `protobuf:"bytes,5,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Image      *Exclusion_Image       `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Expiration *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *Exclusion) Reset() {
	*x = Exclusion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exclusion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion) ProtoMessage() {}

func (x *Exclusion) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exclusion.ProtoReflect.Descriptor instead.
func (*Exclusion) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{6}
}

func (x *Exclusion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exclusion) GetDeployment() *Exclusion_Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Exclusion) GetImage() *Exclusion_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Exclusion) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

// ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.
// We do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object
type ExportPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ExportPoliciesResponse) Reset() {
	*x = ExportPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPoliciesResponse) ProtoMessage() {}

func (x *ExportPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ExportPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{7}
}

func (x *ExportPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policy_MitreAttackVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tactic     string   `protobuf:"bytes,1,opt,name=tactic,proto3" json:"tactic,omitempty"`
	Techniques []string `protobuf:"bytes,2,rep,name=techniques,proto3" json:"techniques,omitempty"`
}

func (x *Policy_MitreAttackVectors) Reset() {
	*x = Policy_MitreAttackVectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_MitreAttackVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_MitreAttackVectors) ProtoMessage() {}

func (x *Policy_MitreAttackVectors) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_MitreAttackVectors.ProtoReflect.Descriptor instead.
func (*Policy_MitreAttackVectors) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Policy_MitreAttackVectors) GetTactic() string {
	if x != nil {
		return x.Tactic
	}
	return ""
}

func (x *Policy_MitreAttackVectors) GetTechniques() []string {
	if x != nil {
		return x.Techniques
	}
	return nil
}

type Exclusion_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName *ImageName `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty" search:"-"` // @gotags: search:"-"
}

func (x *Exclusion_Container) Reset() {
	*x = Exclusion_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exclusion_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Container) ProtoMessage() {}

func (x *Exclusion_Container) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exclusion_Container.ProtoReflect.Descriptor instead.
func (*Exclusion_Container) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Exclusion_Container) GetImageName() *ImageName {
	if x != nil {
		return x.ImageName
	}
	return nil
}

type Exclusion_Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Scope *Scope `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *Exclusion_Deployment) Reset() {
	*x = Exclusion_Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exclusion_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Deployment) ProtoMessage() {}

func (x *Exclusion_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exclusion_Deployment.ProtoReflect.Descriptor instead.
func (*Exclusion_Deployment) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Exclusion_Deployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exclusion_Deployment) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type Exclusion_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Exclusion_Image) Reset() {
	*x = Exclusion_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exclusion_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Image) ProtoMessage() {}

func (x *Exclusion_Image) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exclusion_Image.ProtoReflect.Descriptor instead.
func (*Exclusion_Image) Descriptor() ([]byte, []int) {
	return file_storage_policy_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Exclusion_Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_storage_policy_proto protoreflect.FileDescriptor

var file_storage_policy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x09, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a,
	0x13, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x4f, 0x52, 0x54,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x53, 0x4f, 0x52, 0x54, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x12, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x4c, 0x0a, 0x12, 0x4d, 0x69, 0x74, 0x72, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x22, 0x6d, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x39, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xc5, 0x03, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x3e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x46, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x1b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x45, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2a, 0x2f, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x2a, 0x4c, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x22, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x11, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x55, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x54, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49,
	0x4c, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4b, 0x55,
	0x42, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x2a, 0x6f, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x57, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x0e, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a,
	0x6e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x42,
	0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5a, 0x11, 0x2e, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_policy_proto_rawDescOnce sync.Once
	file_storage_policy_proto_rawDescData = file_storage_policy_proto_rawDesc
)

func file_storage_policy_proto_rawDescGZIP() []byte {
	file_storage_policy_proto_rawDescOnce.Do(func() {
		file_storage_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_policy_proto_rawDescData)
	})
	return file_storage_policy_proto_rawDescData
}

var file_storage_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_storage_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_storage_policy_proto_goTypes = []any{
	(PolicySource)(0),                 // 0: storage.PolicySource
	(EventSource)(0),                  // 1: storage.EventSource
	(BooleanOperator)(0),              // 2: storage.BooleanOperator
	(EnforcementAction)(0),            // 3: storage.EnforcementAction
	(Severity)(0),                     // 4: storage.Severity
	(LifecycleStage)(0),               // 5: storage.LifecycleStage
	(Comparator)(0),                   // 6: storage.Comparator
	(*Policy)(nil),                    // 7: storage.Policy
	(*PolicySection)(nil),             // 8: storage.PolicySection
	(*PolicyGroup)(nil),               // 9: storage.PolicyGroup
	(*PolicyValue)(nil),               // 10: storage.PolicyValue
	(*PolicyList)(nil),                // 11: storage.PolicyList
	(*ListPolicy)(nil),                // 12: storage.ListPolicy
	(*Exclusion)(nil),                 // 13: storage.Exclusion
	(*ExportPoliciesResponse)(nil),    // 14: storage.ExportPoliciesResponse
	(*Policy_MitreAttackVectors)(nil), // 15: storage.Policy.MitreAttackVectors
	(*Exclusion_Container)(nil),       // 16: storage.Exclusion.Container
	(*Exclusion_Deployment)(nil),      // 17: storage.Exclusion.Deployment
	(*Exclusion_Image)(nil),           // 18: storage.Exclusion.Image
	(*Scope)(nil),                     // 19: storage.Scope
	(*timestamppb.Timestamp)(nil),     // 20: google.protobuf.Timestamp
	(*ImageName)(nil),                 // 21: storage.ImageName
}
var file_storage_policy_proto_depIdxs = []int32{
	5,  // 0: storage.Policy.lifecycle_stages:type_name -> storage.LifecycleStage
	1,  // 1: storage.Policy.event_source:type_name -> storage.EventSource
	13, // 2: storage.Policy.exclusions:type_name -> storage.Exclusion
	19, // 3: storage.Policy.scope:type_name -> storage.Scope
	4,  // 4: storage.Policy.severity:type_name -> storage.Severity
	3,  // 5: storage.Policy.enforcement_actions:type_name -> storage.EnforcementAction
	20, // 6: storage.Policy.last_updated:type_name -> google.protobuf.Timestamp
	8,  // 7: storage.Policy.policy_sections:type_name -> storage.PolicySection
	15, // 8: storage.Policy.mitre_attack_vectors:type_name -> storage.Policy.MitreAttackVectors
	0,  // 9: storage.Policy.source:type_name -> storage.PolicySource
	9,  // 10: storage.PolicySection.policy_groups:type_name -> storage.PolicyGroup
	2,  // 11: storage.PolicyGroup.boolean_operator:type_name -> storage.BooleanOperator
	10, // 12: storage.PolicyGroup.values:type_name -> storage.PolicyValue
	7,  // 13: storage.PolicyList.policies:type_name -> storage.Policy
	4,  // 14: storage.ListPolicy.severity:type_name -> storage.Severity
	5,  // 15: storage.ListPolicy.lifecycle_stages:type_name -> storage.LifecycleStage
	20, // 16: storage.ListPolicy.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 17: storage.ListPolicy.event_source:type_name -> storage.EventSource
	0,  // 18: storage.ListPolicy.source:type_name -> storage.PolicySource
	17, // 19: storage.Exclusion.deployment:type_name -> storage.Exclusion.Deployment
	18, // 20: storage.Exclusion.image:type_name -> storage.Exclusion.Image
	20, // 21: storage.Exclusion.expiration:type_name -> google.protobuf.Timestamp
	7,  // 22: storage.ExportPoliciesResponse.policies:type_name -> storage.Policy
	21, // 23: storage.Exclusion.Container.image_name:type_name -> storage.ImageName
	19, // 24: storage.Exclusion.Deployment.scope:type_name -> storage.Scope
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_storage_policy_proto_init() }
func file_storage_policy_proto_init() {
	if File_storage_policy_proto != nil {
		return
	}
	file_storage_image_proto_init()
	file_storage_scope_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_policy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PolicySection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Exclusion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExportPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Policy_MitreAttackVectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Exclusion_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Exclusion_Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_policy_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Exclusion_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_policy_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_policy_proto_goTypes,
		DependencyIndexes: file_storage_policy_proto_depIdxs,
		EnumInfos:         file_storage_policy_proto_enumTypes,
		MessageInfos:      file_storage_policy_proto_msgTypes,
	}.Build()
	File_storage_policy_proto = out.File
	file_storage_policy_proto_rawDesc = nil
	file_storage_policy_proto_goTypes = nil
	file_storage_policy_proto_depIdxs = nil
}
