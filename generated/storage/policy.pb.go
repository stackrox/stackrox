// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/policy.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicySource int32

const (
	PolicySource_IMPERATIVE  PolicySource = 0
	PolicySource_DECLARATIVE PolicySource = 1
)

// Enum value maps for PolicySource.
var (
	PolicySource_name = map[int32]string{
		0: "IMPERATIVE",
		1: "DECLARATIVE",
	}
	PolicySource_value = map[string]int32{
		"IMPERATIVE":  0,
		"DECLARATIVE": 1,
	}
)

func (x PolicySource) Enum() *PolicySource {
	p := new(PolicySource)
	*p = x
	return p
}

func (x PolicySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySource) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[0].Descriptor()
}

func (PolicySource) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[0]
}

func (x PolicySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type EventSource int32

const (
	EventSource_NOT_APPLICABLE   EventSource = 0
	EventSource_DEPLOYMENT_EVENT EventSource = 1
	EventSource_AUDIT_LOG_EVENT  EventSource = 2
)

// Enum value maps for EventSource.
var (
	EventSource_name = map[int32]string{
		0: "NOT_APPLICABLE",
		1: "DEPLOYMENT_EVENT",
		2: "AUDIT_LOG_EVENT",
	}
	EventSource_value = map[string]int32{
		"NOT_APPLICABLE":   0,
		"DEPLOYMENT_EVENT": 1,
		"AUDIT_LOG_EVENT":  2,
	}
)

func (x EventSource) Enum() *EventSource {
	p := new(EventSource)
	*p = x
	return p
}

func (x EventSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSource) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[1].Descriptor()
}

func (EventSource) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[1]
}

func (x EventSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type BooleanOperator int32

const (
	BooleanOperator_OR  BooleanOperator = 0
	BooleanOperator_AND BooleanOperator = 1
)

// Enum value maps for BooleanOperator.
var (
	BooleanOperator_name = map[int32]string{
		0: "OR",
		1: "AND",
	}
	BooleanOperator_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x BooleanOperator) Enum() *BooleanOperator {
	p := new(BooleanOperator)
	*p = x
	return p
}

func (x BooleanOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[2].Descriptor()
}

func (BooleanOperator) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[2]
}

func (x BooleanOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type EnforcementAction int32

const (
	EnforcementAction_UNSET_ENFORCEMENT                         EnforcementAction = 0
	EnforcementAction_SCALE_TO_ZERO_ENFORCEMENT                 EnforcementAction = 1
	EnforcementAction_UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT EnforcementAction = 2
	EnforcementAction_KILL_POD_ENFORCEMENT                      EnforcementAction = 3
	EnforcementAction_FAIL_BUILD_ENFORCEMENT                    EnforcementAction = 4
	// FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
	EnforcementAction_FAIL_KUBE_REQUEST_ENFORCEMENT EnforcementAction = 5
	// FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.
	EnforcementAction_FAIL_DEPLOYMENT_CREATE_ENFORCEMENT EnforcementAction = 6
	// FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
	EnforcementAction_FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT EnforcementAction = 7
)

// Enum value maps for EnforcementAction.
var (
	EnforcementAction_name = map[int32]string{
		0: "UNSET_ENFORCEMENT",
		1: "SCALE_TO_ZERO_ENFORCEMENT",
		2: "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
		3: "KILL_POD_ENFORCEMENT",
		4: "FAIL_BUILD_ENFORCEMENT",
		5: "FAIL_KUBE_REQUEST_ENFORCEMENT",
		6: "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
		7: "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT",
	}
	EnforcementAction_value = map[string]int32{
		"UNSET_ENFORCEMENT":                         0,
		"SCALE_TO_ZERO_ENFORCEMENT":                 1,
		"UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT": 2,
		"KILL_POD_ENFORCEMENT":                      3,
		"FAIL_BUILD_ENFORCEMENT":                    4,
		"FAIL_KUBE_REQUEST_ENFORCEMENT":             5,
		"FAIL_DEPLOYMENT_CREATE_ENFORCEMENT":        6,
		"FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT":        7,
	}
)

func (x EnforcementAction) Enum() *EnforcementAction {
	p := new(EnforcementAction)
	*p = x
	return p
}

func (x EnforcementAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnforcementAction) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[3].Descriptor()
}

func (EnforcementAction) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[3]
}

func (x EnforcementAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Severity int32

const (
	Severity_UNSET_SEVERITY    Severity = 0
	Severity_LOW_SEVERITY      Severity = 1
	Severity_MEDIUM_SEVERITY   Severity = 2
	Severity_HIGH_SEVERITY     Severity = 3
	Severity_CRITICAL_SEVERITY Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "UNSET_SEVERITY",
		1: "LOW_SEVERITY",
		2: "MEDIUM_SEVERITY",
		3: "HIGH_SEVERITY",
		4: "CRITICAL_SEVERITY",
	}
	Severity_value = map[string]int32{
		"UNSET_SEVERITY":    0,
		"LOW_SEVERITY":      1,
		"MEDIUM_SEVERITY":   2,
		"HIGH_SEVERITY":     3,
		"CRITICAL_SEVERITY": 4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[4].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[4]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type LifecycleStage int32

const (
	LifecycleStage_DEPLOY  LifecycleStage = 0
	LifecycleStage_BUILD   LifecycleStage = 1
	LifecycleStage_RUNTIME LifecycleStage = 2
)

// Enum value maps for LifecycleStage.
var (
	LifecycleStage_name = map[int32]string{
		0: "DEPLOY",
		1: "BUILD",
		2: "RUNTIME",
	}
	LifecycleStage_value = map[string]int32{
		"DEPLOY":  0,
		"BUILD":   1,
		"RUNTIME": 2,
	}
)

func (x LifecycleStage) Enum() *LifecycleStage {
	p := new(LifecycleStage)
	*p = x
	return p
}

func (x LifecycleStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleStage) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[5].Descriptor()
}

func (LifecycleStage) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[5]
}

func (x LifecycleStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Comparator int32

const (
	Comparator_LESS_THAN              Comparator = 0
	Comparator_LESS_THAN_OR_EQUALS    Comparator = 1
	Comparator_EQUALS                 Comparator = 2
	Comparator_GREATER_THAN_OR_EQUALS Comparator = 3
	Comparator_GREATER_THAN           Comparator = 4
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "LESS_THAN",
		1: "LESS_THAN_OR_EQUALS",
		2: "EQUALS",
		3: "GREATER_THAN_OR_EQUALS",
		4: "GREATER_THAN",
	}
	Comparator_value = map[string]int32{
		"LESS_THAN":              0,
		"LESS_THAN_OR_EQUALS":    1,
		"EQUALS":                 2,
		"GREATER_THAN_OR_EQUALS": 3,
		"GREATER_THAN":           4,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_policy_proto_enumTypes[6].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_storage_policy_proto_enumTypes[6]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Next tag: 28
type Policy struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" search:"Policy ID,store,hidden" sql:"pk,index=btree" crYaml:"-"` // @gotags: search:"Policy ID,store,hidden" sql:"pk,index=btree" crYaml:"-"
	// Name of the policy.  Must be unique.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" search:"Policy,store" sql:"unique" crYaml:"policyName"` // @gotags: search:"Policy,store" sql:"unique" crYaml:"policyName"
	// Free-form text description of this policy.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty" search:"Description" crYaml:",omitempty"` // @gotags: search:"Description" crYaml:",omitempty"
	Rationale   string `protobuf:"bytes,4,opt,name=rationale" json:"rationale,omitempty" crYaml:",omitempty"`     // @gotags: crYaml:",omitempty"
	// Describes how to remediate a violation of this policy.
	Remediation string `protobuf:"bytes,5,opt,name=remediation" json:"remediation,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	// Toggles whether or not this policy will be executing and actively firing alerts.
	Disabled bool `protobuf:"varint,6,opt,name=disabled" json:"disabled,omitempty" search:"Disabled" crYaml:",omitempty"` // @gotags: search:"Disabled" crYaml:",omitempty"
	// List of categories that this policy falls under.  Category names must already exist in Central.
	Categories []string `protobuf:"bytes,7,rep,name=categories" json:"categories,omitempty" search:"Category,store" crYaml:",omitempty"` // @gotags: search:"Category,store" crYaml:",omitempty"
	// Describes which policy lifecylce stages this policy applies to.  Choices are DEPLOY, BUILD, and RUNTIME.
	LifecycleStages []LifecycleStage `protobuf:"varint,9,rep,packed,name=lifecycle_stages,json=lifecycleStages,enum=storage.LifecycleStage" json:"lifecycle_stages,omitempty" search:"Lifecycle Stage,store" crYaml:"lifecycleStages,stringer"` // @gotags: search:"Lifecycle Stage,store" crYaml:"lifecycleStages,stringer"
	// Describes which events should trigger execution of this policy
	EventSource EventSource `protobuf:"varint,22,opt,name=event_source,json=eventSource,enum=storage.EventSource" json:"event_source,omitempty" crYaml:"eventSource,stringer"` // @gotags: crYaml:"eventSource,stringer"
	// Define deployments or images that should be excluded from this policy.
	Exclusions []*Exclusion `protobuf:"bytes,21,rep,name=exclusions" json:"exclusions,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	// Defines clusters, namespaces, and deployments that should be included in this policy.  No scopes defined includes everything.
	Scope []*Scope `protobuf:"bytes,11,rep,name=scope" json:"scope,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	// Defines how severe a violation from this policy is.  Possible values are UNSET_SEVERITY, LOW_SEVERITY, MEDIUM_SEVERITY, HIGH_SEVERITY, and CRITICAL_SEVERITY.
	Severity Severity `protobuf:"varint,12,opt,name=severity,enum=storage.Severity" json:"severity,omitempty" search:"Severity,store" crYaml:",stringer"` // @gotags: search:"Severity,store" crYaml:",stringer"
	// FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.
	// FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
	// FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
	// Lists the enforcement actions to take when a violation from this policy is identified.  Possible value are UNSET_ENFORCEMENT, SCALE_TO_ZERO_ENFORCEMENT, UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT, KILL_POD_ENFORCEMENT, FAIL_BUILD_ENFORCEMENT, FAIL_KUBE_REQUEST_ENFORCEMENT, FAIL_DEPLOYMENT_CREATE_ENFORCEMENT, and. FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT.
	EnforcementActions []EnforcementAction `protobuf:"varint,13,rep,packed,name=enforcement_actions,json=enforcementActions,enum=storage.EnforcementAction" json:"enforcement_actions,omitempty" search:"Enforcement" crYaml:"enforcementActions,omitempty,stringer"` // @gotags: search:"Enforcement" crYaml:"enforcementActions,omitempty,stringer"
	// List of IDs of the notifiers that should be triggered when a violation from this policy is identified.  IDs should be in the form of a UUID and are found through the Central API.
	Notifiers   []string               `protobuf:"bytes,14,rep,name=notifiers" json:"notifiers,omitempty" crYaml:",omitempty"`                        // @gotags: crYaml:",omitempty"
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty" search:"Policy Last Updated" crYaml:"-"` // @gotags: search:"Policy Last Updated" crYaml:"-"
	// For internal use only.
	SORTName string `protobuf:"bytes,16,opt,name=SORT_name,json=SORTName" json:"SORT_name,omitempty" search:"SORT_Policy,hidden,analyzer=keyword" crYaml:"-"` // @gotags: search:"SORT_Policy,hidden,analyzer=keyword" crYaml:"-"
	// For internal use only.
	SORTLifecycleStage string `protobuf:"bytes,17,opt,name=SORT_lifecycleStage,json=SORTLifecycleStage" json:"SORT_lifecycleStage,omitempty" search:"SORT_Lifecycle Stage,hidden" crYaml:"-"` // @gotags: search:"SORT_Lifecycle Stage,hidden" crYaml:"-"
	// For internal use only.
	SORTEnforcement bool   `protobuf:"varint,18,opt,name=SORT_enforcement,json=SORTEnforcement" json:"SORT_enforcement,omitempty" search:"SORT_Enforcement,hidden" crYaml:"-"` // @gotags: search:"SORT_Enforcement,hidden" crYaml:"-"
	PolicyVersion   string `protobuf:"bytes,19,opt,name=policy_version,json=policyVersion" json:"policy_version,omitempty" crYaml:"-"`        // @gotags: crYaml:"-"
	// PolicySections define the violation criteria for this policy.
	PolicySections     []*PolicySection             `protobuf:"bytes,20,rep,name=policy_sections,json=policySections" json:"policy_sections,omitempty" crYaml:"policySections,omitempty"`               // @gotags: crYaml:"policySections,omitempty"
	MitreAttackVectors []*Policy_MitreAttackVectors `protobuf:"bytes,23,rep,name=mitre_attack_vectors,json=mitreAttackVectors" json:"mitre_attack_vectors,omitempty" crYaml:"mitreAttackVectors,omitempty"` // @gotags: crYaml:"mitreAttackVectors,omitempty"
	// Read-only field. If true, the policy's criteria fields are rendered read-only.
	CriteriaLocked bool `protobuf:"varint,24,opt,name=criteria_locked,json=criteriaLocked" json:"criteria_locked,omitempty" crYaml:"criteriaLocked"` // @gotags: crYaml:"criteriaLocked"
	// Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only.
	MitreVectorsLocked bool `protobuf:"varint,25,opt,name=mitre_vectors_locked,json=mitreVectorsLocked" json:"mitre_vectors_locked,omitempty" crYaml:"mitreVectorsLocked"` // @gotags: crYaml:"mitreVectorsLocked"
	// Read-only field. Indicates the policy is a default policy if true and a custom policy if false.
	IsDefault     bool         `protobuf:"varint,26,opt,name=is_default,json=isDefault" json:"is_default,omitempty" crYaml:"isDefault"`    // @gotags: crYaml:"isDefault"
	Source        PolicySource `protobuf:"varint,27,opt,name=source,enum=storage.PolicySource" json:"source,omitempty" crYaml:"-"` // @gotags: crYaml:"-"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_storage_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *Policy) GetRemediation() string {
	if x != nil {
		return x.Remediation
	}
	return ""
}

func (x *Policy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Policy) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Policy) GetLifecycleStages() []LifecycleStage {
	if x != nil {
		return x.LifecycleStages
	}
	return nil
}

func (x *Policy) GetEventSource() EventSource {
	if x != nil {
		return x.EventSource
	}
	return EventSource_NOT_APPLICABLE
}

func (x *Policy) GetExclusions() []*Exclusion {
	if x != nil {
		return x.Exclusions
	}
	return nil
}

func (x *Policy) GetScope() []*Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Policy) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *Policy) GetEnforcementActions() []EnforcementAction {
	if x != nil {
		return x.EnforcementActions
	}
	return nil
}

func (x *Policy) GetNotifiers() []string {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *Policy) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Policy) GetSORTName() string {
	if x != nil {
		return x.SORTName
	}
	return ""
}

func (x *Policy) GetSORTLifecycleStage() string {
	if x != nil {
		return x.SORTLifecycleStage
	}
	return ""
}

func (x *Policy) GetSORTEnforcement() bool {
	if x != nil {
		return x.SORTEnforcement
	}
	return false
}

func (x *Policy) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *Policy) GetPolicySections() []*PolicySection {
	if x != nil {
		return x.PolicySections
	}
	return nil
}

func (x *Policy) GetMitreAttackVectors() []*Policy_MitreAttackVectors {
	if x != nil {
		return x.MitreAttackVectors
	}
	return nil
}

func (x *Policy) GetCriteriaLocked() bool {
	if x != nil {
		return x.CriteriaLocked
	}
	return false
}

func (x *Policy) GetMitreVectorsLocked() bool {
	if x != nil {
		return x.MitreVectorsLocked
	}
	return false
}

func (x *Policy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Policy) GetSource() PolicySource {
	if x != nil {
		return x.Source
	}
	return PolicySource_IMPERATIVE
}

func (x *Policy) SetId(v string) {
	x.Id = v
}

func (x *Policy) SetName(v string) {
	x.Name = v
}

func (x *Policy) SetDescription(v string) {
	x.Description = v
}

func (x *Policy) SetRationale(v string) {
	x.Rationale = v
}

func (x *Policy) SetRemediation(v string) {
	x.Remediation = v
}

func (x *Policy) SetDisabled(v bool) {
	x.Disabled = v
}

func (x *Policy) SetCategories(v []string) {
	x.Categories = v
}

func (x *Policy) SetLifecycleStages(v []LifecycleStage) {
	x.LifecycleStages = v
}

func (x *Policy) SetEventSource(v EventSource) {
	x.EventSource = v
}

func (x *Policy) SetExclusions(v []*Exclusion) {
	x.Exclusions = v
}

func (x *Policy) SetScope(v []*Scope) {
	x.Scope = v
}

func (x *Policy) SetSeverity(v Severity) {
	x.Severity = v
}

func (x *Policy) SetEnforcementActions(v []EnforcementAction) {
	x.EnforcementActions = v
}

func (x *Policy) SetNotifiers(v []string) {
	x.Notifiers = v
}

func (x *Policy) SetLastUpdated(v *timestamppb.Timestamp) {
	x.LastUpdated = v
}

func (x *Policy) SetSORTName(v string) {
	x.SORTName = v
}

func (x *Policy) SetSORTLifecycleStage(v string) {
	x.SORTLifecycleStage = v
}

func (x *Policy) SetSORTEnforcement(v bool) {
	x.SORTEnforcement = v
}

func (x *Policy) SetPolicyVersion(v string) {
	x.PolicyVersion = v
}

func (x *Policy) SetPolicySections(v []*PolicySection) {
	x.PolicySections = v
}

func (x *Policy) SetMitreAttackVectors(v []*Policy_MitreAttackVectors) {
	x.MitreAttackVectors = v
}

func (x *Policy) SetCriteriaLocked(v bool) {
	x.CriteriaLocked = v
}

func (x *Policy) SetMitreVectorsLocked(v bool) {
	x.MitreVectorsLocked = v
}

func (x *Policy) SetIsDefault(v bool) {
	x.IsDefault = v
}

func (x *Policy) SetSource(v PolicySource) {
	x.Source = v
}

func (x *Policy) HasLastUpdated() bool {
	if x == nil {
		return false
	}
	return x.LastUpdated != nil
}

func (x *Policy) ClearLastUpdated() {
	x.LastUpdated = nil
}

type Policy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
	// Name of the policy.  Must be unique.
	Name string
	// Free-form text description of this policy.
	Description string
	Rationale   string
	// Describes how to remediate a violation of this policy.
	Remediation string
	// Toggles whether or not this policy will be executing and actively firing alerts.
	Disabled bool
	// List of categories that this policy falls under.  Category names must already exist in Central.
	Categories []string
	// Describes which policy lifecylce stages this policy applies to.  Choices are DEPLOY, BUILD, and RUNTIME.
	LifecycleStages []LifecycleStage
	// Describes which events should trigger execution of this policy
	EventSource EventSource
	// Define deployments or images that should be excluded from this policy.
	Exclusions []*Exclusion
	// Defines clusters, namespaces, and deployments that should be included in this policy.  No scopes defined includes everything.
	Scope []*Scope
	// Defines how severe a violation from this policy is.  Possible values are UNSET_SEVERITY, LOW_SEVERITY, MEDIUM_SEVERITY, HIGH_SEVERITY, and CRITICAL_SEVERITY.
	Severity Severity
	// FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.
	// FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
	// FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
	// Lists the enforcement actions to take when a violation from this policy is identified.  Possible value are UNSET_ENFORCEMENT, SCALE_TO_ZERO_ENFORCEMENT, UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT, KILL_POD_ENFORCEMENT, FAIL_BUILD_ENFORCEMENT, FAIL_KUBE_REQUEST_ENFORCEMENT, FAIL_DEPLOYMENT_CREATE_ENFORCEMENT, and. FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT.
	EnforcementActions []EnforcementAction
	// List of IDs of the notifiers that should be triggered when a violation from this policy is identified.  IDs should be in the form of a UUID and are found through the Central API.
	Notifiers   []string
	LastUpdated *timestamppb.Timestamp
	// For internal use only.
	SORTName string
	// For internal use only.
	SORTLifecycleStage string
	// For internal use only.
	SORTEnforcement bool
	PolicyVersion   string
	// PolicySections define the violation criteria for this policy.
	PolicySections     []*PolicySection
	MitreAttackVectors []*Policy_MitreAttackVectors
	// Read-only field. If true, the policy's criteria fields are rendered read-only.
	CriteriaLocked bool
	// Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only.
	MitreVectorsLocked bool
	// Read-only field. Indicates the policy is a default policy if true and a custom policy if false.
	IsDefault bool
	Source    PolicySource
}

func (b0 Policy_builder) Build() *Policy {
	m0 := &Policy{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Description = b.Description
	x.Rationale = b.Rationale
	x.Remediation = b.Remediation
	x.Disabled = b.Disabled
	x.Categories = b.Categories
	x.LifecycleStages = b.LifecycleStages
	x.EventSource = b.EventSource
	x.Exclusions = b.Exclusions
	x.Scope = b.Scope
	x.Severity = b.Severity
	x.EnforcementActions = b.EnforcementActions
	x.Notifiers = b.Notifiers
	x.LastUpdated = b.LastUpdated
	x.SORTName = b.SORTName
	x.SORTLifecycleStage = b.SORTLifecycleStage
	x.SORTEnforcement = b.SORTEnforcement
	x.PolicyVersion = b.PolicyVersion
	x.PolicySections = b.PolicySections
	x.MitreAttackVectors = b.MitreAttackVectors
	x.CriteriaLocked = b.CriteriaLocked
	x.MitreVectorsLocked = b.MitreVectorsLocked
	x.IsDefault = b.IsDefault
	x.Source = b.Source
	return m0
}

type PolicySection struct {
	state       protoimpl.MessageState `protogen:"hybrid.v1"`
	SectionName string                 `protobuf:"bytes,1,opt,name=section_name,json=sectionName" json:"section_name,omitempty" crYaml:"sectionName,omitempty"` // @gotags: crYaml:"sectionName,omitempty"
	// The set of policies groups that make up this section.  Each group can be considered an individual criterion.
	PolicyGroups  []*PolicyGroup `protobuf:"bytes,3,rep,name=policy_groups,json=policyGroups" json:"policy_groups,omitempty" crYaml:"policyGroups,omitempty"` // @gotags: crYaml:"policyGroups,omitempty"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicySection) Reset() {
	*x = PolicySection{}
	mi := &file_storage_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicySection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySection) ProtoMessage() {}

func (x *PolicySection) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PolicySection) GetSectionName() string {
	if x != nil {
		return x.SectionName
	}
	return ""
}

func (x *PolicySection) GetPolicyGroups() []*PolicyGroup {
	if x != nil {
		return x.PolicyGroups
	}
	return nil
}

func (x *PolicySection) SetSectionName(v string) {
	x.SectionName = v
}

func (x *PolicySection) SetPolicyGroups(v []*PolicyGroup) {
	x.PolicyGroups = v
}

type PolicySection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SectionName string
	// The set of policies groups that make up this section.  Each group can be considered an individual criterion.
	PolicyGroups []*PolicyGroup
}

func (b0 PolicySection_builder) Build() *PolicySection {
	m0 := &PolicySection{}
	b, x := &b0, m0
	_, _ = b, x
	x.SectionName = b.SectionName
	x.PolicyGroups = b.PolicyGroups
	return m0
}

type PolicyGroup struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Defines which field on a deployment or image this PolicyGroup evaluates.  See https://docs.openshift.com/acs/operating/manage-security-policies.html#policy-criteria_manage-security-policies for a complete list of possible values.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty" crYaml:"fieldName"` // @gotags: crYaml:"fieldName"
	// Determines if the values are combined with an OR or an AND.  Defaults to OR.
	BooleanOperator BooleanOperator `protobuf:"varint,2,opt,name=boolean_operator,json=booleanOperator,enum=storage.BooleanOperator" json:"boolean_operator,omitempty" crYaml:"booleanOperator,stringer"` // @gotags: crYaml:"booleanOperator,stringer"
	// Determines if the evaluation of this PolicyGroup is negated.  Default to false.
	Negate bool `protobuf:"varint,3,opt,name=negate" json:"negate,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	// List of values for the specified field
	Values        []*PolicyValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyGroup) Reset() {
	*x = PolicyGroup{}
	mi := &file_storage_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroup) ProtoMessage() {}

func (x *PolicyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PolicyGroup) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *PolicyGroup) GetBooleanOperator() BooleanOperator {
	if x != nil {
		return x.BooleanOperator
	}
	return BooleanOperator_OR
}

func (x *PolicyGroup) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *PolicyGroup) GetValues() []*PolicyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PolicyGroup) SetFieldName(v string) {
	x.FieldName = v
}

func (x *PolicyGroup) SetBooleanOperator(v BooleanOperator) {
	x.BooleanOperator = v
}

func (x *PolicyGroup) SetNegate(v bool) {
	x.Negate = v
}

func (x *PolicyGroup) SetValues(v []*PolicyValue) {
	x.Values = v
}

type PolicyGroup_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Defines which field on a deployment or image this PolicyGroup evaluates.  See https://docs.openshift.com/acs/operating/manage-security-policies.html#policy-criteria_manage-security-policies for a complete list of possible values.
	FieldName string
	// Determines if the values are combined with an OR or an AND.  Defaults to OR.
	BooleanOperator BooleanOperator
	// Determines if the evaluation of this PolicyGroup is negated.  Default to false.
	Negate bool
	// List of values for the specified field
	Values []*PolicyValue
}

func (b0 PolicyGroup_builder) Build() *PolicyGroup {
	m0 := &PolicyGroup{}
	b, x := &b0, m0
	_, _ = b, x
	x.FieldName = b.FieldName
	x.BooleanOperator = b.BooleanOperator
	x.Negate = b.Negate
	x.Values = b.Values
	return m0
}

type PolicyValue struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyValue) Reset() {
	*x = PolicyValue{}
	mi := &file_storage_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyValue) ProtoMessage() {}

func (x *PolicyValue) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PolicyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PolicyValue) SetValue(v string) {
	x.Value = v
}

type PolicyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Value string
}

func (b0 PolicyValue_builder) Build() *PolicyValue {
	m0 := &PolicyValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.Value = b.Value
	return m0
}

type PolicyList struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Policies      []*Policy              `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyList) Reset() {
	*x = PolicyList{}
	mi := &file_storage_policy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyList) ProtoMessage() {}

func (x *PolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PolicyList) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PolicyList) SetPolicies(v []*Policy) {
	x.Policies = v
}

type PolicyList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Policies []*Policy
}

func (b0 PolicyList_builder) Build() *PolicyList {
	m0 := &PolicyList{}
	b, x := &b0, m0
	_, _ = b, x
	x.Policies = b.Policies
	return m0
}

type ListPolicy struct {
	state           protoimpl.MessageState `protogen:"hybrid.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Severity        Severity               `protobuf:"varint,4,opt,name=severity,enum=storage.Severity" json:"severity,omitempty"`
	Disabled        bool                   `protobuf:"varint,5,opt,name=disabled" json:"disabled,omitempty"`
	LifecycleStages []LifecycleStage       `protobuf:"varint,6,rep,packed,name=lifecycle_stages,json=lifecycleStages,enum=storage.LifecycleStage" json:"lifecycle_stages,omitempty"`
	Notifiers       []string               `protobuf:"bytes,7,rep,name=notifiers" json:"notifiers,omitempty"`
	LastUpdated     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	EventSource     EventSource            `protobuf:"varint,9,opt,name=event_source,json=eventSource,enum=storage.EventSource" json:"event_source,omitempty"`
	IsDefault       bool                   `protobuf:"varint,10,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Source          PolicySource           `protobuf:"varint,11,opt,name=source,enum=storage.PolicySource" json:"source,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListPolicy) Reset() {
	*x = ListPolicy{}
	mi := &file_storage_policy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicy) ProtoMessage() {}

func (x *ListPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListPolicy) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSET_SEVERITY
}

func (x *ListPolicy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ListPolicy) GetLifecycleStages() []LifecycleStage {
	if x != nil {
		return x.LifecycleStages
	}
	return nil
}

func (x *ListPolicy) GetNotifiers() []string {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *ListPolicy) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ListPolicy) GetEventSource() EventSource {
	if x != nil {
		return x.EventSource
	}
	return EventSource_NOT_APPLICABLE
}

func (x *ListPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ListPolicy) GetSource() PolicySource {
	if x != nil {
		return x.Source
	}
	return PolicySource_IMPERATIVE
}

func (x *ListPolicy) SetId(v string) {
	x.Id = v
}

func (x *ListPolicy) SetName(v string) {
	x.Name = v
}

func (x *ListPolicy) SetDescription(v string) {
	x.Description = v
}

func (x *ListPolicy) SetSeverity(v Severity) {
	x.Severity = v
}

func (x *ListPolicy) SetDisabled(v bool) {
	x.Disabled = v
}

func (x *ListPolicy) SetLifecycleStages(v []LifecycleStage) {
	x.LifecycleStages = v
}

func (x *ListPolicy) SetNotifiers(v []string) {
	x.Notifiers = v
}

func (x *ListPolicy) SetLastUpdated(v *timestamppb.Timestamp) {
	x.LastUpdated = v
}

func (x *ListPolicy) SetEventSource(v EventSource) {
	x.EventSource = v
}

func (x *ListPolicy) SetIsDefault(v bool) {
	x.IsDefault = v
}

func (x *ListPolicy) SetSource(v PolicySource) {
	x.Source = v
}

func (x *ListPolicy) HasLastUpdated() bool {
	if x == nil {
		return false
	}
	return x.LastUpdated != nil
}

func (x *ListPolicy) ClearLastUpdated() {
	x.LastUpdated = nil
}

type ListPolicy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id              string
	Name            string
	Description     string
	Severity        Severity
	Disabled        bool
	LifecycleStages []LifecycleStage
	Notifiers       []string
	LastUpdated     *timestamppb.Timestamp
	EventSource     EventSource
	IsDefault       bool
	Source          PolicySource
}

func (b0 ListPolicy_builder) Build() *ListPolicy {
	m0 := &ListPolicy{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Description = b.Description
	x.Severity = b.Severity
	x.Disabled = b.Disabled
	x.LifecycleStages = b.LifecycleStages
	x.Notifiers = b.Notifiers
	x.LastUpdated = b.LastUpdated
	x.EventSource = b.EventSource
	x.IsDefault = b.IsDefault
	x.Source = b.Source
	return m0
}

type Exclusion struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" crYaml:",omitempty"`             // @gotags: crYaml:",omitempty"
	Deployment    *Exclusion_Deployment  `protobuf:"bytes,5,opt,name=deployment" json:"deployment,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	Image         *Exclusion_Image       `protobuf:"bytes,7,opt,name=image" json:"image,omitempty" crYaml:",omitempty"`           // @gotags: crYaml:",omitempty"
	Expiration    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration" json:"expiration,omitempty" crYaml:",timestamp,omitempty"` // @gotags: crYaml:",timestamp,omitempty"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exclusion) Reset() {
	*x = Exclusion{}
	mi := &file_storage_policy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exclusion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion) ProtoMessage() {}

func (x *Exclusion) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Exclusion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exclusion) GetDeployment() *Exclusion_Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Exclusion) GetImage() *Exclusion_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Exclusion) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Exclusion) SetName(v string) {
	x.Name = v
}

func (x *Exclusion) SetDeployment(v *Exclusion_Deployment) {
	x.Deployment = v
}

func (x *Exclusion) SetImage(v *Exclusion_Image) {
	x.Image = v
}

func (x *Exclusion) SetExpiration(v *timestamppb.Timestamp) {
	x.Expiration = v
}

func (x *Exclusion) HasDeployment() bool {
	if x == nil {
		return false
	}
	return x.Deployment != nil
}

func (x *Exclusion) HasImage() bool {
	if x == nil {
		return false
	}
	return x.Image != nil
}

func (x *Exclusion) HasExpiration() bool {
	if x == nil {
		return false
	}
	return x.Expiration != nil
}

func (x *Exclusion) ClearDeployment() {
	x.Deployment = nil
}

func (x *Exclusion) ClearImage() {
	x.Image = nil
}

func (x *Exclusion) ClearExpiration() {
	x.Expiration = nil
}

type Exclusion_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name       string
	Deployment *Exclusion_Deployment
	Image      *Exclusion_Image
	Expiration *timestamppb.Timestamp
}

func (b0 Exclusion_builder) Build() *Exclusion {
	m0 := &Exclusion{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Deployment = b.Deployment
	x.Image = b.Image
	x.Expiration = b.Expiration
	return m0
}

// ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.
// We do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object
type ExportPoliciesResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Policies      []*Policy              `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPoliciesResponse) Reset() {
	*x = ExportPoliciesResponse{}
	mi := &file_storage_policy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPoliciesResponse) ProtoMessage() {}

func (x *ExportPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExportPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ExportPoliciesResponse) SetPolicies(v []*Policy) {
	x.Policies = v
}

type ExportPoliciesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Policies []*Policy
}

func (b0 ExportPoliciesResponse_builder) Build() *ExportPoliciesResponse {
	m0 := &ExportPoliciesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Policies = b.Policies
	return m0
}

type Policy_MitreAttackVectors struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Tactic        string                 `protobuf:"bytes,1,opt,name=tactic" json:"tactic,omitempty"`
	Techniques    []string               `protobuf:"bytes,2,rep,name=techniques" json:"techniques,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy_MitreAttackVectors) Reset() {
	*x = Policy_MitreAttackVectors{}
	mi := &file_storage_policy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy_MitreAttackVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_MitreAttackVectors) ProtoMessage() {}

func (x *Policy_MitreAttackVectors) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Policy_MitreAttackVectors) GetTactic() string {
	if x != nil {
		return x.Tactic
	}
	return ""
}

func (x *Policy_MitreAttackVectors) GetTechniques() []string {
	if x != nil {
		return x.Techniques
	}
	return nil
}

func (x *Policy_MitreAttackVectors) SetTactic(v string) {
	x.Tactic = v
}

func (x *Policy_MitreAttackVectors) SetTechniques(v []string) {
	x.Techniques = v
}

type Policy_MitreAttackVectors_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tactic     string
	Techniques []string
}

func (b0 Policy_MitreAttackVectors_builder) Build() *Policy_MitreAttackVectors {
	m0 := &Policy_MitreAttackVectors{}
	b, x := &b0, m0
	_, _ = b, x
	x.Tactic = b.Tactic
	x.Techniques = b.Techniques
	return m0
}

type Exclusion_Container struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	ImageName     *ImageName             `protobuf:"bytes,3,opt,name=image_name,json=imageName" json:"image_name,omitempty" search:"-" crYaml:"imageName"` // @gotags: search:"-" crYaml:"imageName"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exclusion_Container) Reset() {
	*x = Exclusion_Container{}
	mi := &file_storage_policy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exclusion_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Container) ProtoMessage() {}

func (x *Exclusion_Container) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Exclusion_Container) GetImageName() *ImageName {
	if x != nil {
		return x.ImageName
	}
	return nil
}

func (x *Exclusion_Container) SetImageName(v *ImageName) {
	x.ImageName = v
}

func (x *Exclusion_Container) HasImageName() bool {
	if x == nil {
		return false
	}
	return x.ImageName != nil
}

func (x *Exclusion_Container) ClearImageName() {
	x.ImageName = nil
}

type Exclusion_Container_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ImageName *ImageName
}

func (b0 Exclusion_Container_builder) Build() *Exclusion_Container {
	m0 := &Exclusion_Container{}
	b, x := &b0, m0
	_, _ = b, x
	x.ImageName = b.ImageName
	return m0
}

type Exclusion_Deployment struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          string                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" crYaml:",omitempty"`   // @gotags: crYaml:",omitempty"
	Scope         *Scope                 `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty" crYaml:",omitempty"` // @gotags: crYaml:",omitempty"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exclusion_Deployment) Reset() {
	*x = Exclusion_Deployment{}
	mi := &file_storage_policy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exclusion_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Deployment) ProtoMessage() {}

func (x *Exclusion_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Exclusion_Deployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exclusion_Deployment) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Exclusion_Deployment) SetName(v string) {
	x.Name = v
}

func (x *Exclusion_Deployment) SetScope(v *Scope) {
	x.Scope = v
}

func (x *Exclusion_Deployment) HasScope() bool {
	if x == nil {
		return false
	}
	return x.Scope != nil
}

func (x *Exclusion_Deployment) ClearScope() {
	x.Scope = nil
}

type Exclusion_Deployment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name  string
	Scope *Scope
}

func (b0 Exclusion_Deployment_builder) Build() *Exclusion_Deployment {
	m0 := &Exclusion_Deployment{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Scope = b.Scope
	return m0
}

type Exclusion_Image struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exclusion_Image) Reset() {
	*x = Exclusion_Image{}
	mi := &file_storage_policy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exclusion_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exclusion_Image) ProtoMessage() {}

func (x *Exclusion_Image) ProtoReflect() protoreflect.Message {
	mi := &file_storage_policy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Exclusion_Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exclusion_Image) SetName(v string) {
	x.Name = v
}

type Exclusion_Image_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name string
}

func (b0 Exclusion_Image_builder) Build() *Exclusion_Image {
	m0 := &Exclusion_Image{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	return m0
}

var File_storage_policy_proto protoreflect.FileDescriptor

const file_storage_policy_proto_rawDesc = "" +
	"\n" +
	"\x14storage/policy.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x13storage/image.proto\x1a\x13storage/scope.proto\x1a!google/protobuf/go_features.proto\"\xc8\t\n" +
	"\x06Policy\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1c\n" +
	"\trationale\x18\x04 \x01(\tR\trationale\x12 \n" +
	"\vremediation\x18\x05 \x01(\tR\vremediation\x12\x1a\n" +
	"\bdisabled\x18\x06 \x01(\bR\bdisabled\x12\x1e\n" +
	"\n" +
	"categories\x18\a \x03(\tR\n" +
	"categories\x12B\n" +
	"\x10lifecycle_stages\x18\t \x03(\x0e2\x17.storage.LifecycleStageR\x0flifecycleStages\x127\n" +
	"\fevent_source\x18\x16 \x01(\x0e2\x14.storage.EventSourceR\veventSource\x126\n" +
	"\n" +
	"exclusions\x18\x15 \x03(\v2\x12.storage.ExclusionB\x02(\x01R\n" +
	"exclusions\x12(\n" +
	"\x05scope\x18\v \x03(\v2\x0e.storage.ScopeB\x02(\x01R\x05scope\x12-\n" +
	"\bseverity\x18\f \x01(\x0e2\x11.storage.SeverityR\bseverity\x12K\n" +
	"\x13enforcement_actions\x18\r \x03(\x0e2\x1a.storage.EnforcementActionR\x12enforcementActions\x12\x1c\n" +
	"\tnotifiers\x18\x0e \x03(\tR\tnotifiers\x12A\n" +
	"\flast_updated\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\vlastUpdated\x12\x1b\n" +
	"\tSORT_name\x18\x10 \x01(\tR\bSORTName\x12/\n" +
	"\x13SORT_lifecycleStage\x18\x11 \x01(\tR\x12SORTLifecycleStage\x12)\n" +
	"\x10SORT_enforcement\x18\x12 \x01(\bR\x0fSORTEnforcement\x12%\n" +
	"\x0epolicy_version\x18\x13 \x01(\tR\rpolicyVersion\x12C\n" +
	"\x0fpolicy_sections\x18\x14 \x03(\v2\x16.storage.PolicySectionB\x02(\x01R\x0epolicySections\x12X\n" +
	"\x14mitre_attack_vectors\x18\x17 \x03(\v2\".storage.Policy.MitreAttackVectorsB\x02(\x01R\x12mitreAttackVectors\x12'\n" +
	"\x0fcriteria_locked\x18\x18 \x01(\bR\x0ecriteriaLocked\x120\n" +
	"\x14mitre_vectors_locked\x18\x19 \x01(\bR\x12mitreVectorsLocked\x12\x1d\n" +
	"\n" +
	"is_default\x18\x1a \x01(\bR\tisDefault\x12-\n" +
	"\x06source\x18\x1b \x01(\x0e2\x15.storage.PolicySourceR\x06source\x1aL\n" +
	"\x12MitreAttackVectors\x12\x16\n" +
	"\x06tactic\x18\x01 \x01(\tR\x06tactic\x12\x1e\n" +
	"\n" +
	"techniques\x18\x02 \x03(\tR\n" +
	"techniquesJ\x04\b\b\x10\tJ\x04\b\n" +
	"\x10\v\"q\n" +
	"\rPolicySection\x12!\n" +
	"\fsection_name\x18\x01 \x01(\tR\vsectionName\x12=\n" +
	"\rpolicy_groups\x18\x03 \x03(\v2\x14.storage.PolicyGroupB\x02(\x01R\fpolicyGroups\"\xbb\x01\n" +
	"\vPolicyGroup\x12\x1d\n" +
	"\n" +
	"field_name\x18\x01 \x01(\tR\tfieldName\x12C\n" +
	"\x10boolean_operator\x18\x02 \x01(\x0e2\x18.storage.BooleanOperatorR\x0fbooleanOperator\x12\x16\n" +
	"\x06negate\x18\x03 \x01(\bR\x06negate\x120\n" +
	"\x06values\x18\x04 \x03(\v2\x14.storage.PolicyValueB\x02(\x01R\x06values\"#\n" +
	"\vPolicyValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"=\n" +
	"\n" +
	"PolicyList\x12/\n" +
	"\bpolicies\x18\x01 \x03(\v2\x0f.storage.PolicyB\x02(\x01R\bpolicies\"\xc9\x03\n" +
	"\n" +
	"ListPolicy\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12-\n" +
	"\bseverity\x18\x04 \x01(\x0e2\x11.storage.SeverityR\bseverity\x12\x1a\n" +
	"\bdisabled\x18\x05 \x01(\bR\bdisabled\x12B\n" +
	"\x10lifecycle_stages\x18\x06 \x03(\x0e2\x17.storage.LifecycleStageR\x0flifecycleStages\x12\x1c\n" +
	"\tnotifiers\x18\a \x03(\tR\tnotifiers\x12A\n" +
	"\flast_updated\x18\b \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\vlastUpdated\x127\n" +
	"\fevent_source\x18\t \x01(\x0e2\x14.storage.EventSourceR\veventSource\x12\x1d\n" +
	"\n" +
	"is_default\x18\n" +
	" \x01(\bR\tisDefault\x12-\n" +
	"\x06source\x18\v \x01(\x0e2\x15.storage.PolicySourceR\x06source\"\xf9\x02\n" +
	"\tExclusion\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12=\n" +
	"\n" +
	"deployment\x18\x05 \x01(\v2\x1d.storage.Exclusion.DeploymentR\n" +
	"deployment\x12.\n" +
	"\x05image\x18\a \x01(\v2\x18.storage.Exclusion.ImageR\x05image\x12>\n" +
	"\n" +
	"expiration\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\n" +
	"expiration\x1a>\n" +
	"\tContainer\x121\n" +
	"\n" +
	"image_name\x18\x03 \x01(\v2\x12.storage.ImageNameR\timageName\x1aF\n" +
	"\n" +
	"Deployment\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12$\n" +
	"\x05scope\x18\x04 \x01(\v2\x0e.storage.ScopeR\x05scope\x1a\x1b\n" +
	"\x05Image\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04nameJ\x04\b\x02\x10\x03\"I\n" +
	"\x16ExportPoliciesResponse\x12/\n" +
	"\bpolicies\x18\x01 \x03(\v2\x0f.storage.PolicyB\x02(\x01R\bpolicies*/\n" +
	"\fPolicySource\x12\x0e\n" +
	"\n" +
	"IMPERATIVE\x10\x00\x12\x0f\n" +
	"\vDECLARATIVE\x10\x01*L\n" +
	"\vEventSource\x12\x12\n" +
	"\x0eNOT_APPLICABLE\x10\x00\x12\x14\n" +
	"\x10DEPLOYMENT_EVENT\x10\x01\x12\x13\n" +
	"\x0fAUDIT_LOG_EVENT\x10\x02*\"\n" +
	"\x0fBooleanOperator\x12\x06\n" +
	"\x02OR\x10\x00\x12\a\n" +
	"\x03AND\x10\x01*\xa1\x02\n" +
	"\x11EnforcementAction\x12\x15\n" +
	"\x11UNSET_ENFORCEMENT\x10\x00\x12\x1d\n" +
	"\x19SCALE_TO_ZERO_ENFORCEMENT\x10\x01\x12-\n" +
	")UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT\x10\x02\x12\x18\n" +
	"\x14KILL_POD_ENFORCEMENT\x10\x03\x12\x1a\n" +
	"\x16FAIL_BUILD_ENFORCEMENT\x10\x04\x12!\n" +
	"\x1dFAIL_KUBE_REQUEST_ENFORCEMENT\x10\x05\x12&\n" +
	"\"FAIL_DEPLOYMENT_CREATE_ENFORCEMENT\x10\x06\x12&\n" +
	"\"FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT\x10\a*o\n" +
	"\bSeverity\x12\x12\n" +
	"\x0eUNSET_SEVERITY\x10\x00\x12\x10\n" +
	"\fLOW_SEVERITY\x10\x01\x12\x13\n" +
	"\x0fMEDIUM_SEVERITY\x10\x02\x12\x11\n" +
	"\rHIGH_SEVERITY\x10\x03\x12\x15\n" +
	"\x11CRITICAL_SEVERITY\x10\x04*4\n" +
	"\x0eLifecycleStage\x12\n" +
	"\n" +
	"\x06DEPLOY\x10\x00\x12\t\n" +
	"\x05BUILD\x10\x01\x12\v\n" +
	"\aRUNTIME\x10\x02*n\n" +
	"\n" +
	"Comparator\x12\r\n" +
	"\tLESS_THAN\x10\x00\x12\x17\n" +
	"\x13LESS_THAN_OR_EQUALS\x10\x01\x12\n" +
	"\n" +
	"\x06EQUALS\x10\x02\x12\x1a\n" +
	"\x16GREATER_THAN_OR_EQUALS\x10\x03\x12\x10\n" +
	"\fGREATER_THAN\x10\x04B>\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_storage_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_storage_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_storage_policy_proto_goTypes = []any{
	(PolicySource)(0),                 // 0: storage.PolicySource
	(EventSource)(0),                  // 1: storage.EventSource
	(BooleanOperator)(0),              // 2: storage.BooleanOperator
	(EnforcementAction)(0),            // 3: storage.EnforcementAction
	(Severity)(0),                     // 4: storage.Severity
	(LifecycleStage)(0),               // 5: storage.LifecycleStage
	(Comparator)(0),                   // 6: storage.Comparator
	(*Policy)(nil),                    // 7: storage.Policy
	(*PolicySection)(nil),             // 8: storage.PolicySection
	(*PolicyGroup)(nil),               // 9: storage.PolicyGroup
	(*PolicyValue)(nil),               // 10: storage.PolicyValue
	(*PolicyList)(nil),                // 11: storage.PolicyList
	(*ListPolicy)(nil),                // 12: storage.ListPolicy
	(*Exclusion)(nil),                 // 13: storage.Exclusion
	(*ExportPoliciesResponse)(nil),    // 14: storage.ExportPoliciesResponse
	(*Policy_MitreAttackVectors)(nil), // 15: storage.Policy.MitreAttackVectors
	(*Exclusion_Container)(nil),       // 16: storage.Exclusion.Container
	(*Exclusion_Deployment)(nil),      // 17: storage.Exclusion.Deployment
	(*Exclusion_Image)(nil),           // 18: storage.Exclusion.Image
	(*Scope)(nil),                     // 19: storage.Scope
	(*timestamppb.Timestamp)(nil),     // 20: google.protobuf.Timestamp
	(*ImageName)(nil),                 // 21: storage.ImageName
}
var file_storage_policy_proto_depIdxs = []int32{
	5,  // 0: storage.Policy.lifecycle_stages:type_name -> storage.LifecycleStage
	1,  // 1: storage.Policy.event_source:type_name -> storage.EventSource
	13, // 2: storage.Policy.exclusions:type_name -> storage.Exclusion
	19, // 3: storage.Policy.scope:type_name -> storage.Scope
	4,  // 4: storage.Policy.severity:type_name -> storage.Severity
	3,  // 5: storage.Policy.enforcement_actions:type_name -> storage.EnforcementAction
	20, // 6: storage.Policy.last_updated:type_name -> google.protobuf.Timestamp
	8,  // 7: storage.Policy.policy_sections:type_name -> storage.PolicySection
	15, // 8: storage.Policy.mitre_attack_vectors:type_name -> storage.Policy.MitreAttackVectors
	0,  // 9: storage.Policy.source:type_name -> storage.PolicySource
	9,  // 10: storage.PolicySection.policy_groups:type_name -> storage.PolicyGroup
	2,  // 11: storage.PolicyGroup.boolean_operator:type_name -> storage.BooleanOperator
	10, // 12: storage.PolicyGroup.values:type_name -> storage.PolicyValue
	7,  // 13: storage.PolicyList.policies:type_name -> storage.Policy
	4,  // 14: storage.ListPolicy.severity:type_name -> storage.Severity
	5,  // 15: storage.ListPolicy.lifecycle_stages:type_name -> storage.LifecycleStage
	20, // 16: storage.ListPolicy.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 17: storage.ListPolicy.event_source:type_name -> storage.EventSource
	0,  // 18: storage.ListPolicy.source:type_name -> storage.PolicySource
	17, // 19: storage.Exclusion.deployment:type_name -> storage.Exclusion.Deployment
	18, // 20: storage.Exclusion.image:type_name -> storage.Exclusion.Image
	20, // 21: storage.Exclusion.expiration:type_name -> google.protobuf.Timestamp
	7,  // 22: storage.ExportPoliciesResponse.policies:type_name -> storage.Policy
	21, // 23: storage.Exclusion.Container.image_name:type_name -> storage.ImageName
	19, // 24: storage.Exclusion.Deployment.scope:type_name -> storage.Scope
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_storage_policy_proto_init() }
func file_storage_policy_proto_init() {
	if File_storage_policy_proto != nil {
		return
	}
	file_storage_image_proto_init()
	file_storage_scope_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_policy_proto_rawDesc), len(file_storage_policy_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_policy_proto_goTypes,
		DependencyIndexes: file_storage_policy_proto_depIdxs,
		EnumInfos:         file_storage_policy_proto_enumTypes,
		MessageInfos:      file_storage_policy_proto_msgTypes,
	}.Build()
	File_storage_policy_proto = out.File
	file_storage_policy_proto_goTypes = nil
	file_storage_policy_proto_depIdxs = nil
}
