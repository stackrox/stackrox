// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: storage/rbac.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubjectKind int32

const (
	SubjectKind_UNSET_KIND      SubjectKind = 0
	SubjectKind_SERVICE_ACCOUNT SubjectKind = 1
	SubjectKind_USER            SubjectKind = 2
	SubjectKind_GROUP           SubjectKind = 3
)

// Enum value maps for SubjectKind.
var (
	SubjectKind_name = map[int32]string{
		0: "UNSET_KIND",
		1: "SERVICE_ACCOUNT",
		2: "USER",
		3: "GROUP",
	}
	SubjectKind_value = map[string]int32{
		"UNSET_KIND":      0,
		"SERVICE_ACCOUNT": 1,
		"USER":            2,
		"GROUP":           3,
	}
)

func (x SubjectKind) Enum() *SubjectKind {
	p := new(SubjectKind)
	*p = x
	return p
}

func (x SubjectKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectKind) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_rbac_proto_enumTypes[0].Descriptor()
}

func (SubjectKind) Type() protoreflect.EnumType {
	return &file_storage_rbac_proto_enumTypes[0]
}

func (x SubjectKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectKind.Descriptor instead.
func (SubjectKind) EnumDescriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{0}
}

// For any update to PermissionLevel, also update:
// - pkg/searchbasedpolicies/builders/k8s_rbac.go
// - ui/src/messages/common.js
type PermissionLevel int32

const (
	PermissionLevel_UNSET                 PermissionLevel = 0
	PermissionLevel_NONE                  PermissionLevel = 1
	PermissionLevel_DEFAULT               PermissionLevel = 2
	PermissionLevel_ELEVATED_IN_NAMESPACE PermissionLevel = 3
	PermissionLevel_ELEVATED_CLUSTER_WIDE PermissionLevel = 4
	PermissionLevel_CLUSTER_ADMIN         PermissionLevel = 5
)

// Enum value maps for PermissionLevel.
var (
	PermissionLevel_name = map[int32]string{
		0: "UNSET",
		1: "NONE",
		2: "DEFAULT",
		3: "ELEVATED_IN_NAMESPACE",
		4: "ELEVATED_CLUSTER_WIDE",
		5: "CLUSTER_ADMIN",
	}
	PermissionLevel_value = map[string]int32{
		"UNSET":                 0,
		"NONE":                  1,
		"DEFAULT":               2,
		"ELEVATED_IN_NAMESPACE": 3,
		"ELEVATED_CLUSTER_WIDE": 4,
		"CLUSTER_ADMIN":         5,
	}
)

func (x PermissionLevel) Enum() *PermissionLevel {
	p := new(PermissionLevel)
	*p = x
	return p
}

func (x PermissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_rbac_proto_enumTypes[1].Descriptor()
}

func (PermissionLevel) Type() protoreflect.EnumType {
	return &file_storage_rbac_proto_enumTypes[1]
}

func (x PermissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionLevel.Descriptor instead.
func (PermissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{1}
}

// Properties of an individual k8s Role or ClusterRole.
// ////////////////////////////////////////
type K8SRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Role ID,hidden" sql:"pk,type(uuid)"`                                                                                             // @gotags: search:"Role ID,hidden" sql:"pk,type(uuid)"
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Role"`                                                                                         // @gotags: search:"Role"
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace,store"`                                                                               // @gotags: search:"Namespace,store"
	ClusterId     string                 `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,store,hidden" sql:"type(uuid)"`                                                              // @gotags: search:"Cluster ID,store,hidden" sql:"type(uuid)"
	ClusterName   string                 `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" search:"Cluster"`                                                        // @gotags: search:"Cluster"
	ClusterRole   bool                   `protobuf:"varint,6,opt,name=cluster_role,json=clusterRole,proto3" json:"cluster_role,omitempty" search:"Cluster Role"`                                                       // @gotags: search:"Cluster Role"
	Labels        map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Role Label"`           // @gotags: search:"Role Label"
	Annotations   map[string]string      `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Role Annotation"` // @gotags: search:"Role Annotation"
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Rules         []*PolicyRule          `protobuf:"bytes,10,rep,name=rules,proto3" json:"rules,omitempty" sensorhash:"set"` // @gotags: sensorhash:"set"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *K8SRole) Reset() {
	*x = K8SRole{}
	mi := &file_storage_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K8SRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SRole) ProtoMessage() {}

func (x *K8SRole) ProtoReflect() protoreflect.Message {
	mi := &file_storage_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SRole.ProtoReflect.Descriptor instead.
func (*K8SRole) Descriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *K8SRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *K8SRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *K8SRole) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SRole) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SRole) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *K8SRole) GetClusterRole() bool {
	if x != nil {
		return x.ClusterRole
	}
	return false
}

func (x *K8SRole) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *K8SRole) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *K8SRole) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *K8SRole) GetRules() []*PolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Properties of an individual rules that grant permissions to resources.
// ////////////////////////////////////////
type PolicyRule struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Verbs           []string               `protobuf:"bytes,1,rep,name=verbs,proto3" json:"verbs,omitempty"`
	ApiGroups       []string               `protobuf:"bytes,2,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	Resources       []string               `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
	NonResourceUrls []string               `protobuf:"bytes,4,rep,name=non_resource_urls,json=nonResourceUrls,proto3" json:"non_resource_urls,omitempty"`
	ResourceNames   []string               `protobuf:"bytes,5,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PolicyRule) Reset() {
	*x = PolicyRule{}
	mi := &file_storage_rbac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRule) ProtoMessage() {}

func (x *PolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_rbac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRule.ProtoReflect.Descriptor instead.
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyRule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

func (x *PolicyRule) GetApiGroups() []string {
	if x != nil {
		return x.ApiGroups
	}
	return nil
}

func (x *PolicyRule) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PolicyRule) GetNonResourceUrls() []string {
	if x != nil {
		return x.NonResourceUrls
	}
	return nil
}

func (x *PolicyRule) GetResourceNames() []string {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

// Properties of an individual k8s RoleBinding or ClusterRoleBinding.
// ////////////////////////////////////////
type K8SRoleBinding struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Role Binding ID,hidden" sql:"pk,type(uuid)"`                                      // @gotags: search:"Role Binding ID,hidden" sql:"pk,type(uuid)"
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Role Binding"`                                  // @gotags: search:"Role Binding"
	Namespace   string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace,store"`                        // @gotags: search:"Namespace,store"
	ClusterId   string                 `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,store,hidden" sql:"type(uuid)"`       // @gotags: search:"Cluster ID,store,hidden" sql:"type(uuid)"
	ClusterName string                 `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" search:"Cluster"` // @gotags: search:"Cluster"
	// ClusterRole specifies whether the binding binds a cluster role. However, it cannot be used to determine whether
	// the binding is a cluster role binding. This can be done in conjunction with the namespace. If the namespace is
	// empty and cluster role is true, the binding is a cluster role binding.
	ClusterRole   bool                   `protobuf:"varint,6,opt,name=cluster_role,json=clusterRole,proto3" json:"cluster_role,omitempty" search:"Cluster Role"`                                                       // @gotags: search:"Cluster Role"
	Labels        map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Role Binding Label"`           // @gotags: search:"Role Binding Label"
	Annotations   map[string]string      `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Role Binding Annotation"` // @gotags: search:"Role Binding Annotation"
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Subjects      []*Subject             `protobuf:"bytes,10,rep,name=subjects,proto3" json:"subjects,omitempty"`
	RoleId        string                 `protobuf:"bytes,11,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" search:"Role ID" sql:"type(uuid)"` // @gotags: search:"Role ID" sql:"type(uuid)"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *K8SRoleBinding) Reset() {
	*x = K8SRoleBinding{}
	mi := &file_storage_rbac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K8SRoleBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SRoleBinding) ProtoMessage() {}

func (x *K8SRoleBinding) ProtoReflect() protoreflect.Message {
	mi := &file_storage_rbac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SRoleBinding.ProtoReflect.Descriptor instead.
func (*K8SRoleBinding) Descriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *K8SRoleBinding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *K8SRoleBinding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *K8SRoleBinding) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SRoleBinding) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SRoleBinding) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *K8SRoleBinding) GetClusterRole() bool {
	if x != nil {
		return x.ClusterRole
	}
	return false
}

func (x *K8SRoleBinding) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *K8SRoleBinding) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *K8SRoleBinding) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *K8SRoleBinding) GetSubjects() []*Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *K8SRoleBinding) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

// Properties of an individual subjects who are granted roles via role bindings.
// ////////////////////////////////////////
type Subject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                               // ID is derived from base64 of cluster id and name
	Kind          SubjectKind            `protobuf:"varint,1,opt,name=kind,proto3,enum=storage.SubjectKind" json:"kind,omitempty" search:"Subject Kind"` // @gotags: search:"Subject Kind"
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Subject"`                           // @gotags: search:"Subject"
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterId     string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName   string                 `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subject) Reset() {
	*x = Subject{}
	mi := &file_storage_rbac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_storage_rbac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_storage_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *Subject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subject) GetKind() SubjectKind {
	if x != nil {
		return x.Kind
	}
	return SubjectKind_UNSET_KIND
}

func (x *Subject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subject) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Subject) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Subject) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

var File_storage_rbac_proto protoreflect.FileDescriptor

const file_storage_rbac_proto_rawDesc = "" +
	"\n" +
	"\x12storage/rbac.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8c\x04\n" +
	"\aK8sRole\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x04 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x05 \x01(\tR\vclusterName\x12!\n" +
	"\fcluster_role\x18\x06 \x01(\bR\vclusterRole\x124\n" +
	"\x06labels\x18\a \x03(\v2\x1c.storage.K8sRole.LabelsEntryR\x06labels\x12C\n" +
	"\vannotations\x18\b \x03(\v2!.storage.K8sRole.AnnotationsEntryR\vannotations\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12)\n" +
	"\x05rules\x18\n" +
	" \x03(\v2\x13.storage.PolicyRuleR\x05rules\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb2\x01\n" +
	"\n" +
	"PolicyRule\x12\x14\n" +
	"\x05verbs\x18\x01 \x03(\tR\x05verbs\x12\x1d\n" +
	"\n" +
	"api_groups\x18\x02 \x03(\tR\tapiGroups\x12\x1c\n" +
	"\tresources\x18\x03 \x03(\tR\tresources\x12*\n" +
	"\x11non_resource_urls\x18\x04 \x03(\tR\x0fnonResourceUrls\x12%\n" +
	"\x0eresource_names\x18\x05 \x03(\tR\rresourceNames\"\xbd\x04\n" +
	"\x0eK8sRoleBinding\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x04 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x05 \x01(\tR\vclusterName\x12!\n" +
	"\fcluster_role\x18\x06 \x01(\bR\vclusterRole\x12;\n" +
	"\x06labels\x18\a \x03(\v2#.storage.K8sRoleBinding.LabelsEntryR\x06labels\x12J\n" +
	"\vannotations\x18\b \x03(\v2(.storage.K8sRoleBinding.AnnotationsEntryR\vannotations\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12,\n" +
	"\bsubjects\x18\n" +
	" \x03(\v2\x10.storage.SubjectR\bsubjects\x12\x17\n" +
	"\arole_id\x18\v \x01(\tR\x06roleId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x01\n" +
	"\aSubject\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12(\n" +
	"\x04kind\x18\x01 \x01(\x0e2\x14.storage.SubjectKindR\x04kind\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x05 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x06 \x01(\tR\vclusterName*G\n" +
	"\vSubjectKind\x12\x0e\n" +
	"\n" +
	"UNSET_KIND\x10\x00\x12\x13\n" +
	"\x0fSERVICE_ACCOUNT\x10\x01\x12\b\n" +
	"\x04USER\x10\x02\x12\t\n" +
	"\x05GROUP\x10\x03*|\n" +
	"\x0fPermissionLevel\x12\t\n" +
	"\x05UNSET\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\v\n" +
	"\aDEFAULT\x10\x02\x12\x19\n" +
	"\x15ELEVATED_IN_NAMESPACE\x10\x03\x12\x19\n" +
	"\x15ELEVATED_CLUSTER_WIDE\x10\x04\x12\x11\n" +
	"\rCLUSTER_ADMIN\x10\x05B.\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storageb\x06proto3"

var (
	file_storage_rbac_proto_rawDescOnce sync.Once
	file_storage_rbac_proto_rawDescData []byte
)

func file_storage_rbac_proto_rawDescGZIP() []byte {
	file_storage_rbac_proto_rawDescOnce.Do(func() {
		file_storage_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_storage_rbac_proto_rawDesc), len(file_storage_rbac_proto_rawDesc)))
	})
	return file_storage_rbac_proto_rawDescData
}

var file_storage_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_storage_rbac_proto_goTypes = []any{
	(SubjectKind)(0),              // 0: storage.SubjectKind
	(PermissionLevel)(0),          // 1: storage.PermissionLevel
	(*K8SRole)(nil),               // 2: storage.K8sRole
	(*PolicyRule)(nil),            // 3: storage.PolicyRule
	(*K8SRoleBinding)(nil),        // 4: storage.K8sRoleBinding
	(*Subject)(nil),               // 5: storage.Subject
	nil,                           // 6: storage.K8sRole.LabelsEntry
	nil,                           // 7: storage.K8sRole.AnnotationsEntry
	nil,                           // 8: storage.K8sRoleBinding.LabelsEntry
	nil,                           // 9: storage.K8sRoleBinding.AnnotationsEntry
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_storage_rbac_proto_depIdxs = []int32{
	6,  // 0: storage.K8sRole.labels:type_name -> storage.K8sRole.LabelsEntry
	7,  // 1: storage.K8sRole.annotations:type_name -> storage.K8sRole.AnnotationsEntry
	10, // 2: storage.K8sRole.created_at:type_name -> google.protobuf.Timestamp
	3,  // 3: storage.K8sRole.rules:type_name -> storage.PolicyRule
	8,  // 4: storage.K8sRoleBinding.labels:type_name -> storage.K8sRoleBinding.LabelsEntry
	9,  // 5: storage.K8sRoleBinding.annotations:type_name -> storage.K8sRoleBinding.AnnotationsEntry
	10, // 6: storage.K8sRoleBinding.created_at:type_name -> google.protobuf.Timestamp
	5,  // 7: storage.K8sRoleBinding.subjects:type_name -> storage.Subject
	0,  // 8: storage.Subject.kind:type_name -> storage.SubjectKind
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_storage_rbac_proto_init() }
func file_storage_rbac_proto_init() {
	if File_storage_rbac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_rbac_proto_rawDesc), len(file_storage_rbac_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_rbac_proto_goTypes,
		DependencyIndexes: file_storage_rbac_proto_depIdxs,
		EnumInfos:         file_storage_rbac_proto_enumTypes,
		MessageInfos:      file_storage_rbac_proto_msgTypes,
	}.Build()
	File_storage_rbac_proto = out.File
	file_storage_rbac_proto_goTypes = nil
	file_storage_rbac_proto_depIdxs = nil
}
