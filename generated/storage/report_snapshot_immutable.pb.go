// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableReportSnapshot is an immutable interface for ReportSnapshot
type ImmutableReportSnapshot interface {
	GetReportId() string
	GetReportConfigurationId() string
	GetName() string
	GetDescription() string
	GetType() ReportSnapshot_ReportType
	GetImmutableVulnReportFilters() ImmutableVulnerabilityReportFilters
	GetImmutableViewBasedVulnReportFilters() ImmutableViewBasedVulnerabilityReportFilters
	GetImmutableCollection() ImmutableCollectionSnapshot
	GetImmutableSchedule() ImmutableSchedule
	GetImmutableReportStatus() ImmutableReportStatus
	GetImmutableNotifiers() iter.Seq[ImmutableNotifierSnapshot]
	GetImmutableRequester() ImmutableSlimUser
	// fields related to view based reports
	// area_of_concern refers to view from which report is generated - user workload, platform component etc
	GetAreaOfConcern() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ReportSnapshot
}

// GetImmutableVulnReportFilters implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableVulnReportFilters() ImmutableVulnerabilityReportFilters {
	return m.GetVulnReportFilters()
}

// GetImmutableViewBasedVulnReportFilters implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableViewBasedVulnReportFilters() ImmutableViewBasedVulnerabilityReportFilters {
	return m.GetViewBasedVulnReportFilters()
}

// GetImmutableCollection implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableCollection() ImmutableCollectionSnapshot {
	return m.GetCollection()
}

// GetImmutableSchedule implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableSchedule() ImmutableSchedule {
	return m.GetSchedule()
}

// GetImmutableReportStatus implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableReportStatus() ImmutableReportStatus {
	return m.GetReportStatus()
}

// GetImmutableNotifiers implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableNotifiers() iter.Seq[ImmutableNotifierSnapshot] {
	return func(yield func(ImmutableNotifierSnapshot) bool) {
		if m == nil || m.Notifiers == nil {
			return
		}
		for _, v := range m.Notifiers {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableRequester implements ImmutableReportSnapshot
func (m *ReportSnapshot) GetImmutableRequester() ImmutableSlimUser {
	return m.GetRequester()
}

// Verify that ReportSnapshot implements ImmutableReportSnapshot
var _ ImmutableReportSnapshot = (*ReportSnapshot)(nil)

// ImmutableCollectionSnapshot is an immutable interface for CollectionSnapshot
type ImmutableCollectionSnapshot interface {
	GetId() string
	GetName() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CollectionSnapshot
}

// Verify that CollectionSnapshot implements ImmutableCollectionSnapshot
var _ ImmutableCollectionSnapshot = (*CollectionSnapshot)(nil)

// ImmutableNotifierSnapshot is an immutable interface for NotifierSnapshot
type ImmutableNotifierSnapshot interface {
	GetImmutableEmailConfig() ImmutableEmailNotifierConfiguration
	GetNotifierName() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *NotifierSnapshot
}

// GetImmutableEmailConfig implements ImmutableNotifierSnapshot
func (m *NotifierSnapshot) GetImmutableEmailConfig() ImmutableEmailNotifierConfiguration {
	return m.GetEmailConfig()
}

// Verify that NotifierSnapshot implements ImmutableNotifierSnapshot
var _ ImmutableNotifierSnapshot = (*NotifierSnapshot)(nil)

// ImmutableReportStatus is an immutable interface for ReportStatus
type ImmutableReportStatus interface {
	GetRunState() ReportStatus_RunState
	GetImmutableQueuedAt() time.Time
	GetImmutableCompletedAt() time.Time
	GetErrorMsg() string
	GetReportRequestType() ReportStatus_RunMethod
	GetReportNotificationMethod() ReportStatus_NotificationMethod
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ReportStatus
}

// GetImmutableQueuedAt implements ImmutableReportStatus
func (m *ReportStatus) GetImmutableQueuedAt() time.Time {
	if m == nil || m.QueuedAt == nil {
		return time.Time{}
	}
	return m.QueuedAt.AsTime()
}

// GetImmutableCompletedAt implements ImmutableReportStatus
func (m *ReportStatus) GetImmutableCompletedAt() time.Time {
	if m == nil || m.CompletedAt == nil {
		return time.Time{}
	}
	return m.CompletedAt.AsTime()
}

// Verify that ReportStatus implements ImmutableReportStatus
var _ ImmutableReportStatus = (*ReportStatus)(nil)
