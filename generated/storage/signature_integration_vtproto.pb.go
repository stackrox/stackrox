// Code generated by protoc-gen-go-compat. DO NOT EDIT.

package storage

import "google.golang.org/protobuf/proto"

func (m *SignatureIntegration) SizeVT() int { return proto.Size(m) }
func (m *SignatureIntegration) CloneVT() *SignatureIntegration {
	return proto.Clone(m).(*SignatureIntegration)
}
func (m *SignatureIntegration) MarshalVT() ([]byte, error)           { return proto.Marshal(m) }
func (m *SignatureIntegration) UnmarshalVT(dAtA []byte) error        { return proto.Unmarshal(dAtA, m) }
func (m *SignatureIntegration) EqualVT(n *SignatureIntegration) bool { return proto.Equal(m, n) }

// Deprecated: Use UnmarshalVT instead.
func (m *SignatureIntegration) UnmarshalVTUnsafe(dAtA []byte) error { return m.UnmarshalVT(dAtA) }

func (m *CosignPublicKeyVerification) SizeVT() int { return proto.Size(m) }
func (m *CosignPublicKeyVerification) CloneVT() *CosignPublicKeyVerification {
	return proto.Clone(m).(*CosignPublicKeyVerification)
}
func (m *CosignPublicKeyVerification) MarshalVT() ([]byte, error)    { return proto.Marshal(m) }
func (m *CosignPublicKeyVerification) UnmarshalVT(dAtA []byte) error { return proto.Unmarshal(dAtA, m) }
func (m *CosignPublicKeyVerification) EqualVT(n *CosignPublicKeyVerification) bool {
	return proto.Equal(m, n)
}

// Deprecated: Use UnmarshalVT instead.
func (m *CosignPublicKeyVerification) UnmarshalVTUnsafe(dAtA []byte) error {
	return m.UnmarshalVT(dAtA)
}

func (m *CosignPublicKeyVerification_PublicKey) SizeVT() int { return proto.Size(m) }
func (m *CosignPublicKeyVerification_PublicKey) CloneVT() *CosignPublicKeyVerification_PublicKey {
	return proto.Clone(m).(*CosignPublicKeyVerification_PublicKey)
}
func (m *CosignPublicKeyVerification_PublicKey) MarshalVT() ([]byte, error) { return proto.Marshal(m) }
func (m *CosignPublicKeyVerification_PublicKey) UnmarshalVT(dAtA []byte) error {
	return proto.Unmarshal(dAtA, m)
}
func (m *CosignPublicKeyVerification_PublicKey) EqualVT(n *CosignPublicKeyVerification_PublicKey) bool {
	return proto.Equal(m, n)
}

// Deprecated: Use UnmarshalVT instead.
func (m *CosignPublicKeyVerification_PublicKey) UnmarshalVTUnsafe(dAtA []byte) error {
	return m.UnmarshalVT(dAtA)
}

func (m *CosignCertificateVerification) SizeVT() int { return proto.Size(m) }
func (m *CosignCertificateVerification) CloneVT() *CosignCertificateVerification {
	return proto.Clone(m).(*CosignCertificateVerification)
}
func (m *CosignCertificateVerification) MarshalVT() ([]byte, error) { return proto.Marshal(m) }
func (m *CosignCertificateVerification) UnmarshalVT(dAtA []byte) error {
	return proto.Unmarshal(dAtA, m)
}
func (m *CosignCertificateVerification) EqualVT(n *CosignCertificateVerification) bool {
	return proto.Equal(m, n)
}

// Deprecated: Use UnmarshalVT instead.
func (m *CosignCertificateVerification) UnmarshalVTUnsafe(dAtA []byte) error {
	return m.UnmarshalVT(dAtA)
}

func (m *CertificateTransparencyLogVerification) SizeVT() int { return proto.Size(m) }
func (m *CertificateTransparencyLogVerification) CloneVT() *CertificateTransparencyLogVerification {
	return proto.Clone(m).(*CertificateTransparencyLogVerification)
}
func (m *CertificateTransparencyLogVerification) MarshalVT() ([]byte, error) { return proto.Marshal(m) }
func (m *CertificateTransparencyLogVerification) UnmarshalVT(dAtA []byte) error {
	return proto.Unmarshal(dAtA, m)
}
func (m *CertificateTransparencyLogVerification) EqualVT(n *CertificateTransparencyLogVerification) bool {
	return proto.Equal(m, n)
}

// Deprecated: Use UnmarshalVT instead.
func (m *CertificateTransparencyLogVerification) UnmarshalVTUnsafe(dAtA []byte) error {
	return m.UnmarshalVT(dAtA)
}

func (m *TransparencyLogVerification) SizeVT() int { return proto.Size(m) }
func (m *TransparencyLogVerification) CloneVT() *TransparencyLogVerification {
	return proto.Clone(m).(*TransparencyLogVerification)
}
func (m *TransparencyLogVerification) MarshalVT() ([]byte, error)    { return proto.Marshal(m) }
func (m *TransparencyLogVerification) UnmarshalVT(dAtA []byte) error { return proto.Unmarshal(dAtA, m) }
func (m *TransparencyLogVerification) EqualVT(n *TransparencyLogVerification) bool {
	return proto.Equal(m, n)
}

// Deprecated: Use UnmarshalVT instead.
func (m *TransparencyLogVerification) UnmarshalVTUnsafe(dAtA []byte) error {
	return m.UnmarshalVT(dAtA)
}
