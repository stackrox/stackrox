// Code generated by protoc-gen-go-json. DO NOT EDIT.

package storage

import (
	_ "bytes"
	fmt "fmt"
	strings "strings"
	_ "time"
	unsafe "unsafe"
)

func (m *HTTPEndpointConfig) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte("null"), nil
	}
	var buf strings.Builder
	buf.Grow(m.SizeVT())
	if err := m.marshalJSON(&buf); err != nil {
		return nil, err
	}
	str := buf.String()
	return unsafe.Slice(unsafe.StringData(str), len(str)), nil
}
func (m *HTTPEndpointConfig) marshalJSON(buf *strings.Builder) (err error) {
	if m == nil {
		buf.WriteString("null")
		return nil
	}
	trailingComma := false
	if trailingComma {
	}
	buf.WriteString("{")
	if x := m.GetEndpoint(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("endpoint")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetSkipTlsVerify(); x != false {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("skipTlsVerify")
		buf.WriteString("\"")
		buf.WriteString(":")
		if x {
			buf.WriteString("true")
		} else {
			buf.WriteString("false")
		}
	}
	if x := m.GetCaCert(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("caCert")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetUsername(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("username")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetPassword(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("password")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetHeaders(); x != nil {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("headers")
		buf.WriteString("\"")
		buf.WriteString(":")
		trailingComma = false
		buf.WriteString("[")
		for _, v := range x {
			if trailingComma {
				buf.WriteByte(',')
			}
			trailingComma = true
			if err := v.marshalJSON(buf); err != nil {
				return err
			}
		}
		buf.WriteString("]")
	}
	if x := m.GetClientCertPem(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clientCertPem")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	if x := m.GetClientKeyPem(); x != "" {
		if trailingComma {
			buf.WriteByte(',')
		}
		trailingComma = true
		buf.WriteString("\"")
		buf.WriteString("clientKeyPem")
		buf.WriteString("\"")
		buf.WriteString(":")
		fmt.Fprintf(buf, "%q", x)
	}
	buf.WriteString("}")
	return nil
}
