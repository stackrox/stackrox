// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/node_integration.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 6
type NodeIntegration struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to IntegrationConfig:
	//	*NodeIntegration_Clairify
	IntegrationConfig    isNodeIntegration_IntegrationConfig `protobuf_oneof:"IntegrationConfig"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *NodeIntegration) Reset()         { *m = NodeIntegration{} }
func (m *NodeIntegration) String() string { return proto.CompactTextString(m) }
func (*NodeIntegration) ProtoMessage()    {}
func (*NodeIntegration) Descriptor() ([]byte, []int) {
	return fileDescriptor_554ffd999e2aaa13, []int{0}
}
func (m *NodeIntegration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeIntegration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeIntegration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeIntegration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeIntegration.Merge(m, src)
}
func (m *NodeIntegration) XXX_Size() int {
	return m.Size()
}
func (m *NodeIntegration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeIntegration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeIntegration proto.InternalMessageInfo

type isNodeIntegration_IntegrationConfig interface {
	isNodeIntegration_IntegrationConfig()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNodeIntegration_IntegrationConfig
}

type NodeIntegration_Clairify struct {
	Clairify *ClairifyConfig `protobuf:"bytes,4,opt,name=clairify,proto3,oneof" json:"clairify,omitempty"`
}

func (*NodeIntegration_Clairify) isNodeIntegration_IntegrationConfig() {}
func (m *NodeIntegration_Clairify) Clone() isNodeIntegration_IntegrationConfig {
	if m == nil {
		return nil
	}
	cloned := new(NodeIntegration_Clairify)
	*cloned = *m

	cloned.Clairify = m.Clairify.Clone()
	return cloned
}

func (m *NodeIntegration) GetIntegrationConfig() isNodeIntegration_IntegrationConfig {
	if m != nil {
		return m.IntegrationConfig
	}
	return nil
}

func (m *NodeIntegration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeIntegration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeIntegration) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NodeIntegration) GetClairify() *ClairifyConfig {
	if x, ok := m.GetIntegrationConfig().(*NodeIntegration_Clairify); ok {
		return x.Clairify
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeIntegration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeIntegration_Clairify)(nil),
	}
}

func (m *NodeIntegration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeIntegration) Clone() *NodeIntegration {
	if m == nil {
		return nil
	}
	cloned := new(NodeIntegration)
	*cloned = *m

	if m.IntegrationConfig != nil {
		cloned.IntegrationConfig = m.IntegrationConfig.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterType((*NodeIntegration)(nil), "storage.NodeIntegration")
}

func init() { proto.RegisterFile("storage/node_integration.proto", fileDescriptor_554ffd999e2aaa13) }

var fileDescriptor_554ffd999e2aaa13 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0xcf, 0xcb, 0x4f, 0x49, 0x8d, 0xcf, 0xcc, 0x2b, 0x49, 0x4d, 0x2f, 0x4a,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x4b, 0xc9,
	0xc3, 0x14, 0x66, 0xe6, 0x26, 0xa6, 0x63, 0x51, 0xa9, 0x34, 0x95, 0x91, 0x8b, 0xdf, 0x2f, 0x3f,
	0x25, 0xd5, 0x13, 0x21, 0x23, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc4, 0xc5, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x04, 0x16,
	0x01, 0xb3, 0x41, 0x62, 0x25, 0x95, 0x05, 0xa9, 0x12, 0xcc, 0x10, 0x31, 0x10, 0x5b, 0xc8, 0x94,
	0x8b, 0x23, 0x39, 0x27, 0x31, 0xb3, 0x28, 0x33, 0xad, 0x52, 0x82, 0x45, 0x81, 0x51, 0x83, 0xdb,
	0x48, 0x5c, 0x0f, 0x6a, 0xbf, 0x9e, 0x33, 0x54, 0xc2, 0x39, 0x3f, 0x2f, 0x2d, 0x33, 0xdd, 0x83,
	0x21, 0x08, 0xae, 0xd4, 0x49, 0x98, 0x4b, 0x10, 0xc9, 0x76, 0x88, 0x02, 0x27, 0x93, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x06, 0x2e,
	0xc9, 0xcc, 0x7c, 0xbd, 0xe2, 0x92, 0xc4, 0xe4, 0xec, 0xa2, 0xfc, 0x0a, 0x88, 0xe3, 0x61, 0x86,
	0x47, 0xc1, 0xbc, 0x9b, 0xc4, 0x06, 0x16, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x45, 0xcc,
	0x60, 0x4b, 0x20, 0x01, 0x00, 0x00,
}

func (m *NodeIntegration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeIntegration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeIntegration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntegrationConfig != nil {
		{
			size := m.IntegrationConfig.Size()
			i -= size
			if _, err := m.IntegrationConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNodeIntegration(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNodeIntegration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNodeIntegration(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeIntegration_Clairify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeIntegration_Clairify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Clairify != nil {
		{
			size, err := m.Clairify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNodeIntegration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintNodeIntegration(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeIntegration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeIntegration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNodeIntegration(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodeIntegration(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNodeIntegration(uint64(l))
	}
	if m.IntegrationConfig != nil {
		n += m.IntegrationConfig.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeIntegration_Clairify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clairify != nil {
		l = m.Clairify.Size()
		n += 1 + l + sovNodeIntegration(uint64(l))
	}
	return n
}

func sovNodeIntegration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeIntegration(x uint64) (n int) {
	return sovNodeIntegration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeIntegration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeIntegration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeIntegration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clairify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClairifyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IntegrationConfig = &NodeIntegration_Clairify{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeIntegration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeIntegration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeIntegration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeIntegration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeIntegration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeIntegration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeIntegration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeIntegration = fmt.Errorf("proto: unexpected end of group")
)
