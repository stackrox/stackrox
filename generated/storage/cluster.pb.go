// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/cluster.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterType int32

const (
	ClusterType_GENERIC_CLUSTER    ClusterType = 0
	ClusterType_KUBERNETES_CLUSTER ClusterType = 1
	ClusterType_OPENSHIFT_CLUSTER  ClusterType = 2
	ClusterType_OPENSHIFT4_CLUSTER ClusterType = 5
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "GENERIC_CLUSTER",
		1: "KUBERNETES_CLUSTER",
		2: "OPENSHIFT_CLUSTER",
		5: "OPENSHIFT4_CLUSTER",
	}
	ClusterType_value = map[string]int32{
		"GENERIC_CLUSTER":    0,
		"KUBERNETES_CLUSTER": 1,
		"OPENSHIFT_CLUSTER":  2,
		"OPENSHIFT4_CLUSTER": 5,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[0].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[0]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CollectionMethod int32

const (
	CollectionMethod_UNSET_COLLECTION CollectionMethod = 0
	CollectionMethod_NO_COLLECTION    CollectionMethod = 1
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	CollectionMethod_KERNEL_MODULE CollectionMethod = 2
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	CollectionMethod_EBPF     CollectionMethod = 3
	CollectionMethod_CORE_BPF CollectionMethod = 4
)

// Enum value maps for CollectionMethod.
var (
	CollectionMethod_name = map[int32]string{
		0: "UNSET_COLLECTION",
		1: "NO_COLLECTION",
		2: "KERNEL_MODULE",
		3: "EBPF",
		4: "CORE_BPF",
	}
	CollectionMethod_value = map[string]int32{
		"UNSET_COLLECTION": 0,
		"NO_COLLECTION":    1,
		"KERNEL_MODULE":    2,
		"EBPF":             3,
		"CORE_BPF":         4,
	}
)

func (x CollectionMethod) Enum() *CollectionMethod {
	p := new(CollectionMethod)
	*p = x
	return p
}

func (x CollectionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[1].Descriptor()
}

func (CollectionMethod) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[1]
}

func (x CollectionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ManagerType int32

const (
	ManagerType_MANAGER_TYPE_UNKNOWN             ManagerType = 0
	ManagerType_MANAGER_TYPE_MANUAL              ManagerType = 1
	ManagerType_MANAGER_TYPE_HELM_CHART          ManagerType = 2
	ManagerType_MANAGER_TYPE_KUBERNETES_OPERATOR ManagerType = 3
)

// Enum value maps for ManagerType.
var (
	ManagerType_name = map[int32]string{
		0: "MANAGER_TYPE_UNKNOWN",
		1: "MANAGER_TYPE_MANUAL",
		2: "MANAGER_TYPE_HELM_CHART",
		3: "MANAGER_TYPE_KUBERNETES_OPERATOR",
	}
	ManagerType_value = map[string]int32{
		"MANAGER_TYPE_UNKNOWN":             0,
		"MANAGER_TYPE_MANUAL":              1,
		"MANAGER_TYPE_HELM_CHART":          2,
		"MANAGER_TYPE_KUBERNETES_OPERATOR": 3,
	}
)

func (x ManagerType) Enum() *ManagerType {
	p := new(ManagerType)
	*p = x
	return p
}

func (x ManagerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagerType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[2].Descriptor()
}

func (ManagerType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[2]
}

func (x ManagerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterMetadata_Type int32

const (
	ClusterMetadata_UNSPECIFIED ClusterMetadata_Type = 0
	ClusterMetadata_AKS         ClusterMetadata_Type = 1
	ClusterMetadata_ARO         ClusterMetadata_Type = 2
	ClusterMetadata_EKS         ClusterMetadata_Type = 3
	ClusterMetadata_GKE         ClusterMetadata_Type = 4
	ClusterMetadata_OCP         ClusterMetadata_Type = 5
	ClusterMetadata_OSD         ClusterMetadata_Type = 6
	ClusterMetadata_ROSA        ClusterMetadata_Type = 7
)

// Enum value maps for ClusterMetadata_Type.
var (
	ClusterMetadata_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "AKS",
		2: "ARO",
		3: "EKS",
		4: "GKE",
		5: "OCP",
		6: "OSD",
		7: "ROSA",
	}
	ClusterMetadata_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"AKS":         1,
		"ARO":         2,
		"EKS":         3,
		"GKE":         4,
		"OCP":         5,
		"OSD":         6,
		"ROSA":        7,
	}
)

func (x ClusterMetadata_Type) Enum() *ClusterMetadata_Type {
	p := new(ClusterMetadata_Type)
	*p = x
	return p
}

func (x ClusterMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[3].Descriptor()
}

func (ClusterMetadata_Type) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[3]
}

func (x ClusterMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterUpgradeStatus_Upgradability int32

const (
	ClusterUpgradeStatus_UNSET                   ClusterUpgradeStatus_Upgradability = 0
	ClusterUpgradeStatus_UP_TO_DATE              ClusterUpgradeStatus_Upgradability = 1
	ClusterUpgradeStatus_MANUAL_UPGRADE_REQUIRED ClusterUpgradeStatus_Upgradability = 2
	ClusterUpgradeStatus_AUTO_UPGRADE_POSSIBLE   ClusterUpgradeStatus_Upgradability = 3
	// SENSOR_VERSION_HIGHER occurs when we detect that the sensor
	// is running a newer version than this Central. This is unexpected,
	// but can occur depending on the patches a customer does.
	// In this case, we will NOT automatically "upgrade" the sensor,
	// since that would be a downgrade, even if the autoupgrade setting is
	// on. The user will be allowed to manually trigger the upgrade, but they are
	// strongly discouraged from doing so without upgrading Central first, since this
	// is an unsupported configuration.
	ClusterUpgradeStatus_SENSOR_VERSION_HIGHER ClusterUpgradeStatus_Upgradability = 4
)

// Enum value maps for ClusterUpgradeStatus_Upgradability.
var (
	ClusterUpgradeStatus_Upgradability_name = map[int32]string{
		0: "UNSET",
		1: "UP_TO_DATE",
		2: "MANUAL_UPGRADE_REQUIRED",
		3: "AUTO_UPGRADE_POSSIBLE",
		4: "SENSOR_VERSION_HIGHER",
	}
	ClusterUpgradeStatus_Upgradability_value = map[string]int32{
		"UNSET":                   0,
		"UP_TO_DATE":              1,
		"MANUAL_UPGRADE_REQUIRED": 2,
		"AUTO_UPGRADE_POSSIBLE":   3,
		"SENSOR_VERSION_HIGHER":   4,
	}
)

func (x ClusterUpgradeStatus_Upgradability) Enum() *ClusterUpgradeStatus_Upgradability {
	p := new(ClusterUpgradeStatus_Upgradability)
	*p = x
	return p
}

func (x ClusterUpgradeStatus_Upgradability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterUpgradeStatus_Upgradability) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[4].Descriptor()
}

func (ClusterUpgradeStatus_Upgradability) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[4]
}

func (x ClusterUpgradeStatus_Upgradability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType int32

const (
	// UPGRADE represents a sensor version upgrade.
	ClusterUpgradeStatus_UpgradeProcessStatus_UPGRADE ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType = 0
	// CERT_ROTATION represents an upgrade process that only rotates the TLS certs
	// used by the cluster, without changing anything else.
	ClusterUpgradeStatus_UpgradeProcessStatus_CERT_ROTATION ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType = 1
)

// Enum value maps for ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType.
var (
	ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType_name = map[int32]string{
		0: "UPGRADE",
		1: "CERT_ROTATION",
	}
	ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType_value = map[string]int32{
		"UPGRADE":       0,
		"CERT_ROTATION": 1,
	}
)

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Enum() *ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType {
	p := new(ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType)
	*p = x
	return p
}

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[5].Descriptor()
}

func (ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[5]
}

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type UpgradeProgress_UpgradeState int32

const (
	UpgradeProgress_UPGRADE_INITIALIZING UpgradeProgress_UpgradeState = 0
	// In-progress states.
	UpgradeProgress_UPGRADER_LAUNCHING         UpgradeProgress_UpgradeState = 1
	UpgradeProgress_UPGRADER_LAUNCHED          UpgradeProgress_UpgradeState = 2
	UpgradeProgress_PRE_FLIGHT_CHECKS_COMPLETE UpgradeProgress_UpgradeState = 3
	UpgradeProgress_UPGRADE_OPERATIONS_DONE    UpgradeProgress_UpgradeState = 4
	// The success state.
	// PLEASE NUMBER ALL IN-PROGRESS STATES ABOVE THIS
	// AND ALL ERROR STATES BELOW THIS.
	UpgradeProgress_UPGRADE_COMPLETE UpgradeProgress_UpgradeState = 10
	// Error states.
	UpgradeProgress_UPGRADE_INITIALIZATION_ERROR  UpgradeProgress_UpgradeState = 11
	UpgradeProgress_PRE_FLIGHT_CHECKS_FAILED      UpgradeProgress_UpgradeState = 12
	UpgradeProgress_UPGRADE_ERROR_ROLLING_BACK    UpgradeProgress_UpgradeState = 13
	UpgradeProgress_UPGRADE_ERROR_ROLLED_BACK     UpgradeProgress_UpgradeState = 14
	UpgradeProgress_UPGRADE_ERROR_ROLLBACK_FAILED UpgradeProgress_UpgradeState = 15
	UpgradeProgress_UPGRADE_ERROR_UNKNOWN         UpgradeProgress_UpgradeState = 16
	UpgradeProgress_UPGRADE_TIMED_OUT             UpgradeProgress_UpgradeState = 17
)

// Enum value maps for UpgradeProgress_UpgradeState.
var (
	UpgradeProgress_UpgradeState_name = map[int32]string{
		0:  "UPGRADE_INITIALIZING",
		1:  "UPGRADER_LAUNCHING",
		2:  "UPGRADER_LAUNCHED",
		3:  "PRE_FLIGHT_CHECKS_COMPLETE",
		4:  "UPGRADE_OPERATIONS_DONE",
		10: "UPGRADE_COMPLETE",
		11: "UPGRADE_INITIALIZATION_ERROR",
		12: "PRE_FLIGHT_CHECKS_FAILED",
		13: "UPGRADE_ERROR_ROLLING_BACK",
		14: "UPGRADE_ERROR_ROLLED_BACK",
		15: "UPGRADE_ERROR_ROLLBACK_FAILED",
		16: "UPGRADE_ERROR_UNKNOWN",
		17: "UPGRADE_TIMED_OUT",
	}
	UpgradeProgress_UpgradeState_value = map[string]int32{
		"UPGRADE_INITIALIZING":          0,
		"UPGRADER_LAUNCHING":            1,
		"UPGRADER_LAUNCHED":             2,
		"PRE_FLIGHT_CHECKS_COMPLETE":    3,
		"UPGRADE_OPERATIONS_DONE":       4,
		"UPGRADE_COMPLETE":              10,
		"UPGRADE_INITIALIZATION_ERROR":  11,
		"PRE_FLIGHT_CHECKS_FAILED":      12,
		"UPGRADE_ERROR_ROLLING_BACK":    13,
		"UPGRADE_ERROR_ROLLED_BACK":     14,
		"UPGRADE_ERROR_ROLLBACK_FAILED": 15,
		"UPGRADE_ERROR_UNKNOWN":         16,
		"UPGRADE_TIMED_OUT":             17,
	}
)

func (x UpgradeProgress_UpgradeState) Enum() *UpgradeProgress_UpgradeState {
	p := new(UpgradeProgress_UpgradeState)
	*p = x
	return p
}

func (x UpgradeProgress_UpgradeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeProgress_UpgradeState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[6].Descriptor()
}

func (UpgradeProgress_UpgradeState) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[6]
}

func (x UpgradeProgress_UpgradeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterHealthStatus_HealthStatusLabel int32

const (
	ClusterHealthStatus_UNINITIALIZED ClusterHealthStatus_HealthStatusLabel = 0
	// Only collector can have unavailable status
	ClusterHealthStatus_UNAVAILABLE ClusterHealthStatus_HealthStatusLabel = 1
	ClusterHealthStatus_UNHEALTHY   ClusterHealthStatus_HealthStatusLabel = 2
	ClusterHealthStatus_DEGRADED    ClusterHealthStatus_HealthStatusLabel = 3
	ClusterHealthStatus_HEALTHY     ClusterHealthStatus_HealthStatusLabel = 4
)

// Enum value maps for ClusterHealthStatus_HealthStatusLabel.
var (
	ClusterHealthStatus_HealthStatusLabel_name = map[int32]string{
		0: "UNINITIALIZED",
		1: "UNAVAILABLE",
		2: "UNHEALTHY",
		3: "DEGRADED",
		4: "HEALTHY",
	}
	ClusterHealthStatus_HealthStatusLabel_value = map[string]int32{
		"UNINITIALIZED": 0,
		"UNAVAILABLE":   1,
		"UNHEALTHY":     2,
		"DEGRADED":      3,
		"HEALTHY":       4,
	}
)

func (x ClusterHealthStatus_HealthStatusLabel) Enum() *ClusterHealthStatus_HealthStatusLabel {
	p := new(ClusterHealthStatus_HealthStatusLabel)
	*p = x
	return p
}

func (x ClusterHealthStatus_HealthStatusLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterHealthStatus_HealthStatusLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[7].Descriptor()
}

func (ClusterHealthStatus_HealthStatusLabel) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[7]
}

func (x ClusterHealthStatus_HealthStatusLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// ClusterMetadata contains metadata information about the cluster infrastructure.
type ClusterMetadata struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	Type  *ClusterMetadata_Type  `protobuf:"varint,1,opt,name=type,enum=storage.ClusterMetadata_Type" json:"type,omitempty" search:"Cluster Type"` // @gotags: search:"Cluster Type"
	// Name represents the name under which the cluster is registered with the
	// cloud provider. In case of self managed OpenShift it is the name chosen
	// by the OpenShift installer.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Id represents a unique ID under which the cluster is registered with the
	// cloud provider. Not all cluster types have an id. For all OpenShift
	// clusters, this is the Red Hat `cluster_id` registered with OCM.
	Id            *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterMetadata) Reset() {
	*x = ClusterMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetadata) ProtoMessage() {}

func (x *ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterMetadata) GetType() ClusterMetadata_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClusterMetadata_UNSPECIFIED
}

func (x *ClusterMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClusterMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ClusterMetadata) SetType(v ClusterMetadata_Type) {
	x.Type = &v
}

func (x *ClusterMetadata) SetName(v string) {
	x.Name = &v
}

func (x *ClusterMetadata) SetId(v string) {
	x.Id = &v
}

func (x *ClusterMetadata) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *ClusterMetadata) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ClusterMetadata) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ClusterMetadata) ClearType() {
	x.Type = nil
}

func (x *ClusterMetadata) ClearName() {
	x.Name = nil
}

func (x *ClusterMetadata) ClearId() {
	x.Id = nil
}

type ClusterMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type *ClusterMetadata_Type
	// Name represents the name under which the cluster is registered with the
	// cloud provider. In case of self managed OpenShift it is the name chosen
	// by the OpenShift installer.
	Name *string
	// Id represents a unique ID under which the cluster is registered with the
	// cloud provider. Not all cluster types have an id. For all OpenShift
	// clusters, this is the Red Hat `cluster_id` registered with OCM.
	Id *string
}

func (b0 ClusterMetadata_builder) Build() *ClusterMetadata {
	m0 := &ClusterMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Name = b.Name
	x.Id = b.Id
	return m0
}

type GoogleProviderMetadata struct {
	state   protoimpl.MessageState `protogen:"hybrid.v1"`
	Project *string                `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// Deprecated in favor of providerMetadata.cluster.name.
	//
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	ClusterName   *string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoogleProviderMetadata) Reset() {
	*x = GoogleProviderMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleProviderMetadata) ProtoMessage() {}

func (x *GoogleProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GoogleProviderMetadata) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *GoogleProviderMetadata) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *GoogleProviderMetadata) SetProject(v string) {
	x.Project = &v
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *GoogleProviderMetadata) SetClusterName(v string) {
	x.ClusterName = &v
}

func (x *GoogleProviderMetadata) HasProject() bool {
	if x == nil {
		return false
	}
	return x.Project != nil
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *GoogleProviderMetadata) HasClusterName() bool {
	if x == nil {
		return false
	}
	return x.ClusterName != nil
}

func (x *GoogleProviderMetadata) ClearProject() {
	x.Project = nil
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *GoogleProviderMetadata) ClearClusterName() {
	x.ClusterName = nil
}

type GoogleProviderMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Project *string
	// Deprecated in favor of providerMetadata.cluster.name.
	//
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	ClusterName *string
}

func (b0 GoogleProviderMetadata_builder) Build() *GoogleProviderMetadata {
	m0 := &GoogleProviderMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Project = b.Project
	x.ClusterName = b.ClusterName
	return m0
}

type AWSProviderMetadata struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	AccountId     *string                `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSProviderMetadata) Reset() {
	*x = AWSProviderMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSProviderMetadata) ProtoMessage() {}

func (x *AWSProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AWSProviderMetadata) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AWSProviderMetadata) SetAccountId(v string) {
	x.AccountId = &v
}

func (x *AWSProviderMetadata) HasAccountId() bool {
	if x == nil {
		return false
	}
	return x.AccountId != nil
}

func (x *AWSProviderMetadata) ClearAccountId() {
	x.AccountId = nil
}

type AWSProviderMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AccountId *string
}

func (b0 AWSProviderMetadata_builder) Build() *AWSProviderMetadata {
	m0 := &AWSProviderMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.AccountId = b.AccountId
	return m0
}

type AzureProviderMetadata struct {
	state          protoimpl.MessageState `protogen:"hybrid.v1"`
	SubscriptionId *string                `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AzureProviderMetadata) Reset() {
	*x = AzureProviderMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureProviderMetadata) ProtoMessage() {}

func (x *AzureProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AzureProviderMetadata) GetSubscriptionId() string {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return ""
}

func (x *AzureProviderMetadata) SetSubscriptionId(v string) {
	x.SubscriptionId = &v
}

func (x *AzureProviderMetadata) HasSubscriptionId() bool {
	if x == nil {
		return false
	}
	return x.SubscriptionId != nil
}

func (x *AzureProviderMetadata) ClearSubscriptionId() {
	x.SubscriptionId = nil
}

type AzureProviderMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SubscriptionId *string
}

func (b0 AzureProviderMetadata_builder) Build() *AzureProviderMetadata {
	m0 := &AzureProviderMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.SubscriptionId = b.SubscriptionId
	return m0
}

type ProviderMetadata struct {
	state  protoimpl.MessageState `protogen:"hybrid.v1"`
	Region *string                `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Zone   *string                `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	// Types that are valid to be assigned to Provider:
	//
	//	*ProviderMetadata_Google
	//	*ProviderMetadata_Aws
	//	*ProviderMetadata_Azure
	Provider      isProviderMetadata_Provider `protobuf_oneof:"Provider"`
	Verified      *bool                       `protobuf:"varint,15,opt,name=verified" json:"verified,omitempty"`
	Cluster       *ClusterMetadata            `protobuf:"bytes,16,opt,name=cluster" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderMetadata) Reset() {
	*x = ProviderMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderMetadata) ProtoMessage() {}

func (x *ProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProviderMetadata) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *ProviderMetadata) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *ProviderMetadata) GetProvider() isProviderMetadata_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ProviderMetadata) GetGoogle() *GoogleProviderMetadata {
	if x != nil {
		if x, ok := x.Provider.(*ProviderMetadata_Google); ok {
			return x.Google
		}
	}
	return nil
}

func (x *ProviderMetadata) GetAws() *AWSProviderMetadata {
	if x != nil {
		if x, ok := x.Provider.(*ProviderMetadata_Aws); ok {
			return x.Aws
		}
	}
	return nil
}

func (x *ProviderMetadata) GetAzure() *AzureProviderMetadata {
	if x != nil {
		if x, ok := x.Provider.(*ProviderMetadata_Azure); ok {
			return x.Azure
		}
	}
	return nil
}

func (x *ProviderMetadata) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *ProviderMetadata) GetCluster() *ClusterMetadata {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ProviderMetadata) SetRegion(v string) {
	x.Region = &v
}

func (x *ProviderMetadata) SetZone(v string) {
	x.Zone = &v
}

func (x *ProviderMetadata) SetGoogle(v *GoogleProviderMetadata) {
	if v == nil {
		x.Provider = nil
		return
	}
	x.Provider = &ProviderMetadata_Google{v}
}

func (x *ProviderMetadata) SetAws(v *AWSProviderMetadata) {
	if v == nil {
		x.Provider = nil
		return
	}
	x.Provider = &ProviderMetadata_Aws{v}
}

func (x *ProviderMetadata) SetAzure(v *AzureProviderMetadata) {
	if v == nil {
		x.Provider = nil
		return
	}
	x.Provider = &ProviderMetadata_Azure{v}
}

func (x *ProviderMetadata) SetVerified(v bool) {
	x.Verified = &v
}

func (x *ProviderMetadata) SetCluster(v *ClusterMetadata) {
	x.Cluster = v
}

func (x *ProviderMetadata) HasRegion() bool {
	if x == nil {
		return false
	}
	return x.Region != nil
}

func (x *ProviderMetadata) HasZone() bool {
	if x == nil {
		return false
	}
	return x.Zone != nil
}

func (x *ProviderMetadata) HasProvider() bool {
	if x == nil {
		return false
	}
	return x.Provider != nil
}

func (x *ProviderMetadata) HasGoogle() bool {
	if x == nil {
		return false
	}
	_, ok := x.Provider.(*ProviderMetadata_Google)
	return ok
}

func (x *ProviderMetadata) HasAws() bool {
	if x == nil {
		return false
	}
	_, ok := x.Provider.(*ProviderMetadata_Aws)
	return ok
}

func (x *ProviderMetadata) HasAzure() bool {
	if x == nil {
		return false
	}
	_, ok := x.Provider.(*ProviderMetadata_Azure)
	return ok
}

func (x *ProviderMetadata) HasVerified() bool {
	if x == nil {
		return false
	}
	return x.Verified != nil
}

func (x *ProviderMetadata) HasCluster() bool {
	if x == nil {
		return false
	}
	return x.Cluster != nil
}

func (x *ProviderMetadata) ClearRegion() {
	x.Region = nil
}

func (x *ProviderMetadata) ClearZone() {
	x.Zone = nil
}

func (x *ProviderMetadata) ClearProvider() {
	x.Provider = nil
}

func (x *ProviderMetadata) ClearGoogle() {
	if _, ok := x.Provider.(*ProviderMetadata_Google); ok {
		x.Provider = nil
	}
}

func (x *ProviderMetadata) ClearAws() {
	if _, ok := x.Provider.(*ProviderMetadata_Aws); ok {
		x.Provider = nil
	}
}

func (x *ProviderMetadata) ClearAzure() {
	if _, ok := x.Provider.(*ProviderMetadata_Azure); ok {
		x.Provider = nil
	}
}

func (x *ProviderMetadata) ClearVerified() {
	x.Verified = nil
}

func (x *ProviderMetadata) ClearCluster() {
	x.Cluster = nil
}

const ProviderMetadata_Provider_not_set_case case_ProviderMetadata_Provider = 0
const ProviderMetadata_Google_case case_ProviderMetadata_Provider = 3
const ProviderMetadata_Aws_case case_ProviderMetadata_Provider = 4
const ProviderMetadata_Azure_case case_ProviderMetadata_Provider = 5

func (x *ProviderMetadata) WhichProvider() case_ProviderMetadata_Provider {
	if x == nil {
		return ProviderMetadata_Provider_not_set_case
	}
	switch x.Provider.(type) {
	case *ProviderMetadata_Google:
		return ProviderMetadata_Google_case
	case *ProviderMetadata_Aws:
		return ProviderMetadata_Aws_case
	case *ProviderMetadata_Azure:
		return ProviderMetadata_Azure_case
	default:
		return ProviderMetadata_Provider_not_set_case
	}
}

type ProviderMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Region *string
	Zone   *string
	// Fields of oneof Provider:
	Google *GoogleProviderMetadata
	Aws    *AWSProviderMetadata
	Azure  *AzureProviderMetadata
	// -- end of Provider
	Verified *bool
	Cluster  *ClusterMetadata
}

func (b0 ProviderMetadata_builder) Build() *ProviderMetadata {
	m0 := &ProviderMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Region = b.Region
	x.Zone = b.Zone
	if b.Google != nil {
		x.Provider = &ProviderMetadata_Google{b.Google}
	}
	if b.Aws != nil {
		x.Provider = &ProviderMetadata_Aws{b.Aws}
	}
	if b.Azure != nil {
		x.Provider = &ProviderMetadata_Azure{b.Azure}
	}
	x.Verified = b.Verified
	x.Cluster = b.Cluster
	return m0
}

type case_ProviderMetadata_Provider protoreflect.FieldNumber

func (x case_ProviderMetadata_Provider) String() string {
	md := file_storage_cluster_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isProviderMetadata_Provider interface {
	isProviderMetadata_Provider()
}

type ProviderMetadata_Google struct {
	Google *GoogleProviderMetadata `protobuf:"bytes,3,opt,name=google,oneof"`
}

type ProviderMetadata_Aws struct {
	Aws *AWSProviderMetadata `protobuf:"bytes,4,opt,name=aws,oneof"`
}

type ProviderMetadata_Azure struct {
	Azure *AzureProviderMetadata `protobuf:"bytes,5,opt,name=azure,oneof"`
}

func (*ProviderMetadata_Google) isProviderMetadata_Provider() {}

func (*ProviderMetadata_Aws) isProviderMetadata_Provider() {}

func (*ProviderMetadata_Azure) isProviderMetadata_Provider() {}

type OrchestratorMetadata struct {
	state   protoimpl.MessageState `protogen:"hybrid.v1"`
	Version *string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty" search:"Cluster Kubernetes Version"` // @gotags: search:"Cluster Kubernetes Version"
	// Types that are valid to be assigned to IsOpenshift:
	//
	//	*OrchestratorMetadata_OpenshiftVersion
	IsOpenshift   isOrchestratorMetadata_IsOpenshift `protobuf_oneof:"is_openshift"`
	BuildDate     *timestamppb.Timestamp             `protobuf:"bytes,2,opt,name=build_date,json=buildDate" json:"build_date,omitempty"`
	ApiVersions   []string                           `protobuf:"bytes,3,rep,name=api_versions,json=apiVersions" json:"api_versions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrchestratorMetadata) Reset() {
	*x = OrchestratorMetadata{}
	mi := &file_storage_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrchestratorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorMetadata) ProtoMessage() {}

func (x *OrchestratorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OrchestratorMetadata) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *OrchestratorMetadata) GetIsOpenshift() isOrchestratorMetadata_IsOpenshift {
	if x != nil {
		return x.IsOpenshift
	}
	return nil
}

func (x *OrchestratorMetadata) GetOpenshiftVersion() string {
	if x != nil {
		if x, ok := x.IsOpenshift.(*OrchestratorMetadata_OpenshiftVersion); ok {
			return x.OpenshiftVersion
		}
	}
	return ""
}

func (x *OrchestratorMetadata) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *OrchestratorMetadata) GetApiVersions() []string {
	if x != nil {
		return x.ApiVersions
	}
	return nil
}

func (x *OrchestratorMetadata) SetVersion(v string) {
	x.Version = &v
}

func (x *OrchestratorMetadata) SetOpenshiftVersion(v string) {
	x.IsOpenshift = &OrchestratorMetadata_OpenshiftVersion{v}
}

func (x *OrchestratorMetadata) SetBuildDate(v *timestamppb.Timestamp) {
	x.BuildDate = v
}

func (x *OrchestratorMetadata) SetApiVersions(v []string) {
	x.ApiVersions = v
}

func (x *OrchestratorMetadata) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *OrchestratorMetadata) HasIsOpenshift() bool {
	if x == nil {
		return false
	}
	return x.IsOpenshift != nil
}

func (x *OrchestratorMetadata) HasOpenshiftVersion() bool {
	if x == nil {
		return false
	}
	_, ok := x.IsOpenshift.(*OrchestratorMetadata_OpenshiftVersion)
	return ok
}

func (x *OrchestratorMetadata) HasBuildDate() bool {
	if x == nil {
		return false
	}
	return x.BuildDate != nil
}

func (x *OrchestratorMetadata) ClearVersion() {
	x.Version = nil
}

func (x *OrchestratorMetadata) ClearIsOpenshift() {
	x.IsOpenshift = nil
}

func (x *OrchestratorMetadata) ClearOpenshiftVersion() {
	if _, ok := x.IsOpenshift.(*OrchestratorMetadata_OpenshiftVersion); ok {
		x.IsOpenshift = nil
	}
}

func (x *OrchestratorMetadata) ClearBuildDate() {
	x.BuildDate = nil
}

const OrchestratorMetadata_IsOpenshift_not_set_case case_OrchestratorMetadata_IsOpenshift = 0
const OrchestratorMetadata_OpenshiftVersion_case case_OrchestratorMetadata_IsOpenshift = 4

func (x *OrchestratorMetadata) WhichIsOpenshift() case_OrchestratorMetadata_IsOpenshift {
	if x == nil {
		return OrchestratorMetadata_IsOpenshift_not_set_case
	}
	switch x.IsOpenshift.(type) {
	case *OrchestratorMetadata_OpenshiftVersion:
		return OrchestratorMetadata_OpenshiftVersion_case
	default:
		return OrchestratorMetadata_IsOpenshift_not_set_case
	}
}

type OrchestratorMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Version *string
	// Fields of oneof IsOpenshift:
	OpenshiftVersion *string
	// -- end of IsOpenshift
	BuildDate   *timestamppb.Timestamp
	ApiVersions []string
}

func (b0 OrchestratorMetadata_builder) Build() *OrchestratorMetadata {
	m0 := &OrchestratorMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Version = b.Version
	if b.OpenshiftVersion != nil {
		x.IsOpenshift = &OrchestratorMetadata_OpenshiftVersion{*b.OpenshiftVersion}
	}
	x.BuildDate = b.BuildDate
	x.ApiVersions = b.ApiVersions
	return m0
}

type case_OrchestratorMetadata_IsOpenshift protoreflect.FieldNumber

func (x case_OrchestratorMetadata_IsOpenshift) String() string {
	md := file_storage_cluster_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isOrchestratorMetadata_IsOpenshift interface {
	isOrchestratorMetadata_IsOpenshift()
}

type OrchestratorMetadata_OpenshiftVersion struct {
	OpenshiftVersion string `protobuf:"bytes,4,opt,name=openshift_version,json=openshiftVersion,oneof"`
}

func (*OrchestratorMetadata_OpenshiftVersion) isOrchestratorMetadata_IsOpenshift() {}

type AdmissionControllerConfig struct {
	state            protoimpl.MessageState `protogen:"hybrid.v1"`
	Enabled          *bool                  `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	TimeoutSeconds   *int32                 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	ScanInline       *bool                  `protobuf:"varint,3,opt,name=scan_inline,json=scanInline" json:"scan_inline,omitempty"`
	DisableBypass    *bool                  `protobuf:"varint,4,opt,name=disable_bypass,json=disableBypass" json:"disable_bypass,omitempty"`
	EnforceOnUpdates *bool                  `protobuf:"varint,5,opt,name=enforce_on_updates,json=enforceOnUpdates" json:"enforce_on_updates,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AdmissionControllerConfig) Reset() {
	*x = AdmissionControllerConfig{}
	mi := &file_storage_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdmissionControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionControllerConfig) ProtoMessage() {}

func (x *AdmissionControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AdmissionControllerConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *AdmissionControllerConfig) GetTimeoutSeconds() int32 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

func (x *AdmissionControllerConfig) GetScanInline() bool {
	if x != nil && x.ScanInline != nil {
		return *x.ScanInline
	}
	return false
}

func (x *AdmissionControllerConfig) GetDisableBypass() bool {
	if x != nil && x.DisableBypass != nil {
		return *x.DisableBypass
	}
	return false
}

func (x *AdmissionControllerConfig) GetEnforceOnUpdates() bool {
	if x != nil && x.EnforceOnUpdates != nil {
		return *x.EnforceOnUpdates
	}
	return false
}

func (x *AdmissionControllerConfig) SetEnabled(v bool) {
	x.Enabled = &v
}

func (x *AdmissionControllerConfig) SetTimeoutSeconds(v int32) {
	x.TimeoutSeconds = &v
}

func (x *AdmissionControllerConfig) SetScanInline(v bool) {
	x.ScanInline = &v
}

func (x *AdmissionControllerConfig) SetDisableBypass(v bool) {
	x.DisableBypass = &v
}

func (x *AdmissionControllerConfig) SetEnforceOnUpdates(v bool) {
	x.EnforceOnUpdates = &v
}

func (x *AdmissionControllerConfig) HasEnabled() bool {
	if x == nil {
		return false
	}
	return x.Enabled != nil
}

func (x *AdmissionControllerConfig) HasTimeoutSeconds() bool {
	if x == nil {
		return false
	}
	return x.TimeoutSeconds != nil
}

func (x *AdmissionControllerConfig) HasScanInline() bool {
	if x == nil {
		return false
	}
	return x.ScanInline != nil
}

func (x *AdmissionControllerConfig) HasDisableBypass() bool {
	if x == nil {
		return false
	}
	return x.DisableBypass != nil
}

func (x *AdmissionControllerConfig) HasEnforceOnUpdates() bool {
	if x == nil {
		return false
	}
	return x.EnforceOnUpdates != nil
}

func (x *AdmissionControllerConfig) ClearEnabled() {
	x.Enabled = nil
}

func (x *AdmissionControllerConfig) ClearTimeoutSeconds() {
	x.TimeoutSeconds = nil
}

func (x *AdmissionControllerConfig) ClearScanInline() {
	x.ScanInline = nil
}

func (x *AdmissionControllerConfig) ClearDisableBypass() {
	x.DisableBypass = nil
}

func (x *AdmissionControllerConfig) ClearEnforceOnUpdates() {
	x.EnforceOnUpdates = nil
}

type AdmissionControllerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Enabled          *bool
	TimeoutSeconds   *int32
	ScanInline       *bool
	DisableBypass    *bool
	EnforceOnUpdates *bool
}

func (b0 AdmissionControllerConfig_builder) Build() *AdmissionControllerConfig {
	m0 := &AdmissionControllerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Enabled = b.Enabled
	x.TimeoutSeconds = b.TimeoutSeconds
	x.ScanInline = b.ScanInline
	x.DisableBypass = b.DisableBypass
	x.EnforceOnUpdates = b.EnforceOnUpdates
	return m0
}

type TolerationsConfig struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Disabled      *bool                  `protobuf:"varint,1,opt,name=disabled" json:"disabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TolerationsConfig) Reset() {
	*x = TolerationsConfig{}
	mi := &file_storage_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TolerationsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TolerationsConfig) ProtoMessage() {}

func (x *TolerationsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TolerationsConfig) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *TolerationsConfig) SetDisabled(v bool) {
	x.Disabled = &v
}

func (x *TolerationsConfig) HasDisabled() bool {
	if x == nil {
		return false
	}
	return x.Disabled != nil
}

func (x *TolerationsConfig) ClearDisabled() {
	x.Disabled = nil
}

type TolerationsConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Disabled *bool
}

func (b0 TolerationsConfig_builder) Build() *TolerationsConfig {
	m0 := &TolerationsConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Disabled = b.Disabled
	return m0
}

// The difference between Static and Dynamic cluster config is that Static values are not sent over the Central to Sensor gRPC connection. They are used, for example, to generate manifests that can be used to set up the Secured Cluster's k8s components. They are *not* dynamically reloaded.
type StaticClusterConfig struct {
	state                          protoimpl.MessageState `protogen:"hybrid.v1"`
	Type                           *ClusterType           `protobuf:"varint,1,opt,name=type,enum=storage.ClusterType" json:"type,omitempty"`
	MainImage                      *string                `protobuf:"bytes,2,opt,name=main_image,json=mainImage" json:"main_image,omitempty"`
	CentralApiEndpoint             *string                `protobuf:"bytes,3,opt,name=central_api_endpoint,json=centralApiEndpoint" json:"central_api_endpoint,omitempty"`
	CollectionMethod               *CollectionMethod      `protobuf:"varint,4,opt,name=collection_method,json=collectionMethod,enum=storage.CollectionMethod" json:"collection_method,omitempty"`
	CollectorImage                 *string                `protobuf:"bytes,5,opt,name=collector_image,json=collectorImage" json:"collector_image,omitempty"`
	AdmissionController            *bool                  `protobuf:"varint,6,opt,name=admission_controller,json=admissionController" json:"admission_controller,omitempty"`
	AdmissionControllerUpdates     *bool                  `protobuf:"varint,7,opt,name=admission_controller_updates,json=admissionControllerUpdates" json:"admission_controller_updates,omitempty"`
	TolerationsConfig              *TolerationsConfig     `protobuf:"bytes,8,opt,name=tolerations_config,json=tolerationsConfig" json:"tolerations_config,omitempty"`
	SlimCollector                  *bool                  `protobuf:"varint,9,opt,name=slim_collector,json=slimCollector" json:"slim_collector,omitempty"`
	AdmissionControllerEvents      *bool                  `protobuf:"varint,10,opt,name=admission_controller_events,json=admissionControllerEvents" json:"admission_controller_events,omitempty"`
	AdmissionControllerFailOnError *bool                  `protobuf:"varint,11,opt,name=admission_controller_fail_on_error,json=admissionControllerFailOnError" json:"admission_controller_fail_on_error,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *StaticClusterConfig) Reset() {
	*x = StaticClusterConfig{}
	mi := &file_storage_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticClusterConfig) ProtoMessage() {}

func (x *StaticClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StaticClusterConfig) GetType() ClusterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClusterType_GENERIC_CLUSTER
}

func (x *StaticClusterConfig) GetMainImage() string {
	if x != nil && x.MainImage != nil {
		return *x.MainImage
	}
	return ""
}

func (x *StaticClusterConfig) GetCentralApiEndpoint() string {
	if x != nil && x.CentralApiEndpoint != nil {
		return *x.CentralApiEndpoint
	}
	return ""
}

func (x *StaticClusterConfig) GetCollectionMethod() CollectionMethod {
	if x != nil && x.CollectionMethod != nil {
		return *x.CollectionMethod
	}
	return CollectionMethod_UNSET_COLLECTION
}

func (x *StaticClusterConfig) GetCollectorImage() string {
	if x != nil && x.CollectorImage != nil {
		return *x.CollectorImage
	}
	return ""
}

func (x *StaticClusterConfig) GetAdmissionController() bool {
	if x != nil && x.AdmissionController != nil {
		return *x.AdmissionController
	}
	return false
}

func (x *StaticClusterConfig) GetAdmissionControllerUpdates() bool {
	if x != nil && x.AdmissionControllerUpdates != nil {
		return *x.AdmissionControllerUpdates
	}
	return false
}

func (x *StaticClusterConfig) GetTolerationsConfig() *TolerationsConfig {
	if x != nil {
		return x.TolerationsConfig
	}
	return nil
}

func (x *StaticClusterConfig) GetSlimCollector() bool {
	if x != nil && x.SlimCollector != nil {
		return *x.SlimCollector
	}
	return false
}

func (x *StaticClusterConfig) GetAdmissionControllerEvents() bool {
	if x != nil && x.AdmissionControllerEvents != nil {
		return *x.AdmissionControllerEvents
	}
	return false
}

func (x *StaticClusterConfig) GetAdmissionControllerFailOnError() bool {
	if x != nil && x.AdmissionControllerFailOnError != nil {
		return *x.AdmissionControllerFailOnError
	}
	return false
}

func (x *StaticClusterConfig) SetType(v ClusterType) {
	x.Type = &v
}

func (x *StaticClusterConfig) SetMainImage(v string) {
	x.MainImage = &v
}

func (x *StaticClusterConfig) SetCentralApiEndpoint(v string) {
	x.CentralApiEndpoint = &v
}

func (x *StaticClusterConfig) SetCollectionMethod(v CollectionMethod) {
	x.CollectionMethod = &v
}

func (x *StaticClusterConfig) SetCollectorImage(v string) {
	x.CollectorImage = &v
}

func (x *StaticClusterConfig) SetAdmissionController(v bool) {
	x.AdmissionController = &v
}

func (x *StaticClusterConfig) SetAdmissionControllerUpdates(v bool) {
	x.AdmissionControllerUpdates = &v
}

func (x *StaticClusterConfig) SetTolerationsConfig(v *TolerationsConfig) {
	x.TolerationsConfig = v
}

func (x *StaticClusterConfig) SetSlimCollector(v bool) {
	x.SlimCollector = &v
}

func (x *StaticClusterConfig) SetAdmissionControllerEvents(v bool) {
	x.AdmissionControllerEvents = &v
}

func (x *StaticClusterConfig) SetAdmissionControllerFailOnError(v bool) {
	x.AdmissionControllerFailOnError = &v
}

func (x *StaticClusterConfig) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *StaticClusterConfig) HasMainImage() bool {
	if x == nil {
		return false
	}
	return x.MainImage != nil
}

func (x *StaticClusterConfig) HasCentralApiEndpoint() bool {
	if x == nil {
		return false
	}
	return x.CentralApiEndpoint != nil
}

func (x *StaticClusterConfig) HasCollectionMethod() bool {
	if x == nil {
		return false
	}
	return x.CollectionMethod != nil
}

func (x *StaticClusterConfig) HasCollectorImage() bool {
	if x == nil {
		return false
	}
	return x.CollectorImage != nil
}

func (x *StaticClusterConfig) HasAdmissionController() bool {
	if x == nil {
		return false
	}
	return x.AdmissionController != nil
}

func (x *StaticClusterConfig) HasAdmissionControllerUpdates() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerUpdates != nil
}

func (x *StaticClusterConfig) HasTolerationsConfig() bool {
	if x == nil {
		return false
	}
	return x.TolerationsConfig != nil
}

func (x *StaticClusterConfig) HasSlimCollector() bool {
	if x == nil {
		return false
	}
	return x.SlimCollector != nil
}

func (x *StaticClusterConfig) HasAdmissionControllerEvents() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerEvents != nil
}

func (x *StaticClusterConfig) HasAdmissionControllerFailOnError() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerFailOnError != nil
}

func (x *StaticClusterConfig) ClearType() {
	x.Type = nil
}

func (x *StaticClusterConfig) ClearMainImage() {
	x.MainImage = nil
}

func (x *StaticClusterConfig) ClearCentralApiEndpoint() {
	x.CentralApiEndpoint = nil
}

func (x *StaticClusterConfig) ClearCollectionMethod() {
	x.CollectionMethod = nil
}

func (x *StaticClusterConfig) ClearCollectorImage() {
	x.CollectorImage = nil
}

func (x *StaticClusterConfig) ClearAdmissionController() {
	x.AdmissionController = nil
}

func (x *StaticClusterConfig) ClearAdmissionControllerUpdates() {
	x.AdmissionControllerUpdates = nil
}

func (x *StaticClusterConfig) ClearTolerationsConfig() {
	x.TolerationsConfig = nil
}

func (x *StaticClusterConfig) ClearSlimCollector() {
	x.SlimCollector = nil
}

func (x *StaticClusterConfig) ClearAdmissionControllerEvents() {
	x.AdmissionControllerEvents = nil
}

func (x *StaticClusterConfig) ClearAdmissionControllerFailOnError() {
	x.AdmissionControllerFailOnError = nil
}

type StaticClusterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type                           *ClusterType
	MainImage                      *string
	CentralApiEndpoint             *string
	CollectionMethod               *CollectionMethod
	CollectorImage                 *string
	AdmissionController            *bool
	AdmissionControllerUpdates     *bool
	TolerationsConfig              *TolerationsConfig
	SlimCollector                  *bool
	AdmissionControllerEvents      *bool
	AdmissionControllerFailOnError *bool
}

func (b0 StaticClusterConfig_builder) Build() *StaticClusterConfig {
	m0 := &StaticClusterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.MainImage = b.MainImage
	x.CentralApiEndpoint = b.CentralApiEndpoint
	x.CollectionMethod = b.CollectionMethod
	x.CollectorImage = b.CollectorImage
	x.AdmissionController = b.AdmissionController
	x.AdmissionControllerUpdates = b.AdmissionControllerUpdates
	x.TolerationsConfig = b.TolerationsConfig
	x.SlimCollector = b.SlimCollector
	x.AdmissionControllerEvents = b.AdmissionControllerEvents
	x.AdmissionControllerFailOnError = b.AdmissionControllerFailOnError
	return m0
}

type AutoLockProcessBaselinesConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// More fields can be added later to control the feature at the
	// namespace level
	Enabled       *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoLockProcessBaselinesConfig) Reset() {
	*x = AutoLockProcessBaselinesConfig{}
	mi := &file_storage_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoLockProcessBaselinesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLockProcessBaselinesConfig) ProtoMessage() {}

func (x *AutoLockProcessBaselinesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AutoLockProcessBaselinesConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *AutoLockProcessBaselinesConfig) SetEnabled(v bool) {
	x.Enabled = &v
}

func (x *AutoLockProcessBaselinesConfig) HasEnabled() bool {
	if x == nil {
		return false
	}
	return x.Enabled != nil
}

func (x *AutoLockProcessBaselinesConfig) ClearEnabled() {
	x.Enabled = nil
}

type AutoLockProcessBaselinesConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// More fields can be added later to control the feature at the
	// namespace level
	Enabled *bool
}

func (b0 AutoLockProcessBaselinesConfig_builder) Build() *AutoLockProcessBaselinesConfig {
	m0 := &AutoLockProcessBaselinesConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Enabled = b.Enabled
	return m0
}

// The difference between Static and Dynamic cluster config is that Dynamic values are sent over the Central to Sensor gRPC connection. This has the benefit of allowing for "hot reloading" of values without restarting Secured cluster components.
type DynamicClusterConfig struct {
	state                          protoimpl.MessageState          `protogen:"hybrid.v1"`
	AdmissionControllerConfig      *AdmissionControllerConfig      `protobuf:"bytes,1,opt,name=admission_controller_config,json=admissionControllerConfig" json:"admission_controller_config,omitempty"`
	RegistryOverride               *string                         `protobuf:"bytes,2,opt,name=registry_override,json=registryOverride" json:"registry_override,omitempty"`
	DisableAuditLogs               *bool                           `protobuf:"varint,3,opt,name=disable_audit_logs,json=disableAuditLogs" json:"disable_audit_logs,omitempty"`
	AutoLockProcessBaselinesConfig *AutoLockProcessBaselinesConfig `protobuf:"bytes,4,opt,name=auto_lock_process_baselines_config,json=autoLockProcessBaselinesConfig" json:"auto_lock_process_baselines_config,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *DynamicClusterConfig) Reset() {
	*x = DynamicClusterConfig{}
	mi := &file_storage_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicClusterConfig) ProtoMessage() {}

func (x *DynamicClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DynamicClusterConfig) GetAdmissionControllerConfig() *AdmissionControllerConfig {
	if x != nil {
		return x.AdmissionControllerConfig
	}
	return nil
}

func (x *DynamicClusterConfig) GetRegistryOverride() string {
	if x != nil && x.RegistryOverride != nil {
		return *x.RegistryOverride
	}
	return ""
}

func (x *DynamicClusterConfig) GetDisableAuditLogs() bool {
	if x != nil && x.DisableAuditLogs != nil {
		return *x.DisableAuditLogs
	}
	return false
}

func (x *DynamicClusterConfig) GetAutoLockProcessBaselinesConfig() *AutoLockProcessBaselinesConfig {
	if x != nil {
		return x.AutoLockProcessBaselinesConfig
	}
	return nil
}

func (x *DynamicClusterConfig) SetAdmissionControllerConfig(v *AdmissionControllerConfig) {
	x.AdmissionControllerConfig = v
}

func (x *DynamicClusterConfig) SetRegistryOverride(v string) {
	x.RegistryOverride = &v
}

func (x *DynamicClusterConfig) SetDisableAuditLogs(v bool) {
	x.DisableAuditLogs = &v
}

func (x *DynamicClusterConfig) SetAutoLockProcessBaselinesConfig(v *AutoLockProcessBaselinesConfig) {
	x.AutoLockProcessBaselinesConfig = v
}

func (x *DynamicClusterConfig) HasAdmissionControllerConfig() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerConfig != nil
}

func (x *DynamicClusterConfig) HasRegistryOverride() bool {
	if x == nil {
		return false
	}
	return x.RegistryOverride != nil
}

func (x *DynamicClusterConfig) HasDisableAuditLogs() bool {
	if x == nil {
		return false
	}
	return x.DisableAuditLogs != nil
}

func (x *DynamicClusterConfig) HasAutoLockProcessBaselinesConfig() bool {
	if x == nil {
		return false
	}
	return x.AutoLockProcessBaselinesConfig != nil
}

func (x *DynamicClusterConfig) ClearAdmissionControllerConfig() {
	x.AdmissionControllerConfig = nil
}

func (x *DynamicClusterConfig) ClearRegistryOverride() {
	x.RegistryOverride = nil
}

func (x *DynamicClusterConfig) ClearDisableAuditLogs() {
	x.DisableAuditLogs = nil
}

func (x *DynamicClusterConfig) ClearAutoLockProcessBaselinesConfig() {
	x.AutoLockProcessBaselinesConfig = nil
}

type DynamicClusterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AdmissionControllerConfig      *AdmissionControllerConfig
	RegistryOverride               *string
	DisableAuditLogs               *bool
	AutoLockProcessBaselinesConfig *AutoLockProcessBaselinesConfig
}

func (b0 DynamicClusterConfig_builder) Build() *DynamicClusterConfig {
	m0 := &DynamicClusterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.AdmissionControllerConfig = b.AdmissionControllerConfig
	x.RegistryOverride = b.RegistryOverride
	x.DisableAuditLogs = b.DisableAuditLogs
	x.AutoLockProcessBaselinesConfig = b.AutoLockProcessBaselinesConfig
	return m0
}

// Encodes a complete cluster configuration minus ID/Name identifiers
// including static and dynamic settings.
type CompleteClusterConfig struct {
	state             protoimpl.MessageState `protogen:"hybrid.v1"`
	DynamicConfig     *DynamicClusterConfig  `protobuf:"bytes,1,opt,name=dynamic_config,json=dynamicConfig" json:"dynamic_config,omitempty"`
	StaticConfig      *StaticClusterConfig   `protobuf:"bytes,2,opt,name=static_config,json=staticConfig" json:"static_config,omitempty"`
	ConfigFingerprint *string                `protobuf:"bytes,3,opt,name=config_fingerprint,json=configFingerprint" json:"config_fingerprint,omitempty"`
	ClusterLabels     map[string]string      `protobuf:"bytes,4,rep,name=cluster_labels,json=clusterLabels" json:"cluster_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompleteClusterConfig) Reset() {
	*x = CompleteClusterConfig{}
	mi := &file_storage_cluster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteClusterConfig) ProtoMessage() {}

func (x *CompleteClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CompleteClusterConfig) GetDynamicConfig() *DynamicClusterConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *CompleteClusterConfig) GetStaticConfig() *StaticClusterConfig {
	if x != nil {
		return x.StaticConfig
	}
	return nil
}

func (x *CompleteClusterConfig) GetConfigFingerprint() string {
	if x != nil && x.ConfigFingerprint != nil {
		return *x.ConfigFingerprint
	}
	return ""
}

func (x *CompleteClusterConfig) GetClusterLabels() map[string]string {
	if x != nil {
		return x.ClusterLabels
	}
	return nil
}

func (x *CompleteClusterConfig) SetDynamicConfig(v *DynamicClusterConfig) {
	x.DynamicConfig = v
}

func (x *CompleteClusterConfig) SetStaticConfig(v *StaticClusterConfig) {
	x.StaticConfig = v
}

func (x *CompleteClusterConfig) SetConfigFingerprint(v string) {
	x.ConfigFingerprint = &v
}

func (x *CompleteClusterConfig) SetClusterLabels(v map[string]string) {
	x.ClusterLabels = v
}

func (x *CompleteClusterConfig) HasDynamicConfig() bool {
	if x == nil {
		return false
	}
	return x.DynamicConfig != nil
}

func (x *CompleteClusterConfig) HasStaticConfig() bool {
	if x == nil {
		return false
	}
	return x.StaticConfig != nil
}

func (x *CompleteClusterConfig) HasConfigFingerprint() bool {
	if x == nil {
		return false
	}
	return x.ConfigFingerprint != nil
}

func (x *CompleteClusterConfig) ClearDynamicConfig() {
	x.DynamicConfig = nil
}

func (x *CompleteClusterConfig) ClearStaticConfig() {
	x.StaticConfig = nil
}

func (x *CompleteClusterConfig) ClearConfigFingerprint() {
	x.ConfigFingerprint = nil
}

type CompleteClusterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	DynamicConfig     *DynamicClusterConfig
	StaticConfig      *StaticClusterConfig
	ConfigFingerprint *string
	ClusterLabels     map[string]string
}

func (b0 CompleteClusterConfig_builder) Build() *CompleteClusterConfig {
	m0 := &CompleteClusterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.DynamicConfig = b.DynamicConfig
	x.StaticConfig = b.StaticConfig
	x.ConfigFingerprint = b.ConfigFingerprint
	x.ClusterLabels = b.ClusterLabels
	return m0
}

// StackRoxDeploymentIdentification aims at uniquely identifying a StackRox Sensor deployment. It is used to determine
// whether a sensor connection comes from a sensor pod that has restarted or was recreated (possibly after a network
// partition), or from a deployment in a different namespace or cluster.
type SensorDeploymentIdentification struct {
	state               protoimpl.MessageState `protogen:"hybrid.v1"`
	SystemNamespaceId   *string                `protobuf:"bytes,1,opt,name=system_namespace_id,json=systemNamespaceId" json:"system_namespace_id,omitempty"`
	DefaultNamespaceId  *string                `protobuf:"bytes,2,opt,name=default_namespace_id,json=defaultNamespaceId" json:"default_namespace_id,omitempty"`
	AppNamespace        *string                `protobuf:"bytes,3,opt,name=app_namespace,json=appNamespace" json:"app_namespace,omitempty"`
	AppNamespaceId      *string                `protobuf:"bytes,4,opt,name=app_namespace_id,json=appNamespaceId" json:"app_namespace_id,omitempty"`
	AppServiceaccountId *string                `protobuf:"bytes,5,opt,name=app_serviceaccount_id,json=appServiceaccountId" json:"app_serviceaccount_id,omitempty"`
	K8SNodeName         *string                `protobuf:"bytes,6,opt,name=k8s_node_name,json=k8sNodeName" json:"k8s_node_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SensorDeploymentIdentification) Reset() {
	*x = SensorDeploymentIdentification{}
	mi := &file_storage_cluster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDeploymentIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDeploymentIdentification) ProtoMessage() {}

func (x *SensorDeploymentIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SensorDeploymentIdentification) GetSystemNamespaceId() string {
	if x != nil && x.SystemNamespaceId != nil {
		return *x.SystemNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetDefaultNamespaceId() string {
	if x != nil && x.DefaultNamespaceId != nil {
		return *x.DefaultNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppNamespace() string {
	if x != nil && x.AppNamespace != nil {
		return *x.AppNamespace
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppNamespaceId() string {
	if x != nil && x.AppNamespaceId != nil {
		return *x.AppNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppServiceaccountId() string {
	if x != nil && x.AppServiceaccountId != nil {
		return *x.AppServiceaccountId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetK8SNodeName() string {
	if x != nil && x.K8SNodeName != nil {
		return *x.K8SNodeName
	}
	return ""
}

func (x *SensorDeploymentIdentification) SetSystemNamespaceId(v string) {
	x.SystemNamespaceId = &v
}

func (x *SensorDeploymentIdentification) SetDefaultNamespaceId(v string) {
	x.DefaultNamespaceId = &v
}

func (x *SensorDeploymentIdentification) SetAppNamespace(v string) {
	x.AppNamespace = &v
}

func (x *SensorDeploymentIdentification) SetAppNamespaceId(v string) {
	x.AppNamespaceId = &v
}

func (x *SensorDeploymentIdentification) SetAppServiceaccountId(v string) {
	x.AppServiceaccountId = &v
}

func (x *SensorDeploymentIdentification) SetK8SNodeName(v string) {
	x.K8SNodeName = &v
}

func (x *SensorDeploymentIdentification) HasSystemNamespaceId() bool {
	if x == nil {
		return false
	}
	return x.SystemNamespaceId != nil
}

func (x *SensorDeploymentIdentification) HasDefaultNamespaceId() bool {
	if x == nil {
		return false
	}
	return x.DefaultNamespaceId != nil
}

func (x *SensorDeploymentIdentification) HasAppNamespace() bool {
	if x == nil {
		return false
	}
	return x.AppNamespace != nil
}

func (x *SensorDeploymentIdentification) HasAppNamespaceId() bool {
	if x == nil {
		return false
	}
	return x.AppNamespaceId != nil
}

func (x *SensorDeploymentIdentification) HasAppServiceaccountId() bool {
	if x == nil {
		return false
	}
	return x.AppServiceaccountId != nil
}

func (x *SensorDeploymentIdentification) HasK8SNodeName() bool {
	if x == nil {
		return false
	}
	return x.K8SNodeName != nil
}

func (x *SensorDeploymentIdentification) ClearSystemNamespaceId() {
	x.SystemNamespaceId = nil
}

func (x *SensorDeploymentIdentification) ClearDefaultNamespaceId() {
	x.DefaultNamespaceId = nil
}

func (x *SensorDeploymentIdentification) ClearAppNamespace() {
	x.AppNamespace = nil
}

func (x *SensorDeploymentIdentification) ClearAppNamespaceId() {
	x.AppNamespaceId = nil
}

func (x *SensorDeploymentIdentification) ClearAppServiceaccountId() {
	x.AppServiceaccountId = nil
}

func (x *SensorDeploymentIdentification) ClearK8SNodeName() {
	x.K8SNodeName = nil
}

type SensorDeploymentIdentification_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SystemNamespaceId   *string
	DefaultNamespaceId  *string
	AppNamespace        *string
	AppNamespaceId      *string
	AppServiceaccountId *string
	K8SNodeName         *string
}

func (b0 SensorDeploymentIdentification_builder) Build() *SensorDeploymentIdentification {
	m0 := &SensorDeploymentIdentification{}
	b, x := &b0, m0
	_, _ = b, x
	x.SystemNamespaceId = b.SystemNamespaceId
	x.DefaultNamespaceId = b.DefaultNamespaceId
	x.AppNamespace = b.AppNamespace
	x.AppNamespaceId = b.AppNamespaceId
	x.AppServiceaccountId = b.AppServiceaccountId
	x.K8SNodeName = b.K8SNodeName
	return m0
}

// Next tag: 33
type Cluster struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	Id                 *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" search:"Cluster ID,hidden,store" sql:"pk,type(uuid)"`                                                                                    // @gotags: search:"Cluster ID,hidden,store" sql:"pk,type(uuid)"
	Name               *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" search:"Cluster,store" sql:"unique"`                                                                                // @gotags: search:"Cluster,store" sql:"unique"
	Type               *ClusterType           `protobuf:"varint,3,opt,name=type,enum=storage.ClusterType" json:"type,omitempty" search:"Cluster Platform Type"`                                                      // @gotags: search:"Cluster Platform Type"
	Labels             map[string]string      `protobuf:"bytes,27,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Cluster Label"` // @gotags: search:"Cluster Label"
	MainImage          *string                `protobuf:"bytes,4,opt,name=main_image,json=mainImage" json:"main_image,omitempty"`
	CollectorImage     *string                `protobuf:"bytes,16,opt,name=collector_image,json=collectorImage" json:"collector_image,omitempty"`
	CentralApiEndpoint *string                `protobuf:"bytes,5,opt,name=central_api_endpoint,json=centralApiEndpoint" json:"central_api_endpoint,omitempty"`
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	RuntimeSupport             *bool                 `protobuf:"varint,7,opt,name=runtime_support,json=runtimeSupport" json:"runtime_support,omitempty"`
	CollectionMethod           *CollectionMethod     `protobuf:"varint,17,opt,name=collection_method,json=collectionMethod,enum=storage.CollectionMethod" json:"collection_method,omitempty"`
	AdmissionController        *bool                 `protobuf:"varint,13,opt,name=admission_controller,json=admissionController" json:"admission_controller,omitempty"`
	AdmissionControllerUpdates *bool                 `protobuf:"varint,21,opt,name=admission_controller_updates,json=admissionControllerUpdates" json:"admission_controller_updates,omitempty"`
	AdmissionControllerEvents  *bool                 `protobuf:"varint,25,opt,name=admission_controller_events,json=admissionControllerEvents" json:"admission_controller_events,omitempty"`
	Status                     *ClusterStatus        `protobuf:"bytes,15,opt,name=status" json:"status,omitempty"`
	DynamicConfig              *DynamicClusterConfig `protobuf:"bytes,18,opt,name=dynamic_config,json=dynamicConfig" json:"dynamic_config,omitempty"`
	TolerationsConfig          *TolerationsConfig    `protobuf:"bytes,19,opt,name=tolerations_config,json=tolerationsConfig" json:"tolerations_config,omitempty"`
	Priority                   *int64                `protobuf:"varint,20,opt,name=priority" json:"priority,omitempty"`
	HealthStatus               *ClusterHealthStatus  `protobuf:"bytes,22,opt,name=health_status,json=healthStatus" json:"health_status,omitempty" sql:"-"` // @gotags: sql:"-"
	SlimCollector              *bool                 `protobuf:"varint,23,opt,name=slim_collector,json=slimCollector" json:"slim_collector,omitempty"`
	// The Helm configuration of a cluster is only present in case the cluster is Helm- or Operator-managed.
	HelmConfig *CompleteClusterConfig `protobuf:"bytes,24,opt,name=helm_config,json=helmConfig" json:"helm_config,omitempty"`
	// most_recent_sensor_id is the current or most recent identification of a successfully connected sensor (if any).
	MostRecentSensorId *SensorDeploymentIdentification `protobuf:"bytes,26,opt,name=most_recent_sensor_id,json=mostRecentSensorId" json:"most_recent_sensor_id,omitempty"`
	// For internal use only.
	AuditLogState                  map[string]*AuditLogFileState `protobuf:"bytes,28,rep,name=audit_log_state,json=auditLogState" json:"audit_log_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InitBundleId                   *string                       `protobuf:"bytes,29,opt,name=init_bundle_id,json=initBundleId" json:"init_bundle_id,omitempty"`
	ManagedBy                      *ManagerType                  `protobuf:"varint,30,opt,name=managed_by,json=managedBy,enum=storage.ManagerType" json:"managed_by,omitempty"`
	SensorCapabilities             []string                      `protobuf:"bytes,31,rep,name=sensor_capabilities,json=sensorCapabilities" json:"sensor_capabilities,omitempty"`
	AdmissionControllerFailOnError *bool                         `protobuf:"varint,32,opt,name=admission_controller_fail_on_error,json=admissionControllerFailOnError" json:"admission_controller_fail_on_error,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_storage_cluster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Cluster) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Cluster) GetType() ClusterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClusterType_GENERIC_CLUSTER
}

func (x *Cluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Cluster) GetMainImage() string {
	if x != nil && x.MainImage != nil {
		return *x.MainImage
	}
	return ""
}

func (x *Cluster) GetCollectorImage() string {
	if x != nil && x.CollectorImage != nil {
		return *x.CollectorImage
	}
	return ""
}

func (x *Cluster) GetCentralApiEndpoint() string {
	if x != nil && x.CentralApiEndpoint != nil {
		return *x.CentralApiEndpoint
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *Cluster) GetRuntimeSupport() bool {
	if x != nil && x.RuntimeSupport != nil {
		return *x.RuntimeSupport
	}
	return false
}

func (x *Cluster) GetCollectionMethod() CollectionMethod {
	if x != nil && x.CollectionMethod != nil {
		return *x.CollectionMethod
	}
	return CollectionMethod_UNSET_COLLECTION
}

func (x *Cluster) GetAdmissionController() bool {
	if x != nil && x.AdmissionController != nil {
		return *x.AdmissionController
	}
	return false
}

func (x *Cluster) GetAdmissionControllerUpdates() bool {
	if x != nil && x.AdmissionControllerUpdates != nil {
		return *x.AdmissionControllerUpdates
	}
	return false
}

func (x *Cluster) GetAdmissionControllerEvents() bool {
	if x != nil && x.AdmissionControllerEvents != nil {
		return *x.AdmissionControllerEvents
	}
	return false
}

func (x *Cluster) GetStatus() *ClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Cluster) GetDynamicConfig() *DynamicClusterConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *Cluster) GetTolerationsConfig() *TolerationsConfig {
	if x != nil {
		return x.TolerationsConfig
	}
	return nil
}

func (x *Cluster) GetPriority() int64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Cluster) GetHealthStatus() *ClusterHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Cluster) GetSlimCollector() bool {
	if x != nil && x.SlimCollector != nil {
		return *x.SlimCollector
	}
	return false
}

func (x *Cluster) GetHelmConfig() *CompleteClusterConfig {
	if x != nil {
		return x.HelmConfig
	}
	return nil
}

func (x *Cluster) GetMostRecentSensorId() *SensorDeploymentIdentification {
	if x != nil {
		return x.MostRecentSensorId
	}
	return nil
}

func (x *Cluster) GetAuditLogState() map[string]*AuditLogFileState {
	if x != nil {
		return x.AuditLogState
	}
	return nil
}

func (x *Cluster) GetInitBundleId() string {
	if x != nil && x.InitBundleId != nil {
		return *x.InitBundleId
	}
	return ""
}

func (x *Cluster) GetManagedBy() ManagerType {
	if x != nil && x.ManagedBy != nil {
		return *x.ManagedBy
	}
	return ManagerType_MANAGER_TYPE_UNKNOWN
}

func (x *Cluster) GetSensorCapabilities() []string {
	if x != nil {
		return x.SensorCapabilities
	}
	return nil
}

func (x *Cluster) GetAdmissionControllerFailOnError() bool {
	if x != nil && x.AdmissionControllerFailOnError != nil {
		return *x.AdmissionControllerFailOnError
	}
	return false
}

func (x *Cluster) SetId(v string) {
	x.Id = &v
}

func (x *Cluster) SetName(v string) {
	x.Name = &v
}

func (x *Cluster) SetType(v ClusterType) {
	x.Type = &v
}

func (x *Cluster) SetLabels(v map[string]string) {
	x.Labels = v
}

func (x *Cluster) SetMainImage(v string) {
	x.MainImage = &v
}

func (x *Cluster) SetCollectorImage(v string) {
	x.CollectorImage = &v
}

func (x *Cluster) SetCentralApiEndpoint(v string) {
	x.CentralApiEndpoint = &v
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *Cluster) SetRuntimeSupport(v bool) {
	x.RuntimeSupport = &v
}

func (x *Cluster) SetCollectionMethod(v CollectionMethod) {
	x.CollectionMethod = &v
}

func (x *Cluster) SetAdmissionController(v bool) {
	x.AdmissionController = &v
}

func (x *Cluster) SetAdmissionControllerUpdates(v bool) {
	x.AdmissionControllerUpdates = &v
}

func (x *Cluster) SetAdmissionControllerEvents(v bool) {
	x.AdmissionControllerEvents = &v
}

func (x *Cluster) SetStatus(v *ClusterStatus) {
	x.Status = v
}

func (x *Cluster) SetDynamicConfig(v *DynamicClusterConfig) {
	x.DynamicConfig = v
}

func (x *Cluster) SetTolerationsConfig(v *TolerationsConfig) {
	x.TolerationsConfig = v
}

func (x *Cluster) SetPriority(v int64) {
	x.Priority = &v
}

func (x *Cluster) SetHealthStatus(v *ClusterHealthStatus) {
	x.HealthStatus = v
}

func (x *Cluster) SetSlimCollector(v bool) {
	x.SlimCollector = &v
}

func (x *Cluster) SetHelmConfig(v *CompleteClusterConfig) {
	x.HelmConfig = v
}

func (x *Cluster) SetMostRecentSensorId(v *SensorDeploymentIdentification) {
	x.MostRecentSensorId = v
}

func (x *Cluster) SetAuditLogState(v map[string]*AuditLogFileState) {
	x.AuditLogState = v
}

func (x *Cluster) SetInitBundleId(v string) {
	x.InitBundleId = &v
}

func (x *Cluster) SetManagedBy(v ManagerType) {
	x.ManagedBy = &v
}

func (x *Cluster) SetSensorCapabilities(v []string) {
	x.SensorCapabilities = v
}

func (x *Cluster) SetAdmissionControllerFailOnError(v bool) {
	x.AdmissionControllerFailOnError = &v
}

func (x *Cluster) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *Cluster) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *Cluster) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *Cluster) HasMainImage() bool {
	if x == nil {
		return false
	}
	return x.MainImage != nil
}

func (x *Cluster) HasCollectorImage() bool {
	if x == nil {
		return false
	}
	return x.CollectorImage != nil
}

func (x *Cluster) HasCentralApiEndpoint() bool {
	if x == nil {
		return false
	}
	return x.CentralApiEndpoint != nil
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *Cluster) HasRuntimeSupport() bool {
	if x == nil {
		return false
	}
	return x.RuntimeSupport != nil
}

func (x *Cluster) HasCollectionMethod() bool {
	if x == nil {
		return false
	}
	return x.CollectionMethod != nil
}

func (x *Cluster) HasAdmissionController() bool {
	if x == nil {
		return false
	}
	return x.AdmissionController != nil
}

func (x *Cluster) HasAdmissionControllerUpdates() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerUpdates != nil
}

func (x *Cluster) HasAdmissionControllerEvents() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerEvents != nil
}

func (x *Cluster) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *Cluster) HasDynamicConfig() bool {
	if x == nil {
		return false
	}
	return x.DynamicConfig != nil
}

func (x *Cluster) HasTolerationsConfig() bool {
	if x == nil {
		return false
	}
	return x.TolerationsConfig != nil
}

func (x *Cluster) HasPriority() bool {
	if x == nil {
		return false
	}
	return x.Priority != nil
}

func (x *Cluster) HasHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.HealthStatus != nil
}

func (x *Cluster) HasSlimCollector() bool {
	if x == nil {
		return false
	}
	return x.SlimCollector != nil
}

func (x *Cluster) HasHelmConfig() bool {
	if x == nil {
		return false
	}
	return x.HelmConfig != nil
}

func (x *Cluster) HasMostRecentSensorId() bool {
	if x == nil {
		return false
	}
	return x.MostRecentSensorId != nil
}

func (x *Cluster) HasInitBundleId() bool {
	if x == nil {
		return false
	}
	return x.InitBundleId != nil
}

func (x *Cluster) HasManagedBy() bool {
	if x == nil {
		return false
	}
	return x.ManagedBy != nil
}

func (x *Cluster) HasAdmissionControllerFailOnError() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControllerFailOnError != nil
}

func (x *Cluster) ClearId() {
	x.Id = nil
}

func (x *Cluster) ClearName() {
	x.Name = nil
}

func (x *Cluster) ClearType() {
	x.Type = nil
}

func (x *Cluster) ClearMainImage() {
	x.MainImage = nil
}

func (x *Cluster) ClearCollectorImage() {
	x.CollectorImage = nil
}

func (x *Cluster) ClearCentralApiEndpoint() {
	x.CentralApiEndpoint = nil
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *Cluster) ClearRuntimeSupport() {
	x.RuntimeSupport = nil
}

func (x *Cluster) ClearCollectionMethod() {
	x.CollectionMethod = nil
}

func (x *Cluster) ClearAdmissionController() {
	x.AdmissionController = nil
}

func (x *Cluster) ClearAdmissionControllerUpdates() {
	x.AdmissionControllerUpdates = nil
}

func (x *Cluster) ClearAdmissionControllerEvents() {
	x.AdmissionControllerEvents = nil
}

func (x *Cluster) ClearStatus() {
	x.Status = nil
}

func (x *Cluster) ClearDynamicConfig() {
	x.DynamicConfig = nil
}

func (x *Cluster) ClearTolerationsConfig() {
	x.TolerationsConfig = nil
}

func (x *Cluster) ClearPriority() {
	x.Priority = nil
}

func (x *Cluster) ClearHealthStatus() {
	x.HealthStatus = nil
}

func (x *Cluster) ClearSlimCollector() {
	x.SlimCollector = nil
}

func (x *Cluster) ClearHelmConfig() {
	x.HelmConfig = nil
}

func (x *Cluster) ClearMostRecentSensorId() {
	x.MostRecentSensorId = nil
}

func (x *Cluster) ClearInitBundleId() {
	x.InitBundleId = nil
}

func (x *Cluster) ClearManagedBy() {
	x.ManagedBy = nil
}

func (x *Cluster) ClearAdmissionControllerFailOnError() {
	x.AdmissionControllerFailOnError = nil
}

type Cluster_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                 *string
	Name               *string
	Type               *ClusterType
	Labels             map[string]string
	MainImage          *string
	CollectorImage     *string
	CentralApiEndpoint *string
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	RuntimeSupport             *bool
	CollectionMethod           *CollectionMethod
	AdmissionController        *bool
	AdmissionControllerUpdates *bool
	AdmissionControllerEvents  *bool
	Status                     *ClusterStatus
	DynamicConfig              *DynamicClusterConfig
	TolerationsConfig          *TolerationsConfig
	Priority                   *int64
	HealthStatus               *ClusterHealthStatus
	SlimCollector              *bool
	// The Helm configuration of a cluster is only present in case the cluster is Helm- or Operator-managed.
	HelmConfig *CompleteClusterConfig
	// most_recent_sensor_id is the current or most recent identification of a successfully connected sensor (if any).
	MostRecentSensorId *SensorDeploymentIdentification
	// For internal use only.
	AuditLogState                  map[string]*AuditLogFileState
	InitBundleId                   *string
	ManagedBy                      *ManagerType
	SensorCapabilities             []string
	AdmissionControllerFailOnError *bool
}

func (b0 Cluster_builder) Build() *Cluster {
	m0 := &Cluster{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Type = b.Type
	x.Labels = b.Labels
	x.MainImage = b.MainImage
	x.CollectorImage = b.CollectorImage
	x.CentralApiEndpoint = b.CentralApiEndpoint
	x.RuntimeSupport = b.RuntimeSupport
	x.CollectionMethod = b.CollectionMethod
	x.AdmissionController = b.AdmissionController
	x.AdmissionControllerUpdates = b.AdmissionControllerUpdates
	x.AdmissionControllerEvents = b.AdmissionControllerEvents
	x.Status = b.Status
	x.DynamicConfig = b.DynamicConfig
	x.TolerationsConfig = b.TolerationsConfig
	x.Priority = b.Priority
	x.HealthStatus = b.HealthStatus
	x.SlimCollector = b.SlimCollector
	x.HelmConfig = b.HelmConfig
	x.MostRecentSensorId = b.MostRecentSensorId
	x.AuditLogState = b.AuditLogState
	x.InitBundleId = b.InitBundleId
	x.ManagedBy = b.ManagedBy
	x.SensorCapabilities = b.SensorCapabilities
	x.AdmissionControllerFailOnError = b.AdmissionControllerFailOnError
	return m0
}

type ClusterCertExpiryStatus struct {
	state               protoimpl.MessageState `protogen:"hybrid.v1"`
	SensorCertExpiry    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sensor_cert_expiry,json=sensorCertExpiry" json:"sensor_cert_expiry,omitempty"`
	SensorCertNotBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sensor_cert_not_before,json=sensorCertNotBefore" json:"sensor_cert_not_before,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ClusterCertExpiryStatus) Reset() {
	*x = ClusterCertExpiryStatus{}
	mi := &file_storage_cluster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterCertExpiryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCertExpiryStatus) ProtoMessage() {}

func (x *ClusterCertExpiryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterCertExpiryStatus) GetSensorCertExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SensorCertExpiry
	}
	return nil
}

func (x *ClusterCertExpiryStatus) GetSensorCertNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.SensorCertNotBefore
	}
	return nil
}

func (x *ClusterCertExpiryStatus) SetSensorCertExpiry(v *timestamppb.Timestamp) {
	x.SensorCertExpiry = v
}

func (x *ClusterCertExpiryStatus) SetSensorCertNotBefore(v *timestamppb.Timestamp) {
	x.SensorCertNotBefore = v
}

func (x *ClusterCertExpiryStatus) HasSensorCertExpiry() bool {
	if x == nil {
		return false
	}
	return x.SensorCertExpiry != nil
}

func (x *ClusterCertExpiryStatus) HasSensorCertNotBefore() bool {
	if x == nil {
		return false
	}
	return x.SensorCertNotBefore != nil
}

func (x *ClusterCertExpiryStatus) ClearSensorCertExpiry() {
	x.SensorCertExpiry = nil
}

func (x *ClusterCertExpiryStatus) ClearSensorCertNotBefore() {
	x.SensorCertNotBefore = nil
}

type ClusterCertExpiryStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SensorCertExpiry    *timestamppb.Timestamp
	SensorCertNotBefore *timestamppb.Timestamp
}

func (b0 ClusterCertExpiryStatus_builder) Build() *ClusterCertExpiryStatus {
	m0 := &ClusterCertExpiryStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.SensorCertExpiry = b.SensorCertExpiry
	x.SensorCertNotBefore = b.SensorCertNotBefore
	return m0
}

type ClusterStatus struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	SensorVersion *string                `protobuf:"bytes,1,opt,name=sensor_version,json=sensorVersion" json:"sensor_version,omitempty"`
	// This field has been deprecated starting release 49.0. Use healthStatus.lastContact instead.
	DEPRECATEDLastContact *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=DEPRECATED_last_contact,json=DEPRECATEDLastContact" json:"DEPRECATED_last_contact,omitempty"`
	ProviderMetadata      *ProviderMetadata        `protobuf:"bytes,3,opt,name=provider_metadata,json=providerMetadata" json:"provider_metadata,omitempty"`
	OrchestratorMetadata  *OrchestratorMetadata    `protobuf:"bytes,4,opt,name=orchestrator_metadata,json=orchestratorMetadata" json:"orchestrator_metadata,omitempty"`
	UpgradeStatus         *ClusterUpgradeStatus    `protobuf:"bytes,5,opt,name=upgrade_status,json=upgradeStatus" json:"upgrade_status,omitempty"`
	CertExpiryStatus      *ClusterCertExpiryStatus `protobuf:"bytes,6,opt,name=cert_expiry_status,json=certExpiryStatus" json:"cert_expiry_status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	mi := &file_storage_cluster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterStatus) GetSensorVersion() string {
	if x != nil && x.SensorVersion != nil {
		return *x.SensorVersion
	}
	return ""
}

func (x *ClusterStatus) GetDEPRECATEDLastContact() *timestamppb.Timestamp {
	if x != nil {
		return x.DEPRECATEDLastContact
	}
	return nil
}

func (x *ClusterStatus) GetProviderMetadata() *ProviderMetadata {
	if x != nil {
		return x.ProviderMetadata
	}
	return nil
}

func (x *ClusterStatus) GetOrchestratorMetadata() *OrchestratorMetadata {
	if x != nil {
		return x.OrchestratorMetadata
	}
	return nil
}

func (x *ClusterStatus) GetUpgradeStatus() *ClusterUpgradeStatus {
	if x != nil {
		return x.UpgradeStatus
	}
	return nil
}

func (x *ClusterStatus) GetCertExpiryStatus() *ClusterCertExpiryStatus {
	if x != nil {
		return x.CertExpiryStatus
	}
	return nil
}

func (x *ClusterStatus) SetSensorVersion(v string) {
	x.SensorVersion = &v
}

func (x *ClusterStatus) SetDEPRECATEDLastContact(v *timestamppb.Timestamp) {
	x.DEPRECATEDLastContact = v
}

func (x *ClusterStatus) SetProviderMetadata(v *ProviderMetadata) {
	x.ProviderMetadata = v
}

func (x *ClusterStatus) SetOrchestratorMetadata(v *OrchestratorMetadata) {
	x.OrchestratorMetadata = v
}

func (x *ClusterStatus) SetUpgradeStatus(v *ClusterUpgradeStatus) {
	x.UpgradeStatus = v
}

func (x *ClusterStatus) SetCertExpiryStatus(v *ClusterCertExpiryStatus) {
	x.CertExpiryStatus = v
}

func (x *ClusterStatus) HasSensorVersion() bool {
	if x == nil {
		return false
	}
	return x.SensorVersion != nil
}

func (x *ClusterStatus) HasDEPRECATEDLastContact() bool {
	if x == nil {
		return false
	}
	return x.DEPRECATEDLastContact != nil
}

func (x *ClusterStatus) HasProviderMetadata() bool {
	if x == nil {
		return false
	}
	return x.ProviderMetadata != nil
}

func (x *ClusterStatus) HasOrchestratorMetadata() bool {
	if x == nil {
		return false
	}
	return x.OrchestratorMetadata != nil
}

func (x *ClusterStatus) HasUpgradeStatus() bool {
	if x == nil {
		return false
	}
	return x.UpgradeStatus != nil
}

func (x *ClusterStatus) HasCertExpiryStatus() bool {
	if x == nil {
		return false
	}
	return x.CertExpiryStatus != nil
}

func (x *ClusterStatus) ClearSensorVersion() {
	x.SensorVersion = nil
}

func (x *ClusterStatus) ClearDEPRECATEDLastContact() {
	x.DEPRECATEDLastContact = nil
}

func (x *ClusterStatus) ClearProviderMetadata() {
	x.ProviderMetadata = nil
}

func (x *ClusterStatus) ClearOrchestratorMetadata() {
	x.OrchestratorMetadata = nil
}

func (x *ClusterStatus) ClearUpgradeStatus() {
	x.UpgradeStatus = nil
}

func (x *ClusterStatus) ClearCertExpiryStatus() {
	x.CertExpiryStatus = nil
}

type ClusterStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SensorVersion *string
	// This field has been deprecated starting release 49.0. Use healthStatus.lastContact instead.
	DEPRECATEDLastContact *timestamppb.Timestamp
	ProviderMetadata      *ProviderMetadata
	OrchestratorMetadata  *OrchestratorMetadata
	UpgradeStatus         *ClusterUpgradeStatus
	CertExpiryStatus      *ClusterCertExpiryStatus
}

func (b0 ClusterStatus_builder) Build() *ClusterStatus {
	m0 := &ClusterStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.SensorVersion = b.SensorVersion
	x.DEPRECATEDLastContact = b.DEPRECATEDLastContact
	x.ProviderMetadata = b.ProviderMetadata
	x.OrchestratorMetadata = b.OrchestratorMetadata
	x.UpgradeStatus = b.UpgradeStatus
	x.CertExpiryStatus = b.CertExpiryStatus
	return m0
}

type ClusterUpgradeStatus struct {
	state                     protoimpl.MessageState              `protogen:"hybrid.v1"`
	Upgradability             *ClusterUpgradeStatus_Upgradability `protobuf:"varint,1,opt,name=upgradability,enum=storage.ClusterUpgradeStatus_Upgradability" json:"upgradability,omitempty"`
	UpgradabilityStatusReason *string                             `protobuf:"bytes,2,opt,name=upgradability_status_reason,json=upgradabilityStatusReason" json:"upgradability_status_reason,omitempty"`
	// The progress of the current or most recent upgrade, if any,
	// Note that we don't store any historical data -- the moment
	// a new upgrade attempt is triggered, we overwrite
	// information from the previous attempt.
	MostRecentProcess *ClusterUpgradeStatus_UpgradeProcessStatus `protobuf:"bytes,3,opt,name=most_recent_process,json=mostRecentProcess" json:"most_recent_process,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusterUpgradeStatus) Reset() {
	*x = ClusterUpgradeStatus{}
	mi := &file_storage_cluster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterUpgradeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpgradeStatus) ProtoMessage() {}

func (x *ClusterUpgradeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterUpgradeStatus) GetUpgradability() ClusterUpgradeStatus_Upgradability {
	if x != nil && x.Upgradability != nil {
		return *x.Upgradability
	}
	return ClusterUpgradeStatus_UNSET
}

func (x *ClusterUpgradeStatus) GetUpgradabilityStatusReason() string {
	if x != nil && x.UpgradabilityStatusReason != nil {
		return *x.UpgradabilityStatusReason
	}
	return ""
}

func (x *ClusterUpgradeStatus) GetMostRecentProcess() *ClusterUpgradeStatus_UpgradeProcessStatus {
	if x != nil {
		return x.MostRecentProcess
	}
	return nil
}

func (x *ClusterUpgradeStatus) SetUpgradability(v ClusterUpgradeStatus_Upgradability) {
	x.Upgradability = &v
}

func (x *ClusterUpgradeStatus) SetUpgradabilityStatusReason(v string) {
	x.UpgradabilityStatusReason = &v
}

func (x *ClusterUpgradeStatus) SetMostRecentProcess(v *ClusterUpgradeStatus_UpgradeProcessStatus) {
	x.MostRecentProcess = v
}

func (x *ClusterUpgradeStatus) HasUpgradability() bool {
	if x == nil {
		return false
	}
	return x.Upgradability != nil
}

func (x *ClusterUpgradeStatus) HasUpgradabilityStatusReason() bool {
	if x == nil {
		return false
	}
	return x.UpgradabilityStatusReason != nil
}

func (x *ClusterUpgradeStatus) HasMostRecentProcess() bool {
	if x == nil {
		return false
	}
	return x.MostRecentProcess != nil
}

func (x *ClusterUpgradeStatus) ClearUpgradability() {
	x.Upgradability = nil
}

func (x *ClusterUpgradeStatus) ClearUpgradabilityStatusReason() {
	x.UpgradabilityStatusReason = nil
}

func (x *ClusterUpgradeStatus) ClearMostRecentProcess() {
	x.MostRecentProcess = nil
}

type ClusterUpgradeStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Upgradability             *ClusterUpgradeStatus_Upgradability
	UpgradabilityStatusReason *string
	// The progress of the current or most recent upgrade, if any,
	// Note that we don't store any historical data -- the moment
	// a new upgrade attempt is triggered, we overwrite
	// information from the previous attempt.
	MostRecentProcess *ClusterUpgradeStatus_UpgradeProcessStatus
}

func (b0 ClusterUpgradeStatus_builder) Build() *ClusterUpgradeStatus {
	m0 := &ClusterUpgradeStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.Upgradability = b.Upgradability
	x.UpgradabilityStatusReason = b.UpgradabilityStatusReason
	x.MostRecentProcess = b.MostRecentProcess
	return m0
}

type UpgradeProgress struct {
	state               protoimpl.MessageState        `protogen:"hybrid.v1"`
	UpgradeState        *UpgradeProgress_UpgradeState `protobuf:"varint,1,opt,name=upgrade_state,json=upgradeState,enum=storage.UpgradeProgress_UpgradeState" json:"upgrade_state,omitempty"`
	UpgradeStatusDetail *string                       `protobuf:"bytes,2,opt,name=upgrade_status_detail,json=upgradeStatusDetail" json:"upgrade_status_detail,omitempty"`
	Since               *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=since" json:"since,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpgradeProgress) Reset() {
	*x = UpgradeProgress{}
	mi := &file_storage_cluster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeProgress) ProtoMessage() {}

func (x *UpgradeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpgradeProgress) GetUpgradeState() UpgradeProgress_UpgradeState {
	if x != nil && x.UpgradeState != nil {
		return *x.UpgradeState
	}
	return UpgradeProgress_UPGRADE_INITIALIZING
}

func (x *UpgradeProgress) GetUpgradeStatusDetail() string {
	if x != nil && x.UpgradeStatusDetail != nil {
		return *x.UpgradeStatusDetail
	}
	return ""
}

func (x *UpgradeProgress) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *UpgradeProgress) SetUpgradeState(v UpgradeProgress_UpgradeState) {
	x.UpgradeState = &v
}

func (x *UpgradeProgress) SetUpgradeStatusDetail(v string) {
	x.UpgradeStatusDetail = &v
}

func (x *UpgradeProgress) SetSince(v *timestamppb.Timestamp) {
	x.Since = v
}

func (x *UpgradeProgress) HasUpgradeState() bool {
	if x == nil {
		return false
	}
	return x.UpgradeState != nil
}

func (x *UpgradeProgress) HasUpgradeStatusDetail() bool {
	if x == nil {
		return false
	}
	return x.UpgradeStatusDetail != nil
}

func (x *UpgradeProgress) HasSince() bool {
	if x == nil {
		return false
	}
	return x.Since != nil
}

func (x *UpgradeProgress) ClearUpgradeState() {
	x.UpgradeState = nil
}

func (x *UpgradeProgress) ClearUpgradeStatusDetail() {
	x.UpgradeStatusDetail = nil
}

func (x *UpgradeProgress) ClearSince() {
	x.Since = nil
}

type UpgradeProgress_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	UpgradeState        *UpgradeProgress_UpgradeState
	UpgradeStatusDetail *string
	Since               *timestamppb.Timestamp
}

func (b0 UpgradeProgress_builder) Build() *UpgradeProgress {
	m0 := &UpgradeProgress{}
	b, x := &b0, m0
	_, _ = b, x
	x.UpgradeState = b.UpgradeState
	x.UpgradeStatusDetail = b.UpgradeStatusDetail
	x.Since = b.Since
	return m0
}

// AuditLogFileState tracks the last audit log event timestamp and ID that was collected by Compliance
// For internal use only
type AuditLogFileState struct {
	state            protoimpl.MessageState `protogen:"hybrid.v1"`
	CollectLogsSince *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=collect_logs_since,json=collectLogsSince" json:"collect_logs_since,omitempty"`
	LastAuditId      *string                `protobuf:"bytes,2,opt,name=last_audit_id,json=lastAuditId" json:"last_audit_id,omitempty"` // Previously received audit id. May be empty
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuditLogFileState) Reset() {
	*x = AuditLogFileState{}
	mi := &file_storage_cluster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogFileState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogFileState) ProtoMessage() {}

func (x *AuditLogFileState) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AuditLogFileState) GetCollectLogsSince() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectLogsSince
	}
	return nil
}

func (x *AuditLogFileState) GetLastAuditId() string {
	if x != nil && x.LastAuditId != nil {
		return *x.LastAuditId
	}
	return ""
}

func (x *AuditLogFileState) SetCollectLogsSince(v *timestamppb.Timestamp) {
	x.CollectLogsSince = v
}

func (x *AuditLogFileState) SetLastAuditId(v string) {
	x.LastAuditId = &v
}

func (x *AuditLogFileState) HasCollectLogsSince() bool {
	if x == nil {
		return false
	}
	return x.CollectLogsSince != nil
}

func (x *AuditLogFileState) HasLastAuditId() bool {
	if x == nil {
		return false
	}
	return x.LastAuditId != nil
}

func (x *AuditLogFileState) ClearCollectLogsSince() {
	x.CollectLogsSince = nil
}

func (x *AuditLogFileState) ClearLastAuditId() {
	x.LastAuditId = nil
}

type AuditLogFileState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CollectLogsSince *timestamppb.Timestamp
	LastAuditId      *string
}

func (b0 AuditLogFileState_builder) Build() *AuditLogFileState {
	m0 := &AuditLogFileState{}
	b, x := &b0, m0
	_, _ = b, x
	x.CollectLogsSince = b.CollectLogsSince
	x.LastAuditId = b.LastAuditId
	return m0
}

type ClusterHealthStatus struct {
	state                      protoimpl.MessageState      `protogen:"hybrid.v1"`
	Id                         *string                     `protobuf:"bytes,9,opt,name=id" json:"id,omitempty" sql:"pk,fk(Cluster:id),no-fk-constraint,type(uuid)"` // @gotags: sql:"pk,fk(Cluster:id),no-fk-constraint,type(uuid)"
	CollectorHealthInfo        *CollectorHealthInfo        `protobuf:"bytes,1,opt,name=collector_health_info,json=collectorHealthInfo" json:"collector_health_info,omitempty"`
	AdmissionControlHealthInfo *AdmissionControlHealthInfo `protobuf:"bytes,8,opt,name=admission_control_health_info,json=admissionControlHealthInfo" json:"admission_control_health_info,omitempty"`
	// scanner_health_info is filled when the scanner is deployed on a secured cluster (so called "local scanner").
	// Please do not confuse this with the default scanner deployment on a central cluster.
	ScannerHealthInfo *ScannerHealthInfo `protobuf:"bytes,10,opt,name=scanner_health_info,json=scannerHealthInfo" json:"scanner_health_info,omitempty"`
	// The following _health_status fields provide aggregated health status of the respective components and are assigned by central.
	SensorHealthStatus           *ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,2,opt,name=sensor_health_status,json=sensorHealthStatus,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"sensor_health_status,omitempty" search:"Sensor Status,store"`                                 // @gotags: search:"Sensor Status,store"
	CollectorHealthStatus        *ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,3,opt,name=collector_health_status,json=collectorHealthStatus,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"collector_health_status,omitempty" search:"Collector Status,store"`                        // @gotags: search:"Collector Status,store"
	OverallHealthStatus          *ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,4,opt,name=overall_health_status,json=overallHealthStatus,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"overall_health_status,omitempty" search:"Cluster Status,store"`                              // @gotags: search:"Cluster Status,store"
	AdmissionControlHealthStatus *ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,7,opt,name=admission_control_health_status,json=admissionControlHealthStatus,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"admission_control_health_status,omitempty" search:"Admission Control Status,store"` // @gotags: search:"Admission Control Status,store"
	ScannerHealthStatus          *ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,11,opt,name=scanner_health_status,json=scannerHealthStatus,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"scanner_health_status,omitempty" search:"Scanner Status,store"`                             // @gotags: search:"Scanner Status,store"
	// For sensors not having health capability, this will be filled with gRPC connection poll. Otherwise,
	// this timestamp will be updated by central pipeline when message is processed.
	//
	// Note: we use this setting to guard against a specific attack vector during CRS-based cluster registration.
	// Assuming that a CRS was used to register a cluster A and the CRS is leaked, an attacker shall not be able
	// to re-run the CRS-flow which would then equip the attacker with a certificate & key issued to the cluster A.
	// As countermeasure we only allow re-running the CRS-flow only as long as the last_contact field is empty,
	// indicating that the legit cluster A's sensor has not yet connected with the CRS-issued service certificates.
	LastContact *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_contact,json=lastContact" json:"last_contact,omitempty" search:"Last Contact,store"` // @gotags: search:"Last Contact,store"
	// To track cases such as when sensor is healthy, but collector status data is unavailable because the sensor is on an old version
	HealthInfoComplete *bool `protobuf:"varint,6,opt,name=health_info_complete,json=healthInfoComplete" json:"health_info_complete,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClusterHealthStatus) Reset() {
	*x = ClusterHealthStatus{}
	mi := &file_storage_cluster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterHealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealthStatus) ProtoMessage() {}

func (x *ClusterHealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterHealthStatus) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ClusterHealthStatus) GetCollectorHealthInfo() *CollectorHealthInfo {
	if x != nil {
		return x.CollectorHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetAdmissionControlHealthInfo() *AdmissionControlHealthInfo {
	if x != nil {
		return x.AdmissionControlHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetScannerHealthInfo() *ScannerHealthInfo {
	if x != nil {
		return x.ScannerHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetSensorHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil && x.SensorHealthStatus != nil {
		return *x.SensorHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetCollectorHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil && x.CollectorHealthStatus != nil {
		return *x.CollectorHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetOverallHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil && x.OverallHealthStatus != nil {
		return *x.OverallHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetAdmissionControlHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil && x.AdmissionControlHealthStatus != nil {
		return *x.AdmissionControlHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetScannerHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil && x.ScannerHealthStatus != nil {
		return *x.ScannerHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetLastContact() *timestamppb.Timestamp {
	if x != nil {
		return x.LastContact
	}
	return nil
}

func (x *ClusterHealthStatus) GetHealthInfoComplete() bool {
	if x != nil && x.HealthInfoComplete != nil {
		return *x.HealthInfoComplete
	}
	return false
}

func (x *ClusterHealthStatus) SetId(v string) {
	x.Id = &v
}

func (x *ClusterHealthStatus) SetCollectorHealthInfo(v *CollectorHealthInfo) {
	x.CollectorHealthInfo = v
}

func (x *ClusterHealthStatus) SetAdmissionControlHealthInfo(v *AdmissionControlHealthInfo) {
	x.AdmissionControlHealthInfo = v
}

func (x *ClusterHealthStatus) SetScannerHealthInfo(v *ScannerHealthInfo) {
	x.ScannerHealthInfo = v
}

func (x *ClusterHealthStatus) SetSensorHealthStatus(v ClusterHealthStatus_HealthStatusLabel) {
	x.SensorHealthStatus = &v
}

func (x *ClusterHealthStatus) SetCollectorHealthStatus(v ClusterHealthStatus_HealthStatusLabel) {
	x.CollectorHealthStatus = &v
}

func (x *ClusterHealthStatus) SetOverallHealthStatus(v ClusterHealthStatus_HealthStatusLabel) {
	x.OverallHealthStatus = &v
}

func (x *ClusterHealthStatus) SetAdmissionControlHealthStatus(v ClusterHealthStatus_HealthStatusLabel) {
	x.AdmissionControlHealthStatus = &v
}

func (x *ClusterHealthStatus) SetScannerHealthStatus(v ClusterHealthStatus_HealthStatusLabel) {
	x.ScannerHealthStatus = &v
}

func (x *ClusterHealthStatus) SetLastContact(v *timestamppb.Timestamp) {
	x.LastContact = v
}

func (x *ClusterHealthStatus) SetHealthInfoComplete(v bool) {
	x.HealthInfoComplete = &v
}

func (x *ClusterHealthStatus) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ClusterHealthStatus) HasCollectorHealthInfo() bool {
	if x == nil {
		return false
	}
	return x.CollectorHealthInfo != nil
}

func (x *ClusterHealthStatus) HasAdmissionControlHealthInfo() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControlHealthInfo != nil
}

func (x *ClusterHealthStatus) HasScannerHealthInfo() bool {
	if x == nil {
		return false
	}
	return x.ScannerHealthInfo != nil
}

func (x *ClusterHealthStatus) HasSensorHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.SensorHealthStatus != nil
}

func (x *ClusterHealthStatus) HasCollectorHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.CollectorHealthStatus != nil
}

func (x *ClusterHealthStatus) HasOverallHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.OverallHealthStatus != nil
}

func (x *ClusterHealthStatus) HasAdmissionControlHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.AdmissionControlHealthStatus != nil
}

func (x *ClusterHealthStatus) HasScannerHealthStatus() bool {
	if x == nil {
		return false
	}
	return x.ScannerHealthStatus != nil
}

func (x *ClusterHealthStatus) HasLastContact() bool {
	if x == nil {
		return false
	}
	return x.LastContact != nil
}

func (x *ClusterHealthStatus) HasHealthInfoComplete() bool {
	if x == nil {
		return false
	}
	return x.HealthInfoComplete != nil
}

func (x *ClusterHealthStatus) ClearId() {
	x.Id = nil
}

func (x *ClusterHealthStatus) ClearCollectorHealthInfo() {
	x.CollectorHealthInfo = nil
}

func (x *ClusterHealthStatus) ClearAdmissionControlHealthInfo() {
	x.AdmissionControlHealthInfo = nil
}

func (x *ClusterHealthStatus) ClearScannerHealthInfo() {
	x.ScannerHealthInfo = nil
}

func (x *ClusterHealthStatus) ClearSensorHealthStatus() {
	x.SensorHealthStatus = nil
}

func (x *ClusterHealthStatus) ClearCollectorHealthStatus() {
	x.CollectorHealthStatus = nil
}

func (x *ClusterHealthStatus) ClearOverallHealthStatus() {
	x.OverallHealthStatus = nil
}

func (x *ClusterHealthStatus) ClearAdmissionControlHealthStatus() {
	x.AdmissionControlHealthStatus = nil
}

func (x *ClusterHealthStatus) ClearScannerHealthStatus() {
	x.ScannerHealthStatus = nil
}

func (x *ClusterHealthStatus) ClearLastContact() {
	x.LastContact = nil
}

func (x *ClusterHealthStatus) ClearHealthInfoComplete() {
	x.HealthInfoComplete = nil
}

type ClusterHealthStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                         *string
	CollectorHealthInfo        *CollectorHealthInfo
	AdmissionControlHealthInfo *AdmissionControlHealthInfo
	// scanner_health_info is filled when the scanner is deployed on a secured cluster (so called "local scanner").
	// Please do not confuse this with the default scanner deployment on a central cluster.
	ScannerHealthInfo *ScannerHealthInfo
	// The following _health_status fields provide aggregated health status of the respective components and are assigned by central.
	SensorHealthStatus           *ClusterHealthStatus_HealthStatusLabel
	CollectorHealthStatus        *ClusterHealthStatus_HealthStatusLabel
	OverallHealthStatus          *ClusterHealthStatus_HealthStatusLabel
	AdmissionControlHealthStatus *ClusterHealthStatus_HealthStatusLabel
	ScannerHealthStatus          *ClusterHealthStatus_HealthStatusLabel
	// For sensors not having health capability, this will be filled with gRPC connection poll. Otherwise,
	// this timestamp will be updated by central pipeline when message is processed.
	//
	// Note: we use this setting to guard against a specific attack vector during CRS-based cluster registration.
	// Assuming that a CRS was used to register a cluster A and the CRS is leaked, an attacker shall not be able
	// to re-run the CRS-flow which would then equip the attacker with a certificate & key issued to the cluster A.
	// As countermeasure we only allow re-running the CRS-flow only as long as the last_contact field is empty,
	// indicating that the legit cluster A's sensor has not yet connected with the CRS-issued service certificates.
	LastContact *timestamppb.Timestamp
	// To track cases such as when sensor is healthy, but collector status data is unavailable because the sensor is on an old version
	HealthInfoComplete *bool
}

func (b0 ClusterHealthStatus_builder) Build() *ClusterHealthStatus {
	m0 := &ClusterHealthStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.CollectorHealthInfo = b.CollectorHealthInfo
	x.AdmissionControlHealthInfo = b.AdmissionControlHealthInfo
	x.ScannerHealthInfo = b.ScannerHealthInfo
	x.SensorHealthStatus = b.SensorHealthStatus
	x.CollectorHealthStatus = b.CollectorHealthStatus
	x.OverallHealthStatus = b.OverallHealthStatus
	x.AdmissionControlHealthStatus = b.AdmissionControlHealthStatus
	x.ScannerHealthStatus = b.ScannerHealthStatus
	x.LastContact = b.LastContact
	x.HealthInfoComplete = b.HealthInfoComplete
	return m0
}

// CollectorHealthInfo carries data about collector deployment but does not include collector health status derived from this data.
// Aggregated collector health status is not included because it is derived in central and not in the component that
// first reports CollectorHealthInfo (sensor).
type CollectorHealthInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// This is the version of the collector deamonset as returned by k8s API
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Types that are valid to be assigned to TotalDesiredPodsOpt:
	//
	//	*CollectorHealthInfo_TotalDesiredPods
	TotalDesiredPodsOpt isCollectorHealthInfo_TotalDesiredPodsOpt `protobuf_oneof:"total_desired_pods_opt"`
	// Types that are valid to be assigned to TotalReadyPodsOpt:
	//
	//	*CollectorHealthInfo_TotalReadyPods
	TotalReadyPodsOpt isCollectorHealthInfo_TotalReadyPodsOpt `protobuf_oneof:"total_ready_pods_opt"`
	// Types that are valid to be assigned to TotalRegisteredNodesOpt:
	//
	//	*CollectorHealthInfo_TotalRegisteredNodes
	TotalRegisteredNodesOpt isCollectorHealthInfo_TotalRegisteredNodesOpt `protobuf_oneof:"total_registered_nodes_opt"`
	// Collection of errors that occurred while trying to obtain collector health info.
	StatusErrors  []string `protobuf:"bytes,5,rep,name=status_errors,json=statusErrors" json:"status_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectorHealthInfo) Reset() {
	*x = CollectorHealthInfo{}
	mi := &file_storage_cluster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectorHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorHealthInfo) ProtoMessage() {}

func (x *CollectorHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CollectorHealthInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CollectorHealthInfo) GetTotalDesiredPodsOpt() isCollectorHealthInfo_TotalDesiredPodsOpt {
	if x != nil {
		return x.TotalDesiredPodsOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalDesiredPods() int32 {
	if x != nil {
		if x, ok := x.TotalDesiredPodsOpt.(*CollectorHealthInfo_TotalDesiredPods); ok {
			return x.TotalDesiredPods
		}
	}
	return 0
}

func (x *CollectorHealthInfo) GetTotalReadyPodsOpt() isCollectorHealthInfo_TotalReadyPodsOpt {
	if x != nil {
		return x.TotalReadyPodsOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalReadyPods() int32 {
	if x != nil {
		if x, ok := x.TotalReadyPodsOpt.(*CollectorHealthInfo_TotalReadyPods); ok {
			return x.TotalReadyPods
		}
	}
	return 0
}

func (x *CollectorHealthInfo) GetTotalRegisteredNodesOpt() isCollectorHealthInfo_TotalRegisteredNodesOpt {
	if x != nil {
		return x.TotalRegisteredNodesOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalRegisteredNodes() int32 {
	if x != nil {
		if x, ok := x.TotalRegisteredNodesOpt.(*CollectorHealthInfo_TotalRegisteredNodes); ok {
			return x.TotalRegisteredNodes
		}
	}
	return 0
}

func (x *CollectorHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

func (x *CollectorHealthInfo) SetVersion(v string) {
	x.Version = &v
}

func (x *CollectorHealthInfo) SetTotalDesiredPods(v int32) {
	x.TotalDesiredPodsOpt = &CollectorHealthInfo_TotalDesiredPods{v}
}

func (x *CollectorHealthInfo) SetTotalReadyPods(v int32) {
	x.TotalReadyPodsOpt = &CollectorHealthInfo_TotalReadyPods{v}
}

func (x *CollectorHealthInfo) SetTotalRegisteredNodes(v int32) {
	x.TotalRegisteredNodesOpt = &CollectorHealthInfo_TotalRegisteredNodes{v}
}

func (x *CollectorHealthInfo) SetStatusErrors(v []string) {
	x.StatusErrors = v
}

func (x *CollectorHealthInfo) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *CollectorHealthInfo) HasTotalDesiredPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalDesiredPodsOpt != nil
}

func (x *CollectorHealthInfo) HasTotalDesiredPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalDesiredPodsOpt.(*CollectorHealthInfo_TotalDesiredPods)
	return ok
}

func (x *CollectorHealthInfo) HasTotalReadyPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalReadyPodsOpt != nil
}

func (x *CollectorHealthInfo) HasTotalReadyPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalReadyPodsOpt.(*CollectorHealthInfo_TotalReadyPods)
	return ok
}

func (x *CollectorHealthInfo) HasTotalRegisteredNodesOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalRegisteredNodesOpt != nil
}

func (x *CollectorHealthInfo) HasTotalRegisteredNodes() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalRegisteredNodesOpt.(*CollectorHealthInfo_TotalRegisteredNodes)
	return ok
}

func (x *CollectorHealthInfo) ClearVersion() {
	x.Version = nil
}

func (x *CollectorHealthInfo) ClearTotalDesiredPodsOpt() {
	x.TotalDesiredPodsOpt = nil
}

func (x *CollectorHealthInfo) ClearTotalDesiredPods() {
	if _, ok := x.TotalDesiredPodsOpt.(*CollectorHealthInfo_TotalDesiredPods); ok {
		x.TotalDesiredPodsOpt = nil
	}
}

func (x *CollectorHealthInfo) ClearTotalReadyPodsOpt() {
	x.TotalReadyPodsOpt = nil
}

func (x *CollectorHealthInfo) ClearTotalReadyPods() {
	if _, ok := x.TotalReadyPodsOpt.(*CollectorHealthInfo_TotalReadyPods); ok {
		x.TotalReadyPodsOpt = nil
	}
}

func (x *CollectorHealthInfo) ClearTotalRegisteredNodesOpt() {
	x.TotalRegisteredNodesOpt = nil
}

func (x *CollectorHealthInfo) ClearTotalRegisteredNodes() {
	if _, ok := x.TotalRegisteredNodesOpt.(*CollectorHealthInfo_TotalRegisteredNodes); ok {
		x.TotalRegisteredNodesOpt = nil
	}
}

const CollectorHealthInfo_TotalDesiredPodsOpt_not_set_case case_CollectorHealthInfo_TotalDesiredPodsOpt = 0
const CollectorHealthInfo_TotalDesiredPods_case case_CollectorHealthInfo_TotalDesiredPodsOpt = 2

func (x *CollectorHealthInfo) WhichTotalDesiredPodsOpt() case_CollectorHealthInfo_TotalDesiredPodsOpt {
	if x == nil {
		return CollectorHealthInfo_TotalDesiredPodsOpt_not_set_case
	}
	switch x.TotalDesiredPodsOpt.(type) {
	case *CollectorHealthInfo_TotalDesiredPods:
		return CollectorHealthInfo_TotalDesiredPods_case
	default:
		return CollectorHealthInfo_TotalDesiredPodsOpt_not_set_case
	}
}

const CollectorHealthInfo_TotalReadyPodsOpt_not_set_case case_CollectorHealthInfo_TotalReadyPodsOpt = 0
const CollectorHealthInfo_TotalReadyPods_case case_CollectorHealthInfo_TotalReadyPodsOpt = 3

func (x *CollectorHealthInfo) WhichTotalReadyPodsOpt() case_CollectorHealthInfo_TotalReadyPodsOpt {
	if x == nil {
		return CollectorHealthInfo_TotalReadyPodsOpt_not_set_case
	}
	switch x.TotalReadyPodsOpt.(type) {
	case *CollectorHealthInfo_TotalReadyPods:
		return CollectorHealthInfo_TotalReadyPods_case
	default:
		return CollectorHealthInfo_TotalReadyPodsOpt_not_set_case
	}
}

const CollectorHealthInfo_TotalRegisteredNodesOpt_not_set_case case_CollectorHealthInfo_TotalRegisteredNodesOpt = 0
const CollectorHealthInfo_TotalRegisteredNodes_case case_CollectorHealthInfo_TotalRegisteredNodesOpt = 4

func (x *CollectorHealthInfo) WhichTotalRegisteredNodesOpt() case_CollectorHealthInfo_TotalRegisteredNodesOpt {
	if x == nil {
		return CollectorHealthInfo_TotalRegisteredNodesOpt_not_set_case
	}
	switch x.TotalRegisteredNodesOpt.(type) {
	case *CollectorHealthInfo_TotalRegisteredNodes:
		return CollectorHealthInfo_TotalRegisteredNodes_case
	default:
		return CollectorHealthInfo_TotalRegisteredNodesOpt_not_set_case
	}
}

type CollectorHealthInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// This is the version of the collector deamonset as returned by k8s API
	Version *string
	// Fields of oneof TotalDesiredPodsOpt:
	TotalDesiredPods *int32
	// -- end of TotalDesiredPodsOpt
	// Fields of oneof TotalReadyPodsOpt:
	TotalReadyPods *int32
	// -- end of TotalReadyPodsOpt
	// Fields of oneof TotalRegisteredNodesOpt:
	TotalRegisteredNodes *int32
	// -- end of TotalRegisteredNodesOpt
	// Collection of errors that occurred while trying to obtain collector health info.
	StatusErrors []string
}

func (b0 CollectorHealthInfo_builder) Build() *CollectorHealthInfo {
	m0 := &CollectorHealthInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.Version = b.Version
	if b.TotalDesiredPods != nil {
		x.TotalDesiredPodsOpt = &CollectorHealthInfo_TotalDesiredPods{*b.TotalDesiredPods}
	}
	if b.TotalReadyPods != nil {
		x.TotalReadyPodsOpt = &CollectorHealthInfo_TotalReadyPods{*b.TotalReadyPods}
	}
	if b.TotalRegisteredNodes != nil {
		x.TotalRegisteredNodesOpt = &CollectorHealthInfo_TotalRegisteredNodes{*b.TotalRegisteredNodes}
	}
	x.StatusErrors = b.StatusErrors
	return m0
}

type case_CollectorHealthInfo_TotalDesiredPodsOpt protoreflect.FieldNumber

func (x case_CollectorHealthInfo_TotalDesiredPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[20].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_CollectorHealthInfo_TotalReadyPodsOpt protoreflect.FieldNumber

func (x case_CollectorHealthInfo_TotalReadyPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[20].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_CollectorHealthInfo_TotalRegisteredNodesOpt protoreflect.FieldNumber

func (x case_CollectorHealthInfo_TotalRegisteredNodesOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[20].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCollectorHealthInfo_TotalDesiredPodsOpt interface {
	isCollectorHealthInfo_TotalDesiredPodsOpt()
}

type CollectorHealthInfo_TotalDesiredPods struct {
	TotalDesiredPods int32 `protobuf:"varint,2,opt,name=total_desired_pods,json=totalDesiredPods,oneof"`
}

func (*CollectorHealthInfo_TotalDesiredPods) isCollectorHealthInfo_TotalDesiredPodsOpt() {}

type isCollectorHealthInfo_TotalReadyPodsOpt interface {
	isCollectorHealthInfo_TotalReadyPodsOpt()
}

type CollectorHealthInfo_TotalReadyPods struct {
	TotalReadyPods int32 `protobuf:"varint,3,opt,name=total_ready_pods,json=totalReadyPods,oneof"`
}

func (*CollectorHealthInfo_TotalReadyPods) isCollectorHealthInfo_TotalReadyPodsOpt() {}

type isCollectorHealthInfo_TotalRegisteredNodesOpt interface {
	isCollectorHealthInfo_TotalRegisteredNodesOpt()
}

type CollectorHealthInfo_TotalRegisteredNodes struct {
	TotalRegisteredNodes int32 `protobuf:"varint,4,opt,name=total_registered_nodes,json=totalRegisteredNodes,oneof"`
}

func (*CollectorHealthInfo_TotalRegisteredNodes) isCollectorHealthInfo_TotalRegisteredNodesOpt() {}

// AdmissionControlHealthInfo carries data about admission control deployment but does not include admission control health status
// derived from this data.
// Aggregated admission control health status is not included because it is derived in central and not in the component that
// first reports AdmissionControlHealthInfo (sensor).
type AdmissionControlHealthInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to TotalDesiredPodsOpt:
	//
	//	*AdmissionControlHealthInfo_TotalDesiredPods
	TotalDesiredPodsOpt isAdmissionControlHealthInfo_TotalDesiredPodsOpt `protobuf_oneof:"total_desired_pods_opt"`
	// Types that are valid to be assigned to TotalReadyPodsOpt:
	//
	//	*AdmissionControlHealthInfo_TotalReadyPods
	TotalReadyPodsOpt isAdmissionControlHealthInfo_TotalReadyPodsOpt `protobuf_oneof:"total_ready_pods_opt"`
	// Collection of errors that occurred while trying to obtain admission control health info.
	StatusErrors  []string `protobuf:"bytes,3,rep,name=status_errors,json=statusErrors" json:"status_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdmissionControlHealthInfo) Reset() {
	*x = AdmissionControlHealthInfo{}
	mi := &file_storage_cluster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdmissionControlHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionControlHealthInfo) ProtoMessage() {}

func (x *AdmissionControlHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AdmissionControlHealthInfo) GetTotalDesiredPodsOpt() isAdmissionControlHealthInfo_TotalDesiredPodsOpt {
	if x != nil {
		return x.TotalDesiredPodsOpt
	}
	return nil
}

func (x *AdmissionControlHealthInfo) GetTotalDesiredPods() int32 {
	if x != nil {
		if x, ok := x.TotalDesiredPodsOpt.(*AdmissionControlHealthInfo_TotalDesiredPods); ok {
			return x.TotalDesiredPods
		}
	}
	return 0
}

func (x *AdmissionControlHealthInfo) GetTotalReadyPodsOpt() isAdmissionControlHealthInfo_TotalReadyPodsOpt {
	if x != nil {
		return x.TotalReadyPodsOpt
	}
	return nil
}

func (x *AdmissionControlHealthInfo) GetTotalReadyPods() int32 {
	if x != nil {
		if x, ok := x.TotalReadyPodsOpt.(*AdmissionControlHealthInfo_TotalReadyPods); ok {
			return x.TotalReadyPods
		}
	}
	return 0
}

func (x *AdmissionControlHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

func (x *AdmissionControlHealthInfo) SetTotalDesiredPods(v int32) {
	x.TotalDesiredPodsOpt = &AdmissionControlHealthInfo_TotalDesiredPods{v}
}

func (x *AdmissionControlHealthInfo) SetTotalReadyPods(v int32) {
	x.TotalReadyPodsOpt = &AdmissionControlHealthInfo_TotalReadyPods{v}
}

func (x *AdmissionControlHealthInfo) SetStatusErrors(v []string) {
	x.StatusErrors = v
}

func (x *AdmissionControlHealthInfo) HasTotalDesiredPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalDesiredPodsOpt != nil
}

func (x *AdmissionControlHealthInfo) HasTotalDesiredPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalDesiredPodsOpt.(*AdmissionControlHealthInfo_TotalDesiredPods)
	return ok
}

func (x *AdmissionControlHealthInfo) HasTotalReadyPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalReadyPodsOpt != nil
}

func (x *AdmissionControlHealthInfo) HasTotalReadyPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalReadyPodsOpt.(*AdmissionControlHealthInfo_TotalReadyPods)
	return ok
}

func (x *AdmissionControlHealthInfo) ClearTotalDesiredPodsOpt() {
	x.TotalDesiredPodsOpt = nil
}

func (x *AdmissionControlHealthInfo) ClearTotalDesiredPods() {
	if _, ok := x.TotalDesiredPodsOpt.(*AdmissionControlHealthInfo_TotalDesiredPods); ok {
		x.TotalDesiredPodsOpt = nil
	}
}

func (x *AdmissionControlHealthInfo) ClearTotalReadyPodsOpt() {
	x.TotalReadyPodsOpt = nil
}

func (x *AdmissionControlHealthInfo) ClearTotalReadyPods() {
	if _, ok := x.TotalReadyPodsOpt.(*AdmissionControlHealthInfo_TotalReadyPods); ok {
		x.TotalReadyPodsOpt = nil
	}
}

const AdmissionControlHealthInfo_TotalDesiredPodsOpt_not_set_case case_AdmissionControlHealthInfo_TotalDesiredPodsOpt = 0
const AdmissionControlHealthInfo_TotalDesiredPods_case case_AdmissionControlHealthInfo_TotalDesiredPodsOpt = 1

func (x *AdmissionControlHealthInfo) WhichTotalDesiredPodsOpt() case_AdmissionControlHealthInfo_TotalDesiredPodsOpt {
	if x == nil {
		return AdmissionControlHealthInfo_TotalDesiredPodsOpt_not_set_case
	}
	switch x.TotalDesiredPodsOpt.(type) {
	case *AdmissionControlHealthInfo_TotalDesiredPods:
		return AdmissionControlHealthInfo_TotalDesiredPods_case
	default:
		return AdmissionControlHealthInfo_TotalDesiredPodsOpt_not_set_case
	}
}

const AdmissionControlHealthInfo_TotalReadyPodsOpt_not_set_case case_AdmissionControlHealthInfo_TotalReadyPodsOpt = 0
const AdmissionControlHealthInfo_TotalReadyPods_case case_AdmissionControlHealthInfo_TotalReadyPodsOpt = 2

func (x *AdmissionControlHealthInfo) WhichTotalReadyPodsOpt() case_AdmissionControlHealthInfo_TotalReadyPodsOpt {
	if x == nil {
		return AdmissionControlHealthInfo_TotalReadyPodsOpt_not_set_case
	}
	switch x.TotalReadyPodsOpt.(type) {
	case *AdmissionControlHealthInfo_TotalReadyPods:
		return AdmissionControlHealthInfo_TotalReadyPods_case
	default:
		return AdmissionControlHealthInfo_TotalReadyPodsOpt_not_set_case
	}
}

type AdmissionControlHealthInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof TotalDesiredPodsOpt:
	TotalDesiredPods *int32
	// -- end of TotalDesiredPodsOpt
	// Fields of oneof TotalReadyPodsOpt:
	TotalReadyPods *int32
	// -- end of TotalReadyPodsOpt
	// Collection of errors that occurred while trying to obtain admission control health info.
	StatusErrors []string
}

func (b0 AdmissionControlHealthInfo_builder) Build() *AdmissionControlHealthInfo {
	m0 := &AdmissionControlHealthInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TotalDesiredPods != nil {
		x.TotalDesiredPodsOpt = &AdmissionControlHealthInfo_TotalDesiredPods{*b.TotalDesiredPods}
	}
	if b.TotalReadyPods != nil {
		x.TotalReadyPodsOpt = &AdmissionControlHealthInfo_TotalReadyPods{*b.TotalReadyPods}
	}
	x.StatusErrors = b.StatusErrors
	return m0
}

type case_AdmissionControlHealthInfo_TotalDesiredPodsOpt protoreflect.FieldNumber

func (x case_AdmissionControlHealthInfo_TotalDesiredPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[21].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_AdmissionControlHealthInfo_TotalReadyPodsOpt protoreflect.FieldNumber

func (x case_AdmissionControlHealthInfo_TotalReadyPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[21].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAdmissionControlHealthInfo_TotalDesiredPodsOpt interface {
	isAdmissionControlHealthInfo_TotalDesiredPodsOpt()
}

type AdmissionControlHealthInfo_TotalDesiredPods struct {
	TotalDesiredPods int32 `protobuf:"varint,1,opt,name=total_desired_pods,json=totalDesiredPods,oneof"`
}

func (*AdmissionControlHealthInfo_TotalDesiredPods) isAdmissionControlHealthInfo_TotalDesiredPodsOpt() {
}

type isAdmissionControlHealthInfo_TotalReadyPodsOpt interface {
	isAdmissionControlHealthInfo_TotalReadyPodsOpt()
}

type AdmissionControlHealthInfo_TotalReadyPods struct {
	TotalReadyPods int32 `protobuf:"varint,2,opt,name=total_ready_pods,json=totalReadyPods,oneof"`
}

func (*AdmissionControlHealthInfo_TotalReadyPods) isAdmissionControlHealthInfo_TotalReadyPodsOpt() {}

// ScannerHealthInfo represents health info of a scanner instance that is deployed on a secured cluster (so called "local scanner").
// When the scanner is deployed on a central cluster, the following message is NOT used.
// ScannerHealthInfo carries data about scanner deployment but does not include scanner health status
// derived from this data.
// Aggregated scanner health status is not included because it is derived in central and not in the component that
// first reports ScannerHealthInfo (sensor).
type ScannerHealthInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to TotalDesiredAnalyzerPodsOpt:
	//
	//	*ScannerHealthInfo_TotalDesiredAnalyzerPods
	TotalDesiredAnalyzerPodsOpt isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt `protobuf_oneof:"total_desired_analyzer_pods_opt"`
	// Types that are valid to be assigned to TotalReadyAnalyzerPodsOpt:
	//
	//	*ScannerHealthInfo_TotalReadyAnalyzerPods
	TotalReadyAnalyzerPodsOpt isScannerHealthInfo_TotalReadyAnalyzerPodsOpt `protobuf_oneof:"total_ready_analyzer_pods_opt"`
	// Types that are valid to be assigned to TotalDesiredDbPodsOpt:
	//
	//	*ScannerHealthInfo_TotalDesiredDbPods
	TotalDesiredDbPodsOpt isScannerHealthInfo_TotalDesiredDbPodsOpt `protobuf_oneof:"total_desired_db_pods_opt"`
	// Types that are valid to be assigned to TotalReadyDbPodsOpt:
	//
	//	*ScannerHealthInfo_TotalReadyDbPods
	TotalReadyDbPodsOpt isScannerHealthInfo_TotalReadyDbPodsOpt `protobuf_oneof:"total_ready_db_pods_opt"`
	// Collection of errors that occurred while trying to obtain scanner health info.
	StatusErrors  []string `protobuf:"bytes,5,rep,name=status_errors,json=statusErrors" json:"status_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScannerHealthInfo) Reset() {
	*x = ScannerHealthInfo{}
	mi := &file_storage_cluster_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScannerHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerHealthInfo) ProtoMessage() {}

func (x *ScannerHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ScannerHealthInfo) GetTotalDesiredAnalyzerPodsOpt() isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt {
	if x != nil {
		return x.TotalDesiredAnalyzerPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalDesiredAnalyzerPods() int32 {
	if x != nil {
		if x, ok := x.TotalDesiredAnalyzerPodsOpt.(*ScannerHealthInfo_TotalDesiredAnalyzerPods); ok {
			return x.TotalDesiredAnalyzerPods
		}
	}
	return 0
}

func (x *ScannerHealthInfo) GetTotalReadyAnalyzerPodsOpt() isScannerHealthInfo_TotalReadyAnalyzerPodsOpt {
	if x != nil {
		return x.TotalReadyAnalyzerPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalReadyAnalyzerPods() int32 {
	if x != nil {
		if x, ok := x.TotalReadyAnalyzerPodsOpt.(*ScannerHealthInfo_TotalReadyAnalyzerPods); ok {
			return x.TotalReadyAnalyzerPods
		}
	}
	return 0
}

func (x *ScannerHealthInfo) GetTotalDesiredDbPodsOpt() isScannerHealthInfo_TotalDesiredDbPodsOpt {
	if x != nil {
		return x.TotalDesiredDbPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalDesiredDbPods() int32 {
	if x != nil {
		if x, ok := x.TotalDesiredDbPodsOpt.(*ScannerHealthInfo_TotalDesiredDbPods); ok {
			return x.TotalDesiredDbPods
		}
	}
	return 0
}

func (x *ScannerHealthInfo) GetTotalReadyDbPodsOpt() isScannerHealthInfo_TotalReadyDbPodsOpt {
	if x != nil {
		return x.TotalReadyDbPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalReadyDbPods() int32 {
	if x != nil {
		if x, ok := x.TotalReadyDbPodsOpt.(*ScannerHealthInfo_TotalReadyDbPods); ok {
			return x.TotalReadyDbPods
		}
	}
	return 0
}

func (x *ScannerHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

func (x *ScannerHealthInfo) SetTotalDesiredAnalyzerPods(v int32) {
	x.TotalDesiredAnalyzerPodsOpt = &ScannerHealthInfo_TotalDesiredAnalyzerPods{v}
}

func (x *ScannerHealthInfo) SetTotalReadyAnalyzerPods(v int32) {
	x.TotalReadyAnalyzerPodsOpt = &ScannerHealthInfo_TotalReadyAnalyzerPods{v}
}

func (x *ScannerHealthInfo) SetTotalDesiredDbPods(v int32) {
	x.TotalDesiredDbPodsOpt = &ScannerHealthInfo_TotalDesiredDbPods{v}
}

func (x *ScannerHealthInfo) SetTotalReadyDbPods(v int32) {
	x.TotalReadyDbPodsOpt = &ScannerHealthInfo_TotalReadyDbPods{v}
}

func (x *ScannerHealthInfo) SetStatusErrors(v []string) {
	x.StatusErrors = v
}

func (x *ScannerHealthInfo) HasTotalDesiredAnalyzerPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalDesiredAnalyzerPodsOpt != nil
}

func (x *ScannerHealthInfo) HasTotalDesiredAnalyzerPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalDesiredAnalyzerPodsOpt.(*ScannerHealthInfo_TotalDesiredAnalyzerPods)
	return ok
}

func (x *ScannerHealthInfo) HasTotalReadyAnalyzerPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalReadyAnalyzerPodsOpt != nil
}

func (x *ScannerHealthInfo) HasTotalReadyAnalyzerPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalReadyAnalyzerPodsOpt.(*ScannerHealthInfo_TotalReadyAnalyzerPods)
	return ok
}

func (x *ScannerHealthInfo) HasTotalDesiredDbPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalDesiredDbPodsOpt != nil
}

func (x *ScannerHealthInfo) HasTotalDesiredDbPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalDesiredDbPodsOpt.(*ScannerHealthInfo_TotalDesiredDbPods)
	return ok
}

func (x *ScannerHealthInfo) HasTotalReadyDbPodsOpt() bool {
	if x == nil {
		return false
	}
	return x.TotalReadyDbPodsOpt != nil
}

func (x *ScannerHealthInfo) HasTotalReadyDbPods() bool {
	if x == nil {
		return false
	}
	_, ok := x.TotalReadyDbPodsOpt.(*ScannerHealthInfo_TotalReadyDbPods)
	return ok
}

func (x *ScannerHealthInfo) ClearTotalDesiredAnalyzerPodsOpt() {
	x.TotalDesiredAnalyzerPodsOpt = nil
}

func (x *ScannerHealthInfo) ClearTotalDesiredAnalyzerPods() {
	if _, ok := x.TotalDesiredAnalyzerPodsOpt.(*ScannerHealthInfo_TotalDesiredAnalyzerPods); ok {
		x.TotalDesiredAnalyzerPodsOpt = nil
	}
}

func (x *ScannerHealthInfo) ClearTotalReadyAnalyzerPodsOpt() {
	x.TotalReadyAnalyzerPodsOpt = nil
}

func (x *ScannerHealthInfo) ClearTotalReadyAnalyzerPods() {
	if _, ok := x.TotalReadyAnalyzerPodsOpt.(*ScannerHealthInfo_TotalReadyAnalyzerPods); ok {
		x.TotalReadyAnalyzerPodsOpt = nil
	}
}

func (x *ScannerHealthInfo) ClearTotalDesiredDbPodsOpt() {
	x.TotalDesiredDbPodsOpt = nil
}

func (x *ScannerHealthInfo) ClearTotalDesiredDbPods() {
	if _, ok := x.TotalDesiredDbPodsOpt.(*ScannerHealthInfo_TotalDesiredDbPods); ok {
		x.TotalDesiredDbPodsOpt = nil
	}
}

func (x *ScannerHealthInfo) ClearTotalReadyDbPodsOpt() {
	x.TotalReadyDbPodsOpt = nil
}

func (x *ScannerHealthInfo) ClearTotalReadyDbPods() {
	if _, ok := x.TotalReadyDbPodsOpt.(*ScannerHealthInfo_TotalReadyDbPods); ok {
		x.TotalReadyDbPodsOpt = nil
	}
}

const ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt_not_set_case case_ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt = 0
const ScannerHealthInfo_TotalDesiredAnalyzerPods_case case_ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt = 1

func (x *ScannerHealthInfo) WhichTotalDesiredAnalyzerPodsOpt() case_ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt {
	if x == nil {
		return ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt_not_set_case
	}
	switch x.TotalDesiredAnalyzerPodsOpt.(type) {
	case *ScannerHealthInfo_TotalDesiredAnalyzerPods:
		return ScannerHealthInfo_TotalDesiredAnalyzerPods_case
	default:
		return ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt_not_set_case
	}
}

const ScannerHealthInfo_TotalReadyAnalyzerPodsOpt_not_set_case case_ScannerHealthInfo_TotalReadyAnalyzerPodsOpt = 0
const ScannerHealthInfo_TotalReadyAnalyzerPods_case case_ScannerHealthInfo_TotalReadyAnalyzerPodsOpt = 2

func (x *ScannerHealthInfo) WhichTotalReadyAnalyzerPodsOpt() case_ScannerHealthInfo_TotalReadyAnalyzerPodsOpt {
	if x == nil {
		return ScannerHealthInfo_TotalReadyAnalyzerPodsOpt_not_set_case
	}
	switch x.TotalReadyAnalyzerPodsOpt.(type) {
	case *ScannerHealthInfo_TotalReadyAnalyzerPods:
		return ScannerHealthInfo_TotalReadyAnalyzerPods_case
	default:
		return ScannerHealthInfo_TotalReadyAnalyzerPodsOpt_not_set_case
	}
}

const ScannerHealthInfo_TotalDesiredDbPodsOpt_not_set_case case_ScannerHealthInfo_TotalDesiredDbPodsOpt = 0
const ScannerHealthInfo_TotalDesiredDbPods_case case_ScannerHealthInfo_TotalDesiredDbPodsOpt = 3

func (x *ScannerHealthInfo) WhichTotalDesiredDbPodsOpt() case_ScannerHealthInfo_TotalDesiredDbPodsOpt {
	if x == nil {
		return ScannerHealthInfo_TotalDesiredDbPodsOpt_not_set_case
	}
	switch x.TotalDesiredDbPodsOpt.(type) {
	case *ScannerHealthInfo_TotalDesiredDbPods:
		return ScannerHealthInfo_TotalDesiredDbPods_case
	default:
		return ScannerHealthInfo_TotalDesiredDbPodsOpt_not_set_case
	}
}

const ScannerHealthInfo_TotalReadyDbPodsOpt_not_set_case case_ScannerHealthInfo_TotalReadyDbPodsOpt = 0
const ScannerHealthInfo_TotalReadyDbPods_case case_ScannerHealthInfo_TotalReadyDbPodsOpt = 4

func (x *ScannerHealthInfo) WhichTotalReadyDbPodsOpt() case_ScannerHealthInfo_TotalReadyDbPodsOpt {
	if x == nil {
		return ScannerHealthInfo_TotalReadyDbPodsOpt_not_set_case
	}
	switch x.TotalReadyDbPodsOpt.(type) {
	case *ScannerHealthInfo_TotalReadyDbPods:
		return ScannerHealthInfo_TotalReadyDbPods_case
	default:
		return ScannerHealthInfo_TotalReadyDbPodsOpt_not_set_case
	}
}

type ScannerHealthInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof TotalDesiredAnalyzerPodsOpt:
	TotalDesiredAnalyzerPods *int32
	// -- end of TotalDesiredAnalyzerPodsOpt
	// Fields of oneof TotalReadyAnalyzerPodsOpt:
	TotalReadyAnalyzerPods *int32
	// -- end of TotalReadyAnalyzerPodsOpt
	// Fields of oneof TotalDesiredDbPodsOpt:
	TotalDesiredDbPods *int32
	// -- end of TotalDesiredDbPodsOpt
	// Fields of oneof TotalReadyDbPodsOpt:
	TotalReadyDbPods *int32
	// -- end of TotalReadyDbPodsOpt
	// Collection of errors that occurred while trying to obtain scanner health info.
	StatusErrors []string
}

func (b0 ScannerHealthInfo_builder) Build() *ScannerHealthInfo {
	m0 := &ScannerHealthInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TotalDesiredAnalyzerPods != nil {
		x.TotalDesiredAnalyzerPodsOpt = &ScannerHealthInfo_TotalDesiredAnalyzerPods{*b.TotalDesiredAnalyzerPods}
	}
	if b.TotalReadyAnalyzerPods != nil {
		x.TotalReadyAnalyzerPodsOpt = &ScannerHealthInfo_TotalReadyAnalyzerPods{*b.TotalReadyAnalyzerPods}
	}
	if b.TotalDesiredDbPods != nil {
		x.TotalDesiredDbPodsOpt = &ScannerHealthInfo_TotalDesiredDbPods{*b.TotalDesiredDbPods}
	}
	if b.TotalReadyDbPods != nil {
		x.TotalReadyDbPodsOpt = &ScannerHealthInfo_TotalReadyDbPods{*b.TotalReadyDbPods}
	}
	x.StatusErrors = b.StatusErrors
	return m0
}

type case_ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt protoreflect.FieldNumber

func (x case_ScannerHealthInfo_TotalDesiredAnalyzerPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ScannerHealthInfo_TotalReadyAnalyzerPodsOpt protoreflect.FieldNumber

func (x case_ScannerHealthInfo_TotalReadyAnalyzerPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ScannerHealthInfo_TotalDesiredDbPodsOpt protoreflect.FieldNumber

func (x case_ScannerHealthInfo_TotalDesiredDbPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ScannerHealthInfo_TotalReadyDbPodsOpt protoreflect.FieldNumber

func (x case_ScannerHealthInfo_TotalReadyDbPodsOpt) String() string {
	md := file_storage_cluster_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt interface {
	isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt()
}

type ScannerHealthInfo_TotalDesiredAnalyzerPods struct {
	TotalDesiredAnalyzerPods int32 `protobuf:"varint,1,opt,name=total_desired_analyzer_pods,json=totalDesiredAnalyzerPods,oneof"`
}

func (*ScannerHealthInfo_TotalDesiredAnalyzerPods) isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt() {
}

type isScannerHealthInfo_TotalReadyAnalyzerPodsOpt interface {
	isScannerHealthInfo_TotalReadyAnalyzerPodsOpt()
}

type ScannerHealthInfo_TotalReadyAnalyzerPods struct {
	TotalReadyAnalyzerPods int32 `protobuf:"varint,2,opt,name=total_ready_analyzer_pods,json=totalReadyAnalyzerPods,oneof"`
}

func (*ScannerHealthInfo_TotalReadyAnalyzerPods) isScannerHealthInfo_TotalReadyAnalyzerPodsOpt() {}

type isScannerHealthInfo_TotalDesiredDbPodsOpt interface {
	isScannerHealthInfo_TotalDesiredDbPodsOpt()
}

type ScannerHealthInfo_TotalDesiredDbPods struct {
	TotalDesiredDbPods int32 `protobuf:"varint,3,opt,name=total_desired_db_pods,json=totalDesiredDbPods,oneof"`
}

func (*ScannerHealthInfo_TotalDesiredDbPods) isScannerHealthInfo_TotalDesiredDbPodsOpt() {}

type isScannerHealthInfo_TotalReadyDbPodsOpt interface {
	isScannerHealthInfo_TotalReadyDbPodsOpt()
}

type ScannerHealthInfo_TotalReadyDbPods struct {
	TotalReadyDbPods int32 `protobuf:"varint,4,opt,name=total_ready_db_pods,json=totalReadyDbPods,oneof"`
}

func (*ScannerHealthInfo_TotalReadyDbPods) isScannerHealthInfo_TotalReadyDbPodsOpt() {}

type ClusterUpgradeStatus_UpgradeProcessStatus struct {
	state         protoimpl.MessageState                                        `protogen:"hybrid.v1"`
	Active        *bool                                                         `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	Id            *string                                                       `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	TargetVersion *string                                                       `protobuf:"bytes,3,opt,name=target_version,json=targetVersion" json:"target_version,omitempty"` // only relevant if type == Upgrade
	UpgraderImage *string                                                       `protobuf:"bytes,4,opt,name=upgrader_image,json=upgraderImage" json:"upgrader_image,omitempty"`
	InitiatedAt   *timestamppb.Timestamp                                        `protobuf:"bytes,5,opt,name=initiated_at,json=initiatedAt" json:"initiated_at,omitempty"`
	Progress      *UpgradeProgress                                              `protobuf:"bytes,6,opt,name=progress" json:"progress,omitempty"`
	Type          *ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType `protobuf:"varint,7,opt,name=type,enum=storage.ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) Reset() {
	*x = ClusterUpgradeStatus_UpgradeProcessStatus{}
	mi := &file_storage_cluster_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpgradeStatus_UpgradeProcessStatus) ProtoMessage() {}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetTargetVersion() string {
	if x != nil && x.TargetVersion != nil {
		return *x.TargetVersion
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetUpgraderImage() string {
	if x != nil && x.UpgraderImage != nil {
		return *x.UpgraderImage
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetInitiatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InitiatedAt
	}
	return nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetProgress() *UpgradeProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetType() ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClusterUpgradeStatus_UpgradeProcessStatus_UPGRADE
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetActive(v bool) {
	x.Active = &v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetId(v string) {
	x.Id = &v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetTargetVersion(v string) {
	x.TargetVersion = &v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetUpgraderImage(v string) {
	x.UpgraderImage = &v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetInitiatedAt(v *timestamppb.Timestamp) {
	x.InitiatedAt = v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetProgress(v *UpgradeProgress) {
	x.Progress = v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) SetType(v ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) {
	x.Type = &v
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasActive() bool {
	if x == nil {
		return false
	}
	return x.Active != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasTargetVersion() bool {
	if x == nil {
		return false
	}
	return x.TargetVersion != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasUpgraderImage() bool {
	if x == nil {
		return false
	}
	return x.UpgraderImage != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasInitiatedAt() bool {
	if x == nil {
		return false
	}
	return x.InitiatedAt != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasProgress() bool {
	if x == nil {
		return false
	}
	return x.Progress != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearActive() {
	x.Active = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearId() {
	x.Id = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearTargetVersion() {
	x.TargetVersion = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearUpgraderImage() {
	x.UpgraderImage = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearInitiatedAt() {
	x.InitiatedAt = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearProgress() {
	x.Progress = nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ClearType() {
	x.Type = nil
}

type ClusterUpgradeStatus_UpgradeProcessStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Active        *bool
	Id            *string
	TargetVersion *string
	UpgraderImage *string
	InitiatedAt   *timestamppb.Timestamp
	Progress      *UpgradeProgress
	Type          *ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType
}

func (b0 ClusterUpgradeStatus_UpgradeProcessStatus_builder) Build() *ClusterUpgradeStatus_UpgradeProcessStatus {
	m0 := &ClusterUpgradeStatus_UpgradeProcessStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.Active = b.Active
	x.Id = b.Id
	x.TargetVersion = b.TargetVersion
	x.UpgraderImage = b.UpgraderImage
	x.InitiatedAt = b.InitiatedAt
	x.Progress = b.Progress
	x.Type = b.Type
	return m0
}

var File_storage_cluster_proto protoreflect.FileDescriptor

const file_storage_cluster_proto_rawDesc = "" +
	"\n" +
	"\x15storage/cluster.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\xc1\x01\n" +
	"\x0fClusterMetadata\x121\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1d.storage.ClusterMetadata.TypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"W\n" +
	"\x04Type\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\a\n" +
	"\x03AKS\x10\x01\x12\a\n" +
	"\x03ARO\x10\x02\x12\a\n" +
	"\x03EKS\x10\x03\x12\a\n" +
	"\x03GKE\x10\x04\x12\a\n" +
	"\x03OCP\x10\x05\x12\a\n" +
	"\x03OSD\x10\x06\x12\b\n" +
	"\x04ROSA\x10\a\"Y\n" +
	"\x16GoogleProviderMetadata\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12%\n" +
	"\fcluster_name\x18\x02 \x01(\tB\x02\x18\x01R\vclusterName\"4\n" +
	"\x13AWSProviderMetadata\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\"@\n" +
	"\x15AzureProviderMetadata\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\"\xbf\x02\n" +
	"\x10ProviderMetadata\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x02 \x01(\tR\x04zone\x129\n" +
	"\x06google\x18\x03 \x01(\v2\x1f.storage.GoogleProviderMetadataH\x00R\x06google\x120\n" +
	"\x03aws\x18\x04 \x01(\v2\x1c.storage.AWSProviderMetadataH\x00R\x03aws\x126\n" +
	"\x05azure\x18\x05 \x01(\v2\x1e.storage.AzureProviderMetadataH\x00R\x05azure\x12\x1a\n" +
	"\bverified\x18\x0f \x01(\bR\bverified\x122\n" +
	"\acluster\x18\x10 \x01(\v2\x18.storage.ClusterMetadataR\aclusterB\n" +
	"\n" +
	"\bProvider\"\xcd\x01\n" +
	"\x14OrchestratorMetadata\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12-\n" +
	"\x11openshift_version\x18\x04 \x01(\tH\x00R\x10openshiftVersion\x129\n" +
	"\n" +
	"build_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tbuildDate\x12!\n" +
	"\fapi_versions\x18\x03 \x03(\tR\vapiVersionsB\x0e\n" +
	"\fis_openshift\"\xd4\x01\n" +
	"\x19AdmissionControllerConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12'\n" +
	"\x0ftimeout_seconds\x18\x02 \x01(\x05R\x0etimeoutSeconds\x12\x1f\n" +
	"\vscan_inline\x18\x03 \x01(\bR\n" +
	"scanInline\x12%\n" +
	"\x0edisable_bypass\x18\x04 \x01(\bR\rdisableBypass\x12,\n" +
	"\x12enforce_on_updates\x18\x05 \x01(\bR\x10enforceOnUpdates\"/\n" +
	"\x11TolerationsConfig\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\"\xf4\x04\n" +
	"\x13StaticClusterConfig\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.storage.ClusterTypeR\x04type\x12\x1d\n" +
	"\n" +
	"main_image\x18\x02 \x01(\tR\tmainImage\x120\n" +
	"\x14central_api_endpoint\x18\x03 \x01(\tR\x12centralApiEndpoint\x12F\n" +
	"\x11collection_method\x18\x04 \x01(\x0e2\x19.storage.CollectionMethodR\x10collectionMethod\x12'\n" +
	"\x0fcollector_image\x18\x05 \x01(\tR\x0ecollectorImage\x121\n" +
	"\x14admission_controller\x18\x06 \x01(\bR\x13admissionController\x12@\n" +
	"\x1cadmission_controller_updates\x18\a \x01(\bR\x1aadmissionControllerUpdates\x12I\n" +
	"\x12tolerations_config\x18\b \x01(\v2\x1a.storage.TolerationsConfigR\x11tolerationsConfig\x12%\n" +
	"\x0eslim_collector\x18\t \x01(\bR\rslimCollector\x12>\n" +
	"\x1badmission_controller_events\x18\n" +
	" \x01(\bR\x19admissionControllerEvents\x12J\n" +
	"\"admission_controller_fail_on_error\x18\v \x01(\bR\x1eadmissionControllerFailOnError\":\n" +
	"\x1eAutoLockProcessBaselinesConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\"\xca\x02\n" +
	"\x14DynamicClusterConfig\x12b\n" +
	"\x1badmission_controller_config\x18\x01 \x01(\v2\".storage.AdmissionControllerConfigR\x19admissionControllerConfig\x12+\n" +
	"\x11registry_override\x18\x02 \x01(\tR\x10registryOverride\x12,\n" +
	"\x12disable_audit_logs\x18\x03 \x01(\bR\x10disableAuditLogs\x12s\n" +
	"\"auto_lock_process_baselines_config\x18\x04 \x01(\v2'.storage.AutoLockProcessBaselinesConfigR\x1eautoLockProcessBaselinesConfig\"\xeb\x02\n" +
	"\x15CompleteClusterConfig\x12D\n" +
	"\x0edynamic_config\x18\x01 \x01(\v2\x1d.storage.DynamicClusterConfigR\rdynamicConfig\x12A\n" +
	"\rstatic_config\x18\x02 \x01(\v2\x1c.storage.StaticClusterConfigR\fstaticConfig\x12-\n" +
	"\x12config_fingerprint\x18\x03 \x01(\tR\x11configFingerprint\x12X\n" +
	"\x0ecluster_labels\x18\x04 \x03(\v21.storage.CompleteClusterConfig.ClusterLabelsEntryR\rclusterLabels\x1a@\n" +
	"\x12ClusterLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa9\x02\n" +
	"\x1eSensorDeploymentIdentification\x12.\n" +
	"\x13system_namespace_id\x18\x01 \x01(\tR\x11systemNamespaceId\x120\n" +
	"\x14default_namespace_id\x18\x02 \x01(\tR\x12defaultNamespaceId\x12#\n" +
	"\rapp_namespace\x18\x03 \x01(\tR\fappNamespace\x12(\n" +
	"\x10app_namespace_id\x18\x04 \x01(\tR\x0eappNamespaceId\x122\n" +
	"\x15app_serviceaccount_id\x18\x05 \x01(\tR\x13appServiceaccountId\x12\"\n" +
	"\rk8s_node_name\x18\x06 \x01(\tR\vk8sNodeName\"\xfd\v\n" +
	"\aCluster\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.storage.ClusterTypeR\x04type\x124\n" +
	"\x06labels\x18\x1b \x03(\v2\x1c.storage.Cluster.LabelsEntryR\x06labels\x12\x1d\n" +
	"\n" +
	"main_image\x18\x04 \x01(\tR\tmainImage\x12'\n" +
	"\x0fcollector_image\x18\x10 \x01(\tR\x0ecollectorImage\x120\n" +
	"\x14central_api_endpoint\x18\x05 \x01(\tR\x12centralApiEndpoint\x12+\n" +
	"\x0fruntime_support\x18\a \x01(\bB\x02\x18\x01R\x0eruntimeSupport\x12F\n" +
	"\x11collection_method\x18\x11 \x01(\x0e2\x19.storage.CollectionMethodR\x10collectionMethod\x121\n" +
	"\x14admission_controller\x18\r \x01(\bR\x13admissionController\x12@\n" +
	"\x1cadmission_controller_updates\x18\x15 \x01(\bR\x1aadmissionControllerUpdates\x12>\n" +
	"\x1badmission_controller_events\x18\x19 \x01(\bR\x19admissionControllerEvents\x12.\n" +
	"\x06status\x18\x0f \x01(\v2\x16.storage.ClusterStatusR\x06status\x12D\n" +
	"\x0edynamic_config\x18\x12 \x01(\v2\x1d.storage.DynamicClusterConfigR\rdynamicConfig\x12I\n" +
	"\x12tolerations_config\x18\x13 \x01(\v2\x1a.storage.TolerationsConfigR\x11tolerationsConfig\x12\x1a\n" +
	"\bpriority\x18\x14 \x01(\x03R\bpriority\x12A\n" +
	"\rhealth_status\x18\x16 \x01(\v2\x1c.storage.ClusterHealthStatusR\fhealthStatus\x12%\n" +
	"\x0eslim_collector\x18\x17 \x01(\bR\rslimCollector\x12?\n" +
	"\vhelm_config\x18\x18 \x01(\v2\x1e.storage.CompleteClusterConfigR\n" +
	"helmConfig\x12Z\n" +
	"\x15most_recent_sensor_id\x18\x1a \x01(\v2'.storage.SensorDeploymentIdentificationR\x12mostRecentSensorId\x12K\n" +
	"\x0faudit_log_state\x18\x1c \x03(\v2#.storage.Cluster.AuditLogStateEntryR\rauditLogState\x12$\n" +
	"\x0einit_bundle_id\x18\x1d \x01(\tR\finitBundleId\x123\n" +
	"\n" +
	"managed_by\x18\x1e \x01(\x0e2\x14.storage.ManagerTypeR\tmanagedBy\x12/\n" +
	"\x13sensor_capabilities\x18\x1f \x03(\tR\x12sensorCapabilities\x12J\n" +
	"\"admission_controller_fail_on_error\x18  \x01(\bR\x1eadmissionControllerFailOnError\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\\\n" +
	"\x12AuditLogStateEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.storage.AuditLogFileStateR\x05value:\x028\x01J\x04\b\x06\x10\aJ\x04\b\b\x10\tJ\x04\b\t\x10\n" +
	"J\x04\b\n" +
	"\x10\vJ\x04\b\v\x10\fJ\x04\b\f\x10\rJ\x04\b\x0e\x10\x0f\"\xb4\x01\n" +
	"\x17ClusterCertExpiryStatus\x12H\n" +
	"\x12sensor_cert_expiry\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x10sensorCertExpiry\x12O\n" +
	"\x16sensor_cert_not_before\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x13sensorCertNotBefore\"\xbc\x03\n" +
	"\rClusterStatus\x12%\n" +
	"\x0esensor_version\x18\x01 \x01(\tR\rsensorVersion\x12R\n" +
	"\x17DEPRECATED_last_contact\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x15DEPRECATEDLastContact\x12F\n" +
	"\x11provider_metadata\x18\x03 \x01(\v2\x19.storage.ProviderMetadataR\x10providerMetadata\x12R\n" +
	"\x15orchestrator_metadata\x18\x04 \x01(\v2\x1d.storage.OrchestratorMetadataR\x14orchestratorMetadata\x12D\n" +
	"\x0eupgrade_status\x18\x05 \x01(\v2\x1d.storage.ClusterUpgradeStatusR\rupgradeStatus\x12N\n" +
	"\x12cert_expiry_status\x18\x06 \x01(\v2 .storage.ClusterCertExpiryStatusR\x10certExpiryStatus\"\xa1\x06\n" +
	"\x14ClusterUpgradeStatus\x12Q\n" +
	"\rupgradability\x18\x01 \x01(\x0e2+.storage.ClusterUpgradeStatus.UpgradabilityR\rupgradability\x12>\n" +
	"\x1bupgradability_status_reason\x18\x02 \x01(\tR\x19upgradabilityStatusReason\x12b\n" +
	"\x13most_recent_process\x18\x03 \x01(\v22.storage.ClusterUpgradeStatus.UpgradeProcessStatusR\x11mostRecentProcess\x1a\x92\x03\n" +
	"\x14UpgradeProcessStatus\x12\x16\n" +
	"\x06active\x18\x01 \x01(\bR\x06active\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12%\n" +
	"\x0etarget_version\x18\x03 \x01(\tR\rtargetVersion\x12%\n" +
	"\x0eupgrader_image\x18\x04 \x01(\tR\rupgraderImage\x12=\n" +
	"\finitiated_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vinitiatedAt\x124\n" +
	"\bprogress\x18\x06 \x01(\v2\x18.storage.UpgradeProgressR\bprogress\x12Y\n" +
	"\x04type\x18\a \x01(\x0e2E.storage.ClusterUpgradeStatus.UpgradeProcessStatus.UpgradeProcessTypeR\x04type\"4\n" +
	"\x12UpgradeProcessType\x12\v\n" +
	"\aUPGRADE\x10\x00\x12\x11\n" +
	"\rCERT_ROTATION\x10\x01\"}\n" +
	"\rUpgradability\x12\t\n" +
	"\x05UNSET\x10\x00\x12\x0e\n" +
	"\n" +
	"UP_TO_DATE\x10\x01\x12\x1b\n" +
	"\x17MANUAL_UPGRADE_REQUIRED\x10\x02\x12\x19\n" +
	"\x15AUTO_UPGRADE_POSSIBLE\x10\x03\x12\x19\n" +
	"\x15SENSOR_VERSION_HIGHER\x10\x04\"\xc4\x04\n" +
	"\x0fUpgradeProgress\x12J\n" +
	"\rupgrade_state\x18\x01 \x01(\x0e2%.storage.UpgradeProgress.UpgradeStateR\fupgradeState\x122\n" +
	"\x15upgrade_status_detail\x18\x02 \x01(\tR\x13upgradeStatusDetail\x120\n" +
	"\x05since\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x05since\"\xfe\x02\n" +
	"\fUpgradeState\x12\x18\n" +
	"\x14UPGRADE_INITIALIZING\x10\x00\x12\x16\n" +
	"\x12UPGRADER_LAUNCHING\x10\x01\x12\x15\n" +
	"\x11UPGRADER_LAUNCHED\x10\x02\x12\x1e\n" +
	"\x1aPRE_FLIGHT_CHECKS_COMPLETE\x10\x03\x12\x1b\n" +
	"\x17UPGRADE_OPERATIONS_DONE\x10\x04\x12\x14\n" +
	"\x10UPGRADE_COMPLETE\x10\n" +
	"\x12 \n" +
	"\x1cUPGRADE_INITIALIZATION_ERROR\x10\v\x12\x1c\n" +
	"\x18PRE_FLIGHT_CHECKS_FAILED\x10\f\x12\x1e\n" +
	"\x1aUPGRADE_ERROR_ROLLING_BACK\x10\r\x12\x1d\n" +
	"\x19UPGRADE_ERROR_ROLLED_BACK\x10\x0e\x12!\n" +
	"\x1dUPGRADE_ERROR_ROLLBACK_FAILED\x10\x0f\x12\x19\n" +
	"\x15UPGRADE_ERROR_UNKNOWN\x10\x10\x12\x15\n" +
	"\x11UPGRADE_TIMED_OUT\x10\x11\"\x81\x01\n" +
	"\x11AuditLogFileState\x12H\n" +
	"\x12collect_logs_since\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x10collectLogsSince\x12\"\n" +
	"\rlast_audit_id\x18\x02 \x01(\tR\vlastAuditId\"\x88\b\n" +
	"\x13ClusterHealthStatus\x12\x0e\n" +
	"\x02id\x18\t \x01(\tR\x02id\x12P\n" +
	"\x15collector_health_info\x18\x01 \x01(\v2\x1c.storage.CollectorHealthInfoR\x13collectorHealthInfo\x12f\n" +
	"\x1dadmission_control_health_info\x18\b \x01(\v2#.storage.AdmissionControlHealthInfoR\x1aadmissionControlHealthInfo\x12J\n" +
	"\x13scanner_health_info\x18\n" +
	" \x01(\v2\x1a.storage.ScannerHealthInfoR\x11scannerHealthInfo\x12`\n" +
	"\x14sensor_health_status\x18\x02 \x01(\x0e2..storage.ClusterHealthStatus.HealthStatusLabelR\x12sensorHealthStatus\x12f\n" +
	"\x17collector_health_status\x18\x03 \x01(\x0e2..storage.ClusterHealthStatus.HealthStatusLabelR\x15collectorHealthStatus\x12b\n" +
	"\x15overall_health_status\x18\x04 \x01(\x0e2..storage.ClusterHealthStatus.HealthStatusLabelR\x13overallHealthStatus\x12u\n" +
	"\x1fadmission_control_health_status\x18\a \x01(\x0e2..storage.ClusterHealthStatus.HealthStatusLabelR\x1cadmissionControlHealthStatus\x12b\n" +
	"\x15scanner_health_status\x18\v \x01(\x0e2..storage.ClusterHealthStatus.HealthStatusLabelR\x13scannerHealthStatus\x12=\n" +
	"\flast_contact\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vlastContact\x120\n" +
	"\x14health_info_complete\x18\x06 \x01(\bR\x12healthInfoComplete\"a\n" +
	"\x11HealthStatusLabel\x12\x11\n" +
	"\rUNINITIALIZED\x10\x00\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x01\x12\r\n" +
	"\tUNHEALTHY\x10\x02\x12\f\n" +
	"\bDEGRADED\x10\x03\x12\v\n" +
	"\aHEALTHY\x10\x04\"\xb8\x02\n" +
	"\x13CollectorHealthInfo\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12.\n" +
	"\x12total_desired_pods\x18\x02 \x01(\x05H\x00R\x10totalDesiredPods\x12*\n" +
	"\x10total_ready_pods\x18\x03 \x01(\x05H\x01R\x0etotalReadyPods\x126\n" +
	"\x16total_registered_nodes\x18\x04 \x01(\x05H\x02R\x14totalRegisteredNodes\x12#\n" +
	"\rstatus_errors\x18\x05 \x03(\tR\fstatusErrorsB\x18\n" +
	"\x16total_desired_pods_optB\x16\n" +
	"\x14total_ready_pods_optB\x1c\n" +
	"\x1atotal_registered_nodes_opt\"\xcf\x01\n" +
	"\x1aAdmissionControlHealthInfo\x12.\n" +
	"\x12total_desired_pods\x18\x01 \x01(\x05H\x00R\x10totalDesiredPods\x12*\n" +
	"\x10total_ready_pods\x18\x02 \x01(\x05H\x01R\x0etotalReadyPods\x12#\n" +
	"\rstatus_errors\x18\x03 \x03(\tR\fstatusErrorsB\x18\n" +
	"\x16total_desired_pods_optB\x16\n" +
	"\x14total_ready_pods_opt\"\x98\x03\n" +
	"\x11ScannerHealthInfo\x12?\n" +
	"\x1btotal_desired_analyzer_pods\x18\x01 \x01(\x05H\x00R\x18totalDesiredAnalyzerPods\x12;\n" +
	"\x19total_ready_analyzer_pods\x18\x02 \x01(\x05H\x01R\x16totalReadyAnalyzerPods\x123\n" +
	"\x15total_desired_db_pods\x18\x03 \x01(\x05H\x02R\x12totalDesiredDbPods\x12/\n" +
	"\x13total_ready_db_pods\x18\x04 \x01(\x05H\x03R\x10totalReadyDbPods\x12#\n" +
	"\rstatus_errors\x18\x05 \x03(\tR\fstatusErrorsB!\n" +
	"\x1ftotal_desired_analyzer_pods_optB\x1f\n" +
	"\x1dtotal_ready_analyzer_pods_optB\x1b\n" +
	"\x19total_desired_db_pods_optB\x19\n" +
	"\x17total_ready_db_pods_opt*u\n" +
	"\vClusterType\x12\x13\n" +
	"\x0fGENERIC_CLUSTER\x10\x00\x12\x16\n" +
	"\x12KUBERNETES_CLUSTER\x10\x01\x12\x15\n" +
	"\x11OPENSHIFT_CLUSTER\x10\x02\x12\x16\n" +
	"\x12OPENSHIFT4_CLUSTER\x10\x05\"\x04\b\x03\x10\x03\"\x04\b\x04\x10\x04*n\n" +
	"\x10CollectionMethod\x12\x14\n" +
	"\x10UNSET_COLLECTION\x10\x00\x12\x11\n" +
	"\rNO_COLLECTION\x10\x01\x12\x15\n" +
	"\rKERNEL_MODULE\x10\x02\x1a\x02\b\x01\x12\f\n" +
	"\x04EBPF\x10\x03\x1a\x02\b\x01\x12\f\n" +
	"\bCORE_BPF\x10\x04*\x83\x01\n" +
	"\vManagerType\x12\x18\n" +
	"\x14MANAGER_TYPE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13MANAGER_TYPE_MANUAL\x10\x01\x12\x1b\n" +
	"\x17MANAGER_TYPE_HELM_CHART\x10\x02\x12$\n" +
	" MANAGER_TYPE_KUBERNETES_OPERATOR\x10\x03B6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_storage_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_storage_cluster_proto_goTypes = []any{
	(ClusterType)(0),                        // 0: storage.ClusterType
	(CollectionMethod)(0),                   // 1: storage.CollectionMethod
	(ManagerType)(0),                        // 2: storage.ManagerType
	(ClusterMetadata_Type)(0),               // 3: storage.ClusterMetadata.Type
	(ClusterUpgradeStatus_Upgradability)(0), // 4: storage.ClusterUpgradeStatus.Upgradability
	(ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType)(0), // 5: storage.ClusterUpgradeStatus.UpgradeProcessStatus.UpgradeProcessType
	(UpgradeProgress_UpgradeState)(0),                                 // 6: storage.UpgradeProgress.UpgradeState
	(ClusterHealthStatus_HealthStatusLabel)(0),                        // 7: storage.ClusterHealthStatus.HealthStatusLabel
	(*ClusterMetadata)(nil),                                           // 8: storage.ClusterMetadata
	(*GoogleProviderMetadata)(nil),                                    // 9: storage.GoogleProviderMetadata
	(*AWSProviderMetadata)(nil),                                       // 10: storage.AWSProviderMetadata
	(*AzureProviderMetadata)(nil),                                     // 11: storage.AzureProviderMetadata
	(*ProviderMetadata)(nil),                                          // 12: storage.ProviderMetadata
	(*OrchestratorMetadata)(nil),                                      // 13: storage.OrchestratorMetadata
	(*AdmissionControllerConfig)(nil),                                 // 14: storage.AdmissionControllerConfig
	(*TolerationsConfig)(nil),                                         // 15: storage.TolerationsConfig
	(*StaticClusterConfig)(nil),                                       // 16: storage.StaticClusterConfig
	(*AutoLockProcessBaselinesConfig)(nil),                            // 17: storage.AutoLockProcessBaselinesConfig
	(*DynamicClusterConfig)(nil),                                      // 18: storage.DynamicClusterConfig
	(*CompleteClusterConfig)(nil),                                     // 19: storage.CompleteClusterConfig
	(*SensorDeploymentIdentification)(nil),                            // 20: storage.SensorDeploymentIdentification
	(*Cluster)(nil),                                                   // 21: storage.Cluster
	(*ClusterCertExpiryStatus)(nil),                                   // 22: storage.ClusterCertExpiryStatus
	(*ClusterStatus)(nil),                                             // 23: storage.ClusterStatus
	(*ClusterUpgradeStatus)(nil),                                      // 24: storage.ClusterUpgradeStatus
	(*UpgradeProgress)(nil),                                           // 25: storage.UpgradeProgress
	(*AuditLogFileState)(nil),                                         // 26: storage.AuditLogFileState
	(*ClusterHealthStatus)(nil),                                       // 27: storage.ClusterHealthStatus
	(*CollectorHealthInfo)(nil),                                       // 28: storage.CollectorHealthInfo
	(*AdmissionControlHealthInfo)(nil),                                // 29: storage.AdmissionControlHealthInfo
	(*ScannerHealthInfo)(nil),                                         // 30: storage.ScannerHealthInfo
	nil,                                                               // 31: storage.CompleteClusterConfig.ClusterLabelsEntry
	nil,                                                               // 32: storage.Cluster.LabelsEntry
	nil,                                                               // 33: storage.Cluster.AuditLogStateEntry
	(*ClusterUpgradeStatus_UpgradeProcessStatus)(nil),                 // 34: storage.ClusterUpgradeStatus.UpgradeProcessStatus
	(*timestamppb.Timestamp)(nil),                                     // 35: google.protobuf.Timestamp
}
var file_storage_cluster_proto_depIdxs = []int32{
	3,  // 0: storage.ClusterMetadata.type:type_name -> storage.ClusterMetadata.Type
	9,  // 1: storage.ProviderMetadata.google:type_name -> storage.GoogleProviderMetadata
	10, // 2: storage.ProviderMetadata.aws:type_name -> storage.AWSProviderMetadata
	11, // 3: storage.ProviderMetadata.azure:type_name -> storage.AzureProviderMetadata
	8,  // 4: storage.ProviderMetadata.cluster:type_name -> storage.ClusterMetadata
	35, // 5: storage.OrchestratorMetadata.build_date:type_name -> google.protobuf.Timestamp
	0,  // 6: storage.StaticClusterConfig.type:type_name -> storage.ClusterType
	1,  // 7: storage.StaticClusterConfig.collection_method:type_name -> storage.CollectionMethod
	15, // 8: storage.StaticClusterConfig.tolerations_config:type_name -> storage.TolerationsConfig
	14, // 9: storage.DynamicClusterConfig.admission_controller_config:type_name -> storage.AdmissionControllerConfig
	17, // 10: storage.DynamicClusterConfig.auto_lock_process_baselines_config:type_name -> storage.AutoLockProcessBaselinesConfig
	18, // 11: storage.CompleteClusterConfig.dynamic_config:type_name -> storage.DynamicClusterConfig
	16, // 12: storage.CompleteClusterConfig.static_config:type_name -> storage.StaticClusterConfig
	31, // 13: storage.CompleteClusterConfig.cluster_labels:type_name -> storage.CompleteClusterConfig.ClusterLabelsEntry
	0,  // 14: storage.Cluster.type:type_name -> storage.ClusterType
	32, // 15: storage.Cluster.labels:type_name -> storage.Cluster.LabelsEntry
	1,  // 16: storage.Cluster.collection_method:type_name -> storage.CollectionMethod
	23, // 17: storage.Cluster.status:type_name -> storage.ClusterStatus
	18, // 18: storage.Cluster.dynamic_config:type_name -> storage.DynamicClusterConfig
	15, // 19: storage.Cluster.tolerations_config:type_name -> storage.TolerationsConfig
	27, // 20: storage.Cluster.health_status:type_name -> storage.ClusterHealthStatus
	19, // 21: storage.Cluster.helm_config:type_name -> storage.CompleteClusterConfig
	20, // 22: storage.Cluster.most_recent_sensor_id:type_name -> storage.SensorDeploymentIdentification
	33, // 23: storage.Cluster.audit_log_state:type_name -> storage.Cluster.AuditLogStateEntry
	2,  // 24: storage.Cluster.managed_by:type_name -> storage.ManagerType
	35, // 25: storage.ClusterCertExpiryStatus.sensor_cert_expiry:type_name -> google.protobuf.Timestamp
	35, // 26: storage.ClusterCertExpiryStatus.sensor_cert_not_before:type_name -> google.protobuf.Timestamp
	35, // 27: storage.ClusterStatus.DEPRECATED_last_contact:type_name -> google.protobuf.Timestamp
	12, // 28: storage.ClusterStatus.provider_metadata:type_name -> storage.ProviderMetadata
	13, // 29: storage.ClusterStatus.orchestrator_metadata:type_name -> storage.OrchestratorMetadata
	24, // 30: storage.ClusterStatus.upgrade_status:type_name -> storage.ClusterUpgradeStatus
	22, // 31: storage.ClusterStatus.cert_expiry_status:type_name -> storage.ClusterCertExpiryStatus
	4,  // 32: storage.ClusterUpgradeStatus.upgradability:type_name -> storage.ClusterUpgradeStatus.Upgradability
	34, // 33: storage.ClusterUpgradeStatus.most_recent_process:type_name -> storage.ClusterUpgradeStatus.UpgradeProcessStatus
	6,  // 34: storage.UpgradeProgress.upgrade_state:type_name -> storage.UpgradeProgress.UpgradeState
	35, // 35: storage.UpgradeProgress.since:type_name -> google.protobuf.Timestamp
	35, // 36: storage.AuditLogFileState.collect_logs_since:type_name -> google.protobuf.Timestamp
	28, // 37: storage.ClusterHealthStatus.collector_health_info:type_name -> storage.CollectorHealthInfo
	29, // 38: storage.ClusterHealthStatus.admission_control_health_info:type_name -> storage.AdmissionControlHealthInfo
	30, // 39: storage.ClusterHealthStatus.scanner_health_info:type_name -> storage.ScannerHealthInfo
	7,  // 40: storage.ClusterHealthStatus.sensor_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 41: storage.ClusterHealthStatus.collector_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 42: storage.ClusterHealthStatus.overall_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 43: storage.ClusterHealthStatus.admission_control_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 44: storage.ClusterHealthStatus.scanner_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	35, // 45: storage.ClusterHealthStatus.last_contact:type_name -> google.protobuf.Timestamp
	26, // 46: storage.Cluster.AuditLogStateEntry.value:type_name -> storage.AuditLogFileState
	35, // 47: storage.ClusterUpgradeStatus.UpgradeProcessStatus.initiated_at:type_name -> google.protobuf.Timestamp
	25, // 48: storage.ClusterUpgradeStatus.UpgradeProcessStatus.progress:type_name -> storage.UpgradeProgress
	5,  // 49: storage.ClusterUpgradeStatus.UpgradeProcessStatus.type:type_name -> storage.ClusterUpgradeStatus.UpgradeProcessStatus.UpgradeProcessType
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_storage_cluster_proto_init() }
func file_storage_cluster_proto_init() {
	if File_storage_cluster_proto != nil {
		return
	}
	file_storage_cluster_proto_msgTypes[4].OneofWrappers = []any{
		(*ProviderMetadata_Google)(nil),
		(*ProviderMetadata_Aws)(nil),
		(*ProviderMetadata_Azure)(nil),
	}
	file_storage_cluster_proto_msgTypes[5].OneofWrappers = []any{
		(*OrchestratorMetadata_OpenshiftVersion)(nil),
	}
	file_storage_cluster_proto_msgTypes[20].OneofWrappers = []any{
		(*CollectorHealthInfo_TotalDesiredPods)(nil),
		(*CollectorHealthInfo_TotalReadyPods)(nil),
		(*CollectorHealthInfo_TotalRegisteredNodes)(nil),
	}
	file_storage_cluster_proto_msgTypes[21].OneofWrappers = []any{
		(*AdmissionControlHealthInfo_TotalDesiredPods)(nil),
		(*AdmissionControlHealthInfo_TotalReadyPods)(nil),
	}
	file_storage_cluster_proto_msgTypes[22].OneofWrappers = []any{
		(*ScannerHealthInfo_TotalDesiredAnalyzerPods)(nil),
		(*ScannerHealthInfo_TotalReadyAnalyzerPods)(nil),
		(*ScannerHealthInfo_TotalDesiredDbPods)(nil),
		(*ScannerHealthInfo_TotalReadyDbPods)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_cluster_proto_rawDesc), len(file_storage_cluster_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_cluster_proto_goTypes,
		DependencyIndexes: file_storage_cluster_proto_depIdxs,
		EnumInfos:         file_storage_cluster_proto_enumTypes,
		MessageInfos:      file_storage_cluster_proto_msgTypes,
	}.Build()
	File_storage_cluster_proto = out.File
	file_storage_cluster_proto_goTypes = nil
	file_storage_cluster_proto_depIdxs = nil
}
