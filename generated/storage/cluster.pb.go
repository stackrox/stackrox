// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/cluster.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterType int32

const (
	ClusterType_GENERIC_CLUSTER    ClusterType = 0
	ClusterType_KUBERNETES_CLUSTER ClusterType = 1
	ClusterType_OPENSHIFT_CLUSTER  ClusterType = 2
	ClusterType_OPENSHIFT4_CLUSTER ClusterType = 5
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "GENERIC_CLUSTER",
		1: "KUBERNETES_CLUSTER",
		2: "OPENSHIFT_CLUSTER",
		5: "OPENSHIFT4_CLUSTER",
	}
	ClusterType_value = map[string]int32{
		"GENERIC_CLUSTER":    0,
		"KUBERNETES_CLUSTER": 1,
		"OPENSHIFT_CLUSTER":  2,
		"OPENSHIFT4_CLUSTER": 5,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[0].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[0]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{0}
}

type CollectionMethod int32

const (
	CollectionMethod_UNSET_COLLECTION CollectionMethod = 0
	CollectionMethod_NO_COLLECTION    CollectionMethod = 1
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	CollectionMethod_KERNEL_MODULE CollectionMethod = 2
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	CollectionMethod_EBPF     CollectionMethod = 3
	CollectionMethod_CORE_BPF CollectionMethod = 4
)

// Enum value maps for CollectionMethod.
var (
	CollectionMethod_name = map[int32]string{
		0: "UNSET_COLLECTION",
		1: "NO_COLLECTION",
		2: "KERNEL_MODULE",
		3: "EBPF",
		4: "CORE_BPF",
	}
	CollectionMethod_value = map[string]int32{
		"UNSET_COLLECTION": 0,
		"NO_COLLECTION":    1,
		"KERNEL_MODULE":    2,
		"EBPF":             3,
		"CORE_BPF":         4,
	}
)

func (x CollectionMethod) Enum() *CollectionMethod {
	p := new(CollectionMethod)
	*p = x
	return p
}

func (x CollectionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[1].Descriptor()
}

func (CollectionMethod) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[1]
}

func (x CollectionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionMethod.Descriptor instead.
func (CollectionMethod) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{1}
}

type ManagerType int32

const (
	ManagerType_MANAGER_TYPE_UNKNOWN             ManagerType = 0
	ManagerType_MANAGER_TYPE_MANUAL              ManagerType = 1
	ManagerType_MANAGER_TYPE_HELM_CHART          ManagerType = 2
	ManagerType_MANAGER_TYPE_KUBERNETES_OPERATOR ManagerType = 3
)

// Enum value maps for ManagerType.
var (
	ManagerType_name = map[int32]string{
		0: "MANAGER_TYPE_UNKNOWN",
		1: "MANAGER_TYPE_MANUAL",
		2: "MANAGER_TYPE_HELM_CHART",
		3: "MANAGER_TYPE_KUBERNETES_OPERATOR",
	}
	ManagerType_value = map[string]int32{
		"MANAGER_TYPE_UNKNOWN":             0,
		"MANAGER_TYPE_MANUAL":              1,
		"MANAGER_TYPE_HELM_CHART":          2,
		"MANAGER_TYPE_KUBERNETES_OPERATOR": 3,
	}
)

func (x ManagerType) Enum() *ManagerType {
	p := new(ManagerType)
	*p = x
	return p
}

func (x ManagerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagerType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[2].Descriptor()
}

func (ManagerType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[2]
}

func (x ManagerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagerType.Descriptor instead.
func (ManagerType) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{2}
}

type ClusterMetadata_Type int32

const (
	ClusterMetadata_UNSPECIFIED ClusterMetadata_Type = 0
	ClusterMetadata_AKS         ClusterMetadata_Type = 1
	ClusterMetadata_ARO         ClusterMetadata_Type = 2
	ClusterMetadata_EKS         ClusterMetadata_Type = 3
	ClusterMetadata_GKE         ClusterMetadata_Type = 4
	ClusterMetadata_OCP         ClusterMetadata_Type = 5
	ClusterMetadata_OSD         ClusterMetadata_Type = 6
	ClusterMetadata_ROSA        ClusterMetadata_Type = 7
)

// Enum value maps for ClusterMetadata_Type.
var (
	ClusterMetadata_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "AKS",
		2: "ARO",
		3: "EKS",
		4: "GKE",
		5: "OCP",
		6: "OSD",
		7: "ROSA",
	}
	ClusterMetadata_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"AKS":         1,
		"ARO":         2,
		"EKS":         3,
		"GKE":         4,
		"OCP":         5,
		"OSD":         6,
		"ROSA":        7,
	}
)

func (x ClusterMetadata_Type) Enum() *ClusterMetadata_Type {
	p := new(ClusterMetadata_Type)
	*p = x
	return p
}

func (x ClusterMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[3].Descriptor()
}

func (ClusterMetadata_Type) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[3]
}

func (x ClusterMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterMetadata_Type.Descriptor instead.
func (ClusterMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{0, 0}
}

type ClusterUpgradeStatus_Upgradability int32

const (
	ClusterUpgradeStatus_UNSET                   ClusterUpgradeStatus_Upgradability = 0
	ClusterUpgradeStatus_UP_TO_DATE              ClusterUpgradeStatus_Upgradability = 1
	ClusterUpgradeStatus_MANUAL_UPGRADE_REQUIRED ClusterUpgradeStatus_Upgradability = 2
	ClusterUpgradeStatus_AUTO_UPGRADE_POSSIBLE   ClusterUpgradeStatus_Upgradability = 3
	// SENSOR_VERSION_HIGHER occurs when we detect that the sensor
	// is running a newer version than this Central. This is unexpected,
	// but can occur depending on the patches a customer does.
	// In this case, we will NOT automatically "upgrade" the sensor,
	// since that would be a downgrade, even if the autoupgrade setting is
	// on. The user will be allowed to manually trigger the upgrade, but they are
	// strongly discouraged from doing so without upgrading Central first, since this
	// is an unsupported configuration.
	ClusterUpgradeStatus_SENSOR_VERSION_HIGHER ClusterUpgradeStatus_Upgradability = 4
)

// Enum value maps for ClusterUpgradeStatus_Upgradability.
var (
	ClusterUpgradeStatus_Upgradability_name = map[int32]string{
		0: "UNSET",
		1: "UP_TO_DATE",
		2: "MANUAL_UPGRADE_REQUIRED",
		3: "AUTO_UPGRADE_POSSIBLE",
		4: "SENSOR_VERSION_HIGHER",
	}
	ClusterUpgradeStatus_Upgradability_value = map[string]int32{
		"UNSET":                   0,
		"UP_TO_DATE":              1,
		"MANUAL_UPGRADE_REQUIRED": 2,
		"AUTO_UPGRADE_POSSIBLE":   3,
		"SENSOR_VERSION_HIGHER":   4,
	}
)

func (x ClusterUpgradeStatus_Upgradability) Enum() *ClusterUpgradeStatus_Upgradability {
	p := new(ClusterUpgradeStatus_Upgradability)
	*p = x
	return p
}

func (x ClusterUpgradeStatus_Upgradability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterUpgradeStatus_Upgradability) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[4].Descriptor()
}

func (ClusterUpgradeStatus_Upgradability) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[4]
}

func (x ClusterUpgradeStatus_Upgradability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterUpgradeStatus_Upgradability.Descriptor instead.
func (ClusterUpgradeStatus_Upgradability) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{15, 0}
}

type ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType int32

const (
	// UPGRADE represents a sensor version upgrade.
	ClusterUpgradeStatus_UpgradeProcessStatus_UPGRADE ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType = 0
	// CERT_ROTATION represents an upgrade process that only rotates the TLS certs
	// used by the cluster, without changing anything else.
	ClusterUpgradeStatus_UpgradeProcessStatus_CERT_ROTATION ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType = 1
)

// Enum value maps for ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType.
var (
	ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType_name = map[int32]string{
		0: "UPGRADE",
		1: "CERT_ROTATION",
	}
	ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType_value = map[string]int32{
		"UPGRADE":       0,
		"CERT_ROTATION": 1,
	}
)

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Enum() *ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType {
	p := new(ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType)
	*p = x
	return p
}

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[5].Descriptor()
}

func (ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[5]
}

func (x ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType.Descriptor instead.
func (ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{15, 0, 0}
}

type UpgradeProgress_UpgradeState int32

const (
	UpgradeProgress_UPGRADE_INITIALIZING UpgradeProgress_UpgradeState = 0
	// In-progress states.
	UpgradeProgress_UPGRADER_LAUNCHING         UpgradeProgress_UpgradeState = 1
	UpgradeProgress_UPGRADER_LAUNCHED          UpgradeProgress_UpgradeState = 2
	UpgradeProgress_PRE_FLIGHT_CHECKS_COMPLETE UpgradeProgress_UpgradeState = 3
	UpgradeProgress_UPGRADE_OPERATIONS_DONE    UpgradeProgress_UpgradeState = 4
	// The success state.
	// PLEASE NUMBER ALL IN-PROGRESS STATES ABOVE THIS
	// AND ALL ERROR STATES BELOW THIS.
	UpgradeProgress_UPGRADE_COMPLETE UpgradeProgress_UpgradeState = 10
	// Error states.
	UpgradeProgress_UPGRADE_INITIALIZATION_ERROR  UpgradeProgress_UpgradeState = 11
	UpgradeProgress_PRE_FLIGHT_CHECKS_FAILED      UpgradeProgress_UpgradeState = 12
	UpgradeProgress_UPGRADE_ERROR_ROLLING_BACK    UpgradeProgress_UpgradeState = 13
	UpgradeProgress_UPGRADE_ERROR_ROLLED_BACK     UpgradeProgress_UpgradeState = 14
	UpgradeProgress_UPGRADE_ERROR_ROLLBACK_FAILED UpgradeProgress_UpgradeState = 15
	UpgradeProgress_UPGRADE_ERROR_UNKNOWN         UpgradeProgress_UpgradeState = 16
	UpgradeProgress_UPGRADE_TIMED_OUT             UpgradeProgress_UpgradeState = 17
)

// Enum value maps for UpgradeProgress_UpgradeState.
var (
	UpgradeProgress_UpgradeState_name = map[int32]string{
		0:  "UPGRADE_INITIALIZING",
		1:  "UPGRADER_LAUNCHING",
		2:  "UPGRADER_LAUNCHED",
		3:  "PRE_FLIGHT_CHECKS_COMPLETE",
		4:  "UPGRADE_OPERATIONS_DONE",
		10: "UPGRADE_COMPLETE",
		11: "UPGRADE_INITIALIZATION_ERROR",
		12: "PRE_FLIGHT_CHECKS_FAILED",
		13: "UPGRADE_ERROR_ROLLING_BACK",
		14: "UPGRADE_ERROR_ROLLED_BACK",
		15: "UPGRADE_ERROR_ROLLBACK_FAILED",
		16: "UPGRADE_ERROR_UNKNOWN",
		17: "UPGRADE_TIMED_OUT",
	}
	UpgradeProgress_UpgradeState_value = map[string]int32{
		"UPGRADE_INITIALIZING":          0,
		"UPGRADER_LAUNCHING":            1,
		"UPGRADER_LAUNCHED":             2,
		"PRE_FLIGHT_CHECKS_COMPLETE":    3,
		"UPGRADE_OPERATIONS_DONE":       4,
		"UPGRADE_COMPLETE":              10,
		"UPGRADE_INITIALIZATION_ERROR":  11,
		"PRE_FLIGHT_CHECKS_FAILED":      12,
		"UPGRADE_ERROR_ROLLING_BACK":    13,
		"UPGRADE_ERROR_ROLLED_BACK":     14,
		"UPGRADE_ERROR_ROLLBACK_FAILED": 15,
		"UPGRADE_ERROR_UNKNOWN":         16,
		"UPGRADE_TIMED_OUT":             17,
	}
)

func (x UpgradeProgress_UpgradeState) Enum() *UpgradeProgress_UpgradeState {
	p := new(UpgradeProgress_UpgradeState)
	*p = x
	return p
}

func (x UpgradeProgress_UpgradeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeProgress_UpgradeState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[6].Descriptor()
}

func (UpgradeProgress_UpgradeState) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[6]
}

func (x UpgradeProgress_UpgradeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeProgress_UpgradeState.Descriptor instead.
func (UpgradeProgress_UpgradeState) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{16, 0}
}

type ClusterHealthStatus_HealthStatusLabel int32

const (
	ClusterHealthStatus_UNINITIALIZED ClusterHealthStatus_HealthStatusLabel = 0
	// Only collector can have unavailable status
	ClusterHealthStatus_UNAVAILABLE ClusterHealthStatus_HealthStatusLabel = 1
	ClusterHealthStatus_UNHEALTHY   ClusterHealthStatus_HealthStatusLabel = 2
	ClusterHealthStatus_DEGRADED    ClusterHealthStatus_HealthStatusLabel = 3
	ClusterHealthStatus_HEALTHY     ClusterHealthStatus_HealthStatusLabel = 4
)

// Enum value maps for ClusterHealthStatus_HealthStatusLabel.
var (
	ClusterHealthStatus_HealthStatusLabel_name = map[int32]string{
		0: "UNINITIALIZED",
		1: "UNAVAILABLE",
		2: "UNHEALTHY",
		3: "DEGRADED",
		4: "HEALTHY",
	}
	ClusterHealthStatus_HealthStatusLabel_value = map[string]int32{
		"UNINITIALIZED": 0,
		"UNAVAILABLE":   1,
		"UNHEALTHY":     2,
		"DEGRADED":      3,
		"HEALTHY":       4,
	}
)

func (x ClusterHealthStatus_HealthStatusLabel) Enum() *ClusterHealthStatus_HealthStatusLabel {
	p := new(ClusterHealthStatus_HealthStatusLabel)
	*p = x
	return p
}

func (x ClusterHealthStatus_HealthStatusLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterHealthStatus_HealthStatusLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_cluster_proto_enumTypes[7].Descriptor()
}

func (ClusterHealthStatus_HealthStatusLabel) Type() protoreflect.EnumType {
	return &file_storage_cluster_proto_enumTypes[7]
}

func (x ClusterHealthStatus_HealthStatusLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterHealthStatus_HealthStatusLabel.Descriptor instead.
func (ClusterHealthStatus_HealthStatusLabel) EnumDescriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{18, 0}
}

// ClusterMetadata contains metadata information about the cluster infrastructure.
type ClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ClusterMetadata_Type `protobuf:"varint,1,opt,name=type,proto3,enum=storage.ClusterMetadata_Type" json:"type,omitempty" search:"Cluster Type"` // @gotags: search:"Cluster Type"
	// Name represents the name under which the cluster is registered with the
	// cloud provider. In case of self managed OpenShift it is the name chosen
	// by the OpenShift installer.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Id represents a unique ID under which the cluster is registered with the
	// cloud provider. Not all cluster types have an id. For all OpenShift
	// clusters, this is the Red Hat `cluster_id` registered with OCM.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClusterMetadata) Reset() {
	*x = ClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetadata) ProtoMessage() {}

func (x *ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetadata.ProtoReflect.Descriptor instead.
func (*ClusterMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterMetadata) GetType() ClusterMetadata_Type {
	if x != nil {
		return x.Type
	}
	return ClusterMetadata_UNSPECIFIED
}

func (x *ClusterMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GoogleProviderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Deprecated in favor of providerMetadata.cluster.name.
	//
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *GoogleProviderMetadata) Reset() {
	*x = GoogleProviderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleProviderMetadata) ProtoMessage() {}

func (x *GoogleProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleProviderMetadata.ProtoReflect.Descriptor instead.
func (*GoogleProviderMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *GoogleProviderMetadata) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *GoogleProviderMetadata) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type AWSProviderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSProviderMetadata) Reset() {
	*x = AWSProviderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSProviderMetadata) ProtoMessage() {}

func (x *AWSProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSProviderMetadata.ProtoReflect.Descriptor instead.
func (*AWSProviderMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *AWSProviderMetadata) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AzureProviderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *AzureProviderMetadata) Reset() {
	*x = AzureProviderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureProviderMetadata) ProtoMessage() {}

func (x *AzureProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureProviderMetadata.ProtoReflect.Descriptor instead.
func (*AzureProviderMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *AzureProviderMetadata) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ProviderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Zone   string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*ProviderMetadata_Google
	//	*ProviderMetadata_Aws
	//	*ProviderMetadata_Azure
	Provider isProviderMetadata_Provider `protobuf_oneof:"Provider"`
	Verified bool                        `protobuf:"varint,15,opt,name=verified,proto3" json:"verified,omitempty"`
	Cluster  *ClusterMetadata            `protobuf:"bytes,16,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ProviderMetadata) Reset() {
	*x = ProviderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderMetadata) ProtoMessage() {}

func (x *ProviderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderMetadata.ProtoReflect.Descriptor instead.
func (*ProviderMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *ProviderMetadata) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProviderMetadata) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (m *ProviderMetadata) GetProvider() isProviderMetadata_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *ProviderMetadata) GetGoogle() *GoogleProviderMetadata {
	if x, ok := x.GetProvider().(*ProviderMetadata_Google); ok {
		return x.Google
	}
	return nil
}

func (x *ProviderMetadata) GetAws() *AWSProviderMetadata {
	if x, ok := x.GetProvider().(*ProviderMetadata_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *ProviderMetadata) GetAzure() *AzureProviderMetadata {
	if x, ok := x.GetProvider().(*ProviderMetadata_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *ProviderMetadata) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ProviderMetadata) GetCluster() *ClusterMetadata {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type isProviderMetadata_Provider interface {
	isProviderMetadata_Provider()
}

type ProviderMetadata_Google struct {
	Google *GoogleProviderMetadata `protobuf:"bytes,3,opt,name=google,proto3,oneof"`
}

type ProviderMetadata_Aws struct {
	Aws *AWSProviderMetadata `protobuf:"bytes,4,opt,name=aws,proto3,oneof"`
}

type ProviderMetadata_Azure struct {
	Azure *AzureProviderMetadata `protobuf:"bytes,5,opt,name=azure,proto3,oneof"`
}

func (*ProviderMetadata_Google) isProviderMetadata_Provider() {}

func (*ProviderMetadata_Aws) isProviderMetadata_Provider() {}

func (*ProviderMetadata_Azure) isProviderMetadata_Provider() {}

type OrchestratorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty" search:"Cluster Kubernetes Version"` // @gotags: search:"Cluster Kubernetes Version"
	// Types that are assignable to IsOpenshift:
	//
	//	*OrchestratorMetadata_OpenshiftVersion
	IsOpenshift isOrchestratorMetadata_IsOpenshift `protobuf_oneof:"is_openshift"`
	BuildDate   *timestamppb.Timestamp             `protobuf:"bytes,2,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	ApiVersions []string                           `protobuf:"bytes,3,rep,name=api_versions,json=apiVersions,proto3" json:"api_versions,omitempty"`
}

func (x *OrchestratorMetadata) Reset() {
	*x = OrchestratorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorMetadata) ProtoMessage() {}

func (x *OrchestratorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorMetadata.ProtoReflect.Descriptor instead.
func (*OrchestratorMetadata) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *OrchestratorMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (m *OrchestratorMetadata) GetIsOpenshift() isOrchestratorMetadata_IsOpenshift {
	if m != nil {
		return m.IsOpenshift
	}
	return nil
}

func (x *OrchestratorMetadata) GetOpenshiftVersion() string {
	if x, ok := x.GetIsOpenshift().(*OrchestratorMetadata_OpenshiftVersion); ok {
		return x.OpenshiftVersion
	}
	return ""
}

func (x *OrchestratorMetadata) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *OrchestratorMetadata) GetApiVersions() []string {
	if x != nil {
		return x.ApiVersions
	}
	return nil
}

type isOrchestratorMetadata_IsOpenshift interface {
	isOrchestratorMetadata_IsOpenshift()
}

type OrchestratorMetadata_OpenshiftVersion struct {
	OpenshiftVersion string `protobuf:"bytes,4,opt,name=openshift_version,json=openshiftVersion,proto3,oneof"`
}

func (*OrchestratorMetadata_OpenshiftVersion) isOrchestratorMetadata_IsOpenshift() {}

type AdmissionControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TimeoutSeconds   int32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	ScanInline       bool  `protobuf:"varint,3,opt,name=scan_inline,json=scanInline,proto3" json:"scan_inline,omitempty"`
	DisableBypass    bool  `protobuf:"varint,4,opt,name=disable_bypass,json=disableBypass,proto3" json:"disable_bypass,omitempty"`
	EnforceOnUpdates bool  `protobuf:"varint,5,opt,name=enforce_on_updates,json=enforceOnUpdates,proto3" json:"enforce_on_updates,omitempty"`
}

func (x *AdmissionControllerConfig) Reset() {
	*x = AdmissionControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmissionControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionControllerConfig) ProtoMessage() {}

func (x *AdmissionControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmissionControllerConfig.ProtoReflect.Descriptor instead.
func (*AdmissionControllerConfig) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *AdmissionControllerConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AdmissionControllerConfig) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AdmissionControllerConfig) GetScanInline() bool {
	if x != nil {
		return x.ScanInline
	}
	return false
}

func (x *AdmissionControllerConfig) GetDisableBypass() bool {
	if x != nil {
		return x.DisableBypass
	}
	return false
}

func (x *AdmissionControllerConfig) GetEnforceOnUpdates() bool {
	if x != nil {
		return x.EnforceOnUpdates
	}
	return false
}

type TolerationsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *TolerationsConfig) Reset() {
	*x = TolerationsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TolerationsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TolerationsConfig) ProtoMessage() {}

func (x *TolerationsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TolerationsConfig.ProtoReflect.Descriptor instead.
func (*TolerationsConfig) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *TolerationsConfig) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// The difference between Static and Dynamic cluster config is that Static values are not sent over the Central to Sensor gRPC connection. They are used, for example, to generate manifests that can be used to set up the Secured Cluster's k8s components. They are *not* dynamically reloaded.
type StaticClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                       ClusterType        `protobuf:"varint,1,opt,name=type,proto3,enum=storage.ClusterType" json:"type,omitempty"`
	MainImage                  string             `protobuf:"bytes,2,opt,name=main_image,json=mainImage,proto3" json:"main_image,omitempty"`
	CentralApiEndpoint         string             `protobuf:"bytes,3,opt,name=central_api_endpoint,json=centralApiEndpoint,proto3" json:"central_api_endpoint,omitempty"`
	CollectionMethod           CollectionMethod   `protobuf:"varint,4,opt,name=collection_method,json=collectionMethod,proto3,enum=storage.CollectionMethod" json:"collection_method,omitempty"`
	CollectorImage             string             `protobuf:"bytes,5,opt,name=collector_image,json=collectorImage,proto3" json:"collector_image,omitempty"`
	AdmissionController        bool               `protobuf:"varint,6,opt,name=admission_controller,json=admissionController,proto3" json:"admission_controller,omitempty"`
	AdmissionControllerUpdates bool               `protobuf:"varint,7,opt,name=admission_controller_updates,json=admissionControllerUpdates,proto3" json:"admission_controller_updates,omitempty"`
	TolerationsConfig          *TolerationsConfig `protobuf:"bytes,8,opt,name=tolerations_config,json=tolerationsConfig,proto3" json:"tolerations_config,omitempty"`
	SlimCollector              bool               `protobuf:"varint,9,opt,name=slim_collector,json=slimCollector,proto3" json:"slim_collector,omitempty"`
	AdmissionControllerEvents  bool               `protobuf:"varint,10,opt,name=admission_controller_events,json=admissionControllerEvents,proto3" json:"admission_controller_events,omitempty"`
}

func (x *StaticClusterConfig) Reset() {
	*x = StaticClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticClusterConfig) ProtoMessage() {}

func (x *StaticClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticClusterConfig.ProtoReflect.Descriptor instead.
func (*StaticClusterConfig) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *StaticClusterConfig) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_GENERIC_CLUSTER
}

func (x *StaticClusterConfig) GetMainImage() string {
	if x != nil {
		return x.MainImage
	}
	return ""
}

func (x *StaticClusterConfig) GetCentralApiEndpoint() string {
	if x != nil {
		return x.CentralApiEndpoint
	}
	return ""
}

func (x *StaticClusterConfig) GetCollectionMethod() CollectionMethod {
	if x != nil {
		return x.CollectionMethod
	}
	return CollectionMethod_UNSET_COLLECTION
}

func (x *StaticClusterConfig) GetCollectorImage() string {
	if x != nil {
		return x.CollectorImage
	}
	return ""
}

func (x *StaticClusterConfig) GetAdmissionController() bool {
	if x != nil {
		return x.AdmissionController
	}
	return false
}

func (x *StaticClusterConfig) GetAdmissionControllerUpdates() bool {
	if x != nil {
		return x.AdmissionControllerUpdates
	}
	return false
}

func (x *StaticClusterConfig) GetTolerationsConfig() *TolerationsConfig {
	if x != nil {
		return x.TolerationsConfig
	}
	return nil
}

func (x *StaticClusterConfig) GetSlimCollector() bool {
	if x != nil {
		return x.SlimCollector
	}
	return false
}

func (x *StaticClusterConfig) GetAdmissionControllerEvents() bool {
	if x != nil {
		return x.AdmissionControllerEvents
	}
	return false
}

// The difference between Static and Dynamic cluster config is that Dynamic values are sent over the Central to Sensor gRPC connection. This has the benefit of allowing for "hot reloading" of values without restarting Secured cluster components.
type DynamicClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdmissionControllerConfig *AdmissionControllerConfig `protobuf:"bytes,1,opt,name=admission_controller_config,json=admissionControllerConfig,proto3" json:"admission_controller_config,omitempty"`
	RegistryOverride          string                     `protobuf:"bytes,2,opt,name=registry_override,json=registryOverride,proto3" json:"registry_override,omitempty"`
	DisableAuditLogs          bool                       `protobuf:"varint,3,opt,name=disable_audit_logs,json=disableAuditLogs,proto3" json:"disable_audit_logs,omitempty"`
}

func (x *DynamicClusterConfig) Reset() {
	*x = DynamicClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicClusterConfig) ProtoMessage() {}

func (x *DynamicClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicClusterConfig.ProtoReflect.Descriptor instead.
func (*DynamicClusterConfig) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *DynamicClusterConfig) GetAdmissionControllerConfig() *AdmissionControllerConfig {
	if x != nil {
		return x.AdmissionControllerConfig
	}
	return nil
}

func (x *DynamicClusterConfig) GetRegistryOverride() string {
	if x != nil {
		return x.RegistryOverride
	}
	return ""
}

func (x *DynamicClusterConfig) GetDisableAuditLogs() bool {
	if x != nil {
		return x.DisableAuditLogs
	}
	return false
}

// Encodes a complete cluster configuration minus ID/Name identifiers
// including static and dynamic settings.
type CompleteClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicConfig     *DynamicClusterConfig `protobuf:"bytes,1,opt,name=dynamic_config,json=dynamicConfig,proto3" json:"dynamic_config,omitempty"`
	StaticConfig      *StaticClusterConfig  `protobuf:"bytes,2,opt,name=static_config,json=staticConfig,proto3" json:"static_config,omitempty"`
	ConfigFingerprint string                `protobuf:"bytes,3,opt,name=config_fingerprint,json=configFingerprint,proto3" json:"config_fingerprint,omitempty"`
	ClusterLabels     map[string]string     `protobuf:"bytes,4,rep,name=cluster_labels,json=clusterLabels,proto3" json:"cluster_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompleteClusterConfig) Reset() {
	*x = CompleteClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteClusterConfig) ProtoMessage() {}

func (x *CompleteClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteClusterConfig.ProtoReflect.Descriptor instead.
func (*CompleteClusterConfig) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *CompleteClusterConfig) GetDynamicConfig() *DynamicClusterConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *CompleteClusterConfig) GetStaticConfig() *StaticClusterConfig {
	if x != nil {
		return x.StaticConfig
	}
	return nil
}

func (x *CompleteClusterConfig) GetConfigFingerprint() string {
	if x != nil {
		return x.ConfigFingerprint
	}
	return ""
}

func (x *CompleteClusterConfig) GetClusterLabels() map[string]string {
	if x != nil {
		return x.ClusterLabels
	}
	return nil
}

// StackRoxDeploymentIdentification aims at uniquely identifying a StackRox Sensor deployment. It is used to determine
// whether a sensor connection comes from a sensor pod that has restarted or was recreated (possibly after a network
// partition), or from a deployment in a different namespace or cluster.
type SensorDeploymentIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemNamespaceId   string `protobuf:"bytes,1,opt,name=system_namespace_id,json=systemNamespaceId,proto3" json:"system_namespace_id,omitempty"`
	DefaultNamespaceId  string `protobuf:"bytes,2,opt,name=default_namespace_id,json=defaultNamespaceId,proto3" json:"default_namespace_id,omitempty"`
	AppNamespace        string `protobuf:"bytes,3,opt,name=app_namespace,json=appNamespace,proto3" json:"app_namespace,omitempty"`
	AppNamespaceId      string `protobuf:"bytes,4,opt,name=app_namespace_id,json=appNamespaceId,proto3" json:"app_namespace_id,omitempty"`
	AppServiceaccountId string `protobuf:"bytes,5,opt,name=app_serviceaccount_id,json=appServiceaccountId,proto3" json:"app_serviceaccount_id,omitempty"`
	K8SNodeName         string `protobuf:"bytes,6,opt,name=k8s_node_name,json=k8sNodeName,proto3" json:"k8s_node_name,omitempty"`
}

func (x *SensorDeploymentIdentification) Reset() {
	*x = SensorDeploymentIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorDeploymentIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDeploymentIdentification) ProtoMessage() {}

func (x *SensorDeploymentIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDeploymentIdentification.ProtoReflect.Descriptor instead.
func (*SensorDeploymentIdentification) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *SensorDeploymentIdentification) GetSystemNamespaceId() string {
	if x != nil {
		return x.SystemNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetDefaultNamespaceId() string {
	if x != nil {
		return x.DefaultNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppNamespace() string {
	if x != nil {
		return x.AppNamespace
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppNamespaceId() string {
	if x != nil {
		return x.AppNamespaceId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetAppServiceaccountId() string {
	if x != nil {
		return x.AppServiceaccountId
	}
	return ""
}

func (x *SensorDeploymentIdentification) GetK8SNodeName() string {
	if x != nil {
		return x.K8SNodeName
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Cluster ID,hidden,store" sql:"pk,type(uuid)"`                                                                                                  // @gotags: search:"Cluster ID,hidden,store" sql:"pk,type(uuid)"
	Name               string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" search:"Cluster,store" sql:"unique"`                                                                                              // @gotags: search:"Cluster,store" sql:"unique"
	Type               ClusterType       `protobuf:"varint,3,opt,name=type,proto3,enum=storage.ClusterType" json:"type,omitempty" search:"Cluster Platform Type"`                                                                    // @gotags: search:"Cluster Platform Type"
	Labels             map[string]string `protobuf:"bytes,27,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" search:"Cluster Label"` // @gotags: search:"Cluster Label"
	MainImage          string            `protobuf:"bytes,4,opt,name=main_image,json=mainImage,proto3" json:"main_image,omitempty"`
	CollectorImage     string            `protobuf:"bytes,16,opt,name=collector_image,json=collectorImage,proto3" json:"collector_image,omitempty"`
	CentralApiEndpoint string            `protobuf:"bytes,5,opt,name=central_api_endpoint,json=centralApiEndpoint,proto3" json:"central_api_endpoint,omitempty"`
	// Deprecated: Marked as deprecated in storage/cluster.proto.
	RuntimeSupport             bool                  `protobuf:"varint,7,opt,name=runtime_support,json=runtimeSupport,proto3" json:"runtime_support,omitempty"`
	CollectionMethod           CollectionMethod      `protobuf:"varint,17,opt,name=collection_method,json=collectionMethod,proto3,enum=storage.CollectionMethod" json:"collection_method,omitempty"`
	AdmissionController        bool                  `protobuf:"varint,13,opt,name=admission_controller,json=admissionController,proto3" json:"admission_controller,omitempty"`
	AdmissionControllerUpdates bool                  `protobuf:"varint,21,opt,name=admission_controller_updates,json=admissionControllerUpdates,proto3" json:"admission_controller_updates,omitempty"`
	AdmissionControllerEvents  bool                  `protobuf:"varint,25,opt,name=admission_controller_events,json=admissionControllerEvents,proto3" json:"admission_controller_events,omitempty"`
	Status                     *ClusterStatus        `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	DynamicConfig              *DynamicClusterConfig `protobuf:"bytes,18,opt,name=dynamic_config,json=dynamicConfig,proto3" json:"dynamic_config,omitempty"`
	TolerationsConfig          *TolerationsConfig    `protobuf:"bytes,19,opt,name=tolerations_config,json=tolerationsConfig,proto3" json:"tolerations_config,omitempty"`
	Priority                   int64                 `protobuf:"varint,20,opt,name=priority,proto3" json:"priority,omitempty"`
	HealthStatus               *ClusterHealthStatus  `protobuf:"bytes,22,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty" sql:"-"` // @gotags: sql:"-"
	SlimCollector              bool                  `protobuf:"varint,23,opt,name=slim_collector,json=slimCollector,proto3" json:"slim_collector,omitempty"`
	// The Helm configuration of a cluster is only present in case the cluster is Helm- or Operator-managed.
	HelmConfig *CompleteClusterConfig `protobuf:"bytes,24,opt,name=helm_config,json=helmConfig,proto3" json:"helm_config,omitempty"`
	// most_recent_sensor_id is the current or most recent identification of a successfully connected sensor (if any).
	MostRecentSensorId *SensorDeploymentIdentification `protobuf:"bytes,26,opt,name=most_recent_sensor_id,json=mostRecentSensorId,proto3" json:"most_recent_sensor_id,omitempty"`
	// For internal use only.
	AuditLogState map[string]*AuditLogFileState `protobuf:"bytes,28,rep,name=audit_log_state,json=auditLogState,proto3" json:"audit_log_state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InitBundleId  string                        `protobuf:"bytes,29,opt,name=init_bundle_id,json=initBundleId,proto3" json:"init_bundle_id,omitempty"`
	ManagedBy     ManagerType                   `protobuf:"varint,30,opt,name=managed_by,json=managedBy,proto3,enum=storage.ManagerType" json:"managed_by,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_GENERIC_CLUSTER
}

func (x *Cluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Cluster) GetMainImage() string {
	if x != nil {
		return x.MainImage
	}
	return ""
}

func (x *Cluster) GetCollectorImage() string {
	if x != nil {
		return x.CollectorImage
	}
	return ""
}

func (x *Cluster) GetCentralApiEndpoint() string {
	if x != nil {
		return x.CentralApiEndpoint
	}
	return ""
}

// Deprecated: Marked as deprecated in storage/cluster.proto.
func (x *Cluster) GetRuntimeSupport() bool {
	if x != nil {
		return x.RuntimeSupport
	}
	return false
}

func (x *Cluster) GetCollectionMethod() CollectionMethod {
	if x != nil {
		return x.CollectionMethod
	}
	return CollectionMethod_UNSET_COLLECTION
}

func (x *Cluster) GetAdmissionController() bool {
	if x != nil {
		return x.AdmissionController
	}
	return false
}

func (x *Cluster) GetAdmissionControllerUpdates() bool {
	if x != nil {
		return x.AdmissionControllerUpdates
	}
	return false
}

func (x *Cluster) GetAdmissionControllerEvents() bool {
	if x != nil {
		return x.AdmissionControllerEvents
	}
	return false
}

func (x *Cluster) GetStatus() *ClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Cluster) GetDynamicConfig() *DynamicClusterConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *Cluster) GetTolerationsConfig() *TolerationsConfig {
	if x != nil {
		return x.TolerationsConfig
	}
	return nil
}

func (x *Cluster) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Cluster) GetHealthStatus() *ClusterHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *Cluster) GetSlimCollector() bool {
	if x != nil {
		return x.SlimCollector
	}
	return false
}

func (x *Cluster) GetHelmConfig() *CompleteClusterConfig {
	if x != nil {
		return x.HelmConfig
	}
	return nil
}

func (x *Cluster) GetMostRecentSensorId() *SensorDeploymentIdentification {
	if x != nil {
		return x.MostRecentSensorId
	}
	return nil
}

func (x *Cluster) GetAuditLogState() map[string]*AuditLogFileState {
	if x != nil {
		return x.AuditLogState
	}
	return nil
}

func (x *Cluster) GetInitBundleId() string {
	if x != nil {
		return x.InitBundleId
	}
	return ""
}

func (x *Cluster) GetManagedBy() ManagerType {
	if x != nil {
		return x.ManagedBy
	}
	return ManagerType_MANAGER_TYPE_UNKNOWN
}

type ClusterCertExpiryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorCertExpiry    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sensor_cert_expiry,json=sensorCertExpiry,proto3" json:"sensor_cert_expiry,omitempty"`
	SensorCertNotBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sensor_cert_not_before,json=sensorCertNotBefore,proto3" json:"sensor_cert_not_before,omitempty"`
}

func (x *ClusterCertExpiryStatus) Reset() {
	*x = ClusterCertExpiryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCertExpiryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCertExpiryStatus) ProtoMessage() {}

func (x *ClusterCertExpiryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCertExpiryStatus.ProtoReflect.Descriptor instead.
func (*ClusterCertExpiryStatus) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterCertExpiryStatus) GetSensorCertExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SensorCertExpiry
	}
	return nil
}

func (x *ClusterCertExpiryStatus) GetSensorCertNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.SensorCertNotBefore
	}
	return nil
}

type ClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorVersion string `protobuf:"bytes,1,opt,name=sensor_version,json=sensorVersion,proto3" json:"sensor_version,omitempty"`
	// This field has been deprecated starting release 49.0. Use healthStatus.lastContact instead.
	DEPRECATEDLastContact *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=DEPRECATED_last_contact,json=DEPRECATEDLastContact,proto3" json:"DEPRECATED_last_contact,omitempty"`
	ProviderMetadata      *ProviderMetadata        `protobuf:"bytes,3,opt,name=provider_metadata,json=providerMetadata,proto3" json:"provider_metadata,omitempty"`
	OrchestratorMetadata  *OrchestratorMetadata    `protobuf:"bytes,4,opt,name=orchestrator_metadata,json=orchestratorMetadata,proto3" json:"orchestrator_metadata,omitempty"`
	UpgradeStatus         *ClusterUpgradeStatus    `protobuf:"bytes,5,opt,name=upgrade_status,json=upgradeStatus,proto3" json:"upgrade_status,omitempty"`
	CertExpiryStatus      *ClusterCertExpiryStatus `protobuf:"bytes,6,opt,name=cert_expiry_status,json=certExpiryStatus,proto3" json:"cert_expiry_status,omitempty"`
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterStatus) GetSensorVersion() string {
	if x != nil {
		return x.SensorVersion
	}
	return ""
}

func (x *ClusterStatus) GetDEPRECATEDLastContact() *timestamppb.Timestamp {
	if x != nil {
		return x.DEPRECATEDLastContact
	}
	return nil
}

func (x *ClusterStatus) GetProviderMetadata() *ProviderMetadata {
	if x != nil {
		return x.ProviderMetadata
	}
	return nil
}

func (x *ClusterStatus) GetOrchestratorMetadata() *OrchestratorMetadata {
	if x != nil {
		return x.OrchestratorMetadata
	}
	return nil
}

func (x *ClusterStatus) GetUpgradeStatus() *ClusterUpgradeStatus {
	if x != nil {
		return x.UpgradeStatus
	}
	return nil
}

func (x *ClusterStatus) GetCertExpiryStatus() *ClusterCertExpiryStatus {
	if x != nil {
		return x.CertExpiryStatus
	}
	return nil
}

type ClusterUpgradeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upgradability             ClusterUpgradeStatus_Upgradability `protobuf:"varint,1,opt,name=upgradability,proto3,enum=storage.ClusterUpgradeStatus_Upgradability" json:"upgradability,omitempty"`
	UpgradabilityStatusReason string                             `protobuf:"bytes,2,opt,name=upgradability_status_reason,json=upgradabilityStatusReason,proto3" json:"upgradability_status_reason,omitempty"`
	// The progress of the current or most recent upgrade, if any,
	// Note that we don't store any historical data -- the moment
	// a new upgrade attempt is triggered, we overwrite
	// information from the previous attempt.
	MostRecentProcess *ClusterUpgradeStatus_UpgradeProcessStatus `protobuf:"bytes,3,opt,name=most_recent_process,json=mostRecentProcess,proto3" json:"most_recent_process,omitempty"`
}

func (x *ClusterUpgradeStatus) Reset() {
	*x = ClusterUpgradeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUpgradeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpgradeStatus) ProtoMessage() {}

func (x *ClusterUpgradeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUpgradeStatus.ProtoReflect.Descriptor instead.
func (*ClusterUpgradeStatus) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterUpgradeStatus) GetUpgradability() ClusterUpgradeStatus_Upgradability {
	if x != nil {
		return x.Upgradability
	}
	return ClusterUpgradeStatus_UNSET
}

func (x *ClusterUpgradeStatus) GetUpgradabilityStatusReason() string {
	if x != nil {
		return x.UpgradabilityStatusReason
	}
	return ""
}

func (x *ClusterUpgradeStatus) GetMostRecentProcess() *ClusterUpgradeStatus_UpgradeProcessStatus {
	if x != nil {
		return x.MostRecentProcess
	}
	return nil
}

type UpgradeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeState        UpgradeProgress_UpgradeState `protobuf:"varint,1,opt,name=upgrade_state,json=upgradeState,proto3,enum=storage.UpgradeProgress_UpgradeState" json:"upgrade_state,omitempty"`
	UpgradeStatusDetail string                       `protobuf:"bytes,2,opt,name=upgrade_status_detail,json=upgradeStatusDetail,proto3" json:"upgrade_status_detail,omitempty"`
	Since               *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *UpgradeProgress) Reset() {
	*x = UpgradeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeProgress) ProtoMessage() {}

func (x *UpgradeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeProgress.ProtoReflect.Descriptor instead.
func (*UpgradeProgress) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *UpgradeProgress) GetUpgradeState() UpgradeProgress_UpgradeState {
	if x != nil {
		return x.UpgradeState
	}
	return UpgradeProgress_UPGRADE_INITIALIZING
}

func (x *UpgradeProgress) GetUpgradeStatusDetail() string {
	if x != nil {
		return x.UpgradeStatusDetail
	}
	return ""
}

func (x *UpgradeProgress) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

// AuditLogFileState tracks the last audit log event timestamp and ID that was collected by Compliance
// For internal use only
type AuditLogFileState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectLogsSince *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=collect_logs_since,json=collectLogsSince,proto3" json:"collect_logs_since,omitempty"`
	LastAuditId      string                 `protobuf:"bytes,2,opt,name=last_audit_id,json=lastAuditId,proto3" json:"last_audit_id,omitempty"` // Previously received audit id. May be empty
}

func (x *AuditLogFileState) Reset() {
	*x = AuditLogFileState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogFileState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogFileState) ProtoMessage() {}

func (x *AuditLogFileState) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogFileState.ProtoReflect.Descriptor instead.
func (*AuditLogFileState) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *AuditLogFileState) GetCollectLogsSince() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectLogsSince
	}
	return nil
}

func (x *AuditLogFileState) GetLastAuditId() string {
	if x != nil {
		return x.LastAuditId
	}
	return ""
}

type ClusterHealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                      `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty" sql:"pk,fk(Cluster:id),no-fk-constraint,type(uuid)"` // @gotags: sql:"pk,fk(Cluster:id),no-fk-constraint,type(uuid)"
	CollectorHealthInfo        *CollectorHealthInfo        `protobuf:"bytes,1,opt,name=collector_health_info,json=collectorHealthInfo,proto3" json:"collector_health_info,omitempty"`
	AdmissionControlHealthInfo *AdmissionControlHealthInfo `protobuf:"bytes,8,opt,name=admission_control_health_info,json=admissionControlHealthInfo,proto3" json:"admission_control_health_info,omitempty"`
	// scanner_health_info is filled when the scanner is deployed on a secured cluster (so called "local scanner").
	// Please do not confuse this with the default scanner deployment on a central cluster.
	ScannerHealthInfo *ScannerHealthInfo `protobuf:"bytes,10,opt,name=scanner_health_info,json=scannerHealthInfo,proto3" json:"scanner_health_info,omitempty"`
	// The following _health_status fields provide aggregated health status of the respective components and are assigned by central.
	SensorHealthStatus           ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,2,opt,name=sensor_health_status,json=sensorHealthStatus,proto3,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"sensor_health_status,omitempty" search:"Sensor Status,store"`                                 // @gotags: search:"Sensor Status,store"
	CollectorHealthStatus        ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,3,opt,name=collector_health_status,json=collectorHealthStatus,proto3,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"collector_health_status,omitempty" search:"Collector Status,store"`                        // @gotags: search:"Collector Status,store"
	OverallHealthStatus          ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,4,opt,name=overall_health_status,json=overallHealthStatus,proto3,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"overall_health_status,omitempty" search:"Cluster Status,store"`                              // @gotags: search:"Cluster Status,store"
	AdmissionControlHealthStatus ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,7,opt,name=admission_control_health_status,json=admissionControlHealthStatus,proto3,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"admission_control_health_status,omitempty" search:"Admission Control Status,store"` // @gotags: search:"Admission Control Status,store"
	ScannerHealthStatus          ClusterHealthStatus_HealthStatusLabel `protobuf:"varint,11,opt,name=scanner_health_status,json=scannerHealthStatus,proto3,enum=storage.ClusterHealthStatus_HealthStatusLabel" json:"scanner_health_status,omitempty" search:"Scanner Status,store"`                             // @gotags: search:"Scanner Status,store"
	// For sensors not having health capability, this will be filled with gRPC connection poll. Otherwise,
	// this timestamp will be updated by central pipeline when message is processed
	LastContact *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_contact,json=lastContact,proto3" json:"last_contact,omitempty" search:"Last Contact,store"` // @gotags: search:"Last Contact,store"
	// To track cases such as when sensor is healthy, but collector status data is unavailable because the sensor is on an old version
	HealthInfoComplete bool `protobuf:"varint,6,opt,name=health_info_complete,json=healthInfoComplete,proto3" json:"health_info_complete,omitempty"`
}

func (x *ClusterHealthStatus) Reset() {
	*x = ClusterHealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealthStatus) ProtoMessage() {}

func (x *ClusterHealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHealthStatus.ProtoReflect.Descriptor instead.
func (*ClusterHealthStatus) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterHealthStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterHealthStatus) GetCollectorHealthInfo() *CollectorHealthInfo {
	if x != nil {
		return x.CollectorHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetAdmissionControlHealthInfo() *AdmissionControlHealthInfo {
	if x != nil {
		return x.AdmissionControlHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetScannerHealthInfo() *ScannerHealthInfo {
	if x != nil {
		return x.ScannerHealthInfo
	}
	return nil
}

func (x *ClusterHealthStatus) GetSensorHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil {
		return x.SensorHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetCollectorHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil {
		return x.CollectorHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetOverallHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil {
		return x.OverallHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetAdmissionControlHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil {
		return x.AdmissionControlHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetScannerHealthStatus() ClusterHealthStatus_HealthStatusLabel {
	if x != nil {
		return x.ScannerHealthStatus
	}
	return ClusterHealthStatus_UNINITIALIZED
}

func (x *ClusterHealthStatus) GetLastContact() *timestamppb.Timestamp {
	if x != nil {
		return x.LastContact
	}
	return nil
}

func (x *ClusterHealthStatus) GetHealthInfoComplete() bool {
	if x != nil {
		return x.HealthInfoComplete
	}
	return false
}

// CollectorHealthInfo carries data about collector deployment but does not include collector health status derived from this data.
// Aggregated collector health status is not included because it is derived in central and not in the component that
// first reports CollectorHealthInfo (sensor).
type CollectorHealthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the version of the collector deamonset as returned by k8s API
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to TotalDesiredPodsOpt:
	//
	//	*CollectorHealthInfo_TotalDesiredPods
	TotalDesiredPodsOpt isCollectorHealthInfo_TotalDesiredPodsOpt `protobuf_oneof:"total_desired_pods_opt"`
	// Types that are assignable to TotalReadyPodsOpt:
	//
	//	*CollectorHealthInfo_TotalReadyPods
	TotalReadyPodsOpt isCollectorHealthInfo_TotalReadyPodsOpt `protobuf_oneof:"total_ready_pods_opt"`
	// Types that are assignable to TotalRegisteredNodesOpt:
	//
	//	*CollectorHealthInfo_TotalRegisteredNodes
	TotalRegisteredNodesOpt isCollectorHealthInfo_TotalRegisteredNodesOpt `protobuf_oneof:"total_registered_nodes_opt"`
	// Collection of errors that occurred while trying to obtain collector health info.
	StatusErrors []string `protobuf:"bytes,5,rep,name=status_errors,json=statusErrors,proto3" json:"status_errors,omitempty"`
}

func (x *CollectorHealthInfo) Reset() {
	*x = CollectorHealthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorHealthInfo) ProtoMessage() {}

func (x *CollectorHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorHealthInfo.ProtoReflect.Descriptor instead.
func (*CollectorHealthInfo) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *CollectorHealthInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (m *CollectorHealthInfo) GetTotalDesiredPodsOpt() isCollectorHealthInfo_TotalDesiredPodsOpt {
	if m != nil {
		return m.TotalDesiredPodsOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalDesiredPods() int32 {
	if x, ok := x.GetTotalDesiredPodsOpt().(*CollectorHealthInfo_TotalDesiredPods); ok {
		return x.TotalDesiredPods
	}
	return 0
}

func (m *CollectorHealthInfo) GetTotalReadyPodsOpt() isCollectorHealthInfo_TotalReadyPodsOpt {
	if m != nil {
		return m.TotalReadyPodsOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalReadyPods() int32 {
	if x, ok := x.GetTotalReadyPodsOpt().(*CollectorHealthInfo_TotalReadyPods); ok {
		return x.TotalReadyPods
	}
	return 0
}

func (m *CollectorHealthInfo) GetTotalRegisteredNodesOpt() isCollectorHealthInfo_TotalRegisteredNodesOpt {
	if m != nil {
		return m.TotalRegisteredNodesOpt
	}
	return nil
}

func (x *CollectorHealthInfo) GetTotalRegisteredNodes() int32 {
	if x, ok := x.GetTotalRegisteredNodesOpt().(*CollectorHealthInfo_TotalRegisteredNodes); ok {
		return x.TotalRegisteredNodes
	}
	return 0
}

func (x *CollectorHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

type isCollectorHealthInfo_TotalDesiredPodsOpt interface {
	isCollectorHealthInfo_TotalDesiredPodsOpt()
}

type CollectorHealthInfo_TotalDesiredPods struct {
	TotalDesiredPods int32 `protobuf:"varint,2,opt,name=total_desired_pods,json=totalDesiredPods,proto3,oneof"`
}

func (*CollectorHealthInfo_TotalDesiredPods) isCollectorHealthInfo_TotalDesiredPodsOpt() {}

type isCollectorHealthInfo_TotalReadyPodsOpt interface {
	isCollectorHealthInfo_TotalReadyPodsOpt()
}

type CollectorHealthInfo_TotalReadyPods struct {
	TotalReadyPods int32 `protobuf:"varint,3,opt,name=total_ready_pods,json=totalReadyPods,proto3,oneof"`
}

func (*CollectorHealthInfo_TotalReadyPods) isCollectorHealthInfo_TotalReadyPodsOpt() {}

type isCollectorHealthInfo_TotalRegisteredNodesOpt interface {
	isCollectorHealthInfo_TotalRegisteredNodesOpt()
}

type CollectorHealthInfo_TotalRegisteredNodes struct {
	TotalRegisteredNodes int32 `protobuf:"varint,4,opt,name=total_registered_nodes,json=totalRegisteredNodes,proto3,oneof"`
}

func (*CollectorHealthInfo_TotalRegisteredNodes) isCollectorHealthInfo_TotalRegisteredNodesOpt() {}

// AdmissionControlHealthInfo carries data about admission control deployment but does not include admission control health status
// derived from this data.
// Aggregated admission control health status is not included because it is derived in central and not in the component that
// first reports AdmissionControlHealthInfo (sensor).
type AdmissionControlHealthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TotalDesiredPodsOpt:
	//
	//	*AdmissionControlHealthInfo_TotalDesiredPods
	TotalDesiredPodsOpt isAdmissionControlHealthInfo_TotalDesiredPodsOpt `protobuf_oneof:"total_desired_pods_opt"`
	// Types that are assignable to TotalReadyPodsOpt:
	//
	//	*AdmissionControlHealthInfo_TotalReadyPods
	TotalReadyPodsOpt isAdmissionControlHealthInfo_TotalReadyPodsOpt `protobuf_oneof:"total_ready_pods_opt"`
	// Collection of errors that occurred while trying to obtain admission control health info.
	StatusErrors []string `protobuf:"bytes,3,rep,name=status_errors,json=statusErrors,proto3" json:"status_errors,omitempty"`
}

func (x *AdmissionControlHealthInfo) Reset() {
	*x = AdmissionControlHealthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmissionControlHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmissionControlHealthInfo) ProtoMessage() {}

func (x *AdmissionControlHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmissionControlHealthInfo.ProtoReflect.Descriptor instead.
func (*AdmissionControlHealthInfo) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{20}
}

func (m *AdmissionControlHealthInfo) GetTotalDesiredPodsOpt() isAdmissionControlHealthInfo_TotalDesiredPodsOpt {
	if m != nil {
		return m.TotalDesiredPodsOpt
	}
	return nil
}

func (x *AdmissionControlHealthInfo) GetTotalDesiredPods() int32 {
	if x, ok := x.GetTotalDesiredPodsOpt().(*AdmissionControlHealthInfo_TotalDesiredPods); ok {
		return x.TotalDesiredPods
	}
	return 0
}

func (m *AdmissionControlHealthInfo) GetTotalReadyPodsOpt() isAdmissionControlHealthInfo_TotalReadyPodsOpt {
	if m != nil {
		return m.TotalReadyPodsOpt
	}
	return nil
}

func (x *AdmissionControlHealthInfo) GetTotalReadyPods() int32 {
	if x, ok := x.GetTotalReadyPodsOpt().(*AdmissionControlHealthInfo_TotalReadyPods); ok {
		return x.TotalReadyPods
	}
	return 0
}

func (x *AdmissionControlHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

type isAdmissionControlHealthInfo_TotalDesiredPodsOpt interface {
	isAdmissionControlHealthInfo_TotalDesiredPodsOpt()
}

type AdmissionControlHealthInfo_TotalDesiredPods struct {
	TotalDesiredPods int32 `protobuf:"varint,1,opt,name=total_desired_pods,json=totalDesiredPods,proto3,oneof"`
}

func (*AdmissionControlHealthInfo_TotalDesiredPods) isAdmissionControlHealthInfo_TotalDesiredPodsOpt() {
}

type isAdmissionControlHealthInfo_TotalReadyPodsOpt interface {
	isAdmissionControlHealthInfo_TotalReadyPodsOpt()
}

type AdmissionControlHealthInfo_TotalReadyPods struct {
	TotalReadyPods int32 `protobuf:"varint,2,opt,name=total_ready_pods,json=totalReadyPods,proto3,oneof"`
}

func (*AdmissionControlHealthInfo_TotalReadyPods) isAdmissionControlHealthInfo_TotalReadyPodsOpt() {}

// ScannerHealthInfo represents health info of a scanner instance that is deployed on a secured cluster (so called "local scanner").
// When the scanner is deployed on a central cluster, the following message is NOT used.
// ScannerHealthInfo carries data about scanner deployment but does not include scanner health status
// derived from this data.
// Aggregated scanner health status is not included because it is derived in central and not in the component that
// first reports ScannerHealthInfo (sensor).
type ScannerHealthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TotalDesiredAnalyzerPodsOpt:
	//
	//	*ScannerHealthInfo_TotalDesiredAnalyzerPods
	TotalDesiredAnalyzerPodsOpt isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt `protobuf_oneof:"total_desired_analyzer_pods_opt"`
	// Types that are assignable to TotalReadyAnalyzerPodsOpt:
	//
	//	*ScannerHealthInfo_TotalReadyAnalyzerPods
	TotalReadyAnalyzerPodsOpt isScannerHealthInfo_TotalReadyAnalyzerPodsOpt `protobuf_oneof:"total_ready_analyzer_pods_opt"`
	// Types that are assignable to TotalDesiredDbPodsOpt:
	//
	//	*ScannerHealthInfo_TotalDesiredDbPods
	TotalDesiredDbPodsOpt isScannerHealthInfo_TotalDesiredDbPodsOpt `protobuf_oneof:"total_desired_db_pods_opt"`
	// Types that are assignable to TotalReadyDbPodsOpt:
	//
	//	*ScannerHealthInfo_TotalReadyDbPods
	TotalReadyDbPodsOpt isScannerHealthInfo_TotalReadyDbPodsOpt `protobuf_oneof:"total_ready_db_pods_opt"`
	// Collection of errors that occurred while trying to obtain scanner health info.
	StatusErrors []string `protobuf:"bytes,5,rep,name=status_errors,json=statusErrors,proto3" json:"status_errors,omitempty"`
}

func (x *ScannerHealthInfo) Reset() {
	*x = ScannerHealthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerHealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerHealthInfo) ProtoMessage() {}

func (x *ScannerHealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerHealthInfo.ProtoReflect.Descriptor instead.
func (*ScannerHealthInfo) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{21}
}

func (m *ScannerHealthInfo) GetTotalDesiredAnalyzerPodsOpt() isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt {
	if m != nil {
		return m.TotalDesiredAnalyzerPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalDesiredAnalyzerPods() int32 {
	if x, ok := x.GetTotalDesiredAnalyzerPodsOpt().(*ScannerHealthInfo_TotalDesiredAnalyzerPods); ok {
		return x.TotalDesiredAnalyzerPods
	}
	return 0
}

func (m *ScannerHealthInfo) GetTotalReadyAnalyzerPodsOpt() isScannerHealthInfo_TotalReadyAnalyzerPodsOpt {
	if m != nil {
		return m.TotalReadyAnalyzerPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalReadyAnalyzerPods() int32 {
	if x, ok := x.GetTotalReadyAnalyzerPodsOpt().(*ScannerHealthInfo_TotalReadyAnalyzerPods); ok {
		return x.TotalReadyAnalyzerPods
	}
	return 0
}

func (m *ScannerHealthInfo) GetTotalDesiredDbPodsOpt() isScannerHealthInfo_TotalDesiredDbPodsOpt {
	if m != nil {
		return m.TotalDesiredDbPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalDesiredDbPods() int32 {
	if x, ok := x.GetTotalDesiredDbPodsOpt().(*ScannerHealthInfo_TotalDesiredDbPods); ok {
		return x.TotalDesiredDbPods
	}
	return 0
}

func (m *ScannerHealthInfo) GetTotalReadyDbPodsOpt() isScannerHealthInfo_TotalReadyDbPodsOpt {
	if m != nil {
		return m.TotalReadyDbPodsOpt
	}
	return nil
}

func (x *ScannerHealthInfo) GetTotalReadyDbPods() int32 {
	if x, ok := x.GetTotalReadyDbPodsOpt().(*ScannerHealthInfo_TotalReadyDbPods); ok {
		return x.TotalReadyDbPods
	}
	return 0
}

func (x *ScannerHealthInfo) GetStatusErrors() []string {
	if x != nil {
		return x.StatusErrors
	}
	return nil
}

type isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt interface {
	isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt()
}

type ScannerHealthInfo_TotalDesiredAnalyzerPods struct {
	TotalDesiredAnalyzerPods int32 `protobuf:"varint,1,opt,name=total_desired_analyzer_pods,json=totalDesiredAnalyzerPods,proto3,oneof"`
}

func (*ScannerHealthInfo_TotalDesiredAnalyzerPods) isScannerHealthInfo_TotalDesiredAnalyzerPodsOpt() {
}

type isScannerHealthInfo_TotalReadyAnalyzerPodsOpt interface {
	isScannerHealthInfo_TotalReadyAnalyzerPodsOpt()
}

type ScannerHealthInfo_TotalReadyAnalyzerPods struct {
	TotalReadyAnalyzerPods int32 `protobuf:"varint,2,opt,name=total_ready_analyzer_pods,json=totalReadyAnalyzerPods,proto3,oneof"`
}

func (*ScannerHealthInfo_TotalReadyAnalyzerPods) isScannerHealthInfo_TotalReadyAnalyzerPodsOpt() {}

type isScannerHealthInfo_TotalDesiredDbPodsOpt interface {
	isScannerHealthInfo_TotalDesiredDbPodsOpt()
}

type ScannerHealthInfo_TotalDesiredDbPods struct {
	TotalDesiredDbPods int32 `protobuf:"varint,3,opt,name=total_desired_db_pods,json=totalDesiredDbPods,proto3,oneof"`
}

func (*ScannerHealthInfo_TotalDesiredDbPods) isScannerHealthInfo_TotalDesiredDbPodsOpt() {}

type isScannerHealthInfo_TotalReadyDbPodsOpt interface {
	isScannerHealthInfo_TotalReadyDbPodsOpt()
}

type ScannerHealthInfo_TotalReadyDbPods struct {
	TotalReadyDbPods int32 `protobuf:"varint,4,opt,name=total_ready_db_pods,json=totalReadyDbPods,proto3,oneof"`
}

func (*ScannerHealthInfo_TotalReadyDbPods) isScannerHealthInfo_TotalReadyDbPodsOpt() {}

type ClusterUpgradeStatus_UpgradeProcessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active        bool                                                         `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Id            string                                                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TargetVersion string                                                       `protobuf:"bytes,3,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"` // only relevant if type == Upgrade
	UpgraderImage string                                                       `protobuf:"bytes,4,opt,name=upgrader_image,json=upgraderImage,proto3" json:"upgrader_image,omitempty"`
	InitiatedAt   *timestamppb.Timestamp                                       `protobuf:"bytes,5,opt,name=initiated_at,json=initiatedAt,proto3" json:"initiated_at,omitempty"`
	Progress      *UpgradeProgress                                             `protobuf:"bytes,6,opt,name=progress,proto3" json:"progress,omitempty"`
	Type          ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType `protobuf:"varint,7,opt,name=type,proto3,enum=storage.ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType" json:"type,omitempty"`
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) Reset() {
	*x = ClusterUpgradeStatus_UpgradeProcessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpgradeStatus_UpgradeProcessStatus) ProtoMessage() {}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUpgradeStatus_UpgradeProcessStatus.ProtoReflect.Descriptor instead.
func (*ClusterUpgradeStatus_UpgradeProcessStatus) Descriptor() ([]byte, []int) {
	return file_storage_cluster_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetUpgraderImage() string {
	if x != nil {
		return x.UpgraderImage
	}
	return ""
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetInitiatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InitiatedAt
	}
	return nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetProgress() *UpgradeProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *ClusterUpgradeStatus_UpgradeProcessStatus) GetType() ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType {
	if x != nil {
		return x.Type
	}
	return ClusterUpgradeStatus_UpgradeProcessStatus_UPGRADE
}

var File_storage_cluster_proto protoreflect.FileDescriptor

var file_storage_cluster_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b, 0x53, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4b, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x43, 0x50,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x53, 0x44, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x4f, 0x53, 0x41, 0x10, 0x07, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x34, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x15, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x57, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x2f, 0x0a, 0x11, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xa8, 0x04, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x64, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x11, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x6d, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x6c, 0x69, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a,
	0x1b, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x1b, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x19, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa9, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6b,
	0x38, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6b, 0x38, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x80, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x11, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x41, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6c, 0x69,
	0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x65,
	0x6c, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x68, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x15, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x12, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e,
	0x10, 0x0f, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48,
	0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x4e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x0d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x15, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52,
	0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x06, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x51, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x92, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x7d, 0x0a,
	0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x50, 0x5f,
	0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0xc4, 0x04, 0x0a,
	0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4a, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0a, 0x12,
	0x20, 0x0a, 0x1c, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0d, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x21,
	0x0a, 0x1d, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x11, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x88, 0x08, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x66, 0x0a, 0x1d, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x61,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x62, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x13,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x1c, 0x61, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x61, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59,
	0x10, 0x04, 0x22, 0xb8, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6f, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x1c, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0xcf, 0x01,
	0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x22,
	0x98, 0x03, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x18, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x50,
	0x6f, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x44, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x44, 0x62, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x21,
	0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f,
	0x70, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x19, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x64,
	0x62, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x2a, 0x75, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48,
	0x49, 0x46, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x34, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x05, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10,
	0x04, 0x2a, 0x6e, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x0d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0c, 0x0a, 0x04, 0x45, 0x42, 0x50, 0x46, 0x10, 0x03, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x50, 0x46, 0x10,
	0x04, 0x2a, 0x83, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_cluster_proto_rawDescOnce sync.Once
	file_storage_cluster_proto_rawDescData = file_storage_cluster_proto_rawDesc
)

func file_storage_cluster_proto_rawDescGZIP() []byte {
	file_storage_cluster_proto_rawDescOnce.Do(func() {
		file_storage_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_cluster_proto_rawDescData)
	})
	return file_storage_cluster_proto_rawDescData
}

var file_storage_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_storage_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_storage_cluster_proto_goTypes = []any{
	(ClusterType)(0),                        // 0: storage.ClusterType
	(CollectionMethod)(0),                   // 1: storage.CollectionMethod
	(ManagerType)(0),                        // 2: storage.ManagerType
	(ClusterMetadata_Type)(0),               // 3: storage.ClusterMetadata.Type
	(ClusterUpgradeStatus_Upgradability)(0), // 4: storage.ClusterUpgradeStatus.Upgradability
	(ClusterUpgradeStatus_UpgradeProcessStatus_UpgradeProcessType)(0), // 5: storage.ClusterUpgradeStatus.UpgradeProcessStatus.UpgradeProcessType
	(UpgradeProgress_UpgradeState)(0),                                 // 6: storage.UpgradeProgress.UpgradeState
	(ClusterHealthStatus_HealthStatusLabel)(0),                        // 7: storage.ClusterHealthStatus.HealthStatusLabel
	(*ClusterMetadata)(nil),                                           // 8: storage.ClusterMetadata
	(*GoogleProviderMetadata)(nil),                                    // 9: storage.GoogleProviderMetadata
	(*AWSProviderMetadata)(nil),                                       // 10: storage.AWSProviderMetadata
	(*AzureProviderMetadata)(nil),                                     // 11: storage.AzureProviderMetadata
	(*ProviderMetadata)(nil),                                          // 12: storage.ProviderMetadata
	(*OrchestratorMetadata)(nil),                                      // 13: storage.OrchestratorMetadata
	(*AdmissionControllerConfig)(nil),                                 // 14: storage.AdmissionControllerConfig
	(*TolerationsConfig)(nil),                                         // 15: storage.TolerationsConfig
	(*StaticClusterConfig)(nil),                                       // 16: storage.StaticClusterConfig
	(*DynamicClusterConfig)(nil),                                      // 17: storage.DynamicClusterConfig
	(*CompleteClusterConfig)(nil),                                     // 18: storage.CompleteClusterConfig
	(*SensorDeploymentIdentification)(nil),                            // 19: storage.SensorDeploymentIdentification
	(*Cluster)(nil),                                                   // 20: storage.Cluster
	(*ClusterCertExpiryStatus)(nil),                                   // 21: storage.ClusterCertExpiryStatus
	(*ClusterStatus)(nil),                                             // 22: storage.ClusterStatus
	(*ClusterUpgradeStatus)(nil),                                      // 23: storage.ClusterUpgradeStatus
	(*UpgradeProgress)(nil),                                           // 24: storage.UpgradeProgress
	(*AuditLogFileState)(nil),                                         // 25: storage.AuditLogFileState
	(*ClusterHealthStatus)(nil),                                       // 26: storage.ClusterHealthStatus
	(*CollectorHealthInfo)(nil),                                       // 27: storage.CollectorHealthInfo
	(*AdmissionControlHealthInfo)(nil),                                // 28: storage.AdmissionControlHealthInfo
	(*ScannerHealthInfo)(nil),                                         // 29: storage.ScannerHealthInfo
	nil,                                                               // 30: storage.CompleteClusterConfig.ClusterLabelsEntry
	nil,                                                               // 31: storage.Cluster.LabelsEntry
	nil,                                                               // 32: storage.Cluster.AuditLogStateEntry
	(*ClusterUpgradeStatus_UpgradeProcessStatus)(nil),                 // 33: storage.ClusterUpgradeStatus.UpgradeProcessStatus
	(*timestamppb.Timestamp)(nil),                                     // 34: google.protobuf.Timestamp
}
var file_storage_cluster_proto_depIdxs = []int32{
	3,  // 0: storage.ClusterMetadata.type:type_name -> storage.ClusterMetadata.Type
	9,  // 1: storage.ProviderMetadata.google:type_name -> storage.GoogleProviderMetadata
	10, // 2: storage.ProviderMetadata.aws:type_name -> storage.AWSProviderMetadata
	11, // 3: storage.ProviderMetadata.azure:type_name -> storage.AzureProviderMetadata
	8,  // 4: storage.ProviderMetadata.cluster:type_name -> storage.ClusterMetadata
	34, // 5: storage.OrchestratorMetadata.build_date:type_name -> google.protobuf.Timestamp
	0,  // 6: storage.StaticClusterConfig.type:type_name -> storage.ClusterType
	1,  // 7: storage.StaticClusterConfig.collection_method:type_name -> storage.CollectionMethod
	15, // 8: storage.StaticClusterConfig.tolerations_config:type_name -> storage.TolerationsConfig
	14, // 9: storage.DynamicClusterConfig.admission_controller_config:type_name -> storage.AdmissionControllerConfig
	17, // 10: storage.CompleteClusterConfig.dynamic_config:type_name -> storage.DynamicClusterConfig
	16, // 11: storage.CompleteClusterConfig.static_config:type_name -> storage.StaticClusterConfig
	30, // 12: storage.CompleteClusterConfig.cluster_labels:type_name -> storage.CompleteClusterConfig.ClusterLabelsEntry
	0,  // 13: storage.Cluster.type:type_name -> storage.ClusterType
	31, // 14: storage.Cluster.labels:type_name -> storage.Cluster.LabelsEntry
	1,  // 15: storage.Cluster.collection_method:type_name -> storage.CollectionMethod
	22, // 16: storage.Cluster.status:type_name -> storage.ClusterStatus
	17, // 17: storage.Cluster.dynamic_config:type_name -> storage.DynamicClusterConfig
	15, // 18: storage.Cluster.tolerations_config:type_name -> storage.TolerationsConfig
	26, // 19: storage.Cluster.health_status:type_name -> storage.ClusterHealthStatus
	18, // 20: storage.Cluster.helm_config:type_name -> storage.CompleteClusterConfig
	19, // 21: storage.Cluster.most_recent_sensor_id:type_name -> storage.SensorDeploymentIdentification
	32, // 22: storage.Cluster.audit_log_state:type_name -> storage.Cluster.AuditLogStateEntry
	2,  // 23: storage.Cluster.managed_by:type_name -> storage.ManagerType
	34, // 24: storage.ClusterCertExpiryStatus.sensor_cert_expiry:type_name -> google.protobuf.Timestamp
	34, // 25: storage.ClusterCertExpiryStatus.sensor_cert_not_before:type_name -> google.protobuf.Timestamp
	34, // 26: storage.ClusterStatus.DEPRECATED_last_contact:type_name -> google.protobuf.Timestamp
	12, // 27: storage.ClusterStatus.provider_metadata:type_name -> storage.ProviderMetadata
	13, // 28: storage.ClusterStatus.orchestrator_metadata:type_name -> storage.OrchestratorMetadata
	23, // 29: storage.ClusterStatus.upgrade_status:type_name -> storage.ClusterUpgradeStatus
	21, // 30: storage.ClusterStatus.cert_expiry_status:type_name -> storage.ClusterCertExpiryStatus
	4,  // 31: storage.ClusterUpgradeStatus.upgradability:type_name -> storage.ClusterUpgradeStatus.Upgradability
	33, // 32: storage.ClusterUpgradeStatus.most_recent_process:type_name -> storage.ClusterUpgradeStatus.UpgradeProcessStatus
	6,  // 33: storage.UpgradeProgress.upgrade_state:type_name -> storage.UpgradeProgress.UpgradeState
	34, // 34: storage.UpgradeProgress.since:type_name -> google.protobuf.Timestamp
	34, // 35: storage.AuditLogFileState.collect_logs_since:type_name -> google.protobuf.Timestamp
	27, // 36: storage.ClusterHealthStatus.collector_health_info:type_name -> storage.CollectorHealthInfo
	28, // 37: storage.ClusterHealthStatus.admission_control_health_info:type_name -> storage.AdmissionControlHealthInfo
	29, // 38: storage.ClusterHealthStatus.scanner_health_info:type_name -> storage.ScannerHealthInfo
	7,  // 39: storage.ClusterHealthStatus.sensor_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 40: storage.ClusterHealthStatus.collector_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 41: storage.ClusterHealthStatus.overall_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 42: storage.ClusterHealthStatus.admission_control_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	7,  // 43: storage.ClusterHealthStatus.scanner_health_status:type_name -> storage.ClusterHealthStatus.HealthStatusLabel
	34, // 44: storage.ClusterHealthStatus.last_contact:type_name -> google.protobuf.Timestamp
	25, // 45: storage.Cluster.AuditLogStateEntry.value:type_name -> storage.AuditLogFileState
	34, // 46: storage.ClusterUpgradeStatus.UpgradeProcessStatus.initiated_at:type_name -> google.protobuf.Timestamp
	24, // 47: storage.ClusterUpgradeStatus.UpgradeProcessStatus.progress:type_name -> storage.UpgradeProgress
	5,  // 48: storage.ClusterUpgradeStatus.UpgradeProcessStatus.type:type_name -> storage.ClusterUpgradeStatus.UpgradeProcessStatus.UpgradeProcessType
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_storage_cluster_proto_init() }
func file_storage_cluster_proto_init() {
	if File_storage_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_cluster_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GoogleProviderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AWSProviderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AzureProviderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ProviderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*OrchestratorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AdmissionControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TolerationsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StaticClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CompleteClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SensorDeploymentIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterCertExpiryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterUpgradeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AuditLogFileState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterHealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CollectorHealthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AdmissionControlHealthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ScannerHealthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_cluster_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterUpgradeStatus_UpgradeProcessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_cluster_proto_msgTypes[4].OneofWrappers = []any{
		(*ProviderMetadata_Google)(nil),
		(*ProviderMetadata_Aws)(nil),
		(*ProviderMetadata_Azure)(nil),
	}
	file_storage_cluster_proto_msgTypes[5].OneofWrappers = []any{
		(*OrchestratorMetadata_OpenshiftVersion)(nil),
	}
	file_storage_cluster_proto_msgTypes[19].OneofWrappers = []any{
		(*CollectorHealthInfo_TotalDesiredPods)(nil),
		(*CollectorHealthInfo_TotalReadyPods)(nil),
		(*CollectorHealthInfo_TotalRegisteredNodes)(nil),
	}
	file_storage_cluster_proto_msgTypes[20].OneofWrappers = []any{
		(*AdmissionControlHealthInfo_TotalDesiredPods)(nil),
		(*AdmissionControlHealthInfo_TotalReadyPods)(nil),
	}
	file_storage_cluster_proto_msgTypes[21].OneofWrappers = []any{
		(*ScannerHealthInfo_TotalDesiredAnalyzerPods)(nil),
		(*ScannerHealthInfo_TotalReadyAnalyzerPods)(nil),
		(*ScannerHealthInfo_TotalDesiredDbPods)(nil),
		(*ScannerHealthInfo_TotalReadyDbPods)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_cluster_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_cluster_proto_goTypes,
		DependencyIndexes: file_storage_cluster_proto_depIdxs,
		EnumInfos:         file_storage_cluster_proto_enumTypes,
		MessageInfos:      file_storage_cluster_proto_msgTypes,
	}.Build()
	File_storage_cluster_proto = out.File
	file_storage_cluster_proto_rawDesc = nil
	file_storage_cluster_proto_goTypes = nil
	file_storage_cluster_proto_depIdxs = nil
}
