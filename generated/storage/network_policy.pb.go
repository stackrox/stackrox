// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/network_policy.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_UNSET_PROTOCOL Protocol = 0
	Protocol_TCP_PROTOCOL   Protocol = 1
	Protocol_UDP_PROTOCOL   Protocol = 2
	Protocol_SCTP_PROTOCOL  Protocol = 3
)

var Protocol_name = map[int32]string{
	0: "UNSET_PROTOCOL",
	1: "TCP_PROTOCOL",
	2: "UDP_PROTOCOL",
	3: "SCTP_PROTOCOL",
}

var Protocol_value = map[string]int32{
	"UNSET_PROTOCOL": 0,
	"TCP_PROTOCOL":   1,
	"UDP_PROTOCOL":   2,
	"SCTP_PROTOCOL":  3,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{0}
}

type NetworkPolicyType int32

const (
	NetworkPolicyType_UNSET_NETWORK_POLICY_TYPE   NetworkPolicyType = 0
	NetworkPolicyType_INGRESS_NETWORK_POLICY_TYPE NetworkPolicyType = 1
	NetworkPolicyType_EGRESS_NETWORK_POLICY_TYPE  NetworkPolicyType = 2
)

var NetworkPolicyType_name = map[int32]string{
	0: "UNSET_NETWORK_POLICY_TYPE",
	1: "INGRESS_NETWORK_POLICY_TYPE",
	2: "EGRESS_NETWORK_POLICY_TYPE",
}

var NetworkPolicyType_value = map[string]int32{
	"UNSET_NETWORK_POLICY_TYPE":   0,
	"INGRESS_NETWORK_POLICY_TYPE": 1,
	"EGRESS_NETWORK_POLICY_TYPE":  2,
}

func (x NetworkPolicyType) String() string {
	return proto.EnumName(NetworkPolicyType_name, int32(x))
}

func (NetworkPolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{1}
}

type NetworkPolicy struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId            string             `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" search:"Cluster ID,hidden,store" sql:"type(uuid)"`
	ClusterName          string             `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace            string             `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty" search:"Namespace,hidden,store"`
	Labels               map[string]string  `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string  `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec                 *NetworkPolicySpec `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	Yaml                 string             `protobuf:"bytes,9,opt,name=yaml,proto3" json:"yaml,omitempty"`
	ApiVersion           string             `protobuf:"bytes,10,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Created              *types.Timestamp   `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NetworkPolicy) Reset()         { *m = NetworkPolicy{} }
func (m *NetworkPolicy) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicy) ProtoMessage()    {}
func (*NetworkPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{0}
}
func (m *NetworkPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicy.Merge(m, src)
}
func (m *NetworkPolicy) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicy proto.InternalMessageInfo

func (m *NetworkPolicy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkPolicy) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkPolicy) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *NetworkPolicy) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkPolicy) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkPolicy) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *NetworkPolicy) GetSpec() *NetworkPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NetworkPolicy) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

func (m *NetworkPolicy) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *NetworkPolicy) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *NetworkPolicy) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicy) Clone() *NetworkPolicy {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicy)
	*cloned = *m

	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	if m.Annotations != nil {
		cloned.Annotations = make(map[string]string, len(m.Annotations))
		for k, v := range m.Annotations {
			cloned.Annotations[k] = v
		}
	}
	cloned.Spec = m.Spec.Clone()
	cloned.Created = m.Created.Clone()
	return cloned
}

type NetworkPolicySpec struct {
	PodSelector          *LabelSelector              `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	Ingress              []*NetworkPolicyIngressRule `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Egress               []*NetworkPolicyEgressRule  `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
	PolicyTypes          []NetworkPolicyType         `protobuf:"varint,4,rep,packed,name=policy_types,json=policyTypes,proto3,enum=storage.NetworkPolicyType" json:"policy_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NetworkPolicySpec) Reset()         { *m = NetworkPolicySpec{} }
func (m *NetworkPolicySpec) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicySpec) ProtoMessage()    {}
func (*NetworkPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{1}
}
func (m *NetworkPolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicySpec.Merge(m, src)
}
func (m *NetworkPolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicySpec proto.InternalMessageInfo

func (m *NetworkPolicySpec) GetPodSelector() *LabelSelector {
	if m != nil {
		return m.PodSelector
	}
	return nil
}

func (m *NetworkPolicySpec) GetIngress() []*NetworkPolicyIngressRule {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *NetworkPolicySpec) GetEgress() []*NetworkPolicyEgressRule {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *NetworkPolicySpec) GetPolicyTypes() []NetworkPolicyType {
	if m != nil {
		return m.PolicyTypes
	}
	return nil
}

func (m *NetworkPolicySpec) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicySpec) Clone() *NetworkPolicySpec {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicySpec)
	*cloned = *m

	cloned.PodSelector = m.PodSelector.Clone()
	if m.Ingress != nil {
		cloned.Ingress = make([]*NetworkPolicyIngressRule, len(m.Ingress))
		for idx, v := range m.Ingress {
			cloned.Ingress[idx] = v.Clone()
		}
	}
	if m.Egress != nil {
		cloned.Egress = make([]*NetworkPolicyEgressRule, len(m.Egress))
		for idx, v := range m.Egress {
			cloned.Egress[idx] = v.Clone()
		}
	}
	if m.PolicyTypes != nil {
		cloned.PolicyTypes = make([]NetworkPolicyType, len(m.PolicyTypes))
		copy(cloned.PolicyTypes, m.PolicyTypes)
	}
	return cloned
}

type NetworkPolicyEgressRule struct {
	Ports                []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	To                   []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkPolicyEgressRule) Reset()         { *m = NetworkPolicyEgressRule{} }
func (m *NetworkPolicyEgressRule) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyEgressRule) ProtoMessage()    {}
func (*NetworkPolicyEgressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{2}
}
func (m *NetworkPolicyEgressRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyEgressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyEgressRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyEgressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyEgressRule.Merge(m, src)
}
func (m *NetworkPolicyEgressRule) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyEgressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyEgressRule.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyEgressRule proto.InternalMessageInfo

func (m *NetworkPolicyEgressRule) GetPorts() []*NetworkPolicyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *NetworkPolicyEgressRule) GetTo() []*NetworkPolicyPeer {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkPolicyEgressRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyEgressRule) Clone() *NetworkPolicyEgressRule {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyEgressRule)
	*cloned = *m

	if m.Ports != nil {
		cloned.Ports = make([]*NetworkPolicyPort, len(m.Ports))
		for idx, v := range m.Ports {
			cloned.Ports[idx] = v.Clone()
		}
	}
	if m.To != nil {
		cloned.To = make([]*NetworkPolicyPeer, len(m.To))
		for idx, v := range m.To {
			cloned.To[idx] = v.Clone()
		}
	}
	return cloned
}

type NetworkPolicyPeer struct {
	PodSelector          *LabelSelector `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	NamespaceSelector    *LabelSelector `protobuf:"bytes,2,opt,name=namespace_selector,json=namespaceSelector,proto3" json:"namespace_selector,omitempty"`
	IpBlock              *IPBlock       `protobuf:"bytes,3,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NetworkPolicyPeer) Reset()         { *m = NetworkPolicyPeer{} }
func (m *NetworkPolicyPeer) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyPeer) ProtoMessage()    {}
func (*NetworkPolicyPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{3}
}
func (m *NetworkPolicyPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyPeer.Merge(m, src)
}
func (m *NetworkPolicyPeer) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyPeer.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyPeer proto.InternalMessageInfo

func (m *NetworkPolicyPeer) GetPodSelector() *LabelSelector {
	if m != nil {
		return m.PodSelector
	}
	return nil
}

func (m *NetworkPolicyPeer) GetNamespaceSelector() *LabelSelector {
	if m != nil {
		return m.NamespaceSelector
	}
	return nil
}

func (m *NetworkPolicyPeer) GetIpBlock() *IPBlock {
	if m != nil {
		return m.IpBlock
	}
	return nil
}

func (m *NetworkPolicyPeer) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyPeer) Clone() *NetworkPolicyPeer {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyPeer)
	*cloned = *m

	cloned.PodSelector = m.PodSelector.Clone()
	cloned.NamespaceSelector = m.NamespaceSelector.Clone()
	cloned.IpBlock = m.IpBlock.Clone()
	return cloned
}

type IPBlock struct {
	Cidr                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Except               []string `protobuf:"bytes,2,rep,name=except,proto3" json:"except,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPBlock) Reset()         { *m = IPBlock{} }
func (m *IPBlock) String() string { return proto.CompactTextString(m) }
func (*IPBlock) ProtoMessage()    {}
func (*IPBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{4}
}
func (m *IPBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPBlock.Merge(m, src)
}
func (m *IPBlock) XXX_Size() int {
	return m.Size()
}
func (m *IPBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IPBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IPBlock proto.InternalMessageInfo

func (m *IPBlock) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

func (m *IPBlock) GetExcept() []string {
	if m != nil {
		return m.Except
	}
	return nil
}

func (m *IPBlock) MessageClone() proto.Message {
	return m.Clone()
}
func (m *IPBlock) Clone() *IPBlock {
	if m == nil {
		return nil
	}
	cloned := new(IPBlock)
	*cloned = *m

	if m.Except != nil {
		cloned.Except = make([]string, len(m.Except))
		copy(cloned.Except, m.Except)
	}
	return cloned
}

type NetworkPolicyPort struct {
	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=storage.Protocol" json:"protocol,omitempty"`
	// Types that are valid to be assigned to PortRef:
	//	*NetworkPolicyPort_Port
	//	*NetworkPolicyPort_PortName
	PortRef              isNetworkPolicyPort_PortRef `protobuf_oneof:"port_ref"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NetworkPolicyPort) Reset()         { *m = NetworkPolicyPort{} }
func (m *NetworkPolicyPort) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyPort) ProtoMessage()    {}
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{5}
}
func (m *NetworkPolicyPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyPort.Merge(m, src)
}
func (m *NetworkPolicyPort) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyPort) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyPort.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyPort proto.InternalMessageInfo

type isNetworkPolicyPort_PortRef interface {
	isNetworkPolicyPort_PortRef()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNetworkPolicyPort_PortRef
}

type NetworkPolicyPort_Port struct {
	Port int32 `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type NetworkPolicyPort_PortName struct {
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3,oneof" json:"port_name,omitempty"`
}

func (*NetworkPolicyPort_Port) isNetworkPolicyPort_PortRef() {}
func (m *NetworkPolicyPort_Port) Clone() isNetworkPolicyPort_PortRef {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyPort_Port)
	*cloned = *m

	return cloned
}
func (*NetworkPolicyPort_PortName) isNetworkPolicyPort_PortRef() {}
func (m *NetworkPolicyPort_PortName) Clone() isNetworkPolicyPort_PortRef {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyPort_PortName)
	*cloned = *m

	return cloned
}

func (m *NetworkPolicyPort) GetPortRef() isNetworkPolicyPort_PortRef {
	if m != nil {
		return m.PortRef
	}
	return nil
}

func (m *NetworkPolicyPort) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNSET_PROTOCOL
}

func (m *NetworkPolicyPort) GetPort() int32 {
	if x, ok := m.GetPortRef().(*NetworkPolicyPort_Port); ok {
		return x.Port
	}
	return 0
}

func (m *NetworkPolicyPort) GetPortName() string {
	if x, ok := m.GetPortRef().(*NetworkPolicyPort_PortName); ok {
		return x.PortName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetworkPolicyPort) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetworkPolicyPort_Port)(nil),
		(*NetworkPolicyPort_PortName)(nil),
	}
}

func (m *NetworkPolicyPort) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyPort) Clone() *NetworkPolicyPort {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyPort)
	*cloned = *m

	if m.PortRef != nil {
		cloned.PortRef = m.PortRef.Clone()
	}
	return cloned
}

type NetworkPolicyIngressRule struct {
	Ports                []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	From                 []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkPolicyIngressRule) Reset()         { *m = NetworkPolicyIngressRule{} }
func (m *NetworkPolicyIngressRule) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyIngressRule) ProtoMessage()    {}
func (*NetworkPolicyIngressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{6}
}
func (m *NetworkPolicyIngressRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyIngressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyIngressRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyIngressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyIngressRule.Merge(m, src)
}
func (m *NetworkPolicyIngressRule) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyIngressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyIngressRule.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyIngressRule proto.InternalMessageInfo

func (m *NetworkPolicyIngressRule) GetPorts() []*NetworkPolicyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *NetworkPolicyIngressRule) GetFrom() []*NetworkPolicyPeer {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *NetworkPolicyIngressRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyIngressRule) Clone() *NetworkPolicyIngressRule {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyIngressRule)
	*cloned = *m

	if m.Ports != nil {
		cloned.Ports = make([]*NetworkPolicyPort, len(m.Ports))
		for idx, v := range m.Ports {
			cloned.Ports[idx] = v.Clone()
		}
	}
	if m.From != nil {
		cloned.From = make([]*NetworkPolicyPeer, len(m.From))
		for idx, v := range m.From {
			cloned.From[idx] = v.Clone()
		}
	}
	return cloned
}

// Next available tag: 3
type NetworkPolicyReference struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkPolicyReference) Reset()         { *m = NetworkPolicyReference{} }
func (m *NetworkPolicyReference) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyReference) ProtoMessage()    {}
func (*NetworkPolicyReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{7}
}
func (m *NetworkPolicyReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyReference.Merge(m, src)
}
func (m *NetworkPolicyReference) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyReference) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyReference.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyReference proto.InternalMessageInfo

func (m *NetworkPolicyReference) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkPolicyReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkPolicyReference) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyReference) Clone() *NetworkPolicyReference {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyReference)
	*cloned = *m

	return cloned
}

// Next available tag: 3
type NetworkPolicyModification struct {
	ApplyYaml            string                    `protobuf:"bytes,1,opt,name=apply_yaml,json=applyYaml,proto3" json:"apply_yaml,omitempty"`
	ToDelete             []*NetworkPolicyReference `protobuf:"bytes,2,rep,name=to_delete,json=toDelete,proto3" json:"to_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NetworkPolicyModification) Reset()         { *m = NetworkPolicyModification{} }
func (m *NetworkPolicyModification) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyModification) ProtoMessage()    {}
func (*NetworkPolicyModification) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{8}
}
func (m *NetworkPolicyModification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyModification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyModification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyModification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyModification.Merge(m, src)
}
func (m *NetworkPolicyModification) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyModification) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyModification.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyModification proto.InternalMessageInfo

func (m *NetworkPolicyModification) GetApplyYaml() string {
	if m != nil {
		return m.ApplyYaml
	}
	return ""
}

func (m *NetworkPolicyModification) GetToDelete() []*NetworkPolicyReference {
	if m != nil {
		return m.ToDelete
	}
	return nil
}

func (m *NetworkPolicyModification) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyModification) Clone() *NetworkPolicyModification {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyModification)
	*cloned = *m

	if m.ToDelete != nil {
		cloned.ToDelete = make([]*NetworkPolicyReference, len(m.ToDelete))
		for idx, v := range m.ToDelete {
			cloned.ToDelete[idx] = v.Clone()
		}
	}
	return cloned
}

type NetworkPolicyApplicationUndoRecord struct {
	ClusterId            string                     `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" sql:"pk,type(uuid)"`
	User                 string                     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ApplyTimestamp       *types.Timestamp           `protobuf:"bytes,2,opt,name=apply_timestamp,json=applyTimestamp,proto3" json:"apply_timestamp,omitempty"`
	OriginalModification *NetworkPolicyModification `protobuf:"bytes,3,opt,name=original_modification,json=originalModification,proto3" json:"original_modification,omitempty"`
	UndoModification     *NetworkPolicyModification `protobuf:"bytes,4,opt,name=undo_modification,json=undoModification,proto3" json:"undo_modification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *NetworkPolicyApplicationUndoRecord) Reset()         { *m = NetworkPolicyApplicationUndoRecord{} }
func (m *NetworkPolicyApplicationUndoRecord) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyApplicationUndoRecord) ProtoMessage()    {}
func (*NetworkPolicyApplicationUndoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{9}
}
func (m *NetworkPolicyApplicationUndoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyApplicationUndoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyApplicationUndoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyApplicationUndoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyApplicationUndoRecord.Merge(m, src)
}
func (m *NetworkPolicyApplicationUndoRecord) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyApplicationUndoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyApplicationUndoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyApplicationUndoRecord proto.InternalMessageInfo

func (m *NetworkPolicyApplicationUndoRecord) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkPolicyApplicationUndoRecord) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *NetworkPolicyApplicationUndoRecord) GetApplyTimestamp() *types.Timestamp {
	if m != nil {
		return m.ApplyTimestamp
	}
	return nil
}

func (m *NetworkPolicyApplicationUndoRecord) GetOriginalModification() *NetworkPolicyModification {
	if m != nil {
		return m.OriginalModification
	}
	return nil
}

func (m *NetworkPolicyApplicationUndoRecord) GetUndoModification() *NetworkPolicyModification {
	if m != nil {
		return m.UndoModification
	}
	return nil
}

func (m *NetworkPolicyApplicationUndoRecord) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyApplicationUndoRecord) Clone() *NetworkPolicyApplicationUndoRecord {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyApplicationUndoRecord)
	*cloned = *m

	cloned.ApplyTimestamp = m.ApplyTimestamp.Clone()
	cloned.OriginalModification = m.OriginalModification.Clone()
	cloned.UndoModification = m.UndoModification.Clone()
	return cloned
}

type NetworkPolicyApplicationUndoDeploymentRecord struct {
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" sql:"pk,type(uuid)"`
	// For SAC
	ClusterId            string                              `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Namespace            string                              `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UndoRecord           *NetworkPolicyApplicationUndoRecord `protobuf:"bytes,4,opt,name=undo_record,json=undoRecord,proto3" json:"undo_record,omitempty" sql:"-"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) Reset() {
	*m = NetworkPolicyApplicationUndoDeploymentRecord{}
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkPolicyApplicationUndoDeploymentRecord) ProtoMessage() {}
func (*NetworkPolicyApplicationUndoDeploymentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ddeaa4e89803b, []int{10}
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPolicyApplicationUndoDeploymentRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyApplicationUndoDeploymentRecord.Merge(m, src)
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyApplicationUndoDeploymentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyApplicationUndoDeploymentRecord proto.InternalMessageInfo

func (m *NetworkPolicyApplicationUndoDeploymentRecord) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) GetUndoRecord() *NetworkPolicyApplicationUndoRecord {
	if m != nil {
		return m.UndoRecord
	}
	return nil
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) Clone() *NetworkPolicyApplicationUndoDeploymentRecord {
	if m == nil {
		return nil
	}
	cloned := new(NetworkPolicyApplicationUndoDeploymentRecord)
	*cloned = *m

	cloned.UndoRecord = m.UndoRecord.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("storage.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("storage.NetworkPolicyType", NetworkPolicyType_name, NetworkPolicyType_value)
	proto.RegisterType((*NetworkPolicy)(nil), "storage.NetworkPolicy")
	proto.RegisterMapType((map[string]string)(nil), "storage.NetworkPolicy.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "storage.NetworkPolicy.LabelsEntry")
	proto.RegisterType((*NetworkPolicySpec)(nil), "storage.NetworkPolicySpec")
	proto.RegisterType((*NetworkPolicyEgressRule)(nil), "storage.NetworkPolicyEgressRule")
	proto.RegisterType((*NetworkPolicyPeer)(nil), "storage.NetworkPolicyPeer")
	proto.RegisterType((*IPBlock)(nil), "storage.IPBlock")
	proto.RegisterType((*NetworkPolicyPort)(nil), "storage.NetworkPolicyPort")
	proto.RegisterType((*NetworkPolicyIngressRule)(nil), "storage.NetworkPolicyIngressRule")
	proto.RegisterType((*NetworkPolicyReference)(nil), "storage.NetworkPolicyReference")
	proto.RegisterType((*NetworkPolicyModification)(nil), "storage.NetworkPolicyModification")
	proto.RegisterType((*NetworkPolicyApplicationUndoRecord)(nil), "storage.NetworkPolicyApplicationUndoRecord")
	proto.RegisterType((*NetworkPolicyApplicationUndoDeploymentRecord)(nil), "storage.NetworkPolicyApplicationUndoDeploymentRecord")
}

func init() { proto.RegisterFile("storage/network_policy.proto", fileDescriptor_d39ddeaa4e89803b) }

var fileDescriptor_d39ddeaa4e89803b = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0x65, 0x27, 0xb6, 0x8f, 0xd2, 0xe0, 0x2c, 0xa1, 0x55, 0x4c, 0x12, 0xbb, 0xe2, 0x82,
	0x90, 0xa6, 0x0e, 0x84, 0x96, 0x69, 0x43, 0x61, 0x26, 0x71, 0x3c, 0xd4, 0x10, 0x6c, 0xcf, 0xda,
	0xa1, 0x13, 0x6e, 0x34, 0x8a, 0xb4, 0x71, 0x35, 0x91, 0xb5, 0x62, 0xb5, 0x6e, 0xe3, 0x19, 0xee,
	0xe0, 0x21, 0x18, 0x1e, 0x87, 0x2b, 0x2e, 0x79, 0x82, 0xc0, 0x84, 0x37, 0xc8, 0x13, 0x30, 0xbb,
	0xfa, 0xb1, 0x9c, 0xda, 0x99, 0x02, 0x57, 0x3e, 0x7b, 0x7e, 0xbe, 0x73, 0xce, 0xb7, 0x47, 0x67,
	0x0d, 0x6b, 0x01, 0xa7, 0xcc, 0xec, 0x93, 0x1d, 0x8f, 0xf0, 0xd7, 0x94, 0x9d, 0x1b, 0x3e, 0x75,
	0x1d, 0x6b, 0x54, 0xf3, 0x19, 0xe5, 0x14, 0xe5, 0x23, 0x6b, 0xb9, 0xd2, 0xa7, 0xb4, 0xef, 0x92,
	0x1d, 0xa9, 0x3e, 0x1d, 0x9e, 0xed, 0x70, 0x67, 0x40, 0x02, 0x6e, 0x0e, 0xfc, 0xd0, 0xb3, 0xbc,
	0x12, 0xe3, 0xb8, 0xe6, 0x29, 0x71, 0x83, 0x58, 0xdb, 0xa7, 0x7d, 0x2a, 0xc5, 0x1d, 0x21, 0x85,
	0x5a, 0xfd, 0xd7, 0x79, 0xb8, 0xd3, 0x0a, 0xd3, 0x75, 0x64, 0x36, 0xb4, 0x06, 0x8a, 0x63, 0x6b,
	0x99, 0x6a, 0x66, 0xb3, 0x78, 0xb0, 0x78, 0x7d, 0x59, 0x29, 0x04, 0x3f, 0xb8, 0x7b, 0xba, 0x7f,
	0xae, 0x63, 0xc5, 0xb1, 0x11, 0x82, 0x9c, 0x67, 0x0e, 0x88, 0xa6, 0x08, 0x3b, 0x96, 0x32, 0xea,
	0x01, 0x58, 0xee, 0x30, 0xe0, 0x84, 0x19, 0x8e, 0xad, 0x65, 0x65, 0xe4, 0xe3, 0xeb, 0xcb, 0xca,
	0x27, 0x01, 0x31, 0x99, 0xf5, 0x72, 0x4f, 0xaf, 0x87, 0xd6, 0x6a, 0xf3, 0x70, 0xfb, 0xa5, 0x63,
	0xdb, 0xc4, 0xdb, 0x16, 0x15, 0x12, 0xbd, 0x2a, 0xa1, 0xf9, 0xc8, 0x27, 0x9b, 0xc3, 0xa1, 0x63,
	0x7f, 0xa4, 0xe3, 0x62, 0x04, 0xd4, 0xb4, 0xd1, 0x7d, 0x58, 0x8c, 0x51, 0x65, 0xc6, 0x9c, 0xcc,
	0xa8, 0x46, 0xba, 0x96, 0x48, 0xbc, 0x0f, 0x45, 0x61, 0x0a, 0x7c, 0xd3, 0x22, 0xda, 0xbc, 0xcc,
	0xfb, 0xc1, 0xf5, 0x65, 0xa5, 0x12, 0xe7, 0x6d, 0xc5, 0xc6, 0xc9, 0xb4, 0x78, 0x1c, 0x85, 0xf6,
	0x60, 0x21, 0x64, 0x49, 0x5b, 0xa8, 0x66, 0x37, 0xd5, 0x5d, 0xbd, 0x16, 0x91, 0x57, 0x9b, 0x60,
	0xa5, 0x76, 0x24, 0x9d, 0x1a, 0x1e, 0x67, 0x23, 0x1c, 0x45, 0xa0, 0x26, 0xa8, 0xa6, 0xe7, 0x51,
	0x6e, 0x72, 0x87, 0x7a, 0x81, 0x96, 0x97, 0x00, 0x1f, 0xce, 0x00, 0xd8, 0x1f, 0x7b, 0x86, 0x28,
	0xe9, 0x58, 0x54, 0x83, 0x5c, 0xe0, 0x13, 0x4b, 0x2b, 0x54, 0x33, 0x9b, 0xea, 0x6e, 0x79, 0x3a,
	0x46, 0xd7, 0x27, 0x16, 0x96, 0x7e, 0xe2, 0x1a, 0x46, 0xe6, 0xc0, 0xd5, 0x8a, 0xe1, 0x35, 0x08,
	0x19, 0x55, 0x40, 0x35, 0x7d, 0xc7, 0x78, 0x45, 0x58, 0xe0, 0x50, 0x4f, 0x03, 0x69, 0x02, 0xd3,
	0x77, 0xbe, 0x0b, 0x35, 0xe8, 0x11, 0xe4, 0x2d, 0x46, 0x4c, 0x4e, 0x6c, 0x4d, 0x8d, 0xf2, 0x84,
	0xa3, 0x54, 0x8b, 0x47, 0xa9, 0xd6, 0x8b, 0x47, 0x09, 0xc7, 0xae, 0xe5, 0xa7, 0xa0, 0xa6, 0x9a,
	0x47, 0x25, 0xc8, 0x9e, 0x93, 0x51, 0x38, 0x1f, 0x58, 0x88, 0x68, 0x05, 0xe6, 0x5f, 0x99, 0xee,
	0x30, 0x9e, 0x89, 0xf0, 0xb0, 0xa7, 0x3c, 0xc9, 0x94, 0xbf, 0x84, 0xd2, 0xcd, 0xb6, 0xff, 0x4d,
	0xbc, 0xfe, 0xb3, 0x02, 0xcb, 0x6f, 0x30, 0x80, 0x9e, 0xc2, 0xa2, 0x4f, 0x6d, 0x23, 0x20, 0x2e,
	0xb1, 0x38, 0x65, 0x12, 0x4a, 0xdd, 0xbd, 0x9b, 0x70, 0x26, 0xab, 0xed, 0x46, 0x56, 0xac, 0xfa,
	0xd4, 0x8e, 0x0f, 0xe8, 0x73, 0xc8, 0x3b, 0x5e, 0x9f, 0x91, 0x20, 0xd0, 0x14, 0x79, 0x5b, 0xf7,
	0xa7, 0x33, 0xdd, 0x0c, 0x9d, 0xf0, 0xd0, 0x25, 0x38, 0x8e, 0x40, 0x4f, 0x60, 0x81, 0x84, 0xb1,
	0x59, 0x19, 0x5b, 0x9d, 0x1e, 0xdb, 0x18, 0x87, 0x46, 0xfe, 0xe8, 0x0b, 0x51, 0xb1, 0xb0, 0x19,
	0x62, 0xd6, 0x03, 0x2d, 0x57, 0xcd, 0x6e, 0x2e, 0xcd, 0xba, 0xe5, 0xde, 0xc8, 0x27, 0xa2, 0xea,
	0x58, 0x0e, 0xf4, 0xd7, 0x70, 0x6f, 0x46, 0x06, 0xf4, 0x31, 0xcc, 0xfb, 0x94, 0xf1, 0x40, 0xcb,
	0xc8, 0x92, 0x66, 0x40, 0x76, 0x28, 0xe3, 0x38, 0x74, 0x44, 0x5b, 0xa0, 0x70, 0x1a, 0x75, 0x3f,
	0xcb, 0x9d, 0x10, 0x86, 0x15, 0x4e, 0xf5, 0xdf, 0x32, 0x37, 0xf8, 0x17, 0x96, 0xff, 0xc3, 0x7f,
	0x03, 0x50, 0xf2, 0xe9, 0x8d, 0x01, 0x94, 0x5b, 0x01, 0x96, 0x93, 0x88, 0x04, 0xe6, 0x01, 0x14,
	0x1c, 0xdf, 0x38, 0x75, 0xa9, 0x75, 0x2e, 0xd7, 0x8d, 0xba, 0x5b, 0x4a, 0x82, 0x9b, 0x9d, 0x03,
	0xa1, 0xc7, 0x79, 0xc7, 0x97, 0x82, 0xfe, 0x18, 0xf2, 0x91, 0x4e, 0x7c, 0x35, 0x96, 0x63, 0xb3,
	0x68, 0xf8, 0xa4, 0x8c, 0xee, 0xc2, 0x02, 0xb9, 0xb0, 0x88, 0xcf, 0x25, 0x27, 0x45, 0x1c, 0x9d,
	0xf4, 0x9f, 0xde, 0xe8, 0x9d, 0x32, 0x8e, 0x1e, 0x42, 0x41, 0x7e, 0x2b, 0x16, 0x75, 0x25, 0xca,
	0xd2, 0xee, 0x72, 0x92, 0xb9, 0x13, 0x19, 0x70, 0xe2, 0x82, 0x56, 0x20, 0x27, 0x58, 0x97, 0x1d,
	0xce, 0x3f, 0x9f, 0xc3, 0xf2, 0x84, 0xd6, 0xa1, 0x28, 0x7e, 0xc3, 0xb5, 0x26, 0xd7, 0xe5, 0xf3,
	0x39, 0x5c, 0x10, 0x2a, 0xb1, 0xb0, 0x0e, 0x00, 0xa4, 0x6c, 0x30, 0x72, 0xa6, 0xff, 0x08, 0xda,
	0xac, 0xc1, 0xfc, 0x0f, 0x77, 0x5f, 0x83, 0xdc, 0x19, 0xa3, 0x83, 0xb7, 0xb8, 0x7d, 0xe9, 0xa7,
	0x7f, 0x0d, 0x77, 0x27, 0x4c, 0x98, 0x9c, 0x11, 0x46, 0x3c, 0x8b, 0xa0, 0xb5, 0xf4, 0xe6, 0x0d,
	0xe9, 0x4c, 0x2d, 0xd5, 0x29, 0x8f, 0x84, 0x7e, 0x01, 0xab, 0x13, 0x58, 0xdf, 0x52, 0xdb, 0x39,
	0x73, 0x2c, 0xb9, 0x1a, 0xd0, 0x3a, 0x80, 0xe9, 0xfb, 0xee, 0xc8, 0x90, 0x4b, 0x2d, 0xc2, 0x93,
	0x9a, 0x13, 0xb1, 0xd9, 0x9e, 0x41, 0x91, 0x53, 0xc3, 0x26, 0x2e, 0xe1, 0x24, 0x2a, 0xbe, 0x32,
	0xbd, 0xf8, 0xa4, 0x42, 0x5c, 0xe0, 0xf4, 0x50, 0x06, 0xe8, 0x7f, 0x2a, 0xa0, 0x4f, 0x38, 0xed,
	0xfb, 0xbe, 0x1b, 0x65, 0x3e, 0xf6, 0x6c, 0x8a, 0x89, 0x45, 0x99, 0x8d, 0x3e, 0x9b, 0x78, 0xc5,
	0xc2, 0xd7, 0xe4, 0xde, 0xf5, 0x65, 0xe5, 0xdd, 0xe8, 0xfd, 0xdb, 0x9e, 0xf1, 0x4e, 0x21, 0xc8,
	0x0d, 0x03, 0x92, 0x0c, 0x95, 0x90, 0x51, 0x1d, 0xde, 0x09, 0xfb, 0x49, 0x9e, 0xe6, 0x68, 0xc8,
	0x6f, 0xdb, 0xb8, 0x4b, 0x32, 0x24, 0x39, 0xa3, 0x17, 0xf0, 0x1e, 0x65, 0x4e, 0xdf, 0xf1, 0x4c,
	0xd7, 0x18, 0xa4, 0xd8, 0x8a, 0x46, 0x7e, 0xc6, 0x4b, 0x95, 0xe6, 0x15, 0xaf, 0xc4, 0x00, 0x13,
	0x6c, 0xb7, 0x61, 0x79, 0xe8, 0xd9, 0x74, 0x12, 0x34, 0xf7, 0xd6, 0xa0, 0x25, 0x11, 0x9c, 0xd6,
	0x88, 0x3d, 0xbd, 0x7d, 0x1b, 0xc3, 0x87, 0xc4, 0x77, 0xe9, 0x68, 0x40, 0x3c, 0x1e, 0x71, 0xfd,
	0x0c, 0xee, 0xd8, 0x89, 0xce, 0x48, 0xfe, 0x6e, 0xcc, 0xa4, 0x7b, 0x71, 0xec, 0xdd, 0xb4, 0xc5,
	0xb4, 0xa4, 0x6e, 0x2a, 0x1c, 0xb2, 0xd4, 0x85, 0x4c, 0xcc, 0x66, 0xf6, 0xe6, 0x6c, 0x9e, 0x80,
	0x2a, 0x9b, 0x67, 0xb2, 0x92, 0xa8, 0xed, 0x07, 0xd3, 0xdb, 0x9e, 0x3a, 0x28, 0x07, 0xea, 0xf5,
	0x65, 0x25, 0x2f, 0xab, 0x7c, 0xa8, 0x63, 0x18, 0x26, 0x86, 0xad, 0x63, 0x28, 0xc4, 0x3b, 0x00,
	0x21, 0x58, 0x3a, 0x6e, 0x75, 0x1b, 0x3d, 0xa3, 0x83, 0xdb, 0xbd, 0x76, 0xbd, 0x7d, 0x54, 0x9a,
	0x43, 0x25, 0x58, 0xec, 0xd5, 0x3b, 0x63, 0x4d, 0x46, 0x68, 0x8e, 0x0f, 0x53, 0x1a, 0x05, 0x2d,
	0xc3, 0x9d, 0x6e, 0xbd, 0x97, 0x52, 0x65, 0xb7, 0x82, 0x1b, 0x8b, 0x48, 0x3c, 0x0a, 0x68, 0x1d,
	0x56, 0x43, 0xfc, 0x56, 0xa3, 0xf7, 0xa2, 0x8d, 0xbf, 0x31, 0x3a, 0xed, 0xa3, 0x66, 0xfd, 0xc4,
	0xe8, 0x9d, 0x74, 0x1a, 0xa5, 0x39, 0x54, 0x81, 0xf7, 0x9b, 0xad, 0xaf, 0x70, 0xa3, 0xdb, 0x9d,
	0xea, 0x90, 0x41, 0x1b, 0x50, 0x6e, 0xcc, 0xb6, 0x2b, 0x07, 0x8f, 0x7e, 0xbf, 0xda, 0xc8, 0xfc,
	0x71, 0xb5, 0x91, 0xf9, 0xeb, 0x6a, 0x23, 0xf3, 0xcb, 0xdf, 0x1b, 0x73, 0xb0, 0xea, 0xd0, 0x5a,
	0xc0, 0x4d, 0xeb, 0x9c, 0xd1, 0x8b, 0x70, 0x7c, 0x63, 0xd2, 0xbe, 0x8f, 0xff, 0x9a, 0x9e, 0x2e,
	0x48, 0xfd, 0xa7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x3d, 0x54, 0xb0, 0xca, 0x0a, 0x00,
	0x00,
}

func (m *NetworkPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ApiVersion) > 0 {
		i -= len(m.ApiVersion)
		copy(dAtA[i:], m.ApiVersion)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ApiVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Yaml) > 0 {
		i -= len(m.Yaml)
		copy(dAtA[i:], m.Yaml)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Yaml)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PolicyTypes) > 0 {
		dAtA4 := make([]byte, len(m.PolicyTypes)*10)
		var j3 int
		for _, num := range m.PolicyTypes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Egress) > 0 {
		for iNdEx := len(m.Egress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Egress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ingress) > 0 {
		for iNdEx := len(m.Ingress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ingress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PodSelector != nil {
		{
			size, err := m.PodSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyEgressRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyEgressRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyEgressRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.To) > 0 {
		for iNdEx := len(m.To) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.To[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IpBlock != nil {
		{
			size, err := m.IpBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NamespaceSelector != nil {
		{
			size, err := m.NamespaceSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PodSelector != nil {
		{
			size, err := m.PodSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Except) > 0 {
		for iNdEx := len(m.Except) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Except[iNdEx])
			copy(dAtA[i:], m.Except[iNdEx])
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Except[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Cidr) > 0 {
		i -= len(m.Cidr)
		copy(dAtA[i:], m.Cidr)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Cidr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortRef != nil {
		{
			size := m.PortRef.Size()
			i -= size
			if _, err := m.PortRef.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Protocol != 0 {
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyPort_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyPort_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNetworkPolicy(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *NetworkPolicyPort_PortName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyPort_PortName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortName)
	copy(dAtA[i:], m.PortName)
	i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.PortName)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *NetworkPolicyIngressRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyIngressRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyIngressRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		for iNdEx := len(m.From) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.From[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyModification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyModification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyModification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToDelete) > 0 {
		for iNdEx := len(m.ToDelete) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToDelete[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApplyYaml) > 0 {
		i -= len(m.ApplyYaml)
		copy(dAtA[i:], m.ApplyYaml)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ApplyYaml)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyApplicationUndoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyApplicationUndoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyApplicationUndoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UndoModification != nil {
		{
			size, err := m.UndoModification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OriginalModification != nil {
		{
			size, err := m.OriginalModification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ApplyTimestamp != nil {
		{
			size, err := m.ApplyTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UndoRecord != nil {
		{
			size, err := m.UndoRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintNetworkPolicy(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetworkPolicy(uint64(len(k))) + 1 + len(v) + sovNetworkPolicy(uint64(len(v)))
			n += mapEntrySize + 1 + sovNetworkPolicy(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetworkPolicy(uint64(len(k))) + 1 + len(v) + sovNetworkPolicy(uint64(len(v)))
			n += mapEntrySize + 1 + sovNetworkPolicy(uint64(mapEntrySize))
		}
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.Yaml)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.ApiVersion)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodSelector != nil {
		l = m.PodSelector.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if len(m.Ingress) > 0 {
		for _, e := range m.Ingress {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if len(m.Egress) > 0 {
		for _, e := range m.Egress {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if len(m.PolicyTypes) > 0 {
		l = 0
		for _, e := range m.PolicyTypes {
			l += sovNetworkPolicy(uint64(e))
		}
		n += 1 + sovNetworkPolicy(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyEgressRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if len(m.To) > 0 {
		for _, e := range m.To {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodSelector != nil {
		l = m.PodSelector.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.NamespaceSelector != nil {
		l = m.NamespaceSelector.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.IpBlock != nil {
		l = m.IpBlock.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if len(m.Except) > 0 {
		for _, s := range m.Except {
			l = len(s)
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovNetworkPolicy(uint64(m.Protocol))
	}
	if m.PortRef != nil {
		n += m.PortRef.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyPort_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovNetworkPolicy(uint64(m.Port))
	return n
}
func (m *NetworkPolicyPort_PortName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortName)
	n += 1 + l + sovNetworkPolicy(uint64(l))
	return n
}
func (m *NetworkPolicyIngressRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if len(m.From) > 0 {
		for _, e := range m.From {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyModification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplyYaml)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if len(m.ToDelete) > 0 {
		for _, e := range m.ToDelete {
			l = e.Size()
			n += 1 + l + sovNetworkPolicy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyApplicationUndoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.ApplyTimestamp != nil {
		l = m.ApplyTimestamp.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.OriginalModification != nil {
		l = m.OriginalModification.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.UndoModification != nil {
		l = m.UndoModification.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPolicyApplicationUndoDeploymentRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.UndoRecord != nil {
		l = m.UndoRecord.Size()
		n += 1 + l + sovNetworkPolicy(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNetworkPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkPolicy(x uint64) (n int) {
	return sovNetworkPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworkPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworkPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworkPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworkPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworkPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworkPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNetworkPolicy
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NetworkPolicySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Yaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodSelector == nil {
				m.PodSelector = &LabelSelector{}
			}
			if err := m.PodSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ingress = append(m.Ingress, &NetworkPolicyIngressRule{})
			if err := m.Ingress[len(m.Ingress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Egress = append(m.Egress, &NetworkPolicyEgressRule{})
			if err := m.Egress[len(m.Egress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v NetworkPolicyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworkPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NetworkPolicyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PolicyTypes = append(m.PolicyTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworkPolicy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNetworkPolicy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNetworkPolicy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PolicyTypes) == 0 {
					m.PolicyTypes = make([]NetworkPolicyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NetworkPolicyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworkPolicy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NetworkPolicyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PolicyTypes = append(m.PolicyTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyEgressRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyEgressRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyEgressRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &NetworkPolicyPort{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, &NetworkPolicyPeer{})
			if err := m.To[len(m.To)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodSelector == nil {
				m.PodSelector = &LabelSelector{}
			}
			if err := m.PodSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceSelector == nil {
				m.NamespaceSelector = &LabelSelector{}
			}
			if err := m.NamespaceSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpBlock == nil {
				m.IpBlock = &IPBlock{}
			}
			if err := m.IpBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Except", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Except = append(m.Except, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortRef = &NetworkPolicyPort_Port{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortRef = &NetworkPolicyPort_PortName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyIngressRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyIngressRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyIngressRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &NetworkPolicyPort{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From, &NetworkPolicyPeer{})
			if err := m.From[len(m.From)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyModification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyModification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyModification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyYaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyYaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDelete = append(m.ToDelete, &NetworkPolicyReference{})
			if err := m.ToDelete[len(m.ToDelete)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyApplicationUndoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyApplicationUndoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyApplicationUndoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyTimestamp == nil {
				m.ApplyTimestamp = &types.Timestamp{}
			}
			if err := m.ApplyTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalModification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalModification == nil {
				m.OriginalModification = &NetworkPolicyModification{}
			}
			if err := m.OriginalModification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndoModification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UndoModification == nil {
				m.UndoModification = &NetworkPolicyModification{}
			}
			if err := m.UndoModification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyApplicationUndoDeploymentRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyApplicationUndoDeploymentRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyApplicationUndoDeploymentRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndoRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UndoRecord == nil {
				m.UndoRecord = &NetworkPolicyApplicationUndoRecord{}
			}
			if err := m.UndoRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkPolicy = fmt.Errorf("proto: unexpected end of group")
)
