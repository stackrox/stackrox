// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package storage

import (
	"iter"
	"time"
)

// ImmutableResourceCollection is an immutable interface for ResourceCollection
type ImmutableResourceCollection interface {
	GetId() string
	GetName() string
	GetDescription() string
	GetImmutableCreatedAt() time.Time
	GetImmutableLastUpdated() time.Time
	GetImmutableCreatedBy() ImmutableSlimUser
	GetImmutableUpdatedBy() ImmutableSlimUser
	// `resource_selectors` resolve as disjunction (OR) with each-other and with selectors from `embedded_collections`. For MVP, the size of resource_selectors will at most be 1 from UX standpoint.
	GetImmutableResourceSelectors() iter.Seq[ImmutableResourceSelector]
	GetImmutableEmbeddedCollections() iter.Seq[ImmutableResourceCollection_EmbeddedResourceCollection]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ResourceCollection
}

// GetImmutableCreatedAt implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return m.CreatedAt.AsTime()
}

// GetImmutableLastUpdated implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableLastUpdated() time.Time {
	if m == nil || m.LastUpdated == nil {
		return time.Time{}
	}
	return m.LastUpdated.AsTime()
}

// GetImmutableCreatedBy implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableCreatedBy() ImmutableSlimUser {
	return m.GetCreatedBy()
}

// GetImmutableUpdatedBy implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableUpdatedBy() ImmutableSlimUser {
	return m.GetUpdatedBy()
}

// GetImmutableResourceSelectors implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableResourceSelectors() iter.Seq[ImmutableResourceSelector] {
	return func(yield func(ImmutableResourceSelector) bool) {
		if m == nil || m.ResourceSelectors == nil {
			return
		}
		for _, v := range m.ResourceSelectors {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableEmbeddedCollections implements ImmutableResourceCollection
func (m *ResourceCollection) GetImmutableEmbeddedCollections() iter.Seq[ImmutableResourceCollection_EmbeddedResourceCollection] {
	return func(yield func(ImmutableResourceCollection_EmbeddedResourceCollection) bool) {
		if m == nil || m.EmbeddedCollections == nil {
			return
		}
		for _, v := range m.EmbeddedCollections {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that ResourceCollection implements ImmutableResourceCollection
var _ ImmutableResourceCollection = (*ResourceCollection)(nil)

// ImmutableResourceCollection_EmbeddedResourceCollection is an immutable interface for ResourceCollection_EmbeddedResourceCollection
type ImmutableResourceCollection_EmbeddedResourceCollection interface {
	// 'id' is searchable to force a separate table
	GetId() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ResourceCollection_EmbeddedResourceCollection
}

// Verify that ResourceCollection_EmbeddedResourceCollection implements ImmutableResourceCollection_EmbeddedResourceCollection
var _ ImmutableResourceCollection_EmbeddedResourceCollection = (*ResourceCollection_EmbeddedResourceCollection)(nil)

// ImmutableResourceSelector is an immutable interface for ResourceSelector
type ImmutableResourceSelector interface {
	// `rules` resolve as a conjunction (AND).
	GetImmutableRules() iter.Seq[ImmutableSelectorRule]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *ResourceSelector
}

// GetImmutableRules implements ImmutableResourceSelector
func (m *ResourceSelector) GetImmutableRules() iter.Seq[ImmutableSelectorRule] {
	return func(yield func(ImmutableSelectorRule) bool) {
		if m == nil || m.Rules == nil {
			return
		}
		for _, v := range m.Rules {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that ResourceSelector implements ImmutableResourceSelector
var _ ImmutableResourceSelector = (*ResourceSelector)(nil)

// ImmutableSelectorRule is an immutable interface for SelectorRule
type ImmutableSelectorRule interface {
	// `field_name` can be one of the following:
	// - Cluster
	// - Cluster Label
	// - Namespace
	// - Namespace Label
	// - Namespace Annotation
	// - Deployment
	// - Deployment Label
	// - Deployment Annotation
	GetFieldName() string
	// 'operator' only supports disjunction (OR) currently
	GetOperator() BooleanOperator
	// `values` resolve as a conjunction (AND) or disjunction (OR) depending on operator. For MVP, only OR is supported from UX standpoint.
	GetImmutableValues() iter.Seq[ImmutableRuleValue]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *SelectorRule
}

// GetImmutableValues implements ImmutableSelectorRule
func (m *SelectorRule) GetImmutableValues() iter.Seq[ImmutableRuleValue] {
	return func(yield func(ImmutableRuleValue) bool) {
		if m == nil || m.Values == nil {
			return
		}
		for _, v := range m.Values {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that SelectorRule implements ImmutableSelectorRule
var _ ImmutableSelectorRule = (*SelectorRule)(nil)

// ImmutableRuleValue is an immutable interface for RuleValue
type ImmutableRuleValue interface {
	GetValue() string
	GetMatchType() MatchType
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *RuleValue
}

// Verify that RuleValue implements ImmutableRuleValue
var _ ImmutableRuleValue = (*RuleValue)(nil)
