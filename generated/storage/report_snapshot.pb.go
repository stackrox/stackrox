// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/report_snapshot.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportSnapshot_ReportType int32

const (
	ReportSnapshot_VULNERABILITY ReportSnapshot_ReportType = 0
)

// Enum value maps for ReportSnapshot_ReportType.
var (
	ReportSnapshot_ReportType_name = map[int32]string{
		0: "VULNERABILITY",
	}
	ReportSnapshot_ReportType_value = map[string]int32{
		"VULNERABILITY": 0,
	}
)

func (x ReportSnapshot_ReportType) Enum() *ReportSnapshot_ReportType {
	p := new(ReportSnapshot_ReportType)
	*p = x
	return p
}

func (x ReportSnapshot_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportSnapshot_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_report_snapshot_proto_enumTypes[0].Descriptor()
}

func (ReportSnapshot_ReportType) Type() protoreflect.EnumType {
	return &file_storage_report_snapshot_proto_enumTypes[0]
}

func (x ReportSnapshot_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ReportStatus_RunState int32

const (
	ReportStatus_WAITING   ReportStatus_RunState = 0
	ReportStatus_PREPARING ReportStatus_RunState = 1
	ReportStatus_GENERATED ReportStatus_RunState = 2
	ReportStatus_DELIVERED ReportStatus_RunState = 3
	ReportStatus_FAILURE   ReportStatus_RunState = 4
)

// Enum value maps for ReportStatus_RunState.
var (
	ReportStatus_RunState_name = map[int32]string{
		0: "WAITING",
		1: "PREPARING",
		2: "GENERATED",
		3: "DELIVERED",
		4: "FAILURE",
	}
	ReportStatus_RunState_value = map[string]int32{
		"WAITING":   0,
		"PREPARING": 1,
		"GENERATED": 2,
		"DELIVERED": 3,
		"FAILURE":   4,
	}
)

func (x ReportStatus_RunState) Enum() *ReportStatus_RunState {
	p := new(ReportStatus_RunState)
	*p = x
	return p
}

func (x ReportStatus_RunState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportStatus_RunState) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_report_snapshot_proto_enumTypes[1].Descriptor()
}

func (ReportStatus_RunState) Type() protoreflect.EnumType {
	return &file_storage_report_snapshot_proto_enumTypes[1]
}

func (x ReportStatus_RunState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ReportStatus_NotificationMethod int32

const (
	ReportStatus_EMAIL    ReportStatus_NotificationMethod = 0
	ReportStatus_DOWNLOAD ReportStatus_NotificationMethod = 1
)

// Enum value maps for ReportStatus_NotificationMethod.
var (
	ReportStatus_NotificationMethod_name = map[int32]string{
		0: "EMAIL",
		1: "DOWNLOAD",
	}
	ReportStatus_NotificationMethod_value = map[string]int32{
		"EMAIL":    0,
		"DOWNLOAD": 1,
	}
)

func (x ReportStatus_NotificationMethod) Enum() *ReportStatus_NotificationMethod {
	p := new(ReportStatus_NotificationMethod)
	*p = x
	return p
}

func (x ReportStatus_NotificationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportStatus_NotificationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_report_snapshot_proto_enumTypes[2].Descriptor()
}

func (ReportStatus_NotificationMethod) Type() protoreflect.EnumType {
	return &file_storage_report_snapshot_proto_enumTypes[2]
}

func (x ReportStatus_NotificationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ReportStatus_RunMethod int32

const (
	ReportStatus_ON_DEMAND  ReportStatus_RunMethod = 0
	ReportStatus_SCHEDULED  ReportStatus_RunMethod = 1
	ReportStatus_VIEW_BASED ReportStatus_RunMethod = 2
)

// Enum value maps for ReportStatus_RunMethod.
var (
	ReportStatus_RunMethod_name = map[int32]string{
		0: "ON_DEMAND",
		1: "SCHEDULED",
		2: "VIEW_BASED",
	}
	ReportStatus_RunMethod_value = map[string]int32{
		"ON_DEMAND":  0,
		"SCHEDULED":  1,
		"VIEW_BASED": 2,
	}
)

func (x ReportStatus_RunMethod) Enum() *ReportStatus_RunMethod {
	p := new(ReportStatus_RunMethod)
	*p = x
	return p
}

func (x ReportStatus_RunMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportStatus_RunMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_report_snapshot_proto_enumTypes[3].Descriptor()
}

func (ReportStatus_RunMethod) Type() protoreflect.EnumType {
	return &file_storage_report_snapshot_proto_enumTypes[3]
}

func (x ReportStatus_RunMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// ReportSnapshot stores the snapshot of a report job. It stores a projection of ReportConfiguration, collection,
// vulnerability filters, notifiers, etc used to generate a report. It also stores the final status of the report job.
type ReportSnapshot struct {
	state                 protoimpl.MessageState    `protogen:"hybrid.v1"`
	ReportId              string                    `protobuf:"bytes,1,opt,name=report_id,json=reportId" json:"report_id,omitempty" sql:"pk,type(uuid)"`                                          // @gotags: sql:"pk,type(uuid)"
	ReportConfigurationId string                    `protobuf:"bytes,2,opt,name=report_configuration_id,json=reportConfigurationId" json:"report_configuration_id,omitempty" search:"Report Configuration ID" sql:"fk(ReportConfiguration:id),allow-null"` // @gotags: search:"Report Configuration ID" sql:"fk(ReportConfiguration:id),allow-null"
	Name                  string                    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" search:"Report Name"`                                                                  // @gotags: search:"Report Name"
	Description           string                    `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Type                  ReportSnapshot_ReportType `protobuf:"varint,5,opt,name=type,enum=storage.ReportSnapshot_ReportType" json:"type,omitempty"`
	// Types that are valid to be assigned to Filter:
	//
	//	*ReportSnapshot_VulnReportFilters
	//	*ReportSnapshot_ViewBasedVulnReportFilters
	Filter       isReportSnapshot_Filter `protobuf_oneof:"filter"`
	Collection   *CollectionSnapshot     `protobuf:"bytes,7,opt,name=collection" json:"collection,omitempty"`
	Schedule     *Schedule               `protobuf:"bytes,8,opt,name=schedule" json:"schedule,omitempty"`
	ReportStatus *ReportStatus           `protobuf:"bytes,9,opt,name=report_status,json=reportStatus" json:"report_status,omitempty"`
	Notifiers    []*NotifierSnapshot     `protobuf:"bytes,10,rep,name=notifiers" json:"notifiers,omitempty"`
	Requester    *SlimUser               `protobuf:"bytes,11,opt,name=requester" json:"requester,omitempty"`
	// fields related to view based reports
	// area_of_concern refers to view from which report is generated - user workload, platform component etc
	AreaOfConcern string `protobuf:"bytes,13,opt,name=area_of_concern,json=areaOfConcern" json:"area_of_concern,omitempty" search:"Area Of Concern"` // @gotags: search:"Area Of Concern"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportSnapshot) Reset() {
	*x = ReportSnapshot{}
	mi := &file_storage_report_snapshot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSnapshot) ProtoMessage() {}

func (x *ReportSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_storage_report_snapshot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ReportSnapshot) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ReportSnapshot) GetReportConfigurationId() string {
	if x != nil {
		return x.ReportConfigurationId
	}
	return ""
}

func (x *ReportSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReportSnapshot) GetType() ReportSnapshot_ReportType {
	if x != nil {
		return x.Type
	}
	return ReportSnapshot_VULNERABILITY
}

func (x *ReportSnapshot) GetFilter() isReportSnapshot_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReportSnapshot) GetVulnReportFilters() *VulnerabilityReportFilters {
	if x != nil {
		if x, ok := x.Filter.(*ReportSnapshot_VulnReportFilters); ok {
			return x.VulnReportFilters
		}
	}
	return nil
}

func (x *ReportSnapshot) GetViewBasedVulnReportFilters() *ViewBasedVulnerabilityReportFilters {
	if x != nil {
		if x, ok := x.Filter.(*ReportSnapshot_ViewBasedVulnReportFilters); ok {
			return x.ViewBasedVulnReportFilters
		}
	}
	return nil
}

func (x *ReportSnapshot) GetCollection() *CollectionSnapshot {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *ReportSnapshot) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ReportSnapshot) GetReportStatus() *ReportStatus {
	if x != nil {
		return x.ReportStatus
	}
	return nil
}

func (x *ReportSnapshot) GetNotifiers() []*NotifierSnapshot {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *ReportSnapshot) GetRequester() *SlimUser {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *ReportSnapshot) GetAreaOfConcern() string {
	if x != nil {
		return x.AreaOfConcern
	}
	return ""
}

func (x *ReportSnapshot) SetReportId(v string) {
	x.ReportId = v
}

func (x *ReportSnapshot) SetReportConfigurationId(v string) {
	x.ReportConfigurationId = v
}

func (x *ReportSnapshot) SetName(v string) {
	x.Name = v
}

func (x *ReportSnapshot) SetDescription(v string) {
	x.Description = v
}

func (x *ReportSnapshot) SetType(v ReportSnapshot_ReportType) {
	x.Type = v
}

func (x *ReportSnapshot) SetVulnReportFilters(v *VulnerabilityReportFilters) {
	if v == nil {
		x.Filter = nil
		return
	}
	x.Filter = &ReportSnapshot_VulnReportFilters{v}
}

func (x *ReportSnapshot) SetViewBasedVulnReportFilters(v *ViewBasedVulnerabilityReportFilters) {
	if v == nil {
		x.Filter = nil
		return
	}
	x.Filter = &ReportSnapshot_ViewBasedVulnReportFilters{v}
}

func (x *ReportSnapshot) SetCollection(v *CollectionSnapshot) {
	x.Collection = v
}

func (x *ReportSnapshot) SetSchedule(v *Schedule) {
	x.Schedule = v
}

func (x *ReportSnapshot) SetReportStatus(v *ReportStatus) {
	x.ReportStatus = v
}

func (x *ReportSnapshot) SetNotifiers(v []*NotifierSnapshot) {
	x.Notifiers = v
}

func (x *ReportSnapshot) SetRequester(v *SlimUser) {
	x.Requester = v
}

func (x *ReportSnapshot) SetAreaOfConcern(v string) {
	x.AreaOfConcern = v
}

func (x *ReportSnapshot) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *ReportSnapshot) HasVulnReportFilters() bool {
	if x == nil {
		return false
	}
	_, ok := x.Filter.(*ReportSnapshot_VulnReportFilters)
	return ok
}

func (x *ReportSnapshot) HasViewBasedVulnReportFilters() bool {
	if x == nil {
		return false
	}
	_, ok := x.Filter.(*ReportSnapshot_ViewBasedVulnReportFilters)
	return ok
}

func (x *ReportSnapshot) HasCollection() bool {
	if x == nil {
		return false
	}
	return x.Collection != nil
}

func (x *ReportSnapshot) HasSchedule() bool {
	if x == nil {
		return false
	}
	return x.Schedule != nil
}

func (x *ReportSnapshot) HasReportStatus() bool {
	if x == nil {
		return false
	}
	return x.ReportStatus != nil
}

func (x *ReportSnapshot) HasRequester() bool {
	if x == nil {
		return false
	}
	return x.Requester != nil
}

func (x *ReportSnapshot) ClearFilter() {
	x.Filter = nil
}

func (x *ReportSnapshot) ClearVulnReportFilters() {
	if _, ok := x.Filter.(*ReportSnapshot_VulnReportFilters); ok {
		x.Filter = nil
	}
}

func (x *ReportSnapshot) ClearViewBasedVulnReportFilters() {
	if _, ok := x.Filter.(*ReportSnapshot_ViewBasedVulnReportFilters); ok {
		x.Filter = nil
	}
}

func (x *ReportSnapshot) ClearCollection() {
	x.Collection = nil
}

func (x *ReportSnapshot) ClearSchedule() {
	x.Schedule = nil
}

func (x *ReportSnapshot) ClearReportStatus() {
	x.ReportStatus = nil
}

func (x *ReportSnapshot) ClearRequester() {
	x.Requester = nil
}

const ReportSnapshot_Filter_not_set_case case_ReportSnapshot_Filter = 0
const ReportSnapshot_VulnReportFilters_case case_ReportSnapshot_Filter = 6
const ReportSnapshot_ViewBasedVulnReportFilters_case case_ReportSnapshot_Filter = 12

func (x *ReportSnapshot) WhichFilter() case_ReportSnapshot_Filter {
	if x == nil {
		return ReportSnapshot_Filter_not_set_case
	}
	switch x.Filter.(type) {
	case *ReportSnapshot_VulnReportFilters:
		return ReportSnapshot_VulnReportFilters_case
	case *ReportSnapshot_ViewBasedVulnReportFilters:
		return ReportSnapshot_ViewBasedVulnReportFilters_case
	default:
		return ReportSnapshot_Filter_not_set_case
	}
}

type ReportSnapshot_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ReportId              string
	ReportConfigurationId string
	Name                  string
	Description           string
	Type                  ReportSnapshot_ReportType
	// Fields of oneof Filter:
	VulnReportFilters          *VulnerabilityReportFilters
	ViewBasedVulnReportFilters *ViewBasedVulnerabilityReportFilters
	// -- end of Filter
	Collection   *CollectionSnapshot
	Schedule     *Schedule
	ReportStatus *ReportStatus
	Notifiers    []*NotifierSnapshot
	Requester    *SlimUser
	// fields related to view based reports
	// area_of_concern refers to view from which report is generated - user workload, platform component etc
	AreaOfConcern string
}

func (b0 ReportSnapshot_builder) Build() *ReportSnapshot {
	m0 := &ReportSnapshot{}
	b, x := &b0, m0
	_, _ = b, x
	x.ReportId = b.ReportId
	x.ReportConfigurationId = b.ReportConfigurationId
	x.Name = b.Name
	x.Description = b.Description
	x.Type = b.Type
	if b.VulnReportFilters != nil {
		x.Filter = &ReportSnapshot_VulnReportFilters{b.VulnReportFilters}
	}
	if b.ViewBasedVulnReportFilters != nil {
		x.Filter = &ReportSnapshot_ViewBasedVulnReportFilters{b.ViewBasedVulnReportFilters}
	}
	x.Collection = b.Collection
	x.Schedule = b.Schedule
	x.ReportStatus = b.ReportStatus
	x.Notifiers = b.Notifiers
	x.Requester = b.Requester
	x.AreaOfConcern = b.AreaOfConcern
	return m0
}

type case_ReportSnapshot_Filter protoreflect.FieldNumber

func (x case_ReportSnapshot_Filter) String() string {
	md := file_storage_report_snapshot_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isReportSnapshot_Filter interface {
	isReportSnapshot_Filter()
}

type ReportSnapshot_VulnReportFilters struct {
	VulnReportFilters *VulnerabilityReportFilters `protobuf:"bytes,6,opt,name=vuln_report_filters,json=vulnReportFilters,oneof"`
}

type ReportSnapshot_ViewBasedVulnReportFilters struct {
	ViewBasedVulnReportFilters *ViewBasedVulnerabilityReportFilters `protobuf:"bytes,12,opt,name=view_based_vuln_report_filters,json=viewBasedVulnReportFilters,oneof"`
}

func (*ReportSnapshot_VulnReportFilters) isReportSnapshot_Filter() {}

func (*ReportSnapshot_ViewBasedVulnReportFilters) isReportSnapshot_Filter() {}

type CollectionSnapshot struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectionSnapshot) Reset() {
	*x = CollectionSnapshot{}
	mi := &file_storage_report_snapshot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionSnapshot) ProtoMessage() {}

func (x *CollectionSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_storage_report_snapshot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CollectionSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollectionSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectionSnapshot) SetId(v string) {
	x.Id = v
}

func (x *CollectionSnapshot) SetName(v string) {
	x.Name = v
}

type CollectionSnapshot_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   string
	Name string
}

func (b0 CollectionSnapshot_builder) Build() *CollectionSnapshot {
	m0 := &CollectionSnapshot{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	return m0
}

type NotifierSnapshot struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to NotifierConfig:
	//
	//	*NotifierSnapshot_EmailConfig
	NotifierConfig isNotifierSnapshot_NotifierConfig `protobuf_oneof:"notifier_config"`
	NotifierName   string                            `protobuf:"bytes,2,opt,name=notifier_name,json=notifierName" json:"notifier_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NotifierSnapshot) Reset() {
	*x = NotifierSnapshot{}
	mi := &file_storage_report_snapshot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifierSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifierSnapshot) ProtoMessage() {}

func (x *NotifierSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_storage_report_snapshot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NotifierSnapshot) GetNotifierConfig() isNotifierSnapshot_NotifierConfig {
	if x != nil {
		return x.NotifierConfig
	}
	return nil
}

func (x *NotifierSnapshot) GetEmailConfig() *EmailNotifierConfiguration {
	if x != nil {
		if x, ok := x.NotifierConfig.(*NotifierSnapshot_EmailConfig); ok {
			return x.EmailConfig
		}
	}
	return nil
}

func (x *NotifierSnapshot) GetNotifierName() string {
	if x != nil {
		return x.NotifierName
	}
	return ""
}

func (x *NotifierSnapshot) SetEmailConfig(v *EmailNotifierConfiguration) {
	if v == nil {
		x.NotifierConfig = nil
		return
	}
	x.NotifierConfig = &NotifierSnapshot_EmailConfig{v}
}

func (x *NotifierSnapshot) SetNotifierName(v string) {
	x.NotifierName = v
}

func (x *NotifierSnapshot) HasNotifierConfig() bool {
	if x == nil {
		return false
	}
	return x.NotifierConfig != nil
}

func (x *NotifierSnapshot) HasEmailConfig() bool {
	if x == nil {
		return false
	}
	_, ok := x.NotifierConfig.(*NotifierSnapshot_EmailConfig)
	return ok
}

func (x *NotifierSnapshot) ClearNotifierConfig() {
	x.NotifierConfig = nil
}

func (x *NotifierSnapshot) ClearEmailConfig() {
	if _, ok := x.NotifierConfig.(*NotifierSnapshot_EmailConfig); ok {
		x.NotifierConfig = nil
	}
}

const NotifierSnapshot_NotifierConfig_not_set_case case_NotifierSnapshot_NotifierConfig = 0
const NotifierSnapshot_EmailConfig_case case_NotifierSnapshot_NotifierConfig = 1

func (x *NotifierSnapshot) WhichNotifierConfig() case_NotifierSnapshot_NotifierConfig {
	if x == nil {
		return NotifierSnapshot_NotifierConfig_not_set_case
	}
	switch x.NotifierConfig.(type) {
	case *NotifierSnapshot_EmailConfig:
		return NotifierSnapshot_EmailConfig_case
	default:
		return NotifierSnapshot_NotifierConfig_not_set_case
	}
}

type NotifierSnapshot_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof NotifierConfig:
	EmailConfig *EmailNotifierConfiguration
	// -- end of NotifierConfig
	NotifierName string
}

func (b0 NotifierSnapshot_builder) Build() *NotifierSnapshot {
	m0 := &NotifierSnapshot{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EmailConfig != nil {
		x.NotifierConfig = &NotifierSnapshot_EmailConfig{b.EmailConfig}
	}
	x.NotifierName = b.NotifierName
	return m0
}

type case_NotifierSnapshot_NotifierConfig protoreflect.FieldNumber

func (x case_NotifierSnapshot_NotifierConfig) String() string {
	md := file_storage_report_snapshot_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isNotifierSnapshot_NotifierConfig interface {
	isNotifierSnapshot_NotifierConfig()
}

type NotifierSnapshot_EmailConfig struct {
	EmailConfig *EmailNotifierConfiguration `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,oneof"`
}

func (*NotifierSnapshot_EmailConfig) isNotifierSnapshot_NotifierConfig() {}

type ReportStatus struct {
	state                    protoimpl.MessageState          `protogen:"hybrid.v1"`
	RunState                 ReportStatus_RunState           `protobuf:"varint,1,opt,name=run_state,json=runState,enum=storage.ReportStatus_RunState" json:"run_state,omitempty" search:"Report State"` // @gotags: search:"Report State"
	QueuedAt                 *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=queued_at,json=queuedAt" json:"queued_at,omitempty" search:"Report Init Time"`                                     // @gotags: search:"Report Init Time"
	CompletedAt              *timestamppb.Timestamp          `protobuf:"bytes,3,opt,name=completed_at,json=completedAt" json:"completed_at,omitempty" search:"Report Completion Time"`                            // @gotags: search:"Report Completion Time"
	ErrorMsg                 string                          `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	ReportRequestType        ReportStatus_RunMethod          `protobuf:"varint,5,opt,name=report_request_type,json=reportRequestType,enum=storage.ReportStatus_RunMethod" json:"report_request_type,omitempty" search:"Report Request Type"`                               // @gotags: search:"Report Request Type"
	ReportNotificationMethod ReportStatus_NotificationMethod `protobuf:"varint,6,opt,name=report_notification_method,json=reportNotificationMethod,enum=storage.ReportStatus_NotificationMethod" json:"report_notification_method,omitempty" search:"Report Notification Method"` // @gotags: search:"Report Notification Method"
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReportStatus) Reset() {
	*x = ReportStatus{}
	mi := &file_storage_report_snapshot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatus) ProtoMessage() {}

func (x *ReportStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_report_snapshot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ReportStatus) GetRunState() ReportStatus_RunState {
	if x != nil {
		return x.RunState
	}
	return ReportStatus_WAITING
}

func (x *ReportStatus) GetQueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QueuedAt
	}
	return nil
}

func (x *ReportStatus) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ReportStatus) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *ReportStatus) GetReportRequestType() ReportStatus_RunMethod {
	if x != nil {
		return x.ReportRequestType
	}
	return ReportStatus_ON_DEMAND
}

func (x *ReportStatus) GetReportNotificationMethod() ReportStatus_NotificationMethod {
	if x != nil {
		return x.ReportNotificationMethod
	}
	return ReportStatus_EMAIL
}

func (x *ReportStatus) SetRunState(v ReportStatus_RunState) {
	x.RunState = v
}

func (x *ReportStatus) SetQueuedAt(v *timestamppb.Timestamp) {
	x.QueuedAt = v
}

func (x *ReportStatus) SetCompletedAt(v *timestamppb.Timestamp) {
	x.CompletedAt = v
}

func (x *ReportStatus) SetErrorMsg(v string) {
	x.ErrorMsg = v
}

func (x *ReportStatus) SetReportRequestType(v ReportStatus_RunMethod) {
	x.ReportRequestType = v
}

func (x *ReportStatus) SetReportNotificationMethod(v ReportStatus_NotificationMethod) {
	x.ReportNotificationMethod = v
}

func (x *ReportStatus) HasQueuedAt() bool {
	if x == nil {
		return false
	}
	return x.QueuedAt != nil
}

func (x *ReportStatus) HasCompletedAt() bool {
	if x == nil {
		return false
	}
	return x.CompletedAt != nil
}

func (x *ReportStatus) ClearQueuedAt() {
	x.QueuedAt = nil
}

func (x *ReportStatus) ClearCompletedAt() {
	x.CompletedAt = nil
}

type ReportStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	RunState                 ReportStatus_RunState
	QueuedAt                 *timestamppb.Timestamp
	CompletedAt              *timestamppb.Timestamp
	ErrorMsg                 string
	ReportRequestType        ReportStatus_RunMethod
	ReportNotificationMethod ReportStatus_NotificationMethod
}

func (b0 ReportStatus_builder) Build() *ReportStatus {
	m0 := &ReportStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.RunState = b.RunState
	x.QueuedAt = b.QueuedAt
	x.CompletedAt = b.CompletedAt
	x.ErrorMsg = b.ErrorMsg
	x.ReportRequestType = b.ReportRequestType
	x.ReportNotificationMethod = b.ReportNotificationMethod
	return m0
}

var File_storage_report_snapshot_proto protoreflect.FileDescriptor

const file_storage_report_snapshot_proto_rawDesc = "" +
	"\n" +
	"\x1dstorage/report_snapshot.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\"storage/report_configuration.proto\x1a+storage/report_notifier_configuration.proto\x1a\x16storage/schedule.proto\x1a\x12storage/user.proto\x1a!google/protobuf/go_features.proto\"\x8b\x06\n" +
	"\x0eReportSnapshot\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\tR\breportId\x126\n" +
	"\x17report_configuration_id\x18\x02 \x01(\tR\x15reportConfigurationId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x126\n" +
	"\x04type\x18\x05 \x01(\x0e2\".storage.ReportSnapshot.ReportTypeR\x04type\x12U\n" +
	"\x13vuln_report_filters\x18\x06 \x01(\v2#.storage.VulnerabilityReportFiltersH\x00R\x11vulnReportFilters\x12r\n" +
	"\x1eview_based_vuln_report_filters\x18\f \x01(\v2,.storage.ViewBasedVulnerabilityReportFiltersH\x00R\x1aviewBasedVulnReportFilters\x12;\n" +
	"\n" +
	"collection\x18\a \x01(\v2\x1b.storage.CollectionSnapshotR\n" +
	"collection\x121\n" +
	"\bschedule\x18\b \x01(\v2\x11.storage.ScheduleB\x02(\x01R\bschedule\x12:\n" +
	"\rreport_status\x18\t \x01(\v2\x15.storage.ReportStatusR\freportStatus\x12;\n" +
	"\tnotifiers\x18\n" +
	" \x03(\v2\x19.storage.NotifierSnapshotB\x02(\x01R\tnotifiers\x12/\n" +
	"\trequester\x18\v \x01(\v2\x11.storage.SlimUserR\trequester\x12&\n" +
	"\x0farea_of_concern\x18\r \x01(\tR\rareaOfConcern\"\x1f\n" +
	"\n" +
	"ReportType\x12\x11\n" +
	"\rVULNERABILITY\x10\x00B\b\n" +
	"\x06filter\"8\n" +
	"\x12CollectionSnapshot\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\x94\x01\n" +
	"\x10NotifierSnapshot\x12H\n" +
	"\femail_config\x18\x01 \x01(\v2#.storage.EmailNotifierConfigurationH\x00R\vemailConfig\x12#\n" +
	"\rnotifier_name\x18\x02 \x01(\tR\fnotifierNameB\x11\n" +
	"\x0fnotifier_config\"\xde\x04\n" +
	"\fReportStatus\x12;\n" +
	"\trun_state\x18\x01 \x01(\x0e2\x1e.storage.ReportStatus.RunStateR\brunState\x12;\n" +
	"\tqueued_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\bqueuedAt\x12A\n" +
	"\fcompleted_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\vcompletedAt\x12\x1b\n" +
	"\terror_msg\x18\x04 \x01(\tR\berrorMsg\x12O\n" +
	"\x13report_request_type\x18\x05 \x01(\x0e2\x1f.storage.ReportStatus.RunMethodR\x11reportRequestType\x12f\n" +
	"\x1areport_notification_method\x18\x06 \x01(\x0e2(.storage.ReportStatus.NotificationMethodR\x18reportNotificationMethod\"Q\n" +
	"\bRunState\x12\v\n" +
	"\aWAITING\x10\x00\x12\r\n" +
	"\tPREPARING\x10\x01\x12\r\n" +
	"\tGENERATED\x10\x02\x12\r\n" +
	"\tDELIVERED\x10\x03\x12\v\n" +
	"\aFAILURE\x10\x04\"-\n" +
	"\x12NotificationMethod\x12\t\n" +
	"\x05EMAIL\x10\x00\x12\f\n" +
	"\bDOWNLOAD\x10\x01\"9\n" +
	"\tRunMethod\x12\r\n" +
	"\tON_DEMAND\x10\x00\x12\r\n" +
	"\tSCHEDULED\x10\x01\x12\x0e\n" +
	"\n" +
	"VIEW_BASED\x10\x02B>\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_storage_report_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_storage_report_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_storage_report_snapshot_proto_goTypes = []any{
	(ReportSnapshot_ReportType)(0),              // 0: storage.ReportSnapshot.ReportType
	(ReportStatus_RunState)(0),                  // 1: storage.ReportStatus.RunState
	(ReportStatus_NotificationMethod)(0),        // 2: storage.ReportStatus.NotificationMethod
	(ReportStatus_RunMethod)(0),                 // 3: storage.ReportStatus.RunMethod
	(*ReportSnapshot)(nil),                      // 4: storage.ReportSnapshot
	(*CollectionSnapshot)(nil),                  // 5: storage.CollectionSnapshot
	(*NotifierSnapshot)(nil),                    // 6: storage.NotifierSnapshot
	(*ReportStatus)(nil),                        // 7: storage.ReportStatus
	(*VulnerabilityReportFilters)(nil),          // 8: storage.VulnerabilityReportFilters
	(*ViewBasedVulnerabilityReportFilters)(nil), // 9: storage.ViewBasedVulnerabilityReportFilters
	(*Schedule)(nil),                            // 10: storage.Schedule
	(*SlimUser)(nil),                            // 11: storage.SlimUser
	(*EmailNotifierConfiguration)(nil),          // 12: storage.EmailNotifierConfiguration
	(*timestamppb.Timestamp)(nil),               // 13: google.protobuf.Timestamp
}
var file_storage_report_snapshot_proto_depIdxs = []int32{
	0,  // 0: storage.ReportSnapshot.type:type_name -> storage.ReportSnapshot.ReportType
	8,  // 1: storage.ReportSnapshot.vuln_report_filters:type_name -> storage.VulnerabilityReportFilters
	9,  // 2: storage.ReportSnapshot.view_based_vuln_report_filters:type_name -> storage.ViewBasedVulnerabilityReportFilters
	5,  // 3: storage.ReportSnapshot.collection:type_name -> storage.CollectionSnapshot
	10, // 4: storage.ReportSnapshot.schedule:type_name -> storage.Schedule
	7,  // 5: storage.ReportSnapshot.report_status:type_name -> storage.ReportStatus
	6,  // 6: storage.ReportSnapshot.notifiers:type_name -> storage.NotifierSnapshot
	11, // 7: storage.ReportSnapshot.requester:type_name -> storage.SlimUser
	12, // 8: storage.NotifierSnapshot.email_config:type_name -> storage.EmailNotifierConfiguration
	1,  // 9: storage.ReportStatus.run_state:type_name -> storage.ReportStatus.RunState
	13, // 10: storage.ReportStatus.queued_at:type_name -> google.protobuf.Timestamp
	13, // 11: storage.ReportStatus.completed_at:type_name -> google.protobuf.Timestamp
	3,  // 12: storage.ReportStatus.report_request_type:type_name -> storage.ReportStatus.RunMethod
	2,  // 13: storage.ReportStatus.report_notification_method:type_name -> storage.ReportStatus.NotificationMethod
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_storage_report_snapshot_proto_init() }
func file_storage_report_snapshot_proto_init() {
	if File_storage_report_snapshot_proto != nil {
		return
	}
	file_storage_report_configuration_proto_init()
	file_storage_report_notifier_configuration_proto_init()
	file_storage_schedule_proto_init()
	file_storage_user_proto_init()
	file_storage_report_snapshot_proto_msgTypes[0].OneofWrappers = []any{
		(*ReportSnapshot_VulnReportFilters)(nil),
		(*ReportSnapshot_ViewBasedVulnReportFilters)(nil),
	}
	file_storage_report_snapshot_proto_msgTypes[2].OneofWrappers = []any{
		(*NotifierSnapshot_EmailConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_report_snapshot_proto_rawDesc), len(file_storage_report_snapshot_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_report_snapshot_proto_goTypes,
		DependencyIndexes: file_storage_report_snapshot_proto_depIdxs,
		EnumInfos:         file_storage_report_snapshot_proto_enumTypes,
		MessageInfos:      file_storage_report_snapshot_proto_msgTypes,
	}.Build()
	File_storage_report_snapshot_proto = out.File
	file_storage_report_snapshot_proto_goTypes = nil
	file_storage_report_snapshot_proto_depIdxs = nil
}
