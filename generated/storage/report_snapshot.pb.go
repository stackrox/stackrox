// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/report_snapshot.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportSnapshot_ReportType int32

const (
	ReportSnapshot_VULNERABILITY ReportSnapshot_ReportType = 0
)

var ReportSnapshot_ReportType_name = map[int32]string{
	0: "VULNERABILITY",
}

var ReportSnapshot_ReportType_value = map[string]int32{
	"VULNERABILITY": 0,
}

func (x ReportSnapshot_ReportType) String() string {
	return proto.EnumName(ReportSnapshot_ReportType_name, int32(x))
}

func (ReportSnapshot_ReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9484322b1a5ce4fe, []int{0, 0}
}

// ReportSnapshot stores the snapshot of a completed report job. It stores a projection of ReportConfiguration, collection,
// vulnerability filters, notifiers, etc used to generate a report. It also stores the final status of the report job.
type ReportSnapshot struct {
	ReportId              string                    `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" sql:"pk,type(uuid)"`
	ReportConfigurationId string                    `protobuf:"bytes,2,opt,name=report_configuration_id,json=reportConfigurationId,proto3" json:"report_configuration_id,omitempty" search:"Report Configuration ID" sql:"fk(ReportConfiguration:id)"`
	Name                  string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" search:"Report Name"`
	Description           string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type                  ReportSnapshot_ReportType `protobuf:"varint,5,opt,name=type,proto3,enum=storage.ReportSnapshot_ReportType" json:"type,omitempty"`
	// Types that are valid to be assigned to Filter:
	//	*ReportSnapshot_VulnReportFilters
	Filter               isReportSnapshot_Filter `protobuf_oneof:"filter"`
	Collection           *CollectionSnapshot     `protobuf:"bytes,7,opt,name=collection,proto3" json:"collection,omitempty"`
	Schedule             *Schedule               `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ReportStatus         *ReportStatus           `protobuf:"bytes,9,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`
	Notifiers            []*NotifierSnapshot     `protobuf:"bytes,10,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	Requester            *SlimUser               `protobuf:"bytes,11,opt,name=requester,proto3" json:"requester,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReportSnapshot) Reset()         { *m = ReportSnapshot{} }
func (m *ReportSnapshot) String() string { return proto.CompactTextString(m) }
func (*ReportSnapshot) ProtoMessage()    {}
func (*ReportSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9484322b1a5ce4fe, []int{0}
}
func (m *ReportSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSnapshot.Merge(m, src)
}
func (m *ReportSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ReportSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSnapshot proto.InternalMessageInfo

type isReportSnapshot_Filter interface {
	isReportSnapshot_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isReportSnapshot_Filter
}

type ReportSnapshot_VulnReportFilters struct {
	VulnReportFilters *VulnerabilityReportFilters `protobuf:"bytes,6,opt,name=vuln_report_filters,json=vulnReportFilters,proto3,oneof" json:"vuln_report_filters,omitempty"`
}

func (*ReportSnapshot_VulnReportFilters) isReportSnapshot_Filter() {}
func (m *ReportSnapshot_VulnReportFilters) Clone() isReportSnapshot_Filter {
	if m == nil {
		return nil
	}
	cloned := new(ReportSnapshot_VulnReportFilters)
	*cloned = *m

	cloned.VulnReportFilters = m.VulnReportFilters.Clone()
	return cloned
}

func (m *ReportSnapshot) GetFilter() isReportSnapshot_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReportSnapshot) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *ReportSnapshot) GetReportConfigurationId() string {
	if m != nil {
		return m.ReportConfigurationId
	}
	return ""
}

func (m *ReportSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReportSnapshot) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReportSnapshot) GetType() ReportSnapshot_ReportType {
	if m != nil {
		return m.Type
	}
	return ReportSnapshot_VULNERABILITY
}

func (m *ReportSnapshot) GetVulnReportFilters() *VulnerabilityReportFilters {
	if x, ok := m.GetFilter().(*ReportSnapshot_VulnReportFilters); ok {
		return x.VulnReportFilters
	}
	return nil
}

func (m *ReportSnapshot) GetCollection() *CollectionSnapshot {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *ReportSnapshot) GetSchedule() *Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *ReportSnapshot) GetReportStatus() *ReportStatus {
	if m != nil {
		return m.ReportStatus
	}
	return nil
}

func (m *ReportSnapshot) GetNotifiers() []*NotifierSnapshot {
	if m != nil {
		return m.Notifiers
	}
	return nil
}

func (m *ReportSnapshot) GetRequester() *SlimUser {
	if m != nil {
		return m.Requester
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReportSnapshot) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReportSnapshot_VulnReportFilters)(nil),
	}
}

func (m *ReportSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportSnapshot) Clone() *ReportSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(ReportSnapshot)
	*cloned = *m

	if m.Filter != nil {
		cloned.Filter = m.Filter.Clone()
	}
	cloned.Collection = m.Collection.Clone()
	cloned.Schedule = m.Schedule.Clone()
	cloned.ReportStatus = m.ReportStatus.Clone()
	if m.Notifiers != nil {
		cloned.Notifiers = make([]*NotifierSnapshot, len(m.Notifiers))
		for idx, v := range m.Notifiers {
			cloned.Notifiers[idx] = v.Clone()
		}
	}
	cloned.Requester = m.Requester.Clone()
	return cloned
}

type CollectionSnapshot struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionSnapshot) Reset()         { *m = CollectionSnapshot{} }
func (m *CollectionSnapshot) String() string { return proto.CompactTextString(m) }
func (*CollectionSnapshot) ProtoMessage()    {}
func (*CollectionSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9484322b1a5ce4fe, []int{1}
}
func (m *CollectionSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSnapshot.Merge(m, src)
}
func (m *CollectionSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *CollectionSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSnapshot proto.InternalMessageInfo

func (m *CollectionSnapshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CollectionSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CollectionSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CollectionSnapshot) Clone() *CollectionSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(CollectionSnapshot)
	*cloned = *m

	return cloned
}

type NotifierSnapshot struct {
	// Types that are valid to be assigned to NotifierConfig:
	//	*NotifierSnapshot_EmailConfig
	NotifierConfig       isNotifierSnapshot_NotifierConfig `protobuf_oneof:"notifier_config"`
	NotifierName         string                            `protobuf:"bytes,2,opt,name=notifier_name,json=notifierName,proto3" json:"notifier_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *NotifierSnapshot) Reset()         { *m = NotifierSnapshot{} }
func (m *NotifierSnapshot) String() string { return proto.CompactTextString(m) }
func (*NotifierSnapshot) ProtoMessage()    {}
func (*NotifierSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9484322b1a5ce4fe, []int{2}
}
func (m *NotifierSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifierSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifierSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifierSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifierSnapshot.Merge(m, src)
}
func (m *NotifierSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *NotifierSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifierSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_NotifierSnapshot proto.InternalMessageInfo

type isNotifierSnapshot_NotifierConfig interface {
	isNotifierSnapshot_NotifierConfig()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNotifierSnapshot_NotifierConfig
}

type NotifierSnapshot_EmailConfig struct {
	EmailConfig *EmailNotifierSnapshot `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,proto3,oneof" json:"email_config,omitempty"`
}

func (*NotifierSnapshot_EmailConfig) isNotifierSnapshot_NotifierConfig() {}
func (m *NotifierSnapshot_EmailConfig) Clone() isNotifierSnapshot_NotifierConfig {
	if m == nil {
		return nil
	}
	cloned := new(NotifierSnapshot_EmailConfig)
	*cloned = *m

	cloned.EmailConfig = m.EmailConfig.Clone()
	return cloned
}

func (m *NotifierSnapshot) GetNotifierConfig() isNotifierSnapshot_NotifierConfig {
	if m != nil {
		return m.NotifierConfig
	}
	return nil
}

func (m *NotifierSnapshot) GetEmailConfig() *EmailNotifierSnapshot {
	if x, ok := m.GetNotifierConfig().(*NotifierSnapshot_EmailConfig); ok {
		return x.EmailConfig
	}
	return nil
}

func (m *NotifierSnapshot) GetNotifierName() string {
	if m != nil {
		return m.NotifierName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotifierSnapshot) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotifierSnapshot_EmailConfig)(nil),
	}
}

func (m *NotifierSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NotifierSnapshot) Clone() *NotifierSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(NotifierSnapshot)
	*cloned = *m

	if m.NotifierConfig != nil {
		cloned.NotifierConfig = m.NotifierConfig.Clone()
	}
	return cloned
}

type EmailNotifierSnapshot struct {
	MailingLists         []string `protobuf:"bytes,1,rep,name=mailing_lists,json=mailingLists,proto3" json:"mailing_lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailNotifierSnapshot) Reset()         { *m = EmailNotifierSnapshot{} }
func (m *EmailNotifierSnapshot) String() string { return proto.CompactTextString(m) }
func (*EmailNotifierSnapshot) ProtoMessage()    {}
func (*EmailNotifierSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9484322b1a5ce4fe, []int{3}
}
func (m *EmailNotifierSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailNotifierSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailNotifierSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailNotifierSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailNotifierSnapshot.Merge(m, src)
}
func (m *EmailNotifierSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *EmailNotifierSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailNotifierSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_EmailNotifierSnapshot proto.InternalMessageInfo

func (m *EmailNotifierSnapshot) GetMailingLists() []string {
	if m != nil {
		return m.MailingLists
	}
	return nil
}

func (m *EmailNotifierSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *EmailNotifierSnapshot) Clone() *EmailNotifierSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(EmailNotifierSnapshot)
	*cloned = *m

	if m.MailingLists != nil {
		cloned.MailingLists = make([]string, len(m.MailingLists))
		copy(cloned.MailingLists, m.MailingLists)
	}
	return cloned
}

func init() {
	proto.RegisterEnum("storage.ReportSnapshot_ReportType", ReportSnapshot_ReportType_name, ReportSnapshot_ReportType_value)
	proto.RegisterType((*ReportSnapshot)(nil), "storage.ReportSnapshot")
	proto.RegisterType((*CollectionSnapshot)(nil), "storage.CollectionSnapshot")
	proto.RegisterType((*NotifierSnapshot)(nil), "storage.NotifierSnapshot")
	proto.RegisterType((*EmailNotifierSnapshot)(nil), "storage.EmailNotifierSnapshot")
}

func init() { proto.RegisterFile("storage/report_snapshot.proto", fileDescriptor_9484322b1a5ce4fe) }

var fileDescriptor_9484322b1a5ce4fe = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcb, 0x4e, 0xdb, 0x4c,
	0x18, 0x8d, 0xb9, 0x26, 0x5f, 0x80, 0x9f, 0x0c, 0xf0, 0x63, 0xa8, 0x9a, 0x58, 0x66, 0x93, 0x4a,
	0x34, 0x48, 0x29, 0x6a, 0xab, 0xb4, 0x1b, 0x42, 0xa9, 0x88, 0x84, 0x58, 0x0c, 0x17, 0xa9, 0xdd,
	0x44, 0xc6, 0x9e, 0x84, 0x11, 0x8e, 0xc7, 0xcc, 0x8c, 0xab, 0xb2, 0xe8, 0x33, 0x74, 0xdb, 0x47,
	0xea, 0xb2, 0x4f, 0x80, 0x5a, 0xfa, 0x06, 0x3c, 0x41, 0x35, 0xe3, 0xb1, 0x49, 0x0c, 0xbb, 0xf8,
	0x7c, 0xe7, 0x9c, 0xef, 0x92, 0xa3, 0x81, 0xe7, 0x42, 0x32, 0xee, 0x0d, 0xc9, 0x0e, 0x27, 0x31,
	0xe3, 0xb2, 0x2f, 0x22, 0x2f, 0x16, 0x97, 0x4c, 0xb6, 0x62, 0xce, 0x24, 0x43, 0xf3, 0xa6, 0xbc,
	0xb9, 0x3a, 0x64, 0x43, 0xa6, 0xb1, 0x1d, 0xf5, 0x2b, 0x2d, 0x6f, 0xa2, 0x4c, 0x9d, 0x08, 0xc2,
	0x0d, 0xe6, 0x16, 0x1c, 0x7d, 0x16, 0x0d, 0xe8, 0x30, 0xe1, 0x9e, 0xa4, 0x2c, 0x32, 0x9c, 0xd5,
	0x49, 0x8e, 0x41, 0xff, 0xcf, 0x50, 0xe1, 0x5f, 0x92, 0x20, 0x09, 0x49, 0x8a, 0xbb, 0x7f, 0x66,
	0x61, 0x09, 0x6b, 0xe2, 0x89, 0x99, 0x0e, 0xed, 0x42, 0xc5, 0xd8, 0xd3, 0xc0, 0xb6, 0x1c, 0xab,
	0x59, 0xe9, 0xae, 0xdf, 0xdf, 0x36, 0x56, 0xc4, 0x75, 0xd8, 0x71, 0xe3, 0xab, 0x6d, 0x79, 0x13,
	0x93, 0x66, 0x92, 0xd0, 0xe0, 0x85, 0x8b, 0xcb, 0x29, 0xb3, 0x17, 0xa0, 0x6f, 0xb0, 0xfe, 0xd4,
	0x50, 0xca, 0x63, 0x4a, 0x7b, 0x1c, 0xdc, 0xdf, 0x36, 0xf6, 0x04, 0xf1, 0xb8, 0x7f, 0xd9, 0x71,
	0xd3, 0x96, 0xce, 0xfe, 0x38, 0xd5, 0xe9, 0x7d, 0x70, 0x1d, 0xdd, 0x64, 0x70, 0xd5, 0x4c, 0x09,
	0x13, 0xf5, 0x8e, 0xee, 0xb8, 0xc6, 0x1f, 0x57, 0x7a, 0x01, 0xda, 0x86, 0x99, 0xc8, 0x1b, 0x11,
	0x7b, 0x5a, 0xf7, 0xb2, 0xef, 0x6f, 0x1b, 0xab, 0x85, 0x5e, 0xc7, 0xde, 0x88, 0xb8, 0x58, 0xb3,
	0x90, 0x03, 0xd5, 0x80, 0x08, 0x9f, 0xd3, 0x58, 0xc9, 0xed, 0x19, 0x25, 0xc2, 0xe3, 0x10, 0x7a,
	0x0d, 0x33, 0x6a, 0x4f, 0x7b, 0xd6, 0xb1, 0x9a, 0x4b, 0x6d, 0xb7, 0x65, 0xce, 0xd7, 0x9a, 0xbc,
	0x95, 0xf9, 0x3c, 0xbd, 0x89, 0x09, 0xd6, 0x7c, 0x74, 0x06, 0x2b, 0x5f, 0x92, 0x30, 0xea, 0x9b,
	0x5b, 0x0c, 0x68, 0x28, 0x09, 0x17, 0xf6, 0x9c, 0x63, 0x35, 0xab, 0xed, 0xad, 0xdc, 0xe6, 0x3c,
	0x09, 0x23, 0xc2, 0xbd, 0x0b, 0x1a, 0x52, 0x79, 0x93, 0x9a, 0x7c, 0x4c, 0xa9, 0x87, 0x25, 0x5c,
	0x53, 0x0e, 0x13, 0x20, 0x7a, 0x07, 0xe0, 0xb3, 0x30, 0x24, 0xbe, 0x9e, 0x77, 0x5e, 0xbb, 0x3d,
	0xcb, 0xdd, 0xf6, 0xf3, 0x52, 0x36, 0x18, 0x1e, 0xa3, 0xa3, 0x97, 0x50, 0xce, 0xfe, 0x75, 0xbb,
	0xac, 0xa5, 0xb5, 0x5c, 0x7a, 0x62, 0x0a, 0x38, 0xa7, 0xa0, 0x0e, 0x2c, 0x66, 0x81, 0x95, 0x9e,
	0x4c, 0x84, 0x5d, 0xd1, 0x9a, 0xb5, 0xe2, 0x0d, 0x74, 0x11, 0x2f, 0xf0, 0xb1, 0x2f, 0xf4, 0x06,
	0x2a, 0x11, 0x93, 0x74, 0x40, 0xd5, 0xd2, 0xe0, 0x4c, 0x37, 0xab, 0xed, 0x8d, 0x5c, 0x77, 0x6c,
	0x2a, 0xf9, 0x90, 0x0f, 0x5c, 0xb4, 0xa3, 0x42, 0x77, 0x9d, 0x10, 0x21, 0x09, 0xb7, 0xab, 0xc5,
	0x21, 0x43, 0x3a, 0x3a, 0x13, 0x84, 0xe3, 0x07, 0x8e, 0xdb, 0x00, 0x78, 0x38, 0x3e, 0xaa, 0xc1,
	0xe2, 0xf9, 0xd9, 0xd1, 0xf1, 0x01, 0xde, 0xeb, 0xf6, 0x8e, 0x7a, 0xa7, 0x9f, 0x96, 0x4b, 0xdd,
	0x32, 0xcc, 0xa5, 0xd7, 0x77, 0xdf, 0x02, 0x7a, 0x7c, 0x21, 0xb4, 0x04, 0x53, 0x59, 0xbe, 0xf1,
	0x14, 0x0d, 0x10, 0x32, 0x09, 0xd2, 0x69, 0x4d, 0x73, 0xe2, 0x7e, 0xb7, 0x60, 0xb9, 0x38, 0x35,
	0xda, 0x87, 0x05, 0x32, 0xf2, 0x68, 0x68, 0x82, 0xae, 0x2d, 0xaa, 0xed, 0x7a, 0x3e, 0xed, 0x81,
	0x2a, 0x16, 0x55, 0x87, 0x25, 0x5c, 0xd5, 0xaa, 0x34, 0xb8, 0x68, 0x0b, 0x16, 0xb3, 0xe5, 0xfb,
	0x63, 0x6d, 0x17, 0x32, 0x50, 0xa5, 0xb5, 0x5b, 0x83, 0xff, 0x72, 0x52, 0xda, 0xcc, 0x7d, 0x0f,
	0x6b, 0x4f, 0xfa, 0x2b, 0x43, 0x85, 0xd3, 0x68, 0xd8, 0x0f, 0xa9, 0x90, 0xc2, 0xb6, 0x9c, 0x69,
	0x65, 0x68, 0xc0, 0x23, 0x85, 0x75, 0x77, 0x7f, 0xde, 0xd5, 0xad, 0x5f, 0x77, 0x75, 0xeb, 0xf7,
	0x5d, 0xdd, 0xfa, 0xf1, 0xb7, 0x5e, 0x82, 0x0d, 0xca, 0x5a, 0x42, 0x7a, 0xfe, 0x15, 0x67, 0x5f,
	0xd3, 0x27, 0x21, 0xdb, 0xe3, 0x73, 0xf6, 0x3e, 0x5d, 0xcc, 0x69, 0xfc, 0xd5, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0xec, 0xac, 0x29, 0xd0, 0x04, 0x00, 0x00,
}

func (m *ReportSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Requester != nil {
		{
			size, err := m.Requester.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notifiers) > 0 {
		for iNdEx := len(m.Notifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.ReportStatus != nil {
		{
			size, err := m.ReportStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintReportSnapshot(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReportConfigurationId) > 0 {
		i -= len(m.ReportConfigurationId)
		copy(dAtA[i:], m.ReportConfigurationId)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.ReportConfigurationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReportId) > 0 {
		i -= len(m.ReportId)
		copy(dAtA[i:], m.ReportId)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.ReportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportSnapshot_VulnReportFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSnapshot_VulnReportFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VulnReportFilters != nil {
		{
			size, err := m.VulnReportFilters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CollectionSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifierSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifierSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotifierName) > 0 {
		i -= len(m.NotifierName)
		copy(dAtA[i:], m.NotifierName)
		i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.NotifierName)))
		i--
		dAtA[i] = 0x12
	}
	if m.NotifierConfig != nil {
		{
			size := m.NotifierConfig.Size()
			i -= size
			if _, err := m.NotifierConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifierSnapshot_EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierSnapshot_EmailConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmailConfig != nil {
		{
			size, err := m.EmailConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EmailNotifierSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailNotifierSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailNotifierSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailingLists) > 0 {
		for iNdEx := len(m.MailingLists) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MailingLists[iNdEx])
			copy(dAtA[i:], m.MailingLists[iNdEx])
			i = encodeVarintReportSnapshot(dAtA, i, uint64(len(m.MailingLists[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintReportSnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovReportSnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportId)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	l = len(m.ReportConfigurationId)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovReportSnapshot(uint64(m.Type))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.ReportStatus != nil {
		l = m.ReportStatus.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if len(m.Notifiers) > 0 {
		for _, e := range m.Notifiers {
			l = e.Size()
			n += 1 + l + sovReportSnapshot(uint64(l))
		}
	}
	if m.Requester != nil {
		l = m.Requester.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSnapshot_VulnReportFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VulnReportFilters != nil {
		l = m.VulnReportFilters.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	return n
}
func (m *CollectionSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifierSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifierConfig != nil {
		n += m.NotifierConfig.Size()
	}
	l = len(m.NotifierName)
	if l > 0 {
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifierSnapshot_EmailConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmailConfig != nil {
		l = m.EmailConfig.Size()
		n += 1 + l + sovReportSnapshot(uint64(l))
	}
	return n
}
func (m *EmailNotifierSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MailingLists) > 0 {
		for _, s := range m.MailingLists {
			l = len(s)
			n += 1 + l + sovReportSnapshot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReportSnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReportSnapshot(x uint64) (n int) {
	return sovReportSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigurationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigurationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ReportSnapshot_ReportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VulnReportFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityReportFilters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filter = &ReportSnapshot_VulnReportFilters{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &CollectionSnapshot{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &Schedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportStatus == nil {
				m.ReportStatus = &ReportStatus{}
			}
			if err := m.ReportStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifiers = append(m.Notifiers, &NotifierSnapshot{})
			if err := m.Notifiers[len(m.Notifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requester == nil {
				m.Requester = &SlimUser{}
			}
			if err := m.Requester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifierSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifierSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifierSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailNotifierSnapshot{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NotifierConfig = &NotifierSnapshot_EmailConfig{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailNotifierSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailNotifierSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailNotifierSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailingLists", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailingLists = append(m.MailingLists, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReportSnapshot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReportSnapshot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReportSnapshot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReportSnapshot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportSnapshot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReportSnapshot = fmt.Errorf("proto: unexpected end of group")
)
