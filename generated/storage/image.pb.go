// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: storage/image.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SourceType int32

const (
	SourceType_OS                SourceType = 0
	SourceType_PYTHON            SourceType = 1
	SourceType_JAVA              SourceType = 2
	SourceType_RUBY              SourceType = 3
	SourceType_NODEJS            SourceType = 4
	SourceType_GO                SourceType = 7
	SourceType_DOTNETCORERUNTIME SourceType = 5
	SourceType_INFRASTRUCTURE    SourceType = 6
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "OS",
		1: "PYTHON",
		2: "JAVA",
		3: "RUBY",
		4: "NODEJS",
		7: "GO",
		5: "DOTNETCORERUNTIME",
		6: "INFRASTRUCTURE",
	}
	SourceType_value = map[string]int32{
		"OS":                0,
		"PYTHON":            1,
		"JAVA":              2,
		"RUBY":              3,
		"NODEJS":            4,
		"GO":                7,
		"DOTNETCORERUNTIME": 5,
		"INFRASTRUCTURE":    6,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[0].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[0]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{0}
}

type Image_Note int32

const (
	Image_MISSING_METADATA                    Image_Note = 0
	Image_MISSING_SCAN_DATA                   Image_Note = 1
	Image_MISSING_SIGNATURE                   Image_Note = 2
	Image_MISSING_SIGNATURE_VERIFICATION_DATA Image_Note = 3
)

// Enum value maps for Image_Note.
var (
	Image_Note_name = map[int32]string{
		0: "MISSING_METADATA",
		1: "MISSING_SCAN_DATA",
		2: "MISSING_SIGNATURE",
		3: "MISSING_SIGNATURE_VERIFICATION_DATA",
	}
	Image_Note_value = map[string]int32{
		"MISSING_METADATA":                    0,
		"MISSING_SCAN_DATA":                   1,
		"MISSING_SIGNATURE":                   2,
		"MISSING_SIGNATURE_VERIFICATION_DATA": 3,
	}
)

func (x Image_Note) Enum() *Image_Note {
	p := new(Image_Note)
	*p = x
	return p
}

func (x Image_Note) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Note) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[1].Descriptor()
}

func (Image_Note) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[1]
}

func (x Image_Note) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Image_Note.Descriptor instead.
func (Image_Note) EnumDescriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{0, 0}
}

type ImageScan_Note int32

const (
	ImageScan_UNSET                           ImageScan_Note = 0
	ImageScan_OS_UNAVAILABLE                  ImageScan_Note = 1
	ImageScan_PARTIAL_SCAN_DATA               ImageScan_Note = 2
	ImageScan_OS_CVES_UNAVAILABLE             ImageScan_Note = 3
	ImageScan_OS_CVES_STALE                   ImageScan_Note = 4
	ImageScan_LANGUAGE_CVES_UNAVAILABLE       ImageScan_Note = 5
	ImageScan_CERTIFIED_RHEL_SCAN_UNAVAILABLE ImageScan_Note = 6
)

// Enum value maps for ImageScan_Note.
var (
	ImageScan_Note_name = map[int32]string{
		0: "UNSET",
		1: "OS_UNAVAILABLE",
		2: "PARTIAL_SCAN_DATA",
		3: "OS_CVES_UNAVAILABLE",
		4: "OS_CVES_STALE",
		5: "LANGUAGE_CVES_UNAVAILABLE",
		6: "CERTIFIED_RHEL_SCAN_UNAVAILABLE",
	}
	ImageScan_Note_value = map[string]int32{
		"UNSET":                           0,
		"OS_UNAVAILABLE":                  1,
		"PARTIAL_SCAN_DATA":               2,
		"OS_CVES_UNAVAILABLE":             3,
		"OS_CVES_STALE":                   4,
		"LANGUAGE_CVES_UNAVAILABLE":       5,
		"CERTIFIED_RHEL_SCAN_UNAVAILABLE": 6,
	}
)

func (x ImageScan_Note) Enum() *ImageScan_Note {
	p := new(ImageScan_Note)
	*p = x
	return p
}

func (x ImageScan_Note) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageScan_Note) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[2].Descriptor()
}

func (ImageScan_Note) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[2]
}

func (x ImageScan_Note) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageScan_Note.Descriptor instead.
func (ImageScan_Note) EnumDescriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{2, 0}
}

// Status represents the status of the result.
type ImageSignatureVerificationResult_Status int32

const (
	ImageSignatureVerificationResult_UNSET ImageSignatureVerificationResult_Status = 0
	// VERIFIED is set when the signature's verification was successful.
	ImageSignatureVerificationResult_VERIFIED ImageSignatureVerificationResult_Status = 1
	// FAILED_VERIFICATION is set when the signature's verification failed.
	ImageSignatureVerificationResult_FAILED_VERIFICATION ImageSignatureVerificationResult_Status = 2
	// INVALID_SIGNATURE_ALGO is set when the signature's algorithm is invalid and unsupported.
	ImageSignatureVerificationResult_INVALID_SIGNATURE_ALGO ImageSignatureVerificationResult_Status = 3
	// CORRUPTED_SIGNATURE is set when the raw signature is corrupted, i.e. wrong base64 encoding.
	ImageSignatureVerificationResult_CORRUPTED_SIGNATURE ImageSignatureVerificationResult_Status = 4
	// GENERIC_ERROR is set when an error occurred during verification that cannot be associated with a specific
	// status.
	ImageSignatureVerificationResult_GENERIC_ERROR ImageSignatureVerificationResult_Status = 5
)

// Enum value maps for ImageSignatureVerificationResult_Status.
var (
	ImageSignatureVerificationResult_Status_name = map[int32]string{
		0: "UNSET",
		1: "VERIFIED",
		2: "FAILED_VERIFICATION",
		3: "INVALID_SIGNATURE_ALGO",
		4: "CORRUPTED_SIGNATURE",
		5: "GENERIC_ERROR",
	}
	ImageSignatureVerificationResult_Status_value = map[string]int32{
		"UNSET":                  0,
		"VERIFIED":               1,
		"FAILED_VERIFICATION":    2,
		"INVALID_SIGNATURE_ALGO": 3,
		"CORRUPTED_SIGNATURE":    4,
		"GENERIC_ERROR":          5,
	}
)

func (x ImageSignatureVerificationResult_Status) Enum() *ImageSignatureVerificationResult_Status {
	p := new(ImageSignatureVerificationResult_Status)
	*p = x
	return p
}

func (x ImageSignatureVerificationResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSignatureVerificationResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[3].Descriptor()
}

func (ImageSignatureVerificationResult_Status) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[3]
}

func (x ImageSignatureVerificationResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSignatureVerificationResult_Status.Descriptor instead.
func (ImageSignatureVerificationResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{4, 0}
}

// Next Tag: 19
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty" search:"Image Sha,store,hidden" sql:"pk"` // @gotags: search:"Image Sha,store,hidden" sql:"pk"
	Name *ImageName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This should deprecate the ImageName field long-term, allowing images with the same digest to be associated with
	// different locations.
	// TODO(dhaus): For now, this message will be without search tags due to duplicated search tags otherwise.
	Names                     []*ImageName                    `protobuf:"bytes,18,rep,name=names,proto3" json:"names,omitempty" search:"-"` // @gotags: search:"-"
	Metadata                  *ImageMetadata                  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Scan                      *ImageScan                      `protobuf:"bytes,3,opt,name=scan,proto3" json:"scan,omitempty" policy:"Image Scan"` // @gotags: policy:"Image Scan"
	SignatureVerificationData *ImageSignatureVerificationData `protobuf:"bytes,15,opt,name=signature_verification_data,json=signatureVerificationData,proto3" json:"signature_verification_data,omitempty"`
	Signature                 *ImageSignature                 `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to SetComponents:
	//
	//	*Image_Components
	SetComponents isImage_SetComponents `protobuf_oneof:"set_components"`
	// Types that are assignable to SetCves:
	//
	//	*Image_Cves
	SetCves isImage_SetCves `protobuf_oneof:"set_cves"`
	// Types that are assignable to SetFixable:
	//
	//	*Image_FixableCves
	SetFixable     isImage_SetFixable     `protobuf_oneof:"set_fixable"`
	LastUpdated    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" search:"Last Updated,hidden"` // @gotags: search:"Last Updated,hidden"
	NotPullable    bool                   `protobuf:"varint,10,opt,name=not_pullable,json=notPullable,proto3" json:"not_pullable,omitempty"`
	IsClusterLocal bool                   `protobuf:"varint,17,opt,name=is_cluster_local,json=isClusterLocal,proto3" json:"is_cluster_local,omitempty"`
	Priority       int64                  `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty" search:"Image Risk Priority,hidden"`                     // @gotags: search:"Image Risk Priority,hidden"
	RiskScore      float32                `protobuf:"fixed32,12,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty" search:"Image Risk Score,hidden"` // @gotags: search:"Image Risk Score,hidden"
	// Types that are assignable to SetTopCvss:
	//
	//	*Image_TopCvss
	SetTopCvss isImage_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	Notes      []Image_Note       `protobuf:"varint,14,rep,packed,name=notes,proto3,enum=storage.Image_Note" json:"notes,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() *ImageName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Image) GetNames() []*ImageName {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Image) GetMetadata() *ImageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Image) GetScan() *ImageScan {
	if x != nil {
		return x.Scan
	}
	return nil
}

func (x *Image) GetSignatureVerificationData() *ImageSignatureVerificationData {
	if x != nil {
		return x.SignatureVerificationData
	}
	return nil
}

func (x *Image) GetSignature() *ImageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (m *Image) GetSetComponents() isImage_SetComponents {
	if m != nil {
		return m.SetComponents
	}
	return nil
}

func (x *Image) GetComponents() int32 {
	if x, ok := x.GetSetComponents().(*Image_Components); ok {
		return x.Components
	}
	return 0
}

func (m *Image) GetSetCves() isImage_SetCves {
	if m != nil {
		return m.SetCves
	}
	return nil
}

func (x *Image) GetCves() int32 {
	if x, ok := x.GetSetCves().(*Image_Cves); ok {
		return x.Cves
	}
	return 0
}

func (m *Image) GetSetFixable() isImage_SetFixable {
	if m != nil {
		return m.SetFixable
	}
	return nil
}

func (x *Image) GetFixableCves() int32 {
	if x, ok := x.GetSetFixable().(*Image_FixableCves); ok {
		return x.FixableCves
	}
	return 0
}

func (x *Image) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Image) GetNotPullable() bool {
	if x != nil {
		return x.NotPullable
	}
	return false
}

func (x *Image) GetIsClusterLocal() bool {
	if x != nil {
		return x.IsClusterLocal
	}
	return false
}

func (x *Image) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Image) GetRiskScore() float32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (m *Image) GetSetTopCvss() isImage_SetTopCvss {
	if m != nil {
		return m.SetTopCvss
	}
	return nil
}

func (x *Image) GetTopCvss() float32 {
	if x, ok := x.GetSetTopCvss().(*Image_TopCvss); ok {
		return x.TopCvss
	}
	return 0
}

func (x *Image) GetNotes() []Image_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

type isImage_SetComponents interface {
	isImage_SetComponents()
}

type Image_Components struct {
	Components int32 `protobuf:"varint,7,opt,name=components,proto3,oneof" search:"Component Count,store,hidden"` // @gotags: search:"Component Count,store,hidden"
}

func (*Image_Components) isImage_SetComponents() {}

type isImage_SetCves interface {
	isImage_SetCves()
}

type Image_Cves struct {
	Cves int32 `protobuf:"varint,8,opt,name=cves,proto3,oneof" search:"Image CVE Count,store"` // @gotags: search:"Image CVE Count,store"
}

func (*Image_Cves) isImage_SetCves() {}

type isImage_SetFixable interface {
	isImage_SetFixable()
}

type Image_FixableCves struct {
	FixableCves int32 `protobuf:"varint,9,opt,name=fixable_cves,json=fixableCves,proto3,oneof" search:"Fixable CVE Count,store,hidden"` // @gotags: search:"Fixable CVE Count,store,hidden"
}

func (*Image_FixableCves) isImage_SetFixable() {}

type isImage_SetTopCvss interface {
	isImage_SetTopCvss()
}

type Image_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,13,opt,name=top_cvss,json=topCvss,proto3,oneof" search:"Image Top CVSS,store"` // @gotags: search:"Image Top CVSS,store"
}

func (*Image_TopCvss) isImage_SetTopCvss() {}

type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mirror string `protobuf:"bytes,3,opt,name=mirror,proto3" json:"mirror,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{1}
}

func (x *DataSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSource) GetMirror() string {
	if x != nil {
		return x.Mirror
	}
	return ""
}

// Next tag: 8
type ImageScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScannerVersion  string                        `protobuf:"bytes,6,opt,name=scanner_version,json=scannerVersion,proto3" json:"scanner_version,omitempty"`
	ScanTime        *timestamppb.Timestamp        `protobuf:"bytes,1,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty" search:"Image Scan Time,store"`                      // @gotags: search:"Image Scan Time,store"
	Components      []*EmbeddedImageScanComponent `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" sql:"-"`                                  // @gotags: sql:"-"
	OperatingSystem string                        `protobuf:"bytes,4,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" search:"Image OS,store"` // @gotags: search:"Image OS,store"
	// DataSource contains information about which integration was used to scan the image
	DataSource *DataSource      `protobuf:"bytes,3,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	Notes      []ImageScan_Note `protobuf:"varint,5,rep,packed,name=notes,proto3,enum=storage.ImageScan_Note" json:"notes,omitempty"`
	// Types that are assignable to Hashoneof:
	//
	//	*ImageScan_Hash
	Hashoneof isImageScan_Hashoneof `protobuf_oneof:"hashoneof"`
}

func (x *ImageScan) Reset() {
	*x = ImageScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageScan) ProtoMessage() {}

func (x *ImageScan) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageScan.ProtoReflect.Descriptor instead.
func (*ImageScan) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{2}
}

func (x *ImageScan) GetScannerVersion() string {
	if x != nil {
		return x.ScannerVersion
	}
	return ""
}

func (x *ImageScan) GetScanTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTime
	}
	return nil
}

func (x *ImageScan) GetComponents() []*EmbeddedImageScanComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ImageScan) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *ImageScan) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *ImageScan) GetNotes() []ImageScan_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (m *ImageScan) GetHashoneof() isImageScan_Hashoneof {
	if m != nil {
		return m.Hashoneof
	}
	return nil
}

func (x *ImageScan) GetHash() uint64 {
	if x, ok := x.GetHashoneof().(*ImageScan_Hash); ok {
		return x.Hash
	}
	return 0
}

type isImageScan_Hashoneof interface {
	isImageScan_Hashoneof()
}

type ImageScan_Hash struct {
	Hash uint64 `protobuf:"varint,7,opt,name=hash,proto3,oneof"`
}

func (*ImageScan_Hash) isImageScan_Hashoneof() {}

type ImageSignatureVerificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ImageSignatureVerificationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ImageSignatureVerificationData) Reset() {
	*x = ImageSignatureVerificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSignatureVerificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignatureVerificationData) ProtoMessage() {}

func (x *ImageSignatureVerificationData) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSignatureVerificationData.ProtoReflect.Descriptor instead.
func (*ImageSignatureVerificationData) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{3}
}

func (x *ImageSignatureVerificationData) GetResults() []*ImageSignatureVerificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Next Tag: 6
type ImageSignatureVerificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verification_time,json=verificationTime,proto3" json:"verification_time,omitempty"`
	// verifier_id correlates to the ID of the signature integration used to verify the signature.
	VerifierId string                                  `protobuf:"bytes,2,opt,name=verifier_id,json=verifierId,proto3" json:"verifier_id,omitempty"`
	Status     ImageSignatureVerificationResult_Status `protobuf:"varint,3,opt,name=status,proto3,enum=storage.ImageSignatureVerificationResult_Status" json:"status,omitempty"`
	// description is set in the case of an error with the specific error's message. Otherwise, this will not be set.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The full image names that are verified by this specific signature integration ID.
	VerifiedImageReferences []string `protobuf:"bytes,5,rep,name=verified_image_references,json=verifiedImageReferences,proto3" json:"verified_image_references,omitempty"`
}

func (x *ImageSignatureVerificationResult) Reset() {
	*x = ImageSignatureVerificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSignatureVerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignatureVerificationResult) ProtoMessage() {}

func (x *ImageSignatureVerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSignatureVerificationResult.ProtoReflect.Descriptor instead.
func (*ImageSignatureVerificationResult) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{4}
}

func (x *ImageSignatureVerificationResult) GetVerificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationTime
	}
	return nil
}

func (x *ImageSignatureVerificationResult) GetVerifierId() string {
	if x != nil {
		return x.VerifierId
	}
	return ""
}

func (x *ImageSignatureVerificationResult) GetStatus() ImageSignatureVerificationResult_Status {
	if x != nil {
		return x.Status
	}
	return ImageSignatureVerificationResult_UNSET
}

func (x *ImageSignatureVerificationResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImageSignatureVerificationResult) GetVerifiedImageReferences() []string {
	if x != nil {
		return x.VerifiedImageReferences
	}
	return nil
}

// Next Tag: 13
type EmbeddedImageScanComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" search:"Component,store"`       // @gotags: search:"Component,store"
	Version string                   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" search:"Component Version,store"` // @gotags: search:"Component Version,store"
	License *License                 `protobuf:"bytes,3,opt,name=license,proto3" json:"license,omitempty"`
	Vulns   []*EmbeddedVulnerability `protobuf:"bytes,4,rep,name=vulns,proto3" json:"vulns,omitempty" hash:"set"` // @gotags: hash:"set"
	// Types that are assignable to HasLayerIndex:
	//
	//	*EmbeddedImageScanComponent_LayerIndex
	HasLayerIndex isEmbeddedImageScanComponent_HasLayerIndex `protobuf_oneof:"has_layer_index"`
	Priority      int64                                      `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty" hash:"ignore"` // @gotags: hash:"ignore"
	Source        SourceType                                 `protobuf:"varint,7,opt,name=source,proto3,enum=storage.SourceType" json:"source,omitempty"`
	Location      string                                     `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are assignable to SetTopCvss:
	//
	//	*EmbeddedImageScanComponent_TopCvss
	SetTopCvss isEmbeddedImageScanComponent_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	RiskScore  float32                                 `protobuf:"fixed32,10,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty" search:"Component Risk Score,hidden"` // @gotags: search:"Component Risk Score,hidden"
	// Component version that fixes all the fixable vulnerabilities in this component.
	FixedBy string `protobuf:"bytes,11,opt,name=fixed_by,json=fixedBy,proto3" json:"fixed_by,omitempty"`
	// Values are cleared after moving to cache, remove them from the grpc return as well
	Executables []*EmbeddedImageScanComponent_Executable `protobuf:"bytes,12,rep,name=executables,proto3" json:"-"` // @gotags: json:"-"
}

func (x *EmbeddedImageScanComponent) Reset() {
	*x = EmbeddedImageScanComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedImageScanComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedImageScanComponent) ProtoMessage() {}

func (x *EmbeddedImageScanComponent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedImageScanComponent.ProtoReflect.Descriptor instead.
func (*EmbeddedImageScanComponent) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{5}
}

func (x *EmbeddedImageScanComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetVulns() []*EmbeddedVulnerability {
	if x != nil {
		return x.Vulns
	}
	return nil
}

func (m *EmbeddedImageScanComponent) GetHasLayerIndex() isEmbeddedImageScanComponent_HasLayerIndex {
	if m != nil {
		return m.HasLayerIndex
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetLayerIndex() int32 {
	if x, ok := x.GetHasLayerIndex().(*EmbeddedImageScanComponent_LayerIndex); ok {
		return x.LayerIndex
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetSource() SourceType {
	if x != nil {
		return x.Source
	}
	return SourceType_OS
}

func (x *EmbeddedImageScanComponent) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (m *EmbeddedImageScanComponent) GetSetTopCvss() isEmbeddedImageScanComponent_SetTopCvss {
	if m != nil {
		return m.SetTopCvss
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetTopCvss() float32 {
	if x, ok := x.GetSetTopCvss().(*EmbeddedImageScanComponent_TopCvss); ok {
		return x.TopCvss
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetRiskScore() float32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetFixedBy() string {
	if x != nil {
		return x.FixedBy
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetExecutables() []*EmbeddedImageScanComponent_Executable {
	if x != nil {
		return x.Executables
	}
	return nil
}

type isEmbeddedImageScanComponent_HasLayerIndex interface {
	isEmbeddedImageScanComponent_HasLayerIndex()
}

type EmbeddedImageScanComponent_LayerIndex struct {
	LayerIndex int32 `protobuf:"varint,5,opt,name=layer_index,json=layerIndex,proto3,oneof"`
}

func (*EmbeddedImageScanComponent_LayerIndex) isEmbeddedImageScanComponent_HasLayerIndex() {}

type isEmbeddedImageScanComponent_SetTopCvss interface {
	isEmbeddedImageScanComponent_SetTopCvss()
}

type EmbeddedImageScanComponent_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,9,opt,name=top_cvss,json=topCvss,proto3,oneof"`
}

func (*EmbeddedImageScanComponent_TopCvss) isEmbeddedImageScanComponent_SetTopCvss() {}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{6}
}

func (x *License) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *License) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *License) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// If any fields of ImageMetadata are modified including subfields, please check pkg/images/enricher/metadata.go
// to ensure that those changes will be automatically picked up
// Next Tag: 6
type ImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// V1Metadata contains all of the V1 docker data. In the normal case we will get this because the image is a
	// V1 image OR because the v2 manifest has a link to it in it's config.
	// See https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	// The only time we will not get it is in the rare caseof a strictly V2 image schema
	V1 *V1Metadata `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty"`
	// We should always get V2 metadata unless the registry is old or the image is strictly V1
	V2 *V2Metadata `protobuf:"bytes,2,opt,name=v2,proto3" json:"v2,omitempty"`
	// We never need both sets of layers so consolidate them. They will be ordered by oldest->newest
	LayerShas []string `protobuf:"bytes,3,rep,name=layer_shas,json=layerShas,proto3" json:"layer_shas,omitempty"`
	// DataSource contains information about which integration was used to pull the metadata
	DataSource *DataSource `protobuf:"bytes,4,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	// Version is used to determine if the metadata needs to be re-pulled
	Version uint64 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadata.ProtoReflect.Descriptor instead.
func (*ImageMetadata) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{7}
}

func (x *ImageMetadata) GetV1() *V1Metadata {
	if x != nil {
		return x.V1
	}
	return nil
}

func (x *ImageMetadata) GetV2() *V2Metadata {
	if x != nil {
		return x.V2
	}
	return nil
}

func (x *ImageMetadata) GetLayerShas() []string {
	if x != nil {
		return x.LayerShas
	}
	return nil
}

func (x *ImageMetadata) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *ImageMetadata) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ImageSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*Signature           `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Fetched    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=fetched,proto3" json:"fetched,omitempty" search:"Image Signature Fetched Time,hidden"` // @gotags: search:"Image Signature Fetched Time,hidden"
}

func (x *ImageSignature) Reset() {
	*x = ImageSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignature) ProtoMessage() {}

func (x *ImageSignature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSignature.ProtoReflect.Descriptor instead.
func (*ImageSignature) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{8}
}

func (x *ImageSignature) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *ImageSignature) GetFetched() *timestamppb.Timestamp {
	if x != nil {
		return x.Fetched
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Signature:
	//
	//	*Signature_Cosign
	Signature isSignature_Signature `protobuf_oneof:"Signature"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{9}
}

func (m *Signature) GetSignature() isSignature_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *Signature) GetCosign() *CosignSignature {
	if x, ok := x.GetSignature().(*Signature_Cosign); ok {
		return x.Cosign
	}
	return nil
}

type isSignature_Signature interface {
	isSignature_Signature()
}

type Signature_Cosign struct {
	Cosign *CosignSignature `protobuf:"bytes,1,opt,name=cosign,proto3,oneof"`
}

func (*Signature_Cosign) isSignature_Signature() {}

type CosignSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawSignature     []byte `protobuf:"bytes,1,opt,name=raw_signature,json=rawSignature,proto3" json:"raw_signature,omitempty"`
	SignaturePayload []byte `protobuf:"bytes,2,opt,name=signature_payload,json=signaturePayload,proto3" json:"signature_payload,omitempty"`
	CertPem          []byte `protobuf:"bytes,3,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
	CertChainPem     []byte `protobuf:"bytes,4,opt,name=cert_chain_pem,json=certChainPem,proto3" json:"cert_chain_pem,omitempty"`
}

func (x *CosignSignature) Reset() {
	*x = CosignSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosignSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosignSignature) ProtoMessage() {}

func (x *CosignSignature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosignSignature.ProtoReflect.Descriptor instead.
func (*CosignSignature) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{10}
}

func (x *CosignSignature) GetRawSignature() []byte {
	if x != nil {
		return x.RawSignature
	}
	return nil
}

func (x *CosignSignature) GetSignaturePayload() []byte {
	if x != nil {
		return x.SignaturePayload
	}
	return nil
}

func (x *CosignSignature) GetCertPem() []byte {
	if x != nil {
		return x.CertPem
	}
	return nil
}

func (x *CosignSignature) GetCertChainPem() []byte {
	if x != nil {
		return x.CertChainPem
	}
	return nil
}

type V2Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *V2Metadata) Reset() {
	*x = V2Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2Metadata) ProtoMessage() {}

func (x *V2Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2Metadata.ProtoReflect.Descriptor instead.
func (*V2Metadata) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{11}
}

func (x *V2Metadata) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type V1Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest     string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Created    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty" search:"Image Created Time,store"` // @gotags: search:"Image Created Time,store"
	Author     string                 `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Layers     []*ImageLayer          `protobuf:"bytes,4,rep,name=layers,proto3" json:"layers,omitempty"`
	User       string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty" search:"Image User"`                                                                                             // @gotags: search:"Image User"
	Command    []string               `protobuf:"bytes,6,rep,name=command,proto3" json:"command,omitempty" search:"Image Command"`                                                                                       // @gotags: search:"Image Command"
	Entrypoint []string               `protobuf:"bytes,7,rep,name=entrypoint,proto3" json:"entrypoint,omitempty" search:"Image Entrypoint"`                                                                                 // @gotags: search:"Image Entrypoint"
	Volumes    []string               `protobuf:"bytes,8,rep,name=volumes,proto3" json:"volumes,omitempty" search:"Image Volumes"`                                                                                       // @gotags: search:"Image Volumes"
	Labels     map[string]string      `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" search:"Image Label,store"` // @gotags: search:"Image Label,store"
}

func (x *V1Metadata) Reset() {
	*x = V1Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V1Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V1Metadata) ProtoMessage() {}

func (x *V1Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V1Metadata.ProtoReflect.Descriptor instead.
func (*V1Metadata) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{12}
}

func (x *V1Metadata) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *V1Metadata) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *V1Metadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *V1Metadata) GetLayers() []*ImageLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *V1Metadata) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *V1Metadata) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *V1Metadata) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *V1Metadata) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *V1Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ImageLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruction string                 `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty" search:"Dockerfile Instruction Keyword,store"` // @gotags: search:"Dockerfile Instruction Keyword,store"
	Value       string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" search:"Dockerfile Instruction Value,store"`             // @gotags: search:"Dockerfile Instruction Value,store"
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Author      string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Empty       bool                   `protobuf:"varint,6,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *ImageLayer) Reset() {
	*x = ImageLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageLayer) ProtoMessage() {}

func (x *ImageLayer) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageLayer.ProtoReflect.Descriptor instead.
func (*ImageLayer) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{13}
}

func (x *ImageLayer) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *ImageLayer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ImageLayer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ImageLayer) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ImageLayer) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

type ImageName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registry string `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty" search:"Image Registry,store"`                 // @gotags: search:"Image Registry,store"
	Remote   string `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty" search:"Image Remote,store"`                     // @gotags: search:"Image Remote,store"
	Tag      string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty" search:"Image Tag,store"`                           // @gotags: search:"Image Tag,store"
	FullName string `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" search:"Image,store,analyzer=standard"` // @gotags: search:"Image,store,analyzer=standard"
}

func (x *ImageName) Reset() {
	*x = ImageName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageName) ProtoMessage() {}

func (x *ImageName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageName.ProtoReflect.Descriptor instead.
func (*ImageName) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{14}
}

func (x *ImageName) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *ImageName) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *ImageName) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageName) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type ListImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to SetComponents:
	//
	//	*ListImage_Components
	SetComponents isListImage_SetComponents `protobuf_oneof:"set_components"`
	// Types that are assignable to SetCves:
	//
	//	*ListImage_Cves
	SetCves isListImage_SetCves `protobuf_oneof:"set_cves"`
	// Types that are assignable to SetFixable:
	//
	//	*ListImage_FixableCves
	SetFixable  isListImage_SetFixable `protobuf_oneof:"set_fixable"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Priority    int64                  `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ListImage) Reset() {
	*x = ListImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImage) ProtoMessage() {}

func (x *ListImage) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImage.ProtoReflect.Descriptor instead.
func (*ListImage) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{15}
}

func (x *ListImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ListImage) GetSetComponents() isListImage_SetComponents {
	if m != nil {
		return m.SetComponents
	}
	return nil
}

func (x *ListImage) GetComponents() int32 {
	if x, ok := x.GetSetComponents().(*ListImage_Components); ok {
		return x.Components
	}
	return 0
}

func (m *ListImage) GetSetCves() isListImage_SetCves {
	if m != nil {
		return m.SetCves
	}
	return nil
}

func (x *ListImage) GetCves() int32 {
	if x, ok := x.GetSetCves().(*ListImage_Cves); ok {
		return x.Cves
	}
	return 0
}

func (m *ListImage) GetSetFixable() isListImage_SetFixable {
	if m != nil {
		return m.SetFixable
	}
	return nil
}

func (x *ListImage) GetFixableCves() int32 {
	if x, ok := x.GetSetFixable().(*ListImage_FixableCves); ok {
		return x.FixableCves
	}
	return 0
}

func (x *ListImage) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ListImage) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ListImage) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type isListImage_SetComponents interface {
	isListImage_SetComponents()
}

type ListImage_Components struct {
	Components int32 `protobuf:"varint,3,opt,name=components,proto3,oneof"`
}

func (*ListImage_Components) isListImage_SetComponents() {}

type isListImage_SetCves interface {
	isListImage_SetCves()
}

type ListImage_Cves struct {
	Cves int32 `protobuf:"varint,4,opt,name=cves,proto3,oneof"`
}

func (*ListImage_Cves) isListImage_SetCves() {}

type isListImage_SetFixable interface {
	isListImage_SetFixable()
}

type ListImage_FixableCves struct {
	FixableCves int32 `protobuf:"varint,5,opt,name=fixable_cves,json=fixableCves,proto3,oneof"`
}

func (*ListImage_FixableCves) isListImage_SetFixable() {}

type WatchedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" sql:"pk"` // @gotags: sql:"pk"
}

func (x *WatchedImage) Reset() {
	*x = WatchedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedImage) ProtoMessage() {}

func (x *WatchedImage) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchedImage.ProtoReflect.Descriptor instead.
func (*WatchedImage) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{16}
}

func (x *WatchedImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EmbeddedImageScanComponent_Executable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Dependencies []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *EmbeddedImageScanComponent_Executable) Reset() {
	*x = EmbeddedImageScanComponent_Executable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_image_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddedImageScanComponent_Executable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedImageScanComponent_Executable) ProtoMessage() {}

func (x *EmbeddedImageScanComponent_Executable) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedImageScanComponent_Executable.ProtoReflect.Descriptor instead.
func (*EmbeddedImageScanComponent_Executable) Descriptor() ([]byte, []int) {
	return file_storage_image_proto_rawDescGZIP(), []int{5, 0}
}

func (x *EmbeddedImageScanComponent_Executable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EmbeddedImageScanComponent_Executable) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

var File_storage_image_proto protoreflect.FileDescriptor

var file_storage_image_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x07, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x63, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x04,
	0x73, 0x63, 0x61, 0x6e, 0x12, 0x67, 0x0a, 0x1b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x63, 0x76, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c,
	0x66, 0x69, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x76, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72,
	0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x76, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x43, 0x76, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x73, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x03, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x76, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x76,
	0x73, 0x73, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x48, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x94, 0x04, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xac, 0x01,
	0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x53, 0x5f, 0x43, 0x56, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x53, 0x5f, 0x43, 0x56, 0x45, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x56, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x48, 0x45, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x42, 0x0b, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x68, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x65, 0x0a, 0x1e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xb9, 0x03, 0x0a, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0xc6, 0x04, 0x0a,
	0x1a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x75, 0x6c, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x75, 0x6c, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x76, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x43, 0x76, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x0a,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x63, 0x76, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x02,
	0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x02, 0x76,
	0x31, 0x12, 0x23, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x02, 0x76, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x22, 0x4c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x69,
	0x67, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x65, 0x6d, 0x22, 0x24, 0x0a, 0x0a, 0x56, 0x32, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xfb, 0x02, 0x0a,
	0x0a, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x6e, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x63, 0x76, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x76, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x66,
	0x69, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x22,
	0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x2a, 0x73, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x55, 0x42, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x44, 0x45,
	0x4a, 0x53, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x4f, 0x54, 0x4e, 0x45, 0x54, 0x43, 0x4f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x42, 0x2e, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5a, 0x11, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_image_proto_rawDescOnce sync.Once
	file_storage_image_proto_rawDescData = file_storage_image_proto_rawDesc
)

func file_storage_image_proto_rawDescGZIP() []byte {
	file_storage_image_proto_rawDescOnce.Do(func() {
		file_storage_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_image_proto_rawDescData)
	})
	return file_storage_image_proto_rawDescData
}

var file_storage_image_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_storage_image_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_storage_image_proto_goTypes = []any{
	(SourceType)(0),     // 0: storage.SourceType
	(Image_Note)(0),     // 1: storage.Image.Note
	(ImageScan_Note)(0), // 2: storage.ImageScan.Note
	(ImageSignatureVerificationResult_Status)(0), // 3: storage.ImageSignatureVerificationResult.Status
	(*Image)(nil),                                 // 4: storage.Image
	(*DataSource)(nil),                            // 5: storage.DataSource
	(*ImageScan)(nil),                             // 6: storage.ImageScan
	(*ImageSignatureVerificationData)(nil),        // 7: storage.ImageSignatureVerificationData
	(*ImageSignatureVerificationResult)(nil),      // 8: storage.ImageSignatureVerificationResult
	(*EmbeddedImageScanComponent)(nil),            // 9: storage.EmbeddedImageScanComponent
	(*License)(nil),                               // 10: storage.License
	(*ImageMetadata)(nil),                         // 11: storage.ImageMetadata
	(*ImageSignature)(nil),                        // 12: storage.ImageSignature
	(*Signature)(nil),                             // 13: storage.Signature
	(*CosignSignature)(nil),                       // 14: storage.CosignSignature
	(*V2Metadata)(nil),                            // 15: storage.V2Metadata
	(*V1Metadata)(nil),                            // 16: storage.V1Metadata
	(*ImageLayer)(nil),                            // 17: storage.ImageLayer
	(*ImageName)(nil),                             // 18: storage.ImageName
	(*ListImage)(nil),                             // 19: storage.ListImage
	(*WatchedImage)(nil),                          // 20: storage.WatchedImage
	(*EmbeddedImageScanComponent_Executable)(nil), // 21: storage.EmbeddedImageScanComponent.Executable
	nil,                           // 22: storage.V1Metadata.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 23: google.protobuf.Timestamp
	(*EmbeddedVulnerability)(nil), // 24: storage.EmbeddedVulnerability
}
var file_storage_image_proto_depIdxs = []int32{
	18, // 0: storage.Image.name:type_name -> storage.ImageName
	18, // 1: storage.Image.names:type_name -> storage.ImageName
	11, // 2: storage.Image.metadata:type_name -> storage.ImageMetadata
	6,  // 3: storage.Image.scan:type_name -> storage.ImageScan
	7,  // 4: storage.Image.signature_verification_data:type_name -> storage.ImageSignatureVerificationData
	12, // 5: storage.Image.signature:type_name -> storage.ImageSignature
	23, // 6: storage.Image.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 7: storage.Image.notes:type_name -> storage.Image.Note
	23, // 8: storage.ImageScan.scan_time:type_name -> google.protobuf.Timestamp
	9,  // 9: storage.ImageScan.components:type_name -> storage.EmbeddedImageScanComponent
	5,  // 10: storage.ImageScan.data_source:type_name -> storage.DataSource
	2,  // 11: storage.ImageScan.notes:type_name -> storage.ImageScan.Note
	8,  // 12: storage.ImageSignatureVerificationData.results:type_name -> storage.ImageSignatureVerificationResult
	23, // 13: storage.ImageSignatureVerificationResult.verification_time:type_name -> google.protobuf.Timestamp
	3,  // 14: storage.ImageSignatureVerificationResult.status:type_name -> storage.ImageSignatureVerificationResult.Status
	10, // 15: storage.EmbeddedImageScanComponent.license:type_name -> storage.License
	24, // 16: storage.EmbeddedImageScanComponent.vulns:type_name -> storage.EmbeddedVulnerability
	0,  // 17: storage.EmbeddedImageScanComponent.source:type_name -> storage.SourceType
	21, // 18: storage.EmbeddedImageScanComponent.executables:type_name -> storage.EmbeddedImageScanComponent.Executable
	16, // 19: storage.ImageMetadata.v1:type_name -> storage.V1Metadata
	15, // 20: storage.ImageMetadata.v2:type_name -> storage.V2Metadata
	5,  // 21: storage.ImageMetadata.data_source:type_name -> storage.DataSource
	13, // 22: storage.ImageSignature.signatures:type_name -> storage.Signature
	23, // 23: storage.ImageSignature.fetched:type_name -> google.protobuf.Timestamp
	14, // 24: storage.Signature.cosign:type_name -> storage.CosignSignature
	23, // 25: storage.V1Metadata.created:type_name -> google.protobuf.Timestamp
	17, // 26: storage.V1Metadata.layers:type_name -> storage.ImageLayer
	22, // 27: storage.V1Metadata.labels:type_name -> storage.V1Metadata.LabelsEntry
	23, // 28: storage.ImageLayer.created:type_name -> google.protobuf.Timestamp
	23, // 29: storage.ListImage.created:type_name -> google.protobuf.Timestamp
	23, // 30: storage.ListImage.last_updated:type_name -> google.protobuf.Timestamp
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_storage_image_proto_init() }
func file_storage_image_proto_init() {
	if File_storage_image_proto != nil {
		return
	}
	file_storage_vulnerability_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_image_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ImageScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSignatureVerificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSignatureVerificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EmbeddedImageScanComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CosignSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*V2Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*V1Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ImageLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ImageName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*WatchedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_image_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*EmbeddedImageScanComponent_Executable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_image_proto_msgTypes[0].OneofWrappers = []any{
		(*Image_Components)(nil),
		(*Image_Cves)(nil),
		(*Image_FixableCves)(nil),
		(*Image_TopCvss)(nil),
	}
	file_storage_image_proto_msgTypes[2].OneofWrappers = []any{
		(*ImageScan_Hash)(nil),
	}
	file_storage_image_proto_msgTypes[5].OneofWrappers = []any{
		(*EmbeddedImageScanComponent_LayerIndex)(nil),
		(*EmbeddedImageScanComponent_TopCvss)(nil),
	}
	file_storage_image_proto_msgTypes[9].OneofWrappers = []any{
		(*Signature_Cosign)(nil),
	}
	file_storage_image_proto_msgTypes[15].OneofWrappers = []any{
		(*ListImage_Components)(nil),
		(*ListImage_Cves)(nil),
		(*ListImage_FixableCves)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_image_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_image_proto_goTypes,
		DependencyIndexes: file_storage_image_proto_depIdxs,
		EnumInfos:         file_storage_image_proto_enumTypes,
		MessageInfos:      file_storage_image_proto_msgTypes,
	}.Build()
	File_storage_image_proto = out.File
	file_storage_image_proto_rawDesc = nil
	file_storage_image_proto_goTypes = nil
	file_storage_image_proto_depIdxs = nil
}
