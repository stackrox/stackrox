// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: storage/image.proto

//go:build !protoopaque

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SourceType int32

const (
	SourceType_OS                SourceType = 0
	SourceType_PYTHON            SourceType = 1
	SourceType_JAVA              SourceType = 2
	SourceType_RUBY              SourceType = 3
	SourceType_NODEJS            SourceType = 4
	SourceType_GO                SourceType = 7
	SourceType_DOTNETCORERUNTIME SourceType = 5
	SourceType_INFRASTRUCTURE    SourceType = 6
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "OS",
		1: "PYTHON",
		2: "JAVA",
		3: "RUBY",
		4: "NODEJS",
		7: "GO",
		5: "DOTNETCORERUNTIME",
		6: "INFRASTRUCTURE",
	}
	SourceType_value = map[string]int32{
		"OS":                0,
		"PYTHON":            1,
		"JAVA":              2,
		"RUBY":              3,
		"NODEJS":            4,
		"GO":                7,
		"DOTNETCORERUNTIME": 5,
		"INFRASTRUCTURE":    6,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[0].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[0]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Image_Note int32

const (
	Image_MISSING_METADATA                    Image_Note = 0
	Image_MISSING_SCAN_DATA                   Image_Note = 1
	Image_MISSING_SIGNATURE                   Image_Note = 2
	Image_MISSING_SIGNATURE_VERIFICATION_DATA Image_Note = 3
)

// Enum value maps for Image_Note.
var (
	Image_Note_name = map[int32]string{
		0: "MISSING_METADATA",
		1: "MISSING_SCAN_DATA",
		2: "MISSING_SIGNATURE",
		3: "MISSING_SIGNATURE_VERIFICATION_DATA",
	}
	Image_Note_value = map[string]int32{
		"MISSING_METADATA":                    0,
		"MISSING_SCAN_DATA":                   1,
		"MISSING_SIGNATURE":                   2,
		"MISSING_SIGNATURE_VERIFICATION_DATA": 3,
	}
)

func (x Image_Note) Enum() *Image_Note {
	p := new(Image_Note)
	*p = x
	return p
}

func (x Image_Note) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Note) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[1].Descriptor()
}

func (Image_Note) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[1]
}

func (x Image_Note) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ImageScan_Note int32

const (
	ImageScan_UNSET                           ImageScan_Note = 0
	ImageScan_OS_UNAVAILABLE                  ImageScan_Note = 1
	ImageScan_PARTIAL_SCAN_DATA               ImageScan_Note = 2
	ImageScan_OS_CVES_UNAVAILABLE             ImageScan_Note = 3
	ImageScan_OS_CVES_STALE                   ImageScan_Note = 4
	ImageScan_LANGUAGE_CVES_UNAVAILABLE       ImageScan_Note = 5
	ImageScan_CERTIFIED_RHEL_SCAN_UNAVAILABLE ImageScan_Note = 6
)

// Enum value maps for ImageScan_Note.
var (
	ImageScan_Note_name = map[int32]string{
		0: "UNSET",
		1: "OS_UNAVAILABLE",
		2: "PARTIAL_SCAN_DATA",
		3: "OS_CVES_UNAVAILABLE",
		4: "OS_CVES_STALE",
		5: "LANGUAGE_CVES_UNAVAILABLE",
		6: "CERTIFIED_RHEL_SCAN_UNAVAILABLE",
	}
	ImageScan_Note_value = map[string]int32{
		"UNSET":                           0,
		"OS_UNAVAILABLE":                  1,
		"PARTIAL_SCAN_DATA":               2,
		"OS_CVES_UNAVAILABLE":             3,
		"OS_CVES_STALE":                   4,
		"LANGUAGE_CVES_UNAVAILABLE":       5,
		"CERTIFIED_RHEL_SCAN_UNAVAILABLE": 6,
	}
)

func (x ImageScan_Note) Enum() *ImageScan_Note {
	p := new(ImageScan_Note)
	*p = x
	return p
}

func (x ImageScan_Note) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageScan_Note) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[2].Descriptor()
}

func (ImageScan_Note) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[2]
}

func (x ImageScan_Note) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Status represents the status of the result.
type ImageSignatureVerificationResult_Status int32

const (
	ImageSignatureVerificationResult_UNSET ImageSignatureVerificationResult_Status = 0
	// VERIFIED is set when the signature's verification was successful.
	ImageSignatureVerificationResult_VERIFIED ImageSignatureVerificationResult_Status = 1
	// FAILED_VERIFICATION is set when the signature's verification failed.
	ImageSignatureVerificationResult_FAILED_VERIFICATION ImageSignatureVerificationResult_Status = 2
	// INVALID_SIGNATURE_ALGO is set when the signature's algorithm is invalid and unsupported.
	ImageSignatureVerificationResult_INVALID_SIGNATURE_ALGO ImageSignatureVerificationResult_Status = 3
	// CORRUPTED_SIGNATURE is set when the raw signature is corrupted, i.e. wrong base64 encoding.
	ImageSignatureVerificationResult_CORRUPTED_SIGNATURE ImageSignatureVerificationResult_Status = 4
	// GENERIC_ERROR is set when an error occurred during verification that cannot be associated with a specific
	// status.
	ImageSignatureVerificationResult_GENERIC_ERROR ImageSignatureVerificationResult_Status = 5
)

// Enum value maps for ImageSignatureVerificationResult_Status.
var (
	ImageSignatureVerificationResult_Status_name = map[int32]string{
		0: "UNSET",
		1: "VERIFIED",
		2: "FAILED_VERIFICATION",
		3: "INVALID_SIGNATURE_ALGO",
		4: "CORRUPTED_SIGNATURE",
		5: "GENERIC_ERROR",
	}
	ImageSignatureVerificationResult_Status_value = map[string]int32{
		"UNSET":                  0,
		"VERIFIED":               1,
		"FAILED_VERIFICATION":    2,
		"INVALID_SIGNATURE_ALGO": 3,
		"CORRUPTED_SIGNATURE":    4,
		"GENERIC_ERROR":          5,
	}
)

func (x ImageSignatureVerificationResult_Status) Enum() *ImageSignatureVerificationResult_Status {
	p := new(ImageSignatureVerificationResult_Status)
	*p = x
	return p
}

func (x ImageSignatureVerificationResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSignatureVerificationResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_image_proto_enumTypes[3].Descriptor()
}

func (ImageSignatureVerificationResult_Status) Type() protoreflect.EnumType {
	return &file_storage_image_proto_enumTypes[3]
}

func (x ImageSignatureVerificationResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// This proto is deprecated and replaced by ImageV2.
// Next Tag: 19
//
// Deprecated: Marked as deprecated in storage/image.proto.
type Image struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	Id    *string                `protobuf:"bytes,4,opt,name=id" json:"id,omitempty" search:"Image Sha,store,hidden" sql:"pk"` // @gotags: search:"Image Sha,store,hidden" sql:"pk"
	Name  *ImageName             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// This should deprecate the ImageName field long-term, allowing images with the same digest to be associated with
	// different locations.
	// TODO(dhaus): For now, this message will be without search tags due to duplicated search tags otherwise.
	Names                     []*ImageName                    `protobuf:"bytes,18,rep,name=names" json:"names,omitempty" search:"-"` // @gotags: search:"-"
	Metadata                  *ImageMetadata                  `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Scan                      *ImageScan                      `protobuf:"bytes,3,opt,name=scan" json:"scan,omitempty" policy:"Image Scan"` // @gotags: policy:"Image Scan"
	SignatureVerificationData *ImageSignatureVerificationData `protobuf:"bytes,15,opt,name=signature_verification_data,json=signatureVerificationData" json:"signature_verification_data,omitempty"`
	Signature                 *ImageSignature                 `protobuf:"bytes,16,opt,name=signature" json:"signature,omitempty"`
	// Types that are valid to be assigned to SetComponents:
	//
	//	*Image_Components
	SetComponents isImage_SetComponents `protobuf_oneof:"set_components"`
	// Types that are valid to be assigned to SetCves:
	//
	//	*Image_Cves
	SetCves isImage_SetCves `protobuf_oneof:"set_cves"`
	// Types that are valid to be assigned to SetFixable:
	//
	//	*Image_FixableCves
	SetFixable     isImage_SetFixable     `protobuf_oneof:"set_fixable"`
	LastUpdated    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty" search:"Last Updated,hidden"` // @gotags: search:"Last Updated,hidden"
	NotPullable    *bool                  `protobuf:"varint,10,opt,name=not_pullable,json=notPullable" json:"not_pullable,omitempty"`
	IsClusterLocal *bool                  `protobuf:"varint,17,opt,name=is_cluster_local,json=isClusterLocal" json:"is_cluster_local,omitempty"`
	Priority       *int64                 `protobuf:"varint,11,opt,name=priority" json:"priority,omitempty" search:"Image Risk Priority,hidden"`                     // @gotags: search:"Image Risk Priority,hidden"
	RiskScore      *float32               `protobuf:"fixed32,12,opt,name=risk_score,json=riskScore" json:"risk_score,omitempty" search:"Image Risk Score,hidden"` // @gotags: search:"Image Risk Score,hidden"
	// Types that are valid to be assigned to SetTopCvss:
	//
	//	*Image_TopCvss
	SetTopCvss    isImage_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	Notes         []Image_Note       `protobuf:"varint,14,rep,packed,name=notes,enum=storage.Image_Note" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_storage_image_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Image) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Image) GetName() *ImageName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Image) GetNames() []*ImageName {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Image) GetMetadata() *ImageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Image) GetScan() *ImageScan {
	if x != nil {
		return x.Scan
	}
	return nil
}

func (x *Image) GetSignatureVerificationData() *ImageSignatureVerificationData {
	if x != nil {
		return x.SignatureVerificationData
	}
	return nil
}

func (x *Image) GetSignature() *ImageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Image) GetSetComponents() isImage_SetComponents {
	if x != nil {
		return x.SetComponents
	}
	return nil
}

func (x *Image) Get_Components() int32 {
	if x != nil {
		if x, ok := x.SetComponents.(*Image_Components); ok {
			return x.Components
		}
	}
	return 0
}

// Deprecated: Use Get_Components instead.
func (x *Image) GetComponents() int32 {
	return x.Get_Components()
}

func (x *Image) GetSetCves() isImage_SetCves {
	if x != nil {
		return x.SetCves
	}
	return nil
}

func (x *Image) Get_Cves() int32 {
	if x != nil {
		if x, ok := x.SetCves.(*Image_Cves); ok {
			return x.Cves
		}
	}
	return 0
}

// Deprecated: Use Get_Cves instead.
func (x *Image) GetCves() int32 {
	return x.Get_Cves()
}

func (x *Image) GetSetFixable() isImage_SetFixable {
	if x != nil {
		return x.SetFixable
	}
	return nil
}

func (x *Image) GetFixableCves() int32 {
	if x != nil {
		if x, ok := x.SetFixable.(*Image_FixableCves); ok {
			return x.FixableCves
		}
	}
	return 0
}

func (x *Image) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Image) GetNotPullable() bool {
	if x != nil && x.NotPullable != nil {
		return *x.NotPullable
	}
	return false
}

func (x *Image) GetIsClusterLocal() bool {
	if x != nil && x.IsClusterLocal != nil {
		return *x.IsClusterLocal
	}
	return false
}

func (x *Image) GetPriority() int64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Image) GetRiskScore() float32 {
	if x != nil && x.RiskScore != nil {
		return *x.RiskScore
	}
	return 0
}

func (x *Image) GetSetTopCvss() isImage_SetTopCvss {
	if x != nil {
		return x.SetTopCvss
	}
	return nil
}

func (x *Image) Get_TopCvss() float32 {
	if x != nil {
		if x, ok := x.SetTopCvss.(*Image_TopCvss); ok {
			return x.TopCvss
		}
	}
	return 0
}

// Deprecated: Use Get_TopCvss instead.
func (x *Image) GetTopCvss() float32 {
	return x.Get_TopCvss()
}

func (x *Image) GetNotes() []Image_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Image) SetId(v string) {
	x.Id = &v
}

func (x *Image) SetName(v *ImageName) {
	x.Name = v
}

func (x *Image) SetNames(v []*ImageName) {
	x.Names = v
}

func (x *Image) SetMetadata(v *ImageMetadata) {
	x.Metadata = v
}

func (x *Image) SetScan(v *ImageScan) {
	x.Scan = v
}

func (x *Image) SetSignatureVerificationData(v *ImageSignatureVerificationData) {
	x.SignatureVerificationData = v
}

func (x *Image) SetSignature(v *ImageSignature) {
	x.Signature = v
}

func (x *Image) Set_Components(v int32) {
	x.SetComponents = &Image_Components{v}
}

func (x *Image) Set_Cves(v int32) {
	x.SetCves = &Image_Cves{v}
}

func (x *Image) SetFixableCves(v int32) {
	x.SetFixable = &Image_FixableCves{v}
}

func (x *Image) SetLastUpdated(v *timestamppb.Timestamp) {
	x.LastUpdated = v
}

func (x *Image) SetNotPullable(v bool) {
	x.NotPullable = &v
}

func (x *Image) SetIsClusterLocal(v bool) {
	x.IsClusterLocal = &v
}

func (x *Image) SetPriority(v int64) {
	x.Priority = &v
}

func (x *Image) SetRiskScore(v float32) {
	x.RiskScore = &v
}

func (x *Image) Set_TopCvss(v float32) {
	x.SetTopCvss = &Image_TopCvss{v}
}

func (x *Image) SetNotes(v []Image_Note) {
	x.Notes = v
}

func (x *Image) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *Image) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *Image) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *Image) HasScan() bool {
	if x == nil {
		return false
	}
	return x.Scan != nil
}

func (x *Image) HasSignatureVerificationData() bool {
	if x == nil {
		return false
	}
	return x.SignatureVerificationData != nil
}

func (x *Image) HasSignature() bool {
	if x == nil {
		return false
	}
	return x.Signature != nil
}

func (x *Image) HasSetComponents() bool {
	if x == nil {
		return false
	}
	return x.SetComponents != nil
}

func (x *Image) Has_Components() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetComponents.(*Image_Components)
	return ok
}

func (x *Image) HasSetCves() bool {
	if x == nil {
		return false
	}
	return x.SetCves != nil
}

func (x *Image) Has_Cves() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetCves.(*Image_Cves)
	return ok
}

func (x *Image) HasSetFixable() bool {
	if x == nil {
		return false
	}
	return x.SetFixable != nil
}

func (x *Image) HasFixableCves() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetFixable.(*Image_FixableCves)
	return ok
}

func (x *Image) HasLastUpdated() bool {
	if x == nil {
		return false
	}
	return x.LastUpdated != nil
}

func (x *Image) HasNotPullable() bool {
	if x == nil {
		return false
	}
	return x.NotPullable != nil
}

func (x *Image) HasIsClusterLocal() bool {
	if x == nil {
		return false
	}
	return x.IsClusterLocal != nil
}

func (x *Image) HasPriority() bool {
	if x == nil {
		return false
	}
	return x.Priority != nil
}

func (x *Image) HasRiskScore() bool {
	if x == nil {
		return false
	}
	return x.RiskScore != nil
}

func (x *Image) HasSetTopCvss() bool {
	if x == nil {
		return false
	}
	return x.SetTopCvss != nil
}

func (x *Image) Has_TopCvss() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetTopCvss.(*Image_TopCvss)
	return ok
}

func (x *Image) ClearId() {
	x.Id = nil
}

func (x *Image) ClearName() {
	x.Name = nil
}

func (x *Image) ClearMetadata() {
	x.Metadata = nil
}

func (x *Image) ClearScan() {
	x.Scan = nil
}

func (x *Image) ClearSignatureVerificationData() {
	x.SignatureVerificationData = nil
}

func (x *Image) ClearSignature() {
	x.Signature = nil
}

func (x *Image) ClearSetComponents() {
	x.SetComponents = nil
}

func (x *Image) Clear_Components() {
	if _, ok := x.SetComponents.(*Image_Components); ok {
		x.SetComponents = nil
	}
}

func (x *Image) ClearSetCves() {
	x.SetCves = nil
}

func (x *Image) Clear_Cves() {
	if _, ok := x.SetCves.(*Image_Cves); ok {
		x.SetCves = nil
	}
}

func (x *Image) ClearSetFixable() {
	x.SetFixable = nil
}

func (x *Image) ClearFixableCves() {
	if _, ok := x.SetFixable.(*Image_FixableCves); ok {
		x.SetFixable = nil
	}
}

func (x *Image) ClearLastUpdated() {
	x.LastUpdated = nil
}

func (x *Image) ClearNotPullable() {
	x.NotPullable = nil
}

func (x *Image) ClearIsClusterLocal() {
	x.IsClusterLocal = nil
}

func (x *Image) ClearPriority() {
	x.Priority = nil
}

func (x *Image) ClearRiskScore() {
	x.RiskScore = nil
}

func (x *Image) ClearSetTopCvss() {
	x.SetTopCvss = nil
}

func (x *Image) Clear_TopCvss() {
	if _, ok := x.SetTopCvss.(*Image_TopCvss); ok {
		x.SetTopCvss = nil
	}
}

const Image_SetComponents_not_set_case case_Image_SetComponents = 0
const Image_Components_case case_Image_SetComponents = 7

func (x *Image) WhichSetComponents() case_Image_SetComponents {
	if x == nil {
		return Image_SetComponents_not_set_case
	}
	switch x.SetComponents.(type) {
	case *Image_Components:
		return Image_Components_case
	default:
		return Image_SetComponents_not_set_case
	}
}

const Image_SetCves_not_set_case case_Image_SetCves = 0
const Image_Cves_case case_Image_SetCves = 8

func (x *Image) WhichSetCves() case_Image_SetCves {
	if x == nil {
		return Image_SetCves_not_set_case
	}
	switch x.SetCves.(type) {
	case *Image_Cves:
		return Image_Cves_case
	default:
		return Image_SetCves_not_set_case
	}
}

const Image_SetFixable_not_set_case case_Image_SetFixable = 0
const Image_FixableCves_case case_Image_SetFixable = 9

func (x *Image) WhichSetFixable() case_Image_SetFixable {
	if x == nil {
		return Image_SetFixable_not_set_case
	}
	switch x.SetFixable.(type) {
	case *Image_FixableCves:
		return Image_FixableCves_case
	default:
		return Image_SetFixable_not_set_case
	}
}

const Image_SetTopCvss_not_set_case case_Image_SetTopCvss = 0
const Image_TopCvss_case case_Image_SetTopCvss = 13

func (x *Image) WhichSetTopCvss() case_Image_SetTopCvss {
	if x == nil {
		return Image_SetTopCvss_not_set_case
	}
	switch x.SetTopCvss.(type) {
	case *Image_TopCvss:
		return Image_TopCvss_case
	default:
		return Image_SetTopCvss_not_set_case
	}
}

// Deprecated: Marked as deprecated in storage/image.proto.
type Image_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   *string
	Name *ImageName
	// This should deprecate the ImageName field long-term, allowing images with the same digest to be associated with
	// different locations.
	// TODO(dhaus): For now, this message will be without search tags due to duplicated search tags otherwise.
	Names                     []*ImageName
	Metadata                  *ImageMetadata
	Scan                      *ImageScan
	SignatureVerificationData *ImageSignatureVerificationData
	Signature                 *ImageSignature
	// Fields of oneof SetComponents:
	Components *int32
	// -- end of SetComponents
	// Fields of oneof SetCves:
	Cves *int32
	// -- end of SetCves
	// Fields of oneof SetFixable:
	FixableCves *int32
	// -- end of SetFixable
	LastUpdated    *timestamppb.Timestamp
	NotPullable    *bool
	IsClusterLocal *bool
	Priority       *int64
	RiskScore      *float32
	// Fields of oneof SetTopCvss:
	TopCvss *float32
	// -- end of SetTopCvss
	Notes []Image_Note
}

func (b0 Image_builder) Build() *Image {
	m0 := &Image{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Names = b.Names
	x.Metadata = b.Metadata
	x.Scan = b.Scan
	x.SignatureVerificationData = b.SignatureVerificationData
	x.Signature = b.Signature
	if b.Components != nil {
		x.SetComponents = &Image_Components{*b.Components}
	}
	if b.Cves != nil {
		x.SetCves = &Image_Cves{*b.Cves}
	}
	if b.FixableCves != nil {
		x.SetFixable = &Image_FixableCves{*b.FixableCves}
	}
	x.LastUpdated = b.LastUpdated
	x.NotPullable = b.NotPullable
	x.IsClusterLocal = b.IsClusterLocal
	x.Priority = b.Priority
	x.RiskScore = b.RiskScore
	if b.TopCvss != nil {
		x.SetTopCvss = &Image_TopCvss{*b.TopCvss}
	}
	x.Notes = b.Notes
	return m0
}

type case_Image_SetComponents protoreflect.FieldNumber

func (x case_Image_SetComponents) String() string {
	md := file_storage_image_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_Image_SetCves protoreflect.FieldNumber

func (x case_Image_SetCves) String() string {
	md := file_storage_image_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_Image_SetFixable protoreflect.FieldNumber

func (x case_Image_SetFixable) String() string {
	md := file_storage_image_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_Image_SetTopCvss protoreflect.FieldNumber

func (x case_Image_SetTopCvss) String() string {
	md := file_storage_image_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isImage_SetComponents interface {
	isImage_SetComponents()
}

type Image_Components struct {
	Components int32 `protobuf:"varint,7,opt,name=components,oneof" search:"Component Count,store,hidden"` // @gotags: search:"Component Count,store,hidden"
}

func (*Image_Components) isImage_SetComponents() {}

type isImage_SetCves interface {
	isImage_SetCves()
}

type Image_Cves struct {
	Cves int32 `protobuf:"varint,8,opt,name=cves,oneof" search:"Image CVE Count,store"` // @gotags: search:"Image CVE Count,store"
}

func (*Image_Cves) isImage_SetCves() {}

type isImage_SetFixable interface {
	isImage_SetFixable()
}

type Image_FixableCves struct {
	FixableCves int32 `protobuf:"varint,9,opt,name=fixable_cves,json=fixableCves,oneof" search:"Fixable CVE Count,store,hidden"` // @gotags: search:"Fixable CVE Count,store,hidden"
}

func (*Image_FixableCves) isImage_SetFixable() {}

type isImage_SetTopCvss interface {
	isImage_SetTopCvss()
}

type Image_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,13,opt,name=top_cvss,json=topCvss,oneof" search:"Image Top CVSS,store"` // @gotags: search:"Image Top CVSS,store"
}

func (*Image_TopCvss) isImage_SetTopCvss() {}

type DataSource struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Mirror        *string                `protobuf:"bytes,3,opt,name=mirror" json:"mirror,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	mi := &file_storage_image_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataSource) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DataSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataSource) GetMirror() string {
	if x != nil && x.Mirror != nil {
		return *x.Mirror
	}
	return ""
}

func (x *DataSource) SetId(v string) {
	x.Id = &v
}

func (x *DataSource) SetName(v string) {
	x.Name = &v
}

func (x *DataSource) SetMirror(v string) {
	x.Mirror = &v
}

func (x *DataSource) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *DataSource) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *DataSource) HasMirror() bool {
	if x == nil {
		return false
	}
	return x.Mirror != nil
}

func (x *DataSource) ClearId() {
	x.Id = nil
}

func (x *DataSource) ClearName() {
	x.Name = nil
}

func (x *DataSource) ClearMirror() {
	x.Mirror = nil
}

type DataSource_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id     *string
	Name   *string
	Mirror *string
}

func (b0 DataSource_builder) Build() *DataSource {
	m0 := &DataSource{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Mirror = b.Mirror
	return m0
}

// Next tag: 8
type ImageScan struct {
	state           protoimpl.MessageState        `protogen:"hybrid.v1"`
	ScannerVersion  *string                       `protobuf:"bytes,6,opt,name=scanner_version,json=scannerVersion" json:"scanner_version,omitempty"`
	ScanTime        *timestamppb.Timestamp        `protobuf:"bytes,1,opt,name=scan_time,json=scanTime" json:"scan_time,omitempty" search:"Image Scan Time,store"`                      // @gotags: search:"Image Scan Time,store"
	Components      []*EmbeddedImageScanComponent `protobuf:"bytes,2,rep,name=components" json:"components,omitempty" sql:"-"`                                  // @gotags: sql:"-"
	OperatingSystem *string                       `protobuf:"bytes,4,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty" search:"Image OS,store"` // @gotags: search:"Image OS,store"
	// DataSource contains information about which integration was used to scan the image
	DataSource *DataSource      `protobuf:"bytes,3,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
	Notes      []ImageScan_Note `protobuf:"varint,5,rep,packed,name=notes,enum=storage.ImageScan_Note" json:"notes,omitempty"`
	// Types that are valid to be assigned to Hashoneof:
	//
	//	*ImageScan_Hash
	Hashoneof     isImageScan_Hashoneof `protobuf_oneof:"hashoneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageScan) Reset() {
	*x = ImageScan{}
	mi := &file_storage_image_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageScan) ProtoMessage() {}

func (x *ImageScan) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageScan) GetScannerVersion() string {
	if x != nil && x.ScannerVersion != nil {
		return *x.ScannerVersion
	}
	return ""
}

func (x *ImageScan) GetScanTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTime
	}
	return nil
}

func (x *ImageScan) GetComponents() []*EmbeddedImageScanComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ImageScan) GetOperatingSystem() string {
	if x != nil && x.OperatingSystem != nil {
		return *x.OperatingSystem
	}
	return ""
}

func (x *ImageScan) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *ImageScan) GetNotes() []ImageScan_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ImageScan) GetHashoneof() isImageScan_Hashoneof {
	if x != nil {
		return x.Hashoneof
	}
	return nil
}

func (x *ImageScan) GetHash() uint64 {
	if x != nil {
		if x, ok := x.Hashoneof.(*ImageScan_Hash); ok {
			return x.Hash
		}
	}
	return 0
}

func (x *ImageScan) SetScannerVersion(v string) {
	x.ScannerVersion = &v
}

func (x *ImageScan) SetScanTime(v *timestamppb.Timestamp) {
	x.ScanTime = v
}

func (x *ImageScan) SetComponents(v []*EmbeddedImageScanComponent) {
	x.Components = v
}

func (x *ImageScan) SetOperatingSystem(v string) {
	x.OperatingSystem = &v
}

func (x *ImageScan) SetDataSource(v *DataSource) {
	x.DataSource = v
}

func (x *ImageScan) SetNotes(v []ImageScan_Note) {
	x.Notes = v
}

func (x *ImageScan) SetHash(v uint64) {
	x.Hashoneof = &ImageScan_Hash{v}
}

func (x *ImageScan) HasScannerVersion() bool {
	if x == nil {
		return false
	}
	return x.ScannerVersion != nil
}

func (x *ImageScan) HasScanTime() bool {
	if x == nil {
		return false
	}
	return x.ScanTime != nil
}

func (x *ImageScan) HasOperatingSystem() bool {
	if x == nil {
		return false
	}
	return x.OperatingSystem != nil
}

func (x *ImageScan) HasDataSource() bool {
	if x == nil {
		return false
	}
	return x.DataSource != nil
}

func (x *ImageScan) HasHashoneof() bool {
	if x == nil {
		return false
	}
	return x.Hashoneof != nil
}

func (x *ImageScan) HasHash() bool {
	if x == nil {
		return false
	}
	_, ok := x.Hashoneof.(*ImageScan_Hash)
	return ok
}

func (x *ImageScan) ClearScannerVersion() {
	x.ScannerVersion = nil
}

func (x *ImageScan) ClearScanTime() {
	x.ScanTime = nil
}

func (x *ImageScan) ClearOperatingSystem() {
	x.OperatingSystem = nil
}

func (x *ImageScan) ClearDataSource() {
	x.DataSource = nil
}

func (x *ImageScan) ClearHashoneof() {
	x.Hashoneof = nil
}

func (x *ImageScan) ClearHash() {
	if _, ok := x.Hashoneof.(*ImageScan_Hash); ok {
		x.Hashoneof = nil
	}
}

const ImageScan_Hashoneof_not_set_case case_ImageScan_Hashoneof = 0
const ImageScan_Hash_case case_ImageScan_Hashoneof = 7

func (x *ImageScan) WhichHashoneof() case_ImageScan_Hashoneof {
	if x == nil {
		return ImageScan_Hashoneof_not_set_case
	}
	switch x.Hashoneof.(type) {
	case *ImageScan_Hash:
		return ImageScan_Hash_case
	default:
		return ImageScan_Hashoneof_not_set_case
	}
}

type ImageScan_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ScannerVersion  *string
	ScanTime        *timestamppb.Timestamp
	Components      []*EmbeddedImageScanComponent
	OperatingSystem *string
	// DataSource contains information about which integration was used to scan the image
	DataSource *DataSource
	Notes      []ImageScan_Note
	// Fields of oneof Hashoneof:
	Hash *uint64
	// -- end of Hashoneof
}

func (b0 ImageScan_builder) Build() *ImageScan {
	m0 := &ImageScan{}
	b, x := &b0, m0
	_, _ = b, x
	x.ScannerVersion = b.ScannerVersion
	x.ScanTime = b.ScanTime
	x.Components = b.Components
	x.OperatingSystem = b.OperatingSystem
	x.DataSource = b.DataSource
	x.Notes = b.Notes
	if b.Hash != nil {
		x.Hashoneof = &ImageScan_Hash{*b.Hash}
	}
	return m0
}

type case_ImageScan_Hashoneof protoreflect.FieldNumber

func (x case_ImageScan_Hashoneof) String() string {
	md := file_storage_image_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isImageScan_Hashoneof interface {
	isImageScan_Hashoneof()
}

type ImageScan_Hash struct {
	Hash uint64 `protobuf:"varint,7,opt,name=hash,oneof"`
}

func (*ImageScan_Hash) isImageScan_Hashoneof() {}

type ImageSignatureVerificationData struct {
	state         protoimpl.MessageState              `protogen:"hybrid.v1"`
	Results       []*ImageSignatureVerificationResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageSignatureVerificationData) Reset() {
	*x = ImageSignatureVerificationData{}
	mi := &file_storage_image_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageSignatureVerificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignatureVerificationData) ProtoMessage() {}

func (x *ImageSignatureVerificationData) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageSignatureVerificationData) GetResults() []*ImageSignatureVerificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ImageSignatureVerificationData) SetResults(v []*ImageSignatureVerificationResult) {
	x.Results = v
}

type ImageSignatureVerificationData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Results []*ImageSignatureVerificationResult
}

func (b0 ImageSignatureVerificationData_builder) Build() *ImageSignatureVerificationData {
	m0 := &ImageSignatureVerificationData{}
	b, x := &b0, m0
	_, _ = b, x
	x.Results = b.Results
	return m0
}

// Next Tag: 6
type ImageSignatureVerificationResult struct {
	state            protoimpl.MessageState `protogen:"hybrid.v1"`
	VerificationTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verification_time,json=verificationTime" json:"verification_time,omitempty"`
	// verifier_id correlates to the ID of the signature integration used to verify the signature.
	VerifierId *string                                  `protobuf:"bytes,2,opt,name=verifier_id,json=verifierId" json:"verifier_id,omitempty"`
	Status     *ImageSignatureVerificationResult_Status `protobuf:"varint,3,opt,name=status,enum=storage.ImageSignatureVerificationResult_Status" json:"status,omitempty"`
	// description is set in the case of an error with the specific error's message. Otherwise, this will not be set.
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The full image names that are verified by this specific signature integration ID.
	VerifiedImageReferences []string `protobuf:"bytes,5,rep,name=verified_image_references,json=verifiedImageReferences" json:"verified_image_references,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ImageSignatureVerificationResult) Reset() {
	*x = ImageSignatureVerificationResult{}
	mi := &file_storage_image_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageSignatureVerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignatureVerificationResult) ProtoMessage() {}

func (x *ImageSignatureVerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageSignatureVerificationResult) GetVerificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationTime
	}
	return nil
}

func (x *ImageSignatureVerificationResult) GetVerifierId() string {
	if x != nil && x.VerifierId != nil {
		return *x.VerifierId
	}
	return ""
}

func (x *ImageSignatureVerificationResult) GetStatus() ImageSignatureVerificationResult_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ImageSignatureVerificationResult_UNSET
}

func (x *ImageSignatureVerificationResult) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ImageSignatureVerificationResult) GetVerifiedImageReferences() []string {
	if x != nil {
		return x.VerifiedImageReferences
	}
	return nil
}

func (x *ImageSignatureVerificationResult) SetVerificationTime(v *timestamppb.Timestamp) {
	x.VerificationTime = v
}

func (x *ImageSignatureVerificationResult) SetVerifierId(v string) {
	x.VerifierId = &v
}

func (x *ImageSignatureVerificationResult) SetStatus(v ImageSignatureVerificationResult_Status) {
	x.Status = &v
}

func (x *ImageSignatureVerificationResult) SetDescription(v string) {
	x.Description = &v
}

func (x *ImageSignatureVerificationResult) SetVerifiedImageReferences(v []string) {
	x.VerifiedImageReferences = v
}

func (x *ImageSignatureVerificationResult) HasVerificationTime() bool {
	if x == nil {
		return false
	}
	return x.VerificationTime != nil
}

func (x *ImageSignatureVerificationResult) HasVerifierId() bool {
	if x == nil {
		return false
	}
	return x.VerifierId != nil
}

func (x *ImageSignatureVerificationResult) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *ImageSignatureVerificationResult) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *ImageSignatureVerificationResult) ClearVerificationTime() {
	x.VerificationTime = nil
}

func (x *ImageSignatureVerificationResult) ClearVerifierId() {
	x.VerifierId = nil
}

func (x *ImageSignatureVerificationResult) ClearStatus() {
	x.Status = nil
}

func (x *ImageSignatureVerificationResult) ClearDescription() {
	x.Description = nil
}

type ImageSignatureVerificationResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	VerificationTime *timestamppb.Timestamp
	// verifier_id correlates to the ID of the signature integration used to verify the signature.
	VerifierId *string
	Status     *ImageSignatureVerificationResult_Status
	// description is set in the case of an error with the specific error's message. Otherwise, this will not be set.
	Description *string
	// The full image names that are verified by this specific signature integration ID.
	VerifiedImageReferences []string
}

func (b0 ImageSignatureVerificationResult_builder) Build() *ImageSignatureVerificationResult {
	m0 := &ImageSignatureVerificationResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.VerificationTime = b.VerificationTime
	x.VerifierId = b.VerifierId
	x.Status = b.Status
	x.Description = b.Description
	x.VerifiedImageReferences = b.VerifiedImageReferences
	return m0
}

// Next Tag: 14
type EmbeddedImageScanComponent struct {
	state   protoimpl.MessageState   `protogen:"hybrid.v1"`
	Name    *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" search:"Component,store"`       // @gotags: search:"Component,store"
	Version *string                  `protobuf:"bytes,2,opt,name=version" json:"version,omitempty" search:"Component Version,store"` // @gotags: search:"Component Version,store"
	License *License                 `protobuf:"bytes,3,opt,name=license" json:"license,omitempty"`
	Vulns   []*EmbeddedVulnerability `protobuf:"bytes,4,rep,name=vulns" json:"vulns,omitempty" hash:"set"` // @gotags: hash:"set"
	// Types that are valid to be assigned to HasLayerIndex:
	//
	//	*EmbeddedImageScanComponent_LayerIndex
	HasLayerIndex isEmbeddedImageScanComponent_HasLayerIndex `protobuf_oneof:"has_layer_index"`
	Priority      *int64                                     `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty" hash:"ignore"` // @gotags: hash:"ignore"
	Source        *SourceType                                `protobuf:"varint,7,opt,name=source,enum=storage.SourceType" json:"source,omitempty"`
	Location      *string                                    `protobuf:"bytes,8,opt,name=location" json:"location,omitempty"`
	// Types that are valid to be assigned to SetTopCvss:
	//
	//	*EmbeddedImageScanComponent_TopCvss
	SetTopCvss isEmbeddedImageScanComponent_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	RiskScore  *float32                                `protobuf:"fixed32,10,opt,name=risk_score,json=riskScore" json:"risk_score,omitempty" search:"Component Risk Score,hidden" hash:"ignore"` // @gotags: search:"Component Risk Score,hidden" hash:"ignore"
	// Component version that fixes all the fixable vulnerabilities in this component.
	FixedBy *string `protobuf:"bytes,11,opt,name=fixed_by,json=fixedBy" json:"fixed_by,omitempty"`
	// Values are cleared after moving to cache, remove them from the grpc return as well
	Executables   []*EmbeddedImageScanComponent_Executable `protobuf:"bytes,12,rep,name=executables" json:"-"` // @gotags: json:"-"
	Architecture  *string                                  `protobuf:"bytes,13,opt,name=architecture" json:"architecture,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddedImageScanComponent) Reset() {
	*x = EmbeddedImageScanComponent{}
	mi := &file_storage_image_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedImageScanComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedImageScanComponent) ProtoMessage() {}

func (x *EmbeddedImageScanComponent) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EmbeddedImageScanComponent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetVulns() []*EmbeddedVulnerability {
	if x != nil {
		return x.Vulns
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetHasLayerIndex() isEmbeddedImageScanComponent_HasLayerIndex {
	if x != nil {
		return x.HasLayerIndex
	}
	return nil
}

func (x *EmbeddedImageScanComponent) Get_LayerIndex() int32 {
	if x != nil {
		if x, ok := x.HasLayerIndex.(*EmbeddedImageScanComponent_LayerIndex); ok {
			return x.LayerIndex
		}
	}
	return 0
}

// Deprecated: Use Get_LayerIndex instead.
func (x *EmbeddedImageScanComponent) GetLayerIndex() int32 {
	return x.Get_LayerIndex()
}

func (x *EmbeddedImageScanComponent) GetPriority() int64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetSource() SourceType {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return SourceType_OS
}

func (x *EmbeddedImageScanComponent) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetSetTopCvss() isEmbeddedImageScanComponent_SetTopCvss {
	if x != nil {
		return x.SetTopCvss
	}
	return nil
}

func (x *EmbeddedImageScanComponent) Get_TopCvss() float32 {
	if x != nil {
		if x, ok := x.SetTopCvss.(*EmbeddedImageScanComponent_TopCvss); ok {
			return x.TopCvss
		}
	}
	return 0
}

// Deprecated: Use Get_TopCvss instead.
func (x *EmbeddedImageScanComponent) GetTopCvss() float32 {
	return x.Get_TopCvss()
}

func (x *EmbeddedImageScanComponent) GetRiskScore() float32 {
	if x != nil && x.RiskScore != nil {
		return *x.RiskScore
	}
	return 0
}

func (x *EmbeddedImageScanComponent) GetFixedBy() string {
	if x != nil && x.FixedBy != nil {
		return *x.FixedBy
	}
	return ""
}

func (x *EmbeddedImageScanComponent) GetExecutables() []*EmbeddedImageScanComponent_Executable {
	if x != nil {
		return x.Executables
	}
	return nil
}

func (x *EmbeddedImageScanComponent) GetArchitecture() string {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return ""
}

func (x *EmbeddedImageScanComponent) SetName(v string) {
	x.Name = &v
}

func (x *EmbeddedImageScanComponent) SetVersion(v string) {
	x.Version = &v
}

func (x *EmbeddedImageScanComponent) SetLicense(v *License) {
	x.License = v
}

func (x *EmbeddedImageScanComponent) SetVulns(v []*EmbeddedVulnerability) {
	x.Vulns = v
}

func (x *EmbeddedImageScanComponent) Set_LayerIndex(v int32) {
	x.HasLayerIndex = &EmbeddedImageScanComponent_LayerIndex{v}
}

func (x *EmbeddedImageScanComponent) SetPriority(v int64) {
	x.Priority = &v
}

func (x *EmbeddedImageScanComponent) SetSource(v SourceType) {
	x.Source = &v
}

func (x *EmbeddedImageScanComponent) SetLocation(v string) {
	x.Location = &v
}

func (x *EmbeddedImageScanComponent) Set_TopCvss(v float32) {
	x.SetTopCvss = &EmbeddedImageScanComponent_TopCvss{v}
}

func (x *EmbeddedImageScanComponent) SetRiskScore(v float32) {
	x.RiskScore = &v
}

func (x *EmbeddedImageScanComponent) SetFixedBy(v string) {
	x.FixedBy = &v
}

func (x *EmbeddedImageScanComponent) SetExecutables(v []*EmbeddedImageScanComponent_Executable) {
	x.Executables = v
}

func (x *EmbeddedImageScanComponent) SetArchitecture(v string) {
	x.Architecture = &v
}

func (x *EmbeddedImageScanComponent) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *EmbeddedImageScanComponent) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *EmbeddedImageScanComponent) HasLicense() bool {
	if x == nil {
		return false
	}
	return x.License != nil
}

func (x *EmbeddedImageScanComponent) HasHasLayerIndex() bool {
	if x == nil {
		return false
	}
	return x.HasLayerIndex != nil
}

func (x *EmbeddedImageScanComponent) Has_LayerIndex() bool {
	if x == nil {
		return false
	}
	_, ok := x.HasLayerIndex.(*EmbeddedImageScanComponent_LayerIndex)
	return ok
}

func (x *EmbeddedImageScanComponent) HasPriority() bool {
	if x == nil {
		return false
	}
	return x.Priority != nil
}

func (x *EmbeddedImageScanComponent) HasSource() bool {
	if x == nil {
		return false
	}
	return x.Source != nil
}

func (x *EmbeddedImageScanComponent) HasLocation() bool {
	if x == nil {
		return false
	}
	return x.Location != nil
}

func (x *EmbeddedImageScanComponent) HasSetTopCvss() bool {
	if x == nil {
		return false
	}
	return x.SetTopCvss != nil
}

func (x *EmbeddedImageScanComponent) Has_TopCvss() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetTopCvss.(*EmbeddedImageScanComponent_TopCvss)
	return ok
}

func (x *EmbeddedImageScanComponent) HasRiskScore() bool {
	if x == nil {
		return false
	}
	return x.RiskScore != nil
}

func (x *EmbeddedImageScanComponent) HasFixedBy() bool {
	if x == nil {
		return false
	}
	return x.FixedBy != nil
}

func (x *EmbeddedImageScanComponent) HasArchitecture() bool {
	if x == nil {
		return false
	}
	return x.Architecture != nil
}

func (x *EmbeddedImageScanComponent) ClearName() {
	x.Name = nil
}

func (x *EmbeddedImageScanComponent) ClearVersion() {
	x.Version = nil
}

func (x *EmbeddedImageScanComponent) ClearLicense() {
	x.License = nil
}

func (x *EmbeddedImageScanComponent) ClearHasLayerIndex() {
	x.HasLayerIndex = nil
}

func (x *EmbeddedImageScanComponent) Clear_LayerIndex() {
	if _, ok := x.HasLayerIndex.(*EmbeddedImageScanComponent_LayerIndex); ok {
		x.HasLayerIndex = nil
	}
}

func (x *EmbeddedImageScanComponent) ClearPriority() {
	x.Priority = nil
}

func (x *EmbeddedImageScanComponent) ClearSource() {
	x.Source = nil
}

func (x *EmbeddedImageScanComponent) ClearLocation() {
	x.Location = nil
}

func (x *EmbeddedImageScanComponent) ClearSetTopCvss() {
	x.SetTopCvss = nil
}

func (x *EmbeddedImageScanComponent) Clear_TopCvss() {
	if _, ok := x.SetTopCvss.(*EmbeddedImageScanComponent_TopCvss); ok {
		x.SetTopCvss = nil
	}
}

func (x *EmbeddedImageScanComponent) ClearRiskScore() {
	x.RiskScore = nil
}

func (x *EmbeddedImageScanComponent) ClearFixedBy() {
	x.FixedBy = nil
}

func (x *EmbeddedImageScanComponent) ClearArchitecture() {
	x.Architecture = nil
}

const EmbeddedImageScanComponent_HasLayerIndex_not_set_case case_EmbeddedImageScanComponent_HasLayerIndex = 0
const EmbeddedImageScanComponent_LayerIndex_case case_EmbeddedImageScanComponent_HasLayerIndex = 5

func (x *EmbeddedImageScanComponent) WhichHasLayerIndex() case_EmbeddedImageScanComponent_HasLayerIndex {
	if x == nil {
		return EmbeddedImageScanComponent_HasLayerIndex_not_set_case
	}
	switch x.HasLayerIndex.(type) {
	case *EmbeddedImageScanComponent_LayerIndex:
		return EmbeddedImageScanComponent_LayerIndex_case
	default:
		return EmbeddedImageScanComponent_HasLayerIndex_not_set_case
	}
}

const EmbeddedImageScanComponent_SetTopCvss_not_set_case case_EmbeddedImageScanComponent_SetTopCvss = 0
const EmbeddedImageScanComponent_TopCvss_case case_EmbeddedImageScanComponent_SetTopCvss = 9

func (x *EmbeddedImageScanComponent) WhichSetTopCvss() case_EmbeddedImageScanComponent_SetTopCvss {
	if x == nil {
		return EmbeddedImageScanComponent_SetTopCvss_not_set_case
	}
	switch x.SetTopCvss.(type) {
	case *EmbeddedImageScanComponent_TopCvss:
		return EmbeddedImageScanComponent_TopCvss_case
	default:
		return EmbeddedImageScanComponent_SetTopCvss_not_set_case
	}
}

type EmbeddedImageScanComponent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name    *string
	Version *string
	License *License
	Vulns   []*EmbeddedVulnerability
	// Fields of oneof HasLayerIndex:
	LayerIndex *int32
	// -- end of HasLayerIndex
	Priority *int64
	Source   *SourceType
	Location *string
	// Fields of oneof SetTopCvss:
	TopCvss *float32
	// -- end of SetTopCvss
	RiskScore *float32
	// Component version that fixes all the fixable vulnerabilities in this component.
	FixedBy *string
	// Values are cleared after moving to cache, remove them from the grpc return as well
	Executables  []*EmbeddedImageScanComponent_Executable
	Architecture *string
}

func (b0 EmbeddedImageScanComponent_builder) Build() *EmbeddedImageScanComponent {
	m0 := &EmbeddedImageScanComponent{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Version = b.Version
	x.License = b.License
	x.Vulns = b.Vulns
	if b.LayerIndex != nil {
		x.HasLayerIndex = &EmbeddedImageScanComponent_LayerIndex{*b.LayerIndex}
	}
	x.Priority = b.Priority
	x.Source = b.Source
	x.Location = b.Location
	if b.TopCvss != nil {
		x.SetTopCvss = &EmbeddedImageScanComponent_TopCvss{*b.TopCvss}
	}
	x.RiskScore = b.RiskScore
	x.FixedBy = b.FixedBy
	x.Executables = b.Executables
	x.Architecture = b.Architecture
	return m0
}

type case_EmbeddedImageScanComponent_HasLayerIndex protoreflect.FieldNumber

func (x case_EmbeddedImageScanComponent_HasLayerIndex) String() string {
	md := file_storage_image_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_EmbeddedImageScanComponent_SetTopCvss protoreflect.FieldNumber

func (x case_EmbeddedImageScanComponent_SetTopCvss) String() string {
	md := file_storage_image_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isEmbeddedImageScanComponent_HasLayerIndex interface {
	isEmbeddedImageScanComponent_HasLayerIndex()
}

type EmbeddedImageScanComponent_LayerIndex struct {
	LayerIndex int32 `protobuf:"varint,5,opt,name=layer_index,json=layerIndex,oneof"`
}

func (*EmbeddedImageScanComponent_LayerIndex) isEmbeddedImageScanComponent_HasLayerIndex() {}

type isEmbeddedImageScanComponent_SetTopCvss interface {
	isEmbeddedImageScanComponent_SetTopCvss()
}

type EmbeddedImageScanComponent_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,9,opt,name=top_cvss,json=topCvss,oneof"`
}

func (*EmbeddedImageScanComponent_TopCvss) isEmbeddedImageScanComponent_SetTopCvss() {}

type License struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          *string                `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Url           *string                `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *License) Reset() {
	*x = License{}
	mi := &file_storage_image_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *License) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *License) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *License) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *License) SetName(v string) {
	x.Name = &v
}

func (x *License) SetType(v string) {
	x.Type = &v
}

func (x *License) SetUrl(v string) {
	x.Url = &v
}

func (x *License) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *License) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *License) HasUrl() bool {
	if x == nil {
		return false
	}
	return x.Url != nil
}

func (x *License) ClearName() {
	x.Name = nil
}

func (x *License) ClearType() {
	x.Type = nil
}

func (x *License) ClearUrl() {
	x.Url = nil
}

type License_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
	Type *string
	Url  *string
}

func (b0 License_builder) Build() *License {
	m0 := &License{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Type = b.Type
	x.Url = b.Url
	return m0
}

// If any fields of ImageMetadata are modified including subfields, please check pkg/images/enricher/metadata.go
// to ensure that those changes will be automatically picked up
// Next Tag: 6
type ImageMetadata struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// V1Metadata contains all of the V1 docker data. In the normal case we will get this because the image is a
	// V1 image OR because the v2 manifest has a link to it in it's config.
	// See https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	// The only time we will not get it is in the rare caseof a strictly V2 image schema
	V1 *V1Metadata `protobuf:"bytes,1,opt,name=v1" json:"v1,omitempty"`
	// We should always get V2 metadata unless the registry is old or the image is strictly V1
	V2 *V2Metadata `protobuf:"bytes,2,opt,name=v2" json:"v2,omitempty"`
	// We never need both sets of layers so consolidate them. They will be ordered by oldest->newest
	LayerShas []string `protobuf:"bytes,3,rep,name=layer_shas,json=layerShas" json:"layer_shas,omitempty"`
	// DataSource contains information about which integration was used to pull the metadata
	DataSource *DataSource `protobuf:"bytes,4,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
	// Version is used to determine if the metadata needs to be re-pulled
	Version       *uint64 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	mi := &file_storage_image_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageMetadata) GetV1() *V1Metadata {
	if x != nil {
		return x.V1
	}
	return nil
}

func (x *ImageMetadata) GetV2() *V2Metadata {
	if x != nil {
		return x.V2
	}
	return nil
}

func (x *ImageMetadata) GetLayerShas() []string {
	if x != nil {
		return x.LayerShas
	}
	return nil
}

func (x *ImageMetadata) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *ImageMetadata) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ImageMetadata) SetV1(v *V1Metadata) {
	x.V1 = v
}

func (x *ImageMetadata) SetV2(v *V2Metadata) {
	x.V2 = v
}

func (x *ImageMetadata) SetLayerShas(v []string) {
	x.LayerShas = v
}

func (x *ImageMetadata) SetDataSource(v *DataSource) {
	x.DataSource = v
}

func (x *ImageMetadata) SetVersion(v uint64) {
	x.Version = &v
}

func (x *ImageMetadata) HasV1() bool {
	if x == nil {
		return false
	}
	return x.V1 != nil
}

func (x *ImageMetadata) HasV2() bool {
	if x == nil {
		return false
	}
	return x.V2 != nil
}

func (x *ImageMetadata) HasDataSource() bool {
	if x == nil {
		return false
	}
	return x.DataSource != nil
}

func (x *ImageMetadata) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *ImageMetadata) ClearV1() {
	x.V1 = nil
}

func (x *ImageMetadata) ClearV2() {
	x.V2 = nil
}

func (x *ImageMetadata) ClearDataSource() {
	x.DataSource = nil
}

func (x *ImageMetadata) ClearVersion() {
	x.Version = nil
}

type ImageMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// V1Metadata contains all of the V1 docker data. In the normal case we will get this because the image is a
	// V1 image OR because the v2 manifest has a link to it in it's config.
	// See https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	// The only time we will not get it is in the rare caseof a strictly V2 image schema
	V1 *V1Metadata
	// We should always get V2 metadata unless the registry is old or the image is strictly V1
	V2 *V2Metadata
	// We never need both sets of layers so consolidate them. They will be ordered by oldest->newest
	LayerShas []string
	// DataSource contains information about which integration was used to pull the metadata
	DataSource *DataSource
	// Version is used to determine if the metadata needs to be re-pulled
	Version *uint64
}

func (b0 ImageMetadata_builder) Build() *ImageMetadata {
	m0 := &ImageMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.V1 = b.V1
	x.V2 = b.V2
	x.LayerShas = b.LayerShas
	x.DataSource = b.DataSource
	x.Version = b.Version
	return m0
}

type ImageSignature struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Signatures    []*Signature           `protobuf:"bytes,1,rep,name=signatures" json:"signatures,omitempty"`
	Fetched       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=fetched" json:"fetched,omitempty" search:"Image Signature Fetched Time,hidden"` // @gotags: search:"Image Signature Fetched Time,hidden"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageSignature) Reset() {
	*x = ImageSignature{}
	mi := &file_storage_image_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSignature) ProtoMessage() {}

func (x *ImageSignature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageSignature) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *ImageSignature) GetFetched() *timestamppb.Timestamp {
	if x != nil {
		return x.Fetched
	}
	return nil
}

func (x *ImageSignature) SetSignatures(v []*Signature) {
	x.Signatures = v
}

func (x *ImageSignature) SetFetched(v *timestamppb.Timestamp) {
	x.Fetched = v
}

func (x *ImageSignature) HasFetched() bool {
	if x == nil {
		return false
	}
	return x.Fetched != nil
}

func (x *ImageSignature) ClearFetched() {
	x.Fetched = nil
}

type ImageSignature_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Signatures []*Signature
	Fetched    *timestamppb.Timestamp
}

func (b0 ImageSignature_builder) Build() *ImageSignature {
	m0 := &ImageSignature{}
	b, x := &b0, m0
	_, _ = b, x
	x.Signatures = b.Signatures
	x.Fetched = b.Fetched
	return m0
}

type Signature struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Signature:
	//
	//	*Signature_Cosign
	Signature     isSignature_Signature `protobuf_oneof:"Signature"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_storage_image_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Signature) GetSignature() isSignature_Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetCosign() *CosignSignature {
	if x != nil {
		if x, ok := x.Signature.(*Signature_Cosign); ok {
			return x.Cosign
		}
	}
	return nil
}

func (x *Signature) SetCosign(v *CosignSignature) {
	if v == nil {
		x.Signature = nil
		return
	}
	x.Signature = &Signature_Cosign{v}
}

func (x *Signature) HasSignature() bool {
	if x == nil {
		return false
	}
	return x.Signature != nil
}

func (x *Signature) HasCosign() bool {
	if x == nil {
		return false
	}
	_, ok := x.Signature.(*Signature_Cosign)
	return ok
}

func (x *Signature) ClearSignature() {
	x.Signature = nil
}

func (x *Signature) ClearCosign() {
	if _, ok := x.Signature.(*Signature_Cosign); ok {
		x.Signature = nil
	}
}

const Signature_Signature_not_set_case case_Signature_Signature = 0
const Signature_Cosign_case case_Signature_Signature = 1

func (x *Signature) WhichSignature() case_Signature_Signature {
	if x == nil {
		return Signature_Signature_not_set_case
	}
	switch x.Signature.(type) {
	case *Signature_Cosign:
		return Signature_Cosign_case
	default:
		return Signature_Signature_not_set_case
	}
}

type Signature_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Signature:
	Cosign *CosignSignature
	// -- end of Signature
}

func (b0 Signature_builder) Build() *Signature {
	m0 := &Signature{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Cosign != nil {
		x.Signature = &Signature_Cosign{b.Cosign}
	}
	return m0
}

type case_Signature_Signature protoreflect.FieldNumber

func (x case_Signature_Signature) String() string {
	md := file_storage_image_proto_msgTypes[9].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSignature_Signature interface {
	isSignature_Signature()
}

type Signature_Cosign struct {
	Cosign *CosignSignature `protobuf:"bytes,1,opt,name=cosign,oneof"`
}

func (*Signature_Cosign) isSignature_Signature() {}

type CosignSignature struct {
	state            protoimpl.MessageState `protogen:"hybrid.v1"`
	RawSignature     []byte                 `protobuf:"bytes,1,opt,name=raw_signature,json=rawSignature" json:"raw_signature,omitempty"`
	SignaturePayload []byte                 `protobuf:"bytes,2,opt,name=signature_payload,json=signaturePayload" json:"signature_payload,omitempty"`
	CertPem          []byte                 `protobuf:"bytes,3,opt,name=cert_pem,json=certPem" json:"cert_pem,omitempty"`
	CertChainPem     []byte                 `protobuf:"bytes,4,opt,name=cert_chain_pem,json=certChainPem" json:"cert_chain_pem,omitempty"`
	RekorBundle      []byte                 `protobuf:"bytes,5,opt,name=rekor_bundle,json=rekorBundle" json:"rekor_bundle,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CosignSignature) Reset() {
	*x = CosignSignature{}
	mi := &file_storage_image_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CosignSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosignSignature) ProtoMessage() {}

func (x *CosignSignature) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CosignSignature) GetRawSignature() []byte {
	if x != nil {
		return x.RawSignature
	}
	return nil
}

func (x *CosignSignature) GetSignaturePayload() []byte {
	if x != nil {
		return x.SignaturePayload
	}
	return nil
}

func (x *CosignSignature) GetCertPem() []byte {
	if x != nil {
		return x.CertPem
	}
	return nil
}

func (x *CosignSignature) GetCertChainPem() []byte {
	if x != nil {
		return x.CertChainPem
	}
	return nil
}

func (x *CosignSignature) GetRekorBundle() []byte {
	if x != nil {
		return x.RekorBundle
	}
	return nil
}

func (x *CosignSignature) SetRawSignature(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.RawSignature = v
}

func (x *CosignSignature) SetSignaturePayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.SignaturePayload = v
}

func (x *CosignSignature) SetCertPem(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.CertPem = v
}

func (x *CosignSignature) SetCertChainPem(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.CertChainPem = v
}

func (x *CosignSignature) SetRekorBundle(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.RekorBundle = v
}

func (x *CosignSignature) HasRawSignature() bool {
	if x == nil {
		return false
	}
	return x.RawSignature != nil
}

func (x *CosignSignature) HasSignaturePayload() bool {
	if x == nil {
		return false
	}
	return x.SignaturePayload != nil
}

func (x *CosignSignature) HasCertPem() bool {
	if x == nil {
		return false
	}
	return x.CertPem != nil
}

func (x *CosignSignature) HasCertChainPem() bool {
	if x == nil {
		return false
	}
	return x.CertChainPem != nil
}

func (x *CosignSignature) HasRekorBundle() bool {
	if x == nil {
		return false
	}
	return x.RekorBundle != nil
}

func (x *CosignSignature) ClearRawSignature() {
	x.RawSignature = nil
}

func (x *CosignSignature) ClearSignaturePayload() {
	x.SignaturePayload = nil
}

func (x *CosignSignature) ClearCertPem() {
	x.CertPem = nil
}

func (x *CosignSignature) ClearCertChainPem() {
	x.CertChainPem = nil
}

func (x *CosignSignature) ClearRekorBundle() {
	x.RekorBundle = nil
}

type CosignSignature_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	RawSignature     []byte
	SignaturePayload []byte
	CertPem          []byte
	CertChainPem     []byte
	RekorBundle      []byte
}

func (b0 CosignSignature_builder) Build() *CosignSignature {
	m0 := &CosignSignature{}
	b, x := &b0, m0
	_, _ = b, x
	x.RawSignature = b.RawSignature
	x.SignaturePayload = b.SignaturePayload
	x.CertPem = b.CertPem
	x.CertChainPem = b.CertChainPem
	x.RekorBundle = b.RekorBundle
	return m0
}

type V2Metadata struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Digest        *string                `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *V2Metadata) Reset() {
	*x = V2Metadata{}
	mi := &file_storage_image_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *V2Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2Metadata) ProtoMessage() {}

func (x *V2Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *V2Metadata) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *V2Metadata) SetDigest(v string) {
	x.Digest = &v
}

func (x *V2Metadata) HasDigest() bool {
	if x == nil {
		return false
	}
	return x.Digest != nil
}

func (x *V2Metadata) ClearDigest() {
	x.Digest = nil
}

type V2Metadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Digest *string
}

func (b0 V2Metadata_builder) Build() *V2Metadata {
	m0 := &V2Metadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Digest = b.Digest
	return m0
}

type V1Metadata struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Digest        *string                `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty" search:"Image Created Time,store"` // @gotags: search:"Image Created Time,store"
	Author        *string                `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Layers        []*ImageLayer          `protobuf:"bytes,4,rep,name=layers" json:"layers,omitempty"`
	User          *string                `protobuf:"bytes,5,opt,name=user" json:"user,omitempty" search:"Image User"`                                                                               // @gotags: search:"Image User"
	Command       []string               `protobuf:"bytes,6,rep,name=command" json:"command,omitempty" search:"Image Command"`                                                                         // @gotags: search:"Image Command"
	Entrypoint    []string               `protobuf:"bytes,7,rep,name=entrypoint" json:"entrypoint,omitempty" search:"Image Entrypoint"`                                                                   // @gotags: search:"Image Entrypoint"
	Volumes       []string               `protobuf:"bytes,8,rep,name=volumes" json:"volumes,omitempty" search:"Image Volumes"`                                                                         // @gotags: search:"Image Volumes"
	Labels        map[string]string      `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" search:"Image Label,store"` // @gotags: search:"Image Label,store"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *V1Metadata) Reset() {
	*x = V1Metadata{}
	mi := &file_storage_image_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *V1Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V1Metadata) ProtoMessage() {}

func (x *V1Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *V1Metadata) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *V1Metadata) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *V1Metadata) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *V1Metadata) GetLayers() []*ImageLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *V1Metadata) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *V1Metadata) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *V1Metadata) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *V1Metadata) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *V1Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *V1Metadata) SetDigest(v string) {
	x.Digest = &v
}

func (x *V1Metadata) SetCreated(v *timestamppb.Timestamp) {
	x.Created = v
}

func (x *V1Metadata) SetAuthor(v string) {
	x.Author = &v
}

func (x *V1Metadata) SetLayers(v []*ImageLayer) {
	x.Layers = v
}

func (x *V1Metadata) SetUser(v string) {
	x.User = &v
}

func (x *V1Metadata) SetCommand(v []string) {
	x.Command = v
}

func (x *V1Metadata) SetEntrypoint(v []string) {
	x.Entrypoint = v
}

func (x *V1Metadata) SetVolumes(v []string) {
	x.Volumes = v
}

func (x *V1Metadata) SetLabels(v map[string]string) {
	x.Labels = v
}

func (x *V1Metadata) HasDigest() bool {
	if x == nil {
		return false
	}
	return x.Digest != nil
}

func (x *V1Metadata) HasCreated() bool {
	if x == nil {
		return false
	}
	return x.Created != nil
}

func (x *V1Metadata) HasAuthor() bool {
	if x == nil {
		return false
	}
	return x.Author != nil
}

func (x *V1Metadata) HasUser() bool {
	if x == nil {
		return false
	}
	return x.User != nil
}

func (x *V1Metadata) ClearDigest() {
	x.Digest = nil
}

func (x *V1Metadata) ClearCreated() {
	x.Created = nil
}

func (x *V1Metadata) ClearAuthor() {
	x.Author = nil
}

func (x *V1Metadata) ClearUser() {
	x.User = nil
}

type V1Metadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Digest     *string
	Created    *timestamppb.Timestamp
	Author     *string
	Layers     []*ImageLayer
	User       *string
	Command    []string
	Entrypoint []string
	Volumes    []string
	Labels     map[string]string
}

func (b0 V1Metadata_builder) Build() *V1Metadata {
	m0 := &V1Metadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.Digest = b.Digest
	x.Created = b.Created
	x.Author = b.Author
	x.Layers = b.Layers
	x.User = b.User
	x.Command = b.Command
	x.Entrypoint = b.Entrypoint
	x.Volumes = b.Volumes
	x.Labels = b.Labels
	return m0
}

type ImageLayer struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Instruction   *string                `protobuf:"bytes,1,opt,name=instruction" json:"instruction,omitempty" search:"Dockerfile Instruction Keyword,store"` // @gotags: search:"Dockerfile Instruction Keyword,store"
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" search:"Dockerfile Instruction Value,store"`             // @gotags: search:"Dockerfile Instruction Value,store"
	Created       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	Author        *string                `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	Empty         *bool                  `protobuf:"varint,6,opt,name=empty" json:"empty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageLayer) Reset() {
	*x = ImageLayer{}
	mi := &file_storage_image_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageLayer) ProtoMessage() {}

func (x *ImageLayer) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageLayer) GetInstruction() string {
	if x != nil && x.Instruction != nil {
		return *x.Instruction
	}
	return ""
}

func (x *ImageLayer) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ImageLayer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ImageLayer) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *ImageLayer) GetEmpty() bool {
	if x != nil && x.Empty != nil {
		return *x.Empty
	}
	return false
}

func (x *ImageLayer) SetInstruction(v string) {
	x.Instruction = &v
}

func (x *ImageLayer) SetValue(v string) {
	x.Value = &v
}

func (x *ImageLayer) SetCreated(v *timestamppb.Timestamp) {
	x.Created = v
}

func (x *ImageLayer) SetAuthor(v string) {
	x.Author = &v
}

func (x *ImageLayer) SetEmpty(v bool) {
	x.Empty = &v
}

func (x *ImageLayer) HasInstruction() bool {
	if x == nil {
		return false
	}
	return x.Instruction != nil
}

func (x *ImageLayer) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *ImageLayer) HasCreated() bool {
	if x == nil {
		return false
	}
	return x.Created != nil
}

func (x *ImageLayer) HasAuthor() bool {
	if x == nil {
		return false
	}
	return x.Author != nil
}

func (x *ImageLayer) HasEmpty() bool {
	if x == nil {
		return false
	}
	return x.Empty != nil
}

func (x *ImageLayer) ClearInstruction() {
	x.Instruction = nil
}

func (x *ImageLayer) ClearValue() {
	x.Value = nil
}

func (x *ImageLayer) ClearCreated() {
	x.Created = nil
}

func (x *ImageLayer) ClearAuthor() {
	x.Author = nil
}

func (x *ImageLayer) ClearEmpty() {
	x.Empty = nil
}

type ImageLayer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Instruction *string
	Value       *string
	Created     *timestamppb.Timestamp
	Author      *string
	Empty       *bool
}

func (b0 ImageLayer_builder) Build() *ImageLayer {
	m0 := &ImageLayer{}
	b, x := &b0, m0
	_, _ = b, x
	x.Instruction = b.Instruction
	x.Value = b.Value
	x.Created = b.Created
	x.Author = b.Author
	x.Empty = b.Empty
	return m0
}

type ImageName struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Registry      *string                `protobuf:"bytes,1,opt,name=registry" json:"registry,omitempty" search:"Image Registry,store"`                 // @gotags: search:"Image Registry,store"
	Remote        *string                `protobuf:"bytes,2,opt,name=remote" json:"remote,omitempty" search:"Image Remote,store"`                     // @gotags: search:"Image Remote,store"
	Tag           *string                `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty" search:"Image Tag,store"`                           // @gotags: search:"Image Tag,store"
	FullName      *string                `protobuf:"bytes,4,opt,name=full_name,json=fullName" json:"full_name,omitempty" search:"Image,store,analyzer=standard"` // @gotags: search:"Image,store,analyzer=standard"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageName) Reset() {
	*x = ImageName{}
	mi := &file_storage_image_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageName) ProtoMessage() {}

func (x *ImageName) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ImageName) GetRegistry() string {
	if x != nil && x.Registry != nil {
		return *x.Registry
	}
	return ""
}

func (x *ImageName) GetRemote() string {
	if x != nil && x.Remote != nil {
		return *x.Remote
	}
	return ""
}

func (x *ImageName) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *ImageName) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *ImageName) SetRegistry(v string) {
	x.Registry = &v
}

func (x *ImageName) SetRemote(v string) {
	x.Remote = &v
}

func (x *ImageName) SetTag(v string) {
	x.Tag = &v
}

func (x *ImageName) SetFullName(v string) {
	x.FullName = &v
}

func (x *ImageName) HasRegistry() bool {
	if x == nil {
		return false
	}
	return x.Registry != nil
}

func (x *ImageName) HasRemote() bool {
	if x == nil {
		return false
	}
	return x.Remote != nil
}

func (x *ImageName) HasTag() bool {
	if x == nil {
		return false
	}
	return x.Tag != nil
}

func (x *ImageName) HasFullName() bool {
	if x == nil {
		return false
	}
	return x.FullName != nil
}

func (x *ImageName) ClearRegistry() {
	x.Registry = nil
}

func (x *ImageName) ClearRemote() {
	x.Remote = nil
}

func (x *ImageName) ClearTag() {
	x.Tag = nil
}

func (x *ImageName) ClearFullName() {
	x.FullName = nil
}

type ImageName_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Registry *string
	Remote   *string
	Tag      *string
	FullName *string
}

func (b0 ImageName_builder) Build() *ImageName {
	m0 := &ImageName{}
	b, x := &b0, m0
	_, _ = b, x
	x.Registry = b.Registry
	x.Remote = b.Remote
	x.Tag = b.Tag
	x.FullName = b.FullName
	return m0
}

type ListImage struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	Id    *string                `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"`
	Name  *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to SetComponents:
	//
	//	*ListImage_Components
	SetComponents isListImage_SetComponents `protobuf_oneof:"set_components"`
	// Types that are valid to be assigned to SetCves:
	//
	//	*ListImage_Cves
	SetCves isListImage_SetCves `protobuf_oneof:"set_cves"`
	// Types that are valid to be assigned to SetFixable:
	//
	//	*ListImage_FixableCves
	SetFixable    isListImage_SetFixable `protobuf_oneof:"set_fixable"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	LastUpdated   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	Priority      *int64                 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImage) Reset() {
	*x = ListImage{}
	mi := &file_storage_image_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImage) ProtoMessage() {}

func (x *ListImage) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListImage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ListImage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListImage) GetSetComponents() isListImage_SetComponents {
	if x != nil {
		return x.SetComponents
	}
	return nil
}

func (x *ListImage) Get_Components() int32 {
	if x != nil {
		if x, ok := x.SetComponents.(*ListImage_Components); ok {
			return x.Components
		}
	}
	return 0
}

// Deprecated: Use Get_Components instead.
func (x *ListImage) GetComponents() int32 {
	return x.Get_Components()
}

func (x *ListImage) GetSetCves() isListImage_SetCves {
	if x != nil {
		return x.SetCves
	}
	return nil
}

func (x *ListImage) Get_Cves() int32 {
	if x != nil {
		if x, ok := x.SetCves.(*ListImage_Cves); ok {
			return x.Cves
		}
	}
	return 0
}

// Deprecated: Use Get_Cves instead.
func (x *ListImage) GetCves() int32 {
	return x.Get_Cves()
}

func (x *ListImage) GetSetFixable() isListImage_SetFixable {
	if x != nil {
		return x.SetFixable
	}
	return nil
}

func (x *ListImage) GetFixableCves() int32 {
	if x != nil {
		if x, ok := x.SetFixable.(*ListImage_FixableCves); ok {
			return x.FixableCves
		}
	}
	return 0
}

func (x *ListImage) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ListImage) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ListImage) GetPriority() int64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *ListImage) SetId(v string) {
	x.Id = &v
}

func (x *ListImage) SetName(v string) {
	x.Name = &v
}

func (x *ListImage) Set_Components(v int32) {
	x.SetComponents = &ListImage_Components{v}
}

func (x *ListImage) Set_Cves(v int32) {
	x.SetCves = &ListImage_Cves{v}
}

func (x *ListImage) SetFixableCves(v int32) {
	x.SetFixable = &ListImage_FixableCves{v}
}

func (x *ListImage) SetCreated(v *timestamppb.Timestamp) {
	x.Created = v
}

func (x *ListImage) SetLastUpdated(v *timestamppb.Timestamp) {
	x.LastUpdated = v
}

func (x *ListImage) SetPriority(v int64) {
	x.Priority = &v
}

func (x *ListImage) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ListImage) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ListImage) HasSetComponents() bool {
	if x == nil {
		return false
	}
	return x.SetComponents != nil
}

func (x *ListImage) Has_Components() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetComponents.(*ListImage_Components)
	return ok
}

func (x *ListImage) HasSetCves() bool {
	if x == nil {
		return false
	}
	return x.SetCves != nil
}

func (x *ListImage) Has_Cves() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetCves.(*ListImage_Cves)
	return ok
}

func (x *ListImage) HasSetFixable() bool {
	if x == nil {
		return false
	}
	return x.SetFixable != nil
}

func (x *ListImage) HasFixableCves() bool {
	if x == nil {
		return false
	}
	_, ok := x.SetFixable.(*ListImage_FixableCves)
	return ok
}

func (x *ListImage) HasCreated() bool {
	if x == nil {
		return false
	}
	return x.Created != nil
}

func (x *ListImage) HasLastUpdated() bool {
	if x == nil {
		return false
	}
	return x.LastUpdated != nil
}

func (x *ListImage) HasPriority() bool {
	if x == nil {
		return false
	}
	return x.Priority != nil
}

func (x *ListImage) ClearId() {
	x.Id = nil
}

func (x *ListImage) ClearName() {
	x.Name = nil
}

func (x *ListImage) ClearSetComponents() {
	x.SetComponents = nil
}

func (x *ListImage) Clear_Components() {
	if _, ok := x.SetComponents.(*ListImage_Components); ok {
		x.SetComponents = nil
	}
}

func (x *ListImage) ClearSetCves() {
	x.SetCves = nil
}

func (x *ListImage) Clear_Cves() {
	if _, ok := x.SetCves.(*ListImage_Cves); ok {
		x.SetCves = nil
	}
}

func (x *ListImage) ClearSetFixable() {
	x.SetFixable = nil
}

func (x *ListImage) ClearFixableCves() {
	if _, ok := x.SetFixable.(*ListImage_FixableCves); ok {
		x.SetFixable = nil
	}
}

func (x *ListImage) ClearCreated() {
	x.Created = nil
}

func (x *ListImage) ClearLastUpdated() {
	x.LastUpdated = nil
}

func (x *ListImage) ClearPriority() {
	x.Priority = nil
}

const ListImage_SetComponents_not_set_case case_ListImage_SetComponents = 0
const ListImage_Components_case case_ListImage_SetComponents = 3

func (x *ListImage) WhichSetComponents() case_ListImage_SetComponents {
	if x == nil {
		return ListImage_SetComponents_not_set_case
	}
	switch x.SetComponents.(type) {
	case *ListImage_Components:
		return ListImage_Components_case
	default:
		return ListImage_SetComponents_not_set_case
	}
}

const ListImage_SetCves_not_set_case case_ListImage_SetCves = 0
const ListImage_Cves_case case_ListImage_SetCves = 4

func (x *ListImage) WhichSetCves() case_ListImage_SetCves {
	if x == nil {
		return ListImage_SetCves_not_set_case
	}
	switch x.SetCves.(type) {
	case *ListImage_Cves:
		return ListImage_Cves_case
	default:
		return ListImage_SetCves_not_set_case
	}
}

const ListImage_SetFixable_not_set_case case_ListImage_SetFixable = 0
const ListImage_FixableCves_case case_ListImage_SetFixable = 5

func (x *ListImage) WhichSetFixable() case_ListImage_SetFixable {
	if x == nil {
		return ListImage_SetFixable_not_set_case
	}
	switch x.SetFixable.(type) {
	case *ListImage_FixableCves:
		return ListImage_FixableCves_case
	default:
		return ListImage_SetFixable_not_set_case
	}
}

type ListImage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   *string
	Name *string
	// Fields of oneof SetComponents:
	Components *int32
	// -- end of SetComponents
	// Fields of oneof SetCves:
	Cves *int32
	// -- end of SetCves
	// Fields of oneof SetFixable:
	FixableCves *int32
	// -- end of SetFixable
	Created     *timestamppb.Timestamp
	LastUpdated *timestamppb.Timestamp
	Priority    *int64
}

func (b0 ListImage_builder) Build() *ListImage {
	m0 := &ListImage{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	if b.Components != nil {
		x.SetComponents = &ListImage_Components{*b.Components}
	}
	if b.Cves != nil {
		x.SetCves = &ListImage_Cves{*b.Cves}
	}
	if b.FixableCves != nil {
		x.SetFixable = &ListImage_FixableCves{*b.FixableCves}
	}
	x.Created = b.Created
	x.LastUpdated = b.LastUpdated
	x.Priority = b.Priority
	return m0
}

type case_ListImage_SetComponents protoreflect.FieldNumber

func (x case_ListImage_SetComponents) String() string {
	md := file_storage_image_proto_msgTypes[15].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ListImage_SetCves protoreflect.FieldNumber

func (x case_ListImage_SetCves) String() string {
	md := file_storage_image_proto_msgTypes[15].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_ListImage_SetFixable protoreflect.FieldNumber

func (x case_ListImage_SetFixable) String() string {
	md := file_storage_image_proto_msgTypes[15].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isListImage_SetComponents interface {
	isListImage_SetComponents()
}

type ListImage_Components struct {
	Components int32 `protobuf:"varint,3,opt,name=components,oneof"`
}

func (*ListImage_Components) isListImage_SetComponents() {}

type isListImage_SetCves interface {
	isListImage_SetCves()
}

type ListImage_Cves struct {
	Cves int32 `protobuf:"varint,4,opt,name=cves,oneof"`
}

func (*ListImage_Cves) isListImage_SetCves() {}

type isListImage_SetFixable interface {
	isListImage_SetFixable()
}

type ListImage_FixableCves struct {
	FixableCves int32 `protobuf:"varint,5,opt,name=fixable_cves,json=fixableCves,oneof"`
}

func (*ListImage_FixableCves) isListImage_SetFixable() {}

type WatchedImage struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" sql:"pk"` // @gotags: sql:"pk"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchedImage) Reset() {
	*x = WatchedImage{}
	mi := &file_storage_image_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedImage) ProtoMessage() {}

func (x *WatchedImage) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WatchedImage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WatchedImage) SetName(v string) {
	x.Name = &v
}

func (x *WatchedImage) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *WatchedImage) ClearName() {
	x.Name = nil
}

type WatchedImage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
}

func (b0 WatchedImage_builder) Build() *WatchedImage {
	m0 := &WatchedImage{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	return m0
}

type EmbeddedImageScanComponent_Executable struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Path          *string                `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Dependencies  []string               `protobuf:"bytes,2,rep,name=dependencies" json:"dependencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddedImageScanComponent_Executable) Reset() {
	*x = EmbeddedImageScanComponent_Executable{}
	mi := &file_storage_image_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedImageScanComponent_Executable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedImageScanComponent_Executable) ProtoMessage() {}

func (x *EmbeddedImageScanComponent_Executable) ProtoReflect() protoreflect.Message {
	mi := &file_storage_image_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EmbeddedImageScanComponent_Executable) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *EmbeddedImageScanComponent_Executable) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *EmbeddedImageScanComponent_Executable) SetPath(v string) {
	x.Path = &v
}

func (x *EmbeddedImageScanComponent_Executable) SetDependencies(v []string) {
	x.Dependencies = v
}

func (x *EmbeddedImageScanComponent_Executable) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *EmbeddedImageScanComponent_Executable) ClearPath() {
	x.Path = nil
}

type EmbeddedImageScanComponent_Executable_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path         *string
	Dependencies []string
}

func (b0 EmbeddedImageScanComponent_Executable_builder) Build() *EmbeddedImageScanComponent_Executable {
	m0 := &EmbeddedImageScanComponent_Executable{}
	b, x := &b0, m0
	_, _ = b, x
	x.Path = b.Path
	x.Dependencies = b.Dependencies
	return m0
}

var File_storage_image_proto protoreflect.FileDescriptor

const file_storage_image_proto_rawDesc = "" +
	"\n" +
	"\x13storage/image.proto\x12\astorage\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bstorage/vulnerability.proto\x1a!google/protobuf/go_features.proto\"\x8d\a\n" +
	"\x05Image\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12&\n" +
	"\x04name\x18\x01 \x01(\v2\x12.storage.ImageNameR\x04name\x12(\n" +
	"\x05names\x18\x12 \x03(\v2\x12.storage.ImageNameR\x05names\x122\n" +
	"\bmetadata\x18\x02 \x01(\v2\x16.storage.ImageMetadataR\bmetadata\x12&\n" +
	"\x04scan\x18\x03 \x01(\v2\x12.storage.ImageScanR\x04scan\x12g\n" +
	"\x1bsignature_verification_data\x18\x0f \x01(\v2'.storage.ImageSignatureVerificationDataR\x19signatureVerificationData\x125\n" +
	"\tsignature\x18\x10 \x01(\v2\x17.storage.ImageSignatureR\tsignature\x12 \n" +
	"\n" +
	"components\x18\a \x01(\x05H\x00R\n" +
	"components\x12\x14\n" +
	"\x04cves\x18\b \x01(\x05H\x01R\x04cves\x12#\n" +
	"\ffixable_cves\x18\t \x01(\x05H\x02R\vfixableCves\x12=\n" +
	"\flast_updated\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12!\n" +
	"\fnot_pullable\x18\n" +
	" \x01(\bR\vnotPullable\x12(\n" +
	"\x10is_cluster_local\x18\x11 \x01(\bR\x0eisClusterLocal\x12\x1a\n" +
	"\bpriority\x18\v \x01(\x03R\bpriority\x12\x1d\n" +
	"\n" +
	"risk_score\x18\f \x01(\x02R\triskScore\x12\x1b\n" +
	"\btop_cvss\x18\r \x01(\x02H\x03R\atopCvss\x12)\n" +
	"\x05notes\x18\x0e \x03(\x0e2\x13.storage.Image.NoteR\x05notes\"s\n" +
	"\x04Note\x12\x14\n" +
	"\x10MISSING_METADATA\x10\x00\x12\x15\n" +
	"\x11MISSING_SCAN_DATA\x10\x01\x12\x15\n" +
	"\x11MISSING_SIGNATURE\x10\x02\x12'\n" +
	"#MISSING_SIGNATURE_VERIFICATION_DATA\x10\x03:\x02\x18\x01B\x10\n" +
	"\x0eset_componentsB\n" +
	"\n" +
	"\bset_cvesB\r\n" +
	"\vset_fixableB\x0e\n" +
	"\fset_top_cvssJ\x04\b\x06\x10\a\"H\n" +
	"\n" +
	"DataSource\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06mirror\x18\x03 \x01(\tR\x06mirror\"\x94\x04\n" +
	"\tImageScan\x12'\n" +
	"\x0fscanner_version\x18\x06 \x01(\tR\x0escannerVersion\x127\n" +
	"\tscan_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\bscanTime\x12C\n" +
	"\n" +
	"components\x18\x02 \x03(\v2#.storage.EmbeddedImageScanComponentR\n" +
	"components\x12)\n" +
	"\x10operating_system\x18\x04 \x01(\tR\x0foperatingSystem\x124\n" +
	"\vdata_source\x18\x03 \x01(\v2\x13.storage.DataSourceR\n" +
	"dataSource\x12-\n" +
	"\x05notes\x18\x05 \x03(\x0e2\x17.storage.ImageScan.NoteR\x05notes\x12\x14\n" +
	"\x04hash\x18\a \x01(\x04H\x00R\x04hash\"\xac\x01\n" +
	"\x04Note\x12\t\n" +
	"\x05UNSET\x10\x00\x12\x12\n" +
	"\x0eOS_UNAVAILABLE\x10\x01\x12\x15\n" +
	"\x11PARTIAL_SCAN_DATA\x10\x02\x12\x17\n" +
	"\x13OS_CVES_UNAVAILABLE\x10\x03\x12\x11\n" +
	"\rOS_CVES_STALE\x10\x04\x12\x1d\n" +
	"\x19LANGUAGE_CVES_UNAVAILABLE\x10\x05\x12#\n" +
	"\x1fCERTIFIED_RHEL_SCAN_UNAVAILABLE\x10\x06B\v\n" +
	"\thashoneof\"e\n" +
	"\x1eImageSignatureVerificationData\x12C\n" +
	"\aresults\x18\x01 \x03(\v2).storage.ImageSignatureVerificationResultR\aresults\"\xb9\x03\n" +
	" ImageSignatureVerificationResult\x12G\n" +
	"\x11verification_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x10verificationTime\x12\x1f\n" +
	"\vverifier_id\x18\x02 \x01(\tR\n" +
	"verifierId\x12H\n" +
	"\x06status\x18\x03 \x01(\x0e20.storage.ImageSignatureVerificationResult.StatusR\x06status\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12:\n" +
	"\x19verified_image_references\x18\x05 \x03(\tR\x17verifiedImageReferences\"\x82\x01\n" +
	"\x06Status\x12\t\n" +
	"\x05UNSET\x10\x00\x12\f\n" +
	"\bVERIFIED\x10\x01\x12\x17\n" +
	"\x13FAILED_VERIFICATION\x10\x02\x12\x1a\n" +
	"\x16INVALID_SIGNATURE_ALGO\x10\x03\x12\x17\n" +
	"\x13CORRUPTED_SIGNATURE\x10\x04\x12\x11\n" +
	"\rGENERIC_ERROR\x10\x05\"\xea\x04\n" +
	"\x1aEmbeddedImageScanComponent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12*\n" +
	"\alicense\x18\x03 \x01(\v2\x10.storage.LicenseR\alicense\x124\n" +
	"\x05vulns\x18\x04 \x03(\v2\x1e.storage.EmbeddedVulnerabilityR\x05vulns\x12!\n" +
	"\vlayer_index\x18\x05 \x01(\x05H\x00R\n" +
	"layerIndex\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\x03R\bpriority\x12+\n" +
	"\x06source\x18\a \x01(\x0e2\x13.storage.SourceTypeR\x06source\x12\x1a\n" +
	"\blocation\x18\b \x01(\tR\blocation\x12\x1b\n" +
	"\btop_cvss\x18\t \x01(\x02H\x01R\atopCvss\x12\x1d\n" +
	"\n" +
	"risk_score\x18\n" +
	" \x01(\x02R\triskScore\x12\x19\n" +
	"\bfixed_by\x18\v \x01(\tR\afixedBy\x12P\n" +
	"\vexecutables\x18\f \x03(\v2..storage.EmbeddedImageScanComponent.ExecutableR\vexecutables\x12\"\n" +
	"\farchitecture\x18\r \x01(\tR\farchitecture\x1aD\n" +
	"\n" +
	"Executable\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\"\n" +
	"\fdependencies\x18\x02 \x03(\tR\fdependenciesB\x11\n" +
	"\x0fhas_layer_indexB\x0e\n" +
	"\fset_top_cvss\"C\n" +
	"\aLicense\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\"\xc8\x01\n" +
	"\rImageMetadata\x12#\n" +
	"\x02v1\x18\x01 \x01(\v2\x13.storage.V1MetadataR\x02v1\x12#\n" +
	"\x02v2\x18\x02 \x01(\v2\x13.storage.V2MetadataR\x02v2\x12\x1d\n" +
	"\n" +
	"layer_shas\x18\x03 \x03(\tR\tlayerShas\x124\n" +
	"\vdata_source\x18\x04 \x01(\v2\x13.storage.DataSourceR\n" +
	"dataSource\x12\x18\n" +
	"\aversion\x18\x05 \x01(\x04R\aversion\"z\n" +
	"\x0eImageSignature\x122\n" +
	"\n" +
	"signatures\x18\x01 \x03(\v2\x12.storage.SignatureR\n" +
	"signatures\x124\n" +
	"\afetched\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\afetched\"L\n" +
	"\tSignature\x122\n" +
	"\x06cosign\x18\x01 \x01(\v2\x18.storage.CosignSignatureH\x00R\x06cosignB\v\n" +
	"\tSignature\"\xc7\x01\n" +
	"\x0fCosignSignature\x12#\n" +
	"\rraw_signature\x18\x01 \x01(\fR\frawSignature\x12+\n" +
	"\x11signature_payload\x18\x02 \x01(\fR\x10signaturePayload\x12\x19\n" +
	"\bcert_pem\x18\x03 \x01(\fR\acertPem\x12$\n" +
	"\x0ecert_chain_pem\x18\x04 \x01(\fR\fcertChainPem\x12!\n" +
	"\frekor_bundle\x18\x05 \x01(\fR\vrekorBundle\"$\n" +
	"\n" +
	"V2Metadata\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\"\xfb\x02\n" +
	"\n" +
	"V1Metadata\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x124\n" +
	"\acreated\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x12\x16\n" +
	"\x06author\x18\x03 \x01(\tR\x06author\x12+\n" +
	"\x06layers\x18\x04 \x03(\v2\x13.storage.ImageLayerR\x06layers\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x18\n" +
	"\acommand\x18\x06 \x03(\tR\acommand\x12\x1e\n" +
	"\n" +
	"entrypoint\x18\a \x03(\tR\n" +
	"entrypoint\x12\x18\n" +
	"\avolumes\x18\b \x03(\tR\avolumes\x127\n" +
	"\x06labels\x18\t \x03(\v2\x1f.storage.V1Metadata.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xae\x01\n" +
	"\n" +
	"ImageLayer\x12 \n" +
	"\vinstruction\x18\x01 \x01(\tR\vinstruction\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x124\n" +
	"\acreated\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x12\x16\n" +
	"\x06author\x18\x04 \x01(\tR\x06author\x12\x14\n" +
	"\x05empty\x18\x06 \x01(\bR\x05emptyJ\x04\b\x05\x10\x06\"n\n" +
	"\tImageName\x12\x1a\n" +
	"\bregistry\x18\x01 \x01(\tR\bregistry\x12\x16\n" +
	"\x06remote\x18\x02 \x01(\tR\x06remote\x12\x10\n" +
	"\x03tag\x18\x03 \x01(\tR\x03tag\x12\x1b\n" +
	"\tfull_name\x18\x04 \x01(\tR\bfullName\"\xd0\x02\n" +
	"\tListImage\x12\x0e\n" +
	"\x02id\x18\a \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\n" +
	"components\x18\x03 \x01(\x05H\x00R\n" +
	"components\x12\x14\n" +
	"\x04cves\x18\x04 \x01(\x05H\x01R\x04cves\x12#\n" +
	"\ffixable_cves\x18\x05 \x01(\x05H\x02R\vfixableCves\x124\n" +
	"\acreated\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x12=\n" +
	"\flast_updated\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12\x1a\n" +
	"\bpriority\x18\n" +
	" \x01(\x03R\bpriorityB\x10\n" +
	"\x0eset_componentsB\n" +
	"\n" +
	"\bset_cvesB\r\n" +
	"\vset_fixableJ\x04\b\t\x10\n" +
	"\"\"\n" +
	"\fWatchedImage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name*s\n" +
	"\n" +
	"SourceType\x12\x06\n" +
	"\x02OS\x10\x00\x12\n" +
	"\n" +
	"\x06PYTHON\x10\x01\x12\b\n" +
	"\x04JAVA\x10\x02\x12\b\n" +
	"\x04RUBY\x10\x03\x12\n" +
	"\n" +
	"\x06NODEJS\x10\x04\x12\x06\n" +
	"\x02GO\x10\a\x12\x15\n" +
	"\x11DOTNETCORERUNTIME\x10\x05\x12\x12\n" +
	"\x0eINFRASTRUCTURE\x10\x06B6\n" +
	"\x19io.stackrox.proto.storageZ\x11./storage;storage\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_storage_image_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_storage_image_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_storage_image_proto_goTypes = []any{
	(SourceType)(0),     // 0: storage.SourceType
	(Image_Note)(0),     // 1: storage.Image.Note
	(ImageScan_Note)(0), // 2: storage.ImageScan.Note
	(ImageSignatureVerificationResult_Status)(0), // 3: storage.ImageSignatureVerificationResult.Status
	(*Image)(nil),                                 // 4: storage.Image
	(*DataSource)(nil),                            // 5: storage.DataSource
	(*ImageScan)(nil),                             // 6: storage.ImageScan
	(*ImageSignatureVerificationData)(nil),        // 7: storage.ImageSignatureVerificationData
	(*ImageSignatureVerificationResult)(nil),      // 8: storage.ImageSignatureVerificationResult
	(*EmbeddedImageScanComponent)(nil),            // 9: storage.EmbeddedImageScanComponent
	(*License)(nil),                               // 10: storage.License
	(*ImageMetadata)(nil),                         // 11: storage.ImageMetadata
	(*ImageSignature)(nil),                        // 12: storage.ImageSignature
	(*Signature)(nil),                             // 13: storage.Signature
	(*CosignSignature)(nil),                       // 14: storage.CosignSignature
	(*V2Metadata)(nil),                            // 15: storage.V2Metadata
	(*V1Metadata)(nil),                            // 16: storage.V1Metadata
	(*ImageLayer)(nil),                            // 17: storage.ImageLayer
	(*ImageName)(nil),                             // 18: storage.ImageName
	(*ListImage)(nil),                             // 19: storage.ListImage
	(*WatchedImage)(nil),                          // 20: storage.WatchedImage
	(*EmbeddedImageScanComponent_Executable)(nil), // 21: storage.EmbeddedImageScanComponent.Executable
	nil,                           // 22: storage.V1Metadata.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 23: google.protobuf.Timestamp
	(*EmbeddedVulnerability)(nil), // 24: storage.EmbeddedVulnerability
}
var file_storage_image_proto_depIdxs = []int32{
	18, // 0: storage.Image.name:type_name -> storage.ImageName
	18, // 1: storage.Image.names:type_name -> storage.ImageName
	11, // 2: storage.Image.metadata:type_name -> storage.ImageMetadata
	6,  // 3: storage.Image.scan:type_name -> storage.ImageScan
	7,  // 4: storage.Image.signature_verification_data:type_name -> storage.ImageSignatureVerificationData
	12, // 5: storage.Image.signature:type_name -> storage.ImageSignature
	23, // 6: storage.Image.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 7: storage.Image.notes:type_name -> storage.Image.Note
	23, // 8: storage.ImageScan.scan_time:type_name -> google.protobuf.Timestamp
	9,  // 9: storage.ImageScan.components:type_name -> storage.EmbeddedImageScanComponent
	5,  // 10: storage.ImageScan.data_source:type_name -> storage.DataSource
	2,  // 11: storage.ImageScan.notes:type_name -> storage.ImageScan.Note
	8,  // 12: storage.ImageSignatureVerificationData.results:type_name -> storage.ImageSignatureVerificationResult
	23, // 13: storage.ImageSignatureVerificationResult.verification_time:type_name -> google.protobuf.Timestamp
	3,  // 14: storage.ImageSignatureVerificationResult.status:type_name -> storage.ImageSignatureVerificationResult.Status
	10, // 15: storage.EmbeddedImageScanComponent.license:type_name -> storage.License
	24, // 16: storage.EmbeddedImageScanComponent.vulns:type_name -> storage.EmbeddedVulnerability
	0,  // 17: storage.EmbeddedImageScanComponent.source:type_name -> storage.SourceType
	21, // 18: storage.EmbeddedImageScanComponent.executables:type_name -> storage.EmbeddedImageScanComponent.Executable
	16, // 19: storage.ImageMetadata.v1:type_name -> storage.V1Metadata
	15, // 20: storage.ImageMetadata.v2:type_name -> storage.V2Metadata
	5,  // 21: storage.ImageMetadata.data_source:type_name -> storage.DataSource
	13, // 22: storage.ImageSignature.signatures:type_name -> storage.Signature
	23, // 23: storage.ImageSignature.fetched:type_name -> google.protobuf.Timestamp
	14, // 24: storage.Signature.cosign:type_name -> storage.CosignSignature
	23, // 25: storage.V1Metadata.created:type_name -> google.protobuf.Timestamp
	17, // 26: storage.V1Metadata.layers:type_name -> storage.ImageLayer
	22, // 27: storage.V1Metadata.labels:type_name -> storage.V1Metadata.LabelsEntry
	23, // 28: storage.ImageLayer.created:type_name -> google.protobuf.Timestamp
	23, // 29: storage.ListImage.created:type_name -> google.protobuf.Timestamp
	23, // 30: storage.ListImage.last_updated:type_name -> google.protobuf.Timestamp
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_storage_image_proto_init() }
func file_storage_image_proto_init() {
	if File_storage_image_proto != nil {
		return
	}
	file_storage_vulnerability_proto_init()
	file_storage_image_proto_msgTypes[0].OneofWrappers = []any{
		(*Image_Components)(nil),
		(*Image_Cves)(nil),
		(*Image_FixableCves)(nil),
		(*Image_TopCvss)(nil),
	}
	file_storage_image_proto_msgTypes[2].OneofWrappers = []any{
		(*ImageScan_Hash)(nil),
	}
	file_storage_image_proto_msgTypes[5].OneofWrappers = []any{
		(*EmbeddedImageScanComponent_LayerIndex)(nil),
		(*EmbeddedImageScanComponent_TopCvss)(nil),
	}
	file_storage_image_proto_msgTypes[9].OneofWrappers = []any{
		(*Signature_Cosign)(nil),
	}
	file_storage_image_proto_msgTypes[15].OneofWrappers = []any{
		(*ListImage_Components)(nil),
		(*ListImage_Cves)(nil),
		(*ListImage_FixableCves)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_image_proto_rawDesc), len(file_storage_image_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_image_proto_goTypes,
		DependencyIndexes: file_storage_image_proto_depIdxs,
		EnumInfos:         file_storage_image_proto_enumTypes,
		MessageInfos:      file_storage_image_proto_msgTypes,
	}.Build()
	File_storage_image_proto = out.File
	file_storage_image_proto_goTypes = nil
	file_storage_image_proto_depIdxs = nil
}
