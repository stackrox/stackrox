// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: test/test.proto

//go:build !protoopaque

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestClone_CloneEnum int32

const (
	TestClone_UNSET TestClone_CloneEnum = 0
	TestClone_Val1  TestClone_CloneEnum = 1
	TestClone_Val2  TestClone_CloneEnum = 2
)

// Enum value maps for TestClone_CloneEnum.
var (
	TestClone_CloneEnum_name = map[int32]string{
		0: "UNSET",
		1: "Val1",
		2: "Val2",
	}
	TestClone_CloneEnum_value = map[string]int32{
		"UNSET": 0,
		"Val1":  1,
		"Val2":  2,
	}
)

func (x TestClone_CloneEnum) Enum() *TestClone_CloneEnum {
	p := new(TestClone_CloneEnum)
	*p = x
	return p
}

func (x TestClone_CloneEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestClone_CloneEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_test_proto_enumTypes[0].Descriptor()
}

func (TestClone_CloneEnum) Type() protoreflect.EnumType {
	return &file_test_test_proto_enumTypes[0]
}

func (x TestClone_CloneEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type TestCloneSubMessage struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Int32         int32                  `protobuf:"varint,1,opt,name=int32" json:"int32,omitempty"`
	String_       string                 `protobuf:"bytes,2,opt,name=string" json:"string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCloneSubMessage) Reset() {
	*x = TestCloneSubMessage{}
	mi := &file_test_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCloneSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCloneSubMessage) ProtoMessage() {}

func (x *TestCloneSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestCloneSubMessage) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *TestCloneSubMessage) GetString() string {
	if x != nil {
		return x.String_
	}
	return ""
}

// Deprecated: Use GetString instead.
func (x *TestCloneSubMessage) GetString_() string {
	return x.GetString()
}

func (x *TestCloneSubMessage) SetInt32(v int32) {
	x.Int32 = v
}

func (x *TestCloneSubMessage) SetString(v string) {
	x.String_ = v
}

type TestCloneSubMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Int32  int32
	String string
}

func (b0 TestCloneSubMessage_builder) Build() *TestCloneSubMessage {
	m0 := &TestCloneSubMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.Int32 = b.Int32
	x.String_ = b.String
	return m0
}

type TestClone struct {
	state       protoimpl.MessageState          `protogen:"hybrid.v1"`
	IntSlice    []int32                         `protobuf:"varint,1,rep,packed,name=int_slice,json=intSlice" json:"int_slice,omitempty"`
	StringSlice []string                        `protobuf:"bytes,2,rep,name=string_slice,json=stringSlice" json:"string_slice,omitempty"`
	SubMessages []*TestCloneSubMessage          `protobuf:"bytes,3,rep,name=sub_messages,json=subMessages" json:"sub_messages,omitempty"`
	MessageMap  map[string]*TestCloneSubMessage `protobuf:"bytes,4,rep,name=message_map,json=messageMap" json:"message_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringMap   map[string]string               `protobuf:"bytes,5,rep,name=string_map,json=stringMap" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EnumSlice   []TestClone_CloneEnum           `protobuf:"varint,6,rep,packed,name=enum_slice,json=enumSlice,enum=test.TestClone_CloneEnum" json:"enum_slice,omitempty"`
	Ts          *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=ts" json:"ts,omitempty"`
	// Types that are valid to be assigned to Primitive:
	//
	//	*TestClone_Int32
	//	*TestClone_String_
	//	*TestClone_Msg
	Primitive     isTestClone_Primitive `protobuf_oneof:"primitive"`
	Any           *anypb.Any            `protobuf:"bytes,11,opt,name=any" json:"any,omitempty"`
	BytesMap      map[string][]byte     `protobuf:"bytes,12,rep,name=bytes_map,json=bytesMap" json:"bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BytesSlice    [][]byte              `protobuf:"bytes,13,rep,name=bytes_slice,json=bytesSlice" json:"bytes_slice,omitempty"`
	Bytes         []byte                `protobuf:"bytes,14,opt,name=bytes" json:"bytes,omitempty"`
	SubMessage    *TestCloneSubMessage  `protobuf:"bytes,15,opt,name=sub_message,json=subMessage" json:"sub_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestClone) Reset() {
	*x = TestClone{}
	mi := &file_test_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestClone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestClone) ProtoMessage() {}

func (x *TestClone) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestClone) GetIntSlice() []int32 {
	if x != nil {
		return x.IntSlice
	}
	return nil
}

func (x *TestClone) GetStringSlice() []string {
	if x != nil {
		return x.StringSlice
	}
	return nil
}

func (x *TestClone) GetSubMessages() []*TestCloneSubMessage {
	if x != nil {
		return x.SubMessages
	}
	return nil
}

func (x *TestClone) GetMessageMap() map[string]*TestCloneSubMessage {
	if x != nil {
		return x.MessageMap
	}
	return nil
}

func (x *TestClone) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *TestClone) GetEnumSlice() []TestClone_CloneEnum {
	if x != nil {
		return x.EnumSlice
	}
	return nil
}

func (x *TestClone) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *TestClone) GetPrimitive() isTestClone_Primitive {
	if x != nil {
		return x.Primitive
	}
	return nil
}

func (x *TestClone) GetInt32() int32 {
	if x != nil {
		if x, ok := x.Primitive.(*TestClone_Int32); ok {
			return x.Int32
		}
	}
	return 0
}

func (x *TestClone) GetString() string {
	if x != nil {
		if x, ok := x.Primitive.(*TestClone_String_); ok {
			return x.String_
		}
	}
	return ""
}

// Deprecated: Use GetString instead.
func (x *TestClone) GetString_() string {
	return x.GetString()
}

func (x *TestClone) GetMsg() *TestCloneSubMessage {
	if x != nil {
		if x, ok := x.Primitive.(*TestClone_Msg); ok {
			return x.Msg
		}
	}
	return nil
}

func (x *TestClone) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *TestClone) GetBytesMap() map[string][]byte {
	if x != nil {
		return x.BytesMap
	}
	return nil
}

func (x *TestClone) GetBytesSlice() [][]byte {
	if x != nil {
		return x.BytesSlice
	}
	return nil
}

func (x *TestClone) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestClone) GetSubMessage() *TestCloneSubMessage {
	if x != nil {
		return x.SubMessage
	}
	return nil
}

func (x *TestClone) SetIntSlice(v []int32) {
	x.IntSlice = v
}

func (x *TestClone) SetStringSlice(v []string) {
	x.StringSlice = v
}

func (x *TestClone) SetSubMessages(v []*TestCloneSubMessage) {
	x.SubMessages = v
}

func (x *TestClone) SetMessageMap(v map[string]*TestCloneSubMessage) {
	x.MessageMap = v
}

func (x *TestClone) SetStringMap(v map[string]string) {
	x.StringMap = v
}

func (x *TestClone) SetEnumSlice(v []TestClone_CloneEnum) {
	x.EnumSlice = v
}

func (x *TestClone) SetTs(v *timestamppb.Timestamp) {
	x.Ts = v
}

func (x *TestClone) SetInt32(v int32) {
	x.Primitive = &TestClone_Int32{v}
}

func (x *TestClone) SetString(v string) {
	x.Primitive = &TestClone_String_{v}
}

func (x *TestClone) SetMsg(v *TestCloneSubMessage) {
	if v == nil {
		x.Primitive = nil
		return
	}
	x.Primitive = &TestClone_Msg{v}
}

func (x *TestClone) SetAny(v *anypb.Any) {
	x.Any = v
}

func (x *TestClone) SetBytesMap(v map[string][]byte) {
	x.BytesMap = v
}

func (x *TestClone) SetBytesSlice(v [][]byte) {
	x.BytesSlice = v
}

func (x *TestClone) SetBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Bytes = v
}

func (x *TestClone) SetSubMessage(v *TestCloneSubMessage) {
	x.SubMessage = v
}

func (x *TestClone) HasTs() bool {
	if x == nil {
		return false
	}
	return x.Ts != nil
}

func (x *TestClone) HasPrimitive() bool {
	if x == nil {
		return false
	}
	return x.Primitive != nil
}

func (x *TestClone) HasInt32() bool {
	if x == nil {
		return false
	}
	_, ok := x.Primitive.(*TestClone_Int32)
	return ok
}

func (x *TestClone) HasString() bool {
	if x == nil {
		return false
	}
	_, ok := x.Primitive.(*TestClone_String_)
	return ok
}

func (x *TestClone) HasMsg() bool {
	if x == nil {
		return false
	}
	_, ok := x.Primitive.(*TestClone_Msg)
	return ok
}

func (x *TestClone) HasAny() bool {
	if x == nil {
		return false
	}
	return x.Any != nil
}

func (x *TestClone) HasSubMessage() bool {
	if x == nil {
		return false
	}
	return x.SubMessage != nil
}

func (x *TestClone) ClearTs() {
	x.Ts = nil
}

func (x *TestClone) ClearPrimitive() {
	x.Primitive = nil
}

func (x *TestClone) ClearInt32() {
	if _, ok := x.Primitive.(*TestClone_Int32); ok {
		x.Primitive = nil
	}
}

func (x *TestClone) ClearString() {
	if _, ok := x.Primitive.(*TestClone_String_); ok {
		x.Primitive = nil
	}
}

func (x *TestClone) ClearMsg() {
	if _, ok := x.Primitive.(*TestClone_Msg); ok {
		x.Primitive = nil
	}
}

func (x *TestClone) ClearAny() {
	x.Any = nil
}

func (x *TestClone) ClearSubMessage() {
	x.SubMessage = nil
}

const TestClone_Primitive_not_set_case case_TestClone_Primitive = 0
const TestClone_Int32_case case_TestClone_Primitive = 8
const TestClone_String__case case_TestClone_Primitive = 9
const TestClone_Msg_case case_TestClone_Primitive = 10

func (x *TestClone) WhichPrimitive() case_TestClone_Primitive {
	if x == nil {
		return TestClone_Primitive_not_set_case
	}
	switch x.Primitive.(type) {
	case *TestClone_Int32:
		return TestClone_Int32_case
	case *TestClone_String_:
		return TestClone_String__case
	case *TestClone_Msg:
		return TestClone_Msg_case
	default:
		return TestClone_Primitive_not_set_case
	}
}

type TestClone_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IntSlice    []int32
	StringSlice []string
	SubMessages []*TestCloneSubMessage
	MessageMap  map[string]*TestCloneSubMessage
	StringMap   map[string]string
	EnumSlice   []TestClone_CloneEnum
	Ts          *timestamppb.Timestamp
	// Fields of oneof Primitive:
	Int32  *int32
	String *string
	Msg    *TestCloneSubMessage
	// -- end of Primitive
	Any        *anypb.Any
	BytesMap   map[string][]byte
	BytesSlice [][]byte
	Bytes      []byte
	SubMessage *TestCloneSubMessage
}

func (b0 TestClone_builder) Build() *TestClone {
	m0 := &TestClone{}
	b, x := &b0, m0
	_, _ = b, x
	x.IntSlice = b.IntSlice
	x.StringSlice = b.StringSlice
	x.SubMessages = b.SubMessages
	x.MessageMap = b.MessageMap
	x.StringMap = b.StringMap
	x.EnumSlice = b.EnumSlice
	x.Ts = b.Ts
	if b.Int32 != nil {
		x.Primitive = &TestClone_Int32{*b.Int32}
	}
	if b.String != nil {
		x.Primitive = &TestClone_String_{*b.String}
	}
	if b.Msg != nil {
		x.Primitive = &TestClone_Msg{b.Msg}
	}
	x.Any = b.Any
	x.BytesMap = b.BytesMap
	x.BytesSlice = b.BytesSlice
	x.Bytes = b.Bytes
	x.SubMessage = b.SubMessage
	return m0
}

type case_TestClone_Primitive protoreflect.FieldNumber

func (x case_TestClone_Primitive) String() string {
	md := file_test_test_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestClone_Primitive interface {
	isTestClone_Primitive()
}

type TestClone_Int32 struct {
	Int32 int32 `protobuf:"varint,8,opt,name=int32,oneof"`
}

type TestClone_String_ struct {
	String_ string `protobuf:"bytes,9,opt,name=string,oneof"`
}

type TestClone_Msg struct {
	Msg *TestCloneSubMessage `protobuf:"bytes,10,opt,name=msg,oneof"`
}

func (*TestClone_Int32) isTestClone_Primitive() {}

func (*TestClone_String_) isTestClone_Primitive() {}

func (*TestClone_Msg) isTestClone_Primitive() {}

var File_test_test_proto protoreflect.FileDescriptor

const file_test_test_proto_rawDesc = "" +
	"\n" +
	"\x0ftest/test.proto\x12\x04test\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"C\n" +
	"\x13TestCloneSubMessage\x12\x14\n" +
	"\x05int32\x18\x01 \x01(\x05R\x05int32\x12\x16\n" +
	"\x06string\x18\x02 \x01(\tR\x06string\"\xc2\a\n" +
	"\tTestClone\x12\x1b\n" +
	"\tint_slice\x18\x01 \x03(\x05R\bintSlice\x12!\n" +
	"\fstring_slice\x18\x02 \x03(\tR\vstringSlice\x12<\n" +
	"\fsub_messages\x18\x03 \x03(\v2\x19.test.TestCloneSubMessageR\vsubMessages\x12D\n" +
	"\vmessage_map\x18\x04 \x03(\v2\x1f.test.TestClone.MessageMapEntryB\x02(\x01R\n" +
	"messageMap\x12A\n" +
	"\n" +
	"string_map\x18\x05 \x03(\v2\x1e.test.TestClone.StringMapEntryB\x02(\x01R\tstringMap\x128\n" +
	"\n" +
	"enum_slice\x18\x06 \x03(\x0e2\x19.test.TestClone.CloneEnumR\tenumSlice\x12*\n" +
	"\x02ts\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x02ts\x12\x16\n" +
	"\x05int32\x18\b \x01(\x05H\x00R\x05int32\x12\x18\n" +
	"\x06string\x18\t \x01(\tH\x00R\x06string\x12-\n" +
	"\x03msg\x18\n" +
	" \x01(\v2\x19.test.TestCloneSubMessageH\x00R\x03msg\x12&\n" +
	"\x03any\x18\v \x01(\v2\x14.google.protobuf.AnyR\x03any\x12>\n" +
	"\tbytes_map\x18\f \x03(\v2\x1d.test.TestClone.BytesMapEntryB\x02(\x01R\bbytesMap\x12\x1f\n" +
	"\vbytes_slice\x18\r \x03(\fR\n" +
	"bytesSlice\x12\x14\n" +
	"\x05bytes\x18\x0e \x01(\fR\x05bytes\x12:\n" +
	"\vsub_message\x18\x0f \x01(\v2\x19.test.TestCloneSubMessageR\n" +
	"subMessage\x1aX\n" +
	"\x0fMessageMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.test.TestCloneSubMessageR\x05value:\x028\x01\x1a<\n" +
	"\x0eStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rBytesMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"*\n" +
	"\tCloneEnum\x12\t\n" +
	"\x05UNSET\x10\x00\x12\b\n" +
	"\x04Val1\x10\x01\x12\b\n" +
	"\x04Val2\x10\x02B\v\n" +
	"\tprimitiveB5\n" +
	"\x16io.stackrox.proto.testZ\v./test;test\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01b\beditionsp\xe8\a"

var file_test_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_test_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_test_test_proto_goTypes = []any{
	(TestClone_CloneEnum)(0),      // 0: test.TestClone.CloneEnum
	(*TestCloneSubMessage)(nil),   // 1: test.TestCloneSubMessage
	(*TestClone)(nil),             // 2: test.TestClone
	nil,                           // 3: test.TestClone.MessageMapEntry
	nil,                           // 4: test.TestClone.StringMapEntry
	nil,                           // 5: test.TestClone.BytesMapEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 7: google.protobuf.Any
}
var file_test_test_proto_depIdxs = []int32{
	1,  // 0: test.TestClone.sub_messages:type_name -> test.TestCloneSubMessage
	3,  // 1: test.TestClone.message_map:type_name -> test.TestClone.MessageMapEntry
	4,  // 2: test.TestClone.string_map:type_name -> test.TestClone.StringMapEntry
	0,  // 3: test.TestClone.enum_slice:type_name -> test.TestClone.CloneEnum
	6,  // 4: test.TestClone.ts:type_name -> google.protobuf.Timestamp
	1,  // 5: test.TestClone.msg:type_name -> test.TestCloneSubMessage
	7,  // 6: test.TestClone.any:type_name -> google.protobuf.Any
	5,  // 7: test.TestClone.bytes_map:type_name -> test.TestClone.BytesMapEntry
	1,  // 8: test.TestClone.sub_message:type_name -> test.TestCloneSubMessage
	1,  // 9: test.TestClone.MessageMapEntry.value:type_name -> test.TestCloneSubMessage
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_test_test_proto_init() }
func file_test_test_proto_init() {
	if File_test_test_proto != nil {
		return
	}
	file_test_test_proto_msgTypes[1].OneofWrappers = []any{
		(*TestClone_Int32)(nil),
		(*TestClone_String_)(nil),
		(*TestClone_Msg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_test_proto_rawDesc), len(file_test_test_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_test_proto_goTypes,
		DependencyIndexes: file_test_test_proto_depIdxs,
		EnumInfos:         file_test_test_proto_enumTypes,
		MessageInfos:      file_test_test_proto_msgTypes,
	}.Build()
	File_test_test_proto = out.File
	file_test_test_proto_goTypes = nil
	file_test_test_proto_depIdxs = nil
}
