// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test/test.proto

package test

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestClone_CloneEnum int32

const (
	TestClone_UNSET TestClone_CloneEnum = 0
	TestClone_Val1  TestClone_CloneEnum = 1
	TestClone_Val2  TestClone_CloneEnum = 2
)

var TestClone_CloneEnum_name = map[int32]string{
	0: "UNSET",
	1: "Val1",
	2: "Val2",
}

var TestClone_CloneEnum_value = map[string]int32{
	"UNSET": 0,
	"Val1":  1,
	"Val2":  2,
}

func (x TestClone_CloneEnum) String() string {
	return proto.EnumName(TestClone_CloneEnum_name, int32(x))
}

func (TestClone_CloneEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84eb23d74a64bdab, []int{1, 0}
}

type TestCloneSubMessage struct {
	Int32                int32    `protobuf:"varint,1,opt,name=int32,proto3" json:"int32,omitempty"`
	String_              string   `protobuf:"bytes,2,opt,name=string,proto3" json:"string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCloneSubMessage) Reset()         { *m = TestCloneSubMessage{} }
func (m *TestCloneSubMessage) String() string { return proto.CompactTextString(m) }
func (*TestCloneSubMessage) ProtoMessage()    {}
func (*TestCloneSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_84eb23d74a64bdab, []int{0}
}
func (m *TestCloneSubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCloneSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCloneSubMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCloneSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCloneSubMessage.Merge(m, src)
}
func (m *TestCloneSubMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestCloneSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCloneSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestCloneSubMessage proto.InternalMessageInfo

func (m *TestCloneSubMessage) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *TestCloneSubMessage) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *TestCloneSubMessage) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestCloneSubMessage) Clone() *TestCloneSubMessage {
	if m == nil {
		return nil
	}
	cloned := new(TestCloneSubMessage)
	*cloned = *m

	return cloned
}

type TestClone struct {
	IntSlice    []int32                         `protobuf:"varint,1,rep,packed,name=int_slice,json=intSlice,proto3" json:"int_slice,omitempty"`
	StringSlice []string                        `protobuf:"bytes,2,rep,name=string_slice,json=stringSlice,proto3" json:"string_slice,omitempty"`
	SubMessages []*TestCloneSubMessage          `protobuf:"bytes,3,rep,name=sub_messages,json=subMessages,proto3" json:"sub_messages,omitempty"`
	MessageMap  map[string]*TestCloneSubMessage `protobuf:"bytes,4,rep,name=message_map,json=messageMap,proto3" json:"message_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringMap   map[string]string               `protobuf:"bytes,5,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumSlice   []TestClone_CloneEnum           `protobuf:"varint,6,rep,packed,name=enum_slice,json=enumSlice,proto3,enum=test.TestClone_CloneEnum" json:"enum_slice,omitempty"`
	Ts          *types.Timestamp                `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
	// Types that are valid to be assigned to Primitive:
	//
	//	*TestClone_Int32
	//	*TestClone_String_
	//	*TestClone_Msg
	Primitive            isTestClone_Primitive `protobuf_oneof:"primitive"`
	Any                  *types.Any            `protobuf:"bytes,11,opt,name=any,proto3" json:"any,omitempty"`
	BytesMap             map[string][]byte     `protobuf:"bytes,12,rep,name=bytes_map,json=bytesMap,proto3" json:"bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BytesSlice           [][]byte              `protobuf:"bytes,13,rep,name=bytes_slice,json=bytesSlice,proto3" json:"bytes_slice,omitempty"`
	Bytes                []byte                `protobuf:"bytes,14,opt,name=bytes,proto3" json:"bytes,omitempty"`
	SubMessage           *TestCloneSubMessage  `protobuf:"bytes,15,opt,name=sub_message,json=subMessage,proto3" json:"sub_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TestClone) Reset()         { *m = TestClone{} }
func (m *TestClone) String() string { return proto.CompactTextString(m) }
func (*TestClone) ProtoMessage()    {}
func (*TestClone) Descriptor() ([]byte, []int) {
	return fileDescriptor_84eb23d74a64bdab, []int{1}
}
func (m *TestClone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestClone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestClone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestClone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestClone.Merge(m, src)
}
func (m *TestClone) XXX_Size() int {
	return m.Size()
}
func (m *TestClone) XXX_DiscardUnknown() {
	xxx_messageInfo_TestClone.DiscardUnknown(m)
}

var xxx_messageInfo_TestClone proto.InternalMessageInfo

type isTestClone_Primitive interface {
	isTestClone_Primitive()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isTestClone_Primitive
}

type TestClone_Int32 struct {
	Int32 int32 `protobuf:"varint,8,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
}
type TestClone_String_ struct {
	String_ string `protobuf:"bytes,9,opt,name=string,proto3,oneof" json:"string,omitempty"`
}
type TestClone_Msg struct {
	Msg *TestCloneSubMessage `protobuf:"bytes,10,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
}

func (*TestClone_Int32) isTestClone_Primitive() {}
func (m *TestClone_Int32) Clone() isTestClone_Primitive {
	if m == nil {
		return nil
	}
	cloned := new(TestClone_Int32)
	*cloned = *m

	return cloned
}
func (*TestClone_String_) isTestClone_Primitive() {}
func (m *TestClone_String_) Clone() isTestClone_Primitive {
	if m == nil {
		return nil
	}
	cloned := new(TestClone_String_)
	*cloned = *m

	return cloned
}
func (*TestClone_Msg) isTestClone_Primitive() {}
func (m *TestClone_Msg) Clone() isTestClone_Primitive {
	if m == nil {
		return nil
	}
	cloned := new(TestClone_Msg)
	*cloned = *m

	cloned.Msg = m.Msg.Clone()
	return cloned
}

func (m *TestClone) GetPrimitive() isTestClone_Primitive {
	if m != nil {
		return m.Primitive
	}
	return nil
}

func (m *TestClone) GetIntSlice() []int32 {
	if m != nil {
		return m.IntSlice
	}
	return nil
}

func (m *TestClone) GetStringSlice() []string {
	if m != nil {
		return m.StringSlice
	}
	return nil
}

func (m *TestClone) GetSubMessages() []*TestCloneSubMessage {
	if m != nil {
		return m.SubMessages
	}
	return nil
}

func (m *TestClone) GetMessageMap() map[string]*TestCloneSubMessage {
	if m != nil {
		return m.MessageMap
	}
	return nil
}

func (m *TestClone) GetStringMap() map[string]string {
	if m != nil {
		return m.StringMap
	}
	return nil
}

func (m *TestClone) GetEnumSlice() []TestClone_CloneEnum {
	if m != nil {
		return m.EnumSlice
	}
	return nil
}

func (m *TestClone) GetTs() *types.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *TestClone) GetInt32() int32 {
	if x, ok := m.GetPrimitive().(*TestClone_Int32); ok {
		return x.Int32
	}
	return 0
}

func (m *TestClone) GetString_() string {
	if x, ok := m.GetPrimitive().(*TestClone_String_); ok {
		return x.String_
	}
	return ""
}

func (m *TestClone) GetMsg() *TestCloneSubMessage {
	if x, ok := m.GetPrimitive().(*TestClone_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *TestClone) GetAny() *types.Any {
	if m != nil {
		return m.Any
	}
	return nil
}

func (m *TestClone) GetBytesMap() map[string][]byte {
	if m != nil {
		return m.BytesMap
	}
	return nil
}

func (m *TestClone) GetBytesSlice() [][]byte {
	if m != nil {
		return m.BytesSlice
	}
	return nil
}

func (m *TestClone) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *TestClone) GetSubMessage() *TestCloneSubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TestClone) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TestClone_Int32)(nil),
		(*TestClone_String_)(nil),
		(*TestClone_Msg)(nil),
	}
}

func (m *TestClone) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestClone) Clone() *TestClone {
	if m == nil {
		return nil
	}
	cloned := new(TestClone)
	*cloned = *m

	if m.IntSlice != nil {
		cloned.IntSlice = make([]int32, len(m.IntSlice))
		copy(cloned.IntSlice, m.IntSlice)
	}
	if m.StringSlice != nil {
		cloned.StringSlice = make([]string, len(m.StringSlice))
		copy(cloned.StringSlice, m.StringSlice)
	}
	if m.SubMessages != nil {
		cloned.SubMessages = make([]*TestCloneSubMessage, len(m.SubMessages))
		for idx, v := range m.SubMessages {
			cloned.SubMessages[idx] = v.Clone()
		}
	}
	if m.MessageMap != nil {
		cloned.MessageMap = make(map[string]*TestCloneSubMessage, len(m.MessageMap))
		for k, v := range m.MessageMap {
			cloned.MessageMap[k] = v.Clone()
		}
	}
	if m.StringMap != nil {
		cloned.StringMap = make(map[string]string, len(m.StringMap))
		for k, v := range m.StringMap {
			cloned.StringMap[k] = v
		}
	}
	if m.EnumSlice != nil {
		cloned.EnumSlice = make([]TestClone_CloneEnum, len(m.EnumSlice))
		copy(cloned.EnumSlice, m.EnumSlice)
	}
	cloned.Ts = m.Ts.Clone()
	if m.Primitive != nil {
		cloned.Primitive = m.Primitive.Clone()
	}
	cloned.Any = m.Any.Clone()
	if m.BytesMap != nil {
		cloned.BytesMap = make(map[string][]byte, len(m.BytesMap))
		for k, v := range m.BytesMap {
			cloned.BytesMap[k] = make([]byte, len(v))
			copy(cloned.BytesMap[k], v)
		}
	}
	if m.BytesSlice != nil {
		cloned.BytesSlice = make([][]byte, len(m.BytesSlice))
		for idx, v := range m.BytesSlice {
			cloned.BytesSlice[idx] = make([]byte, len(v))
			copy(cloned.BytesSlice[idx], v)
		}
	}
	if m.Bytes != nil {
		cloned.Bytes = make([]byte, len(m.Bytes))
		copy(cloned.Bytes, m.Bytes)
	}
	cloned.SubMessage = m.SubMessage.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("test.TestClone_CloneEnum", TestClone_CloneEnum_name, TestClone_CloneEnum_value)
	proto.RegisterType((*TestCloneSubMessage)(nil), "test.TestCloneSubMessage")
	proto.RegisterType((*TestClone)(nil), "test.TestClone")
	proto.RegisterMapType((map[string][]byte)(nil), "test.TestClone.BytesMapEntry")
	proto.RegisterMapType((map[string]*TestCloneSubMessage)(nil), "test.TestClone.MessageMapEntry")
	proto.RegisterMapType((map[string]string)(nil), "test.TestClone.StringMapEntry")
}

func init() { proto.RegisterFile("test/test.proto", fileDescriptor_84eb23d74a64bdab) }

var fileDescriptor_84eb23d74a64bdab = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xb5, 0xa4, 0x28, 0xf1, 0x8e, 0x94, 0xc4, 0x6c, 0x4d, 0x50, 0x5c, 0x6a, 0xab, 0x3e, 0x14,
	0x11, 0xa8, 0x4c, 0x1d, 0x0a, 0xc1, 0x49, 0xa1, 0x75, 0x30, 0xf8, 0x92, 0x1e, 0xd6, 0x6e, 0x29,
	0xbd, 0x18, 0x29, 0x6c, 0x8d, 0x88, 0x25, 0x19, 0xef, 0x2a, 0x54, 0x7f, 0xd2, 0x2f, 0xe9, 0x37,
	0xf4, 0xd8, 0x4f, 0x28, 0xee, 0x8f, 0x94, 0xdd, 0x95, 0x54, 0xc7, 0x49, 0x9b, 0x8b, 0x98, 0x99,
	0x7d, 0xef, 0x31, 0x33, 0x6f, 0x10, 0x1c, 0x72, 0xca, 0x78, 0x4f, 0x7c, 0xfc, 0xe5, 0x2a, 0xe5,
	0x29, 0xde, 0x11, 0x71, 0xeb, 0x78, 0x9e, 0xa6, 0xf3, 0x05, 0xed, 0xc9, 0x5a, 0x98, 0x7d, 0xe9,
	0x05, 0x49, 0xae, 0x00, 0xad, 0xce, 0xf6, 0x13, 0x8f, 0x62, 0xca, 0x78, 0x10, 0x2f, 0x15, 0xa0,
	0x7b, 0x09, 0x4f, 0xa6, 0x94, 0xf1, 0xcb, 0x45, 0x9a, 0xd0, 0x49, 0x16, 0x5e, 0x51, 0xc6, 0x82,
	0x39, 0xc5, 0x4d, 0x30, 0xa3, 0x84, 0x9f, 0xf6, 0x1d, 0xcd, 0xd5, 0x3c, 0x93, 0xa8, 0x04, 0x1f,
	0xc1, 0x2e, 0xe3, 0xab, 0x28, 0x99, 0x3b, 0xba, 0xab, 0x79, 0x88, 0x14, 0x59, 0xf7, 0xfb, 0x1e,
	0xa0, 0x4a, 0x05, 0x3f, 0x05, 0x14, 0x25, 0x7c, 0xc6, 0x16, 0xd1, 0x35, 0x75, 0x34, 0xd7, 0xf0,
	0x4c, 0x52, 0x8f, 0x12, 0x3e, 0x11, 0x39, 0x7e, 0x0e, 0xb6, 0x22, 0x15, 0xef, 0xba, 0x6b, 0x78,
	0x88, 0x58, 0xaa, 0xa6, 0x20, 0x17, 0x60, 0xb3, 0x2c, 0x9c, 0xc5, 0xaa, 0x15, 0xe6, 0x18, 0xae,
	0xe1, 0x59, 0xfd, 0x63, 0x5f, 0xce, 0xfd, 0x40, 0xb3, 0xc4, 0x62, 0x55, 0xcc, 0xf0, 0x5b, 0xb0,
	0x0a, 0xe6, 0x2c, 0x0e, 0x96, 0xce, 0x8e, 0x24, 0x77, 0xb6, 0xc8, 0x7e, 0x01, 0xbf, 0x0a, 0x96,
	0xa3, 0x84, 0xaf, 0x72, 0x02, 0x71, 0x55, 0xc0, 0x6f, 0x00, 0x8a, 0x16, 0x85, 0x80, 0x29, 0x05,
	0xda, 0xdb, 0x02, 0x13, 0x89, 0xa8, 0xf8, 0x88, 0x95, 0x39, 0x3e, 0x03, 0xa0, 0x49, 0x16, 0x17,
	0xf3, 0xed, 0xba, 0x86, 0x77, 0x70, 0xaf, 0x79, 0x5f, 0x7e, 0x47, 0x49, 0x16, 0x13, 0x24, 0xc0,
	0x6a, 0xf0, 0x13, 0xd0, 0x39, 0x73, 0xf6, 0x5c, 0xcd, 0xb3, 0xfa, 0x2d, 0x5f, 0x39, 0xe7, 0x97,
	0xce, 0xf9, 0xd3, 0xd2, 0x39, 0xa2, 0x73, 0x86, 0x8f, 0x4a, 0x83, 0xea, 0xc2, 0xa0, 0x71, 0xad,
	0xb4, 0xc8, 0xa9, 0x2c, 0x42, 0xc2, 0xa2, 0x71, 0xad, 0x34, 0x09, 0xbf, 0x04, 0x23, 0x66, 0x73,
	0x07, 0xa4, 0xfc, 0xbf, 0xb7, 0x39, 0xae, 0x11, 0x81, 0xc3, 0x2f, 0xc0, 0x08, 0x92, 0xdc, 0xb1,
	0x24, 0xbc, 0x79, 0xaf, 0x9b, 0x77, 0x49, 0x4e, 0x04, 0x00, 0x0f, 0x00, 0x85, 0x39, 0xa7, 0x4c,
	0x2e, 0xcb, 0x96, 0xcb, 0x7a, 0xb6, 0x3d, 0xed, 0x50, 0x00, 0xaa, 0x5d, 0xd5, 0xc3, 0x22, 0xc5,
	0x1d, 0xb0, 0x14, 0x57, 0xed, 0x6a, 0xdf, 0x35, 0x3c, 0x9b, 0x80, 0x2c, 0xa9, 0x8d, 0x34, 0xc1,
	0x94, 0x99, 0x73, 0xe0, 0x6a, 0x9e, 0x4d, 0x54, 0x82, 0x07, 0x60, 0x6d, 0x1c, 0x88, 0x73, 0xf8,
	0xc8, 0x44, 0x04, 0xfe, 0xde, 0x47, 0xeb, 0x13, 0x1c, 0x6e, 0x79, 0x8f, 0x1b, 0x60, 0xdc, 0xd0,
	0x5c, 0x5e, 0x3a, 0x22, 0x22, 0xc4, 0x3d, 0x30, 0x6f, 0x83, 0x45, 0x46, 0xe5, 0x99, 0xff, 0x57,
	0x5a, 0xe1, 0x06, 0xfa, 0x99, 0xd6, 0xba, 0x80, 0x83, 0xbb, 0x47, 0xf1, 0x80, 0x70, 0x73, 0x53,
	0x18, 0x6d, 0xb2, 0xcf, 0x61, 0xff, 0xce, 0x96, 0x1e, 0x23, 0xdb, 0x1b, 0xe4, 0xee, 0x09, 0xa0,
	0xea, 0xa0, 0x30, 0x02, 0xf3, 0xc3, 0xfb, 0xc9, 0x68, 0xda, 0xa8, 0xe1, 0x3a, 0xec, 0x7c, 0x0c,
	0x16, 0xaf, 0x1a, 0x5a, 0x11, 0xf5, 0x1b, 0xfa, 0xd0, 0x02, 0xb4, 0x5c, 0x45, 0x71, 0xc4, 0xa3,
	0x5b, 0x3a, 0x7c, 0xfd, 0x63, 0xdd, 0xd6, 0x7e, 0xae, 0xdb, 0xda, 0xaf, 0x75, 0x5b, 0xfb, 0xf6,
	0xbb, 0x5d, 0x83, 0xa3, 0x28, 0xf5, 0x19, 0x0f, 0xae, 0x6f, 0x56, 0xe9, 0x57, 0xe5, 0xb6, 0x1c,
	0xfe, 0xb3, 0xe5, 0xcb, 0xff, 0xce, 0xb9, 0xf8, 0x84, 0xbb, 0xf2, 0xe1, 0xf4, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x31, 0x0f, 0x16, 0x09, 0x90, 0x04, 0x00, 0x00,
}

func (m *TestCloneSubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCloneSubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCloneSubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.String_) > 0 {
		i -= len(m.String_)
		copy(dAtA[i:], m.String_)
		i = encodeVarintTest(dAtA, i, uint64(len(m.String_)))
		i--
		dAtA[i] = 0x12
	}
	if m.Int32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Int32))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestClone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestClone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestClone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SubMessage != nil {
		{
			size, err := m.SubMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.BytesSlice) > 0 {
		for iNdEx := len(m.BytesSlice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BytesSlice[iNdEx])
			copy(dAtA[i:], m.BytesSlice[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.BytesSlice[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.BytesMap) > 0 {
		for k := range m.BytesMap {
			v := m.BytesMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintTest(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Any != nil {
		{
			size, err := m.Any.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Primitive != nil {
		{
			size := m.Primitive.Size()
			i -= size
			if _, err := m.Primitive.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EnumSlice) > 0 {
		dAtA5 := make([]byte, len(m.EnumSlice)*10)
		var j4 int
		for _, num := range m.EnumSlice {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTest(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StringMap) > 0 {
		for k := range m.StringMap {
			v := m.StringMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MessageMap) > 0 {
		for k := range m.MessageMap {
			v := m.MessageMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SubMessages) > 0 {
		for iNdEx := len(m.SubMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StringSlice) > 0 {
		for iNdEx := len(m.StringSlice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StringSlice[iNdEx])
			copy(dAtA[i:], m.StringSlice[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.StringSlice[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IntSlice) > 0 {
		dAtA8 := make([]byte, len(m.IntSlice)*10)
		var j7 int
		for _, num1 := range m.IntSlice {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTest(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestClone_Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestClone_Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTest(dAtA, i, uint64(m.Int32))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *TestClone_String_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestClone_String_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = encodeVarintTest(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *TestClone_Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestClone_Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestCloneSubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != 0 {
		n += 1 + sovTest(uint64(m.Int32))
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestClone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IntSlice) > 0 {
		l = 0
		for _, e := range m.IntSlice {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	if len(m.StringSlice) > 0 {
		for _, s := range m.StringSlice {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.SubMessages) > 0 {
		for _, e := range m.SubMessages {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.MessageMap) > 0 {
		for k, v := range m.MessageMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.EnumSlice) > 0 {
		l = 0
		for _, e := range m.EnumSlice {
			l += sovTest(uint64(e))
		}
		n += 1 + sovTest(uint64(l)) + l
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Primitive != nil {
		n += m.Primitive.Size()
	}
	if m.Any != nil {
		l = m.Any.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.BytesMap) > 0 {
		for k, v := range m.BytesMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTest(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTest(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.BytesSlice) > 0 {
		for _, b := range m.BytesSlice {
			l = len(b)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.SubMessage != nil {
		l = m.SubMessage.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestClone_Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTest(uint64(m.Int32))
	return n
}
func (m *TestClone_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovTest(uint64(l))
	return n
}
func (m *TestClone_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestCloneSubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCloneSubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCloneSubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestClone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestClone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestClone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntSlice = append(m.IntSlice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntSlice) == 0 {
					m.IntSlice = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntSlice = append(m.IntSlice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntSlice", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSlice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSlice = append(m.StringSlice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubMessages = append(m.SubMessages, &TestCloneSubMessage{})
			if err := m.SubMessages[len(m.SubMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageMap == nil {
				m.MessageMap = make(map[string]*TestCloneSubMessage)
			}
			var mapkey string
			var mapvalue *TestCloneSubMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TestCloneSubMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MessageMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringMap == nil {
				m.StringMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StringMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v TestClone_CloneEnum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= TestClone_CloneEnum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnumSlice = append(m.EnumSlice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnumSlice) == 0 {
					m.EnumSlice = make([]TestClone_CloneEnum, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v TestClone_CloneEnum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= TestClone_CloneEnum(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnumSlice = append(m.EnumSlice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumSlice", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &types.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Primitive = &TestClone_Int32{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primitive = &TestClone_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TestCloneSubMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Primitive = &TestClone_Msg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Any == nil {
				m.Any = &types.Any{}
			}
			if err := m.Any.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BytesMap == nil {
				m.BytesMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTest
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BytesMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSlice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesSlice = append(m.BytesSlice, make([]byte, postIndex-iNdEx))
			copy(m.BytesSlice[len(m.BytesSlice)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubMessage == nil {
				m.SubMessage = &TestCloneSubMessage{}
			}
			if err := m.SubMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
