// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package test

import (
	anypb "google.golang.org/protobuf/types/known/anypb"
)

import (
	"iter"
	"time"
)

// ImmutableTestCloneSubMessage is an immutable interface for TestCloneSubMessage
type ImmutableTestCloneSubMessage interface {
	GetInt32() int32
	GetString_() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TestCloneSubMessage
}

// Verify that TestCloneSubMessage implements ImmutableTestCloneSubMessage
var _ ImmutableTestCloneSubMessage = (*TestCloneSubMessage)(nil)

// ImmutableTestClone is an immutable interface for TestClone
type ImmutableTestClone interface {
	GetImmutableIntSlice() iter.Seq[int32]
	GetImmutableStringSlice() iter.Seq[string]
	GetImmutableSubMessages() iter.Seq[ImmutableTestCloneSubMessage]
	GetImmutableMessageMap() iter.Seq2[string, ImmutableTestCloneSubMessage]
	GetImmutableStringMap() iter.Seq2[string, string]
	GetImmutableEnumSlice() iter.Seq[TestClone_CloneEnum]
	GetImmutableTs() time.Time
	GetInt32() int32
	GetString_() string
	GetImmutableMsg() ImmutableTestCloneSubMessage
	GetAny() *anypb.Any
	GetImmutableBytesMap() iter.Seq2[string, []byte]
	GetImmutableBytesSlice() iter.Seq[[]byte]
	GetBytes() []byte
	GetImmutableSubMessage() ImmutableTestCloneSubMessage
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TestClone
}

// GetImmutableIntSlice implements ImmutableTestClone
func (m *TestClone) GetImmutableIntSlice() iter.Seq[int32] {
	return func(yield func(int32) bool) {
		if m == nil || m.IntSlice == nil {
			return
		}
		for _, v := range m.IntSlice {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableStringSlice implements ImmutableTestClone
func (m *TestClone) GetImmutableStringSlice() iter.Seq[string] {
	return func(yield func(string) bool) {
		if m == nil || m.StringSlice == nil {
			return
		}
		for _, v := range m.StringSlice {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableSubMessages implements ImmutableTestClone
func (m *TestClone) GetImmutableSubMessages() iter.Seq[ImmutableTestCloneSubMessage] {
	return func(yield func(ImmutableTestCloneSubMessage) bool) {
		if m == nil || m.SubMessages == nil {
			return
		}
		for _, v := range m.SubMessages {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableMessageMap implements ImmutableTestClone
func (m *TestClone) GetImmutableMessageMap() iter.Seq2[string, ImmutableTestCloneSubMessage] {
	return func(yield func(string, ImmutableTestCloneSubMessage) bool) {
		if m == nil || m.MessageMap == nil {
			return
		}
		for k, v := range m.MessageMap {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableStringMap implements ImmutableTestClone
func (m *TestClone) GetImmutableStringMap() iter.Seq2[string, string] {
	return func(yield func(string, string) bool) {
		if m == nil || m.StringMap == nil {
			return
		}
		for k, v := range m.StringMap {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableEnumSlice implements ImmutableTestClone
func (m *TestClone) GetImmutableEnumSlice() iter.Seq[TestClone_CloneEnum] {
	return func(yield func(TestClone_CloneEnum) bool) {
		if m == nil || m.EnumSlice == nil {
			return
		}
		for _, v := range m.EnumSlice {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableTs implements ImmutableTestClone
func (m *TestClone) GetImmutableTs() time.Time {
	if m == nil || m.Ts == nil {
		return time.Time{}
	}
	return m.Ts.AsTime()
}

// GetImmutableMsg implements ImmutableTestClone
func (m *TestClone) GetImmutableMsg() ImmutableTestCloneSubMessage {
	return m.GetMsg()
}

// GetImmutableBytesMap implements ImmutableTestClone
func (m *TestClone) GetImmutableBytesMap() iter.Seq2[string, []byte] {
	return func(yield func(string, []byte) bool) {
		if m == nil || m.BytesMap == nil {
			return
		}
		for k, v := range m.BytesMap {
			if !yield(k, v) {
				return
			}
		}
	}
}

// GetImmutableBytesSlice implements ImmutableTestClone
func (m *TestClone) GetImmutableBytesSlice() iter.Seq[[]byte] {
	return func(yield func([]byte) bool) {
		if m == nil || m.BytesSlice == nil {
			return
		}
		for _, v := range m.BytesSlice {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableSubMessage implements ImmutableTestClone
func (m *TestClone) GetImmutableSubMessage() ImmutableTestCloneSubMessage {
	return m.GetSubMessage()
}

// Verify that TestClone implements ImmutableTestClone
var _ ImmutableTestClone = (*TestClone)(nil)
