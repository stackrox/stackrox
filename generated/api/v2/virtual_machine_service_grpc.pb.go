// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/v2/virtual_machine_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualMachineService_GetVirtualMachine_FullMethodName   = "/v2.VirtualMachineService/GetVirtualMachine"
	VirtualMachineService_ListVirtualMachines_FullMethodName = "/v2.VirtualMachineService/ListVirtualMachines"
)

// VirtualMachineServiceClient is the client API for VirtualMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineServiceClient interface {
	GetVirtualMachine(ctx context.Context, in *GetVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error)
}

type virtualMachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineServiceClient(cc grpc.ClientConnInterface) VirtualMachineServiceClient {
	return &virtualMachineServiceClient{cc}
}

func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, in *GetVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, VirtualMachineService_GetVirtualMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVirtualMachinesResponse)
	err := c.cc.Invoke(ctx, VirtualMachineService_ListVirtualMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServiceServer is the server API for VirtualMachineService service.
// All implementations should embed UnimplementedVirtualMachineServiceServer
// for forward compatibility.
type VirtualMachineServiceServer interface {
	GetVirtualMachine(context.Context, *GetVirtualMachineRequest) (*VirtualMachine, error)
	ListVirtualMachines(context.Context, *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error)
}

// UnimplementedVirtualMachineServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualMachineServiceServer struct{}

func (UnimplementedVirtualMachineServiceServer) GetVirtualMachine(context.Context, *GetVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) ListVirtualMachines(context.Context, *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachines not implemented")
}
func (UnimplementedVirtualMachineServiceServer) testEmbeddedByValue() {}

// UnsafeVirtualMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineServiceServer will
// result in compilation errors.
type UnsafeVirtualMachineServiceServer interface {
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

func RegisterVirtualMachineServiceServer(s grpc.ServiceRegistrar, srv VirtualMachineServiceServer) {
	// If the following call pancis, it indicates UnimplementedVirtualMachineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualMachineService_ServiceDesc, srv)
}

func _VirtualMachineService_GetVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineService_GetVirtualMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, req.(*GetVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ListVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineService_ListVirtualMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, req.(*ListVirtualMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachineService_ServiceDesc is the grpc.ServiceDesc for VirtualMachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.VirtualMachineService",
	HandlerType: (*VirtualMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVirtualMachine",
			Handler:    _VirtualMachineService_GetVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachines",
			Handler:    _VirtualMachineService_ListVirtualMachines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/virtual_machine_service.proto",
}
