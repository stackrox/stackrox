// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_common.proto

package v2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceRule struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RuleType             string                `protobuf:"bytes,3,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	Severity             string                `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
	Standard             string                `protobuf:"bytes,5,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string                `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	Title                string                `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Rationale            string                `protobuf:"bytes,9,opt,name=rationale,proto3" json:"rationale,omitempty"`
	Fixes                []*ComplianceRule_Fix `protobuf:"bytes,10,rep,name=fixes,proto3" json:"fixes,omitempty"`
	Id                   string                `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	RuleId               string                `protobuf:"bytes,12,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ParentRule           string                `protobuf:"bytes,13,opt,name=parent_rule,json=parentRule,proto3" json:"parent_rule,omitempty"`
	Instructions         string                `protobuf:"bytes,14,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Warning              string                `protobuf:"bytes,15,opt,name=warning,proto3" json:"warning,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ComplianceRule) Reset()         { *m = ComplianceRule{} }
func (m *ComplianceRule) String() string { return proto.CompactTextString(m) }
func (*ComplianceRule) ProtoMessage()    {}
func (*ComplianceRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{0}
}
func (m *ComplianceRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRule.Merge(m, src)
}
func (m *ComplianceRule) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRule.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRule proto.InternalMessageInfo

func (m *ComplianceRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ComplianceRule) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *ComplianceRule) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *ComplianceRule) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceRule) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceRule) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ComplianceRule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceRule) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceRule) GetFixes() []*ComplianceRule_Fix {
	if m != nil {
		return m.Fixes
	}
	return nil
}

func (m *ComplianceRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceRule) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *ComplianceRule) GetParentRule() string {
	if m != nil {
		return m.ParentRule
	}
	return ""
}

func (m *ComplianceRule) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceRule) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *ComplianceRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRule) Clone() *ComplianceRule {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRule)
	*cloned = *m

	if m.Fixes != nil {
		cloned.Fixes = make([]*ComplianceRule_Fix, len(m.Fixes))
		for idx, v := range m.Fixes {
			cloned.Fixes[idx] = v.Clone()
		}
	}
	return cloned
}

type ComplianceRule_Fix struct {
	Platform             string   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Disruption           string   `protobuf:"bytes,2,opt,name=disruption,proto3" json:"disruption,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceRule_Fix) Reset()         { *m = ComplianceRule_Fix{} }
func (m *ComplianceRule_Fix) String() string { return proto.CompactTextString(m) }
func (*ComplianceRule_Fix) ProtoMessage()    {}
func (*ComplianceRule_Fix) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{0, 0}
}
func (m *ComplianceRule_Fix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRule_Fix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRule_Fix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRule_Fix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRule_Fix.Merge(m, src)
}
func (m *ComplianceRule_Fix) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRule_Fix) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRule_Fix.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRule_Fix proto.InternalMessageInfo

func (m *ComplianceRule_Fix) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ComplianceRule_Fix) GetDisruption() string {
	if m != nil {
		return m.Disruption
	}
	return ""
}

func (m *ComplianceRule_Fix) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRule_Fix) Clone() *ComplianceRule_Fix {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRule_Fix)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*ComplianceRule)(nil), "v2.ComplianceRule")
	proto.RegisterType((*ComplianceRule_Fix)(nil), "v2.ComplianceRule.Fix")
}

func init() { proto.RegisterFile("api/v2/compliance_common.proto", fileDescriptor_743ccc62026cffa2) }

var fileDescriptor_743ccc62026cffa2 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xbb, 0x8e, 0xd4, 0x30,
	0x14, 0x86, 0x49, 0x32, 0xd7, 0x93, 0x65, 0x40, 0x16, 0x82, 0xa3, 0x05, 0x85, 0xd1, 0x56, 0x5b,
	0x20, 0x8f, 0x14, 0x0a, 0x0a, 0x2a, 0x40, 0x5a, 0x09, 0xca, 0x11, 0x15, 0xcd, 0xc8, 0xc4, 0x5e,
	0x74, 0x44, 0x62, 0x5b, 0x8e, 0x27, 0x64, 0xde, 0x84, 0x47, 0xa2, 0xe4, 0x11, 0xd0, 0xd0, 0xf0,
	0x18, 0x28, 0x76, 0xf6, 0x32, 0x9d, 0xff, 0xef, 0xb3, 0xa2, 0x93, 0xdf, 0x07, 0x0a, 0x61, 0x69,
	0xd3, 0x95, 0x9b, 0xca, 0x34, 0xb6, 0x26, 0xa1, 0x2b, 0xb5, 0xab, 0x4c, 0xd3, 0x18, 0xcd, 0xad,
	0x33, 0xde, 0xb0, 0xb4, 0x2b, 0x2f, 0xfe, 0x65, 0xb0, 0xfa, 0x70, 0xeb, 0xb7, 0xfb, 0x5a, 0x31,
	0x06, 0x13, 0x2d, 0x1a, 0x85, 0xc9, 0x3a, 0xb9, 0x5c, 0x6e, 0xc3, 0x99, 0x3d, 0x87, 0xa5, 0xdb,
	0xd7, 0x6a, 0xe7, 0x0f, 0x56, 0x61, 0x16, 0xc4, 0x62, 0x00, 0x9f, 0x0f, 0x56, 0xb1, 0x73, 0x58,
	0xb4, 0xaa, 0x53, 0x8e, 0xfc, 0x01, 0x27, 0xd1, 0xdd, 0xe4, 0xe0, 0xbc, 0xd0, 0x52, 0x38, 0x89,
	0xd3, 0xd1, 0x8d, 0x99, 0x21, 0xcc, 0x2b, 0xa3, 0xbd, 0x33, 0x35, 0xce, 0x82, 0xba, 0x89, 0xec,
	0x09, 0x4c, 0x3d, 0xf9, 0x5a, 0xe1, 0x3c, 0xf0, 0x18, 0xd8, 0x1a, 0x72, 0xa9, 0xda, 0xca, 0x91,
	0xf5, 0x64, 0x34, 0x2e, 0x82, 0xbb, 0x8f, 0xd8, 0x0b, 0x58, 0x3a, 0x31, 0x9c, 0x44, 0xad, 0x70,
	0x19, 0xfc, 0x1d, 0x60, 0xaf, 0x60, 0x7a, 0x4d, 0xbd, 0x6a, 0x11, 0xd6, 0xd9, 0x65, 0x5e, 0x3e,
	0xe5, 0x5d, 0xc9, 0x4f, 0xff, 0x9d, 0x5f, 0x51, 0xbf, 0x8d, 0x97, 0xd8, 0x0a, 0x52, 0x92, 0x98,
	0x87, 0x8f, 0xa4, 0x24, 0xd9, 0x33, 0x98, 0x87, 0x0a, 0x48, 0xe2, 0x59, 0x80, 0xb3, 0x21, 0x7e,
	0x94, 0xec, 0x25, 0xe4, 0x56, 0x38, 0xa5, 0xfd, 0x6e, 0x00, 0xf8, 0x30, 0x48, 0x88, 0x28, 0x14,
	0x7a, 0x01, 0x67, 0xa4, 0x5b, 0xef, 0xf6, 0xd5, 0x30, 0x49, 0x8b, 0xab, 0x70, 0xe3, 0x84, 0x0d,
	0x5d, 0xfc, 0x10, 0x4e, 0x93, 0xfe, 0x86, 0x8f, 0x62, 0x17, 0x63, 0x3c, 0x7f, 0x07, 0xd9, 0x15,
	0xf5, 0x43, 0x91, 0xb6, 0x16, 0xfe, 0xda, 0xb8, 0x66, 0x7c, 0x99, 0xdb, 0xcc, 0x0a, 0x00, 0x49,
	0xad, 0xdb, 0xc7, 0x5e, 0xd2, 0x38, 0xc0, 0x1d, 0xf9, 0x34, 0x59, 0xa4, 0x8f, 0xb3, 0xf7, 0x6f,
	0x7e, 0x1d, 0x8b, 0xe4, 0xf7, 0xb1, 0x48, 0xfe, 0x1c, 0x8b, 0xe4, 0xe7, 0xdf, 0xe2, 0x01, 0x20,
	0x19, 0xde, 0x7a, 0x51, 0x7d, 0x77, 0xa6, 0x8f, 0x3b, 0xc1, 0x85, 0x25, 0xde, 0x95, 0x5f, 0x72,
	0xbe, 0x89, 0xcb, 0xf3, 0xb6, 0x2b, 0xbf, 0xce, 0x82, 0x7a, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0x91, 0x19, 0x97, 0x00, 0x50, 0x02, 0x00, 0x00,
}

func (m *ComplianceRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ParentRule) > 0 {
		i -= len(m.ParentRule)
		copy(dAtA[i:], m.ParentRule)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ParentRule)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RuleId) > 0 {
		i -= len(m.RuleId)
		copy(dAtA[i:], m.RuleId)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.RuleId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Fixes) > 0 {
		for iNdEx := len(m.Fixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuleType) > 0 {
		i -= len(m.RuleType)
		copy(dAtA[i:], m.RuleType)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.RuleType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceRule_Fix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRule_Fix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRule_Fix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Disruption) > 0 {
		i -= len(m.Disruption)
		copy(dAtA[i:], m.Disruption)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Disruption)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.RuleType)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if len(m.Fixes) > 0 {
		for _, e := range m.Fixes {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.RuleId)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.ParentRule)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceRule_Fix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Disruption)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceCommon(x uint64) (n int) {
	return sovComplianceCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixes = append(m.Fixes, &ComplianceRule_Fix{})
			if err := m.Fixes[len(m.Fixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceRule_Fix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disruption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disruption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceCommon = fmt.Errorf("proto: unexpected end of group")
)
