// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_common.proto

package v2

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceCheckStatus int32

const (
	ComplianceCheckStatus_UNSET_CHECK_STATUS ComplianceCheckStatus = 0
	ComplianceCheckStatus_PASS               ComplianceCheckStatus = 1
	ComplianceCheckStatus_FAIL               ComplianceCheckStatus = 2
	ComplianceCheckStatus_ERROR              ComplianceCheckStatus = 3
	ComplianceCheckStatus_INFO               ComplianceCheckStatus = 4
	ComplianceCheckStatus_MANUAL             ComplianceCheckStatus = 5
	ComplianceCheckStatus_NOT_APPLICABLE     ComplianceCheckStatus = 6
	ComplianceCheckStatus_INCONSISTENT       ComplianceCheckStatus = 7
)

var ComplianceCheckStatus_name = map[int32]string{
	0: "UNSET_CHECK_STATUS",
	1: "PASS",
	2: "FAIL",
	3: "ERROR",
	4: "INFO",
	5: "MANUAL",
	6: "NOT_APPLICABLE",
	7: "INCONSISTENT",
}

var ComplianceCheckStatus_value = map[string]int32{
	"UNSET_CHECK_STATUS": 0,
	"PASS":               1,
	"FAIL":               2,
	"ERROR":              3,
	"INFO":               4,
	"MANUAL":             5,
	"NOT_APPLICABLE":     6,
	"INCONSISTENT":       7,
}

func (x ComplianceCheckStatus) String() string {
	return proto.EnumName(ComplianceCheckStatus_name, int32(x))
}

func (ComplianceCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{0}
}

type ComplianceRule struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RuleType             string                `protobuf:"bytes,3,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	Severity             string                `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
	Standard             string                `protobuf:"bytes,5,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string                `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	Title                string                `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Rationale            string                `protobuf:"bytes,9,opt,name=rationale,proto3" json:"rationale,omitempty"`
	Fixes                []*ComplianceRule_Fix `protobuf:"bytes,10,rep,name=fixes,proto3" json:"fixes,omitempty"`
	Id                   string                `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	RuleId               string                `protobuf:"bytes,12,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ParentRule           string                `protobuf:"bytes,13,opt,name=parent_rule,json=parentRule,proto3" json:"parent_rule,omitempty"`
	Instructions         string                `protobuf:"bytes,14,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Warning              string                `protobuf:"bytes,15,opt,name=warning,proto3" json:"warning,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ComplianceRule) Reset()         { *m = ComplianceRule{} }
func (m *ComplianceRule) String() string { return proto.CompactTextString(m) }
func (*ComplianceRule) ProtoMessage()    {}
func (*ComplianceRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{0}
}
func (m *ComplianceRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRule.Merge(m, src)
}
func (m *ComplianceRule) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRule.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRule proto.InternalMessageInfo

func (m *ComplianceRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ComplianceRule) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *ComplianceRule) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *ComplianceRule) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceRule) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceRule) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ComplianceRule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceRule) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceRule) GetFixes() []*ComplianceRule_Fix {
	if m != nil {
		return m.Fixes
	}
	return nil
}

func (m *ComplianceRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceRule) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *ComplianceRule) GetParentRule() string {
	if m != nil {
		return m.ParentRule
	}
	return ""
}

func (m *ComplianceRule) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceRule) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *ComplianceRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRule) Clone() *ComplianceRule {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRule)
	*cloned = *m

	if m.Fixes != nil {
		cloned.Fixes = make([]*ComplianceRule_Fix, len(m.Fixes))
		for idx, v := range m.Fixes {
			cloned.Fixes[idx] = v.Clone()
		}
	}
	return cloned
}

type ComplianceRule_Fix struct {
	Platform             string   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Disruption           string   `protobuf:"bytes,2,opt,name=disruption,proto3" json:"disruption,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceRule_Fix) Reset()         { *m = ComplianceRule_Fix{} }
func (m *ComplianceRule_Fix) String() string { return proto.CompactTextString(m) }
func (*ComplianceRule_Fix) ProtoMessage()    {}
func (*ComplianceRule_Fix) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{0, 0}
}
func (m *ComplianceRule_Fix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRule_Fix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRule_Fix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRule_Fix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRule_Fix.Merge(m, src)
}
func (m *ComplianceRule_Fix) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRule_Fix) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRule_Fix.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRule_Fix proto.InternalMessageInfo

func (m *ComplianceRule_Fix) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ComplianceRule_Fix) GetDisruption() string {
	if m != nil {
		return m.Disruption
	}
	return ""
}

func (m *ComplianceRule_Fix) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRule_Fix) Clone() *ComplianceRule_Fix {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRule_Fix)
	*cloned = *m

	return cloned
}

type ComplianceScanCluster struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName          string   `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceScanCluster) Reset()         { *m = ComplianceScanCluster{} }
func (m *ComplianceScanCluster) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanCluster) ProtoMessage()    {}
func (*ComplianceScanCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{1}
}
func (m *ComplianceScanCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanCluster.Merge(m, src)
}
func (m *ComplianceScanCluster) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanCluster.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanCluster proto.InternalMessageInfo

func (m *ComplianceScanCluster) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceScanCluster) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ComplianceScanCluster) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanCluster) Clone() *ComplianceScanCluster {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanCluster)
	*cloned = *m

	return cloned
}

// Group the number of occurrences by status
type ComplianceCheckStatusCount struct {
	Count                int32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Status               ComplianceCheckStatus `protobuf:"varint,2,opt,name=status,proto3,enum=v2.ComplianceCheckStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ComplianceCheckStatusCount) Reset()         { *m = ComplianceCheckStatusCount{} }
func (m *ComplianceCheckStatusCount) String() string { return proto.CompactTextString(m) }
func (*ComplianceCheckStatusCount) ProtoMessage()    {}
func (*ComplianceCheckStatusCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{2}
}
func (m *ComplianceCheckStatusCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceCheckStatusCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceCheckStatusCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceCheckStatusCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceCheckStatusCount.Merge(m, src)
}
func (m *ComplianceCheckStatusCount) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceCheckStatusCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceCheckStatusCount.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceCheckStatusCount proto.InternalMessageInfo

func (m *ComplianceCheckStatusCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ComplianceCheckStatusCount) GetStatus() ComplianceCheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceCheckStatus_UNSET_CHECK_STATUS
}

func (m *ComplianceCheckStatusCount) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceCheckStatusCount) Clone() *ComplianceCheckStatusCount {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceCheckStatusCount)
	*cloned = *m

	return cloned
}

// Group the number of occurrences by status
type ComplianceCheckResultStatusCount struct {
	CheckName            string                        `protobuf:"bytes,1,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Rationale            string                        `protobuf:"bytes,2,opt,name=rationale,proto3" json:"rationale,omitempty"`
	RuleName             string                        `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	CheckStats           []*ComplianceCheckStatusCount `protobuf:"bytes,4,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComplianceCheckResultStatusCount) Reset()         { *m = ComplianceCheckResultStatusCount{} }
func (m *ComplianceCheckResultStatusCount) String() string { return proto.CompactTextString(m) }
func (*ComplianceCheckResultStatusCount) ProtoMessage()    {}
func (*ComplianceCheckResultStatusCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{3}
}
func (m *ComplianceCheckResultStatusCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceCheckResultStatusCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceCheckResultStatusCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceCheckResultStatusCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceCheckResultStatusCount.Merge(m, src)
}
func (m *ComplianceCheckResultStatusCount) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceCheckResultStatusCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceCheckResultStatusCount.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceCheckResultStatusCount proto.InternalMessageInfo

func (m *ComplianceCheckResultStatusCount) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceCheckResultStatusCount) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceCheckResultStatusCount) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *ComplianceCheckResultStatusCount) GetCheckStats() []*ComplianceCheckStatusCount {
	if m != nil {
		return m.CheckStats
	}
	return nil
}

func (m *ComplianceCheckResultStatusCount) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceCheckResultStatusCount) Clone() *ComplianceCheckResultStatusCount {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceCheckResultStatusCount)
	*cloned = *m

	if m.CheckStats != nil {
		cloned.CheckStats = make([]*ComplianceCheckStatusCount, len(m.CheckStats))
		for idx, v := range m.CheckStats {
			cloned.CheckStats[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceProfileResults provides scan stats overview based on profile
type ListComplianceProfileResults struct {
	ProfileResults       []*ComplianceCheckResultStatusCount `protobuf:"bytes,1,rep,name=profile_results,json=profileResults,proto3" json:"profile_results,omitempty"`
	ProfileName          string                              `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	TotalCount           int32                               `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ListComplianceProfileResults) Reset()         { *m = ListComplianceProfileResults{} }
func (m *ListComplianceProfileResults) String() string { return proto.CompactTextString(m) }
func (*ListComplianceProfileResults) ProtoMessage()    {}
func (*ListComplianceProfileResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{4}
}
func (m *ListComplianceProfileResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceProfileResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceProfileResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceProfileResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceProfileResults.Merge(m, src)
}
func (m *ListComplianceProfileResults) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceProfileResults) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceProfileResults.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceProfileResults proto.InternalMessageInfo

func (m *ListComplianceProfileResults) GetProfileResults() []*ComplianceCheckResultStatusCount {
	if m != nil {
		return m.ProfileResults
	}
	return nil
}

func (m *ListComplianceProfileResults) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ListComplianceProfileResults) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceProfileResults) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceProfileResults) Clone() *ListComplianceProfileResults {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceProfileResults)
	*cloned = *m

	if m.ProfileResults != nil {
		cloned.ProfileResults = make([]*ComplianceCheckResultStatusCount, len(m.ProfileResults))
		for idx, v := range m.ProfileResults {
			cloned.ProfileResults[idx] = v.Clone()
		}
	}
	return cloned
}

// ComplianceClusterOverallStats provides overall stats for cluster
type ComplianceClusterOverallStats struct {
	Cluster              *ComplianceScanCluster        `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	CheckStats           []*ComplianceCheckStatusCount `protobuf:"bytes,2,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	ClusterErrors        []string                      `protobuf:"bytes,3,rep,name=cluster_errors,json=clusterErrors,proto3" json:"cluster_errors,omitempty"`
	LastScanTime         *types.Timestamp              `protobuf:"bytes,4,opt,name=last_scan_time,json=lastScanTime,proto3" json:"last_scan_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComplianceClusterOverallStats) Reset()         { *m = ComplianceClusterOverallStats{} }
func (m *ComplianceClusterOverallStats) String() string { return proto.CompactTextString(m) }
func (*ComplianceClusterOverallStats) ProtoMessage()    {}
func (*ComplianceClusterOverallStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{5}
}
func (m *ComplianceClusterOverallStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceClusterOverallStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceClusterOverallStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceClusterOverallStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceClusterOverallStats.Merge(m, src)
}
func (m *ComplianceClusterOverallStats) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceClusterOverallStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceClusterOverallStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceClusterOverallStats proto.InternalMessageInfo

func (m *ComplianceClusterOverallStats) GetCluster() *ComplianceScanCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ComplianceClusterOverallStats) GetCheckStats() []*ComplianceCheckStatusCount {
	if m != nil {
		return m.CheckStats
	}
	return nil
}

func (m *ComplianceClusterOverallStats) GetClusterErrors() []string {
	if m != nil {
		return m.ClusterErrors
	}
	return nil
}

func (m *ComplianceClusterOverallStats) GetLastScanTime() *types.Timestamp {
	if m != nil {
		return m.LastScanTime
	}
	return nil
}

func (m *ComplianceClusterOverallStats) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceClusterOverallStats) Clone() *ComplianceClusterOverallStats {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceClusterOverallStats)
	*cloned = *m

	cloned.Cluster = m.Cluster.Clone()
	if m.CheckStats != nil {
		cloned.CheckStats = make([]*ComplianceCheckStatusCount, len(m.CheckStats))
		for idx, v := range m.CheckStats {
			cloned.CheckStats[idx] = v.Clone()
		}
	}
	if m.ClusterErrors != nil {
		cloned.ClusterErrors = make([]string, len(m.ClusterErrors))
		copy(cloned.ClusterErrors, m.ClusterErrors)
	}
	cloned.LastScanTime = m.LastScanTime.Clone()
	return cloned
}

// ListComplianceCheckScanStatsResponse provides stats per cluster
type ListComplianceClusterOverallStatsResponse struct {
	ScanStats            []*ComplianceClusterOverallStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	TotalCount           int32                            `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ListComplianceClusterOverallStatsResponse) Reset() {
	*m = ListComplianceClusterOverallStatsResponse{}
}
func (m *ListComplianceClusterOverallStatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ListComplianceClusterOverallStatsResponse) ProtoMessage() {}
func (*ListComplianceClusterOverallStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{6}
}
func (m *ListComplianceClusterOverallStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceClusterOverallStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceClusterOverallStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceClusterOverallStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceClusterOverallStatsResponse.Merge(m, src)
}
func (m *ListComplianceClusterOverallStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceClusterOverallStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceClusterOverallStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceClusterOverallStatsResponse proto.InternalMessageInfo

func (m *ListComplianceClusterOverallStatsResponse) GetScanStats() []*ComplianceClusterOverallStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceClusterOverallStatsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceClusterOverallStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceClusterOverallStatsResponse) Clone() *ListComplianceClusterOverallStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceClusterOverallStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceClusterOverallStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

type ComplianceProfileResultsRequest struct {
	ProfileName          string    `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Query                *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceProfileResultsRequest) Reset()         { *m = ComplianceProfileResultsRequest{} }
func (m *ComplianceProfileResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfileResultsRequest) ProtoMessage()    {}
func (*ComplianceProfileResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{7}
}
func (m *ComplianceProfileResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfileResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfileResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfileResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfileResultsRequest.Merge(m, src)
}
func (m *ComplianceProfileResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfileResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfileResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfileResultsRequest proto.InternalMessageInfo

func (m *ComplianceProfileResultsRequest) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceProfileResultsRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ComplianceProfileResultsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfileResultsRequest) Clone() *ComplianceProfileResultsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfileResultsRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

type ComplianceProfileCheckRequest struct {
	ProfileName          string    `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	CheckName            string    `protobuf:"bytes,2,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Query                *RawQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceProfileCheckRequest) Reset()         { *m = ComplianceProfileCheckRequest{} }
func (m *ComplianceProfileCheckRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfileCheckRequest) ProtoMessage()    {}
func (*ComplianceProfileCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_743ccc62026cffa2, []int{8}
}
func (m *ComplianceProfileCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfileCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfileCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfileCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfileCheckRequest.Merge(m, src)
}
func (m *ComplianceProfileCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfileCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfileCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfileCheckRequest proto.InternalMessageInfo

func (m *ComplianceProfileCheckRequest) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceProfileCheckRequest) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceProfileCheckRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ComplianceProfileCheckRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfileCheckRequest) Clone() *ComplianceProfileCheckRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfileCheckRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("v2.ComplianceCheckStatus", ComplianceCheckStatus_name, ComplianceCheckStatus_value)
	proto.RegisterType((*ComplianceRule)(nil), "v2.ComplianceRule")
	proto.RegisterType((*ComplianceRule_Fix)(nil), "v2.ComplianceRule.Fix")
	proto.RegisterType((*ComplianceScanCluster)(nil), "v2.ComplianceScanCluster")
	proto.RegisterType((*ComplianceCheckStatusCount)(nil), "v2.ComplianceCheckStatusCount")
	proto.RegisterType((*ComplianceCheckResultStatusCount)(nil), "v2.ComplianceCheckResultStatusCount")
	proto.RegisterType((*ListComplianceProfileResults)(nil), "v2.ListComplianceProfileResults")
	proto.RegisterType((*ComplianceClusterOverallStats)(nil), "v2.ComplianceClusterOverallStats")
	proto.RegisterType((*ListComplianceClusterOverallStatsResponse)(nil), "v2.ListComplianceClusterOverallStatsResponse")
	proto.RegisterType((*ComplianceProfileResultsRequest)(nil), "v2.ComplianceProfileResultsRequest")
	proto.RegisterType((*ComplianceProfileCheckRequest)(nil), "v2.ComplianceProfileCheckRequest")
}

func init() { proto.RegisterFile("api/v2/compliance_common.proto", fileDescriptor_743ccc62026cffa2) }

var fileDescriptor_743ccc62026cffa2 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6e, 0xe3, 0x44,
	0x18, 0x5f, 0xdb, 0x49, 0xda, 0x7c, 0xce, 0x66, 0xad, 0x11, 0x2c, 0xde, 0xb0, 0x9b, 0xa6, 0x16,
	0x48, 0x05, 0x21, 0x47, 0x64, 0x0f, 0x1c, 0x38, 0xb0, 0xd9, 0x28, 0x15, 0x81, 0x6c, 0x52, 0x9c,
	0xf4, 0x00, 0x17, 0x6b, 0xd6, 0x99, 0xb6, 0xa3, 0x75, 0x6c, 0xef, 0xcc, 0x38, 0xdb, 0x3e, 0x00,
	0x17, 0x0e, 0x9c, 0x79, 0x0d, 0x1e, 0x80, 0x3b, 0x47, 0x1e, 0x01, 0x95, 0x0b, 0x4f, 0x81, 0xd0,
	0xcc, 0x38, 0x8d, 0x93, 0xb6, 0x12, 0xdc, 0xe6, 0xfb, 0x7d, 0xdf, 0x7c, 0xff, 0x7e, 0x3f, 0x8f,
	0xa1, 0x8d, 0x33, 0xda, 0x5d, 0xf5, 0xba, 0x51, 0xba, 0xcc, 0x62, 0x8a, 0x93, 0x88, 0x84, 0x51,
	0xba, 0x5c, 0xa6, 0x89, 0x9f, 0xb1, 0x54, 0xa4, 0xc8, 0x5c, 0xf5, 0x5a, 0x4f, 0x8a, 0x18, 0x4e,
	0x30, 0x8b, 0x2e, 0xc2, 0xb7, 0x39, 0x61, 0x57, 0xda, 0xdd, 0x3a, 0x38, 0x4f, 0xd3, 0xf3, 0x98,
	0x74, 0x95, 0xf5, 0x3a, 0x3f, 0xeb, 0x0a, 0xba, 0x24, 0x5c, 0xe0, 0x65, 0xa6, 0x03, 0xbc, 0xbf,
	0x2d, 0x68, 0x0e, 0x6e, 0x72, 0x07, 0x79, 0x4c, 0x10, 0x82, 0x4a, 0x82, 0x97, 0xc4, 0x35, 0x3a,
	0xc6, 0x51, 0x3d, 0x50, 0x67, 0xf4, 0x21, 0xd4, 0x59, 0x1e, 0x93, 0x50, 0x5c, 0x65, 0xc4, 0xb5,
	0x94, 0x63, 0x5f, 0x02, 0xf3, 0xab, 0x8c, 0xa0, 0x16, 0xec, 0x73, 0xb2, 0x22, 0x8c, 0x8a, 0x2b,
	0xb7, 0xa2, 0x7d, 0x6b, 0x5b, 0xf9, 0x04, 0x4e, 0x16, 0x98, 0x2d, 0xdc, 0x6a, 0xe1, 0x2b, 0x6c,
	0xe4, 0xc2, 0x5e, 0x94, 0x26, 0x82, 0xa5, 0xb1, 0x5b, 0x53, 0xae, 0xb5, 0x89, 0xde, 0x83, 0xaa,
	0xa0, 0x22, 0x26, 0xee, 0x9e, 0xc2, 0xb5, 0x81, 0x3a, 0x60, 0x2f, 0x08, 0x8f, 0x18, 0xcd, 0x04,
	0x4d, 0x13, 0x77, 0x5f, 0xf9, 0xca, 0x10, 0x7a, 0x0a, 0x75, 0x86, 0xe5, 0x09, 0xc7, 0xc4, 0xad,
	0x2b, 0xff, 0x06, 0x40, 0x9f, 0x41, 0xf5, 0x8c, 0x5e, 0x12, 0xee, 0x42, 0xc7, 0x3a, 0xb2, 0x7b,
	0x8f, 0xfd, 0x55, 0xcf, 0xdf, 0x9e, 0xdd, 0x3f, 0xa6, 0x97, 0x81, 0x0e, 0x42, 0x4d, 0x30, 0xe9,
	0xc2, 0xb5, 0x55, 0x12, 0x93, 0x2e, 0xd0, 0x07, 0xb0, 0xa7, 0x56, 0x40, 0x17, 0x6e, 0x43, 0x81,
	0x35, 0x69, 0x8e, 0x16, 0xe8, 0x00, 0xec, 0x0c, 0x33, 0x92, 0x88, 0x50, 0x02, 0xee, 0x43, 0xe5,
	0x04, 0x0d, 0xa9, 0x85, 0x7a, 0xd0, 0xa0, 0x09, 0x17, 0x2c, 0x8f, 0x64, 0x27, 0xdc, 0x6d, 0xaa,
	0x88, 0x2d, 0x4c, 0xee, 0xe2, 0x1d, 0x66, 0x09, 0x4d, 0xce, 0xdd, 0x47, 0x7a, 0x17, 0x85, 0xd9,
	0xea, 0x83, 0x75, 0x4c, 0x2f, 0xe5, 0x22, 0xb3, 0x18, 0x8b, 0xb3, 0x94, 0x2d, 0x0b, 0x66, 0x6e,
	0x6c, 0xd4, 0x06, 0x58, 0x50, 0xce, 0x72, 0xbd, 0x17, 0x53, 0x37, 0xb0, 0x41, 0xbe, 0xa9, 0xec,
	0x9b, 0x8e, 0xe5, 0x7d, 0x0f, 0xef, 0x6f, 0xa6, 0x9d, 0x45, 0x38, 0x19, 0xc4, 0x39, 0x17, 0x84,
	0xa1, 0x67, 0x00, 0x91, 0x3e, 0xca, 0xe1, 0x74, 0xf2, 0x7a, 0x81, 0x8c, 0x16, 0xe8, 0x10, 0x1a,
	0x6b, 0xb7, 0xd2, 0x85, 0xce, 0x6f, 0x17, 0xd8, 0x04, 0x2f, 0x89, 0x47, 0xa0, 0xb5, 0x49, 0x3d,
	0xb8, 0x20, 0xd1, 0x9b, 0x99, 0xc0, 0x22, 0xe7, 0x83, 0x34, 0x4f, 0x84, 0x64, 0x33, 0x92, 0x07,
	0x95, 0xba, 0x1a, 0x68, 0x03, 0x7d, 0x0e, 0x35, 0xae, 0x82, 0x54, 0xc2, 0x66, 0xef, 0xc9, 0x36,
	0x1d, 0xa5, 0x2c, 0x41, 0x11, 0xe8, 0xfd, 0x66, 0x40, 0x67, 0x27, 0x22, 0x20, 0x3c, 0x8f, 0x45,
	0xb9, 0x9a, 0x9c, 0x46, 0x7a, 0xc2, 0x92, 0x88, 0xeb, 0x0a, 0x91, 0xad, 0x6e, 0x4b, 0xc4, 0xdc,
	0x95, 0xc8, 0x5a, 0xe7, 0xea, 0x6e, 0x49, 0xe7, 0xea, 0xea, 0x57, 0x60, 0xeb, 0xcc, 0xb2, 0x1d,
	0xee, 0x56, 0x94, 0x8a, 0xda, 0xf7, 0xb6, 0xad, 0xda, 0x09, 0x74, 0x33, 0x12, 0xe1, 0xde, 0xaf,
	0x06, 0x3c, 0x1d, 0x53, 0x2e, 0x36, 0xe1, 0x27, 0x2c, 0x3d, 0xa3, 0x31, 0xd1, 0x53, 0x70, 0xf4,
	0x0a, 0x1e, 0x65, 0x1a, 0x09, 0x99, 0x86, 0x5c, 0x43, 0x55, 0xf9, 0xe8, 0x8e, 0x2a, 0xb7, 0x46,
	0x0f, 0x9a, 0xd9, 0x76, 0xba, 0x43, 0x68, 0xac, 0xd3, 0x95, 0x99, 0x2b, 0x30, 0x35, 0xd3, 0x01,
	0xd8, 0x22, 0x15, 0x38, 0x0e, 0x35, 0x43, 0x96, 0x62, 0x08, 0x14, 0xa4, 0x72, 0x7a, 0xff, 0x18,
	0xf0, 0xac, 0x54, 0x58, 0x93, 0x3e, 0x5d, 0x11, 0x86, 0xe3, 0x58, 0x4d, 0x85, 0x9e, 0xc3, 0x5e,
	0xa1, 0x05, 0xb5, 0x6d, 0x7b, 0x97, 0xc9, 0x92, 0xd4, 0x82, 0x75, 0xe4, 0xee, 0x2e, 0xcd, 0xff,
	0xbb, 0x4b, 0xf4, 0x31, 0x34, 0xd7, 0xaa, 0x24, 0x8c, 0xa5, 0x8c, 0xbb, 0x56, 0xc7, 0x3a, 0xaa,
	0x07, 0x0f, 0x0b, 0x74, 0xa8, 0x40, 0xf4, 0x02, 0x9a, 0x31, 0xe6, 0x22, 0xe4, 0x11, 0x4e, 0x42,
	0xf9, 0xf8, 0xa9, 0x17, 0xca, 0xee, 0xb5, 0x7c, 0xfd, 0x32, 0xfa, 0xeb, 0x97, 0xd1, 0x9f, 0xaf,
	0x5f, 0xc6, 0xa0, 0x21, 0x6f, 0xc8, 0xae, 0x25, 0xe4, 0xfd, 0x6c, 0xc0, 0x27, 0xdb, 0xa4, 0xdd,
	0xb1, 0x84, 0x80, 0xf0, 0x2c, 0x4d, 0x38, 0x41, 0x2f, 0x00, 0x54, 0x29, 0x3d, 0x96, 0x26, 0xef,
	0x70, 0x67, 0xac, 0x3b, 0xae, 0xd7, 0xe5, 0x25, 0x3d, 0xd8, 0x0e, 0x23, 0xe6, 0x2d, 0x46, 0x2e,
	0xe0, 0xe0, 0x3e, 0x01, 0x05, 0xe4, 0x6d, 0x4e, 0xb8, 0xb8, 0x45, 0xbc, 0x71, 0x9b, 0x78, 0x0f,
	0xaa, 0xea, 0x47, 0xa1, 0x0a, 0xd8, 0xbd, 0x86, 0xec, 0x31, 0xc0, 0xef, 0xbe, 0x93, 0x58, 0xa0,
	0x5d, 0xde, 0x8f, 0x5b, 0xdc, 0x17, 0xa5, 0x0a, 0xed, 0xfd, 0xe7, 0x42, 0xdb, 0xdf, 0xa3, 0xb9,
	0xfb, 0x3d, 0xde, 0xf4, 0x61, 0xdd, 0xdb, 0xc7, 0xa7, 0x3f, 0x19, 0xe5, 0xa7, 0xab, 0x24, 0x0b,
	0xf4, 0x18, 0xd0, 0xe9, 0x64, 0x36, 0x9c, 0x87, 0x83, 0xaf, 0x87, 0x83, 0x6f, 0xc3, 0xd9, 0xbc,
	0x3f, 0x3f, 0x9d, 0x39, 0x0f, 0xd0, 0x3e, 0x54, 0x4e, 0xfa, 0xb3, 0x99, 0x63, 0xc8, 0xd3, 0x71,
	0x7f, 0x34, 0x76, 0x4c, 0x54, 0x87, 0xea, 0x30, 0x08, 0xa6, 0x81, 0x63, 0x49, 0x70, 0x34, 0x39,
	0x9e, 0x3a, 0x15, 0x04, 0x50, 0x7b, 0xd5, 0x9f, 0x9c, 0xf6, 0xc7, 0x4e, 0x15, 0x21, 0x68, 0x4e,
	0xa6, 0xf3, 0xb0, 0x7f, 0x72, 0x32, 0x1e, 0x0d, 0xfa, 0x2f, 0xc7, 0x43, 0xa7, 0x86, 0x1c, 0x68,
	0x8c, 0x26, 0x83, 0xe9, 0x64, 0x36, 0x9a, 0xcd, 0x87, 0x93, 0xb9, 0xb3, 0xf7, 0xf2, 0x8b, 0xdf,
	0xaf, 0xdb, 0xc6, 0x1f, 0xd7, 0x6d, 0xe3, 0xcf, 0xeb, 0xb6, 0xf1, 0xcb, 0x5f, 0xed, 0x07, 0xe0,
	0xd2, 0xd4, 0xe7, 0x02, 0x47, 0x6f, 0x58, 0x7a, 0xa9, 0xf5, 0xe4, 0xe3, 0x8c, 0xfa, 0xab, 0xde,
	0x0f, 0xb6, 0xdf, 0xd5, 0xff, 0xe6, 0x2f, 0x57, 0xbd, 0xd7, 0x35, 0xe5, 0x7a, 0xfe, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4c, 0xde, 0x45, 0xfb, 0xd3, 0x07, 0x00, 0x00,
}

func (m *ComplianceRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ParentRule) > 0 {
		i -= len(m.ParentRule)
		copy(dAtA[i:], m.ParentRule)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ParentRule)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RuleId) > 0 {
		i -= len(m.RuleId)
		copy(dAtA[i:], m.RuleId)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.RuleId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Fixes) > 0 {
		for iNdEx := len(m.Fixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuleType) > 0 {
		i -= len(m.RuleType)
		copy(dAtA[i:], m.RuleType)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.RuleType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceRule_Fix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRule_Fix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRule_Fix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Disruption) > 0 {
		i -= len(m.Disruption)
		copy(dAtA[i:], m.Disruption)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Disruption)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceCheckStatusCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceCheckStatusCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceCheckStatusCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintComplianceCommon(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintComplianceCommon(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceCheckResultStatusCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceCheckResultStatusCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceCheckResultStatusCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CheckStats) > 0 {
		for iNdEx := len(m.CheckStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceProfileResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceProfileResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceProfileResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceCommon(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProfileResults) > 0 {
		for iNdEx := len(m.ProfileResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProfileResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceClusterOverallStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceClusterOverallStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceClusterOverallStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastScanTime != nil {
		{
			size, err := m.LastScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterErrors) > 0 {
		for iNdEx := len(m.ClusterErrors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterErrors[iNdEx])
			copy(dAtA[i:], m.ClusterErrors[iNdEx])
			i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ClusterErrors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CheckStats) > 0 {
		for iNdEx := len(m.CheckStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceClusterOverallStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceClusterOverallStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceClusterOverallStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceCommon(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfileResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfileResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfileResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfileCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfileCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfileCheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceCommon(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.RuleType)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if len(m.Fixes) > 0 {
		for _, e := range m.Fixes {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.RuleId)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.ParentRule)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceRule_Fix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Disruption)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceCheckStatusCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovComplianceCommon(uint64(m.Count))
	}
	if m.Status != 0 {
		n += 1 + sovComplianceCommon(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceCheckResultStatusCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if len(m.CheckStats) > 0 {
		for _, e := range m.CheckStats {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceProfileResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfileResults) > 0 {
		for _, e := range m.ProfileResults {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceCommon(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceClusterOverallStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if len(m.CheckStats) > 0 {
		for _, e := range m.CheckStats {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	if len(m.ClusterErrors) > 0 {
		for _, s := range m.ClusterErrors {
			l = len(s)
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	if m.LastScanTime != nil {
		l = m.LastScanTime.Size()
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceClusterOverallStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceCommon(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceCommon(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfileResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfileCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovComplianceCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceCommon(x uint64) (n int) {
	return sovComplianceCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixes = append(m.Fixes, &ComplianceRule_Fix{})
			if err := m.Fixes[len(m.Fixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceRule_Fix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disruption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disruption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceCheckStatusCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceCheckStatusCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceCheckStatusCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceCheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceCheckResultStatusCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceCheckResultStatusCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceCheckResultStatusCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckStats = append(m.CheckStats, &ComplianceCheckStatusCount{})
			if err := m.CheckStats[len(m.CheckStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceProfileResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceProfileResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceProfileResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileResults = append(m.ProfileResults, &ComplianceCheckResultStatusCount{})
			if err := m.ProfileResults[len(m.ProfileResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceClusterOverallStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceClusterOverallStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceClusterOverallStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &ComplianceScanCluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckStats = append(m.CheckStats, &ComplianceCheckStatusCount{})
			if err := m.CheckStats[len(m.CheckStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterErrors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterErrors = append(m.ClusterErrors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScanTime == nil {
				m.LastScanTime = &types.Timestamp{}
			}
			if err := m.LastScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceClusterOverallStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceClusterOverallStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceClusterOverallStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceClusterOverallStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfileResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfileResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfileResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfileCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfileCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfileCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceCommon = fmt.Errorf("proto: unexpected end of group")
)
