// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: api/v2/vulnerability.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VulnerabilityType int32

const (
	VulnerabilityType_UNKNOWN_VULNERABILITY   VulnerabilityType = 0
	VulnerabilityType_IMAGE_VULNERABILITY     VulnerabilityType = 1
	VulnerabilityType_K8S_VULNERABILITY       VulnerabilityType = 2
	VulnerabilityType_ISTIO_VULNERABILITY     VulnerabilityType = 3
	VulnerabilityType_NODE_VULNERABILITY      VulnerabilityType = 4
	VulnerabilityType_OPENSHIFT_VULNERABILITY VulnerabilityType = 5
)

// Enum value maps for VulnerabilityType.
var (
	VulnerabilityType_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY",
		1: "IMAGE_VULNERABILITY",
		2: "K8S_VULNERABILITY",
		3: "ISTIO_VULNERABILITY",
		4: "NODE_VULNERABILITY",
		5: "OPENSHIFT_VULNERABILITY",
	}
	VulnerabilityType_value = map[string]int32{
		"UNKNOWN_VULNERABILITY":   0,
		"IMAGE_VULNERABILITY":     1,
		"K8S_VULNERABILITY":       2,
		"ISTIO_VULNERABILITY":     3,
		"NODE_VULNERABILITY":      4,
		"OPENSHIFT_VULNERABILITY": 5,
	}
)

func (x VulnerabilityType) Enum() *VulnerabilityType {
	p := new(VulnerabilityType)
	*p = x
	return p
}

func (x VulnerabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[0].Descriptor()
}

func (VulnerabilityType) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[0]
}

func (x VulnerabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilityType.Descriptor instead.
func (VulnerabilityType) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{0}
}

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY   VulnerabilitySeverity = 0
	VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY       VulnerabilitySeverity = 1
	VulnerabilitySeverity_MODERATE_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 2
	VulnerabilitySeverity_IMPORTANT_VULNERABILITY_SEVERITY VulnerabilitySeverity = 3
	VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 4
)

// Enum value maps for VulnerabilitySeverity.
var (
	VulnerabilitySeverity_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY_SEVERITY",
		1: "LOW_VULNERABILITY_SEVERITY",
		2: "MODERATE_VULNERABILITY_SEVERITY",
		3: "IMPORTANT_VULNERABILITY_SEVERITY",
		4: "CRITICAL_VULNERABILITY_SEVERITY",
	}
	VulnerabilitySeverity_value = map[string]int32{
		"UNKNOWN_VULNERABILITY_SEVERITY":   0,
		"LOW_VULNERABILITY_SEVERITY":       1,
		"MODERATE_VULNERABILITY_SEVERITY":  2,
		"IMPORTANT_VULNERABILITY_SEVERITY": 3,
		"CRITICAL_VULNERABILITY_SEVERITY":  4,
	}
)

func (x VulnerabilitySeverity) Enum() *VulnerabilitySeverity {
	p := new(VulnerabilitySeverity)
	*p = x
	return p
}

func (x VulnerabilitySeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilitySeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[1].Descriptor()
}

func (VulnerabilitySeverity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[1]
}

func (x VulnerabilitySeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VulnerabilitySeverity.Descriptor instead.
func (VulnerabilitySeverity) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{1}
}

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SOURCE_RED_HAT Source = 1
	Source_SOURCE_OSV     Source = 2
	Source_SOURCE_NVD     Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SOURCE_RED_HAT",
		2: "SOURCE_OSV",
		3: "SOURCE_NVD",
	}
	Source_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SOURCE_RED_HAT": 1,
		"SOURCE_OSV":     2,
		"SOURCE_NVD":     3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[2].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[2]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{2}
}

// Added this score version for nvd cvss score. moving out and re using score version from cveinfo will cause backward compatibility issue
type CvssScoreVersion int32

const (
	CvssScoreVersion_UNKNOWN_VERSION CvssScoreVersion = 0
	CvssScoreVersion_V2              CvssScoreVersion = 1 // No unset for automatic backwards compatibility
	CvssScoreVersion_V3              CvssScoreVersion = 2
)

// Enum value maps for CvssScoreVersion.
var (
	CvssScoreVersion_name = map[int32]string{
		0: "UNKNOWN_VERSION",
		1: "V2",
		2: "V3",
	}
	CvssScoreVersion_value = map[string]int32{
		"UNKNOWN_VERSION": 0,
		"V2":              1,
		"V3":              2,
	}
)

func (x CvssScoreVersion) Enum() *CvssScoreVersion {
	p := new(CvssScoreVersion)
	*p = x
	return p
}

func (x CvssScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CvssScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[3].Descriptor()
}

func (CvssScoreVersion) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[3]
}

func (x CvssScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CvssScoreVersion.Descriptor instead.
func (CvssScoreVersion) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{3}
}

// ScoreVersion can be deprecated ROX-26066
type CVEInfo_ScoreVersion int32

const (
	CVEInfo_V2      CVEInfo_ScoreVersion = 0 // No unset for automatic backwards compatibility
	CVEInfo_V3      CVEInfo_ScoreVersion = 1
	CVEInfo_UNKNOWN CVEInfo_ScoreVersion = 2
)

// Enum value maps for CVEInfo_ScoreVersion.
var (
	CVEInfo_ScoreVersion_name = map[int32]string{
		0: "V2",
		1: "V3",
		2: "UNKNOWN",
	}
	CVEInfo_ScoreVersion_value = map[string]int32{
		"V2":      0,
		"V3":      1,
		"UNKNOWN": 2,
	}
)

func (x CVEInfo_ScoreVersion) Enum() *CVEInfo_ScoreVersion {
	p := new(CVEInfo_ScoreVersion)
	*p = x
	return p
}

func (x CVEInfo_ScoreVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVEInfo_ScoreVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[4].Descriptor()
}

func (CVEInfo_ScoreVersion) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[4]
}

func (x CVEInfo_ScoreVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVEInfo_ScoreVersion.Descriptor instead.
func (CVEInfo_ScoreVersion) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{3, 0}
}

type CVSSV2_Impact int32

const (
	CVSSV2_IMPACT_NONE     CVSSV2_Impact = 0
	CVSSV2_IMPACT_PARTIAL  CVSSV2_Impact = 1
	CVSSV2_IMPACT_COMPLETE CVSSV2_Impact = 2
)

// Enum value maps for CVSSV2_Impact.
var (
	CVSSV2_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_PARTIAL",
		2: "IMPACT_COMPLETE",
	}
	CVSSV2_Impact_value = map[string]int32{
		"IMPACT_NONE":     0,
		"IMPACT_PARTIAL":  1,
		"IMPACT_COMPLETE": 2,
	}
)

func (x CVSSV2_Impact) Enum() *CVSSV2_Impact {
	p := new(CVSSV2_Impact)
	*p = x
	return p
}

func (x CVSSV2_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[5].Descriptor()
}

func (CVSSV2_Impact) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[5]
}

func (x CVSSV2_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Impact.Descriptor instead.
func (CVSSV2_Impact) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9, 0}
}

type CVSSV2_AttackVector int32

const (
	CVSSV2_ATTACK_LOCAL    CVSSV2_AttackVector = 0
	CVSSV2_ATTACK_ADJACENT CVSSV2_AttackVector = 1
	CVSSV2_ATTACK_NETWORK  CVSSV2_AttackVector = 2
)

// Enum value maps for CVSSV2_AttackVector.
var (
	CVSSV2_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
	}
	CVSSV2_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
	}
)

func (x CVSSV2_AttackVector) Enum() *CVSSV2_AttackVector {
	p := new(CVSSV2_AttackVector)
	*p = x
	return p
}

func (x CVSSV2_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[6].Descriptor()
}

func (CVSSV2_AttackVector) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[6]
}

func (x CVSSV2_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_AttackVector.Descriptor instead.
func (CVSSV2_AttackVector) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9, 1}
}

type CVSSV2_AccessComplexity int32

const (
	CVSSV2_ACCESS_HIGH   CVSSV2_AccessComplexity = 0
	CVSSV2_ACCESS_MEDIUM CVSSV2_AccessComplexity = 1
	CVSSV2_ACCESS_LOW    CVSSV2_AccessComplexity = 2
)

// Enum value maps for CVSSV2_AccessComplexity.
var (
	CVSSV2_AccessComplexity_name = map[int32]string{
		0: "ACCESS_HIGH",
		1: "ACCESS_MEDIUM",
		2: "ACCESS_LOW",
	}
	CVSSV2_AccessComplexity_value = map[string]int32{
		"ACCESS_HIGH":   0,
		"ACCESS_MEDIUM": 1,
		"ACCESS_LOW":    2,
	}
)

func (x CVSSV2_AccessComplexity) Enum() *CVSSV2_AccessComplexity {
	p := new(CVSSV2_AccessComplexity)
	*p = x
	return p
}

func (x CVSSV2_AccessComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_AccessComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[7].Descriptor()
}

func (CVSSV2_AccessComplexity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[7]
}

func (x CVSSV2_AccessComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_AccessComplexity.Descriptor instead.
func (CVSSV2_AccessComplexity) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9, 2}
}

type CVSSV2_Authentication int32

const (
	CVSSV2_AUTH_MULTIPLE CVSSV2_Authentication = 0
	CVSSV2_AUTH_SINGLE   CVSSV2_Authentication = 1
	CVSSV2_AUTH_NONE     CVSSV2_Authentication = 2
)

// Enum value maps for CVSSV2_Authentication.
var (
	CVSSV2_Authentication_name = map[int32]string{
		0: "AUTH_MULTIPLE",
		1: "AUTH_SINGLE",
		2: "AUTH_NONE",
	}
	CVSSV2_Authentication_value = map[string]int32{
		"AUTH_MULTIPLE": 0,
		"AUTH_SINGLE":   1,
		"AUTH_NONE":     2,
	}
)

func (x CVSSV2_Authentication) Enum() *CVSSV2_Authentication {
	p := new(CVSSV2_Authentication)
	*p = x
	return p
}

func (x CVSSV2_Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[8].Descriptor()
}

func (CVSSV2_Authentication) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[8]
}

func (x CVSSV2_Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Authentication.Descriptor instead.
func (CVSSV2_Authentication) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9, 3}
}

type CVSSV2_Severity int32

const (
	CVSSV2_UNKNOWN CVSSV2_Severity = 0
	CVSSV2_LOW     CVSSV2_Severity = 1
	CVSSV2_MEDIUM  CVSSV2_Severity = 2
	CVSSV2_HIGH    CVSSV2_Severity = 3
)

// Enum value maps for CVSSV2_Severity.
var (
	CVSSV2_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	CVSSV2_Severity_value = map[string]int32{
		"UNKNOWN": 0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
	}
)

func (x CVSSV2_Severity) Enum() *CVSSV2_Severity {
	p := new(CVSSV2_Severity)
	*p = x
	return p
}

func (x CVSSV2_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV2_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[9].Descriptor()
}

func (CVSSV2_Severity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[9]
}

func (x CVSSV2_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV2_Severity.Descriptor instead.
func (CVSSV2_Severity) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9, 4}
}

type CVSSV3_Impact int32

const (
	CVSSV3_IMPACT_NONE CVSSV3_Impact = 0
	CVSSV3_IMPACT_LOW  CVSSV3_Impact = 1
	CVSSV3_IMPACT_HIGH CVSSV3_Impact = 2
)

// Enum value maps for CVSSV3_Impact.
var (
	CVSSV3_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_LOW",
		2: "IMPACT_HIGH",
	}
	CVSSV3_Impact_value = map[string]int32{
		"IMPACT_NONE": 0,
		"IMPACT_LOW":  1,
		"IMPACT_HIGH": 2,
	}
)

func (x CVSSV3_Impact) Enum() *CVSSV3_Impact {
	p := new(CVSSV3_Impact)
	*p = x
	return p
}

func (x CVSSV3_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[10].Descriptor()
}

func (CVSSV3_Impact) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[10]
}

func (x CVSSV3_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Impact.Descriptor instead.
func (CVSSV3_Impact) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 0}
}

type CVSSV3_AttackVector int32

const (
	CVSSV3_ATTACK_LOCAL    CVSSV3_AttackVector = 0
	CVSSV3_ATTACK_ADJACENT CVSSV3_AttackVector = 1
	CVSSV3_ATTACK_NETWORK  CVSSV3_AttackVector = 2
	CVSSV3_ATTACK_PHYSICAL CVSSV3_AttackVector = 3
)

// Enum value maps for CVSSV3_AttackVector.
var (
	CVSSV3_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
		3: "ATTACK_PHYSICAL",
	}
	CVSSV3_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
		"ATTACK_PHYSICAL": 3,
	}
)

func (x CVSSV3_AttackVector) Enum() *CVSSV3_AttackVector {
	p := new(CVSSV3_AttackVector)
	*p = x
	return p
}

func (x CVSSV3_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[11].Descriptor()
}

func (CVSSV3_AttackVector) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[11]
}

func (x CVSSV3_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_AttackVector.Descriptor instead.
func (CVSSV3_AttackVector) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 1}
}

type CVSSV3_Complexity int32

const (
	CVSSV3_COMPLEXITY_LOW  CVSSV3_Complexity = 0
	CVSSV3_COMPLEXITY_HIGH CVSSV3_Complexity = 1
)

// Enum value maps for CVSSV3_Complexity.
var (
	CVSSV3_Complexity_name = map[int32]string{
		0: "COMPLEXITY_LOW",
		1: "COMPLEXITY_HIGH",
	}
	CVSSV3_Complexity_value = map[string]int32{
		"COMPLEXITY_LOW":  0,
		"COMPLEXITY_HIGH": 1,
	}
)

func (x CVSSV3_Complexity) Enum() *CVSSV3_Complexity {
	p := new(CVSSV3_Complexity)
	*p = x
	return p
}

func (x CVSSV3_Complexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Complexity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[12].Descriptor()
}

func (CVSSV3_Complexity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[12]
}

func (x CVSSV3_Complexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Complexity.Descriptor instead.
func (CVSSV3_Complexity) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 2}
}

type CVSSV3_Privileges int32

const (
	CVSSV3_PRIVILEGE_NONE CVSSV3_Privileges = 0
	CVSSV3_PRIVILEGE_LOW  CVSSV3_Privileges = 1
	CVSSV3_PRIVILEGE_HIGH CVSSV3_Privileges = 2
)

// Enum value maps for CVSSV3_Privileges.
var (
	CVSSV3_Privileges_name = map[int32]string{
		0: "PRIVILEGE_NONE",
		1: "PRIVILEGE_LOW",
		2: "PRIVILEGE_HIGH",
	}
	CVSSV3_Privileges_value = map[string]int32{
		"PRIVILEGE_NONE": 0,
		"PRIVILEGE_LOW":  1,
		"PRIVILEGE_HIGH": 2,
	}
)

func (x CVSSV3_Privileges) Enum() *CVSSV3_Privileges {
	p := new(CVSSV3_Privileges)
	*p = x
	return p
}

func (x CVSSV3_Privileges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Privileges) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[13].Descriptor()
}

func (CVSSV3_Privileges) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[13]
}

func (x CVSSV3_Privileges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Privileges.Descriptor instead.
func (CVSSV3_Privileges) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 3}
}

type CVSSV3_UserInteraction int32

const (
	CVSSV3_UI_NONE     CVSSV3_UserInteraction = 0
	CVSSV3_UI_REQUIRED CVSSV3_UserInteraction = 1
)

// Enum value maps for CVSSV3_UserInteraction.
var (
	CVSSV3_UserInteraction_name = map[int32]string{
		0: "UI_NONE",
		1: "UI_REQUIRED",
	}
	CVSSV3_UserInteraction_value = map[string]int32{
		"UI_NONE":     0,
		"UI_REQUIRED": 1,
	}
)

func (x CVSSV3_UserInteraction) Enum() *CVSSV3_UserInteraction {
	p := new(CVSSV3_UserInteraction)
	*p = x
	return p
}

func (x CVSSV3_UserInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_UserInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[14].Descriptor()
}

func (CVSSV3_UserInteraction) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[14]
}

func (x CVSSV3_UserInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_UserInteraction.Descriptor instead.
func (CVSSV3_UserInteraction) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 4}
}

type CVSSV3_Scope int32

const (
	CVSSV3_UNCHANGED CVSSV3_Scope = 0
	CVSSV3_CHANGED   CVSSV3_Scope = 1
)

// Enum value maps for CVSSV3_Scope.
var (
	CVSSV3_Scope_name = map[int32]string{
		0: "UNCHANGED",
		1: "CHANGED",
	}
	CVSSV3_Scope_value = map[string]int32{
		"UNCHANGED": 0,
		"CHANGED":   1,
	}
)

func (x CVSSV3_Scope) Enum() *CVSSV3_Scope {
	p := new(CVSSV3_Scope)
	*p = x
	return p
}

func (x CVSSV3_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[15].Descriptor()
}

func (CVSSV3_Scope) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[15]
}

func (x CVSSV3_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Scope.Descriptor instead.
func (CVSSV3_Scope) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 5}
}

type CVSSV3_Severity int32

const (
	CVSSV3_UNKNOWN  CVSSV3_Severity = 0
	CVSSV3_NONE     CVSSV3_Severity = 1
	CVSSV3_LOW      CVSSV3_Severity = 2
	CVSSV3_MEDIUM   CVSSV3_Severity = 3
	CVSSV3_HIGH     CVSSV3_Severity = 4
	CVSSV3_CRITICAL CVSSV3_Severity = 5
)

// Enum value maps for CVSSV3_Severity.
var (
	CVSSV3_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	CVSSV3_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NONE":     1,
		"LOW":      2,
		"MEDIUM":   3,
		"HIGH":     4,
		"CRITICAL": 5,
	}
)

func (x CVSSV3_Severity) Enum() *CVSSV3_Severity {
	p := new(CVSSV3_Severity)
	*p = x
	return p
}

func (x CVSSV3_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[16].Descriptor()
}

func (CVSSV3_Severity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[16]
}

func (x CVSSV3_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSSV3_Severity.Descriptor instead.
func (CVSSV3_Severity) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10, 6}
}

type EmbeddedVulnerability struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Cve      string                 `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	Advisory *Advisory              `protobuf:"bytes,2,opt,name=advisory,proto3" json:"advisory,omitempty"`
	Cvss     float32                `protobuf:"fixed32,3,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Summary  string                 `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Link     string                 `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	// Types that are valid to be assigned to SetFixedBy:
	//
	//	*EmbeddedVulnerability_FixedBy
	SetFixedBy   isEmbeddedVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	CvssV3       *CVSSV3                            `protobuf:"bytes,7,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	PublishedOn  *timestamppb.Timestamp             `protobuf:"bytes,8,opt,name=published_on,json=publishedOn,proto3" json:"published_on,omitempty"`
	LastModified *timestamppb.Timestamp             `protobuf:"bytes,9,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// For internal purposes only.
	VulnerabilityType  VulnerabilityType      `protobuf:"varint,10,opt,name=vulnerability_type,json=vulnerabilityType,proto3,enum=v2.VulnerabilityType" json:"vulnerability_type,omitempty"`
	VulnerabilityTypes []VulnerabilityType    `protobuf:"varint,11,rep,packed,name=vulnerability_types,json=vulnerabilityTypes,proto3,enum=v2.VulnerabilityType" json:"vulnerability_types,omitempty"`
	Suppressed         bool                   `protobuf:"varint,12,opt,name=suppressed,proto3" json:"suppressed,omitempty"`
	SuppressActivation *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=suppress_activation,json=suppressActivation,proto3" json:"suppress_activation,omitempty"`
	SuppressExpiry     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=suppress_expiry,json=suppressExpiry,proto3" json:"suppress_expiry,omitempty"`
	// Time when the CVE was first seen, for this specific distro, in the system.
	FirstSystemOccurrence *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_system_occurrence,json=firstSystemOccurrence,proto3" json:"first_system_occurrence,omitempty"`
	// Time when the CVE was first seen in this image.
	FirstImageOccurrence *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=first_image_occurrence,json=firstImageOccurrence,proto3" json:"first_image_occurrence,omitempty"`
	Severity             VulnerabilitySeverity  `protobuf:"varint,17,opt,name=severity,proto3,enum=v2.VulnerabilitySeverity" json:"severity,omitempty"`
	State                VulnerabilityState     `protobuf:"varint,18,opt,name=state,proto3,enum=v2.VulnerabilityState" json:"state,omitempty"`
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics   []*CVSSScore `protobuf:"bytes,19,rep,name=cvss_metrics,json=cvssMetrics,proto3" json:"cvss_metrics,omitempty"`
	NvdCvss       float32      `protobuf:"fixed32,20,opt,name=nvd_cvss,json=nvdCvss,proto3" json:"nvd_cvss,omitempty"`
	Epss          *EPSS        `protobuf:"bytes,21,opt,name=epss,proto3" json:"epss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbeddedVulnerability) Reset() {
	*x = EmbeddedVulnerability{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedVulnerability) ProtoMessage() {}

func (x *EmbeddedVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddedVulnerability.ProtoReflect.Descriptor instead.
func (*EmbeddedVulnerability) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{0}
}

func (x *EmbeddedVulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *EmbeddedVulnerability) GetAdvisory() *Advisory {
	if x != nil {
		return x.Advisory
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *EmbeddedVulnerability) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *EmbeddedVulnerability) GetSetFixedBy() isEmbeddedVulnerability_SetFixedBy {
	if x != nil {
		return x.SetFixedBy
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFixedBy() string {
	if x != nil {
		if x, ok := x.SetFixedBy.(*EmbeddedVulnerability_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

func (x *EmbeddedVulnerability) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *EmbeddedVulnerability) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *EmbeddedVulnerability) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *EmbeddedVulnerability) GetVulnerabilityType() VulnerabilityType {
	if x != nil {
		return x.VulnerabilityType
	}
	return VulnerabilityType_UNKNOWN_VULNERABILITY
}

func (x *EmbeddedVulnerability) GetVulnerabilityTypes() []VulnerabilityType {
	if x != nil {
		return x.VulnerabilityTypes
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressed() bool {
	if x != nil {
		return x.Suppressed
	}
	return false
}

func (x *EmbeddedVulnerability) GetSuppressActivation() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressActivation
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSuppressExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressExpiry
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstSystemOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSystemOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstImageOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstImageOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *EmbeddedVulnerability) GetState() VulnerabilityState {
	if x != nil {
		return x.State
	}
	return VulnerabilityState_OBSERVED
}

func (x *EmbeddedVulnerability) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

func (x *EmbeddedVulnerability) GetNvdCvss() float32 {
	if x != nil {
		return x.NvdCvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetEpss() *EPSS {
	if x != nil {
		return x.Epss
	}
	return nil
}

type isEmbeddedVulnerability_SetFixedBy interface {
	isEmbeddedVulnerability_SetFixedBy()
}

type EmbeddedVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,6,opt,name=fixed_by,json=fixedBy,proto3,oneof"`
}

func (*EmbeddedVulnerability_FixedBy) isEmbeddedVulnerability_SetFixedBy() {}

type NodeVulnerability struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	CveBaseInfo *CVEInfo               `protobuf:"bytes,1,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	Cvss        float32                `protobuf:"fixed32,2,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Severity    VulnerabilitySeverity  `protobuf:"varint,3,opt,name=severity,proto3,enum=v2.VulnerabilitySeverity" json:"severity,omitempty"`
	// Types that are valid to be assigned to SetFixedBy:
	//
	//	*NodeVulnerability_FixedBy
	SetFixedBy    isNodeVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	Snoozed       bool                           `protobuf:"varint,5,opt,name=snoozed,proto3" json:"snoozed,omitempty"`
	SnoozeStart   *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry  *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeVulnerability) Reset() {
	*x = NodeVulnerability{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVulnerability) ProtoMessage() {}

func (x *NodeVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVulnerability.ProtoReflect.Descriptor instead.
func (*NodeVulnerability) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{1}
}

func (x *NodeVulnerability) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *NodeVulnerability) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *NodeVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeVulnerability) GetSetFixedBy() isNodeVulnerability_SetFixedBy {
	if x != nil {
		return x.SetFixedBy
	}
	return nil
}

func (x *NodeVulnerability) GetFixedBy() string {
	if x != nil {
		if x, ok := x.SetFixedBy.(*NodeVulnerability_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

func (x *NodeVulnerability) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *NodeVulnerability) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *NodeVulnerability) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

type isNodeVulnerability_SetFixedBy interface {
	isNodeVulnerability_SetFixedBy()
}

type NodeVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,4,opt,name=fixed_by,json=fixedBy,proto3,oneof"`
}

func (*NodeVulnerability_FixedBy) isNodeVulnerability_SetFixedBy() {}

// EPSS Score stores two epss metrics returned by scanner - epss probability and epss percentile
type EPSS struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EpssProbability float32                `protobuf:"fixed32,1,opt,name=epss_probability,json=epssProbability,proto3" json:"epss_probability,omitempty"`
	EpssPercentile  float32                `protobuf:"fixed32,2,opt,name=epss_percentile,json=epssPercentile,proto3" json:"epss_percentile,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EPSS) Reset() {
	*x = EPSS{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EPSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EPSS) ProtoMessage() {}

func (x *EPSS) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EPSS.ProtoReflect.Descriptor instead.
func (*EPSS) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{2}
}

func (x *EPSS) GetEpssProbability() float32 {
	if x != nil {
		return x.EpssProbability
	}
	return 0
}

func (x *EPSS) GetEpssPercentile() float32 {
	if x != nil {
		return x.EpssPercentile
	}
	return 0
}

type CVEInfo struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Cve     string                 `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	Summary string                 `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Link    string                 `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// This indicates the timestamp when the cve was first published in the cve feeds.
	PublishedOn *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=published_on,json=publishedOn,proto3" json:"published_on,omitempty"`
	// Time when the CVE was first seen in the system.
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastModified *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	ScoreVersion CVEInfo_ScoreVersion   `protobuf:"varint,7,opt,name=score_version,json=scoreVersion,proto3,enum=v2.CVEInfo_ScoreVersion" json:"score_version,omitempty"`
	// CVSSV2 CVSSV3 ScoreVersion can be deprecated ROX-26066
	CvssV2     *CVSSV2              `protobuf:"bytes,8,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3     *CVSSV3              `protobuf:"bytes,9,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	References []*CVEInfo_Reference `protobuf:"bytes,10,rep,name=references,proto3" json:"references,omitempty"`
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics   []*CVSSScore `protobuf:"bytes,11,rep,name=cvss_metrics,json=cvssMetrics,proto3" json:"cvss_metrics,omitempty"`
	Epss          *EPSS        `protobuf:"bytes,12,opt,name=epss,proto3" json:"epss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVEInfo) Reset() {
	*x = CVEInfo{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo) ProtoMessage() {}

func (x *CVEInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo.ProtoReflect.Descriptor instead.
func (*CVEInfo) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{3}
}

func (x *CVEInfo) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *CVEInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CVEInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CVEInfo) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedOn
	}
	return nil
}

func (x *CVEInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CVEInfo) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *CVEInfo) GetScoreVersion() CVEInfo_ScoreVersion {
	if x != nil {
		return x.ScoreVersion
	}
	return CVEInfo_V2
}

func (x *CVEInfo) GetCvssV2() *CVSSV2 {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *CVEInfo) GetCvssV3() *CVSSV3 {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

func (x *CVEInfo) GetReferences() []*CVEInfo_Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CVEInfo) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		return x.CvssMetrics
	}
	return nil
}

func (x *CVEInfo) GetEpss() *EPSS {
	if x != nil {
		return x.Epss
	}
	return nil
}

type Advisory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Link          string                 `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisory.ProtoReflect.Descriptor instead.
func (*Advisory) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{4}
}

func (x *Advisory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Advisory) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ImageCVE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// keeping id similar construction for now during investigation.  It will include component and index
	// within the component
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// was hash index, making it btree
	ImageId     string   `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	CveBaseInfo *CVEInfo `protobuf:"bytes,3,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	// cvss stores ACS preferred cvss score
	Cvss        float32               `protobuf:"fixed32,4,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Severity    VulnerabilitySeverity `protobuf:"varint,5,opt,name=severity,proto3,enum=v2.VulnerabilitySeverity" json:"severity,omitempty"`
	ImpactScore float32               `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	// nvdcvss stores cvss score for a cve from NVD
	Nvdcvss              float32                `protobuf:"fixed32,7,opt,name=nvdcvss,proto3" json:"nvdcvss,omitempty"`
	NvdScoreVersion      CvssScoreVersion       `protobuf:"varint,8,opt,name=nvd_score_version,json=nvdScoreVersion,proto3,enum=v2.CvssScoreVersion" json:"nvd_score_version,omitempty"`
	FirstImageOccurrence *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=first_image_occurrence,json=firstImageOccurrence,proto3" json:"first_image_occurrence,omitempty"`
	State                VulnerabilityState     `protobuf:"varint,10,opt,name=state,proto3,enum=v2.VulnerabilityState" json:"state,omitempty"`
	IsFixable            bool                   `protobuf:"varint,11,opt,name=is_fixable,json=isFixable,proto3" json:"is_fixable,omitempty"`
	// Whether there is a version the CVE is fixed in the component.
	//
	// Types that are valid to be assigned to HasFixedBy:
	//
	//	*ImageCVE_FixedBy
	HasFixedBy    isImageCVE_HasFixedBy `protobuf_oneof:"has_fixed_by"`
	ComponentId   string                `protobuf:"bytes,13,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	Advisory      *Advisory             `protobuf:"bytes,14,opt,name=advisory,proto3" json:"advisory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageCVE) Reset() {
	*x = ImageCVE{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCVE) ProtoMessage() {}

func (x *ImageCVE) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCVE.ProtoReflect.Descriptor instead.
func (*ImageCVE) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{5}
}

func (x *ImageCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageCVE) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *ImageCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *ImageCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ImageCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *ImageCVE) GetNvdcvss() float32 {
	if x != nil {
		return x.Nvdcvss
	}
	return 0
}

func (x *ImageCVE) GetNvdScoreVersion() CvssScoreVersion {
	if x != nil {
		return x.NvdScoreVersion
	}
	return CvssScoreVersion_UNKNOWN_VERSION
}

func (x *ImageCVE) GetFirstImageOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstImageOccurrence
	}
	return nil
}

func (x *ImageCVE) GetState() VulnerabilityState {
	if x != nil {
		return x.State
	}
	return VulnerabilityState_OBSERVED
}

func (x *ImageCVE) GetIsFixable() bool {
	if x != nil {
		return x.IsFixable
	}
	return false
}

func (x *ImageCVE) GetHasFixedBy() isImageCVE_HasFixedBy {
	if x != nil {
		return x.HasFixedBy
	}
	return nil
}

func (x *ImageCVE) GetFixedBy() string {
	if x != nil {
		if x, ok := x.HasFixedBy.(*ImageCVE_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

func (x *ImageCVE) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ImageCVE) GetAdvisory() *Advisory {
	if x != nil {
		return x.Advisory
	}
	return nil
}

type isImageCVE_HasFixedBy interface {
	isImageCVE_HasFixedBy()
}

type ImageCVE_FixedBy struct {
	FixedBy string `protobuf:"bytes,12,opt,name=fixed_by,json=fixedBy,proto3,oneof"`
}

func (*ImageCVE_FixedBy) isImageCVE_HasFixedBy() {}

type NodeCVE struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // This field is composite of cve and operating system.
	CveBaseInfo     *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	OperatingSystem string                 `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Cvss            float32                `protobuf:"fixed32,4,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Severity        VulnerabilitySeverity  `protobuf:"varint,5,opt,name=severity,proto3,enum=v2.VulnerabilitySeverity" json:"severity,omitempty"`
	ImpactScore     float32                `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	Snoozed         bool                   `protobuf:"varint,7,opt,name=snoozed,proto3" json:"snoozed,omitempty"`
	SnoozeStart     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty"`
	Orphaned        bool                   `protobuf:"varint,10,opt,name=orphaned,proto3" json:"orphaned,omitempty"`
	OrphanedTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=orphaned_time,json=orphanedTime,proto3" json:"orphaned_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NodeCVE) Reset() {
	*x = NodeCVE{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCVE) ProtoMessage() {}

func (x *NodeCVE) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCVE.ProtoReflect.Descriptor instead.
func (*NodeCVE) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{6}
}

func (x *NodeCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *NodeCVE) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *NodeCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *NodeCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *NodeCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *NodeCVE) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *NodeCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *NodeCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *NodeCVE) GetOrphaned() bool {
	if x != nil {
		return x.Orphaned
	}
	return false
}

func (x *NodeCVE) GetOrphanedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrphanedTime
	}
	return nil
}

type ClusterCVE struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CveBaseInfo   *CVEInfo               `protobuf:"bytes,2,opt,name=cve_base_info,json=cveBaseInfo,proto3" json:"cve_base_info,omitempty"`
	Cvss          float32                `protobuf:"fixed32,3,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Severity      VulnerabilitySeverity  `protobuf:"varint,4,opt,name=severity,proto3,enum=v2.VulnerabilitySeverity" json:"severity,omitempty"`
	ImpactScore   float32                `protobuf:"fixed32,5,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	Snoozed       bool                   `protobuf:"varint,6,opt,name=snoozed,proto3" json:"snoozed,omitempty"`
	SnoozeStart   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=snooze_start,json=snoozeStart,proto3" json:"snooze_start,omitempty"`
	SnoozeExpiry  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=snooze_expiry,json=snoozeExpiry,proto3" json:"snooze_expiry,omitempty"`
	Type          VulnerabilityType      `protobuf:"varint,9,opt,name=type,proto3,enum=v2.VulnerabilityType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterCVE) Reset() {
	*x = ClusterCVE{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterCVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCVE) ProtoMessage() {}

func (x *ClusterCVE) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCVE.ProtoReflect.Descriptor instead.
func (*ClusterCVE) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterCVE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterCVE) GetCveBaseInfo() *CVEInfo {
	if x != nil {
		return x.CveBaseInfo
	}
	return nil
}

func (x *ClusterCVE) GetCvss() float32 {
	if x != nil {
		return x.Cvss
	}
	return 0
}

func (x *ClusterCVE) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		return x.Severity
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *ClusterCVE) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *ClusterCVE) GetSnoozed() bool {
	if x != nil {
		return x.Snoozed
	}
	return false
}

func (x *ClusterCVE) GetSnoozeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeStart
	}
	return nil
}

func (x *ClusterCVE) GetSnoozeExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.SnoozeExpiry
	}
	return nil
}

func (x *ClusterCVE) GetType() VulnerabilityType {
	if x != nil {
		return x.Type
	}
	return VulnerabilityType_UNKNOWN_VULNERABILITY
}

type CVSSScore struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Source Source                 `protobuf:"varint,1,opt,name=source,proto3,enum=v2.Source" json:"source,omitempty"`
	Url    string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Types that are valid to be assigned to CvssScore:
	//
	//	*CVSSScore_Cvssv2
	//	*CVSSScore_Cvssv3
	CvssScore     isCVSSScore_CvssScore `protobuf_oneof:"cvss_score"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVSSScore) Reset() {
	*x = CVSSScore{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSScore) ProtoMessage() {}

func (x *CVSSScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSScore.ProtoReflect.Descriptor instead.
func (*CVSSScore) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{8}
}

func (x *CVSSScore) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CVSSScore) GetCvssScore() isCVSSScore_CvssScore {
	if x != nil {
		return x.CvssScore
	}
	return nil
}

func (x *CVSSScore) GetCvssv2() *CVSSV2 {
	if x != nil {
		if x, ok := x.CvssScore.(*CVSSScore_Cvssv2); ok {
			return x.Cvssv2
		}
	}
	return nil
}

func (x *CVSSScore) GetCvssv3() *CVSSV3 {
	if x != nil {
		if x, ok := x.CvssScore.(*CVSSScore_Cvssv3); ok {
			return x.Cvssv3
		}
	}
	return nil
}

type isCVSSScore_CvssScore interface {
	isCVSSScore_CvssScore()
}

type CVSSScore_Cvssv2 struct {
	Cvssv2 *CVSSV2 `protobuf:"bytes,3,opt,name=cvssv2,proto3,oneof"`
}

type CVSSScore_Cvssv3 struct {
	Cvssv3 *CVSSV3 `protobuf:"bytes,4,opt,name=cvssv3,proto3,oneof"`
}

func (*CVSSScore_Cvssv2) isCVSSScore_CvssScore() {}

func (*CVSSScore_Cvssv3) isCVSSScore_CvssScore() {}

type CVSSV2 struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	Vector              string                  `protobuf:"bytes,1,opt,name=vector,proto3" json:"vector,omitempty"`
	AttackVector        CVSSV2_AttackVector     `protobuf:"varint,2,opt,name=attack_vector,json=attackVector,proto3,enum=v2.CVSSV2_AttackVector" json:"attack_vector,omitempty"`
	AccessComplexity    CVSSV2_AccessComplexity `protobuf:"varint,3,opt,name=access_complexity,json=accessComplexity,proto3,enum=v2.CVSSV2_AccessComplexity" json:"access_complexity,omitempty"`
	Authentication      CVSSV2_Authentication   `protobuf:"varint,4,opt,name=authentication,proto3,enum=v2.CVSSV2_Authentication" json:"authentication,omitempty"`
	Confidentiality     CVSSV2_Impact           `protobuf:"varint,5,opt,name=confidentiality,proto3,enum=v2.CVSSV2_Impact" json:"confidentiality,omitempty"`
	Integrity           CVSSV2_Impact           `protobuf:"varint,6,opt,name=integrity,proto3,enum=v2.CVSSV2_Impact" json:"integrity,omitempty"`
	Availability        CVSSV2_Impact           `protobuf:"varint,7,opt,name=availability,proto3,enum=v2.CVSSV2_Impact" json:"availability,omitempty"`
	ExploitabilityScore float32                 `protobuf:"fixed32,8,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float32                 `protobuf:"fixed32,9,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	Score               float32                 `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Severity            CVSSV2_Severity         `protobuf:"varint,11,opt,name=severity,proto3,enum=v2.CVSSV2_Severity" json:"severity,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CVSSV2) Reset() {
	*x = CVSSV2{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV2) ProtoMessage() {}

func (x *CVSSV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSV2.ProtoReflect.Descriptor instead.
func (*CVSSV2) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{9}
}

func (x *CVSSV2) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *CVSSV2) GetAttackVector() CVSSV2_AttackVector {
	if x != nil {
		return x.AttackVector
	}
	return CVSSV2_ATTACK_LOCAL
}

func (x *CVSSV2) GetAccessComplexity() CVSSV2_AccessComplexity {
	if x != nil {
		return x.AccessComplexity
	}
	return CVSSV2_ACCESS_HIGH
}

func (x *CVSSV2) GetAuthentication() CVSSV2_Authentication {
	if x != nil {
		return x.Authentication
	}
	return CVSSV2_AUTH_MULTIPLE
}

func (x *CVSSV2) GetConfidentiality() CVSSV2_Impact {
	if x != nil {
		return x.Confidentiality
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetIntegrity() CVSSV2_Impact {
	if x != nil {
		return x.Integrity
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetAvailability() CVSSV2_Impact {
	if x != nil {
		return x.Availability
	}
	return CVSSV2_IMPACT_NONE
}

func (x *CVSSV2) GetExploitabilityScore() float32 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVSSV2) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *CVSSV2) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CVSSV2) GetSeverity() CVSSV2_Severity {
	if x != nil {
		return x.Severity
	}
	return CVSSV2_UNKNOWN
}

type CVSSV3 struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Vector              string                 `protobuf:"bytes,1,opt,name=vector,proto3" json:"vector,omitempty"`
	ExploitabilityScore float32                `protobuf:"fixed32,2,opt,name=exploitability_score,json=exploitabilityScore,proto3" json:"exploitability_score,omitempty"`
	ImpactScore         float32                `protobuf:"fixed32,3,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	AttackVector        CVSSV3_AttackVector    `protobuf:"varint,4,opt,name=attack_vector,json=attackVector,proto3,enum=v2.CVSSV3_AttackVector" json:"attack_vector,omitempty"`
	AttackComplexity    CVSSV3_Complexity      `protobuf:"varint,5,opt,name=attack_complexity,json=attackComplexity,proto3,enum=v2.CVSSV3_Complexity" json:"attack_complexity,omitempty"`
	PrivilegesRequired  CVSSV3_Privileges      `protobuf:"varint,6,opt,name=privileges_required,json=privilegesRequired,proto3,enum=v2.CVSSV3_Privileges" json:"privileges_required,omitempty"`
	UserInteraction     CVSSV3_UserInteraction `protobuf:"varint,7,opt,name=user_interaction,json=userInteraction,proto3,enum=v2.CVSSV3_UserInteraction" json:"user_interaction,omitempty"`
	Scope               CVSSV3_Scope           `protobuf:"varint,8,opt,name=scope,proto3,enum=v2.CVSSV3_Scope" json:"scope,omitempty"`
	Confidentiality     CVSSV3_Impact          `protobuf:"varint,9,opt,name=confidentiality,proto3,enum=v2.CVSSV3_Impact" json:"confidentiality,omitempty"`
	Integrity           CVSSV3_Impact          `protobuf:"varint,10,opt,name=integrity,proto3,enum=v2.CVSSV3_Impact" json:"integrity,omitempty"`
	Availability        CVSSV3_Impact          `protobuf:"varint,11,opt,name=availability,proto3,enum=v2.CVSSV3_Impact" json:"availability,omitempty"`
	Score               float32                `protobuf:"fixed32,12,opt,name=score,proto3" json:"score,omitempty"`
	Severity            CVSSV3_Severity        `protobuf:"varint,13,opt,name=severity,proto3,enum=v2.CVSSV3_Severity" json:"severity,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CVSSV3) Reset() {
	*x = CVSSV3{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV3) ProtoMessage() {}

func (x *CVSSV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSSV3.ProtoReflect.Descriptor instead.
func (*CVSSV3) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{10}
}

func (x *CVSSV3) GetVector() string {
	if x != nil {
		return x.Vector
	}
	return ""
}

func (x *CVSSV3) GetExploitabilityScore() float32 {
	if x != nil {
		return x.ExploitabilityScore
	}
	return 0
}

func (x *CVSSV3) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *CVSSV3) GetAttackVector() CVSSV3_AttackVector {
	if x != nil {
		return x.AttackVector
	}
	return CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) GetAttackComplexity() CVSSV3_Complexity {
	if x != nil {
		return x.AttackComplexity
	}
	return CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) GetPrivilegesRequired() CVSSV3_Privileges {
	if x != nil {
		return x.PrivilegesRequired
	}
	return CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) GetUserInteraction() CVSSV3_UserInteraction {
	if x != nil {
		return x.UserInteraction
	}
	return CVSSV3_UI_NONE
}

func (x *CVSSV3) GetScope() CVSSV3_Scope {
	if x != nil {
		return x.Scope
	}
	return CVSSV3_UNCHANGED
}

func (x *CVSSV3) GetConfidentiality() CVSSV3_Impact {
	if x != nil {
		return x.Confidentiality
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetIntegrity() CVSSV3_Impact {
	if x != nil {
		return x.Integrity
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetAvailability() CVSSV3_Impact {
	if x != nil {
		return x.Availability
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CVSSV3) GetSeverity() CVSSV3_Severity {
	if x != nil {
		return x.Severity
	}
	return CVSSV3_UNKNOWN
}

type CVEInfo_Reference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	URI           string                 `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Tags          []string               `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVEInfo_Reference) Reset() {
	*x = CVEInfo_Reference{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEInfo_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo_Reference) ProtoMessage() {}

func (x *CVEInfo_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo_Reference.ProtoReflect.Descriptor instead.
func (*CVEInfo_Reference) Descriptor() ([]byte, []int) {
	return file_api_v2_vulnerability_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CVEInfo_Reference) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *CVEInfo_Reference) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_api_v2_vulnerability_proto protoreflect.FileDescriptor

const file_api_v2_vulnerability_proto_rawDesc = "" +
	"\n" +
	"\x1aapi/v2/vulnerability.proto\x12\x02v2\x1a\x17api/v2/vuln_state.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9d\b\n" +
	"\x15EmbeddedVulnerability\x12\x10\n" +
	"\x03cve\x18\x01 \x01(\tR\x03cve\x12(\n" +
	"\badvisory\x18\x02 \x01(\v2\f.v2.AdvisoryR\badvisory\x12\x12\n" +
	"\x04cvss\x18\x03 \x01(\x02R\x04cvss\x12\x18\n" +
	"\asummary\x18\x04 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x05 \x01(\tR\x04link\x12\x1b\n" +
	"\bfixed_by\x18\x06 \x01(\tH\x00R\afixedBy\x12#\n" +
	"\acvss_v3\x18\a \x01(\v2\n" +
	".v2.CVSSV3R\x06cvssV3\x12=\n" +
	"\fpublished_on\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedOn\x12?\n" +
	"\rlast_modified\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12D\n" +
	"\x12vulnerability_type\x18\n" +
	" \x01(\x0e2\x15.v2.VulnerabilityTypeR\x11vulnerabilityType\x12F\n" +
	"\x13vulnerability_types\x18\v \x03(\x0e2\x15.v2.VulnerabilityTypeR\x12vulnerabilityTypes\x12\x1e\n" +
	"\n" +
	"suppressed\x18\f \x01(\bR\n" +
	"suppressed\x12K\n" +
	"\x13suppress_activation\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\x12suppressActivation\x12C\n" +
	"\x0fsuppress_expiry\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\x0esuppressExpiry\x12R\n" +
	"\x17first_system_occurrence\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\x15firstSystemOccurrence\x12P\n" +
	"\x16first_image_occurrence\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\x14firstImageOccurrence\x125\n" +
	"\bseverity\x18\x11 \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12,\n" +
	"\x05state\x18\x12 \x01(\x0e2\x16.v2.VulnerabilityStateR\x05state\x120\n" +
	"\fcvss_metrics\x18\x13 \x03(\v2\r.v2.CVSSScoreR\vcvssMetrics\x12\x19\n" +
	"\bnvd_cvss\x18\x14 \x01(\x02R\anvdCvss\x12\x1c\n" +
	"\x04epss\x18\x15 \x01(\v2\b.v2.EPSSR\x04epssB\x0e\n" +
	"\fset_fixed_by\"\xd6\x02\n" +
	"\x11NodeVulnerability\x12/\n" +
	"\rcve_base_info\x18\x01 \x01(\v2\v.v2.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x02 \x01(\x02R\x04cvss\x125\n" +
	"\bseverity\x18\x03 \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12\x1b\n" +
	"\bfixed_by\x18\x04 \x01(\tH\x00R\afixedBy\x12\x18\n" +
	"\asnoozed\x18\x05 \x01(\bR\asnoozed\x12=\n" +
	"\fsnooze_start\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vsnoozeStart\x12?\n" +
	"\rsnooze_expiry\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\fsnoozeExpiryB\x0e\n" +
	"\fset_fixed_by\"Z\n" +
	"\x04EPSS\x12)\n" +
	"\x10epss_probability\x18\x01 \x01(\x02R\x0fepssProbability\x12'\n" +
	"\x0fepss_percentile\x18\x02 \x01(\x02R\x0eepssPercentile\"\xf4\x04\n" +
	"\aCVEInfo\x12\x10\n" +
	"\x03cve\x18\x01 \x01(\tR\x03cve\x12\x18\n" +
	"\asummary\x18\x02 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12=\n" +
	"\fpublished_on\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedOn\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12?\n" +
	"\rlast_modified\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12=\n" +
	"\rscore_version\x18\a \x01(\x0e2\x18.v2.CVEInfo.ScoreVersionR\fscoreVersion\x12#\n" +
	"\acvss_v2\x18\b \x01(\v2\n" +
	".v2.CVSSV2R\x06cvssV2\x12#\n" +
	"\acvss_v3\x18\t \x01(\v2\n" +
	".v2.CVSSV3R\x06cvssV3\x125\n" +
	"\n" +
	"references\x18\n" +
	" \x03(\v2\x15.v2.CVEInfo.ReferenceR\n" +
	"references\x120\n" +
	"\fcvss_metrics\x18\v \x03(\v2\r.v2.CVSSScoreR\vcvssMetrics\x12\x1c\n" +
	"\x04epss\x18\f \x01(\v2\b.v2.EPSSR\x04epss\x1a1\n" +
	"\tReference\x12\x10\n" +
	"\x03URI\x18\x01 \x01(\tR\x03URI\x12\x12\n" +
	"\x04tags\x18\x02 \x03(\tR\x04tags\"+\n" +
	"\fScoreVersion\x12\x06\n" +
	"\x02V2\x10\x00\x12\x06\n" +
	"\x02V3\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x02\"2\n" +
	"\bAdvisory\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04link\x18\x02 \x01(\tR\x04link\"\xc9\x04\n" +
	"\bImageCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bimage_id\x18\x02 \x01(\tR\aimageId\x12/\n" +
	"\rcve_base_info\x18\x03 \x01(\v2\v.v2.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x04 \x01(\x02R\x04cvss\x125\n" +
	"\bseverity\x18\x05 \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x06 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\anvdcvss\x18\a \x01(\x02R\anvdcvss\x12@\n" +
	"\x11nvd_score_version\x18\b \x01(\x0e2\x14.v2.CvssScoreVersionR\x0fnvdScoreVersion\x12P\n" +
	"\x16first_image_occurrence\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x14firstImageOccurrence\x12,\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\x16.v2.VulnerabilityStateR\x05state\x12\x1d\n" +
	"\n" +
	"is_fixable\x18\v \x01(\bR\tisFixable\x12\x1b\n" +
	"\bfixed_by\x18\f \x01(\tH\x00R\afixedBy\x12!\n" +
	"\fcomponent_id\x18\r \x01(\tR\vcomponentId\x12(\n" +
	"\badvisory\x18\x0e \x01(\v2\f.v2.AdvisoryR\badvisoryB\x0e\n" +
	"\fhas_fixed_by\"\xda\x03\n" +
	"\aNodeCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\rcve_base_info\x18\x02 \x01(\v2\v.v2.CVEInfoR\vcveBaseInfo\x12)\n" +
	"\x10operating_system\x18\x03 \x01(\tR\x0foperatingSystem\x12\x12\n" +
	"\x04cvss\x18\x04 \x01(\x02R\x04cvss\x125\n" +
	"\bseverity\x18\x05 \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x06 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\asnoozed\x18\a \x01(\bR\asnoozed\x12=\n" +
	"\fsnooze_start\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vsnoozeStart\x12?\n" +
	"\rsnooze_expiry\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fsnoozeExpiry\x12\x1a\n" +
	"\borphaned\x18\n" +
	" \x01(\bR\borphaned\x12?\n" +
	"\rorphaned_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\forphanedTime\"\x80\x03\n" +
	"\n" +
	"ClusterCVE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\rcve_base_info\x18\x02 \x01(\v2\v.v2.CVEInfoR\vcveBaseInfo\x12\x12\n" +
	"\x04cvss\x18\x03 \x01(\x02R\x04cvss\x125\n" +
	"\bseverity\x18\x04 \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12!\n" +
	"\fimpact_score\x18\x05 \x01(\x02R\vimpactScore\x12\x18\n" +
	"\asnoozed\x18\x06 \x01(\bR\asnoozed\x12=\n" +
	"\fsnooze_start\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vsnoozeStart\x12?\n" +
	"\rsnooze_expiry\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\fsnoozeExpiry\x12)\n" +
	"\x04type\x18\t \x01(\x0e2\x15.v2.VulnerabilityTypeR\x04type\"\x9b\x01\n" +
	"\tCVSSScore\x12\"\n" +
	"\x06source\x18\x01 \x01(\x0e2\n" +
	".v2.SourceR\x06source\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12$\n" +
	"\x06cvssv2\x18\x03 \x01(\v2\n" +
	".v2.CVSSV2H\x00R\x06cvssv2\x12$\n" +
	"\x06cvssv3\x18\x04 \x01(\v2\n" +
	".v2.CVSSV3H\x00R\x06cvssv3B\f\n" +
	"\n" +
	"cvss_score\"\x81\a\n" +
	"\x06CVSSV2\x12\x16\n" +
	"\x06vector\x18\x01 \x01(\tR\x06vector\x12<\n" +
	"\rattack_vector\x18\x02 \x01(\x0e2\x17.v2.CVSSV2.AttackVectorR\fattackVector\x12H\n" +
	"\x11access_complexity\x18\x03 \x01(\x0e2\x1b.v2.CVSSV2.AccessComplexityR\x10accessComplexity\x12A\n" +
	"\x0eauthentication\x18\x04 \x01(\x0e2\x19.v2.CVSSV2.AuthenticationR\x0eauthentication\x12;\n" +
	"\x0fconfidentiality\x18\x05 \x01(\x0e2\x11.v2.CVSSV2.ImpactR\x0fconfidentiality\x12/\n" +
	"\tintegrity\x18\x06 \x01(\x0e2\x11.v2.CVSSV2.ImpactR\tintegrity\x125\n" +
	"\favailability\x18\a \x01(\x0e2\x11.v2.CVSSV2.ImpactR\favailability\x121\n" +
	"\x14exploitability_score\x18\b \x01(\x02R\x13exploitabilityScore\x12!\n" +
	"\fimpact_score\x18\t \x01(\x02R\vimpactScore\x12\x14\n" +
	"\x05score\x18\n" +
	" \x01(\x02R\x05score\x12/\n" +
	"\bseverity\x18\v \x01(\x0e2\x13.v2.CVSSV2.SeverityR\bseverity\"B\n" +
	"\x06Impact\x12\x0f\n" +
	"\vIMPACT_NONE\x10\x00\x12\x12\n" +
	"\x0eIMPACT_PARTIAL\x10\x01\x12\x13\n" +
	"\x0fIMPACT_COMPLETE\x10\x02\"I\n" +
	"\fAttackVector\x12\x10\n" +
	"\fATTACK_LOCAL\x10\x00\x12\x13\n" +
	"\x0fATTACK_ADJACENT\x10\x01\x12\x12\n" +
	"\x0eATTACK_NETWORK\x10\x02\"F\n" +
	"\x10AccessComplexity\x12\x0f\n" +
	"\vACCESS_HIGH\x10\x00\x12\x11\n" +
	"\rACCESS_MEDIUM\x10\x01\x12\x0e\n" +
	"\n" +
	"ACCESS_LOW\x10\x02\"C\n" +
	"\x0eAuthentication\x12\x11\n" +
	"\rAUTH_MULTIPLE\x10\x00\x12\x0f\n" +
	"\vAUTH_SINGLE\x10\x01\x12\r\n" +
	"\tAUTH_NONE\x10\x02\"6\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03LOW\x10\x01\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03\"\xdd\b\n" +
	"\x06CVSSV3\x12\x16\n" +
	"\x06vector\x18\x01 \x01(\tR\x06vector\x121\n" +
	"\x14exploitability_score\x18\x02 \x01(\x02R\x13exploitabilityScore\x12!\n" +
	"\fimpact_score\x18\x03 \x01(\x02R\vimpactScore\x12<\n" +
	"\rattack_vector\x18\x04 \x01(\x0e2\x17.v2.CVSSV3.AttackVectorR\fattackVector\x12B\n" +
	"\x11attack_complexity\x18\x05 \x01(\x0e2\x15.v2.CVSSV3.ComplexityR\x10attackComplexity\x12F\n" +
	"\x13privileges_required\x18\x06 \x01(\x0e2\x15.v2.CVSSV3.PrivilegesR\x12privilegesRequired\x12E\n" +
	"\x10user_interaction\x18\a \x01(\x0e2\x1a.v2.CVSSV3.UserInteractionR\x0fuserInteraction\x12&\n" +
	"\x05scope\x18\b \x01(\x0e2\x10.v2.CVSSV3.ScopeR\x05scope\x12;\n" +
	"\x0fconfidentiality\x18\t \x01(\x0e2\x11.v2.CVSSV3.ImpactR\x0fconfidentiality\x12/\n" +
	"\tintegrity\x18\n" +
	" \x01(\x0e2\x11.v2.CVSSV3.ImpactR\tintegrity\x125\n" +
	"\favailability\x18\v \x01(\x0e2\x11.v2.CVSSV3.ImpactR\favailability\x12\x14\n" +
	"\x05score\x18\f \x01(\x02R\x05score\x12/\n" +
	"\bseverity\x18\r \x01(\x0e2\x13.v2.CVSSV3.SeverityR\bseverity\":\n" +
	"\x06Impact\x12\x0f\n" +
	"\vIMPACT_NONE\x10\x00\x12\x0e\n" +
	"\n" +
	"IMPACT_LOW\x10\x01\x12\x0f\n" +
	"\vIMPACT_HIGH\x10\x02\"^\n" +
	"\fAttackVector\x12\x10\n" +
	"\fATTACK_LOCAL\x10\x00\x12\x13\n" +
	"\x0fATTACK_ADJACENT\x10\x01\x12\x12\n" +
	"\x0eATTACK_NETWORK\x10\x02\x12\x13\n" +
	"\x0fATTACK_PHYSICAL\x10\x03\"5\n" +
	"\n" +
	"Complexity\x12\x12\n" +
	"\x0eCOMPLEXITY_LOW\x10\x00\x12\x13\n" +
	"\x0fCOMPLEXITY_HIGH\x10\x01\"G\n" +
	"\n" +
	"Privileges\x12\x12\n" +
	"\x0ePRIVILEGE_NONE\x10\x00\x12\x11\n" +
	"\rPRIVILEGE_LOW\x10\x01\x12\x12\n" +
	"\x0ePRIVILEGE_HIGH\x10\x02\"/\n" +
	"\x0fUserInteraction\x12\v\n" +
	"\aUI_NONE\x10\x00\x12\x0f\n" +
	"\vUI_REQUIRED\x10\x01\"#\n" +
	"\x05Scope\x12\r\n" +
	"\tUNCHANGED\x10\x00\x12\v\n" +
	"\aCHANGED\x10\x01\"N\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\a\n" +
	"\x03LOW\x10\x02\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\x12\f\n" +
	"\bCRITICAL\x10\x05*\xac\x01\n" +
	"\x11VulnerabilityType\x12\x19\n" +
	"\x15UNKNOWN_VULNERABILITY\x10\x00\x12\x17\n" +
	"\x13IMAGE_VULNERABILITY\x10\x01\x12\x15\n" +
	"\x11K8S_VULNERABILITY\x10\x02\x12\x17\n" +
	"\x13ISTIO_VULNERABILITY\x10\x03\x12\x16\n" +
	"\x12NODE_VULNERABILITY\x10\x04\x12\x1b\n" +
	"\x17OPENSHIFT_VULNERABILITY\x10\x05*\xcb\x01\n" +
	"\x15VulnerabilitySeverity\x12\"\n" +
	"\x1eUNKNOWN_VULNERABILITY_SEVERITY\x10\x00\x12\x1e\n" +
	"\x1aLOW_VULNERABILITY_SEVERITY\x10\x01\x12#\n" +
	"\x1fMODERATE_VULNERABILITY_SEVERITY\x10\x02\x12$\n" +
	" IMPORTANT_VULNERABILITY_SEVERITY\x10\x03\x12#\n" +
	"\x1fCRITICAL_VULNERABILITY_SEVERITY\x10\x04*P\n" +
	"\x06Source\x12\x12\n" +
	"\x0eSOURCE_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eSOURCE_RED_HAT\x10\x01\x12\x0e\n" +
	"\n" +
	"SOURCE_OSV\x10\x02\x12\x0e\n" +
	"\n" +
	"SOURCE_NVD\x10\x03*7\n" +
	"\x10CvssScoreVersion\x12\x13\n" +
	"\x0fUNKNOWN_VERSION\x10\x00\x12\x06\n" +
	"\x02V2\x10\x01\x12\x06\n" +
	"\x02V3\x10\x02B'\n" +
	"\x18io.stackrox.proto.api.v2Z\v./api/v2;v2b\x06proto3"

var (
	file_api_v2_vulnerability_proto_rawDescOnce sync.Once
	file_api_v2_vulnerability_proto_rawDescData []byte
)

func file_api_v2_vulnerability_proto_rawDescGZIP() []byte {
	file_api_v2_vulnerability_proto_rawDescOnce.Do(func() {
		file_api_v2_vulnerability_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v2_vulnerability_proto_rawDesc), len(file_api_v2_vulnerability_proto_rawDesc)))
	})
	return file_api_v2_vulnerability_proto_rawDescData
}

var file_api_v2_vulnerability_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_api_v2_vulnerability_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_v2_vulnerability_proto_goTypes = []any{
	(VulnerabilityType)(0),        // 0: v2.VulnerabilityType
	(VulnerabilitySeverity)(0),    // 1: v2.VulnerabilitySeverity
	(Source)(0),                   // 2: v2.Source
	(CvssScoreVersion)(0),         // 3: v2.CvssScoreVersion
	(CVEInfo_ScoreVersion)(0),     // 4: v2.CVEInfo.ScoreVersion
	(CVSSV2_Impact)(0),            // 5: v2.CVSSV2.Impact
	(CVSSV2_AttackVector)(0),      // 6: v2.CVSSV2.AttackVector
	(CVSSV2_AccessComplexity)(0),  // 7: v2.CVSSV2.AccessComplexity
	(CVSSV2_Authentication)(0),    // 8: v2.CVSSV2.Authentication
	(CVSSV2_Severity)(0),          // 9: v2.CVSSV2.Severity
	(CVSSV3_Impact)(0),            // 10: v2.CVSSV3.Impact
	(CVSSV3_AttackVector)(0),      // 11: v2.CVSSV3.AttackVector
	(CVSSV3_Complexity)(0),        // 12: v2.CVSSV3.Complexity
	(CVSSV3_Privileges)(0),        // 13: v2.CVSSV3.Privileges
	(CVSSV3_UserInteraction)(0),   // 14: v2.CVSSV3.UserInteraction
	(CVSSV3_Scope)(0),             // 15: v2.CVSSV3.Scope
	(CVSSV3_Severity)(0),          // 16: v2.CVSSV3.Severity
	(*EmbeddedVulnerability)(nil), // 17: v2.EmbeddedVulnerability
	(*NodeVulnerability)(nil),     // 18: v2.NodeVulnerability
	(*EPSS)(nil),                  // 19: v2.EPSS
	(*CVEInfo)(nil),               // 20: v2.CVEInfo
	(*Advisory)(nil),              // 21: v2.Advisory
	(*ImageCVE)(nil),              // 22: v2.ImageCVE
	(*NodeCVE)(nil),               // 23: v2.NodeCVE
	(*ClusterCVE)(nil),            // 24: v2.ClusterCVE
	(*CVSSScore)(nil),             // 25: v2.CVSSScore
	(*CVSSV2)(nil),                // 26: v2.CVSSV2
	(*CVSSV3)(nil),                // 27: v2.CVSSV3
	(*CVEInfo_Reference)(nil),     // 28: v2.CVEInfo.Reference
	(*timestamppb.Timestamp)(nil), // 29: google.protobuf.Timestamp
	(VulnerabilityState)(0),       // 30: v2.VulnerabilityState
}
var file_api_v2_vulnerability_proto_depIdxs = []int32{
	21, // 0: v2.EmbeddedVulnerability.advisory:type_name -> v2.Advisory
	27, // 1: v2.EmbeddedVulnerability.cvss_v3:type_name -> v2.CVSSV3
	29, // 2: v2.EmbeddedVulnerability.published_on:type_name -> google.protobuf.Timestamp
	29, // 3: v2.EmbeddedVulnerability.last_modified:type_name -> google.protobuf.Timestamp
	0,  // 4: v2.EmbeddedVulnerability.vulnerability_type:type_name -> v2.VulnerabilityType
	0,  // 5: v2.EmbeddedVulnerability.vulnerability_types:type_name -> v2.VulnerabilityType
	29, // 6: v2.EmbeddedVulnerability.suppress_activation:type_name -> google.protobuf.Timestamp
	29, // 7: v2.EmbeddedVulnerability.suppress_expiry:type_name -> google.protobuf.Timestamp
	29, // 8: v2.EmbeddedVulnerability.first_system_occurrence:type_name -> google.protobuf.Timestamp
	29, // 9: v2.EmbeddedVulnerability.first_image_occurrence:type_name -> google.protobuf.Timestamp
	1,  // 10: v2.EmbeddedVulnerability.severity:type_name -> v2.VulnerabilitySeverity
	30, // 11: v2.EmbeddedVulnerability.state:type_name -> v2.VulnerabilityState
	25, // 12: v2.EmbeddedVulnerability.cvss_metrics:type_name -> v2.CVSSScore
	19, // 13: v2.EmbeddedVulnerability.epss:type_name -> v2.EPSS
	20, // 14: v2.NodeVulnerability.cve_base_info:type_name -> v2.CVEInfo
	1,  // 15: v2.NodeVulnerability.severity:type_name -> v2.VulnerabilitySeverity
	29, // 16: v2.NodeVulnerability.snooze_start:type_name -> google.protobuf.Timestamp
	29, // 17: v2.NodeVulnerability.snooze_expiry:type_name -> google.protobuf.Timestamp
	29, // 18: v2.CVEInfo.published_on:type_name -> google.protobuf.Timestamp
	29, // 19: v2.CVEInfo.created_at:type_name -> google.protobuf.Timestamp
	29, // 20: v2.CVEInfo.last_modified:type_name -> google.protobuf.Timestamp
	4,  // 21: v2.CVEInfo.score_version:type_name -> v2.CVEInfo.ScoreVersion
	26, // 22: v2.CVEInfo.cvss_v2:type_name -> v2.CVSSV2
	27, // 23: v2.CVEInfo.cvss_v3:type_name -> v2.CVSSV3
	28, // 24: v2.CVEInfo.references:type_name -> v2.CVEInfo.Reference
	25, // 25: v2.CVEInfo.cvss_metrics:type_name -> v2.CVSSScore
	19, // 26: v2.CVEInfo.epss:type_name -> v2.EPSS
	20, // 27: v2.ImageCVE.cve_base_info:type_name -> v2.CVEInfo
	1,  // 28: v2.ImageCVE.severity:type_name -> v2.VulnerabilitySeverity
	3,  // 29: v2.ImageCVE.nvd_score_version:type_name -> v2.CvssScoreVersion
	29, // 30: v2.ImageCVE.first_image_occurrence:type_name -> google.protobuf.Timestamp
	30, // 31: v2.ImageCVE.state:type_name -> v2.VulnerabilityState
	21, // 32: v2.ImageCVE.advisory:type_name -> v2.Advisory
	20, // 33: v2.NodeCVE.cve_base_info:type_name -> v2.CVEInfo
	1,  // 34: v2.NodeCVE.severity:type_name -> v2.VulnerabilitySeverity
	29, // 35: v2.NodeCVE.snooze_start:type_name -> google.protobuf.Timestamp
	29, // 36: v2.NodeCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	29, // 37: v2.NodeCVE.orphaned_time:type_name -> google.protobuf.Timestamp
	20, // 38: v2.ClusterCVE.cve_base_info:type_name -> v2.CVEInfo
	1,  // 39: v2.ClusterCVE.severity:type_name -> v2.VulnerabilitySeverity
	29, // 40: v2.ClusterCVE.snooze_start:type_name -> google.protobuf.Timestamp
	29, // 41: v2.ClusterCVE.snooze_expiry:type_name -> google.protobuf.Timestamp
	0,  // 42: v2.ClusterCVE.type:type_name -> v2.VulnerabilityType
	2,  // 43: v2.CVSSScore.source:type_name -> v2.Source
	26, // 44: v2.CVSSScore.cvssv2:type_name -> v2.CVSSV2
	27, // 45: v2.CVSSScore.cvssv3:type_name -> v2.CVSSV3
	6,  // 46: v2.CVSSV2.attack_vector:type_name -> v2.CVSSV2.AttackVector
	7,  // 47: v2.CVSSV2.access_complexity:type_name -> v2.CVSSV2.AccessComplexity
	8,  // 48: v2.CVSSV2.authentication:type_name -> v2.CVSSV2.Authentication
	5,  // 49: v2.CVSSV2.confidentiality:type_name -> v2.CVSSV2.Impact
	5,  // 50: v2.CVSSV2.integrity:type_name -> v2.CVSSV2.Impact
	5,  // 51: v2.CVSSV2.availability:type_name -> v2.CVSSV2.Impact
	9,  // 52: v2.CVSSV2.severity:type_name -> v2.CVSSV2.Severity
	11, // 53: v2.CVSSV3.attack_vector:type_name -> v2.CVSSV3.AttackVector
	12, // 54: v2.CVSSV3.attack_complexity:type_name -> v2.CVSSV3.Complexity
	13, // 55: v2.CVSSV3.privileges_required:type_name -> v2.CVSSV3.Privileges
	14, // 56: v2.CVSSV3.user_interaction:type_name -> v2.CVSSV3.UserInteraction
	15, // 57: v2.CVSSV3.scope:type_name -> v2.CVSSV3.Scope
	10, // 58: v2.CVSSV3.confidentiality:type_name -> v2.CVSSV3.Impact
	10, // 59: v2.CVSSV3.integrity:type_name -> v2.CVSSV3.Impact
	10, // 60: v2.CVSSV3.availability:type_name -> v2.CVSSV3.Impact
	16, // 61: v2.CVSSV3.severity:type_name -> v2.CVSSV3.Severity
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_api_v2_vulnerability_proto_init() }
func file_api_v2_vulnerability_proto_init() {
	if File_api_v2_vulnerability_proto != nil {
		return
	}
	file_api_v2_vuln_state_proto_init()
	file_api_v2_vulnerability_proto_msgTypes[0].OneofWrappers = []any{
		(*EmbeddedVulnerability_FixedBy)(nil),
	}
	file_api_v2_vulnerability_proto_msgTypes[1].OneofWrappers = []any{
		(*NodeVulnerability_FixedBy)(nil),
	}
	file_api_v2_vulnerability_proto_msgTypes[5].OneofWrappers = []any{
		(*ImageCVE_FixedBy)(nil),
	}
	file_api_v2_vulnerability_proto_msgTypes[8].OneofWrappers = []any{
		(*CVSSScore_Cvssv2)(nil),
		(*CVSSScore_Cvssv3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v2_vulnerability_proto_rawDesc), len(file_api_v2_vulnerability_proto_rawDesc)),
			NumEnums:      17,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v2_vulnerability_proto_goTypes,
		DependencyIndexes: file_api_v2_vulnerability_proto_depIdxs,
		EnumInfos:         file_api_v2_vulnerability_proto_enumTypes,
		MessageInfos:      file_api_v2_vulnerability_proto_msgTypes,
	}.Build()
	File_api_v2_vulnerability_proto = out.File
	file_api_v2_vulnerability_proto_goTypes = nil
	file_api_v2_vulnerability_proto_depIdxs = nil
}
