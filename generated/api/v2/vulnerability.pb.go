// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/v2/vulnerability.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VulnerabilityType int32

const (
	VulnerabilityType_UNKNOWN_VULNERABILITY         VulnerabilityType = 0
	VulnerabilityType_IMAGE_VULNERABILITY           VulnerabilityType = 1
	VulnerabilityType_K8S_VULNERABILITY             VulnerabilityType = 2
	VulnerabilityType_ISTIO_VULNERABILITY           VulnerabilityType = 3
	VulnerabilityType_NODE_VULNERABILITY            VulnerabilityType = 4
	VulnerabilityType_OPENSHIFT_VULNERABILITY       VulnerabilityType = 5
	VulnerabilityType_VIRTUAL_MACHINE_VULNERABILITY VulnerabilityType = 6
)

// Enum value maps for VulnerabilityType.
var (
	VulnerabilityType_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY",
		1: "IMAGE_VULNERABILITY",
		2: "K8S_VULNERABILITY",
		3: "ISTIO_VULNERABILITY",
		4: "NODE_VULNERABILITY",
		5: "OPENSHIFT_VULNERABILITY",
		6: "VIRTUAL_MACHINE_VULNERABILITY",
	}
	VulnerabilityType_value = map[string]int32{
		"UNKNOWN_VULNERABILITY":         0,
		"IMAGE_VULNERABILITY":           1,
		"K8S_VULNERABILITY":             2,
		"ISTIO_VULNERABILITY":           3,
		"NODE_VULNERABILITY":            4,
		"OPENSHIFT_VULNERABILITY":       5,
		"VIRTUAL_MACHINE_VULNERABILITY": 6,
	}
)

func (x VulnerabilityType) Enum() *VulnerabilityType {
	p := new(VulnerabilityType)
	*p = x
	return p
}

func (x VulnerabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[0].Descriptor()
}

func (VulnerabilityType) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[0]
}

func (x VulnerabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type VulnerabilitySeverity int32

const (
	VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY   VulnerabilitySeverity = 0
	VulnerabilitySeverity_LOW_VULNERABILITY_SEVERITY       VulnerabilitySeverity = 1
	VulnerabilitySeverity_MODERATE_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 2
	VulnerabilitySeverity_IMPORTANT_VULNERABILITY_SEVERITY VulnerabilitySeverity = 3
	VulnerabilitySeverity_CRITICAL_VULNERABILITY_SEVERITY  VulnerabilitySeverity = 4
)

// Enum value maps for VulnerabilitySeverity.
var (
	VulnerabilitySeverity_name = map[int32]string{
		0: "UNKNOWN_VULNERABILITY_SEVERITY",
		1: "LOW_VULNERABILITY_SEVERITY",
		2: "MODERATE_VULNERABILITY_SEVERITY",
		3: "IMPORTANT_VULNERABILITY_SEVERITY",
		4: "CRITICAL_VULNERABILITY_SEVERITY",
	}
	VulnerabilitySeverity_value = map[string]int32{
		"UNKNOWN_VULNERABILITY_SEVERITY":   0,
		"LOW_VULNERABILITY_SEVERITY":       1,
		"MODERATE_VULNERABILITY_SEVERITY":  2,
		"IMPORTANT_VULNERABILITY_SEVERITY": 3,
		"CRITICAL_VULNERABILITY_SEVERITY":  4,
	}
)

func (x VulnerabilitySeverity) Enum() *VulnerabilitySeverity {
	p := new(VulnerabilitySeverity)
	*p = x
	return p
}

func (x VulnerabilitySeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulnerabilitySeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[1].Descriptor()
}

func (VulnerabilitySeverity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[1]
}

func (x VulnerabilitySeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SOURCE_RED_HAT Source = 1
	Source_SOURCE_OSV     Source = 2
	Source_SOURCE_NVD     Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SOURCE_RED_HAT",
		2: "SOURCE_OSV",
		3: "SOURCE_NVD",
	}
	Source_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SOURCE_RED_HAT": 1,
		"SOURCE_OSV":     2,
		"SOURCE_NVD":     3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[2].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[2]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Impact int32

const (
	CVSSV3_IMPACT_NONE CVSSV3_Impact = 0
	CVSSV3_IMPACT_LOW  CVSSV3_Impact = 1
	CVSSV3_IMPACT_HIGH CVSSV3_Impact = 2
)

// Enum value maps for CVSSV3_Impact.
var (
	CVSSV3_Impact_name = map[int32]string{
		0: "IMPACT_NONE",
		1: "IMPACT_LOW",
		2: "IMPACT_HIGH",
	}
	CVSSV3_Impact_value = map[string]int32{
		"IMPACT_NONE": 0,
		"IMPACT_LOW":  1,
		"IMPACT_HIGH": 2,
	}
)

func (x CVSSV3_Impact) Enum() *CVSSV3_Impact {
	p := new(CVSSV3_Impact)
	*p = x
	return p
}

func (x CVSSV3_Impact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Impact) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[3].Descriptor()
}

func (CVSSV3_Impact) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[3]
}

func (x CVSSV3_Impact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_AttackVector int32

const (
	CVSSV3_ATTACK_LOCAL    CVSSV3_AttackVector = 0
	CVSSV3_ATTACK_ADJACENT CVSSV3_AttackVector = 1
	CVSSV3_ATTACK_NETWORK  CVSSV3_AttackVector = 2
	CVSSV3_ATTACK_PHYSICAL CVSSV3_AttackVector = 3
)

// Enum value maps for CVSSV3_AttackVector.
var (
	CVSSV3_AttackVector_name = map[int32]string{
		0: "ATTACK_LOCAL",
		1: "ATTACK_ADJACENT",
		2: "ATTACK_NETWORK",
		3: "ATTACK_PHYSICAL",
	}
	CVSSV3_AttackVector_value = map[string]int32{
		"ATTACK_LOCAL":    0,
		"ATTACK_ADJACENT": 1,
		"ATTACK_NETWORK":  2,
		"ATTACK_PHYSICAL": 3,
	}
)

func (x CVSSV3_AttackVector) Enum() *CVSSV3_AttackVector {
	p := new(CVSSV3_AttackVector)
	*p = x
	return p
}

func (x CVSSV3_AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[4].Descriptor()
}

func (CVSSV3_AttackVector) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[4]
}

func (x CVSSV3_AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Complexity int32

const (
	CVSSV3_COMPLEXITY_LOW  CVSSV3_Complexity = 0
	CVSSV3_COMPLEXITY_HIGH CVSSV3_Complexity = 1
)

// Enum value maps for CVSSV3_Complexity.
var (
	CVSSV3_Complexity_name = map[int32]string{
		0: "COMPLEXITY_LOW",
		1: "COMPLEXITY_HIGH",
	}
	CVSSV3_Complexity_value = map[string]int32{
		"COMPLEXITY_LOW":  0,
		"COMPLEXITY_HIGH": 1,
	}
)

func (x CVSSV3_Complexity) Enum() *CVSSV3_Complexity {
	p := new(CVSSV3_Complexity)
	*p = x
	return p
}

func (x CVSSV3_Complexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Complexity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[5].Descriptor()
}

func (CVSSV3_Complexity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[5]
}

func (x CVSSV3_Complexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Privileges int32

const (
	CVSSV3_PRIVILEGE_NONE CVSSV3_Privileges = 0
	CVSSV3_PRIVILEGE_LOW  CVSSV3_Privileges = 1
	CVSSV3_PRIVILEGE_HIGH CVSSV3_Privileges = 2
)

// Enum value maps for CVSSV3_Privileges.
var (
	CVSSV3_Privileges_name = map[int32]string{
		0: "PRIVILEGE_NONE",
		1: "PRIVILEGE_LOW",
		2: "PRIVILEGE_HIGH",
	}
	CVSSV3_Privileges_value = map[string]int32{
		"PRIVILEGE_NONE": 0,
		"PRIVILEGE_LOW":  1,
		"PRIVILEGE_HIGH": 2,
	}
)

func (x CVSSV3_Privileges) Enum() *CVSSV3_Privileges {
	p := new(CVSSV3_Privileges)
	*p = x
	return p
}

func (x CVSSV3_Privileges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Privileges) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[6].Descriptor()
}

func (CVSSV3_Privileges) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[6]
}

func (x CVSSV3_Privileges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_UserInteraction int32

const (
	CVSSV3_UI_NONE     CVSSV3_UserInteraction = 0
	CVSSV3_UI_REQUIRED CVSSV3_UserInteraction = 1
)

// Enum value maps for CVSSV3_UserInteraction.
var (
	CVSSV3_UserInteraction_name = map[int32]string{
		0: "UI_NONE",
		1: "UI_REQUIRED",
	}
	CVSSV3_UserInteraction_value = map[string]int32{
		"UI_NONE":     0,
		"UI_REQUIRED": 1,
	}
)

func (x CVSSV3_UserInteraction) Enum() *CVSSV3_UserInteraction {
	p := new(CVSSV3_UserInteraction)
	*p = x
	return p
}

func (x CVSSV3_UserInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_UserInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[7].Descriptor()
}

func (CVSSV3_UserInteraction) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[7]
}

func (x CVSSV3_UserInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Scope int32

const (
	CVSSV3_UNCHANGED CVSSV3_Scope = 0
	CVSSV3_CHANGED   CVSSV3_Scope = 1
)

// Enum value maps for CVSSV3_Scope.
var (
	CVSSV3_Scope_name = map[int32]string{
		0: "UNCHANGED",
		1: "CHANGED",
	}
	CVSSV3_Scope_value = map[string]int32{
		"UNCHANGED": 0,
		"CHANGED":   1,
	}
)

func (x CVSSV3_Scope) Enum() *CVSSV3_Scope {
	p := new(CVSSV3_Scope)
	*p = x
	return p
}

func (x CVSSV3_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[8].Descriptor()
}

func (CVSSV3_Scope) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[8]
}

func (x CVSSV3_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CVSSV3_Severity int32

const (
	CVSSV3_UNKNOWN  CVSSV3_Severity = 0
	CVSSV3_NONE     CVSSV3_Severity = 1
	CVSSV3_LOW      CVSSV3_Severity = 2
	CVSSV3_MEDIUM   CVSSV3_Severity = 3
	CVSSV3_HIGH     CVSSV3_Severity = 4
	CVSSV3_CRITICAL CVSSV3_Severity = 5
)

// Enum value maps for CVSSV3_Severity.
var (
	CVSSV3_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	CVSSV3_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NONE":     1,
		"LOW":      2,
		"MEDIUM":   3,
		"HIGH":     4,
		"CRITICAL": 5,
	}
)

func (x CVSSV3_Severity) Enum() *CVSSV3_Severity {
	p := new(CVSSV3_Severity)
	*p = x
	return p
}

func (x CVSSV3_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSSV3_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vulnerability_proto_enumTypes[9].Descriptor()
}

func (CVSSV3_Severity) Type() protoreflect.EnumType {
	return &file_api_v2_vulnerability_proto_enumTypes[9]
}

func (x CVSSV3_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type EmbeddedVulnerability struct {
	state                            protoimpl.MessageState             `protogen:"opaque.v1"`
	xxx_hidden_Cve                   *string                            `protobuf:"bytes,1,opt,name=cve"`
	xxx_hidden_Summary               *string                            `protobuf:"bytes,2,opt,name=summary"`
	xxx_hidden_Link                  *string                            `protobuf:"bytes,3,opt,name=link"`
	xxx_hidden_PublishedOn           *timestamppb.Timestamp             `protobuf:"bytes,4,opt,name=published_on,json=publishedOn"`
	xxx_hidden_LastModified          *timestamppb.Timestamp             `protobuf:"bytes,5,opt,name=last_modified,json=lastModified"`
	xxx_hidden_FirstSystemOccurrence *timestamppb.Timestamp             `protobuf:"bytes,6,opt,name=first_system_occurrence,json=firstSystemOccurrence"`
	xxx_hidden_CvssMetrics           *[]*CVSSScore                      `protobuf:"bytes,7,rep,name=cvss_metrics,json=cvssMetrics"`
	xxx_hidden_Epss                  *EPSS                              `protobuf:"bytes,8,opt,name=epss"`
	xxx_hidden_Cvss                  float32                            `protobuf:"fixed32,9,opt,name=cvss"`
	xxx_hidden_SetFixedBy            isEmbeddedVulnerability_SetFixedBy `protobuf_oneof:"set_fixed_by"`
	xxx_hidden_Severity              VulnerabilitySeverity              `protobuf:"varint,11,opt,name=severity,enum=v2.VulnerabilitySeverity"`
	xxx_hidden_Advisory              *Advisory                          `protobuf:"bytes,12,opt,name=advisory"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *EmbeddedVulnerability) Reset() {
	*x = EmbeddedVulnerability{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddedVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddedVulnerability) ProtoMessage() {}

func (x *EmbeddedVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EmbeddedVulnerability) GetCve() string {
	if x != nil {
		if x.xxx_hidden_Cve != nil {
			return *x.xxx_hidden_Cve
		}
		return ""
	}
	return ""
}

func (x *EmbeddedVulnerability) GetSummary() string {
	if x != nil {
		if x.xxx_hidden_Summary != nil {
			return *x.xxx_hidden_Summary
		}
		return ""
	}
	return ""
}

func (x *EmbeddedVulnerability) GetLink() string {
	if x != nil {
		if x.xxx_hidden_Link != nil {
			return *x.xxx_hidden_Link
		}
		return ""
	}
	return ""
}

func (x *EmbeddedVulnerability) GetPublishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PublishedOn
	}
	return nil
}

func (x *EmbeddedVulnerability) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_LastModified
	}
	return nil
}

func (x *EmbeddedVulnerability) GetFirstSystemOccurrence() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_FirstSystemOccurrence
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvssMetrics() []*CVSSScore {
	if x != nil {
		if x.xxx_hidden_CvssMetrics != nil {
			return *x.xxx_hidden_CvssMetrics
		}
	}
	return nil
}

func (x *EmbeddedVulnerability) GetEpss() *EPSS {
	if x != nil {
		return x.xxx_hidden_Epss
	}
	return nil
}

func (x *EmbeddedVulnerability) GetCvss() float32 {
	if x != nil {
		return x.xxx_hidden_Cvss
	}
	return 0
}

func (x *EmbeddedVulnerability) GetFixedBy() string {
	if x != nil {
		if x, ok := x.xxx_hidden_SetFixedBy.(*embeddedVulnerability_FixedBy); ok {
			return x.FixedBy
		}
	}
	return ""
}

func (x *EmbeddedVulnerability) GetSeverity() VulnerabilitySeverity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 10) {
			return x.xxx_hidden_Severity
		}
	}
	return VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *EmbeddedVulnerability) GetAdvisory() *Advisory {
	if x != nil {
		return x.xxx_hidden_Advisory
	}
	return nil
}

func (x *EmbeddedVulnerability) SetCve(v string) {
	x.xxx_hidden_Cve = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *EmbeddedVulnerability) SetSummary(v string) {
	x.xxx_hidden_Summary = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *EmbeddedVulnerability) SetLink(v string) {
	x.xxx_hidden_Link = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
}

func (x *EmbeddedVulnerability) SetPublishedOn(v *timestamppb.Timestamp) {
	x.xxx_hidden_PublishedOn = v
}

func (x *EmbeddedVulnerability) SetLastModified(v *timestamppb.Timestamp) {
	x.xxx_hidden_LastModified = v
}

func (x *EmbeddedVulnerability) SetFirstSystemOccurrence(v *timestamppb.Timestamp) {
	x.xxx_hidden_FirstSystemOccurrence = v
}

func (x *EmbeddedVulnerability) SetCvssMetrics(v []*CVSSScore) {
	x.xxx_hidden_CvssMetrics = &v
}

func (x *EmbeddedVulnerability) SetEpss(v *EPSS) {
	x.xxx_hidden_Epss = v
}

func (x *EmbeddedVulnerability) SetCvss(v float32) {
	x.xxx_hidden_Cvss = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
}

func (x *EmbeddedVulnerability) SetFixedBy(v string) {
	x.xxx_hidden_SetFixedBy = &embeddedVulnerability_FixedBy{v}
}

func (x *EmbeddedVulnerability) SetSeverity(v VulnerabilitySeverity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 12)
}

func (x *EmbeddedVulnerability) SetAdvisory(v *Advisory) {
	x.xxx_hidden_Advisory = v
}

func (x *EmbeddedVulnerability) HasCve() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EmbeddedVulnerability) HasSummary() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EmbeddedVulnerability) HasLink() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EmbeddedVulnerability) HasPublishedOn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PublishedOn != nil
}

func (x *EmbeddedVulnerability) HasLastModified() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastModified != nil
}

func (x *EmbeddedVulnerability) HasFirstSystemOccurrence() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_FirstSystemOccurrence != nil
}

func (x *EmbeddedVulnerability) HasEpss() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Epss != nil
}

func (x *EmbeddedVulnerability) HasCvss() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *EmbeddedVulnerability) HasSetFixedBy() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SetFixedBy != nil
}

func (x *EmbeddedVulnerability) HasFixedBy() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_SetFixedBy.(*embeddedVulnerability_FixedBy)
	return ok
}

func (x *EmbeddedVulnerability) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *EmbeddedVulnerability) HasAdvisory() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Advisory != nil
}

func (x *EmbeddedVulnerability) ClearCve() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Cve = nil
}

func (x *EmbeddedVulnerability) ClearSummary() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Summary = nil
}

func (x *EmbeddedVulnerability) ClearLink() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Link = nil
}

func (x *EmbeddedVulnerability) ClearPublishedOn() {
	x.xxx_hidden_PublishedOn = nil
}

func (x *EmbeddedVulnerability) ClearLastModified() {
	x.xxx_hidden_LastModified = nil
}

func (x *EmbeddedVulnerability) ClearFirstSystemOccurrence() {
	x.xxx_hidden_FirstSystemOccurrence = nil
}

func (x *EmbeddedVulnerability) ClearEpss() {
	x.xxx_hidden_Epss = nil
}

func (x *EmbeddedVulnerability) ClearCvss() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Cvss = 0
}

func (x *EmbeddedVulnerability) ClearSetFixedBy() {
	x.xxx_hidden_SetFixedBy = nil
}

func (x *EmbeddedVulnerability) ClearFixedBy() {
	if _, ok := x.xxx_hidden_SetFixedBy.(*embeddedVulnerability_FixedBy); ok {
		x.xxx_hidden_SetFixedBy = nil
	}
}

func (x *EmbeddedVulnerability) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Severity = VulnerabilitySeverity_UNKNOWN_VULNERABILITY_SEVERITY
}

func (x *EmbeddedVulnerability) ClearAdvisory() {
	x.xxx_hidden_Advisory = nil
}

const EmbeddedVulnerability_SetFixedBy_not_set_case case_EmbeddedVulnerability_SetFixedBy = 0
const EmbeddedVulnerability_FixedBy_case case_EmbeddedVulnerability_SetFixedBy = 10

func (x *EmbeddedVulnerability) WhichSetFixedBy() case_EmbeddedVulnerability_SetFixedBy {
	if x == nil {
		return EmbeddedVulnerability_SetFixedBy_not_set_case
	}
	switch x.xxx_hidden_SetFixedBy.(type) {
	case *embeddedVulnerability_FixedBy:
		return EmbeddedVulnerability_FixedBy_case
	default:
		return EmbeddedVulnerability_SetFixedBy_not_set_case
	}
}

type EmbeddedVulnerability_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cve          *string
	Summary      *string
	Link         *string
	PublishedOn  *timestamppb.Timestamp
	LastModified *timestamppb.Timestamp
	// Time when the CVE was first seen, for this specific distro, in the system.
	FirstSystemOccurrence *timestamppb.Timestamp
	// cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc
	CvssMetrics []*CVSSScore
	Epss        *EPSS
	Cvss        *float32
	// Fields of oneof xxx_hidden_SetFixedBy:
	FixedBy *string
	// -- end of xxx_hidden_SetFixedBy
	Severity *VulnerabilitySeverity
	Advisory *Advisory
}

func (b0 EmbeddedVulnerability_builder) Build() *EmbeddedVulnerability {
	m0 := &EmbeddedVulnerability{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Cve != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Cve = b.Cve
	}
	if b.Summary != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_Summary = b.Summary
	}
	if b.Link != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_Link = b.Link
	}
	x.xxx_hidden_PublishedOn = b.PublishedOn
	x.xxx_hidden_LastModified = b.LastModified
	x.xxx_hidden_FirstSystemOccurrence = b.FirstSystemOccurrence
	x.xxx_hidden_CvssMetrics = &b.CvssMetrics
	x.xxx_hidden_Epss = b.Epss
	if b.Cvss != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_Cvss = *b.Cvss
	}
	if b.FixedBy != nil {
		x.xxx_hidden_SetFixedBy = &embeddedVulnerability_FixedBy{*b.FixedBy}
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 12)
		x.xxx_hidden_Severity = *b.Severity
	}
	x.xxx_hidden_Advisory = b.Advisory
	return m0
}

type case_EmbeddedVulnerability_SetFixedBy protoreflect.FieldNumber

func (x case_EmbeddedVulnerability_SetFixedBy) String() string {
	md := file_api_v2_vulnerability_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isEmbeddedVulnerability_SetFixedBy interface {
	isEmbeddedVulnerability_SetFixedBy()
}

type embeddedVulnerability_FixedBy struct {
	FixedBy string `protobuf:"bytes,10,opt,name=fixed_by,json=fixedBy,oneof"`
}

func (*embeddedVulnerability_FixedBy) isEmbeddedVulnerability_SetFixedBy() {}

// EPSS Score stores two epss metrics returned by scanner - epss probability and epss percentile
type EPSS struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EpssProbability float32                `protobuf:"fixed32,1,opt,name=epss_probability,json=epssProbability"`
	xxx_hidden_EpssPercentile  float32                `protobuf:"fixed32,2,opt,name=epss_percentile,json=epssPercentile"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *EPSS) Reset() {
	*x = EPSS{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EPSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EPSS) ProtoMessage() {}

func (x *EPSS) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EPSS) GetEpssProbability() float32 {
	if x != nil {
		return x.xxx_hidden_EpssProbability
	}
	return 0
}

func (x *EPSS) GetEpssPercentile() float32 {
	if x != nil {
		return x.xxx_hidden_EpssPercentile
	}
	return 0
}

func (x *EPSS) SetEpssProbability(v float32) {
	x.xxx_hidden_EpssProbability = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *EPSS) SetEpssPercentile(v float32) {
	x.xxx_hidden_EpssPercentile = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *EPSS) HasEpssProbability() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EPSS) HasEpssPercentile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EPSS) ClearEpssProbability() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_EpssProbability = 0
}

func (x *EPSS) ClearEpssPercentile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EpssPercentile = 0
}

type EPSS_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	EpssProbability *float32
	EpssPercentile  *float32
}

func (b0 EPSS_builder) Build() *EPSS {
	m0 := &EPSS{}
	b, x := &b0, m0
	_, _ = b, x
	if b.EpssProbability != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_EpssProbability = *b.EpssProbability
	}
	if b.EpssPercentile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_EpssPercentile = *b.EpssPercentile
	}
	return m0
}

type Advisory struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Link        *string                `protobuf:"bytes,2,opt,name=link"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Advisory) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Advisory) GetLink() string {
	if x != nil {
		if x.xxx_hidden_Link != nil {
			return *x.xxx_hidden_Link
		}
		return ""
	}
	return ""
}

func (x *Advisory) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Advisory) SetLink(v string) {
	x.xxx_hidden_Link = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Advisory) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Advisory) HasLink() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Advisory) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *Advisory) ClearLink() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Link = nil
}

type Advisory_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
	Link *string
}

func (b0 Advisory_builder) Build() *Advisory {
	m0 := &Advisory{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	if b.Link != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Link = b.Link
	}
	return m0
}

type CVSSScore struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Source      Source                 `protobuf:"varint,1,opt,name=source,enum=v2.Source"`
	xxx_hidden_Url         *string                `protobuf:"bytes,2,opt,name=url"`
	xxx_hidden_Cvssv3      *CVSSV3                `protobuf:"bytes,3,opt,name=cvssv3"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVSSScore) Reset() {
	*x = CVSSScore{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSScore) ProtoMessage() {}

func (x *CVSSScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVSSScore) GetSource() Source {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Source
		}
	}
	return Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *CVSSScore) GetCvssv3() *CVSSV3 {
	if x != nil {
		return x.xxx_hidden_Cvssv3
	}
	return nil
}

func (x *CVSSScore) SetSource(v Source) {
	x.xxx_hidden_Source = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *CVSSScore) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *CVSSScore) SetCvssv3(v *CVSSV3) {
	x.xxx_hidden_Cvssv3 = v
}

func (x *CVSSScore) HasSource() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVSSScore) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVSSScore) HasCvssv3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cvssv3 != nil
}

func (x *CVSSScore) ClearSource() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Source = Source_SOURCE_UNKNOWN
}

func (x *CVSSScore) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Url = nil
}

func (x *CVSSScore) ClearCvssv3() {
	x.xxx_hidden_Cvssv3 = nil
}

type CVSSScore_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Source *Source
	Url    *string
	Cvssv3 *CVSSV3
}

func (b0 CVSSScore_builder) Build() *CVSSScore {
	m0 := &CVSSScore{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Source != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Source = *b.Source
	}
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Url = b.Url
	}
	x.xxx_hidden_Cvssv3 = b.Cvssv3
	return m0
}

type CVSSV3 struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Vector              *string                `protobuf:"bytes,1,opt,name=vector"`
	xxx_hidden_ExploitabilityScore float32                `protobuf:"fixed32,2,opt,name=exploitability_score,json=exploitabilityScore"`
	xxx_hidden_ImpactScore         float32                `protobuf:"fixed32,3,opt,name=impact_score,json=impactScore"`
	xxx_hidden_AttackVector        CVSSV3_AttackVector    `protobuf:"varint,4,opt,name=attack_vector,json=attackVector,enum=v2.CVSSV3_AttackVector"`
	xxx_hidden_AttackComplexity    CVSSV3_Complexity      `protobuf:"varint,5,opt,name=attack_complexity,json=attackComplexity,enum=v2.CVSSV3_Complexity"`
	xxx_hidden_PrivilegesRequired  CVSSV3_Privileges      `protobuf:"varint,6,opt,name=privileges_required,json=privilegesRequired,enum=v2.CVSSV3_Privileges"`
	xxx_hidden_UserInteraction     CVSSV3_UserInteraction `protobuf:"varint,7,opt,name=user_interaction,json=userInteraction,enum=v2.CVSSV3_UserInteraction"`
	xxx_hidden_Scope               CVSSV3_Scope           `protobuf:"varint,8,opt,name=scope,enum=v2.CVSSV3_Scope"`
	xxx_hidden_Confidentiality     CVSSV3_Impact          `protobuf:"varint,9,opt,name=confidentiality,enum=v2.CVSSV3_Impact"`
	xxx_hidden_Integrity           CVSSV3_Impact          `protobuf:"varint,10,opt,name=integrity,enum=v2.CVSSV3_Impact"`
	xxx_hidden_Availability        CVSSV3_Impact          `protobuf:"varint,11,opt,name=availability,enum=v2.CVSSV3_Impact"`
	xxx_hidden_Score               float32                `protobuf:"fixed32,12,opt,name=score"`
	xxx_hidden_Severity            CVSSV3_Severity        `protobuf:"varint,13,opt,name=severity,enum=v2.CVSSV3_Severity"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CVSSV3) Reset() {
	*x = CVSSV3{}
	mi := &file_api_v2_vulnerability_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVSSV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSSV3) ProtoMessage() {}

func (x *CVSSV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vulnerability_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CVSSV3) GetVector() string {
	if x != nil {
		if x.xxx_hidden_Vector != nil {
			return *x.xxx_hidden_Vector
		}
		return ""
	}
	return ""
}

func (x *CVSSV3) GetExploitabilityScore() float32 {
	if x != nil {
		return x.xxx_hidden_ExploitabilityScore
	}
	return 0
}

func (x *CVSSV3) GetImpactScore() float32 {
	if x != nil {
		return x.xxx_hidden_ImpactScore
	}
	return 0
}

func (x *CVSSV3) GetAttackVector() CVSSV3_AttackVector {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_AttackVector
		}
	}
	return CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) GetAttackComplexity() CVSSV3_Complexity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_AttackComplexity
		}
	}
	return CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) GetPrivilegesRequired() CVSSV3_Privileges {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 5) {
			return x.xxx_hidden_PrivilegesRequired
		}
	}
	return CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) GetUserInteraction() CVSSV3_UserInteraction {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_UserInteraction
		}
	}
	return CVSSV3_UI_NONE
}

func (x *CVSSV3) GetScope() CVSSV3_Scope {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 7) {
			return x.xxx_hidden_Scope
		}
	}
	return CVSSV3_UNCHANGED
}

func (x *CVSSV3) GetConfidentiality() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			return x.xxx_hidden_Confidentiality
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetIntegrity() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			return x.xxx_hidden_Integrity
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetAvailability() CVSSV3_Impact {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 10) {
			return x.xxx_hidden_Availability
		}
	}
	return CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) GetScore() float32 {
	if x != nil {
		return x.xxx_hidden_Score
	}
	return 0
}

func (x *CVSSV3) GetSeverity() CVSSV3_Severity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 12) {
			return x.xxx_hidden_Severity
		}
	}
	return CVSSV3_UNKNOWN
}

func (x *CVSSV3) SetVector(v string) {
	x.xxx_hidden_Vector = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 13)
}

func (x *CVSSV3) SetExploitabilityScore(v float32) {
	x.xxx_hidden_ExploitabilityScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 13)
}

func (x *CVSSV3) SetImpactScore(v float32) {
	x.xxx_hidden_ImpactScore = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 13)
}

func (x *CVSSV3) SetAttackVector(v CVSSV3_AttackVector) {
	x.xxx_hidden_AttackVector = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 13)
}

func (x *CVSSV3) SetAttackComplexity(v CVSSV3_Complexity) {
	x.xxx_hidden_AttackComplexity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 13)
}

func (x *CVSSV3) SetPrivilegesRequired(v CVSSV3_Privileges) {
	x.xxx_hidden_PrivilegesRequired = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 13)
}

func (x *CVSSV3) SetUserInteraction(v CVSSV3_UserInteraction) {
	x.xxx_hidden_UserInteraction = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 13)
}

func (x *CVSSV3) SetScope(v CVSSV3_Scope) {
	x.xxx_hidden_Scope = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 13)
}

func (x *CVSSV3) SetConfidentiality(v CVSSV3_Impact) {
	x.xxx_hidden_Confidentiality = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 13)
}

func (x *CVSSV3) SetIntegrity(v CVSSV3_Impact) {
	x.xxx_hidden_Integrity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 13)
}

func (x *CVSSV3) SetAvailability(v CVSSV3_Impact) {
	x.xxx_hidden_Availability = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 13)
}

func (x *CVSSV3) SetScore(v float32) {
	x.xxx_hidden_Score = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 13)
}

func (x *CVSSV3) SetSeverity(v CVSSV3_Severity) {
	x.xxx_hidden_Severity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 13)
}

func (x *CVSSV3) HasVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CVSSV3) HasExploitabilityScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CVSSV3) HasImpactScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CVSSV3) HasAttackVector() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CVSSV3) HasAttackComplexity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CVSSV3) HasPrivilegesRequired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CVSSV3) HasUserInteraction() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *CVSSV3) HasScope() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *CVSSV3) HasConfidentiality() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *CVSSV3) HasIntegrity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *CVSSV3) HasAvailability() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *CVSSV3) HasScore() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *CVSSV3) HasSeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *CVSSV3) ClearVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Vector = nil
}

func (x *CVSSV3) ClearExploitabilityScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ExploitabilityScore = 0
}

func (x *CVSSV3) ClearImpactScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ImpactScore = 0
}

func (x *CVSSV3) ClearAttackVector() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_AttackVector = CVSSV3_ATTACK_LOCAL
}

func (x *CVSSV3) ClearAttackComplexity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_AttackComplexity = CVSSV3_COMPLEXITY_LOW
}

func (x *CVSSV3) ClearPrivilegesRequired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_PrivilegesRequired = CVSSV3_PRIVILEGE_NONE
}

func (x *CVSSV3) ClearUserInteraction() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_UserInteraction = CVSSV3_UI_NONE
}

func (x *CVSSV3) ClearScope() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Scope = CVSSV3_UNCHANGED
}

func (x *CVSSV3) ClearConfidentiality() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Confidentiality = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearIntegrity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Integrity = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearAvailability() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Availability = CVSSV3_IMPACT_NONE
}

func (x *CVSSV3) ClearScore() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_Score = 0
}

func (x *CVSSV3) ClearSeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_Severity = CVSSV3_UNKNOWN
}

type CVSSV3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Vector              *string
	ExploitabilityScore *float32
	ImpactScore         *float32
	AttackVector        *CVSSV3_AttackVector
	AttackComplexity    *CVSSV3_Complexity
	PrivilegesRequired  *CVSSV3_Privileges
	UserInteraction     *CVSSV3_UserInteraction
	Scope               *CVSSV3_Scope
	Confidentiality     *CVSSV3_Impact
	Integrity           *CVSSV3_Impact
	Availability        *CVSSV3_Impact
	Score               *float32
	Severity            *CVSSV3_Severity
}

func (b0 CVSSV3_builder) Build() *CVSSV3 {
	m0 := &CVSSV3{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Vector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 13)
		x.xxx_hidden_Vector = b.Vector
	}
	if b.ExploitabilityScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 13)
		x.xxx_hidden_ExploitabilityScore = *b.ExploitabilityScore
	}
	if b.ImpactScore != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 13)
		x.xxx_hidden_ImpactScore = *b.ImpactScore
	}
	if b.AttackVector != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 13)
		x.xxx_hidden_AttackVector = *b.AttackVector
	}
	if b.AttackComplexity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 13)
		x.xxx_hidden_AttackComplexity = *b.AttackComplexity
	}
	if b.PrivilegesRequired != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 13)
		x.xxx_hidden_PrivilegesRequired = *b.PrivilegesRequired
	}
	if b.UserInteraction != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 13)
		x.xxx_hidden_UserInteraction = *b.UserInteraction
	}
	if b.Scope != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 13)
		x.xxx_hidden_Scope = *b.Scope
	}
	if b.Confidentiality != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 13)
		x.xxx_hidden_Confidentiality = *b.Confidentiality
	}
	if b.Integrity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 13)
		x.xxx_hidden_Integrity = *b.Integrity
	}
	if b.Availability != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 13)
		x.xxx_hidden_Availability = *b.Availability
	}
	if b.Score != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 13)
		x.xxx_hidden_Score = *b.Score
	}
	if b.Severity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 13)
		x.xxx_hidden_Severity = *b.Severity
	}
	return m0
}

var File_api_v2_vulnerability_proto protoreflect.FileDescriptor

const file_api_v2_vulnerability_proto_rawDesc = "" +
	"\n" +
	"\x1aapi/v2/vulnerability.proto\x12\x02v2\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x9d\x04\n" +
	"\x15EmbeddedVulnerability\x12\x10\n" +
	"\x03cve\x18\x01 \x01(\tR\x03cve\x12\x18\n" +
	"\asummary\x18\x02 \x01(\tR\asummary\x12\x12\n" +
	"\x04link\x18\x03 \x01(\tR\x04link\x12=\n" +
	"\fpublished_on\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedOn\x12?\n" +
	"\rlast_modified\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12R\n" +
	"\x17first_system_occurrence\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x15firstSystemOccurrence\x120\n" +
	"\fcvss_metrics\x18\a \x03(\v2\r.v2.CVSSScoreR\vcvssMetrics\x12\x1c\n" +
	"\x04epss\x18\b \x01(\v2\b.v2.EPSSR\x04epss\x12\x12\n" +
	"\x04cvss\x18\t \x01(\x02R\x04cvss\x12\x1b\n" +
	"\bfixed_by\x18\n" +
	" \x01(\tH\x00R\afixedBy\x125\n" +
	"\bseverity\x18\v \x01(\x0e2\x19.v2.VulnerabilitySeverityR\bseverity\x12(\n" +
	"\badvisory\x18\f \x01(\v2\f.v2.AdvisoryR\badvisoryB\x0e\n" +
	"\fset_fixed_by\"Z\n" +
	"\x04EPSS\x12)\n" +
	"\x10epss_probability\x18\x01 \x01(\x02R\x0fepssProbability\x12'\n" +
	"\x0fepss_percentile\x18\x02 \x01(\x02R\x0eepssPercentile\"2\n" +
	"\bAdvisory\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04link\x18\x02 \x01(\tR\x04link\"e\n" +
	"\tCVSSScore\x12\"\n" +
	"\x06source\x18\x01 \x01(\x0e2\n" +
	".v2.SourceR\x06source\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\"\n" +
	"\x06cvssv3\x18\x03 \x01(\v2\n" +
	".v2.CVSSV3R\x06cvssv3\"\xdd\b\n" +
	"\x06CVSSV3\x12\x16\n" +
	"\x06vector\x18\x01 \x01(\tR\x06vector\x121\n" +
	"\x14exploitability_score\x18\x02 \x01(\x02R\x13exploitabilityScore\x12!\n" +
	"\fimpact_score\x18\x03 \x01(\x02R\vimpactScore\x12<\n" +
	"\rattack_vector\x18\x04 \x01(\x0e2\x17.v2.CVSSV3.AttackVectorR\fattackVector\x12B\n" +
	"\x11attack_complexity\x18\x05 \x01(\x0e2\x15.v2.CVSSV3.ComplexityR\x10attackComplexity\x12F\n" +
	"\x13privileges_required\x18\x06 \x01(\x0e2\x15.v2.CVSSV3.PrivilegesR\x12privilegesRequired\x12E\n" +
	"\x10user_interaction\x18\a \x01(\x0e2\x1a.v2.CVSSV3.UserInteractionR\x0fuserInteraction\x12&\n" +
	"\x05scope\x18\b \x01(\x0e2\x10.v2.CVSSV3.ScopeR\x05scope\x12;\n" +
	"\x0fconfidentiality\x18\t \x01(\x0e2\x11.v2.CVSSV3.ImpactR\x0fconfidentiality\x12/\n" +
	"\tintegrity\x18\n" +
	" \x01(\x0e2\x11.v2.CVSSV3.ImpactR\tintegrity\x125\n" +
	"\favailability\x18\v \x01(\x0e2\x11.v2.CVSSV3.ImpactR\favailability\x12\x14\n" +
	"\x05score\x18\f \x01(\x02R\x05score\x12/\n" +
	"\bseverity\x18\r \x01(\x0e2\x13.v2.CVSSV3.SeverityR\bseverity\":\n" +
	"\x06Impact\x12\x0f\n" +
	"\vIMPACT_NONE\x10\x00\x12\x0e\n" +
	"\n" +
	"IMPACT_LOW\x10\x01\x12\x0f\n" +
	"\vIMPACT_HIGH\x10\x02\"^\n" +
	"\fAttackVector\x12\x10\n" +
	"\fATTACK_LOCAL\x10\x00\x12\x13\n" +
	"\x0fATTACK_ADJACENT\x10\x01\x12\x12\n" +
	"\x0eATTACK_NETWORK\x10\x02\x12\x13\n" +
	"\x0fATTACK_PHYSICAL\x10\x03\"5\n" +
	"\n" +
	"Complexity\x12\x12\n" +
	"\x0eCOMPLEXITY_LOW\x10\x00\x12\x13\n" +
	"\x0fCOMPLEXITY_HIGH\x10\x01\"G\n" +
	"\n" +
	"Privileges\x12\x12\n" +
	"\x0ePRIVILEGE_NONE\x10\x00\x12\x11\n" +
	"\rPRIVILEGE_LOW\x10\x01\x12\x12\n" +
	"\x0ePRIVILEGE_HIGH\x10\x02\"/\n" +
	"\x0fUserInteraction\x12\v\n" +
	"\aUI_NONE\x10\x00\x12\x0f\n" +
	"\vUI_REQUIRED\x10\x01\"#\n" +
	"\x05Scope\x12\r\n" +
	"\tUNCHANGED\x10\x00\x12\v\n" +
	"\aCHANGED\x10\x01\"N\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\a\n" +
	"\x03LOW\x10\x02\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\x12\f\n" +
	"\bCRITICAL\x10\x05*\xcf\x01\n" +
	"\x11VulnerabilityType\x12\x19\n" +
	"\x15UNKNOWN_VULNERABILITY\x10\x00\x12\x17\n" +
	"\x13IMAGE_VULNERABILITY\x10\x01\x12\x15\n" +
	"\x11K8S_VULNERABILITY\x10\x02\x12\x17\n" +
	"\x13ISTIO_VULNERABILITY\x10\x03\x12\x16\n" +
	"\x12NODE_VULNERABILITY\x10\x04\x12\x1b\n" +
	"\x17OPENSHIFT_VULNERABILITY\x10\x05\x12!\n" +
	"\x1dVIRTUAL_MACHINE_VULNERABILITY\x10\x06*\xcb\x01\n" +
	"\x15VulnerabilitySeverity\x12\"\n" +
	"\x1eUNKNOWN_VULNERABILITY_SEVERITY\x10\x00\x12\x1e\n" +
	"\x1aLOW_VULNERABILITY_SEVERITY\x10\x01\x12#\n" +
	"\x1fMODERATE_VULNERABILITY_SEVERITY\x10\x02\x12$\n" +
	" IMPORTANT_VULNERABILITY_SEVERITY\x10\x03\x12#\n" +
	"\x1fCRITICAL_VULNERABILITY_SEVERITY\x10\x04*P\n" +
	"\x06Source\x12\x12\n" +
	"\x0eSOURCE_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eSOURCE_RED_HAT\x10\x01\x12\x0e\n" +
	"\n" +
	"SOURCE_OSV\x10\x02\x12\x0e\n" +
	"\n" +
	"SOURCE_NVD\x10\x03B/\n" +
	"\x18io.stackrox.proto.api.v2Z\v./api/v2;v2\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_api_v2_vulnerability_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_api_v2_vulnerability_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_v2_vulnerability_proto_goTypes = []any{
	(VulnerabilityType)(0),        // 0: v2.VulnerabilityType
	(VulnerabilitySeverity)(0),    // 1: v2.VulnerabilitySeverity
	(Source)(0),                   // 2: v2.Source
	(CVSSV3_Impact)(0),            // 3: v2.CVSSV3.Impact
	(CVSSV3_AttackVector)(0),      // 4: v2.CVSSV3.AttackVector
	(CVSSV3_Complexity)(0),        // 5: v2.CVSSV3.Complexity
	(CVSSV3_Privileges)(0),        // 6: v2.CVSSV3.Privileges
	(CVSSV3_UserInteraction)(0),   // 7: v2.CVSSV3.UserInteraction
	(CVSSV3_Scope)(0),             // 8: v2.CVSSV3.Scope
	(CVSSV3_Severity)(0),          // 9: v2.CVSSV3.Severity
	(*EmbeddedVulnerability)(nil), // 10: v2.EmbeddedVulnerability
	(*EPSS)(nil),                  // 11: v2.EPSS
	(*Advisory)(nil),              // 12: v2.Advisory
	(*CVSSScore)(nil),             // 13: v2.CVSSScore
	(*CVSSV3)(nil),                // 14: v2.CVSSV3
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_api_v2_vulnerability_proto_depIdxs = []int32{
	15, // 0: v2.EmbeddedVulnerability.published_on:type_name -> google.protobuf.Timestamp
	15, // 1: v2.EmbeddedVulnerability.last_modified:type_name -> google.protobuf.Timestamp
	15, // 2: v2.EmbeddedVulnerability.first_system_occurrence:type_name -> google.protobuf.Timestamp
	13, // 3: v2.EmbeddedVulnerability.cvss_metrics:type_name -> v2.CVSSScore
	11, // 4: v2.EmbeddedVulnerability.epss:type_name -> v2.EPSS
	1,  // 5: v2.EmbeddedVulnerability.severity:type_name -> v2.VulnerabilitySeverity
	12, // 6: v2.EmbeddedVulnerability.advisory:type_name -> v2.Advisory
	2,  // 7: v2.CVSSScore.source:type_name -> v2.Source
	14, // 8: v2.CVSSScore.cvssv3:type_name -> v2.CVSSV3
	4,  // 9: v2.CVSSV3.attack_vector:type_name -> v2.CVSSV3.AttackVector
	5,  // 10: v2.CVSSV3.attack_complexity:type_name -> v2.CVSSV3.Complexity
	6,  // 11: v2.CVSSV3.privileges_required:type_name -> v2.CVSSV3.Privileges
	7,  // 12: v2.CVSSV3.user_interaction:type_name -> v2.CVSSV3.UserInteraction
	8,  // 13: v2.CVSSV3.scope:type_name -> v2.CVSSV3.Scope
	3,  // 14: v2.CVSSV3.confidentiality:type_name -> v2.CVSSV3.Impact
	3,  // 15: v2.CVSSV3.integrity:type_name -> v2.CVSSV3.Impact
	3,  // 16: v2.CVSSV3.availability:type_name -> v2.CVSSV3.Impact
	9,  // 17: v2.CVSSV3.severity:type_name -> v2.CVSSV3.Severity
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_v2_vulnerability_proto_init() }
func file_api_v2_vulnerability_proto_init() {
	if File_api_v2_vulnerability_proto != nil {
		return
	}
	file_api_v2_vulnerability_proto_msgTypes[0].OneofWrappers = []any{
		(*embeddedVulnerability_FixedBy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v2_vulnerability_proto_rawDesc), len(file_api_v2_vulnerability_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v2_vulnerability_proto_goTypes,
		DependencyIndexes: file_api_v2_vulnerability_proto_depIdxs,
		EnumInfos:         file_api_v2_vulnerability_proto_enumTypes,
		MessageInfos:      file_api_v2_vulnerability_proto_msgTypes,
	}.Build()
	File_api_v2_vulnerability_proto = out.File
	file_api_v2_vulnerability_proto_goTypes = nil
	file_api_v2_vulnerability_proto_depIdxs = nil
}
