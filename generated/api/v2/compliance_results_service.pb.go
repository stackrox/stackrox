// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_results_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceCheckResult_CheckStatus int32

const (
	ComplianceCheckResult_UNSET          ComplianceCheckResult_CheckStatus = 0
	ComplianceCheckResult_PASS           ComplianceCheckResult_CheckStatus = 1
	ComplianceCheckResult_FAIL           ComplianceCheckResult_CheckStatus = 2
	ComplianceCheckResult_ERROR          ComplianceCheckResult_CheckStatus = 3
	ComplianceCheckResult_INFO           ComplianceCheckResult_CheckStatus = 4
	ComplianceCheckResult_MANUAL         ComplianceCheckResult_CheckStatus = 5
	ComplianceCheckResult_NOT_APPLICABLE ComplianceCheckResult_CheckStatus = 6
	ComplianceCheckResult_INCONSISTENT   ComplianceCheckResult_CheckStatus = 7
)

var ComplianceCheckResult_CheckStatus_name = map[int32]string{
	0: "UNSET",
	1: "PASS",
	2: "FAIL",
	3: "ERROR",
	4: "INFO",
	5: "MANUAL",
	6: "NOT_APPLICABLE",
	7: "INCONSISTENT",
}

var ComplianceCheckResult_CheckStatus_value = map[string]int32{
	"UNSET":          0,
	"PASS":           1,
	"FAIL":           2,
	"ERROR":          3,
	"INFO":           4,
	"MANUAL":         5,
	"NOT_APPLICABLE": 6,
	"INCONSISTENT":   7,
}

func (x ComplianceCheckResult_CheckStatus) String() string {
	return proto.EnumName(ComplianceCheckResult_CheckStatus_name, int32(x))
}

func (ComplianceCheckResult_CheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0, 0}
}

// ComplianceCheckResult provides the results of a compliance check against a rule
type ComplianceCheckResult struct {
	CheckId              string                                      `protobuf:"bytes,1,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName            string                                      `protobuf:"bytes,2,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Clusters             []*ComplianceCheckResult_ClusterCheckStatus `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Description          string                                      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Instructions         string                                      `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Standard             string                                      `protobuf:"bytes,6,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string                                      `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ComplianceCheckResult) Reset()         { *m = ComplianceCheckResult{} }
func (m *ComplianceCheckResult) String() string { return proto.CompactTextString(m) }
func (*ComplianceCheckResult) ProtoMessage()    {}
func (*ComplianceCheckResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0}
}
func (m *ComplianceCheckResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceCheckResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceCheckResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceCheckResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceCheckResult.Merge(m, src)
}
func (m *ComplianceCheckResult) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceCheckResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceCheckResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceCheckResult proto.InternalMessageInfo

func (m *ComplianceCheckResult) GetCheckId() string {
	if m != nil {
		return m.CheckId
	}
	return ""
}

func (m *ComplianceCheckResult) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceCheckResult) GetClusters() []*ComplianceCheckResult_ClusterCheckStatus {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceCheckResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceCheckResult) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceCheckResult) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceCheckResult) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceCheckResult) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceCheckResult) Clone() *ComplianceCheckResult {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceCheckResult)
	*cloned = *m

	if m.Clusters != nil {
		cloned.Clusters = make([]*ComplianceCheckResult_ClusterCheckStatus, len(m.Clusters))
		for idx, v := range m.Clusters {
			cloned.Clusters[idx] = v.Clone()
		}
	}
	return cloned
}

// ClusterCheckStatus groups the result of the check by cluster
type ComplianceCheckResult_ClusterCheckStatus struct {
	ClusterId            string                            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status               ComplianceCheckResult_CheckStatus `protobuf:"varint,2,opt,name=status,proto3,enum=v2.ComplianceCheckResult_CheckStatus" json:"status,omitempty"`
	CreatedTime          *types.Timestamp                  `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ComplianceCheckResult_ClusterCheckStatus) Reset() {
	*m = ComplianceCheckResult_ClusterCheckStatus{}
}
func (m *ComplianceCheckResult_ClusterCheckStatus) String() string { return proto.CompactTextString(m) }
func (*ComplianceCheckResult_ClusterCheckStatus) ProtoMessage()    {}
func (*ComplianceCheckResult_ClusterCheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0, 0}
}
func (m *ComplianceCheckResult_ClusterCheckStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceCheckResult_ClusterCheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceCheckResult_ClusterCheckStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceCheckResult_ClusterCheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceCheckResult_ClusterCheckStatus.Merge(m, src)
}
func (m *ComplianceCheckResult_ClusterCheckStatus) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceCheckResult_ClusterCheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceCheckResult_ClusterCheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceCheckResult_ClusterCheckStatus proto.InternalMessageInfo

func (m *ComplianceCheckResult_ClusterCheckStatus) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceCheckResult_ClusterCheckStatus) GetStatus() ComplianceCheckResult_CheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceCheckResult_UNSET
}

func (m *ComplianceCheckResult_ClusterCheckStatus) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceCheckResult_ClusterCheckStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceCheckResult_ClusterCheckStatus) Clone() *ComplianceCheckResult_ClusterCheckStatus {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceCheckResult_ClusterCheckStatus)
	*cloned = *m

	cloned.CreatedTime = m.CreatedTime.Clone()
	return cloned
}

// ComplianceScanResult provides the results of a scan
type ComplianceScanResult struct {
	ScanName             string                   `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ProfileName          string                   `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	CheckResults         []*ComplianceCheckResult `protobuf:"bytes,3,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ComplianceScanResult) Reset()         { *m = ComplianceScanResult{} }
func (m *ComplianceScanResult) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResult) ProtoMessage()    {}
func (*ComplianceScanResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{1}
}
func (m *ComplianceScanResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResult.Merge(m, src)
}
func (m *ComplianceScanResult) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResult proto.InternalMessageInfo

func (m *ComplianceScanResult) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanResult) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceScanResult) GetCheckResults() []*ComplianceCheckResult {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *ComplianceScanResult) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResult) Clone() *ComplianceScanResult {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResult)
	*cloned = *m

	if m.CheckResults != nil {
		cloned.CheckResults = make([]*ComplianceCheckResult, len(m.CheckResults))
		for idx, v := range m.CheckResults {
			cloned.CheckResults[idx] = v.Clone()
		}
	}
	return cloned
}

// ComplianceScanStatsShim models statistics of checks for a given scan configuration
type ComplianceScanStatsShim struct {
	ScanName              string           `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	NumberOfChecks        int32            `protobuf:"varint,2,opt,name=number_of_checks,json=numberOfChecks,proto3" json:"number_of_checks,omitempty"`
	NumberOfFailingChecks int32            `protobuf:"varint,3,opt,name=number_of_failing_checks,json=numberOfFailingChecks,proto3" json:"number_of_failing_checks,omitempty"`
	NumberOfPassingChecks int32            `protobuf:"varint,4,opt,name=number_of_passing_checks,json=numberOfPassingChecks,proto3" json:"number_of_passing_checks,omitempty"`
	LastScan              *types.Timestamp `protobuf:"bytes,5,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *ComplianceScanStatsShim) Reset()         { *m = ComplianceScanStatsShim{} }
func (m *ComplianceScanStatsShim) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanStatsShim) ProtoMessage()    {}
func (*ComplianceScanStatsShim) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{2}
}
func (m *ComplianceScanStatsShim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanStatsShim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanStatsShim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanStatsShim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanStatsShim.Merge(m, src)
}
func (m *ComplianceScanStatsShim) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanStatsShim) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanStatsShim.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanStatsShim proto.InternalMessageInfo

func (m *ComplianceScanStatsShim) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanStatsShim) GetNumberOfChecks() int32 {
	if m != nil {
		return m.NumberOfChecks
	}
	return 0
}

func (m *ComplianceScanStatsShim) GetNumberOfFailingChecks() int32 {
	if m != nil {
		return m.NumberOfFailingChecks
	}
	return 0
}

func (m *ComplianceScanStatsShim) GetNumberOfPassingChecks() int32 {
	if m != nil {
		return m.NumberOfPassingChecks
	}
	return 0
}

func (m *ComplianceScanStatsShim) GetLastScan() *types.Timestamp {
	if m != nil {
		return m.LastScan
	}
	return nil
}

func (m *ComplianceScanStatsShim) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanStatsShim) Clone() *ComplianceScanStatsShim {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanStatsShim)
	*cloned = *m

	cloned.LastScan = m.LastScan.Clone()
	return cloned
}

// ComplianceScanResultsOverview provides an overview and stats of the results of a scan configuration
type ComplianceScanResultsOverview struct {
	ScanStats            *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	ProfileName          []string                 `protobuf:"bytes,2,rep,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	ClusterId            []string                 `protobuf:"bytes,3,rep,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ComplianceScanResultsOverview) Reset()         { *m = ComplianceScanResultsOverview{} }
func (m *ComplianceScanResultsOverview) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResultsOverview) ProtoMessage()    {}
func (*ComplianceScanResultsOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{3}
}
func (m *ComplianceScanResultsOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResultsOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResultsOverview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResultsOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResultsOverview.Merge(m, src)
}
func (m *ComplianceScanResultsOverview) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResultsOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResultsOverview.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResultsOverview proto.InternalMessageInfo

func (m *ComplianceScanResultsOverview) GetScanStats() *ComplianceScanStatsShim {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ComplianceScanResultsOverview) GetProfileName() []string {
	if m != nil {
		return m.ProfileName
	}
	return nil
}

func (m *ComplianceScanResultsOverview) GetClusterId() []string {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

func (m *ComplianceScanResultsOverview) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResultsOverview) Clone() *ComplianceScanResultsOverview {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResultsOverview)
	*cloned = *m

	cloned.ScanStats = m.ScanStats.Clone()
	if m.ProfileName != nil {
		cloned.ProfileName = make([]string, len(m.ProfileName))
		copy(cloned.ProfileName, m.ProfileName)
	}
	if m.ClusterId != nil {
		cloned.ClusterId = make([]string, len(m.ClusterId))
		copy(cloned.ClusterId, m.ClusterId)
	}
	return cloned
}

// ComplianceProfileScanStats provides scan stats overview based on profile
type ComplianceProfileScanStats struct {
	ScanStats            *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	ProfileName          string                   `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ComplianceProfileScanStats) Reset()         { *m = ComplianceProfileScanStats{} }
func (m *ComplianceProfileScanStats) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfileScanStats) ProtoMessage()    {}
func (*ComplianceProfileScanStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{4}
}
func (m *ComplianceProfileScanStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfileScanStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfileScanStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfileScanStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfileScanStats.Merge(m, src)
}
func (m *ComplianceProfileScanStats) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfileScanStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfileScanStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfileScanStats proto.InternalMessageInfo

func (m *ComplianceProfileScanStats) GetScanStats() *ComplianceScanStatsShim {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ComplianceProfileScanStats) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceProfileScanStats) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfileScanStats) Clone() *ComplianceProfileScanStats {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfileScanStats)
	*cloned = *m

	cloned.ScanStats = m.ScanStats.Clone()
	return cloned
}

// ComplianceClusterScanStats provides scan stats overview based on cluster
type ComplianceClusterScanStats struct {
	ScanStats            *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	ClusterId            string                   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ComplianceClusterScanStats) Reset()         { *m = ComplianceClusterScanStats{} }
func (m *ComplianceClusterScanStats) String() string { return proto.CompactTextString(m) }
func (*ComplianceClusterScanStats) ProtoMessage()    {}
func (*ComplianceClusterScanStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{5}
}
func (m *ComplianceClusterScanStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceClusterScanStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceClusterScanStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceClusterScanStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceClusterScanStats.Merge(m, src)
}
func (m *ComplianceClusterScanStats) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceClusterScanStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceClusterScanStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceClusterScanStats proto.InternalMessageInfo

func (m *ComplianceClusterScanStats) GetScanStats() *ComplianceScanStatsShim {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ComplianceClusterScanStats) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceClusterScanStats) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceClusterScanStats) Clone() *ComplianceClusterScanStats {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceClusterScanStats)
	*cloned = *m

	cloned.ScanStats = m.ScanStats.Clone()
	return cloned
}

// ListComplianceScanResultsOverviewResponse provides overviews for scans
type ListComplianceScanResultsOverviewResponse struct {
	ScanOverviews        []*ComplianceScanResultsOverview `protobuf:"bytes,1,rep,name=scan_overviews,json=scanOverviews,proto3" json:"scan_overviews,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ListComplianceScanResultsOverviewResponse) Reset() {
	*m = ListComplianceScanResultsOverviewResponse{}
}
func (m *ListComplianceScanResultsOverviewResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ListComplianceScanResultsOverviewResponse) ProtoMessage() {}
func (*ListComplianceScanResultsOverviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{6}
}
func (m *ListComplianceScanResultsOverviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanResultsOverviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanResultsOverviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanResultsOverviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanResultsOverviewResponse.Merge(m, src)
}
func (m *ListComplianceScanResultsOverviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanResultsOverviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanResultsOverviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanResultsOverviewResponse proto.InternalMessageInfo

func (m *ListComplianceScanResultsOverviewResponse) GetScanOverviews() []*ComplianceScanResultsOverview {
	if m != nil {
		return m.ScanOverviews
	}
	return nil
}

func (m *ListComplianceScanResultsOverviewResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanResultsOverviewResponse) Clone() *ListComplianceScanResultsOverviewResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanResultsOverviewResponse)
	*cloned = *m

	if m.ScanOverviews != nil {
		cloned.ScanOverviews = make([]*ComplianceScanResultsOverview, len(m.ScanOverviews))
		for idx, v := range m.ScanOverviews {
			cloned.ScanOverviews[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceProfileScanStatsResponse provides stats for the profiles within the scans
type ListComplianceProfileScanStatsResponse struct {
	ScanStats            []*ComplianceProfileScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListComplianceProfileScanStatsResponse) Reset() {
	*m = ListComplianceProfileScanStatsResponse{}
}
func (m *ListComplianceProfileScanStatsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceProfileScanStatsResponse) ProtoMessage()    {}
func (*ListComplianceProfileScanStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{7}
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceProfileScanStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceProfileScanStatsResponse.Merge(m, src)
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceProfileScanStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceProfileScanStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceProfileScanStatsResponse proto.InternalMessageInfo

func (m *ListComplianceProfileScanStatsResponse) GetScanStats() []*ComplianceProfileScanStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceProfileScanStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceProfileScanStatsResponse) Clone() *ListComplianceProfileScanStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceProfileScanStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceProfileScanStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceClusterScanStatsResponse provides stats for the clusters within the scans
type ListComplianceClusterScanStatsResponse struct {
	ScanStats            []*ComplianceClusterScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListComplianceClusterScanStatsResponse) Reset() {
	*m = ListComplianceClusterScanStatsResponse{}
}
func (m *ListComplianceClusterScanStatsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceClusterScanStatsResponse) ProtoMessage()    {}
func (*ListComplianceClusterScanStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{8}
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceClusterScanStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceClusterScanStatsResponse.Merge(m, src)
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceClusterScanStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceClusterScanStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceClusterScanStatsResponse proto.InternalMessageInfo

func (m *ListComplianceClusterScanStatsResponse) GetScanStats() []*ComplianceClusterScanStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceClusterScanStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceClusterScanStatsResponse) Clone() *ListComplianceClusterScanStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceClusterScanStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceClusterScanStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceScanResultsResponse provides the complete scan results
type ListComplianceScanResultsResponse struct {
	ScanResults          []*ComplianceScanResult `protobuf:"bytes,1,rep,name=scan_results,json=scanResults,proto3" json:"scan_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListComplianceScanResultsResponse) Reset()         { *m = ListComplianceScanResultsResponse{} }
func (m *ListComplianceScanResultsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanResultsResponse) ProtoMessage()    {}
func (*ListComplianceScanResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{9}
}
func (m *ListComplianceScanResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanResultsResponse.Merge(m, src)
}
func (m *ListComplianceScanResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanResultsResponse proto.InternalMessageInfo

func (m *ListComplianceScanResultsResponse) GetScanResults() []*ComplianceScanResult {
	if m != nil {
		return m.ScanResults
	}
	return nil
}

func (m *ListComplianceScanResultsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanResultsResponse) Clone() *ListComplianceScanResultsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanResultsResponse)
	*cloned = *m

	if m.ScanResults != nil {
		cloned.ScanResults = make([]*ComplianceScanResult, len(m.ScanResults))
		for idx, v := range m.ScanResults {
			cloned.ScanResults[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v2.ComplianceCheckResult_CheckStatus", ComplianceCheckResult_CheckStatus_name, ComplianceCheckResult_CheckStatus_value)
	proto.RegisterType((*ComplianceCheckResult)(nil), "v2.ComplianceCheckResult")
	proto.RegisterType((*ComplianceCheckResult_ClusterCheckStatus)(nil), "v2.ComplianceCheckResult.ClusterCheckStatus")
	proto.RegisterType((*ComplianceScanResult)(nil), "v2.ComplianceScanResult")
	proto.RegisterType((*ComplianceScanStatsShim)(nil), "v2.ComplianceScanStatsShim")
	proto.RegisterType((*ComplianceScanResultsOverview)(nil), "v2.ComplianceScanResultsOverview")
	proto.RegisterType((*ComplianceProfileScanStats)(nil), "v2.ComplianceProfileScanStats")
	proto.RegisterType((*ComplianceClusterScanStats)(nil), "v2.ComplianceClusterScanStats")
	proto.RegisterType((*ListComplianceScanResultsOverviewResponse)(nil), "v2.ListComplianceScanResultsOverviewResponse")
	proto.RegisterType((*ListComplianceProfileScanStatsResponse)(nil), "v2.ListComplianceProfileScanStatsResponse")
	proto.RegisterType((*ListComplianceClusterScanStatsResponse)(nil), "v2.ListComplianceClusterScanStatsResponse")
	proto.RegisterType((*ListComplianceScanResultsResponse)(nil), "v2.ListComplianceScanResultsResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_results_service.proto", fileDescriptor_fb98f7f6563d14bb)
}

var fileDescriptor_fb98f7f6563d14bb = []byte{
	// 964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0x1e, 0x27, 0x69, 0x9a, 0x9c, 0x64, 0x2a, 0xeb, 0xc2, 0x08, 0x37, 0x9d, 0x86, 0xd4, 0xc3,
	0x40, 0x07, 0x81, 0x23, 0x99, 0x05, 0x12, 0xa8, 0x48, 0x99, 0xa8, 0x85, 0x48, 0x21, 0x09, 0x76,
	0x46, 0x42, 0x6c, 0xcc, 0xad, 0x73, 0xd3, 0x5a, 0x93, 0xd8, 0xc6, 0xd7, 0x49, 0x41, 0xec, 0x10,
	0xac, 0x58, 0x22, 0x21, 0x36, 0x6c, 0xd9, 0xf3, 0x06, 0x2c, 0x59, 0x22, 0xf1, 0x02, 0xa8, 0xf0,
	0x20, 0xe8, 0xfe, 0x24, 0x8e, 0xe3, 0x24, 0x0c, 0x52, 0x77, 0x3d, 0x7f, 0xfe, 0xbe, 0x73, 0xce,
	0x77, 0x6e, 0x0a, 0x6f, 0xe0, 0xd0, 0x6b, 0xce, 0xcd, 0xa6, 0x1b, 0x4c, 0xc3, 0x89, 0x87, 0x7d,
	0x97, 0x38, 0x11, 0xa1, 0xb3, 0x49, 0x4c, 0x1d, 0x4a, 0xa2, 0xb9, 0xe7, 0x12, 0x23, 0x8c, 0x82,
	0x38, 0x40, 0xb9, 0xb9, 0x59, 0x7b, 0xf5, 0x2a, 0x08, 0xae, 0x26, 0xa4, 0xc9, 0x3d, 0x97, 0xb3,
	0x71, 0x33, 0xf6, 0xa6, 0x84, 0xc6, 0x78, 0x1a, 0x8a, 0xa4, 0xda, 0x43, 0x99, 0xc0, 0x3e, 0x8a,
	0x7d, 0x3f, 0x88, 0x71, 0xec, 0x05, 0x3e, 0x95, 0xd1, 0x97, 0x12, 0xac, 0x69, 0xe0, 0x4b, 0xe7,
	0xa1, 0x74, 0x52, 0x82, 0x23, 0xf7, 0xda, 0xf9, 0x62, 0x46, 0xa2, 0xaf, 0x44, 0x48, 0xff, 0xad,
	0x00, 0x0f, 0xda, 0x4b, 0x5e, 0xed, 0x6b, 0xe2, 0x3e, 0xb7, 0x38, 0x37, 0x74, 0x08, 0x25, 0x97,
	0x99, 0x8e, 0x37, 0xd2, 0x94, 0x86, 0x72, 0x5a, 0xb6, 0xf6, 0xb9, 0xdd, 0x19, 0xa1, 0x63, 0x00,
	0x11, 0xf2, 0xf1, 0x94, 0x68, 0x39, 0x1e, 0x2c, 0x73, 0x4f, 0x0f, 0x4f, 0x09, 0xfa, 0x08, 0x4a,
	0xee, 0x64, 0x46, 0x63, 0x12, 0x51, 0x2d, 0xdf, 0xc8, 0x9f, 0x56, 0xcc, 0xb7, 0x8c, 0xb9, 0x69,
	0x6c, 0x84, 0x31, 0xda, 0x22, 0x93, 0xbb, 0xec, 0x18, 0xc7, 0x33, 0x6a, 0x2d, 0xab, 0x51, 0x03,
	0x2a, 0x23, 0x42, 0xdd, 0xc8, 0x0b, 0x59, 0x8f, 0x5a, 0x81, 0x23, 0xad, 0xba, 0x90, 0x0e, 0x55,
	0xcf, 0xa7, 0x71, 0x34, 0x73, 0xf9, 0x14, 0xb4, 0x3d, 0x9e, 0x92, 0xf2, 0xa1, 0x1a, 0x94, 0x68,
	0x8c, 0xfd, 0x11, 0x8e, 0x46, 0x5a, 0x91, 0xc7, 0x97, 0x36, 0xd2, 0x60, 0xdf, 0x0d, 0xfc, 0x38,
	0x0a, 0x26, 0xda, 0xbe, 0x6c, 0x52, 0x98, 0xb5, 0x5f, 0x15, 0x40, 0x59, 0x72, 0xbc, 0x77, 0xe1,
	0x4d, 0x06, 0x53, 0x96, 0x9e, 0xce, 0x08, 0x9d, 0x41, 0x91, 0xf2, 0x44, 0x3e, 0x96, 0x03, 0xf3,
	0xf1, 0x8e, 0xce, 0x57, 0x5a, 0x96, 0x45, 0xe8, 0x0c, 0xaa, 0x6e, 0x44, 0x70, 0x4c, 0x46, 0x0e,
	0xdb, 0xbb, 0x96, 0x6f, 0x28, 0xa7, 0x15, 0xb3, 0x66, 0x88, 0x9d, 0x1b, 0x0b, 0x51, 0x18, 0xc3,
	0x85, 0x28, 0xac, 0x8a, 0xcc, 0x67, 0x1e, 0x9d, 0x42, 0x65, 0x95, 0x6b, 0x19, 0xf6, 0x9e, 0xf5,
	0xec, 0xf3, 0xa1, 0x7a, 0x0f, 0x95, 0xa0, 0x30, 0x68, 0xd9, 0xb6, 0xaa, 0xb0, 0xbf, 0x2e, 0x5a,
	0x9d, 0xae, 0x9a, 0x63, 0xe1, 0x73, 0xcb, 0xea, 0x5b, 0x6a, 0x9e, 0x39, 0x3b, 0xbd, 0x8b, 0xbe,
	0x5a, 0x40, 0x00, 0xc5, 0x8f, 0x5b, 0xbd, 0x67, 0xad, 0xae, 0xba, 0x87, 0x10, 0x1c, 0xf4, 0xfa,
	0x43, 0xa7, 0x35, 0x18, 0x74, 0x3b, 0xed, 0xd6, 0xd3, 0xee, 0xb9, 0x5a, 0x44, 0x2a, 0x54, 0x3b,
	0xbd, 0x76, 0xbf, 0x67, 0x77, 0xec, 0xe1, 0x79, 0x6f, 0xa8, 0xee, 0xeb, 0x3f, 0x2a, 0xf0, 0x72,
	0xd2, 0xa1, 0xed, 0x62, 0x5f, 0x2a, 0xe8, 0x08, 0xca, 0xd4, 0xc5, 0xbe, 0x50, 0x89, 0x22, 0x07,
	0xef, 0x62, 0x9f, 0x8b, 0xe4, 0x04, 0xaa, 0x61, 0x14, 0x8c, 0xbd, 0x09, 0x59, 0x55, 0x51, 0x45,
	0xfa, 0x78, 0xca, 0x07, 0x70, 0x5f, 0xc8, 0x4c, 0x5e, 0x8b, 0x14, 0xd3, 0xe1, 0xd6, 0x91, 0x5a,
	0x55, 0x37, 0x31, 0xa8, 0xfe, 0x7d, 0x0e, 0x5e, 0x49, 0x13, 0x63, 0x73, 0xa1, 0xf6, 0xb5, 0x37,
	0xdd, 0xcd, 0xed, 0x14, 0x54, 0x7f, 0x36, 0xbd, 0x24, 0x91, 0x13, 0x8c, 0x1d, 0xfe, 0x49, 0xb1,
	0xce, 0x3d, 0xeb, 0x40, 0xf8, 0xfb, 0x63, 0x8e, 0x4a, 0xd1, 0xbb, 0xa0, 0x25, 0x99, 0x63, 0xec,
	0x4d, 0x3c, 0xff, 0x6a, 0x51, 0x91, 0xe7, 0x15, 0x0f, 0x16, 0x15, 0x17, 0x22, 0xba, 0xa9, 0x30,
	0xc4, 0x94, 0xae, 0x14, 0x16, 0xd2, 0x85, 0x03, 0x11, 0x5d, 0x16, 0x96, 0x27, 0x98, 0xc6, 0x0e,
	0x23, 0xcb, 0xd5, 0xbe, 0x5b, 0x1e, 0x25, 0x96, 0xcc, 0x5a, 0xd7, 0x7f, 0x56, 0xe0, 0x78, 0xd3,
	0x9a, 0x68, 0x7f, 0xce, 0x1e, 0x21, 0x72, 0x83, 0xde, 0x03, 0xe0, 0x33, 0x61, 0x5a, 0xa4, 0x7c,
	0x28, 0x15, 0xf3, 0x28, 0x3d, 0xec, 0xd4, 0x10, 0x2d, 0x3e, 0x42, 0x6e, 0x6e, 0x58, 0x67, 0x7e,
	0x7d, 0x9d, 0xe9, 0xcb, 0xc9, 0xf3, 0x84, 0xe4, 0x72, 0xf4, 0xaf, 0xa1, 0x96, 0xe0, 0x0c, 0x44,
	0xdd, 0x12, 0xee, 0x8e, 0xb9, 0xad, 0x4b, 0x4d, 0xbf, 0x59, 0x05, 0x97, 0x57, 0x7f, 0x37, 0xe0,
	0xe9, 0xae, 0x73, 0x6b, 0xef, 0x85, 0x3e, 0x83, 0x27, 0x5d, 0x8f, 0xc6, 0x3b, 0x17, 0x63, 0x11,
	0x1a, 0x06, 0x3e, 0x65, 0x0f, 0xeb, 0x01, 0xe7, 0x11, 0xc8, 0x00, 0xe3, 0xc2, 0x2e, 0xe2, 0x24,
	0xcb, 0x65, 0xfd, 0x13, 0xf7, 0x59, 0xe1, 0xc2, 0xa2, 0xfa, 0x15, 0xbc, 0x9e, 0x86, 0x5d, 0x1f,
	0xf8, 0x12, 0xf3, 0x6c, 0xad, 0x77, 0x86, 0x57, 0x4f, 0xe3, 0x65, 0x6a, 0x93, 0xf6, 0xb3, 0x40,
	0xeb, 0xc3, 0xfd, 0x3f, 0x40, 0x99, 0xda, 0x15, 0xa0, 0xcf, 0xe1, 0x64, 0xeb, 0x20, 0x97, 0x18,
	0xef, 0x43, 0x95, 0x63, 0x2c, 0x1e, 0x14, 0x81, 0xa2, 0x6d, 0x1b, 0x9f, 0x55, 0xa1, 0xc9, 0x47,
	0xcc, 0x5f, 0x0a, 0xa0, 0x25, 0x59, 0xd2, 0x6b, 0x8b, 0x1f, 0x70, 0xf4, 0x9d, 0x02, 0x8d, 0x0f,
	0xc9, 0xee, 0x3d, 0xa2, 0x2a, 0x03, 0xb2, 0xf0, 0xcd, 0x27, 0xec, 0x07, 0xb8, 0xf6, 0x36, 0xb3,
	0x5e, 0x78, 0xf9, 0xfa, 0x6b, 0xdf, 0xfc, 0xf9, 0xcf, 0x0f, 0xb9, 0x3a, 0x7a, 0x98, 0xfe, 0x57,
	0xa2, 0xc9, 0x28, 0x36, 0x17, 0x8a, 0x40, 0x31, 0x68, 0xdb, 0x68, 0xac, 0xc1, 0x3f, 0xde, 0x09,
	0xbf, 0x84, 0x7d, 0xc4, 0x61, 0x8f, 0xd1, 0xd1, 0x26, 0x58, 0x39, 0x47, 0xf4, 0xad, 0x02, 0xc7,
	0x29, 0xd8, 0xcc, 0xfd, 0xa6, 0xb1, 0xdf, 0xcc, 0x62, 0x6f, 0x13, 0xa0, 0xfe, 0x84, 0x13, 0x78,
	0x84, 0x4e, 0x36, 0x11, 0xe0, 0x62, 0x69, 0xca, 0x4b, 0xce, 0xd2, 0xc8, 0x5c, 0xf2, 0x7f, 0xd2,
	0xd8, 0x26, 0xcf, 0x17, 0xa1, 0x21, 0xaf, 0xfa, 0xa9, 0xf1, 0xfb, 0x6d, 0x5d, 0xf9, 0xe3, 0xb6,
	0xae, 0xfc, 0x75, 0x5b, 0x57, 0x7e, 0xfa, 0xbb, 0x7e, 0x0f, 0x34, 0x2f, 0x30, 0x68, 0x8c, 0xdd,
	0xe7, 0x51, 0xf0, 0xa5, 0x78, 0xa5, 0x0d, 0x1c, 0x7a, 0xc6, 0xdc, 0xfc, 0x2c, 0x37, 0x37, 0x3f,
	0x55, 0x2e, 0x8b, 0xdc, 0xf7, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89, 0xde, 0x30, 0x1b,
	0x2a, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceResultsServiceClient is the client API for ComplianceResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ComplianceResultsServiceClient interface {
	// GetComplianceScanResultsOverview lists current scan configurations with most recent results overview that match the query
	GetComplianceScanResultsOverview(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsOverviewResponse, error)
	// GetComplianceScanResults retrieves the most recent compliance operator scan results for the specified query
	GetComplianceScanResults(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
	// GetComplianceProfileScanStats lists current scan stats by profile
	GetComplianceProfileScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceClusterScanStats lists current scan stats by cluster
	GetComplianceClusterScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterScanStatsResponse, error)
}

type complianceResultsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceResultsServiceClient(cc grpc.ClientConnInterface) ComplianceResultsServiceClient {
	return &complianceResultsServiceClient{cc}
}

func (c *complianceResultsServiceClient) GetComplianceScanResultsOverview(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsOverviewResponse, error) {
	out := new(ListComplianceScanResultsOverviewResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceScanResultsOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanResults(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceScanResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceProfileScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error) {
	out := new(ListComplianceProfileScanStatsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceProfileScanStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceClusterScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterScanStatsResponse, error) {
	out := new(ListComplianceClusterScanStatsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceClusterScanStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceResultsServiceServer is the server API for ComplianceResultsService service.
type ComplianceResultsServiceServer interface {
	// GetComplianceScanResultsOverview lists current scan configurations with most recent results overview that match the query
	GetComplianceScanResultsOverview(context.Context, *RawQuery) (*ListComplianceScanResultsOverviewResponse, error)
	// GetComplianceScanResults retrieves the most recent compliance operator scan results for the specified query
	GetComplianceScanResults(context.Context, *RawQuery) (*ListComplianceScanResultsResponse, error)
	// GetComplianceProfileScanStats lists current scan stats by profile
	GetComplianceProfileScanStats(context.Context, *RawQuery) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceClusterScanStats lists current scan stats by cluster
	GetComplianceClusterScanStats(context.Context, *RawQuery) (*ListComplianceClusterScanStatsResponse, error)
}

// UnimplementedComplianceResultsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceResultsServiceServer struct {
}

func (*UnimplementedComplianceResultsServiceServer) GetComplianceScanResultsOverview(ctx context.Context, req *RawQuery) (*ListComplianceScanResultsOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResultsOverview not implemented")
}
func (*UnimplementedComplianceResultsServiceServer) GetComplianceScanResults(ctx context.Context, req *RawQuery) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResults not implemented")
}
func (*UnimplementedComplianceResultsServiceServer) GetComplianceProfileScanStats(ctx context.Context, req *RawQuery) (*ListComplianceProfileScanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfileScanStats not implemented")
}
func (*UnimplementedComplianceResultsServiceServer) GetComplianceClusterScanStats(ctx context.Context, req *RawQuery) (*ListComplianceClusterScanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceClusterScanStats not implemented")
}

func RegisterComplianceResultsServiceServer(s *grpc.Server, srv ComplianceResultsServiceServer) {
	s.RegisterService(&_ComplianceResultsService_serviceDesc, srv)
}

func _ComplianceResultsService_GetComplianceScanResultsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceScanResultsOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsOverview(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceScanResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceProfileScanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileScanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceProfileScanStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileScanStats(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceClusterScanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceClusterScanStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanStats(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceResultsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceResultsService",
	HandlerType: (*ComplianceResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComplianceScanResultsOverview",
			Handler:    _ComplianceResultsService_GetComplianceScanResultsOverview_Handler,
		},
		{
			MethodName: "GetComplianceScanResults",
			Handler:    _ComplianceResultsService_GetComplianceScanResults_Handler,
		},
		{
			MethodName: "GetComplianceProfileScanStats",
			Handler:    _ComplianceResultsService_GetComplianceProfileScanStats_Handler,
		},
		{
			MethodName: "GetComplianceClusterScanStats",
			Handler:    _ComplianceResultsService_GetComplianceClusterScanStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_results_service.proto",
}

func (m *ComplianceCheckResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceCheckResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceCheckResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckId) > 0 {
		i -= len(m.CheckId)
		copy(dAtA[i:], m.CheckId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceCheckResult_ClusterCheckStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceCheckResult_ClusterCheckStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceCheckResult_ClusterCheckStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CheckResults) > 0 {
		for iNdEx := len(m.CheckResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanStatsShim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanStatsShim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanStatsShim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastScan != nil {
		{
			size, err := m.LastScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.NumberOfPassingChecks != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.NumberOfPassingChecks))
		i--
		dAtA[i] = 0x20
	}
	if m.NumberOfFailingChecks != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.NumberOfFailingChecks))
		i--
		dAtA[i] = 0x18
	}
	if m.NumberOfChecks != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.NumberOfChecks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanResultsOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResultsOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResultsOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		for iNdEx := len(m.ClusterId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterId[iNdEx])
			copy(dAtA[i:], m.ClusterId[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProfileName) > 0 {
		for iNdEx := len(m.ProfileName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfileName[iNdEx])
			copy(dAtA[i:], m.ProfileName[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ScanStats != nil {
		{
			size, err := m.ScanStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfileScanStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfileScanStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfileScanStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScanStats != nil {
		{
			size, err := m.ScanStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceClusterScanStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceClusterScanStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceClusterScanStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScanStats != nil {
		{
			size, err := m.ScanStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanResultsOverviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanResultsOverviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanResultsOverviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanOverviews) > 0 {
		for iNdEx := len(m.ScanOverviews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanOverviews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceProfileScanStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceProfileScanStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceProfileScanStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceClusterScanStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceClusterScanStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceClusterScanStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanResults) > 0 {
		for iNdEx := len(m.ScanResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceResultsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceResultsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceCheckResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceCheckResult_ClusterCheckStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.Status))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.CheckResults) > 0 {
		for _, e := range m.CheckResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanStatsShim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.NumberOfChecks != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.NumberOfChecks))
	}
	if m.NumberOfFailingChecks != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.NumberOfFailingChecks))
	}
	if m.NumberOfPassingChecks != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.NumberOfPassingChecks))
	}
	if m.LastScan != nil {
		l = m.LastScan.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanResultsOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanStats != nil {
		l = m.ScanStats.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.ProfileName) > 0 {
		for _, s := range m.ProfileName {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if len(m.ClusterId) > 0 {
		for _, s := range m.ClusterId {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfileScanStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanStats != nil {
		l = m.ScanStats.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceClusterScanStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanStats != nil {
		l = m.ScanStats.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanResultsOverviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanOverviews) > 0 {
		for _, e := range m.ScanOverviews {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceProfileScanStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceClusterScanStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanResults) > 0 {
		for _, e := range m.ScanResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceResultsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceResultsService(x uint64) (n int) {
	return sovComplianceResultsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceCheckResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceCheckResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceCheckResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ComplianceCheckResult_ClusterCheckStatus{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceCheckResult_ClusterCheckStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCheckStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCheckStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceCheckResult_CheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckResults = append(m.CheckResults, &ComplianceCheckResult{})
			if err := m.CheckResults[len(m.CheckResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanStatsShim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanStatsShim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanStatsShim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfChecks", wireType)
			}
			m.NumberOfChecks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfChecks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfFailingChecks", wireType)
			}
			m.NumberOfFailingChecks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfFailingChecks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPassingChecks", wireType)
			}
			m.NumberOfPassingChecks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPassingChecks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScan == nil {
				m.LastScan = &types.Timestamp{}
			}
			if err := m.LastScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanResultsOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResultsOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResultsOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanStats == nil {
				m.ScanStats = &ComplianceScanStatsShim{}
			}
			if err := m.ScanStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = append(m.ProfileName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = append(m.ClusterId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfileScanStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfileScanStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfileScanStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanStats == nil {
				m.ScanStats = &ComplianceScanStatsShim{}
			}
			if err := m.ScanStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceClusterScanStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceClusterScanStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceClusterScanStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanStats == nil {
				m.ScanStats = &ComplianceScanStatsShim{}
			}
			if err := m.ScanStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanResultsOverviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanResultsOverviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanResultsOverviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanOverviews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanOverviews = append(m.ScanOverviews, &ComplianceScanResultsOverview{})
			if err := m.ScanOverviews[len(m.ScanOverviews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceProfileScanStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceProfileScanStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceProfileScanStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceProfileScanStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceClusterScanStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceClusterScanStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceClusterScanStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceClusterScanStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanResults = append(m.ScanResults, &ComplianceScanResult{})
			if err := m.ScanResults[len(m.ScanResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceResultsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceResultsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceResultsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceResultsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceResultsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceResultsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceResultsService = fmt.Errorf("proto: unexpected end of group")
)
