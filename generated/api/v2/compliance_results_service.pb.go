// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_results_service.proto

package v2

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ClusterCheckStatus groups the result of the check by cluster
type ClusterCheckStatus struct {
	Cluster              *ComplianceScanCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Status               ComplianceCheckStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=v2.ComplianceCheckStatus" json:"status,omitempty"`
	CreatedTime          *types.Timestamp       `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	CheckUid             string                 `protobuf:"bytes,4,opt,name=check_uid,json=checkUid,proto3" json:"check_uid,omitempty"`
	LastScanTime         *types.Timestamp       `protobuf:"bytes,5,opt,name=last_scan_time,json=lastScanTime,proto3" json:"last_scan_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClusterCheckStatus) Reset()         { *m = ClusterCheckStatus{} }
func (m *ClusterCheckStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterCheckStatus) ProtoMessage()    {}
func (*ClusterCheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0}
}
func (m *ClusterCheckStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCheckStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterCheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCheckStatus.Merge(m, src)
}
func (m *ClusterCheckStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCheckStatus proto.InternalMessageInfo

func (m *ClusterCheckStatus) GetCluster() *ComplianceScanCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClusterCheckStatus) GetStatus() ComplianceCheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceCheckStatus_UNSET_CHECK_STATUS
}

func (m *ClusterCheckStatus) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ClusterCheckStatus) GetCheckUid() string {
	if m != nil {
		return m.CheckUid
	}
	return ""
}

func (m *ClusterCheckStatus) GetLastScanTime() *types.Timestamp {
	if m != nil {
		return m.LastScanTime
	}
	return nil
}

func (m *ClusterCheckStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterCheckStatus) Clone() *ClusterCheckStatus {
	if m == nil {
		return nil
	}
	cloned := new(ClusterCheckStatus)
	*cloned = *m

	cloned.Cluster = m.Cluster.Clone()
	cloned.CreatedTime = m.CreatedTime.Clone()
	cloned.LastScanTime = m.LastScanTime.Clone()
	return cloned
}

// ComplianceCheckResult details of an instance of a compliance check result
type ComplianceCheckResult struct {
	CheckId              string                `protobuf:"bytes,1,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName            string                `protobuf:"bytes,2,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	CheckUid             string                `protobuf:"bytes,3,opt,name=check_uid,json=checkUid,proto3" json:"check_uid,omitempty"`
	Description          string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Instructions         string                `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Standard             string                `protobuf:"bytes,6,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              []string              `protobuf:"bytes,7,rep,name=control,proto3" json:"control,omitempty"`
	Rationale            string                `protobuf:"bytes,8,opt,name=rationale,proto3" json:"rationale,omitempty"`
	ValuesUsed           []string              `protobuf:"bytes,9,rep,name=valuesUsed,proto3" json:"valuesUsed,omitempty"`
	Warnings             []string              `protobuf:"bytes,10,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Status               ComplianceCheckStatus `protobuf:"varint,11,opt,name=status,proto3,enum=v2.ComplianceCheckStatus" json:"status,omitempty"`
	RuleName             string                `protobuf:"bytes,12,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ComplianceCheckResult) Reset()         { *m = ComplianceCheckResult{} }
func (m *ComplianceCheckResult) String() string { return proto.CompactTextString(m) }
func (*ComplianceCheckResult) ProtoMessage()    {}
func (*ComplianceCheckResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{1}
}
func (m *ComplianceCheckResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceCheckResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceCheckResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceCheckResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceCheckResult.Merge(m, src)
}
func (m *ComplianceCheckResult) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceCheckResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceCheckResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceCheckResult proto.InternalMessageInfo

func (m *ComplianceCheckResult) GetCheckId() string {
	if m != nil {
		return m.CheckId
	}
	return ""
}

func (m *ComplianceCheckResult) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceCheckResult) GetCheckUid() string {
	if m != nil {
		return m.CheckUid
	}
	return ""
}

func (m *ComplianceCheckResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceCheckResult) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceCheckResult) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceCheckResult) GetControl() []string {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *ComplianceCheckResult) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceCheckResult) GetValuesUsed() []string {
	if m != nil {
		return m.ValuesUsed
	}
	return nil
}

func (m *ComplianceCheckResult) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *ComplianceCheckResult) GetStatus() ComplianceCheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceCheckStatus_UNSET_CHECK_STATUS
}

func (m *ComplianceCheckResult) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *ComplianceCheckResult) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceCheckResult) Clone() *ComplianceCheckResult {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceCheckResult)
	*cloned = *m

	if m.Control != nil {
		cloned.Control = make([]string, len(m.Control))
		copy(cloned.Control, m.Control)
	}
	if m.ValuesUsed != nil {
		cloned.ValuesUsed = make([]string, len(m.ValuesUsed))
		copy(cloned.ValuesUsed, m.ValuesUsed)
	}
	if m.Warnings != nil {
		cloned.Warnings = make([]string, len(m.Warnings))
		copy(cloned.Warnings, m.Warnings)
	}
	return cloned
}

// ComplianceClusterCheckStatus provides the status of a compliance check result across clusters
type ComplianceClusterCheckStatus struct {
	CheckId              string                `protobuf:"bytes,1,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName            string                `protobuf:"bytes,2,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Clusters             []*ClusterCheckStatus `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Description          string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Instructions         string                `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Standard             string                `protobuf:"bytes,6,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              []string              `protobuf:"bytes,7,rep,name=control,proto3" json:"control,omitempty"`
	Rationale            string                `protobuf:"bytes,8,opt,name=rationale,proto3" json:"rationale,omitempty"`
	ValuesUsed           []string              `protobuf:"bytes,9,rep,name=valuesUsed,proto3" json:"valuesUsed,omitempty"`
	Warnings             []string              `protobuf:"bytes,10,rep,name=warnings,proto3" json:"warnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ComplianceClusterCheckStatus) Reset()         { *m = ComplianceClusterCheckStatus{} }
func (m *ComplianceClusterCheckStatus) String() string { return proto.CompactTextString(m) }
func (*ComplianceClusterCheckStatus) ProtoMessage()    {}
func (*ComplianceClusterCheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{2}
}
func (m *ComplianceClusterCheckStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceClusterCheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceClusterCheckStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceClusterCheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceClusterCheckStatus.Merge(m, src)
}
func (m *ComplianceClusterCheckStatus) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceClusterCheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceClusterCheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceClusterCheckStatus proto.InternalMessageInfo

func (m *ComplianceClusterCheckStatus) GetCheckId() string {
	if m != nil {
		return m.CheckId
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetClusters() []*ClusterCheckStatus {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceClusterCheckStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetControl() []string {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *ComplianceClusterCheckStatus) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceClusterCheckStatus) GetValuesUsed() []string {
	if m != nil {
		return m.ValuesUsed
	}
	return nil
}

func (m *ComplianceClusterCheckStatus) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *ComplianceClusterCheckStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceClusterCheckStatus) Clone() *ComplianceClusterCheckStatus {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceClusterCheckStatus)
	*cloned = *m

	if m.Clusters != nil {
		cloned.Clusters = make([]*ClusterCheckStatus, len(m.Clusters))
		for idx, v := range m.Clusters {
			cloned.Clusters[idx] = v.Clone()
		}
	}
	if m.Control != nil {
		cloned.Control = make([]string, len(m.Control))
		copy(cloned.Control, m.Control)
	}
	if m.ValuesUsed != nil {
		cloned.ValuesUsed = make([]string, len(m.ValuesUsed))
		copy(cloned.ValuesUsed, m.ValuesUsed)
	}
	if m.Warnings != nil {
		cloned.Warnings = make([]string, len(m.Warnings))
		copy(cloned.Warnings, m.Warnings)
	}
	return cloned
}

// ComplianceScanResult provides the results of a scan
type ComplianceScanResult struct {
	ScanName             string                          `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ProfileName          string                          `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	CheckResults         []*ComplianceClusterCheckStatus `protobuf:"bytes,3,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	ScanConfigId         string                          `protobuf:"bytes,4,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ComplianceScanResult) Reset()         { *m = ComplianceScanResult{} }
func (m *ComplianceScanResult) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResult) ProtoMessage()    {}
func (*ComplianceScanResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{3}
}
func (m *ComplianceScanResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResult.Merge(m, src)
}
func (m *ComplianceScanResult) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResult proto.InternalMessageInfo

func (m *ComplianceScanResult) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanResult) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceScanResult) GetCheckResults() []*ComplianceClusterCheckStatus {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *ComplianceScanResult) GetScanConfigId() string {
	if m != nil {
		return m.ScanConfigId
	}
	return ""
}

func (m *ComplianceScanResult) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResult) Clone() *ComplianceScanResult {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResult)
	*cloned = *m

	if m.CheckResults != nil {
		cloned.CheckResults = make([]*ComplianceClusterCheckStatus, len(m.CheckResults))
		for idx, v := range m.CheckResults {
			cloned.CheckResults[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceScanResultsResponse provides the complete scan results
type ListComplianceScanResultsResponse struct {
	ScanResults          []*ComplianceScanResult `protobuf:"bytes,1,rep,name=scan_results,json=scanResults,proto3" json:"scan_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListComplianceScanResultsResponse) Reset()         { *m = ListComplianceScanResultsResponse{} }
func (m *ListComplianceScanResultsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanResultsResponse) ProtoMessage()    {}
func (*ListComplianceScanResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{4}
}
func (m *ListComplianceScanResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanResultsResponse.Merge(m, src)
}
func (m *ListComplianceScanResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanResultsResponse proto.InternalMessageInfo

func (m *ListComplianceScanResultsResponse) GetScanResults() []*ComplianceScanResult {
	if m != nil {
		return m.ScanResults
	}
	return nil
}

func (m *ListComplianceScanResultsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanResultsResponse) Clone() *ListComplianceScanResultsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanResultsResponse)
	*cloned = *m

	if m.ScanResults != nil {
		cloned.ScanResults = make([]*ComplianceScanResult, len(m.ScanResults))
		for idx, v := range m.ScanResults {
			cloned.ScanResults[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceCheckClusterResponse provides stats per cluster
type ListComplianceCheckClusterResponse struct {
	CheckResults         []*ClusterCheckStatus `protobuf:"bytes,1,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	ProfileName          string                `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	CheckName            string                `protobuf:"bytes,3,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	TotalCount           int32                 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListComplianceCheckClusterResponse) Reset()         { *m = ListComplianceCheckClusterResponse{} }
func (m *ListComplianceCheckClusterResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceCheckClusterResponse) ProtoMessage()    {}
func (*ListComplianceCheckClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{5}
}
func (m *ListComplianceCheckClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceCheckClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceCheckClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceCheckClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceCheckClusterResponse.Merge(m, src)
}
func (m *ListComplianceCheckClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceCheckClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceCheckClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceCheckClusterResponse proto.InternalMessageInfo

func (m *ListComplianceCheckClusterResponse) GetCheckResults() []*ClusterCheckStatus {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *ListComplianceCheckClusterResponse) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ListComplianceCheckClusterResponse) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ListComplianceCheckClusterResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceCheckClusterResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceCheckClusterResponse) Clone() *ListComplianceCheckClusterResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceCheckClusterResponse)
	*cloned = *m

	if m.CheckResults != nil {
		cloned.CheckResults = make([]*ClusterCheckStatus, len(m.CheckResults))
		for idx, v := range m.CheckResults {
			cloned.CheckResults[idx] = v.Clone()
		}
	}
	return cloned
}

type ListComplianceCheckResultResponse struct {
	CheckResults         []*ComplianceCheckResult `protobuf:"bytes,1,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	ProfileName          string                   `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	ClusterId            string                   `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TotalCount           int32                    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	LastScanTime         *types.Timestamp         `protobuf:"bytes,5,opt,name=last_scan_time,json=lastScanTime,proto3" json:"last_scan_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListComplianceCheckResultResponse) Reset()         { *m = ListComplianceCheckResultResponse{} }
func (m *ListComplianceCheckResultResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceCheckResultResponse) ProtoMessage()    {}
func (*ListComplianceCheckResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{6}
}
func (m *ListComplianceCheckResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceCheckResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceCheckResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceCheckResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceCheckResultResponse.Merge(m, src)
}
func (m *ListComplianceCheckResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceCheckResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceCheckResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceCheckResultResponse proto.InternalMessageInfo

func (m *ListComplianceCheckResultResponse) GetCheckResults() []*ComplianceCheckResult {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *ListComplianceCheckResultResponse) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ListComplianceCheckResultResponse) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListComplianceCheckResultResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceCheckResultResponse) GetLastScanTime() *types.Timestamp {
	if m != nil {
		return m.LastScanTime
	}
	return nil
}

func (m *ListComplianceCheckResultResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceCheckResultResponse) Clone() *ListComplianceCheckResultResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceCheckResultResponse)
	*cloned = *m

	if m.CheckResults != nil {
		cloned.CheckResults = make([]*ComplianceCheckResult, len(m.CheckResults))
		for idx, v := range m.CheckResults {
			cloned.CheckResults[idx] = v.Clone()
		}
	}
	cloned.LastScanTime = m.LastScanTime.Clone()
	return cloned
}

// CountComplianceScanResults gives count of scan results
type CountComplianceScanResults struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountComplianceScanResults) Reset()         { *m = CountComplianceScanResults{} }
func (m *CountComplianceScanResults) String() string { return proto.CompactTextString(m) }
func (*CountComplianceScanResults) ProtoMessage()    {}
func (*CountComplianceScanResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{7}
}
func (m *CountComplianceScanResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountComplianceScanResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountComplianceScanResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountComplianceScanResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountComplianceScanResults.Merge(m, src)
}
func (m *CountComplianceScanResults) XXX_Size() int {
	return m.Size()
}
func (m *CountComplianceScanResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CountComplianceScanResults.DiscardUnknown(m)
}

var xxx_messageInfo_CountComplianceScanResults proto.InternalMessageInfo

func (m *CountComplianceScanResults) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountComplianceScanResults) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountComplianceScanResults) Clone() *CountComplianceScanResults {
	if m == nil {
		return nil
	}
	cloned := new(CountComplianceScanResults)
	*cloned = *m

	return cloned
}

type ComplianceScanResultsRequest struct {
	ScanConfigName       string    `protobuf:"bytes,1,opt,name=scan_config_name,json=scanConfigName,proto3" json:"scan_config_name,omitempty"`
	Query                *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceScanResultsRequest) Reset()         { *m = ComplianceScanResultsRequest{} }
func (m *ComplianceScanResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResultsRequest) ProtoMessage()    {}
func (*ComplianceScanResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{8}
}
func (m *ComplianceScanResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResultsRequest.Merge(m, src)
}
func (m *ComplianceScanResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResultsRequest proto.InternalMessageInfo

func (m *ComplianceScanResultsRequest) GetScanConfigName() string {
	if m != nil {
		return m.ScanConfigName
	}
	return ""
}

func (m *ComplianceScanResultsRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ComplianceScanResultsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResultsRequest) Clone() *ComplianceScanResultsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResultsRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

type ComplianceProfileClusterRequest struct {
	ProfileName          string    `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	ClusterId            string    `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Query                *RawQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceProfileClusterRequest) Reset()         { *m = ComplianceProfileClusterRequest{} }
func (m *ComplianceProfileClusterRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfileClusterRequest) ProtoMessage()    {}
func (*ComplianceProfileClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{9}
}
func (m *ComplianceProfileClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfileClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfileClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfileClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfileClusterRequest.Merge(m, src)
}
func (m *ComplianceProfileClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfileClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfileClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfileClusterRequest proto.InternalMessageInfo

func (m *ComplianceProfileClusterRequest) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceProfileClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceProfileClusterRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ComplianceProfileClusterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfileClusterRequest) Clone() *ComplianceProfileClusterRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfileClusterRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*ClusterCheckStatus)(nil), "v2.ClusterCheckStatus")
	proto.RegisterType((*ComplianceCheckResult)(nil), "v2.ComplianceCheckResult")
	proto.RegisterType((*ComplianceClusterCheckStatus)(nil), "v2.ComplianceClusterCheckStatus")
	proto.RegisterType((*ComplianceScanResult)(nil), "v2.ComplianceScanResult")
	proto.RegisterType((*ListComplianceScanResultsResponse)(nil), "v2.ListComplianceScanResultsResponse")
	proto.RegisterType((*ListComplianceCheckClusterResponse)(nil), "v2.ListComplianceCheckClusterResponse")
	proto.RegisterType((*ListComplianceCheckResultResponse)(nil), "v2.ListComplianceCheckResultResponse")
	proto.RegisterType((*CountComplianceScanResults)(nil), "v2.CountComplianceScanResults")
	proto.RegisterType((*ComplianceScanResultsRequest)(nil), "v2.ComplianceScanResultsRequest")
	proto.RegisterType((*ComplianceProfileClusterRequest)(nil), "v2.ComplianceProfileClusterRequest")
}

func init() {
	proto.RegisterFile("api/v2/compliance_results_service.proto", fileDescriptor_fb98f7f6563d14bb)
}

var fileDescriptor_fb98f7f6563d14bb = []byte{
	// 1137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xf1, 0x2e, 0xf9, 0xb1, 0x6f, 0x97, 0xa8, 0x1a, 0x0a, 0x72, 0x36, 0xc9, 0x66, 0xe3,
	0x50, 0x1a, 0x38, 0xd8, 0xe0, 0xa2, 0x22, 0xd1, 0x82, 0x50, 0x02, 0xaa, 0x56, 0x20, 0xa0, 0x0e,
	0x95, 0x10, 0x97, 0x65, 0x6a, 0x4f, 0x52, 0xab, 0x8e, 0xbd, 0xf5, 0x8c, 0xb7, 0xad, 0x56, 0xb9,
	0x70, 0x81, 0x33, 0x70, 0x40, 0xfc, 0x05, 0x1c, 0xf8, 0x17, 0x38, 0x95, 0x03, 0x47, 0x24, 0xfe,
	0x01, 0x14, 0xf8, 0x43, 0x90, 0xdf, 0x8c, 0xbd, 0xb6, 0xd7, 0x9b, 0x8d, 0x22, 0x4e, 0x1c, 0xe7,
	0xbd, 0x99, 0x79, 0x9f, 0xf7, 0xe6, 0xfb, 0xde, 0x7a, 0xe1, 0x3a, 0x1d, 0xf9, 0xd6, 0xd8, 0xb6,
	0xdc, 0xe8, 0x64, 0x14, 0xf8, 0x34, 0x74, 0xd9, 0x30, 0x66, 0x3c, 0x09, 0x04, 0x1f, 0x72, 0x16,
	0x8f, 0x7d, 0x97, 0x99, 0xa3, 0x38, 0x12, 0x11, 0x69, 0x8c, 0xed, 0xee, 0x8b, 0xd3, 0xcd, 0x27,
	0x51, 0x28, 0x1d, 0xdd, 0xde, 0xec, 0x0d, 0x25, 0xff, 0xba, 0xf2, 0x73, 0x46, 0x63, 0xf7, 0xc1,
	0xf0, 0x51, 0xc2, 0xe2, 0xa7, 0xca, 0xb5, 0x79, 0x1c, 0x45, 0xc7, 0x01, 0xb3, 0xd2, 0x1d, 0x34,
	0x0c, 0x23, 0x41, 0x85, 0x1f, 0x85, 0x5c, 0x79, 0xb7, 0x95, 0x17, 0x57, 0xf7, 0x93, 0x23, 0x4b,
	0xf8, 0x27, 0x8c, 0x0b, 0x7a, 0x32, 0x92, 0x1b, 0x8c, 0x9f, 0x1a, 0x40, 0x0e, 0x82, 0x84, 0x0b,
	0x16, 0x1f, 0x3c, 0x60, 0xee, 0xc3, 0x43, 0x41, 0x45, 0xc2, 0xc9, 0x0d, 0x58, 0x71, 0xa5, 0x55,
	0xd7, 0xfa, 0xda, 0x5e, 0xdb, 0x5e, 0x37, 0xc7, 0xb6, 0x79, 0x90, 0xe3, 0x1d, 0xba, 0x34, 0x54,
	0xc7, 0x9c, 0x6c, 0x27, 0x79, 0x13, 0x96, 0x39, 0x1e, 0xd7, 0x1b, 0x7d, 0x6d, 0x6f, 0xad, 0x7a,
	0xa6, 0x70, 0xbf, 0xa3, 0x36, 0x92, 0x77, 0xa1, 0xe3, 0xc6, 0x8c, 0x0a, 0xe6, 0x0d, 0x53, 0x32,
	0xbd, 0x89, 0xc1, 0xba, 0xa6, 0xc4, 0x36, 0x33, 0x6c, 0xf3, 0xf3, 0x0c, 0xdb, 0x69, 0xab, 0xfd,
	0xa9, 0x85, 0x6c, 0x40, 0xcb, 0x4d, 0x6f, 0x1d, 0x26, 0xbe, 0xa7, 0x3f, 0xdf, 0xd7, 0xf6, 0x5a,
	0xce, 0x2a, 0x1a, 0xee, 0xf9, 0x1e, 0x79, 0x1f, 0xd6, 0x02, 0xca, 0xc5, 0x90, 0xbb, 0x34, 0x94,
	0xb7, 0x2f, 0x2d, 0xbc, 0xbd, 0x93, 0x9e, 0x48, 0x93, 0x4b, 0x4d, 0xc6, 0x0f, 0x4d, 0x78, 0xa9,
	0xc2, 0xef, 0xe0, 0xc3, 0x92, 0x75, 0x90, 0x71, 0x86, 0xbe, 0x87, 0x05, 0x6a, 0x39, 0x2b, 0xb8,
	0x1e, 0x78, 0x64, 0x0b, 0x40, 0xba, 0x42, 0x7a, 0xc2, 0xb0, 0x12, 0x2d, 0x47, 0x52, 0x7e, 0x42,
	0xab, 0xc8, 0xcd, 0x0a, 0x72, 0x1f, 0xda, 0x1e, 0xe3, 0x6e, 0xec, 0x8f, 0xd2, 0x47, 0x54, 0x19,
	0x15, 0x4d, 0xc4, 0x80, 0x8e, 0x1f, 0x72, 0x11, 0x27, 0x2e, 0x3e, 0x33, 0xa6, 0xd4, 0x72, 0x4a,
	0x36, 0xd2, 0x85, 0x55, 0x2e, 0x68, 0xe8, 0xd1, 0xd8, 0xd3, 0x97, 0x65, 0x84, 0x6c, 0x4d, 0x74,
	0x58, 0x71, 0xa3, 0x50, 0xc4, 0x51, 0xa0, 0xaf, 0xf4, 0x9b, 0xc8, 0x2d, 0x97, 0x64, 0x13, 0x5a,
	0x31, 0x6a, 0x87, 0x06, 0x4c, 0x5f, 0x95, 0xd8, 0xb9, 0x81, 0xf4, 0x00, 0xc6, 0x34, 0x48, 0x18,
	0xbf, 0xc7, 0x99, 0xa7, 0xb7, 0xf0, 0x68, 0xc1, 0x92, 0xc6, 0x7c, 0x4c, 0xe3, 0xd0, 0x0f, 0x8f,
	0xb9, 0x0e, 0xe8, 0xcd, 0xd7, 0x05, 0x5d, 0xb4, 0x2f, 0xaa, 0x8b, 0x0d, 0x68, 0xc5, 0x49, 0xc0,
	0x64, 0x0d, 0x3b, 0x32, 0x87, 0xd4, 0x90, 0x96, 0xd0, 0x38, 0x6b, 0xc0, 0x66, 0xe1, 0xf8, 0xac,
	0x7a, 0x2f, 0xff, 0x3a, 0x36, 0xac, 0x2a, 0x35, 0x73, 0xbd, 0xd9, 0x6f, 0xee, 0xb5, 0xed, 0x97,
	0x11, 0x76, 0x26, 0x86, 0x93, 0xef, 0xfb, 0x7f, 0x3e, 0x9a, 0xf1, 0x4c, 0x83, 0xab, 0xe5, 0x7e,
	0x57, 0xd2, 0xdf, 0x80, 0x16, 0x76, 0x14, 0x16, 0x50, 0x53, 0xa4, 0x2e, 0x0d, 0xb1, 0x7e, 0x3b,
	0xd0, 0x19, 0xc5, 0xd1, 0x91, 0x9f, 0x3d, 0x9d, 0x2c, 0x70, 0x5b, 0xd9, 0x70, 0xcb, 0x87, 0xf0,
	0x82, 0x7c, 0x01, 0x35, 0x23, 0x55, 0x9d, 0xfb, 0x15, 0x51, 0xcc, 0x56, 0xbc, 0xe3, 0x4e, 0x1b,
	0x90, 0x93, 0x57, 0x60, 0x0d, 0x31, 0xdc, 0x28, 0x3c, 0xf2, 0x8f, 0x87, 0x79, 0xff, 0x77, 0x52,
	0xeb, 0x01, 0x1a, 0x07, 0x9e, 0xf1, 0x15, 0xec, 0x7c, 0xec, 0x73, 0x51, 0x97, 0x08, 0x77, 0x18,
	0x1f, 0x45, 0x21, 0x67, 0xe4, 0x16, 0xe0, 0xa1, 0x1c, 0x48, 0x43, 0x20, 0x7d, 0x76, 0xe2, 0xc9,
	0x83, 0x4e, 0x9b, 0x4f, 0x2f, 0x31, 0x7e, 0xd3, 0xc0, 0x28, 0x87, 0x40, 0xe6, 0x6c, 0x38, 0x4e,
	0x63, 0x54, 0xb2, 0xd6, 0xce, 0x55, 0x57, 0x39, 0xd7, 0x0b, 0x54, 0xb5, 0xac, 0xeb, 0x66, 0x55,
	0xd7, 0xdb, 0xd0, 0x16, 0x91, 0xa0, 0xc1, 0xd0, 0x8d, 0x92, 0x50, 0x60, 0xa9, 0x96, 0x1c, 0x40,
	0xd3, 0x41, 0x6a, 0x31, 0xbe, 0x6d, 0x54, 0x2b, 0x55, 0x18, 0x77, 0x79, 0x16, 0xef, 0xd5, 0x67,
	0x51, 0xd7, 0xd0, 0xea, 0xe4, 0xa5, 0x12, 0x91, 0xf5, 0x18, 0xe6, 0x03, 0xb2, 0xa5, 0x2c, 0x03,
	0x6f, 0x61, 0x22, 0xff, 0xc1, 0xd4, 0xb7, 0xa1, 0x8b, 0x57, 0xd5, 0x8a, 0x86, 0x5c, 0x85, 0x25,
	0x19, 0x5a, 0xc3, 0xd0, 0x72, 0x61, 0x04, 0xc5, 0x89, 0x54, 0xd2, 0xd8, 0xa3, 0x84, 0x71, 0x41,
	0xf6, 0xe0, 0x4a, 0x51, 0xad, 0x85, 0xde, 0x59, 0x9b, 0xea, 0x15, 0xf3, 0x37, 0x60, 0x09, 0x7f,
	0xde, 0xb1, 0x36, 0x6d, 0xbb, 0x93, 0x96, 0xd6, 0xa1, 0x8f, 0xef, 0xa6, 0x36, 0x47, 0xba, 0x8c,
	0x6f, 0x34, 0xd8, 0x9e, 0x86, 0xfb, 0x4c, 0x56, 0x2f, 0x57, 0x9c, 0x8c, 0x58, 0x2d, 0xb5, 0xb6,
	0xa8, 0xd4, 0x8d, 0x6a, 0xa9, 0x73, 0x92, 0xe6, 0x5c, 0x12, 0xfb, 0x3b, 0x00, 0x7d, 0x4a, 0xa2,
	0x92, 0x3e, 0x94, 0x1f, 0x3d, 0x64, 0x02, 0x9b, 0x77, 0x58, 0xa5, 0x8c, 0xc5, 0x1f, 0xd1, 0x2b,
	0x78, 0x23, 0xe3, 0x51, 0x12, 0xbb, 0x6c, 0xff, 0xe9, 0xe0, 0x83, 0xee, 0xc2, 0x21, 0x60, 0x5c,
	0xff, 0xfa, 0xcf, 0x7f, 0xbe, 0x6f, 0xec, 0x90, 0xed, 0xf2, 0xe7, 0x92, 0x95, 0x56, 0xd1, 0x92,
	0xaa, 0xb4, 0x26, 0xbe, 0x77, 0x4a, 0x04, 0xe8, 0x33, 0xc1, 0xb3, 0x37, 0x2c, 0xa5, 0xd2, 0xbd,
	0x96, 0xae, 0x16, 0x4e, 0x09, 0x63, 0x17, 0x23, 0x6f, 0x91, 0x8d, 0xf9, 0x91, 0x39, 0xf9, 0x59,
	0x83, 0x6b, 0xb3, 0x39, 0xe3, 0xeb, 0x26, 0x72, 0x2e, 0x67, 0x0c, 0xfd, 0x79, 0xe3, 0x25, 0xd3,
	0xcc, 0x45, 0xb9, 0x6e, 0x22, 0xd7, 0x1b, 0xc4, 0x3c, 0x87, 0xcb, 0x9a, 0x54, 0xd5, 0x77, 0x9a,
	0xa2, 0x6e, 0x94, 0x50, 0x95, 0x8e, 0x32, 0xc0, 0xdd, 0x32, 0x60, 0xd9, 0x9b, 0x31, 0xf6, 0x67,
	0x19, 0xcb, 0x1b, 0x8d, 0x7d, 0xc4, 0xbb, 0x4d, 0xde, 0x39, 0x0f, 0x4f, 0xa9, 0x92, 0x5b, 0x93,
	0xa2, 0x66, 0x4f, 0x2d, 0x1c, 0x1e, 0x9c, 0xfc, 0xaa, 0xc1, 0x76, 0x1d, 0x6a, 0x51, 0x4c, 0x3b,
	0xb5, 0xb8, 0x6a, 0x87, 0x84, 0x7d, 0x75, 0x16, 0xb6, 0x6e, 0x56, 0x1b, 0x9f, 0x22, 0xf2, 0x80,
	0xdc, 0xb9, 0x3c, 0xb2, 0x35, 0x99, 0x4e, 0xe3, 0x53, 0xf2, 0x4c, 0x03, 0xa3, 0x96, 0x3f, 0x0f,
	0x7c, 0x4e, 0xc5, 0xcb, 0x7d, 0x5d, 0xa7, 0x8a, 0x9a, 0x49, 0x6d, 0xdc, 0xc5, 0x1c, 0x3e, 0x22,
	0x83, 0x4b, 0xe5, 0xa0, 0x3e, 0x6d, 0xac, 0xc9, 0x74, 0x3e, 0x9c, 0x92, 0x27, 0xb0, 0x35, 0xaf,
	0xa3, 0xe4, 0xe8, 0x2d, 0xb7, 0x55, 0x4f, 0x66, 0x33, 0x6f, 0x90, 0x1a, 0xaf, 0x21, 0xe1, 0x2e,
	0xd9, 0xa9, 0x23, 0xc4, 0xa9, 0x9a, 0x77, 0xd5, 0x2f, 0x1a, 0xbc, 0x7e, 0xa1, 0xae, 0x92, 0x1c,
	0x8b, 0x5b, 0x6b, 0x11, 0xdb, 0x6d, 0x64, 0xbb, 0x49, 0xde, 0x5a, 0xc8, 0x56, 0xd3, 0x59, 0xfb,
	0x6f, 0xff, 0x7e, 0xd6, 0xd3, 0xfe, 0x38, 0xeb, 0x69, 0x7f, 0x9d, 0xf5, 0xb4, 0x1f, 0xff, 0xee,
	0x3d, 0x07, 0xba, 0x1f, 0x99, 0x5c, 0x50, 0xf7, 0x61, 0x1c, 0x3d, 0x91, 0x3f, 0x40, 0x26, 0x1d,
	0xf9, 0xe6, 0xd8, 0xfe, 0xb2, 0x6d, 0x5a, 0xf2, 0xbf, 0xdd, 0xad, 0xb1, 0xfd, 0x45, 0xf3, 0xfe,
	0x32, 0x3a, 0x6f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x23, 0xc5, 0x5f, 0x6a, 0x53, 0x0e, 0x00,
	0x00,
}

func (m *ClusterCheckStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCheckStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterCheckStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastScanTime != nil {
		{
			size, err := m.LastScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CheckUid) > 0 {
		i -= len(m.CheckUid)
		copy(dAtA[i:], m.CheckUid)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckUid)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceCheckResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceCheckResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceCheckResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x62
	}
	if m.Status != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warnings[iNdEx])
			copy(dAtA[i:], m.Warnings[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Warnings[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ValuesUsed) > 0 {
		for iNdEx := len(m.ValuesUsed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValuesUsed[iNdEx])
			copy(dAtA[i:], m.ValuesUsed[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ValuesUsed[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Control) > 0 {
		for iNdEx := len(m.Control) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Control[iNdEx])
			copy(dAtA[i:], m.Control[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Control[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CheckUid) > 0 {
		i -= len(m.CheckUid)
		copy(dAtA[i:], m.CheckUid)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckUid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckId) > 0 {
		i -= len(m.CheckId)
		copy(dAtA[i:], m.CheckId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceClusterCheckStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceClusterCheckStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceClusterCheckStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warnings[iNdEx])
			copy(dAtA[i:], m.Warnings[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Warnings[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ValuesUsed) > 0 {
		for iNdEx := len(m.ValuesUsed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValuesUsed[iNdEx])
			copy(dAtA[i:], m.ValuesUsed[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ValuesUsed[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Control) > 0 {
		for iNdEx := len(m.Control) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Control[iNdEx])
			copy(dAtA[i:], m.Control[iNdEx])
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Control[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckId) > 0 {
		i -= len(m.CheckId)
		copy(dAtA[i:], m.CheckId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanConfigId) > 0 {
		i -= len(m.ScanConfigId)
		copy(dAtA[i:], m.ScanConfigId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanConfigId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CheckResults) > 0 {
		for iNdEx := len(m.CheckResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanResults) > 0 {
		for iNdEx := len(m.ScanResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceCheckClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceCheckClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceCheckClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckResults) > 0 {
		for iNdEx := len(m.CheckResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceCheckResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceCheckResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceCheckResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastScanTime != nil {
		{
			size, err := m.LastScanTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckResults) > 0 {
		for iNdEx := len(m.CheckResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountComplianceScanResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountComplianceScanResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountComplianceScanResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanConfigName) > 0 {
		i -= len(m.ScanConfigName)
		copy(dAtA[i:], m.ScanConfigName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfileClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfileClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfileClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceResultsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceResultsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterCheckStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.Status))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckUid)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.LastScanTime != nil {
		l = m.LastScanTime.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceCheckResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckUid)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.Control) > 0 {
		for _, s := range m.Control {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.ValuesUsed) > 0 {
		for _, s := range m.ValuesUsed {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.Status))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceClusterCheckStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.Control) > 0 {
		for _, s := range m.Control {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.ValuesUsed) > 0 {
		for _, s := range m.ValuesUsed {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.CheckResults) > 0 {
		for _, e := range m.CheckResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.ScanConfigId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanResults) > 0 {
		for _, e := range m.ScanResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceCheckClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckResults) > 0 {
		for _, e := range m.CheckResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceCheckResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckResults) > 0 {
		for _, e := range m.CheckResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.TotalCount))
	}
	if m.LastScanTime != nil {
		l = m.LastScanTime.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountComplianceScanResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanConfigName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfileClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceResultsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceResultsService(x uint64) (n int) {
	return sovComplianceResultsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterCheckStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCheckStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCheckStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &ComplianceScanCluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceCheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScanTime == nil {
				m.LastScanTime = &types.Timestamp{}
			}
			if err := m.LastScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceCheckResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceCheckResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceCheckResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesUsed = append(m.ValuesUsed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceCheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceClusterCheckStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceClusterCheckStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceClusterCheckStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterCheckStatus{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesUsed = append(m.ValuesUsed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckResults = append(m.CheckResults, &ComplianceClusterCheckStatus{})
			if err := m.CheckResults[len(m.CheckResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanResults = append(m.ScanResults, &ComplianceScanResult{})
			if err := m.ScanResults[len(m.ScanResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceCheckClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceCheckClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceCheckClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckResults = append(m.CheckResults, &ClusterCheckStatus{})
			if err := m.CheckResults[len(m.CheckResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceCheckResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceCheckResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceCheckResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckResults = append(m.CheckResults, &ComplianceCheckResult{})
			if err := m.CheckResults[len(m.CheckResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScanTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScanTime == nil {
				m.LastScanTime = &types.Timestamp{}
			}
			if err := m.LastScanTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountComplianceScanResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountComplianceScanResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountComplianceScanResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfileClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfileClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfileClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceResultsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceResultsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceResultsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceResultsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceResultsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceResultsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceResultsService = fmt.Errorf("proto: unexpected end of group")
)
