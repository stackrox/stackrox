// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_profile_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 11
type ComplianceRule struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RuleVersion          string   `protobuf:"bytes,2,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	RuleType             string   `protobuf:"bytes,3,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	Severity             string   `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
	Standard             string   `protobuf:"bytes,5,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string   `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	Title                string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Rationale            string   `protobuf:"bytes,9,opt,name=rationale,proto3" json:"rationale,omitempty"`
	Fixes                string   `protobuf:"bytes,10,opt,name=fixes,proto3" json:"fixes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceRule) Reset()         { *m = ComplianceRule{} }
func (m *ComplianceRule) String() string { return proto.CompactTextString(m) }
func (*ComplianceRule) ProtoMessage()    {}
func (*ComplianceRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a6d608d8e632533, []int{0}
}
func (m *ComplianceRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceRule.Merge(m, src)
}
func (m *ComplianceRule) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceRule.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceRule proto.InternalMessageInfo

func (m *ComplianceRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ComplianceRule) GetRuleVersion() string {
	if m != nil {
		return m.RuleVersion
	}
	return ""
}

func (m *ComplianceRule) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *ComplianceRule) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *ComplianceRule) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceRule) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceRule) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ComplianceRule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceRule) GetRationale() string {
	if m != nil {
		return m.Rationale
	}
	return ""
}

func (m *ComplianceRule) GetFixes() string {
	if m != nil {
		return m.Fixes
	}
	return ""
}

func (m *ComplianceRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceRule) Clone() *ComplianceRule {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceRule)
	*cloned = *m

	return cloned
}

// Next Tag: 11
type ComplianceProfile struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileVersion       string            `protobuf:"bytes,3,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"`
	ProductType          string            `protobuf:"bytes,4,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	Standard             string            `protobuf:"bytes,5,opt,name=standard,proto3" json:"standard,omitempty"`
	Description          string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Rules                []*ComplianceRule `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
	Product              string            `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`
	Title                string            `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Values               []string          `protobuf:"bytes,10,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ComplianceProfile) Reset()         { *m = ComplianceProfile{} }
func (m *ComplianceProfile) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfile) ProtoMessage()    {}
func (*ComplianceProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a6d608d8e632533, []int{1}
}
func (m *ComplianceProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfile.Merge(m, src)
}
func (m *ComplianceProfile) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfile proto.InternalMessageInfo

func (m *ComplianceProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ComplianceProfile) GetProfileVersion() string {
	if m != nil {
		return m.ProfileVersion
	}
	return ""
}

func (m *ComplianceProfile) GetProductType() string {
	if m != nil {
		return m.ProductType
	}
	return ""
}

func (m *ComplianceProfile) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceProfile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceProfile) GetRules() []*ComplianceRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ComplianceProfile) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *ComplianceProfile) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ComplianceProfile) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ComplianceProfile) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfile) Clone() *ComplianceProfile {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfile)
	*cloned = *m

	if m.Rules != nil {
		cloned.Rules = make([]*ComplianceRule, len(m.Rules))
		for idx, v := range m.Rules {
			cloned.Rules[idx] = v.Clone()
		}
	}
	if m.Values != nil {
		cloned.Values = make([]string, len(m.Values))
		copy(cloned.Values, m.Values)
	}
	return cloned
}

type ListComplianceProfilesResponse struct {
	Profiles             []*ComplianceProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListComplianceProfilesResponse) Reset()         { *m = ListComplianceProfilesResponse{} }
func (m *ListComplianceProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceProfilesResponse) ProtoMessage()    {}
func (*ListComplianceProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a6d608d8e632533, []int{2}
}
func (m *ListComplianceProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceProfilesResponse.Merge(m, src)
}
func (m *ListComplianceProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceProfilesResponse proto.InternalMessageInfo

func (m *ListComplianceProfilesResponse) GetProfiles() []*ComplianceProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *ListComplianceProfilesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceProfilesResponse) Clone() *ListComplianceProfilesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceProfilesResponse)
	*cloned = *m

	if m.Profiles != nil {
		cloned.Profiles = make([]*ComplianceProfile, len(m.Profiles))
		for idx, v := range m.Profiles {
			cloned.Profiles[idx] = v.Clone()
		}
	}
	return cloned
}

// CountComplianceProfilesResponse gives count of compliance profiles
type CountComplianceProfilesResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountComplianceProfilesResponse) Reset()         { *m = CountComplianceProfilesResponse{} }
func (m *CountComplianceProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*CountComplianceProfilesResponse) ProtoMessage()    {}
func (*CountComplianceProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a6d608d8e632533, []int{3}
}
func (m *CountComplianceProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountComplianceProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountComplianceProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountComplianceProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountComplianceProfilesResponse.Merge(m, src)
}
func (m *CountComplianceProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountComplianceProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountComplianceProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountComplianceProfilesResponse proto.InternalMessageInfo

func (m *CountComplianceProfilesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountComplianceProfilesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountComplianceProfilesResponse) Clone() *CountComplianceProfilesResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountComplianceProfilesResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*ComplianceRule)(nil), "v2.ComplianceRule")
	proto.RegisterType((*ComplianceProfile)(nil), "v2.ComplianceProfile")
	proto.RegisterType((*ListComplianceProfilesResponse)(nil), "v2.ListComplianceProfilesResponse")
	proto.RegisterType((*CountComplianceProfilesResponse)(nil), "v2.CountComplianceProfilesResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_profile_service.proto", fileDescriptor_1a6d608d8e632533)
}

var fileDescriptor_1a6d608d8e632533 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x1b, 0xb7, 0x49, 0x93, 0x49, 0xd5, 0xef, 0x63, 0x29, 0x65, 0x1b, 0x4a, 0xda, 0x1a,
	0x50, 0x73, 0x72, 0x84, 0x39, 0x70, 0x6f, 0x91, 0x10, 0x12, 0x07, 0x70, 0x11, 0x42, 0x5c, 0xa2,
	0xc5, 0x9e, 0x96, 0x55, 0x5d, 0xaf, 0xd9, 0x5d, 0x9b, 0x46, 0x88, 0x0b, 0xaf, 0xc0, 0x85, 0x33,
	0xaf, 0xc0, 0x4b, 0x70, 0x44, 0xe2, 0x05, 0x50, 0x81, 0xf7, 0x40, 0xde, 0x5d, 0x27, 0x6d, 0xd3,
	0xf6, 0xe6, 0xf9, 0xcf, 0xec, 0xfc, 0x67, 0x7f, 0xa3, 0x35, 0x6c, 0xb3, 0x9c, 0x0f, 0xcb, 0x70,
	0x18, 0x8b, 0xa3, 0x3c, 0xe5, 0x2c, 0x8b, 0x71, 0x94, 0x4b, 0xb1, 0xcf, 0x53, 0x1c, 0x29, 0x94,
	0x25, 0x8f, 0x31, 0xc8, 0xa5, 0xd0, 0x82, 0x78, 0x65, 0xd8, 0x5b, 0x3f, 0x10, 0xe2, 0x20, 0xc5,
	0x61, 0x75, 0x86, 0x65, 0x99, 0xd0, 0x4c, 0x73, 0x91, 0x29, 0x5b, 0xd1, 0xbb, 0x3e, 0x6d, 0x75,
	0x24, 0x32, 0x27, 0xae, 0x39, 0x51, 0x21, 0x93, 0xf1, 0xdb, 0xd1, 0xbb, 0x02, 0xe5, 0xd8, 0xa6,
	0xfc, 0xaf, 0x1e, 0x2c, 0xef, 0x4e, 0x6c, 0xa3, 0x22, 0x45, 0x42, 0x60, 0x21, 0x63, 0x47, 0x48,
	0x1b, 0x9b, 0x8d, 0x41, 0x27, 0x32, 0xdf, 0x64, 0x0b, 0x96, 0x64, 0x91, 0xe2, 0xa8, 0x44, 0xa9,
	0xb8, 0xc8, 0xa8, 0x67, 0x72, 0xdd, 0x4a, 0x7b, 0x69, 0x25, 0x72, 0x0b, 0x3a, 0xa6, 0x44, 0x8f,
	0x73, 0xa4, 0xf3, 0x26, 0xdf, 0xae, 0x84, 0x17, 0xe3, 0x1c, 0x49, 0x0f, 0xda, 0x0a, 0x4b, 0x94,
	0x5c, 0x8f, 0xe9, 0x82, 0xcd, 0xd5, 0xb1, 0xc9, 0x69, 0x96, 0x25, 0x4c, 0x26, 0xb4, 0xe9, 0x72,
	0x2e, 0x26, 0x14, 0x16, 0x63, 0x91, 0x69, 0x29, 0x52, 0xda, 0x32, 0xa9, 0x3a, 0x24, 0x2b, 0xd0,
	0xd4, 0x5c, 0xa7, 0x48, 0x17, 0x8d, 0x6e, 0x03, 0xb2, 0x09, 0xdd, 0x04, 0x55, 0x2c, 0x79, 0x5e,
	0x41, 0xa1, 0x6d, 0x3b, 0xe6, 0x29, 0x89, 0xac, 0x43, 0x47, 0x1a, 0x62, 0x2c, 0x45, 0xda, 0x31,
	0xf9, 0xa9, 0x50, 0x75, 0xdd, 0xe7, 0xc7, 0xa8, 0x28, 0xd8, 0xae, 0x26, 0xf0, 0xbf, 0x79, 0x70,
	0x6d, 0x0a, 0xe9, 0x99, 0x5d, 0x0d, 0x59, 0x06, 0x8f, 0x27, 0x8e, 0x92, 0xc7, 0x93, 0x09, 0x37,
	0xef, 0x14, 0xb7, 0x6d, 0xf8, 0xaf, 0xde, 0x64, 0x8d, 0xce, 0xa2, 0x59, 0x76, 0x72, 0x4d, 0x6f,
	0x0b, 0x96, 0x72, 0x29, 0x92, 0x22, 0xd6, 0x16, 0xa0, 0x85, 0xd4, 0x75, 0xda, 0x84, 0xe1, 0x65,
	0x9c, 0xce, 0xdd, 0xbb, 0x35, 0x7b, 0xef, 0x01, 0x34, 0xab, 0x6d, 0x28, 0xba, 0xb8, 0x39, 0x3f,
	0xe8, 0x86, 0x24, 0x28, 0xc3, 0xe0, 0xec, 0xe2, 0x23, 0x5b, 0x50, 0x31, 0x77, 0xb6, 0x8e, 0x5f,
	0x1d, 0x4e, 0x99, 0x77, 0x4e, 0x33, 0x5f, 0x85, 0x56, 0xc9, 0xd2, 0xc2, 0x40, 0x9b, 0x1f, 0x74,
	0x22, 0x17, 0xf9, 0x7b, 0xd0, 0x7f, 0xca, 0x95, 0x9e, 0x01, 0xa7, 0x22, 0x54, 0xb9, 0xc8, 0x14,
	0x92, 0xfb, 0xd0, 0x76, 0x18, 0x14, 0x6d, 0x98, 0xb1, 0x6e, 0x9c, 0x1d, 0xcb, 0x9d, 0x88, 0x26,
	0x65, 0xfe, 0x43, 0xd8, 0xd8, 0x15, 0x45, 0x76, 0x55, 0xd7, 0x15, 0x68, 0xc6, 0x55, 0x89, 0x59,
	0x4d, 0x33, 0xb2, 0x41, 0xf8, 0xd7, 0x03, 0x3a, 0x73, 0x68, 0xcf, 0xbe, 0x2e, 0x82, 0xb0, 0xf2,
	0x18, 0x67, 0x7b, 0x92, 0xff, 0xab, 0x71, 0x22, 0x54, 0xa2, 0x90, 0x31, 0xee, 0x8c, 0x9f, 0x3c,
	0xea, 0x5d, 0x3c, 0xa0, 0x7f, 0xf7, 0xd3, 0xcf, 0x3f, 0x9f, 0xbd, 0x3e, 0x59, 0x3f, 0xfb, 0x8c,
	0x87, 0xf5, 0xdc, 0xc3, 0x0f, 0x3c, 0xf9, 0x48, 0x0e, 0x61, 0xf5, 0x62, 0x22, 0x64, 0xc9, 0x18,
	0xb1, 0xf7, 0xcf, 0xab, 0xa7, 0xd9, 0xf3, 0xab, 0xe8, 0x6a, 0x76, 0xfe, 0x86, 0x71, 0x5c, 0x23,
	0x37, 0x2f, 0x71, 0x24, 0x05, 0xac, 0x5d, 0x74, 0x27, 0x43, 0xef, 0x9c, 0xdf, 0x1d, 0x7b, 0xa9,
	0x2b, 0xb1, 0xfa, 0xf7, 0x8c, 0xe1, 0x06, 0xb9, 0x7d, 0xce, 0xd0, 0xe0, 0x9d, 0xd8, 0xee, 0x04,
	0xdf, 0x4f, 0xfa, 0x8d, 0x1f, 0x27, 0xfd, 0xc6, 0xaf, 0x93, 0x7e, 0xe3, 0xcb, 0xef, 0xfe, 0x1c,
	0x50, 0x2e, 0x02, 0xa5, 0x59, 0x7c, 0x28, 0xc5, 0xb1, 0xfd, 0xeb, 0x04, 0x2c, 0xe7, 0x41, 0x19,
	0xbe, 0xf6, 0xca, 0xf0, 0xd5, 0xdc, 0x9b, 0x96, 0xd1, 0x1e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x67, 0x4a, 0x4f, 0x06, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceProfileServiceClient is the client API for ComplianceProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ComplianceProfileServiceClient interface {
	// GetComplianceProfile retrieves the specified compliance profile
	GetComplianceProfile(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceProfile, error)
	// ListComplianceProfiles returns profiles matching given query
	ListComplianceProfiles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfilesResponse, error)
	// GetComplianceProfileCount returns the number of profiles matching the given query
	GetComplianceProfileCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceProfilesResponse, error)
}

type complianceProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceProfileServiceClient(cc grpc.ClientConnInterface) ComplianceProfileServiceClient {
	return &complianceProfileServiceClient{cc}
}

func (c *complianceProfileServiceClient) GetComplianceProfile(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceProfile, error) {
	out := new(ComplianceProfile)
	err := c.cc.Invoke(ctx, "/v2.ComplianceProfileService/GetComplianceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceProfileServiceClient) ListComplianceProfiles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfilesResponse, error) {
	out := new(ListComplianceProfilesResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceProfileService/ListComplianceProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceProfileServiceClient) GetComplianceProfileCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceProfilesResponse, error) {
	out := new(CountComplianceProfilesResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceProfileService/GetComplianceProfileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceProfileServiceServer is the server API for ComplianceProfileService service.
type ComplianceProfileServiceServer interface {
	// GetComplianceProfile retrieves the specified compliance profile
	GetComplianceProfile(context.Context, *ResourceByID) (*ComplianceProfile, error)
	// ListComplianceProfiles returns profiles matching given query
	ListComplianceProfiles(context.Context, *RawQuery) (*ListComplianceProfilesResponse, error)
	// GetComplianceProfileCount returns the number of profiles matching the given query
	GetComplianceProfileCount(context.Context, *RawQuery) (*CountComplianceProfilesResponse, error)
}

// UnimplementedComplianceProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceProfileServiceServer struct {
}

func (*UnimplementedComplianceProfileServiceServer) GetComplianceProfile(ctx context.Context, req *ResourceByID) (*ComplianceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfile not implemented")
}
func (*UnimplementedComplianceProfileServiceServer) ListComplianceProfiles(ctx context.Context, req *RawQuery) (*ListComplianceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceProfiles not implemented")
}
func (*UnimplementedComplianceProfileServiceServer) GetComplianceProfileCount(ctx context.Context, req *RawQuery) (*CountComplianceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfileCount not implemented")
}

func RegisterComplianceProfileServiceServer(s *grpc.Server, srv ComplianceProfileServiceServer) {
	s.RegisterService(&_ComplianceProfileService_serviceDesc, srv)
}

func _ComplianceProfileService_GetComplianceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceProfileService/GetComplianceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfile(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceProfileService_ListComplianceProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).ListComplianceProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceProfileService/ListComplianceProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).ListComplianceProfiles(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceProfileService_GetComplianceProfileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceProfileService/GetComplianceProfileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfileCount(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceProfileService",
	HandlerType: (*ComplianceProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComplianceProfile",
			Handler:    _ComplianceProfileService_GetComplianceProfile_Handler,
		},
		{
			MethodName: "ListComplianceProfiles",
			Handler:    _ComplianceProfileService_ListComplianceProfiles_Handler,
		},
		{
			MethodName: "GetComplianceProfileCount",
			Handler:    _ComplianceProfileService_GetComplianceProfileCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_profile_service.proto",
}

func (m *ComplianceRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fixes) > 0 {
		i -= len(m.Fixes)
		copy(dAtA[i:], m.Fixes)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Fixes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Rationale) > 0 {
		i -= len(m.Rationale)
		copy(dAtA[i:], m.Rationale)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Rationale)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuleType) > 0 {
		i -= len(m.RuleType)
		copy(dAtA[i:], m.RuleType)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.RuleType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RuleVersion) > 0 {
		i -= len(m.RuleVersion)
		copy(dAtA[i:], m.RuleVersion)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.RuleVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Product) > 0 {
		i -= len(m.Product)
		copy(dAtA[i:], m.Product)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Product)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceProfileService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProductType) > 0 {
		i -= len(m.ProductType)
		copy(dAtA[i:], m.ProductType)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.ProductType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProfileVersion) > 0 {
		i -= len(m.ProfileVersion)
		copy(dAtA[i:], m.ProfileVersion)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.ProfileVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceProfileService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountComplianceProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountComplianceProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountComplianceProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintComplianceProfileService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceProfileService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceProfileService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.RuleVersion)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.RuleType)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Rationale)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Fixes)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.ProfileVersion)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.ProductType)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovComplianceProfileService(uint64(l))
		}
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovComplianceProfileService(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovComplianceProfileService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovComplianceProfileService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountComplianceProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovComplianceProfileService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceProfileService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceProfileService(x uint64) (n int) {
	return sovComplianceProfileService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceProfileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rationale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rationale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceProfileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceProfileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ComplianceRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceProfileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceProfileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &ComplianceProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceProfileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountComplianceProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceProfileService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountComplianceProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountComplianceProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceProfileService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceProfileService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceProfileService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceProfileService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceProfileService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceProfileService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceProfileService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceProfileService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceProfileService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceProfileService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceProfileService = fmt.Errorf("proto: unexpected end of group")
)
