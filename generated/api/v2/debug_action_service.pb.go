// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.3
// source: api/v2/debug_action_service.proto

package v2

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SleepAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// seconds to sleep upon encountering this action identifier
	Seconds       int32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepAction) Reset() {
	*x = SleepAction{}
	mi := &file_api_v2_debug_action_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepAction) ProtoMessage() {}

func (x *SleepAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_debug_action_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepAction.ProtoReflect.Descriptor instead.
func (*SleepAction) Descriptor() ([]byte, []int) {
	return file_api_v2_debug_action_service_proto_rawDescGZIP(), []int{0}
}

func (x *SleepAction) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type WaitAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitAction) Reset() {
	*x = WaitAction{}
	mi := &file_api_v2_debug_action_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitAction) ProtoMessage() {}

func (x *WaitAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_debug_action_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitAction.ProtoReflect.Descriptor instead.
func (*WaitAction) Descriptor() ([]byte, []int) {
	return file_api_v2_debug_action_service_proto_rawDescGZIP(), []int{1}
}

type DebugAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action identifier must declared in the code using <func name here>. The action registered in this request is executed
	// when any routine encounters this identifier during its execution.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// num_times > 0: Wait (until proceed signal is received) for first num_times this action identifier is encountered.
	// Default 0: Always wait (until proceed signal is received) upon encountering this action identifier
	NumTimes int32 `protobuf:"varint,2,opt,name=num_times,json=numTimes,proto3" json:"num_times,omitempty"`
	// Types that are valid to be assigned to Action:
	//
	//	*DebugAction_SleepAction
	//	*DebugAction_WaitAction
	Action        isDebugAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugAction) Reset() {
	*x = DebugAction{}
	mi := &file_api_v2_debug_action_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAction) ProtoMessage() {}

func (x *DebugAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_debug_action_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAction.ProtoReflect.Descriptor instead.
func (*DebugAction) Descriptor() ([]byte, []int) {
	return file_api_v2_debug_action_service_proto_rawDescGZIP(), []int{2}
}

func (x *DebugAction) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DebugAction) GetNumTimes() int32 {
	if x != nil {
		return x.NumTimes
	}
	return 0
}

func (x *DebugAction) GetAction() isDebugAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DebugAction) GetSleepAction() *SleepAction {
	if x != nil {
		if x, ok := x.Action.(*DebugAction_SleepAction); ok {
			return x.SleepAction
		}
	}
	return nil
}

func (x *DebugAction) GetWaitAction() *WaitAction {
	if x != nil {
		if x, ok := x.Action.(*DebugAction_WaitAction); ok {
			return x.WaitAction
		}
	}
	return nil
}

type isDebugAction_Action interface {
	isDebugAction_Action()
}

type DebugAction_SleepAction struct {
	SleepAction *SleepAction `protobuf:"bytes,3,opt,name=sleep_action,json=sleepAction,proto3,oneof"`
}

type DebugAction_WaitAction struct {
	WaitAction *WaitAction `protobuf:"bytes,4,opt,name=wait_action,json=waitAction,proto3,oneof"`
}

func (*DebugAction_SleepAction) isDebugAction_Action() {}

func (*DebugAction_WaitAction) isDebugAction_Action() {}

type ActionStatus struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Action *DebugAction           `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// number of times the action identifier was encountered
	TimesEncountered int32 `protobuf:"varint,2,opt,name=times_encountered,json=timesEncountered,proto3" json:"times_encountered,omitempty"`
	// number of times the action was executed
	TimesExecuted int32 `protobuf:"varint,3,opt,name=times_executed,json=timesExecuted,proto3" json:"times_executed,omitempty"`
	// number of times the action was given proceed signal. This is only relevant when action is of WaitAction type
	TimesSignaled int32 `protobuf:"varint,4,opt,name=times_signaled,json=timesSignaled,proto3" json:"times_signaled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionStatus) Reset() {
	*x = ActionStatus{}
	mi := &file_api_v2_debug_action_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStatus) ProtoMessage() {}

func (x *ActionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_debug_action_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStatus.ProtoReflect.Descriptor instead.
func (*ActionStatus) Descriptor() ([]byte, []int) {
	return file_api_v2_debug_action_service_proto_rawDescGZIP(), []int{3}
}

func (x *ActionStatus) GetAction() *DebugAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionStatus) GetTimesEncountered() int32 {
	if x != nil {
		return x.TimesEncountered
	}
	return 0
}

func (x *ActionStatus) GetTimesExecuted() int32 {
	if x != nil {
		return x.TimesExecuted
	}
	return 0
}

func (x *ActionStatus) GetTimesSignaled() int32 {
	if x != nil {
		return x.TimesSignaled
	}
	return 0
}

var File_api_v2_debug_action_service_proto protoreflect.FileDescriptor

var file_api_v2_debug_action_service_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x32, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x32, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x61, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x32, 0xb1, 0x03, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x10,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x54, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x1a, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x55, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x41, 0x6c,
	0x6c, 0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x1a, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65,
	0x64, 0x2f, 0x61, 0x6c, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x27, 0x0a, 0x18, 0x69, 0x6f,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x5a, 0x0b, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x3b, 0x76, 0x32, 0x58, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v2_debug_action_service_proto_rawDescOnce sync.Once
	file_api_v2_debug_action_service_proto_rawDescData []byte
)

func file_api_v2_debug_action_service_proto_rawDescGZIP() []byte {
	file_api_v2_debug_action_service_proto_rawDescOnce.Do(func() {
		file_api_v2_debug_action_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v2_debug_action_service_proto_rawDesc), len(file_api_v2_debug_action_service_proto_rawDesc)))
	})
	return file_api_v2_debug_action_service_proto_rawDescData
}

var file_api_v2_debug_action_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_v2_debug_action_service_proto_goTypes = []any{
	(*SleepAction)(nil),  // 0: v2.SleepAction
	(*WaitAction)(nil),   // 1: v2.WaitAction
	(*DebugAction)(nil),  // 2: v2.DebugAction
	(*ActionStatus)(nil), // 3: v2.ActionStatus
	(*ResourceByID)(nil), // 4: v2.ResourceByID
	(*Empty)(nil),        // 5: v2.Empty
}
var file_api_v2_debug_action_service_proto_depIdxs = []int32{
	0, // 0: v2.DebugAction.sleep_action:type_name -> v2.SleepAction
	1, // 1: v2.DebugAction.wait_action:type_name -> v2.WaitAction
	2, // 2: v2.ActionStatus.action:type_name -> v2.DebugAction
	2, // 3: v2.DebugActionService.RegisterAction:input_type -> v2.DebugAction
	4, // 4: v2.DebugActionService.GetActionStatus:input_type -> v2.ResourceByID
	4, // 5: v2.DebugActionService.DeleteAction:input_type -> v2.ResourceByID
	4, // 6: v2.DebugActionService.ProceedOldest:input_type -> v2.ResourceByID
	4, // 7: v2.DebugActionService.ProceedAll:input_type -> v2.ResourceByID
	5, // 8: v2.DebugActionService.RegisterAction:output_type -> v2.Empty
	3, // 9: v2.DebugActionService.GetActionStatus:output_type -> v2.ActionStatus
	5, // 10: v2.DebugActionService.DeleteAction:output_type -> v2.Empty
	5, // 11: v2.DebugActionService.ProceedOldest:output_type -> v2.Empty
	5, // 12: v2.DebugActionService.ProceedAll:output_type -> v2.Empty
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_api_v2_debug_action_service_proto_init() }
func file_api_v2_debug_action_service_proto_init() {
	if File_api_v2_debug_action_service_proto != nil {
		return
	}
	file_api_v2_common_proto_init()
	file_api_v2_debug_action_service_proto_msgTypes[2].OneofWrappers = []any{
		(*DebugAction_SleepAction)(nil),
		(*DebugAction_WaitAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v2_debug_action_service_proto_rawDesc), len(file_api_v2_debug_action_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v2_debug_action_service_proto_goTypes,
		DependencyIndexes: file_api_v2_debug_action_service_proto_depIdxs,
		MessageInfos:      file_api_v2_debug_action_service_proto_msgTypes,
	}.Build()
	File_api_v2_debug_action_service_proto = out.File
	file_api_v2_debug_action_service_proto_goTypes = nil
	file_api_v2_debug_action_service_proto_depIdxs = nil
}
