// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: api/v2/compliance_scan_configuration_service.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComplianceRunReportResponse_RunState int32

const (
	ComplianceRunReportResponse_SUBMITTED ComplianceRunReportResponse_RunState = 0
	ComplianceRunReportResponse_ERROR     ComplianceRunReportResponse_RunState = 1
)

// Enum value maps for ComplianceRunReportResponse_RunState.
var (
	ComplianceRunReportResponse_RunState_name = map[int32]string{
		0: "SUBMITTED",
		1: "ERROR",
	}
	ComplianceRunReportResponse_RunState_value = map[string]int32{
		"SUBMITTED": 0,
		"ERROR":     1,
	}
)

func (x ComplianceRunReportResponse_RunState) Enum() *ComplianceRunReportResponse_RunState {
	p := new(ComplianceRunReportResponse_RunState)
	*p = x
	return p
}

func (x ComplianceRunReportResponse_RunState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceRunReportResponse_RunState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_compliance_scan_configuration_service_proto_enumTypes[0].Descriptor()
}

func (ComplianceRunReportResponse_RunState) Type() protoreflect.EnumType {
	return &file_api_v2_compliance_scan_configuration_service_proto_enumTypes[0]
}

func (x ComplianceRunReportResponse_RunState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceRunReportResponse_RunState.Descriptor instead.
func (ComplianceRunReportResponse_RunState) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{7, 0}
}

// ClusterScanStatus holds status based on cluster in the event that a scan configuration
// was successfully applied to some clusters but not others.
// Next available tag: 5
type ClusterScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string                         `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Errors      []string                       `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ClusterName string                         `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	SuiteStatus *ClusterScanStatus_SuiteStatus `protobuf:"bytes,4,opt,name=suite_status,json=suiteStatus,proto3" json:"suite_status,omitempty"`
}

func (x *ClusterScanStatus) Reset() {
	*x = ClusterScanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterScanStatus) ProtoMessage() {}

func (x *ClusterScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterScanStatus.ProtoReflect.Descriptor instead.
func (*ClusterScanStatus) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterScanStatus) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterScanStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ClusterScanStatus) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterScanStatus) GetSuiteStatus() *ClusterScanStatus_SuiteStatus {
	if x != nil {
		return x.SuiteStatus
	}
	return nil
}

// Next available tag: 5
type BaseComplianceScanConfigurationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneTimeScan  bool                     `protobuf:"varint,1,opt,name=one_time_scan,json=oneTimeScan,proto3" json:"one_time_scan,omitempty"`
	Profiles     []string                 `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	ScanSchedule *Schedule                `protobuf:"bytes,3,opt,name=scan_schedule,json=scanSchedule,proto3" json:"scan_schedule,omitempty"`
	Description  string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Notifiers    []*NotifierConfiguration `protobuf:"bytes,5,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
}

func (x *BaseComplianceScanConfigurationSettings) Reset() {
	*x = BaseComplianceScanConfigurationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseComplianceScanConfigurationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseComplianceScanConfigurationSettings) ProtoMessage() {}

func (x *BaseComplianceScanConfigurationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseComplianceScanConfigurationSettings.ProtoReflect.Descriptor instead.
func (*BaseComplianceScanConfigurationSettings) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{1}
}

func (x *BaseComplianceScanConfigurationSettings) GetOneTimeScan() bool {
	if x != nil {
		return x.OneTimeScan
	}
	return false
}

func (x *BaseComplianceScanConfigurationSettings) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *BaseComplianceScanConfigurationSettings) GetScanSchedule() *Schedule {
	if x != nil {
		return x.ScanSchedule
	}
	return nil
}

func (x *BaseComplianceScanConfigurationSettings) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BaseComplianceScanConfigurationSettings) GetNotifiers() []*NotifierConfiguration {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

// Next available tag: 5
type ComplianceScanConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName   string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	Clusters   []string                                 `protobuf:"bytes,4,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ComplianceScanConfiguration) Reset() {
	*x = ComplianceScanConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanConfiguration) ProtoMessage() {}

func (x *ComplianceScanConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanConfiguration.ProtoReflect.Descriptor instead.
func (*ComplianceScanConfiguration) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceScanConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceScanConfiguration) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceScanConfiguration) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if x != nil {
		return x.ScanConfig
	}
	return nil
}

func (x *ComplianceScanConfiguration) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// Next available tag: 9
type ComplianceScanConfigurationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName        string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig      *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	ClusterStatus   []*ClusterScanStatus                     `protobuf:"bytes,4,rep,name=cluster_status,json=clusterStatus,proto3" json:"cluster_status,omitempty"`
	CreatedTime     *timestamppb.Timestamp                   `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdatedTime *timestamppb.Timestamp                   `protobuf:"bytes,6,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Most recent user to update the scan settings
	ModifiedBy       *SlimUser              `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	LastExecutedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_executed_time,json=lastExecutedTime,proto3" json:"last_executed_time,omitempty"`
}

func (x *ComplianceScanConfigurationStatus) Reset() {
	*x = ComplianceScanConfigurationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanConfigurationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanConfigurationStatus) ProtoMessage() {}

func (x *ComplianceScanConfigurationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanConfigurationStatus.ProtoReflect.Descriptor instead.
func (*ComplianceScanConfigurationStatus) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceScanConfigurationStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceScanConfigurationStatus) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceScanConfigurationStatus) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if x != nil {
		return x.ScanConfig
	}
	return nil
}

func (x *ComplianceScanConfigurationStatus) GetClusterStatus() []*ClusterScanStatus {
	if x != nil {
		return x.ClusterStatus
	}
	return nil
}

func (x *ComplianceScanConfigurationStatus) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ComplianceScanConfigurationStatus) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *ComplianceScanConfigurationStatus) GetModifiedBy() *SlimUser {
	if x != nil {
		return x.ModifiedBy
	}
	return nil
}

func (x *ComplianceScanConfigurationStatus) GetLastExecutedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExecutedTime
	}
	return nil
}

type ComplianceConfigClusterProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string    `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Query     *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ComplianceConfigClusterProfileRequest) Reset() {
	*x = ComplianceConfigClusterProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceConfigClusterProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceConfigClusterProfileRequest) ProtoMessage() {}

func (x *ComplianceConfigClusterProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceConfigClusterProfileRequest.ProtoReflect.Descriptor instead.
func (*ComplianceConfigClusterProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceConfigClusterProfileRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceConfigClusterProfileRequest) GetQuery() *RawQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListComplianceScanConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*ComplianceScanConfigurationStatus `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
	TotalCount     int32                                `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListComplianceScanConfigurationsResponse) Reset() {
	*x = ListComplianceScanConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceScanConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceScanConfigurationsResponse) ProtoMessage() {}

func (x *ListComplianceScanConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceScanConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceScanConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListComplianceScanConfigurationsResponse) GetConfigurations() []*ComplianceScanConfigurationStatus {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *ListComplianceScanConfigurationsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ComplianceRunReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanConfigId string `protobuf:"bytes,1,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
}

func (x *ComplianceRunReportRequest) Reset() {
	*x = ComplianceRunReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRunReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRunReportRequest) ProtoMessage() {}

func (x *ComplianceRunReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRunReportRequest.ProtoReflect.Descriptor instead.
func (*ComplianceRunReportRequest) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{6}
}

func (x *ComplianceRunReportRequest) GetScanConfigId() string {
	if x != nil {
		return x.ScanConfigId
	}
	return ""
}

type ComplianceRunReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunState    ComplianceRunReportResponse_RunState `protobuf:"varint,1,opt,name=run_state,json=runState,proto3,enum=v2.ComplianceRunReportResponse_RunState" json:"run_state,omitempty"`
	SubmittedAt *timestamppb.Timestamp               `protobuf:"bytes,2,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	ErrorMsg    string                               `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ComplianceRunReportResponse) Reset() {
	*x = ComplianceRunReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRunReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRunReportResponse) ProtoMessage() {}

func (x *ComplianceRunReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRunReportResponse.ProtoReflect.Descriptor instead.
func (*ComplianceRunReportResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{7}
}

func (x *ComplianceRunReportResponse) GetRunState() ComplianceRunReportResponse_RunState {
	if x != nil {
		return x.RunState
	}
	return ComplianceRunReportResponse_SUBMITTED
}

func (x *ComplianceRunReportResponse) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *ComplianceRunReportResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ListComplianceScanConfigsProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles   []*ComplianceProfileSummary `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	TotalCount int32                       `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListComplianceScanConfigsProfileResponse) Reset() {
	*x = ListComplianceScanConfigsProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceScanConfigsProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceScanConfigsProfileResponse) ProtoMessage() {}

func (x *ListComplianceScanConfigsProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceScanConfigsProfileResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceScanConfigsProfileResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListComplianceScanConfigsProfileResponse) GetProfiles() []*ComplianceProfileSummary {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ListComplianceScanConfigsProfileResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ListComplianceScanConfigsClusterProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string                      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName string                      `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Profiles    []*ComplianceProfileSummary `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	TotalCount  int32                       `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListComplianceScanConfigsClusterProfileResponse) Reset() {
	*x = ListComplianceScanConfigsClusterProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceScanConfigsClusterProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceScanConfigsClusterProfileResponse) ProtoMessage() {}

func (x *ListComplianceScanConfigsClusterProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceScanConfigsClusterProfileResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceScanConfigsClusterProfileResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListComplianceScanConfigsClusterProfileResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListComplianceScanConfigsClusterProfileResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListComplianceScanConfigsClusterProfileResponse) GetProfiles() []*ComplianceProfileSummary {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ListComplianceScanConfigsClusterProfileResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Additional scan status gathered from ComplianceSuite
type ClusterScanStatus_SuiteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase              string                 `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Result             string                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorMessage       string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
}

func (x *ClusterScanStatus_SuiteStatus) Reset() {
	*x = ClusterScanStatus_SuiteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterScanStatus_SuiteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterScanStatus_SuiteStatus) ProtoMessage() {}

func (x *ClusterScanStatus_SuiteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_scan_configuration_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterScanStatus_SuiteStatus.ProtoReflect.Descriptor instead.
func (*ClusterScanStatus_SuiteStatus) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClusterScanStatus_SuiteStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ClusterScanStatus_SuiteStatus) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ClusterScanStatus_SuiteStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ClusterScanStatus_SuiteStatus) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

var File_api_v2_compliance_scan_configuration_service_proto protoreflect.FileDescriptor

var file_api_v2_compliance_scan_configuration_service_proto_rawDesc = []byte{
	0x0a, 0x32, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x32, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xae, 0x01,
	0x0a, 0x0b, 0x53, 0x75, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x27, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x0c, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xdc, 0x03, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x6c, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x28, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x1b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x24,
	0x0a, 0x08, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a,
	0x2f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xcf, 0x0a,
	0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63,
	0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x25, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x94,
	0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x09, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a,
	0x01, 0x2a, 0x1a, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x72,
	0x0a, 0x1e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x09, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x75, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x1a, 0x2e, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x12, 0x9e, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x2c, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xdf, 0x01,
	0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x27, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x5a, 0x0b, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x58, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_v2_compliance_scan_configuration_service_proto_rawDescOnce sync.Once
	file_api_v2_compliance_scan_configuration_service_proto_rawDescData = file_api_v2_compliance_scan_configuration_service_proto_rawDesc
)

func file_api_v2_compliance_scan_configuration_service_proto_rawDescGZIP() []byte {
	file_api_v2_compliance_scan_configuration_service_proto_rawDescOnce.Do(func() {
		file_api_v2_compliance_scan_configuration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v2_compliance_scan_configuration_service_proto_rawDescData)
	})
	return file_api_v2_compliance_scan_configuration_service_proto_rawDescData
}

var file_api_v2_compliance_scan_configuration_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v2_compliance_scan_configuration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_v2_compliance_scan_configuration_service_proto_goTypes = []any{
	(ComplianceRunReportResponse_RunState)(0),               // 0: v2.ComplianceRunReportResponse.RunState
	(*ClusterScanStatus)(nil),                               // 1: v2.ClusterScanStatus
	(*BaseComplianceScanConfigurationSettings)(nil),         // 2: v2.BaseComplianceScanConfigurationSettings
	(*ComplianceScanConfiguration)(nil),                     // 3: v2.ComplianceScanConfiguration
	(*ComplianceScanConfigurationStatus)(nil),               // 4: v2.ComplianceScanConfigurationStatus
	(*ComplianceConfigClusterProfileRequest)(nil),           // 5: v2.ComplianceConfigClusterProfileRequest
	(*ListComplianceScanConfigurationsResponse)(nil),        // 6: v2.ListComplianceScanConfigurationsResponse
	(*ComplianceRunReportRequest)(nil),                      // 7: v2.ComplianceRunReportRequest
	(*ComplianceRunReportResponse)(nil),                     // 8: v2.ComplianceRunReportResponse
	(*ListComplianceScanConfigsProfileResponse)(nil),        // 9: v2.ListComplianceScanConfigsProfileResponse
	(*ListComplianceScanConfigsClusterProfileResponse)(nil), // 10: v2.ListComplianceScanConfigsClusterProfileResponse
	(*ClusterScanStatus_SuiteStatus)(nil),                   // 11: v2.ClusterScanStatus.SuiteStatus
	(*Schedule)(nil),                                        // 12: v2.Schedule
	(*NotifierConfiguration)(nil),                           // 13: v2.NotifierConfiguration
	(*timestamppb.Timestamp)(nil),                           // 14: google.protobuf.Timestamp
	(*SlimUser)(nil),                                        // 15: v2.SlimUser
	(*RawQuery)(nil),                                        // 16: v2.RawQuery
	(*ComplianceProfileSummary)(nil),                        // 17: v2.ComplianceProfileSummary
	(*ResourceByID)(nil),                                    // 18: v2.ResourceByID
	(*Empty)(nil),                                           // 19: v2.Empty
}
var file_api_v2_compliance_scan_configuration_service_proto_depIdxs = []int32{
	11, // 0: v2.ClusterScanStatus.suite_status:type_name -> v2.ClusterScanStatus.SuiteStatus
	12, // 1: v2.BaseComplianceScanConfigurationSettings.scan_schedule:type_name -> v2.Schedule
	13, // 2: v2.BaseComplianceScanConfigurationSettings.notifiers:type_name -> v2.NotifierConfiguration
	2,  // 3: v2.ComplianceScanConfiguration.scan_config:type_name -> v2.BaseComplianceScanConfigurationSettings
	2,  // 4: v2.ComplianceScanConfigurationStatus.scan_config:type_name -> v2.BaseComplianceScanConfigurationSettings
	1,  // 5: v2.ComplianceScanConfigurationStatus.cluster_status:type_name -> v2.ClusterScanStatus
	14, // 6: v2.ComplianceScanConfigurationStatus.created_time:type_name -> google.protobuf.Timestamp
	14, // 7: v2.ComplianceScanConfigurationStatus.last_updated_time:type_name -> google.protobuf.Timestamp
	15, // 8: v2.ComplianceScanConfigurationStatus.modified_by:type_name -> v2.SlimUser
	14, // 9: v2.ComplianceScanConfigurationStatus.last_executed_time:type_name -> google.protobuf.Timestamp
	16, // 10: v2.ComplianceConfigClusterProfileRequest.query:type_name -> v2.RawQuery
	4,  // 11: v2.ListComplianceScanConfigurationsResponse.configurations:type_name -> v2.ComplianceScanConfigurationStatus
	0,  // 12: v2.ComplianceRunReportResponse.run_state:type_name -> v2.ComplianceRunReportResponse.RunState
	14, // 13: v2.ComplianceRunReportResponse.submitted_at:type_name -> google.protobuf.Timestamp
	17, // 14: v2.ListComplianceScanConfigsProfileResponse.profiles:type_name -> v2.ComplianceProfileSummary
	17, // 15: v2.ListComplianceScanConfigsClusterProfileResponse.profiles:type_name -> v2.ComplianceProfileSummary
	14, // 16: v2.ClusterScanStatus.SuiteStatus.last_transition_time:type_name -> google.protobuf.Timestamp
	16, // 17: v2.ComplianceScanConfigurationService.ListComplianceScanConfigurations:input_type -> v2.RawQuery
	18, // 18: v2.ComplianceScanConfigurationService.GetComplianceScanConfiguration:input_type -> v2.ResourceByID
	3,  // 19: v2.ComplianceScanConfigurationService.CreateComplianceScanConfiguration:input_type -> v2.ComplianceScanConfiguration
	3,  // 20: v2.ComplianceScanConfigurationService.UpdateComplianceScanConfiguration:input_type -> v2.ComplianceScanConfiguration
	18, // 21: v2.ComplianceScanConfigurationService.DeleteComplianceScanConfiguration:input_type -> v2.ResourceByID
	18, // 22: v2.ComplianceScanConfigurationService.RunComplianceScanConfiguration:input_type -> v2.ResourceByID
	7,  // 23: v2.ComplianceScanConfigurationService.RunReport:input_type -> v2.ComplianceRunReportRequest
	16, // 24: v2.ComplianceScanConfigurationService.ListComplianceScanConfigProfiles:input_type -> v2.RawQuery
	5,  // 25: v2.ComplianceScanConfigurationService.ListComplianceScanConfigClusterProfiles:input_type -> v2.ComplianceConfigClusterProfileRequest
	6,  // 26: v2.ComplianceScanConfigurationService.ListComplianceScanConfigurations:output_type -> v2.ListComplianceScanConfigurationsResponse
	4,  // 27: v2.ComplianceScanConfigurationService.GetComplianceScanConfiguration:output_type -> v2.ComplianceScanConfigurationStatus
	3,  // 28: v2.ComplianceScanConfigurationService.CreateComplianceScanConfiguration:output_type -> v2.ComplianceScanConfiguration
	19, // 29: v2.ComplianceScanConfigurationService.UpdateComplianceScanConfiguration:output_type -> v2.Empty
	19, // 30: v2.ComplianceScanConfigurationService.DeleteComplianceScanConfiguration:output_type -> v2.Empty
	19, // 31: v2.ComplianceScanConfigurationService.RunComplianceScanConfiguration:output_type -> v2.Empty
	8,  // 32: v2.ComplianceScanConfigurationService.RunReport:output_type -> v2.ComplianceRunReportResponse
	9,  // 33: v2.ComplianceScanConfigurationService.ListComplianceScanConfigProfiles:output_type -> v2.ListComplianceScanConfigsProfileResponse
	10, // 34: v2.ComplianceScanConfigurationService.ListComplianceScanConfigClusterProfiles:output_type -> v2.ListComplianceScanConfigsClusterProfileResponse
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_v2_compliance_scan_configuration_service_proto_init() }
func file_api_v2_compliance_scan_configuration_service_proto_init() {
	if File_api_v2_compliance_scan_configuration_service_proto != nil {
		return
	}
	file_api_v2_common_proto_init()
	file_api_v2_compliance_common_proto_init()
	file_api_v2_report_service_proto_init()
	file_api_v2_search_query_proto_init()
	file_api_v2_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterScanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BaseComplianceScanConfigurationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceScanConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceScanConfigurationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceConfigClusterProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListComplianceScanConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRunReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRunReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListComplianceScanConfigsProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListComplianceScanConfigsClusterProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_scan_configuration_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterScanStatus_SuiteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v2_compliance_scan_configuration_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v2_compliance_scan_configuration_service_proto_goTypes,
		DependencyIndexes: file_api_v2_compliance_scan_configuration_service_proto_depIdxs,
		EnumInfos:         file_api_v2_compliance_scan_configuration_service_proto_enumTypes,
		MessageInfos:      file_api_v2_compliance_scan_configuration_service_proto_msgTypes,
	}.Build()
	File_api_v2_compliance_scan_configuration_service_proto = out.File
	file_api_v2_compliance_scan_configuration_service_proto_rawDesc = nil
	file_api_v2_compliance_scan_configuration_service_proto_goTypes = nil
	file_api_v2_compliance_scan_configuration_service_proto_depIdxs = nil
}
