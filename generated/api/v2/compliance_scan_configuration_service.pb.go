// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_scan_configuration_service.proto

package v2

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ClusterScanStatus holds status based on cluster in the event that a scan configuration
// was successfully applied to some clusters but not others.
// Next available tag: 5
type ClusterScanStatus struct {
	ClusterId            string                         `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Errors               []string                       `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ClusterName          string                         `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	SuiteStatus          *ClusterScanStatus_SuiteStatus `protobuf:"bytes,4,opt,name=suite_status,json=suiteStatus,proto3" json:"suite_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ClusterScanStatus) Reset()         { *m = ClusterScanStatus{} }
func (m *ClusterScanStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterScanStatus) ProtoMessage()    {}
func (*ClusterScanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{0}
}
func (m *ClusterScanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterScanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterScanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterScanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterScanStatus.Merge(m, src)
}
func (m *ClusterScanStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterScanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterScanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterScanStatus proto.InternalMessageInfo

func (m *ClusterScanStatus) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterScanStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ClusterScanStatus) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterScanStatus) GetSuiteStatus() *ClusterScanStatus_SuiteStatus {
	if m != nil {
		return m.SuiteStatus
	}
	return nil
}

func (m *ClusterScanStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterScanStatus) Clone() *ClusterScanStatus {
	if m == nil {
		return nil
	}
	cloned := new(ClusterScanStatus)
	*cloned = *m

	if m.Errors != nil {
		cloned.Errors = make([]string, len(m.Errors))
		copy(cloned.Errors, m.Errors)
	}
	cloned.SuiteStatus = m.SuiteStatus.Clone()
	return cloned
}

// Additional scan status gathered from ComplianceSuite
type ClusterScanStatus_SuiteStatus struct {
	Phase                string           `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Result               string           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorMessage         string           `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	LastTransitionTime   *types.Timestamp `protobuf:"bytes,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ClusterScanStatus_SuiteStatus) Reset()         { *m = ClusterScanStatus_SuiteStatus{} }
func (m *ClusterScanStatus_SuiteStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterScanStatus_SuiteStatus) ProtoMessage()    {}
func (*ClusterScanStatus_SuiteStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{0, 0}
}
func (m *ClusterScanStatus_SuiteStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterScanStatus_SuiteStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterScanStatus_SuiteStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterScanStatus_SuiteStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterScanStatus_SuiteStatus.Merge(m, src)
}
func (m *ClusterScanStatus_SuiteStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterScanStatus_SuiteStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterScanStatus_SuiteStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterScanStatus_SuiteStatus proto.InternalMessageInfo

func (m *ClusterScanStatus_SuiteStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *ClusterScanStatus_SuiteStatus) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ClusterScanStatus_SuiteStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ClusterScanStatus_SuiteStatus) GetLastTransitionTime() *types.Timestamp {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *ClusterScanStatus_SuiteStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterScanStatus_SuiteStatus) Clone() *ClusterScanStatus_SuiteStatus {
	if m == nil {
		return nil
	}
	cloned := new(ClusterScanStatus_SuiteStatus)
	*cloned = *m

	cloned.LastTransitionTime = m.LastTransitionTime.Clone()
	return cloned
}

// Next available tag: 5
type BaseComplianceScanConfigurationSettings struct {
	OneTimeScan          bool      `protobuf:"varint,1,opt,name=one_time_scan,json=oneTimeScan,proto3" json:"one_time_scan,omitempty"`
	Profiles             []string  `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	ScanSchedule         *Schedule `protobuf:"bytes,3,opt,name=scan_schedule,json=scanSchedule,proto3" json:"scan_schedule,omitempty"`
	Description          string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BaseComplianceScanConfigurationSettings) Reset() {
	*m = BaseComplianceScanConfigurationSettings{}
}
func (m *BaseComplianceScanConfigurationSettings) String() string { return proto.CompactTextString(m) }
func (*BaseComplianceScanConfigurationSettings) ProtoMessage()    {}
func (*BaseComplianceScanConfigurationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{1}
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseComplianceScanConfigurationSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseComplianceScanConfigurationSettings.Merge(m, src)
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Size() int {
	return m.Size()
}
func (m *BaseComplianceScanConfigurationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseComplianceScanConfigurationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BaseComplianceScanConfigurationSettings proto.InternalMessageInfo

func (m *BaseComplianceScanConfigurationSettings) GetOneTimeScan() bool {
	if m != nil {
		return m.OneTimeScan
	}
	return false
}

func (m *BaseComplianceScanConfigurationSettings) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *BaseComplianceScanConfigurationSettings) GetScanSchedule() *Schedule {
	if m != nil {
		return m.ScanSchedule
	}
	return nil
}

func (m *BaseComplianceScanConfigurationSettings) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BaseComplianceScanConfigurationSettings) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BaseComplianceScanConfigurationSettings) Clone() *BaseComplianceScanConfigurationSettings {
	if m == nil {
		return nil
	}
	cloned := new(BaseComplianceScanConfigurationSettings)
	*cloned = *m

	if m.Profiles != nil {
		cloned.Profiles = make([]string, len(m.Profiles))
		copy(cloned.Profiles, m.Profiles)
	}
	cloned.ScanSchedule = m.ScanSchedule.Clone()
	return cloned
}

// Next available tag: 5
type ComplianceScanConfiguration struct {
	Id                   string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName             string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig           *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	Clusters             []string                                 `protobuf:"bytes,4,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ComplianceScanConfiguration) Reset()         { *m = ComplianceScanConfiguration{} }
func (m *ComplianceScanConfiguration) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfiguration) ProtoMessage()    {}
func (*ComplianceScanConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{2}
}
func (m *ComplianceScanConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfiguration.Merge(m, src)
}
func (m *ComplianceScanConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfiguration proto.InternalMessageInfo

func (m *ComplianceScanConfiguration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceScanConfiguration) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfiguration) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if m != nil {
		return m.ScanConfig
	}
	return nil
}

func (m *ComplianceScanConfiguration) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceScanConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfiguration) Clone() *ComplianceScanConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfiguration)
	*cloned = *m

	cloned.ScanConfig = m.ScanConfig.Clone()
	if m.Clusters != nil {
		cloned.Clusters = make([]string, len(m.Clusters))
		copy(cloned.Clusters, m.Clusters)
	}
	return cloned
}

// Next available tag: 8
type ComplianceScanConfigurationStatus struct {
	Id              string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName        string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig      *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	ClusterStatus   []*ClusterScanStatus                     `protobuf:"bytes,4,rep,name=cluster_status,json=clusterStatus,proto3" json:"cluster_status,omitempty"`
	CreatedTime     *types.Timestamp                         `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdatedTime *types.Timestamp                         `protobuf:"bytes,6,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Most recent user to update the scan settings
	ModifiedBy           *SlimUser `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceScanConfigurationStatus) Reset()         { *m = ComplianceScanConfigurationStatus{} }
func (m *ComplianceScanConfigurationStatus) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfigurationStatus) ProtoMessage()    {}
func (*ComplianceScanConfigurationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{3}
}
func (m *ComplianceScanConfigurationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfigurationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfigurationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfigurationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfigurationStatus.Merge(m, src)
}
func (m *ComplianceScanConfigurationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfigurationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfigurationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfigurationStatus proto.InternalMessageInfo

func (m *ComplianceScanConfigurationStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceScanConfigurationStatus) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfigurationStatus) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if m != nil {
		return m.ScanConfig
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetClusterStatus() []*ClusterScanStatus {
	if m != nil {
		return m.ClusterStatus
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetModifiedBy() *SlimUser {
	if m != nil {
		return m.ModifiedBy
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfigurationStatus) Clone() *ComplianceScanConfigurationStatus {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfigurationStatus)
	*cloned = *m

	cloned.ScanConfig = m.ScanConfig.Clone()
	if m.ClusterStatus != nil {
		cloned.ClusterStatus = make([]*ClusterScanStatus, len(m.ClusterStatus))
		for idx, v := range m.ClusterStatus {
			cloned.ClusterStatus[idx] = v.Clone()
		}
	}
	cloned.CreatedTime = m.CreatedTime.Clone()
	cloned.LastUpdatedTime = m.LastUpdatedTime.Clone()
	cloned.ModifiedBy = m.ModifiedBy.Clone()
	return cloned
}

type ComplianceScanConfigurationsCount struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceScanConfigurationsCount) Reset()         { *m = ComplianceScanConfigurationsCount{} }
func (m *ComplianceScanConfigurationsCount) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfigurationsCount) ProtoMessage()    {}
func (*ComplianceScanConfigurationsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{4}
}
func (m *ComplianceScanConfigurationsCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfigurationsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfigurationsCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfigurationsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfigurationsCount.Merge(m, src)
}
func (m *ComplianceScanConfigurationsCount) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfigurationsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfigurationsCount.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfigurationsCount proto.InternalMessageInfo

func (m *ComplianceScanConfigurationsCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ComplianceScanConfigurationsCount) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfigurationsCount) Clone() *ComplianceScanConfigurationsCount {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfigurationsCount)
	*cloned = *m

	return cloned
}

// Next available tag: 2
type ListComplianceScanConfigurationsResponse struct {
	Configurations       []*ComplianceScanConfigurationStatus `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ListComplianceScanConfigurationsResponse) Reset() {
	*m = ListComplianceScanConfigurationsResponse{}
}
func (m *ListComplianceScanConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanConfigurationsResponse) ProtoMessage()    {}
func (*ListComplianceScanConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{5}
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanConfigurationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanConfigurationsResponse.Merge(m, src)
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanConfigurationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanConfigurationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanConfigurationsResponse proto.InternalMessageInfo

func (m *ListComplianceScanConfigurationsResponse) GetConfigurations() []*ComplianceScanConfigurationStatus {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *ListComplianceScanConfigurationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanConfigurationsResponse) Clone() *ListComplianceScanConfigurationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanConfigurationsResponse)
	*cloned = *m

	if m.Configurations != nil {
		cloned.Configurations = make([]*ComplianceScanConfigurationStatus, len(m.Configurations))
		for idx, v := range m.Configurations {
			cloned.Configurations[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ClusterScanStatus)(nil), "v2.ClusterScanStatus")
	proto.RegisterType((*ClusterScanStatus_SuiteStatus)(nil), "v2.ClusterScanStatus.SuiteStatus")
	proto.RegisterType((*BaseComplianceScanConfigurationSettings)(nil), "v2.BaseComplianceScanConfigurationSettings")
	proto.RegisterType((*ComplianceScanConfiguration)(nil), "v2.ComplianceScanConfiguration")
	proto.RegisterType((*ComplianceScanConfigurationStatus)(nil), "v2.ComplianceScanConfigurationStatus")
	proto.RegisterType((*ComplianceScanConfigurationsCount)(nil), "v2.ComplianceScanConfigurationsCount")
	proto.RegisterType((*ListComplianceScanConfigurationsResponse)(nil), "v2.ListComplianceScanConfigurationsResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_scan_configuration_service.proto", fileDescriptor_d441c70a62230c3d)
}

var fileDescriptor_d441c70a62230c3d = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0x6d, 0x92, 0xc6, 0x6f, 0x9d, 0x40, 0x86, 0x82, 0x8c, 0x0b, 0xae, 0xbd, 0x14, 0xc5,
	0xa4, 0xcd, 0x2e, 0x6c, 0x0f, 0x88, 0x7f, 0x97, 0x38, 0x80, 0x2a, 0xa5, 0x48, 0xac, 0x5b, 0x09,
	0x71, 0xb1, 0x26, 0xbb, 0x13, 0x67, 0xc4, 0xee, 0xcc, 0x76, 0x66, 0xd6, 0x60, 0x21, 0x2e, 0x70,
	0x43, 0xe2, 0x02, 0x1c, 0xf8, 0x14, 0x9c, 0x38, 0x73, 0xe6, 0x88, 0xe0, 0x0b, 0xa0, 0xd0, 0x0f,
	0x82, 0x66, 0x76, 0xd6, 0x71, 0xda, 0x6a, 0x6d, 0xc1, 0x81, 0xdb, 0xbe, 0x7f, 0xf3, 0x7e, 0xf3,
	0x7b, 0xbf, 0x37, 0x36, 0x84, 0x38, 0xa7, 0xc1, 0x2c, 0x0c, 0x62, 0x9e, 0xe5, 0x29, 0xc5, 0x2c,
	0x26, 0x13, 0x19, 0x63, 0x36, 0x89, 0x39, 0x3b, 0xa5, 0xd3, 0x42, 0x60, 0x45, 0x39, 0x9b, 0x48,
	0x22, 0x66, 0x34, 0x26, 0x7e, 0x2e, 0xb8, 0xe2, 0xa8, 0x31, 0x0b, 0xbb, 0xcf, 0x5d, 0xd4, 0x65,
	0x9c, 0x95, 0x81, 0xee, 0x8b, 0xd6, 0x29, 0x09, 0x16, 0xf1, 0xd9, 0xe4, 0x41, 0x41, 0xc4, 0xdc,
	0x86, 0x76, 0x6d, 0xa8, 0x90, 0x44, 0x58, 0xd7, 0x4b, 0x53, 0xce, 0xa7, 0x29, 0x09, 0x74, 0x04,
	0x33, 0xc6, 0x95, 0xe9, 0x25, 0x6d, 0xf4, 0xba, 0x8d, 0x1a, 0xeb, 0xa4, 0x38, 0x0d, 0x14, 0xcd,
	0x88, 0x54, 0x38, 0xcb, 0xcb, 0x04, 0xef, 0x61, 0x03, 0x76, 0x47, 0x69, 0x21, 0x15, 0x11, 0xe3,
	0x18, 0xb3, 0xb1, 0xc2, 0xaa, 0x90, 0xe8, 0x65, 0x80, 0xb8, 0x74, 0x4e, 0x68, 0xd2, 0x71, 0xfa,
	0xce, 0xb0, 0x15, 0xb5, 0xac, 0xe7, 0x4e, 0x82, 0x5e, 0x80, 0x4d, 0x22, 0x04, 0x17, 0xb2, 0xd3,
	0xe8, 0x37, 0x87, 0xad, 0xc8, 0x5a, 0x68, 0x00, 0xed, 0xaa, 0x8c, 0xe1, 0x8c, 0x74, 0x9a, 0xa6,
	0xd0, 0xb5, 0xbe, 0x8f, 0x70, 0x46, 0xd0, 0x11, 0xb4, 0x65, 0x41, 0x15, 0x99, 0x48, 0xd3, 0xa9,
	0xf3, 0x74, 0xdf, 0x19, 0xba, 0xe1, 0xc0, 0x9f, 0x85, 0xfe, 0x63, 0x30, 0xfc, 0xb1, 0xce, 0x2c,
	0xbf, 0x23, 0x57, 0x5e, 0x18, 0xdd, 0x9f, 0x1d, 0x70, 0x97, 0x82, 0xe8, 0x2a, 0x6c, 0xe4, 0x67,
	0x58, 0x12, 0x0b, 0xb5, 0x34, 0x34, 0x4c, 0x41, 0x64, 0x91, 0xaa, 0x4e, 0xc3, 0xb8, 0xad, 0x85,
	0x5e, 0x81, 0x6d, 0x03, 0x78, 0x92, 0x11, 0x29, 0xf1, 0xb4, 0xc2, 0xd9, 0x36, 0xce, 0xbb, 0xa5,
	0x0f, 0x1d, 0xc3, 0xd5, 0x14, 0x4b, 0x35, 0x51, 0x02, 0x33, 0x49, 0xcd, 0xfc, 0x34, 0x77, 0x16,
	0x70, 0xd7, 0x2f, 0x89, 0xf5, 0x2b, 0x62, 0xfd, 0x7b, 0x15, 0xb1, 0x11, 0xd2, 0x75, 0xf7, 0x16,
	0x65, 0x3a, 0xe0, 0xfd, 0xea, 0xc0, 0xde, 0x21, 0x96, 0x64, 0xb4, 0x10, 0x88, 0xbe, 0xe6, 0x68,
	0x59, 0x1e, 0x63, 0xa2, 0x14, 0x65, 0x53, 0x89, 0x3c, 0xd8, 0xe6, 0x8c, 0x98, 0x6e, 0x46, 0x45,
	0xe6, 0x52, 0x5b, 0x91, 0xcb, 0x19, 0xd1, 0x67, 0xe9, 0x42, 0xd4, 0x85, 0xad, 0x5c, 0xf0, 0x53,
	0x9a, 0x92, 0x6a, 0x06, 0x0b, 0x1b, 0xbd, 0x01, 0xdb, 0x46, 0x7c, 0x32, 0x3e, 0x23, 0x49, 0x91,
	0x96, 0xd7, 0x73, 0xc3, 0xb6, 0xe6, 0x78, 0x6c, 0x7d, 0x51, 0x5b, 0xa7, 0x54, 0x16, 0xea, 0x83,
	0x9b, 0x10, 0x19, 0x0b, 0x9a, 0x6b, 0x24, 0xe6, 0x8e, 0xad, 0x68, 0xd9, 0xe5, 0xfd, 0xe2, 0xc0,
	0xb5, 0x1a, 0xf0, 0x68, 0x07, 0x1a, 0x0b, 0xa5, 0x34, 0x68, 0x82, 0xae, 0x41, 0xcb, 0x80, 0x30,
	0x3a, 0x28, 0xe9, 0xdf, 0xd2, 0x0e, 0x23, 0x82, 0x63, 0x70, 0x97, 0xd6, 0xc3, 0xe2, 0xbb, 0xa9,
	0xf1, 0xad, 0xc9, 0x51, 0x04, 0x72, 0x11, 0xd2, 0x5c, 0x58, 0x85, 0x69, 0x39, 0x19, 0x2e, 0x2a,
	0xdb, 0xfb, 0xbe, 0x09, 0x83, 0xba, 0xf3, 0x4a, 0xf9, 0xfc, 0x8f, 0xe0, 0xdf, 0x85, 0x9d, 0x6a,
	0x65, 0x16, 0x1b, 0xd1, 0x1c, 0xba, 0xe1, 0xf3, 0x4f, 0xdc, 0x88, 0x68, 0xdb, 0x26, 0x5b, 0xe0,
	0xef, 0x41, 0x3b, 0x16, 0x04, 0x2b, 0x92, 0x94, 0xe2, 0xdc, 0x58, 0x29, 0x4e, 0xd7, 0xe6, 0x6b,
	0x0f, 0xfa, 0x00, 0x76, 0x8d, 0xc6, 0x8b, 0x3c, 0xb9, 0x38, 0x63, 0x73, 0xe5, 0x19, 0xcf, 0xe8,
	0xa2, 0xfb, 0x65, 0x8d, 0x39, 0xe7, 0x00, 0xdc, 0x8c, 0x27, 0xf4, 0x94, 0x92, 0x64, 0x72, 0x32,
	0xef, 0x5c, 0x59, 0xd2, 0x5b, 0x4a, 0xb3, 0xfb, 0x92, 0x88, 0x08, 0xaa, 0x84, 0xc3, 0xb9, 0xf7,
	0x56, 0xed, 0x4c, 0xe4, 0x88, 0x17, 0x4c, 0xe9, 0x95, 0x8e, 0xf5, 0x87, 0x19, 0xcb, 0x46, 0x54,
	0x1a, 0xde, 0x1c, 0x86, 0xc7, 0x54, 0xaa, 0xba, 0xf2, 0x88, 0xc8, 0x9c, 0x33, 0x49, 0xd0, 0x5d,
	0xd8, 0xb9, 0xf4, 0xfe, 0xca, 0x8e, 0x63, 0xa8, 0x7d, 0xd5, 0x50, 0xbb, 0x4a, 0x14, 0xd1, 0x23,
	0xc5, 0xe1, 0x1f, 0x57, 0xc0, 0xab, 0x9d, 0xae, 0x79, 0xdc, 0xd1, 0xb7, 0x0e, 0xf4, 0x57, 0x41,
	0x44, 0x86, 0x9b, 0x08, 0x7f, 0xfe, 0xb1, 0x7e, 0xdb, 0xbb, 0xb7, 0xb4, 0xb5, 0xee, 0xb5, 0xbc,
	0xfd, 0xaf, 0xff, 0x7c, 0xf8, 0x43, 0xe3, 0x06, 0xf2, 0x2e, 0xff, 0xe0, 0x04, 0x5a, 0x54, 0xc1,
	0x65, 0xcc, 0x1a, 0x4c, 0xef, 0x43, 0x52, 0x77, 0x2e, 0x7a, 0xd6, 0x40, 0x21, 0x92, 0x17, 0x22,
	0x26, 0x87, 0xf3, 0x3b, 0x47, 0xdd, 0xf5, 0xf8, 0xf1, 0x02, 0x83, 0xe3, 0x35, 0xb4, 0xb7, 0x1a,
	0x47, 0xf0, 0x25, 0x4d, 0xbe, 0x42, 0x3f, 0x3a, 0x30, 0x18, 0x19, 0xf5, 0xd5, 0xe1, 0xb9, 0xbe,
	0xa2, 0x7b, 0x77, 0x55, 0x82, 0x77, 0x60, 0x80, 0xed, 0x79, 0x6b, 0x10, 0xf4, 0xb6, 0xb3, 0x8f,
	0xbe, 0x71, 0x60, 0x50, 0x8a, 0xf9, 0x3f, 0xc1, 0x6a, 0xe9, 0x84, 0xf7, 0xb3, 0x5c, 0xcd, 0xbd,
	0xd0, 0x00, 0xb8, 0xd5, 0x5d, 0x97, 0x19, 0x8d, 0xe2, 0x01, 0x0c, 0x8e, 0x48, 0x4a, 0xea, 0x41,
	0x3c, 0x3e, 0xab, 0xa5, 0xae, 0x76, 0x1e, 0xfb, 0x6b, 0xcf, 0x43, 0x40, 0x2f, 0x2a, 0xd8, 0xbf,
	0xee, 0x77, 0xdb, 0xf4, 0x3b, 0xf0, 0x6e, 0xae, 0xd9, 0x2f, 0x10, 0x05, 0x43, 0xdf, 0x39, 0x70,
	0xa3, 0x5e, 0x90, 0x76, 0xfd, 0x2f, 0x6f, 0xc8, 0x2a, 0x49, 0x96, 0x45, 0xde, 0xeb, 0x06, 0xd2,
	0x3e, 0x1a, 0x3e, 0x19, 0x52, 0xc1, 0xd4, 0x23, 0xc0, 0x0e, 0xdf, 0xfc, 0xed, 0xbc, 0xe7, 0xfc,
	0x7e, 0xde, 0x73, 0xfe, 0x3a, 0xef, 0x39, 0x3f, 0xfd, 0xdd, 0x7b, 0x0a, 0x3a, 0x94, 0xfb, 0x52,
	0xe1, 0xf8, 0x33, 0xc1, 0xbf, 0x28, 0x1f, 0x3f, 0x1f, 0xe7, 0xd4, 0x9f, 0x85, 0x9f, 0xba, 0x7e,
	0x50, 0xfe, 0xfd, 0x7a, 0x67, 0x16, 0x7e, 0xd2, 0x3c, 0xd9, 0x34, 0xc1, 0xdb, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0xb4, 0x38, 0x15, 0xfc, 0x09, 0x00, 0x00,
}

func (m *ClusterScanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterScanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterScanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuiteStatus != nil {
		{
			size, err := m.SuiteStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterScanStatus_SuiteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterScanStatus_SuiteStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterScanStatus_SuiteStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Phase) > 0 {
		i -= len(m.Phase)
		copy(dAtA[i:], m.Phase)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Phase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseComplianceScanConfigurationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseComplianceScanConfigurationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseComplianceScanConfigurationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.ScanSchedule != nil {
		{
			size, err := m.ScanSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Profiles[iNdEx])
			copy(dAtA[i:], m.Profiles[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Profiles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OneTimeScan {
		i--
		if m.OneTimeScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Clusters[iNdEx])
			copy(dAtA[i:], m.Clusters[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Clusters[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ScanConfig != nil {
		{
			size, err := m.ScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfigurationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfigurationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfigurationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModifiedBy != nil {
		{
			size, err := m.ModifiedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastUpdatedTime != nil {
		{
			size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterStatus) > 0 {
		for iNdEx := len(m.ClusterStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ScanConfig != nil {
		{
			size, err := m.ScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfigurationsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfigurationsCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfigurationsCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanConfigurationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanConfigurationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanConfigurationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configurations) > 0 {
		for iNdEx := len(m.Configurations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configurations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceScanConfigurationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceScanConfigurationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterScanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.SuiteStatus != nil {
		l = m.SuiteStatus.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterScanStatus_SuiteStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseComplianceScanConfigurationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneTimeScan {
		n += 2
	}
	if len(m.Profiles) > 0 {
		for _, s := range m.Profiles {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.ScanSchedule != nil {
		l = m.ScanSchedule.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanConfig != nil {
		l = m.ScanConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, s := range m.Clusters {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfigurationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanConfig != nil {
		l = m.ScanConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.ClusterStatus) > 0 {
		for _, e := range m.ClusterStatus {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.LastUpdatedTime != nil {
		l = m.LastUpdatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ModifiedBy != nil {
		l = m.ModifiedBy.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfigurationsCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovComplianceScanConfigurationService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanConfigurationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for _, e := range m.Configurations {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceScanConfigurationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceScanConfigurationService(x uint64) (n int) {
	return sovComplianceScanConfigurationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterScanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterScanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterScanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuiteStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuiteStatus == nil {
				m.SuiteStatus = &ClusterScanStatus_SuiteStatus{}
			}
			if err := m.SuiteStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterScanStatus_SuiteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuiteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuiteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &types.Timestamp{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseComplianceScanConfigurationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseComplianceScanConfigurationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseComplianceScanConfigurationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTimeScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneTimeScan = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanSchedule == nil {
				m.ScanSchedule = &Schedule{}
			}
			if err := m.ScanSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanConfig == nil {
				m.ScanConfig = &BaseComplianceScanConfigurationSettings{}
			}
			if err := m.ScanConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfigurationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanConfig == nil {
				m.ScanConfig = &BaseComplianceScanConfigurationSettings{}
			}
			if err := m.ScanConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterStatus = append(m.ClusterStatus, &ClusterScanStatus{})
			if err := m.ClusterStatus[len(m.ClusterStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedTime == nil {
				m.LastUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModifiedBy == nil {
				m.ModifiedBy = &SlimUser{}
			}
			if err := m.ModifiedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfigurationsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfigurationsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfigurationsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanConfigurationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configurations = append(m.Configurations, &ComplianceScanConfigurationStatus{})
			if err := m.Configurations[len(m.Configurations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceScanConfigurationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceScanConfigurationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceScanConfigurationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceScanConfigurationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceScanConfigurationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceScanConfigurationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceScanConfigurationService = fmt.Errorf("proto: unexpected end of group")
)
