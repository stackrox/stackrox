// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_scan_configuration_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ClusterScanStatus holds status based on cluster in the event that a scan configuration
// was successfully applied to some clusters but not others.
// Next available tag: 3
type ClusterScanStatus struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Errors               []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ClusterName          string   `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterScanStatus) Reset()         { *m = ClusterScanStatus{} }
func (m *ClusterScanStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterScanStatus) ProtoMessage()    {}
func (*ClusterScanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{0}
}
func (m *ClusterScanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterScanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterScanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterScanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterScanStatus.Merge(m, src)
}
func (m *ClusterScanStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterScanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterScanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterScanStatus proto.InternalMessageInfo

func (m *ClusterScanStatus) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterScanStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ClusterScanStatus) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterScanStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterScanStatus) Clone() *ClusterScanStatus {
	if m == nil {
		return nil
	}
	cloned := new(ClusterScanStatus)
	*cloned = *m

	if m.Errors != nil {
		cloned.Errors = make([]string, len(m.Errors))
		copy(cloned.Errors, m.Errors)
	}
	return cloned
}

// Next available tag: 4
type BaseComplianceScanConfigurationSettings struct {
	OneTimeScan          bool      `protobuf:"varint,1,opt,name=one_time_scan,json=oneTimeScan,proto3" json:"one_time_scan,omitempty"`
	Profiles             []string  `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	ScanSchedule         *Schedule `protobuf:"bytes,3,opt,name=scan_schedule,json=scanSchedule,proto3" json:"scan_schedule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BaseComplianceScanConfigurationSettings) Reset() {
	*m = BaseComplianceScanConfigurationSettings{}
}
func (m *BaseComplianceScanConfigurationSettings) String() string { return proto.CompactTextString(m) }
func (*BaseComplianceScanConfigurationSettings) ProtoMessage()    {}
func (*BaseComplianceScanConfigurationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{1}
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseComplianceScanConfigurationSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseComplianceScanConfigurationSettings.Merge(m, src)
}
func (m *BaseComplianceScanConfigurationSettings) XXX_Size() int {
	return m.Size()
}
func (m *BaseComplianceScanConfigurationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseComplianceScanConfigurationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BaseComplianceScanConfigurationSettings proto.InternalMessageInfo

func (m *BaseComplianceScanConfigurationSettings) GetOneTimeScan() bool {
	if m != nil {
		return m.OneTimeScan
	}
	return false
}

func (m *BaseComplianceScanConfigurationSettings) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *BaseComplianceScanConfigurationSettings) GetScanSchedule() *Schedule {
	if m != nil {
		return m.ScanSchedule
	}
	return nil
}

func (m *BaseComplianceScanConfigurationSettings) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BaseComplianceScanConfigurationSettings) Clone() *BaseComplianceScanConfigurationSettings {
	if m == nil {
		return nil
	}
	cloned := new(BaseComplianceScanConfigurationSettings)
	*cloned = *m

	if m.Profiles != nil {
		cloned.Profiles = make([]string, len(m.Profiles))
		copy(cloned.Profiles, m.Profiles)
	}
	cloned.ScanSchedule = m.ScanSchedule.Clone()
	return cloned
}

// Next available tag: 4
type ComplianceScanConfiguration struct {
	Id                   string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName             string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig           *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	Clusters             []string                                 `protobuf:"bytes,4,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ComplianceScanConfiguration) Reset()         { *m = ComplianceScanConfiguration{} }
func (m *ComplianceScanConfiguration) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfiguration) ProtoMessage()    {}
func (*ComplianceScanConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{2}
}
func (m *ComplianceScanConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfiguration.Merge(m, src)
}
func (m *ComplianceScanConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfiguration proto.InternalMessageInfo

func (m *ComplianceScanConfiguration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceScanConfiguration) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfiguration) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if m != nil {
		return m.ScanConfig
	}
	return nil
}

func (m *ComplianceScanConfiguration) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceScanConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfiguration) Clone() *ComplianceScanConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfiguration)
	*cloned = *m

	cloned.ScanConfig = m.ScanConfig.Clone()
	if m.Clusters != nil {
		cloned.Clusters = make([]string, len(m.Clusters))
		copy(cloned.Clusters, m.Clusters)
	}
	return cloned
}

// Next available tag: 8
type ComplianceScanConfigurationStatus struct {
	Id              string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName        string                                   `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanConfig      *BaseComplianceScanConfigurationSettings `protobuf:"bytes,3,opt,name=scan_config,json=scanConfig,proto3" json:"scan_config,omitempty"`
	ClusterStatus   []*ClusterScanStatus                     `protobuf:"bytes,4,rep,name=cluster_status,json=clusterStatus,proto3" json:"cluster_status,omitempty"`
	CreatedTime     *types.Timestamp                         `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdatedTime *types.Timestamp                         `protobuf:"bytes,6,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Most recent user to update the scan settings
	ModifiedBy           *SlimUser `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceScanConfigurationStatus) Reset()         { *m = ComplianceScanConfigurationStatus{} }
func (m *ComplianceScanConfigurationStatus) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfigurationStatus) ProtoMessage()    {}
func (*ComplianceScanConfigurationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{3}
}
func (m *ComplianceScanConfigurationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfigurationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfigurationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfigurationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfigurationStatus.Merge(m, src)
}
func (m *ComplianceScanConfigurationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfigurationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfigurationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfigurationStatus proto.InternalMessageInfo

func (m *ComplianceScanConfigurationStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceScanConfigurationStatus) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfigurationStatus) GetScanConfig() *BaseComplianceScanConfigurationSettings {
	if m != nil {
		return m.ScanConfig
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetClusterStatus() []*ClusterScanStatus {
	if m != nil {
		return m.ClusterStatus
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetModifiedBy() *SlimUser {
	if m != nil {
		return m.ModifiedBy
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfigurationStatus) Clone() *ComplianceScanConfigurationStatus {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfigurationStatus)
	*cloned = *m

	cloned.ScanConfig = m.ScanConfig.Clone()
	if m.ClusterStatus != nil {
		cloned.ClusterStatus = make([]*ClusterScanStatus, len(m.ClusterStatus))
		for idx, v := range m.ClusterStatus {
			cloned.ClusterStatus[idx] = v.Clone()
		}
	}
	cloned.CreatedTime = m.CreatedTime.Clone()
	cloned.LastUpdatedTime = m.LastUpdatedTime.Clone()
	cloned.ModifiedBy = m.ModifiedBy.Clone()
	return cloned
}

// Next available tag: 2
type ListComplianceScanConfigurationsResponse struct {
	Configurations       []*ComplianceScanConfigurationStatus `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ListComplianceScanConfigurationsResponse) Reset() {
	*m = ListComplianceScanConfigurationsResponse{}
}
func (m *ListComplianceScanConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanConfigurationsResponse) ProtoMessage()    {}
func (*ListComplianceScanConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{4}
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanConfigurationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanConfigurationsResponse.Merge(m, src)
}
func (m *ListComplianceScanConfigurationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanConfigurationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanConfigurationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanConfigurationsResponse proto.InternalMessageInfo

func (m *ListComplianceScanConfigurationsResponse) GetConfigurations() []*ComplianceScanConfigurationStatus {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *ListComplianceScanConfigurationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanConfigurationsResponse) Clone() *ListComplianceScanConfigurationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanConfigurationsResponse)
	*cloned = *m

	if m.Configurations != nil {
		cloned.Configurations = make([]*ComplianceScanConfigurationStatus, len(m.Configurations))
		for idx, v := range m.Configurations {
			cloned.Configurations[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ClusterScanStatus)(nil), "v2.ClusterScanStatus")
	proto.RegisterType((*BaseComplianceScanConfigurationSettings)(nil), "v2.BaseComplianceScanConfigurationSettings")
	proto.RegisterType((*ComplianceScanConfiguration)(nil), "v2.ComplianceScanConfiguration")
	proto.RegisterType((*ComplianceScanConfigurationStatus)(nil), "v2.ComplianceScanConfigurationStatus")
	proto.RegisterType((*ListComplianceScanConfigurationsResponse)(nil), "v2.ListComplianceScanConfigurationsResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_scan_configuration_service.proto", fileDescriptor_d441c70a62230c3d)
}

var fileDescriptor_d441c70a62230c3d = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x2d, 0xe5, 0x56, 0xb5, 0x56, 0xb2, 0x5b, 0x6f, 0xd1, 0x82, 0xa5, 0x5b, 0xd9, 0x22, 0x5a,
	0xd8, 0x75, 0x6d, 0x12, 0x66, 0x0f, 0x05, 0x8a, 0xf6, 0x22, 0xb9, 0x2d, 0x0c, 0xb8, 0x05, 0x4a,
	0xd9, 0x40, 0xd1, 0x0b, 0xb1, 0x26, 0x47, 0xf2, 0xa2, 0x24, 0x97, 0xe6, 0x2e, 0x55, 0x0b, 0x45,
	0x2e, 0xc9, 0x2d, 0xc7, 0x24, 0x87, 0x1c, 0xf2, 0x19, 0xf9, 0x86, 0x20, 0xc7, 0x00, 0xf9, 0x81,
	0xc0, 0xc9, 0x87, 0x04, 0xbb, 0x5c, 0xca, 0x72, 0x0c, 0x48, 0x42, 0x72, 0xc8, 0x71, 0xdf, 0xce,
	0xcc, 0x7b, 0xf3, 0x66, 0x76, 0x91, 0x47, 0x32, 0xea, 0x8e, 0x3c, 0x37, 0x64, 0x49, 0x16, 0x53,
	0x92, 0x86, 0x10, 0xf0, 0x90, 0xa4, 0x41, 0xc8, 0xd2, 0x01, 0x1d, 0x16, 0x39, 0x11, 0x94, 0xa5,
	0x01, 0x87, 0x7c, 0x44, 0x43, 0x70, 0xb2, 0x9c, 0x09, 0x86, 0x6b, 0x23, 0xcf, 0xda, 0x18, 0x32,
	0x36, 0x8c, 0xc1, 0x55, 0xc8, 0x69, 0x31, 0x70, 0x05, 0x4d, 0x80, 0x0b, 0x92, 0x64, 0x65, 0x90,
	0xf5, 0x95, 0x0e, 0x90, 0xf5, 0x49, 0x9a, 0x32, 0xa1, 0x2a, 0x71, 0x7d, 0xfb, 0xd9, 0x15, 0x6d,
	0xc2, 0x52, 0x0d, 0x7e, 0xa9, 0x41, 0x0e, 0x24, 0x0f, 0xcf, 0x82, 0xf3, 0x02, 0xf2, 0xb1, 0xbe,
	0x5a, 0xd3, 0x57, 0x05, 0x87, 0xbc, 0x84, 0xec, 0x04, 0xad, 0xf5, 0xe2, 0x82, 0x0b, 0xc8, 0xfb,
	0x21, 0x49, 0xfb, 0x82, 0x88, 0x82, 0xe3, 0xaf, 0x11, 0x0a, 0x4b, 0x30, 0xa0, 0x91, 0x69, 0x6c,
	0x1a, 0xdb, 0x0d, 0xbf, 0xa1, 0x91, 0xc3, 0x08, 0x7f, 0x81, 0xea, 0x90, 0xe7, 0x2c, 0xe7, 0x66,
	0x6d, 0x73, 0x69, 0xbb, 0xe1, 0xeb, 0x13, 0xee, 0xa0, 0x56, 0x95, 0x96, 0x92, 0x04, 0xcc, 0x25,
	0x95, 0xd8, 0xd4, 0xd8, 0x9f, 0x24, 0x01, 0xfb, 0x91, 0x81, 0xb6, 0xba, 0x84, 0x43, 0x6f, 0x62,
	0x94, 0xa4, 0xed, 0x4d, 0xdb, 0xd4, 0x07, 0x21, 0x68, 0x3a, 0xe4, 0xd8, 0x46, 0x2b, 0x2c, 0x85,
	0x40, 0x5a, 0xa2, 0xdc, 0x54, 0x42, 0x96, 0xfd, 0x26, 0x4b, 0xe1, 0x98, 0x26, 0x2a, 0x11, 0x5b,
	0x68, 0x39, 0xcb, 0xd9, 0x80, 0xc6, 0x50, 0x89, 0x99, 0x9c, 0xf1, 0x3e, 0x5a, 0x51, 0x43, 0xe0,
	0xe1, 0x19, 0x44, 0x45, 0x5c, 0xea, 0x69, 0x7a, 0x2d, 0x67, 0xe4, 0x39, 0x7d, 0x8d, 0xf9, 0x2d,
	0x19, 0x52, 0x9d, 0xec, 0xc7, 0x06, 0x5a, 0x9f, 0x21, 0x0d, 0xaf, 0xa2, 0xda, 0xc4, 0x90, 0x1a,
	0x8d, 0xf0, 0x3a, 0x6a, 0x28, 0x0a, 0xd5, 0x6e, 0x4d, 0xc1, 0xcb, 0x12, 0x90, 0xbd, 0xe2, 0x23,
	0xd4, 0x9c, 0x5a, 0x02, 0xcd, 0xfe, 0xbd, 0x64, 0x5f, 0xd0, 0x01, 0x1f, 0xf1, 0xc9, 0x95, 0xec,
	0x54, 0x1b, 0xc9, 0xcd, 0x0f, 0xcb, 0x4e, 0xab, 0xb3, 0x7d, 0x6f, 0x09, 0x75, 0x66, 0xd5, 0x2b,
	0xa7, 0xfa, 0x1e, 0xc5, 0xff, 0x8c, 0x56, 0xab, 0xcd, 0xe0, 0x4a, 0x8c, 0x6a, 0xa1, 0xe9, 0x7d,
	0x2e, 0x0b, 0xde, 0xd8, 0x3f, 0x7f, 0x45, 0x07, 0x6b, 0xe1, 0xbf, 0xa0, 0x56, 0x98, 0x03, 0x11,
	0x10, 0xa9, 0x65, 0x30, 0x3f, 0x52, 0x62, 0x2c, 0xa7, 0x7c, 0x1b, 0x4e, 0xf5, 0x78, 0x9c, 0xe3,
	0xea, 0xf1, 0xf8, 0x4d, 0x1d, 0x2f, 0x11, 0xfc, 0x1b, 0x5a, 0x8b, 0x09, 0x17, 0x41, 0x91, 0x45,
	0x57, 0x35, 0xea, 0x73, 0x6b, 0x7c, 0x22, 0x93, 0x4e, 0xca, 0x1c, 0x55, 0x67, 0x0f, 0x35, 0x13,
	0x16, 0xd1, 0x01, 0x85, 0x28, 0x38, 0x1d, 0x9b, 0x1f, 0x4f, 0x6d, 0x53, 0x4c, 0x93, 0x13, 0x0e,
	0xb9, 0x8f, 0xaa, 0x80, 0xee, 0xd8, 0x1e, 0xa3, 0xed, 0x23, 0xca, 0xc5, 0x0c, 0xab, 0xb8, 0x0f,
	0x3c, 0x63, 0x29, 0x07, 0xfc, 0x07, 0x5a, 0xbd, 0xf6, 0x55, 0x70, 0xd3, 0x50, 0xfe, 0x7c, 0xab,
	0xfc, 0x99, 0x37, 0x59, 0xff, 0x8d, 0x64, 0xef, 0x49, 0x1d, 0xd9, 0x33, 0x47, 0xa4, 0xfe, 0x21,
	0x7c, 0xd7, 0x40, 0x9b, 0xf3, 0x24, 0x62, 0xd5, 0xa0, 0x4f, 0xfe, 0xfb, 0x4b, 0xfe, 0x23, 0xd6,
	0xae, 0x3c, 0x2d, 0xda, 0x96, 0xbd, 0x73, 0xfb, 0xf9, 0xab, 0xfb, 0xb5, 0x6f, 0xb0, 0x7d, 0xfd,
	0x6f, 0x74, 0xe5, 0x66, 0xb8, 0xd7, 0x35, 0x4b, 0x31, 0xed, 0xdf, 0x61, 0x56, 0x5d, 0xfc, 0xa9,
	0x92, 0x02, 0x9c, 0x15, 0x79, 0x08, 0xdd, 0xf1, 0xe1, 0x81, 0xb5, 0x98, 0x3f, 0xb6, 0xab, 0x74,
	0x7c, 0x87, 0xb7, 0xe6, 0xeb, 0x70, 0xff, 0xa7, 0xd1, 0x2d, 0xfc, 0xc0, 0x40, 0x9d, 0x9e, 0x5a,
	0xa1, 0x59, 0x7a, 0x36, 0xe6, 0xb0, 0x5b, 0xf3, 0x02, 0xec, 0x3d, 0x25, 0x6c, 0xcb, 0x5e, 0xc0,
	0xa0, 0x9f, 0x8c, 0x1d, 0x7c, 0xc7, 0x40, 0x9d, 0x72, 0x23, 0xdf, 0x49, 0x56, 0x43, 0x06, 0xfc,
	0x9a, 0x64, 0x62, 0x6c, 0x7b, 0x4a, 0xc0, 0xae, 0xb5, 0xa8, 0x33, 0x52, 0xc5, 0x39, 0xea, 0x1c,
	0x40, 0x0c, 0xb3, 0x45, 0xdc, 0x9c, 0xd5, 0x14, 0xab, 0x9e, 0xc7, 0xce, 0xc2, 0xf3, 0x18, 0xa1,
	0xb6, 0x5f, 0xa4, 0x6f, 0xcd, 0xf7, 0xa3, 0xe2, 0xdb, 0xc7, 0xee, 0x02, 0x7c, 0x70, 0x01, 0x61,
	0x21, 0x40, 0xf1, 0x76, 0x9d, 0xa7, 0x97, 0x6d, 0xe3, 0xd9, 0x65, 0xdb, 0x78, 0x71, 0xd9, 0x36,
	0x1e, 0xbe, 0x6c, 0x7f, 0x80, 0x4c, 0xca, 0x1c, 0x2e, 0x48, 0xf8, 0x6f, 0xce, 0x2e, 0xca, 0x5f,
	0xc3, 0x21, 0x19, 0x75, 0x46, 0xde, 0x3f, 0xb5, 0x91, 0xf7, 0xb7, 0x71, 0x5a, 0x57, 0xd8, 0x0f,
	0xaf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xba, 0x16, 0x91, 0x12, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceScanConfigurationServiceClient is the client API for ComplianceScanConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ComplianceScanConfigurationServiceClient interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigurationsResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error)
	// CreateComplianceScanConfiguration creates a compliance scan configuration
	CreateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan configuration
	RunComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type complianceScanConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceScanConfigurationServiceClient(cc grpc.ClientConnInterface) ComplianceScanConfigurationServiceClient {
	return &complianceScanConfigurationServiceClient{cc}
}

func (c *complianceScanConfigurationServiceClient) ListComplianceScanConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigurationsResponse, error) {
	out := new(ListComplianceScanConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/ListComplianceScanConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) GetComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error) {
	out := new(ComplianceScanConfigurationStatus)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/GetComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) CreateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error) {
	out := new(ComplianceScanConfiguration)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/CreateComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/UpdateComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) DeleteComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/DeleteComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) RunComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanConfigurationService/RunComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceScanConfigurationServiceServer is the server API for ComplianceScanConfigurationService service.
type ComplianceScanConfigurationServiceServer interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(context.Context, *RawQuery) (*ListComplianceScanConfigurationsResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(context.Context, *ResourceByID) (*ComplianceScanConfigurationStatus, error)
	// CreateComplianceScanConfiguration creates a compliance scan configuration
	CreateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan configuration
	RunComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedComplianceScanConfigurationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceScanConfigurationServiceServer struct {
}

func (*UnimplementedComplianceScanConfigurationServiceServer) ListComplianceScanConfigurations(ctx context.Context, req *RawQuery) (*ListComplianceScanConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanConfigurations not implemented")
}
func (*UnimplementedComplianceScanConfigurationServiceServer) GetComplianceScanConfiguration(ctx context.Context, req *ResourceByID) (*ComplianceScanConfigurationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanConfigurationServiceServer) CreateComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanConfigurationServiceServer) UpdateComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfiguration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanConfigurationServiceServer) DeleteComplianceScanConfiguration(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanConfigurationServiceServer) RunComplianceScanConfiguration(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunComplianceScanConfiguration not implemented")
}

func RegisterComplianceScanConfigurationServiceServer(s *grpc.Server, srv ComplianceScanConfigurationServiceServer) {
	s.RegisterService(&_ComplianceScanConfigurationService_serviceDesc, srv)
}

func _ComplianceScanConfigurationService_ListComplianceScanConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/ListComplianceScanConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_GetComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).GetComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/GetComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).GetComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_CreateComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).CreateComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/CreateComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).CreateComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).UpdateComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/UpdateComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).UpdateComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).DeleteComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/DeleteComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).DeleteComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_RunComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).RunComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanConfigurationService/RunComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).RunComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceScanConfigurationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceScanConfigurationService",
	HandlerType: (*ComplianceScanConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComplianceScanConfigurations",
			Handler:    _ComplianceScanConfigurationService_ListComplianceScanConfigurations_Handler,
		},
		{
			MethodName: "GetComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_GetComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "CreateComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_CreateComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "UpdateComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "DeleteComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "RunComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_RunComplianceScanConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_scan_configuration_service.proto",
}

func (m *ClusterScanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterScanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterScanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseComplianceScanConfigurationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseComplianceScanConfigurationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseComplianceScanConfigurationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScanSchedule != nil {
		{
			size, err := m.ScanSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Profiles[iNdEx])
			copy(dAtA[i:], m.Profiles[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Profiles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OneTimeScan {
		i--
		if m.OneTimeScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Clusters[iNdEx])
			copy(dAtA[i:], m.Clusters[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Clusters[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ScanConfig != nil {
		{
			size, err := m.ScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfigurationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfigurationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfigurationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModifiedBy != nil {
		{
			size, err := m.ModifiedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastUpdatedTime != nil {
		{
			size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterStatus) > 0 {
		for iNdEx := len(m.ClusterStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ScanConfig != nil {
		{
			size, err := m.ScanConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanConfigurationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanConfigurationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanConfigurationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configurations) > 0 {
		for iNdEx := len(m.Configurations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configurations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceScanConfigurationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceScanConfigurationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterScanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseComplianceScanConfigurationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneTimeScan {
		n += 2
	}
	if len(m.Profiles) > 0 {
		for _, s := range m.Profiles {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.ScanSchedule != nil {
		l = m.ScanSchedule.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanConfig != nil {
		l = m.ScanConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, s := range m.Clusters {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfigurationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanConfig != nil {
		l = m.ScanConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.ClusterStatus) > 0 {
		for _, e := range m.ClusterStatus {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.LastUpdatedTime != nil {
		l = m.LastUpdatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ModifiedBy != nil {
		l = m.ModifiedBy.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanConfigurationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configurations) > 0 {
		for _, e := range m.Configurations {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceScanConfigurationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceScanConfigurationService(x uint64) (n int) {
	return sovComplianceScanConfigurationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterScanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterScanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterScanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseComplianceScanConfigurationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseComplianceScanConfigurationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseComplianceScanConfigurationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTimeScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneTimeScan = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanSchedule == nil {
				m.ScanSchedule = &Schedule{}
			}
			if err := m.ScanSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanConfig == nil {
				m.ScanConfig = &BaseComplianceScanConfigurationSettings{}
			}
			if err := m.ScanConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfigurationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanConfig == nil {
				m.ScanConfig = &BaseComplianceScanConfigurationSettings{}
			}
			if err := m.ScanConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterStatus = append(m.ClusterStatus, &ClusterScanStatus{})
			if err := m.ClusterStatus[len(m.ClusterStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedTime == nil {
				m.LastUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModifiedBy == nil {
				m.ModifiedBy = &SlimUser{}
			}
			if err := m.ModifiedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanConfigurationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configurations = append(m.Configurations, &ComplianceScanConfigurationStatus{})
			if err := m.Configurations[len(m.Configurations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceScanConfigurationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceScanConfigurationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceScanConfigurationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceScanConfigurationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceScanConfigurationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceScanConfigurationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceScanConfigurationService = fmt.Errorf("proto: unexpected end of group")
)
