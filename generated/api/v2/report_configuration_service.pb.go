// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/report_configuration_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportConfiguration_ReportType int32

const (
	ReportConfiguration_VULNERABILITY ReportConfiguration_ReportType = 0
)

var ReportConfiguration_ReportType_name = map[int32]string{
	0: "VULNERABILITY",
}

var ReportConfiguration_ReportType_value = map[string]int32{
	"VULNERABILITY": 0,
}

func (x ReportConfiguration_ReportType) String() string {
	return proto.EnumName(ReportConfiguration_ReportType_name, int32(x))
}

func (ReportConfiguration_ReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{0, 0}
}

type VulnerabilityReportFilters_Fixability int32

const (
	VulnerabilityReportFilters_BOTH        VulnerabilityReportFilters_Fixability = 0
	VulnerabilityReportFilters_FIXABLE     VulnerabilityReportFilters_Fixability = 1
	VulnerabilityReportFilters_NOT_FIXABLE VulnerabilityReportFilters_Fixability = 2
)

var VulnerabilityReportFilters_Fixability_name = map[int32]string{
	0: "BOTH",
	1: "FIXABLE",
	2: "NOT_FIXABLE",
}

var VulnerabilityReportFilters_Fixability_value = map[string]int32{
	"BOTH":        0,
	"FIXABLE":     1,
	"NOT_FIXABLE": 2,
}

func (x VulnerabilityReportFilters_Fixability) String() string {
	return proto.EnumName(VulnerabilityReportFilters_Fixability_name, int32(x))
}

func (VulnerabilityReportFilters_Fixability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{1, 0}
}

type VulnerabilityReportFilters_VulnerabilitySeverity int32

const (
	VulnerabilityReportFilters_UNKNOWN_VULNERABILITY_SEVERITY   VulnerabilityReportFilters_VulnerabilitySeverity = 0
	VulnerabilityReportFilters_LOW_VULNERABILITY_SEVERITY       VulnerabilityReportFilters_VulnerabilitySeverity = 1
	VulnerabilityReportFilters_MODERATE_VULNERABILITY_SEVERITY  VulnerabilityReportFilters_VulnerabilitySeverity = 2
	VulnerabilityReportFilters_IMPORTANT_VULNERABILITY_SEVERITY VulnerabilityReportFilters_VulnerabilitySeverity = 3
	VulnerabilityReportFilters_CRITICAL_VULNERABILITY_SEVERITY  VulnerabilityReportFilters_VulnerabilitySeverity = 4
)

var VulnerabilityReportFilters_VulnerabilitySeverity_name = map[int32]string{
	0: "UNKNOWN_VULNERABILITY_SEVERITY",
	1: "LOW_VULNERABILITY_SEVERITY",
	2: "MODERATE_VULNERABILITY_SEVERITY",
	3: "IMPORTANT_VULNERABILITY_SEVERITY",
	4: "CRITICAL_VULNERABILITY_SEVERITY",
}

var VulnerabilityReportFilters_VulnerabilitySeverity_value = map[string]int32{
	"UNKNOWN_VULNERABILITY_SEVERITY":   0,
	"LOW_VULNERABILITY_SEVERITY":       1,
	"MODERATE_VULNERABILITY_SEVERITY":  2,
	"IMPORTANT_VULNERABILITY_SEVERITY": 3,
	"CRITICAL_VULNERABILITY_SEVERITY":  4,
}

func (x VulnerabilityReportFilters_VulnerabilitySeverity) String() string {
	return proto.EnumName(VulnerabilityReportFilters_VulnerabilitySeverity_name, int32(x))
}

func (VulnerabilityReportFilters_VulnerabilitySeverity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{1, 1}
}

type VulnerabilityReportFilters_ImageType int32

const (
	VulnerabilityReportFilters_DEPLOYED VulnerabilityReportFilters_ImageType = 0
	VulnerabilityReportFilters_WATCHED  VulnerabilityReportFilters_ImageType = 1
)

var VulnerabilityReportFilters_ImageType_name = map[int32]string{
	0: "DEPLOYED",
	1: "WATCHED",
}

var VulnerabilityReportFilters_ImageType_value = map[string]int32{
	"DEPLOYED": 0,
	"WATCHED":  1,
}

func (x VulnerabilityReportFilters_ImageType) String() string {
	return proto.EnumName(VulnerabilityReportFilters_ImageType_name, int32(x))
}

func (VulnerabilityReportFilters_ImageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{1, 2}
}

type ReportSchedule_IntervalType int32

const (
	ReportSchedule_UNSET   ReportSchedule_IntervalType = 0
	ReportSchedule_WEEKLY  ReportSchedule_IntervalType = 1
	ReportSchedule_MONTHLY ReportSchedule_IntervalType = 2
)

var ReportSchedule_IntervalType_name = map[int32]string{
	0: "UNSET",
	1: "WEEKLY",
	2: "MONTHLY",
}

var ReportSchedule_IntervalType_value = map[string]int32{
	"UNSET":   0,
	"WEEKLY":  1,
	"MONTHLY": 2,
}

func (x ReportSchedule_IntervalType) String() string {
	return proto.EnumName(ReportSchedule_IntervalType_name, int32(x))
}

func (ReportSchedule_IntervalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{2, 0}
}

type ReportConfiguration struct {
	Id          string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type        ReportConfiguration_ReportType `protobuf:"varint,4,opt,name=type,proto3,enum=v2.ReportConfiguration_ReportType" json:"type,omitempty"`
	// Types that are valid to be assigned to Filter:
	//	*ReportConfiguration_VulnReportFilters
	Filter               isReportConfiguration_Filter `protobuf_oneof:"filter"`
	Schedule             *ReportSchedule              `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ResourceScope        *ResourceScope               `protobuf:"bytes,7,opt,name=resource_scope,json=resourceScope,proto3" json:"resource_scope,omitempty"`
	Notifiers            []*NotifierConfiguration     `protobuf:"bytes,8,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ReportConfiguration) Reset()         { *m = ReportConfiguration{} }
func (m *ReportConfiguration) String() string { return proto.CompactTextString(m) }
func (*ReportConfiguration) ProtoMessage()    {}
func (*ReportConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{0}
}
func (m *ReportConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportConfiguration.Merge(m, src)
}
func (m *ReportConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ReportConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReportConfiguration proto.InternalMessageInfo

type isReportConfiguration_Filter interface {
	isReportConfiguration_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isReportConfiguration_Filter
}

type ReportConfiguration_VulnReportFilters struct {
	VulnReportFilters *VulnerabilityReportFilters `protobuf:"bytes,5,opt,name=vuln_report_filters,json=vulnReportFilters,proto3,oneof" json:"vuln_report_filters,omitempty"`
}

func (*ReportConfiguration_VulnReportFilters) isReportConfiguration_Filter() {}
func (m *ReportConfiguration_VulnReportFilters) Clone() isReportConfiguration_Filter {
	if m == nil {
		return nil
	}
	cloned := new(ReportConfiguration_VulnReportFilters)
	*cloned = *m

	cloned.VulnReportFilters = m.VulnReportFilters.Clone()
	return cloned
}

func (m *ReportConfiguration) GetFilter() isReportConfiguration_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReportConfiguration) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReportConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReportConfiguration) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReportConfiguration) GetType() ReportConfiguration_ReportType {
	if m != nil {
		return m.Type
	}
	return ReportConfiguration_VULNERABILITY
}

func (m *ReportConfiguration) GetVulnReportFilters() *VulnerabilityReportFilters {
	if x, ok := m.GetFilter().(*ReportConfiguration_VulnReportFilters); ok {
		return x.VulnReportFilters
	}
	return nil
}

func (m *ReportConfiguration) GetSchedule() *ReportSchedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *ReportConfiguration) GetResourceScope() *ResourceScope {
	if m != nil {
		return m.ResourceScope
	}
	return nil
}

func (m *ReportConfiguration) GetNotifiers() []*NotifierConfiguration {
	if m != nil {
		return m.Notifiers
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReportConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReportConfiguration_VulnReportFilters)(nil),
	}
}

func (m *ReportConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportConfiguration) Clone() *ReportConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(ReportConfiguration)
	*cloned = *m

	if m.Filter != nil {
		cloned.Filter = m.Filter.Clone()
	}
	cloned.Schedule = m.Schedule.Clone()
	cloned.ResourceScope = m.ResourceScope.Clone()
	if m.Notifiers != nil {
		cloned.Notifiers = make([]*NotifierConfiguration, len(m.Notifiers))
		for idx, v := range m.Notifiers {
			cloned.Notifiers[idx] = v.Clone()
		}
	}
	return cloned
}

type VulnerabilityReportFilters struct {
	Fixability VulnerabilityReportFilters_Fixability              `protobuf:"varint,1,opt,name=fixability,proto3,enum=v2.VulnerabilityReportFilters_Fixability" json:"fixability,omitempty"`
	Severities []VulnerabilityReportFilters_VulnerabilitySeverity `protobuf:"varint,2,rep,packed,name=severities,proto3,enum=v2.VulnerabilityReportFilters_VulnerabilitySeverity" json:"severities,omitempty"`
	ImageTypes []VulnerabilityReportFilters_ImageType             `protobuf:"varint,3,rep,packed,name=image_types,json=imageTypes,proto3,enum=v2.VulnerabilityReportFilters_ImageType" json:"image_types,omitempty"`
	// Types that are valid to be assigned to CvesSince:
	//	*VulnerabilityReportFilters_AllVuln
	//	*VulnerabilityReportFilters_LastSuccessfulReport
	//	*VulnerabilityReportFilters_StartDate
	CvesSince            isVulnerabilityReportFilters_CvesSince `protobuf_oneof:"cves_since"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *VulnerabilityReportFilters) Reset()         { *m = VulnerabilityReportFilters{} }
func (m *VulnerabilityReportFilters) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityReportFilters) ProtoMessage()    {}
func (*VulnerabilityReportFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{1}
}
func (m *VulnerabilityReportFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityReportFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityReportFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityReportFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityReportFilters.Merge(m, src)
}
func (m *VulnerabilityReportFilters) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityReportFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityReportFilters.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityReportFilters proto.InternalMessageInfo

type isVulnerabilityReportFilters_CvesSince interface {
	isVulnerabilityReportFilters_CvesSince()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityReportFilters_CvesSince
}

type VulnerabilityReportFilters_AllVuln struct {
	AllVuln bool `protobuf:"varint,4,opt,name=all_vuln,json=allVuln,proto3,oneof" json:"all_vuln,omitempty"`
}
type VulnerabilityReportFilters_LastSuccessfulReport struct {
	LastSuccessfulReport bool `protobuf:"varint,5,opt,name=last_successful_report,json=lastSuccessfulReport,proto3,oneof" json:"last_successful_report,omitempty"`
}
type VulnerabilityReportFilters_StartDate struct {
	StartDate *types.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
}

func (*VulnerabilityReportFilters_AllVuln) isVulnerabilityReportFilters_CvesSince() {}
func (m *VulnerabilityReportFilters_AllVuln) Clone() isVulnerabilityReportFilters_CvesSince {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReportFilters_AllVuln)
	*cloned = *m

	return cloned
}
func (*VulnerabilityReportFilters_LastSuccessfulReport) isVulnerabilityReportFilters_CvesSince() {}
func (m *VulnerabilityReportFilters_LastSuccessfulReport) Clone() isVulnerabilityReportFilters_CvesSince {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReportFilters_LastSuccessfulReport)
	*cloned = *m

	return cloned
}
func (*VulnerabilityReportFilters_StartDate) isVulnerabilityReportFilters_CvesSince() {}
func (m *VulnerabilityReportFilters_StartDate) Clone() isVulnerabilityReportFilters_CvesSince {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReportFilters_StartDate)
	*cloned = *m

	cloned.StartDate = m.StartDate.Clone()
	return cloned
}

func (m *VulnerabilityReportFilters) GetCvesSince() isVulnerabilityReportFilters_CvesSince {
	if m != nil {
		return m.CvesSince
	}
	return nil
}

func (m *VulnerabilityReportFilters) GetFixability() VulnerabilityReportFilters_Fixability {
	if m != nil {
		return m.Fixability
	}
	return VulnerabilityReportFilters_BOTH
}

func (m *VulnerabilityReportFilters) GetSeverities() []VulnerabilityReportFilters_VulnerabilitySeverity {
	if m != nil {
		return m.Severities
	}
	return nil
}

func (m *VulnerabilityReportFilters) GetImageTypes() []VulnerabilityReportFilters_ImageType {
	if m != nil {
		return m.ImageTypes
	}
	return nil
}

func (m *VulnerabilityReportFilters) GetAllVuln() bool {
	if x, ok := m.GetCvesSince().(*VulnerabilityReportFilters_AllVuln); ok {
		return x.AllVuln
	}
	return false
}

func (m *VulnerabilityReportFilters) GetLastSuccessfulReport() bool {
	if x, ok := m.GetCvesSince().(*VulnerabilityReportFilters_LastSuccessfulReport); ok {
		return x.LastSuccessfulReport
	}
	return false
}

func (m *VulnerabilityReportFilters) GetStartDate() *types.Timestamp {
	if x, ok := m.GetCvesSince().(*VulnerabilityReportFilters_StartDate); ok {
		return x.StartDate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VulnerabilityReportFilters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VulnerabilityReportFilters_AllVuln)(nil),
		(*VulnerabilityReportFilters_LastSuccessfulReport)(nil),
		(*VulnerabilityReportFilters_StartDate)(nil),
	}
}

func (m *VulnerabilityReportFilters) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityReportFilters) Clone() *VulnerabilityReportFilters {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityReportFilters)
	*cloned = *m

	if m.Severities != nil {
		cloned.Severities = make([]VulnerabilityReportFilters_VulnerabilitySeverity, len(m.Severities))
		copy(cloned.Severities, m.Severities)
	}
	if m.ImageTypes != nil {
		cloned.ImageTypes = make([]VulnerabilityReportFilters_ImageType, len(m.ImageTypes))
		copy(cloned.ImageTypes, m.ImageTypes)
	}
	if m.CvesSince != nil {
		cloned.CvesSince = m.CvesSince.Clone()
	}
	return cloned
}

type ReportSchedule struct {
	IntervalType ReportSchedule_IntervalType `protobuf:"varint,1,opt,name=interval_type,json=intervalType,proto3,enum=v2.ReportSchedule_IntervalType" json:"interval_type,omitempty"`
	Hour         int32                       `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute       int32                       `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
	// Types that are valid to be assigned to Interval:
	//	*ReportSchedule_DaysOfWeek_
	//	*ReportSchedule_DaysOfMonth_
	Interval             isReportSchedule_Interval `protobuf_oneof:"Interval"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ReportSchedule) Reset()         { *m = ReportSchedule{} }
func (m *ReportSchedule) String() string { return proto.CompactTextString(m) }
func (*ReportSchedule) ProtoMessage()    {}
func (*ReportSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{2}
}
func (m *ReportSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSchedule.Merge(m, src)
}
func (m *ReportSchedule) XXX_Size() int {
	return m.Size()
}
func (m *ReportSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSchedule proto.InternalMessageInfo

type isReportSchedule_Interval interface {
	isReportSchedule_Interval()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isReportSchedule_Interval
}

type ReportSchedule_DaysOfWeek_ struct {
	DaysOfWeek *ReportSchedule_DaysOfWeek `protobuf:"bytes,4,opt,name=days_of_week,json=daysOfWeek,proto3,oneof" json:"days_of_week,omitempty"`
}
type ReportSchedule_DaysOfMonth_ struct {
	DaysOfMonth *ReportSchedule_DaysOfMonth `protobuf:"bytes,5,opt,name=days_of_month,json=daysOfMonth,proto3,oneof" json:"days_of_month,omitempty"`
}

func (*ReportSchedule_DaysOfWeek_) isReportSchedule_Interval() {}
func (m *ReportSchedule_DaysOfWeek_) Clone() isReportSchedule_Interval {
	if m == nil {
		return nil
	}
	cloned := new(ReportSchedule_DaysOfWeek_)
	*cloned = *m

	cloned.DaysOfWeek = m.DaysOfWeek.Clone()
	return cloned
}
func (*ReportSchedule_DaysOfMonth_) isReportSchedule_Interval() {}
func (m *ReportSchedule_DaysOfMonth_) Clone() isReportSchedule_Interval {
	if m == nil {
		return nil
	}
	cloned := new(ReportSchedule_DaysOfMonth_)
	*cloned = *m

	cloned.DaysOfMonth = m.DaysOfMonth.Clone()
	return cloned
}

func (m *ReportSchedule) GetInterval() isReportSchedule_Interval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ReportSchedule) GetIntervalType() ReportSchedule_IntervalType {
	if m != nil {
		return m.IntervalType
	}
	return ReportSchedule_UNSET
}

func (m *ReportSchedule) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *ReportSchedule) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *ReportSchedule) GetDaysOfWeek() *ReportSchedule_DaysOfWeek {
	if x, ok := m.GetInterval().(*ReportSchedule_DaysOfWeek_); ok {
		return x.DaysOfWeek
	}
	return nil
}

func (m *ReportSchedule) GetDaysOfMonth() *ReportSchedule_DaysOfMonth {
	if x, ok := m.GetInterval().(*ReportSchedule_DaysOfMonth_); ok {
		return x.DaysOfMonth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReportSchedule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReportSchedule_DaysOfWeek_)(nil),
		(*ReportSchedule_DaysOfMonth_)(nil),
	}
}

func (m *ReportSchedule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportSchedule) Clone() *ReportSchedule {
	if m == nil {
		return nil
	}
	cloned := new(ReportSchedule)
	*cloned = *m

	if m.Interval != nil {
		cloned.Interval = m.Interval.Clone()
	}
	return cloned
}

// Sunday = 1, Monday = 2, .... Saturday =  7
type ReportSchedule_DaysOfWeek struct {
	Days                 []int32  `protobuf:"varint,1,rep,packed,name=days,proto3" json:"days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportSchedule_DaysOfWeek) Reset()         { *m = ReportSchedule_DaysOfWeek{} }
func (m *ReportSchedule_DaysOfWeek) String() string { return proto.CompactTextString(m) }
func (*ReportSchedule_DaysOfWeek) ProtoMessage()    {}
func (*ReportSchedule_DaysOfWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{2, 0}
}
func (m *ReportSchedule_DaysOfWeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSchedule_DaysOfWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSchedule_DaysOfWeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSchedule_DaysOfWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSchedule_DaysOfWeek.Merge(m, src)
}
func (m *ReportSchedule_DaysOfWeek) XXX_Size() int {
	return m.Size()
}
func (m *ReportSchedule_DaysOfWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSchedule_DaysOfWeek.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSchedule_DaysOfWeek proto.InternalMessageInfo

func (m *ReportSchedule_DaysOfWeek) GetDays() []int32 {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *ReportSchedule_DaysOfWeek) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportSchedule_DaysOfWeek) Clone() *ReportSchedule_DaysOfWeek {
	if m == nil {
		return nil
	}
	cloned := new(ReportSchedule_DaysOfWeek)
	*cloned = *m

	if m.Days != nil {
		cloned.Days = make([]int32, len(m.Days))
		copy(cloned.Days, m.Days)
	}
	return cloned
}

// 1 for 1st, 2 for 2nd .... 31 for 31st
type ReportSchedule_DaysOfMonth struct {
	Days                 []int32  `protobuf:"varint,1,rep,packed,name=days,proto3" json:"days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportSchedule_DaysOfMonth) Reset()         { *m = ReportSchedule_DaysOfMonth{} }
func (m *ReportSchedule_DaysOfMonth) String() string { return proto.CompactTextString(m) }
func (*ReportSchedule_DaysOfMonth) ProtoMessage()    {}
func (*ReportSchedule_DaysOfMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{2, 1}
}
func (m *ReportSchedule_DaysOfMonth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSchedule_DaysOfMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSchedule_DaysOfMonth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSchedule_DaysOfMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSchedule_DaysOfMonth.Merge(m, src)
}
func (m *ReportSchedule_DaysOfMonth) XXX_Size() int {
	return m.Size()
}
func (m *ReportSchedule_DaysOfMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSchedule_DaysOfMonth.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSchedule_DaysOfMonth proto.InternalMessageInfo

func (m *ReportSchedule_DaysOfMonth) GetDays() []int32 {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *ReportSchedule_DaysOfMonth) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportSchedule_DaysOfMonth) Clone() *ReportSchedule_DaysOfMonth {
	if m == nil {
		return nil
	}
	cloned := new(ReportSchedule_DaysOfMonth)
	*cloned = *m

	if m.Days != nil {
		cloned.Days = make([]int32, len(m.Days))
		copy(cloned.Days, m.Days)
	}
	return cloned
}

type ResourceScope struct {
	// Types that are valid to be assigned to ScopeReference:
	//	*ResourceScope_CollectionId
	ScopeReference       isResourceScope_ScopeReference `protobuf_oneof:"scope_reference"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ResourceScope) Reset()         { *m = ResourceScope{} }
func (m *ResourceScope) String() string { return proto.CompactTextString(m) }
func (*ResourceScope) ProtoMessage()    {}
func (*ResourceScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{3}
}
func (m *ResourceScope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceScope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceScope.Merge(m, src)
}
func (m *ResourceScope) XXX_Size() int {
	return m.Size()
}
func (m *ResourceScope) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceScope.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceScope proto.InternalMessageInfo

type isResourceScope_ScopeReference interface {
	isResourceScope_ScopeReference()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isResourceScope_ScopeReference
}

type ResourceScope_CollectionId struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
}

func (*ResourceScope_CollectionId) isResourceScope_ScopeReference() {}
func (m *ResourceScope_CollectionId) Clone() isResourceScope_ScopeReference {
	if m == nil {
		return nil
	}
	cloned := new(ResourceScope_CollectionId)
	*cloned = *m

	return cloned
}

func (m *ResourceScope) GetScopeReference() isResourceScope_ScopeReference {
	if m != nil {
		return m.ScopeReference
	}
	return nil
}

func (m *ResourceScope) GetCollectionId() string {
	if x, ok := m.GetScopeReference().(*ResourceScope_CollectionId); ok {
		return x.CollectionId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceScope) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceScope_CollectionId)(nil),
	}
}

func (m *ResourceScope) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResourceScope) Clone() *ResourceScope {
	if m == nil {
		return nil
	}
	cloned := new(ResourceScope)
	*cloned = *m

	if m.ScopeReference != nil {
		cloned.ScopeReference = m.ScopeReference.Clone()
	}
	return cloned
}

type NotifierConfiguration struct {
	// Types that are valid to be assigned to NotifierConfig:
	//	*NotifierConfiguration_EmailConfig
	NotifierConfig       isNotifierConfiguration_NotifierConfig `protobuf_oneof:"notifier_config"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *NotifierConfiguration) Reset()         { *m = NotifierConfiguration{} }
func (m *NotifierConfiguration) String() string { return proto.CompactTextString(m) }
func (*NotifierConfiguration) ProtoMessage()    {}
func (*NotifierConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{4}
}
func (m *NotifierConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifierConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifierConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifierConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifierConfiguration.Merge(m, src)
}
func (m *NotifierConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NotifierConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifierConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NotifierConfiguration proto.InternalMessageInfo

type isNotifierConfiguration_NotifierConfig interface {
	isNotifierConfiguration_NotifierConfig()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNotifierConfiguration_NotifierConfig
}

type NotifierConfiguration_EmailConfig struct {
	EmailConfig *EmailNotifierConfiguration `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,proto3,oneof" json:"email_config,omitempty"`
}

func (*NotifierConfiguration_EmailConfig) isNotifierConfiguration_NotifierConfig() {}
func (m *NotifierConfiguration_EmailConfig) Clone() isNotifierConfiguration_NotifierConfig {
	if m == nil {
		return nil
	}
	cloned := new(NotifierConfiguration_EmailConfig)
	*cloned = *m

	cloned.EmailConfig = m.EmailConfig.Clone()
	return cloned
}

func (m *NotifierConfiguration) GetNotifierConfig() isNotifierConfiguration_NotifierConfig {
	if m != nil {
		return m.NotifierConfig
	}
	return nil
}

func (m *NotifierConfiguration) GetEmailConfig() *EmailNotifierConfiguration {
	if x, ok := m.GetNotifierConfig().(*NotifierConfiguration_EmailConfig); ok {
		return x.EmailConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotifierConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotifierConfiguration_EmailConfig)(nil),
	}
}

func (m *NotifierConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NotifierConfiguration) Clone() *NotifierConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(NotifierConfiguration)
	*cloned = *m

	if m.NotifierConfig != nil {
		cloned.NotifierConfig = m.NotifierConfig.Clone()
	}
	return cloned
}

type EmailNotifierConfiguration struct {
	NotifierId           string   `protobuf:"bytes,1,opt,name=notifier_id,json=notifierId,proto3" json:"notifier_id,omitempty"`
	MailingLists         []string `protobuf:"bytes,2,rep,name=mailing_lists,json=mailingLists,proto3" json:"mailing_lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailNotifierConfiguration) Reset()         { *m = EmailNotifierConfiguration{} }
func (m *EmailNotifierConfiguration) String() string { return proto.CompactTextString(m) }
func (*EmailNotifierConfiguration) ProtoMessage()    {}
func (*EmailNotifierConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{5}
}
func (m *EmailNotifierConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailNotifierConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailNotifierConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailNotifierConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailNotifierConfiguration.Merge(m, src)
}
func (m *EmailNotifierConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EmailNotifierConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailNotifierConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EmailNotifierConfiguration proto.InternalMessageInfo

func (m *EmailNotifierConfiguration) GetNotifierId() string {
	if m != nil {
		return m.NotifierId
	}
	return ""
}

func (m *EmailNotifierConfiguration) GetMailingLists() []string {
	if m != nil {
		return m.MailingLists
	}
	return nil
}

func (m *EmailNotifierConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *EmailNotifierConfiguration) Clone() *EmailNotifierConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(EmailNotifierConfiguration)
	*cloned = *m

	if m.MailingLists != nil {
		cloned.MailingLists = make([]string, len(m.MailingLists))
		copy(cloned.MailingLists, m.MailingLists)
	}
	return cloned
}

type GetReportConfigurationsResponse struct {
	ReportConfigs        []*ReportConfiguration `protobuf:"bytes,1,rep,name=report_configs,json=reportConfigs,proto3" json:"report_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetReportConfigurationsResponse) Reset()         { *m = GetReportConfigurationsResponse{} }
func (m *GetReportConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetReportConfigurationsResponse) ProtoMessage()    {}
func (*GetReportConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{6}
}
func (m *GetReportConfigurationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReportConfigurationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReportConfigurationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReportConfigurationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReportConfigurationsResponse.Merge(m, src)
}
func (m *GetReportConfigurationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReportConfigurationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReportConfigurationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReportConfigurationsResponse proto.InternalMessageInfo

func (m *GetReportConfigurationsResponse) GetReportConfigs() []*ReportConfiguration {
	if m != nil {
		return m.ReportConfigs
	}
	return nil
}

func (m *GetReportConfigurationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetReportConfigurationsResponse) Clone() *GetReportConfigurationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetReportConfigurationsResponse)
	*cloned = *m

	if m.ReportConfigs != nil {
		cloned.ReportConfigs = make([]*ReportConfiguration, len(m.ReportConfigs))
		for idx, v := range m.ReportConfigs {
			cloned.ReportConfigs[idx] = v.Clone()
		}
	}
	return cloned
}

type CountReportConfigurationsResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountReportConfigurationsResponse) Reset()         { *m = CountReportConfigurationsResponse{} }
func (m *CountReportConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*CountReportConfigurationsResponse) ProtoMessage()    {}
func (*CountReportConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c7ce27d899a0e, []int{7}
}
func (m *CountReportConfigurationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountReportConfigurationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountReportConfigurationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountReportConfigurationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountReportConfigurationsResponse.Merge(m, src)
}
func (m *CountReportConfigurationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountReportConfigurationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountReportConfigurationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountReportConfigurationsResponse proto.InternalMessageInfo

func (m *CountReportConfigurationsResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountReportConfigurationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountReportConfigurationsResponse) Clone() *CountReportConfigurationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountReportConfigurationsResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("v2.ReportConfiguration_ReportType", ReportConfiguration_ReportType_name, ReportConfiguration_ReportType_value)
	proto.RegisterEnum("v2.VulnerabilityReportFilters_Fixability", VulnerabilityReportFilters_Fixability_name, VulnerabilityReportFilters_Fixability_value)
	proto.RegisterEnum("v2.VulnerabilityReportFilters_VulnerabilitySeverity", VulnerabilityReportFilters_VulnerabilitySeverity_name, VulnerabilityReportFilters_VulnerabilitySeverity_value)
	proto.RegisterEnum("v2.VulnerabilityReportFilters_ImageType", VulnerabilityReportFilters_ImageType_name, VulnerabilityReportFilters_ImageType_value)
	proto.RegisterEnum("v2.ReportSchedule_IntervalType", ReportSchedule_IntervalType_name, ReportSchedule_IntervalType_value)
	proto.RegisterType((*ReportConfiguration)(nil), "v2.ReportConfiguration")
	proto.RegisterType((*VulnerabilityReportFilters)(nil), "v2.VulnerabilityReportFilters")
	proto.RegisterType((*ReportSchedule)(nil), "v2.ReportSchedule")
	proto.RegisterType((*ReportSchedule_DaysOfWeek)(nil), "v2.ReportSchedule.DaysOfWeek")
	proto.RegisterType((*ReportSchedule_DaysOfMonth)(nil), "v2.ReportSchedule.DaysOfMonth")
	proto.RegisterType((*ResourceScope)(nil), "v2.ResourceScope")
	proto.RegisterType((*NotifierConfiguration)(nil), "v2.NotifierConfiguration")
	proto.RegisterType((*EmailNotifierConfiguration)(nil), "v2.EmailNotifierConfiguration")
	proto.RegisterType((*GetReportConfigurationsResponse)(nil), "v2.GetReportConfigurationsResponse")
	proto.RegisterType((*CountReportConfigurationsResponse)(nil), "v2.CountReportConfigurationsResponse")
}

func init() {
	proto.RegisterFile("api/v2/report_configuration_service.proto", fileDescriptor_6a1c7ce27d899a0e)
}

var fileDescriptor_6a1c7ce27d899a0e = []byte{
	// 1261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x25, 0xcb, 0x96, 0x46, 0xb2, 0x23, 0x6f, 0x4e, 0x32, 0xff, 0xfc, 0x92, 0xc2, 0x24,
	0xad, 0x13, 0xa0, 0x34, 0xc0, 0x06, 0xe9, 0x09, 0x28, 0x20, 0x59, 0x4c, 0x45, 0x44, 0x96, 0x5c,
	0x8a, 0x8e, 0x93, 0xde, 0x10, 0x34, 0xb5, 0xb2, 0x17, 0xa6, 0x48, 0x96, 0x4b, 0x29, 0x11, 0x8a,
	0xde, 0xf4, 0x09, 0x0a, 0xf4, 0xa6, 0xef, 0xd1, 0xcb, 0xbe, 0x40, 0x81, 0xde, 0x14, 0x68, 0x1f,
	0xa0, 0x48, 0xfb, 0x20, 0xc5, 0x2e, 0xa9, 0x53, 0x43, 0xc6, 0xe8, 0x1d, 0xe7, 0xf0, 0xcd, 0xb7,
	0x3b, 0x33, 0x9c, 0x59, 0x78, 0x68, 0xf9, 0xe4, 0x60, 0xaa, 0x1c, 0x04, 0xd8, 0xf7, 0x82, 0xd0,
	0xb4, 0x3d, 0x77, 0x44, 0xce, 0x27, 0x81, 0x15, 0x12, 0xcf, 0x35, 0x29, 0x0e, 0xa6, 0xc4, 0xc6,
	0xb2, 0x1f, 0x78, 0xa1, 0x87, 0xb2, 0x53, 0x45, 0xbc, 0x73, 0xee, 0x79, 0xe7, 0x0e, 0x3e, 0x60,
	0x28, 0xcb, 0x75, 0xbd, 0x90, 0x3b, 0xd2, 0xc8, 0x43, 0xac, 0xc7, 0x56, 0x2e, 0x9d, 0x4d, 0x46,
	0x07, 0x21, 0x19, 0x63, 0x1a, 0x5a, 0x63, 0x3f, 0x76, 0xb8, 0x1e, 0xb3, 0xd9, 0xde, 0x78, 0xec,
	0xb9, 0xb1, 0x72, 0x2f, 0x56, 0x52, 0x6c, 0x05, 0xf6, 0x85, 0xf9, 0xf5, 0x04, 0x07, 0xb3, 0xc8,
	0x24, 0xfd, 0x94, 0x83, 0xeb, 0x3a, 0x3f, 0xd9, 0xe1, 0xea, 0xc1, 0xd0, 0x0e, 0x64, 0xc9, 0xb0,
	0x2a, 0x34, 0x84, 0xfd, 0xa2, 0x9e, 0x25, 0x43, 0x84, 0x60, 0xc3, 0xb5, 0xc6, 0xb8, 0x9a, 0xe5,
	0x1a, 0xfe, 0x8d, 0x1a, 0x50, 0x1a, 0x62, 0x6a, 0x07, 0xc4, 0x67, 0x90, 0x6a, 0x8e, 0x9b, 0x56,
	0x55, 0xe8, 0x09, 0x6c, 0x84, 0x33, 0x1f, 0x57, 0x37, 0x1a, 0xc2, 0xfe, 0x8e, 0x22, 0xc9, 0x53,
	0x45, 0x4e, 0x20, 0x8b, 0x75, 0xc6, 0xcc, 0xc7, 0x3a, 0xf7, 0x47, 0xc7, 0x70, 0x7d, 0x3a, 0x71,
	0x5c, 0x33, 0xce, 0xd9, 0x88, 0x38, 0x21, 0x0e, 0x68, 0x35, 0xdf, 0x10, 0xf6, 0x4b, 0x4a, 0x8d,
	0x85, 0x79, 0x3e, 0x71, 0x5c, 0x1c, 0x58, 0x67, 0xc4, 0x21, 0xe1, 0x2c, 0xc2, 0x3f, 0x8d, 0xbc,
	0x3a, 0x19, 0x7d, 0x97, 0x81, 0xd7, 0x94, 0x48, 0x86, 0x02, 0xb5, 0x2f, 0xf0, 0x70, 0xe2, 0xe0,
	0xea, 0x26, 0x0f, 0x83, 0x96, 0xa7, 0x19, 0xc4, 0x16, 0x7d, 0xe1, 0x83, 0x3e, 0x86, 0x9d, 0x00,
	0x53, 0x6f, 0x12, 0xd8, 0xd8, 0xa4, 0xb6, 0xe7, 0xe3, 0xea, 0x16, 0x47, 0xed, 0x46, 0xa8, 0xc8,
	0x32, 0x60, 0x06, 0x7d, 0x3b, 0x58, 0x15, 0xd1, 0x47, 0x50, 0x74, 0xbd, 0x90, 0x8c, 0x08, 0x3b,
	0x71, 0xa1, 0x91, 0xdb, 0x2f, 0x29, 0x7b, 0x0c, 0xd4, 0x8b, 0x95, 0x6b, 0x57, 0xd7, 0x97, 0xbe,
	0x52, 0x1d, 0x60, 0x99, 0x08, 0xb4, 0x0b, 0xdb, 0xcf, 0x4f, 0xba, 0x3d, 0x55, 0x6f, 0xb6, 0xb4,
	0xae, 0x66, 0xbc, 0xac, 0x64, 0x5a, 0x05, 0xd8, 0x8c, 0x32, 0x21, 0xfd, 0x91, 0x07, 0x31, 0x3d,
	0x03, 0x48, 0x03, 0x18, 0x91, 0xd7, 0xb1, 0x89, 0x17, 0x71, 0x47, 0x79, 0xf8, 0xee, 0xac, 0xc9,
	0x4f, 0x17, 0x00, 0x7d, 0x05, 0x8c, 0x0c, 0x00, 0x8a, 0xa7, 0x38, 0x20, 0x21, 0xc1, 0xb4, 0x9a,
	0x6d, 0xe4, 0xf6, 0x77, 0x94, 0xc7, 0x57, 0x84, 0x5a, 0x33, 0x0d, 0x22, 0xf4, 0x4c, 0x5f, 0x89,
	0x83, 0x34, 0x28, 0x91, 0xb1, 0x75, 0x8e, 0x4d, 0x56, 0x6d, 0x5a, 0xcd, 0xf1, 0xb0, 0xfb, 0x57,
	0x84, 0xd5, 0x18, 0x82, 0x37, 0x09, 0x90, 0xf9, 0x27, 0x45, 0xff, 0x83, 0x82, 0xe5, 0x38, 0x26,
	0xab, 0x38, 0x6f, 0xb3, 0x42, 0x27, 0xa3, 0x6f, 0x59, 0x8e, 0xc3, 0x02, 0xa1, 0x27, 0x70, 0xcb,
	0xb1, 0x68, 0x68, 0xd2, 0x89, 0x6d, 0x63, 0x4a, 0x47, 0x13, 0x27, 0x6e, 0x29, 0xde, 0x4a, 0xcc,
	0xf5, 0x06, 0xb3, 0x0f, 0x16, 0xe6, 0x88, 0x11, 0x7d, 0x06, 0x40, 0x43, 0x2b, 0x08, 0xcd, 0xa1,
	0x15, 0xce, 0xfb, 0x45, 0x94, 0xa3, 0x7f, 0x4f, 0x9e, 0xff, 0x7b, 0xb2, 0x31, 0xff, 0xf7, 0x3a,
	0x19, 0xbd, 0xc8, 0xfd, 0xdb, 0x56, 0x88, 0xa5, 0xc7, 0x00, 0xcb, 0x64, 0xa2, 0x02, 0x6c, 0xb4,
	0xfa, 0x46, 0xa7, 0x92, 0x41, 0x25, 0xd8, 0x7a, 0xaa, 0xbd, 0x68, 0xb6, 0xba, 0x6a, 0x45, 0x40,
	0xd7, 0xa0, 0xd4, 0xeb, 0x1b, 0xe6, 0x5c, 0x91, 0x95, 0x7e, 0x15, 0xe0, 0x66, 0x62, 0xe2, 0x90,
	0x04, 0xb5, 0x93, 0xde, 0xb3, 0x5e, 0xff, 0xb4, 0x67, 0xae, 0x75, 0x84, 0x39, 0x50, 0x9f, 0xab,
	0x3a, 0x6f, 0x0d, 0x54, 0x03, 0xb1, 0xdb, 0x3f, 0x4d, 0xb3, 0x0b, 0xe8, 0x1e, 0xd4, 0x8f, 0xfa,
	0x6d, 0x55, 0x6f, 0x1a, 0x6a, 0x9a, 0x53, 0x16, 0xdd, 0x87, 0x86, 0x76, 0x74, 0xdc, 0xd7, 0x8d,
	0x66, 0xcf, 0x48, 0xf3, 0xca, 0xb1, 0x50, 0x87, 0xba, 0x66, 0x68, 0x87, 0xcd, 0x6e, 0x9a, 0xd3,
	0x86, 0xf4, 0x1e, 0x14, 0x17, 0xe5, 0x42, 0x65, 0x28, 0xb4, 0xd5, 0xe3, 0x6e, 0xff, 0xa5, 0xda,
	0x8e, 0xd2, 0x70, 0xda, 0x34, 0x0e, 0x3b, 0x6a, 0xbb, 0x22, 0xb4, 0xca, 0x00, 0xf6, 0x14, 0x53,
	0x93, 0x12, 0xd7, 0xc6, 0xd2, 0xf7, 0x39, 0xd8, 0x59, 0xff, 0x23, 0x51, 0x1b, 0xb6, 0x89, 0x1b,
	0xe2, 0x60, 0x6a, 0x39, 0xbc, 0x59, 0xe2, 0x6e, 0xae, 0xbf, 0xfd, 0xf3, 0xca, 0x5a, 0xec, 0xc7,
	0x5b, 0xa4, 0x4c, 0x56, 0x24, 0x36, 0xbd, 0x2e, 0xbc, 0x49, 0xc0, 0xa7, 0x57, 0x5e, 0xe7, 0xdf,
	0xe8, 0x16, 0x6c, 0x8e, 0x89, 0x3b, 0x09, 0x31, 0x1f, 0x5c, 0x79, 0x3d, 0x96, 0x50, 0x13, 0xca,
	0x43, 0x6b, 0x46, 0x4d, 0x6f, 0x64, 0xbe, 0xc2, 0xf8, 0x92, 0x37, 0x55, 0x49, 0xf9, 0x7f, 0x02,
	0x61, 0xdb, 0x9a, 0xd1, 0xfe, 0xe8, 0x14, 0xe3, 0xcb, 0x4e, 0x46, 0x87, 0xe1, 0x42, 0x62, 0x87,
	0x9e, 0x87, 0x18, 0x7b, 0x6e, 0x78, 0xb1, 0x3a, 0xb8, 0x12, 0x63, 0x1c, 0x31, 0xaf, 0x4e, 0x46,
	0x2f, 0x0d, 0x97, 0xa2, 0xd8, 0x00, 0x58, 0x32, 0xb0, 0x2b, 0x30, 0x63, 0x55, 0x68, 0xe4, 0xd8,
	0x15, 0xd8, 0xb7, 0x78, 0x17, 0x4a, 0x2b, 0xf8, 0x24, 0x17, 0x49, 0x81, 0xf2, 0x6a, 0x5e, 0x50,
	0x11, 0xf2, 0x27, 0xbd, 0x81, 0x6a, 0x54, 0x32, 0x08, 0x60, 0xf3, 0x54, 0x55, 0x9f, 0x75, 0x59,
	0x7f, 0x94, 0x60, 0xeb, 0xa8, 0xdf, 0x33, 0x3a, 0xdd, 0x97, 0x95, 0x6c, 0x0b, 0xa0, 0x30, 0xc7,
	0x48, 0x1a, 0x6c, 0xaf, 0x4d, 0x3b, 0xf4, 0x00, 0xb6, 0x6d, 0xcf, 0x71, 0xb0, 0xcd, 0xf7, 0xd7,
	0x7c, 0x47, 0x74, 0x32, 0x7a, 0x79, 0xa9, 0xd6, 0x86, 0xad, 0x5d, 0xb8, 0xc6, 0xc7, 0xa6, 0x19,
	0xe0, 0x11, 0x0e, 0x30, 0xab, 0xae, 0x07, 0x37, 0x13, 0x67, 0x20, 0x3a, 0x84, 0x32, 0x1e, 0x5b,
	0xc4, 0x89, 0x77, 0x23, 0x8f, 0x18, 0x67, 0x4b, 0x65, 0xfa, 0x44, 0x14, 0xcb, 0x16, 0x47, 0x45,
	0x5a, 0x46, 0x38, 0x1f, 0xa5, 0x71, 0x1c, 0xe9, 0x0c, 0xc4, 0x74, 0x3c, 0xaa, 0x43, 0x69, 0x01,
	0x58, 0xac, 0x3a, 0x98, 0xab, 0xb4, 0x21, 0xba, 0x07, 0xdb, 0x0c, 0x4d, 0xdc, 0x73, 0xd3, 0x21,
	0x34, 0x8c, 0xa6, 0x5f, 0x51, 0x2f, 0xc7, 0xca, 0x2e, 0xd3, 0x49, 0x16, 0xd4, 0xbf, 0xc0, 0x61,
	0xc2, 0x52, 0xa3, 0x3a, 0xa6, 0xbe, 0xe7, 0x52, 0x8c, 0x3e, 0x67, 0xab, 0x64, 0x65, 0xf7, 0x47,
	0x05, 0x2a, 0x29, 0xb7, 0x53, 0xd6, 0x21, 0x5b, 0x28, 0x4b, 0x25, 0x95, 0x3e, 0x81, 0xbb, 0x87,
	0xde, 0xc4, 0x7d, 0x37, 0xc9, 0x0d, 0xc8, 0xdb, 0xcc, 0x89, 0xdf, 0x23, 0xaf, 0x47, 0x82, 0xf2,
	0x73, 0x1e, 0xc4, 0x04, 0xd8, 0x20, 0x7a, 0x75, 0xa0, 0x00, 0x6e, 0x1f, 0x7b, 0x34, 0x29, 0x30,
	0x4a, 0x3b, 0x9c, 0x98, 0x66, 0x90, 0x1e, 0x7c, 0xf7, 0xfb, 0xdf, 0x3f, 0x64, 0xeb, 0x92, 0xb8,
	0x7c, 0xec, 0xd0, 0x83, 0xb5, 0xd7, 0x0e, 0xfd, 0x54, 0x78, 0x84, 0x2e, 0x61, 0xef, 0xc4, 0x67,
	0x63, 0xf5, 0x3f, 0xb1, 0x16, 0xa3, 0x66, 0xf0, 0xc3, 0x99, 0xf4, 0x88, 0xf3, 0xdc, 0x17, 0xeb,
	0xe9, 0x3c, 0x07, 0xdf, 0x90, 0xe1, 0xb7, 0x8c, 0xcc, 0x87, 0xdb, 0x29, 0xd5, 0x41, 0x65, 0x4e,
	0x65, 0xbd, 0xfa, 0x92, 0x3d, 0x86, 0xc4, 0x7b, 0x4c, 0xba, 0xa2, 0x90, 0x92, 0xc4, 0x99, 0xef,
	0xa0, 0x77, 0xdc, 0x10, 0xcd, 0x60, 0x2f, 0xb5, 0x58, 0xff, 0xe2, 0x7c, 0xc0, 0xa4, 0x2b, 0x2b,
	0x2b, 0xbd, 0xcf, 0x59, 0xef, 0xa2, 0xf4, 0xfb, 0x7e, 0xc0, 0x8b, 0x8d, 0x1c, 0xb8, 0x95, 0x7c,
	0x03, 0x54, 0x59, 0x7d, 0xb4, 0xb4, 0x66, 0x5a, 0x3b, 0xbd, 0x8a, 0x57, 0xb3, 0x45, 0xd9, 0x45,
	0x16, 0xec, 0xb5, 0xb1, 0x83, 0x93, 0xeb, 0xf8, 0x36, 0xe1, 0x4a, 0x01, 0x63, 0x8a, 0x47, 0x57,
	0x51, 0xb4, 0xe4, 0x5f, 0xde, 0xd4, 0x84, 0xdf, 0xde, 0xd4, 0x84, 0x3f, 0xdf, 0xd4, 0x84, 0x1f,
	0xff, 0xaa, 0x65, 0xa0, 0x4a, 0x3c, 0x99, 0x86, 0x96, 0x7d, 0x19, 0x78, 0xaf, 0xa3, 0x3d, 0x2c,
	0x5b, 0x3e, 0x91, 0xa7, 0xca, 0x57, 0xd9, 0xa9, 0xf2, 0x22, 0x73, 0xb6, 0xc9, 0x75, 0x1f, 0xfe,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xf8, 0xd2, 0x86, 0x74, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportConfigurationServiceClient is the client API for ReportConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ReportConfigurationServiceClient interface {
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*ReportConfiguration, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// ListReportConfigurations returns report configurations matching given query
	GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error)
	// GetReportConfiguration returns the report configuration with given ID
	GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportConfiguration, error)
	// DeleteReportConfiguration removes the report configuration with given ID
	DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type reportConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportConfigurationServiceClient(cc grpc.ClientConnInterface) ReportConfigurationServiceClient {
	return &reportConfigurationServiceClient{cc}
}

func (c *reportConfigurationServiceClient) PostReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*ReportConfiguration, error) {
	out := new(ReportConfiguration)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/PostReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) UpdateReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/UpdateReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error) {
	out := new(GetReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/GetReportConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error) {
	out := new(CountReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/CountReportConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportConfiguration, error) {
	out := new(ReportConfiguration)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/GetReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ReportConfigurationService/DeleteReportConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportConfigurationServiceServer is the server API for ReportConfigurationService service.
type ReportConfigurationServiceServer interface {
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(context.Context, *ReportConfiguration) (*ReportConfiguration, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(context.Context, *ReportConfiguration) (*Empty, error)
	// ListReportConfigurations returns report configurations matching given query
	GetReportConfigurations(context.Context, *RawQuery) (*GetReportConfigurationsResponse, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error)
	// GetReportConfiguration returns the report configuration with given ID
	GetReportConfiguration(context.Context, *ResourceByID) (*ReportConfiguration, error)
	// DeleteReportConfiguration removes the report configuration with given ID
	DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedReportConfigurationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportConfigurationServiceServer struct {
}

func (*UnimplementedReportConfigurationServiceServer) PostReportConfiguration(ctx context.Context, req *ReportConfiguration) (*ReportConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReportConfiguration not implemented")
}
func (*UnimplementedReportConfigurationServiceServer) UpdateReportConfiguration(ctx context.Context, req *ReportConfiguration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportConfiguration not implemented")
}
func (*UnimplementedReportConfigurationServiceServer) GetReportConfigurations(ctx context.Context, req *RawQuery) (*GetReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfigurations not implemented")
}
func (*UnimplementedReportConfigurationServiceServer) CountReportConfigurations(ctx context.Context, req *RawQuery) (*CountReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReportConfigurations not implemented")
}
func (*UnimplementedReportConfigurationServiceServer) GetReportConfiguration(ctx context.Context, req *ResourceByID) (*ReportConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfiguration not implemented")
}
func (*UnimplementedReportConfigurationServiceServer) DeleteReportConfiguration(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportConfiguration not implemented")
}

func RegisterReportConfigurationServiceServer(s *grpc.Server, srv ReportConfigurationServiceServer) {
	s.RegisterService(&_ReportConfigurationService_serviceDesc, srv)
}

func _ReportConfigurationService_PostReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/PostReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, req.(*ReportConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_UpdateReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/UpdateReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, req.(*ReportConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_GetReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/GetReportConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_CountReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/CountReportConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_GetReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/GetReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_DeleteReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportConfigurationService/DeleteReportConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportConfigurationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ReportConfigurationService",
	HandlerType: (*ReportConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostReportConfiguration",
			Handler:    _ReportConfigurationService_PostReportConfiguration_Handler,
		},
		{
			MethodName: "UpdateReportConfiguration",
			Handler:    _ReportConfigurationService_UpdateReportConfiguration_Handler,
		},
		{
			MethodName: "GetReportConfigurations",
			Handler:    _ReportConfigurationService_GetReportConfigurations_Handler,
		},
		{
			MethodName: "CountReportConfigurations",
			Handler:    _ReportConfigurationService_CountReportConfigurations_Handler,
		},
		{
			MethodName: "GetReportConfiguration",
			Handler:    _ReportConfigurationService_GetReportConfiguration_Handler,
		},
		{
			MethodName: "DeleteReportConfiguration",
			Handler:    _ReportConfigurationService_DeleteReportConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/report_configuration_service.proto",
}

func (m *ReportConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notifiers) > 0 {
		for iNdEx := len(m.Notifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ResourceScope != nil {
		{
			size, err := m.ResourceScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportConfiguration_VulnReportFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportConfiguration_VulnReportFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VulnReportFilters != nil {
		{
			size, err := m.VulnReportFilters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityReportFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityReportFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReportFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CvesSince != nil {
		{
			size := m.CvesSince.Size()
			i -= size
			if _, err := m.CvesSince.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ImageTypes) > 0 {
		dAtA5 := make([]byte, len(m.ImageTypes)*10)
		var j4 int
		for _, num := range m.ImageTypes {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Severities) > 0 {
		dAtA7 := make([]byte, len(m.Severities)*10)
		var j6 int
		for _, num := range m.Severities {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if m.Fixability != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.Fixability))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityReportFilters_AllVuln) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReportFilters_AllVuln) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.AllVuln {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *VulnerabilityReportFilters_LastSuccessfulReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReportFilters_LastSuccessfulReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.LastSuccessfulReport {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *VulnerabilityReportFilters_StartDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityReportFilters_StartDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReportSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interval != nil {
		{
			size := m.Interval.Size()
			i -= size
			if _, err := m.Interval.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Minute != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.Minute))
		i--
		dAtA[i] = 0x18
	}
	if m.Hour != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.Hour))
		i--
		dAtA[i] = 0x10
	}
	if m.IntervalType != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.IntervalType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportSchedule_DaysOfWeek_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSchedule_DaysOfWeek_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DaysOfWeek != nil {
		{
			size, err := m.DaysOfWeek.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReportSchedule_DaysOfMonth_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSchedule_DaysOfMonth_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DaysOfMonth != nil {
		{
			size, err := m.DaysOfMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReportSchedule_DaysOfWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSchedule_DaysOfWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSchedule_DaysOfWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Days) > 0 {
		dAtA12 := make([]byte, len(m.Days)*10)
		var j11 int
		for _, num1 := range m.Days {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportSchedule_DaysOfMonth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSchedule_DaysOfMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSchedule_DaysOfMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Days) > 0 {
		dAtA14 := make([]byte, len(m.Days)*10)
		var j13 int
		for _, num1 := range m.Days {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceScope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScopeReference != nil {
		{
			size := m.ScopeReference.Size()
			i -= size
			if _, err := m.ScopeReference.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceScope_CollectionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceScope_CollectionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CollectionId)
	copy(dAtA[i:], m.CollectionId)
	i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.CollectionId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *NotifierConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifierConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotifierConfig != nil {
		{
			size := m.NotifierConfig.Size()
			i -= size
			if _, err := m.NotifierConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifierConfiguration_EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierConfiguration_EmailConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmailConfig != nil {
		{
			size, err := m.EmailConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EmailNotifierConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailNotifierConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailNotifierConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailingLists) > 0 {
		for iNdEx := len(m.MailingLists) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MailingLists[iNdEx])
			copy(dAtA[i:], m.MailingLists[iNdEx])
			i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.MailingLists[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NotifierId) > 0 {
		i -= len(m.NotifierId)
		copy(dAtA[i:], m.NotifierId)
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(len(m.NotifierId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReportConfigurationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportConfigurationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReportConfigurationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReportConfigs) > 0 {
		for iNdEx := len(m.ReportConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReportConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountReportConfigurationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountReportConfigurationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountReportConfigurationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintReportConfigurationService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReportConfigurationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovReportConfigurationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.Type))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	if m.ResourceScope != nil {
		l = m.ResourceScope.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	if len(m.Notifiers) > 0 {
		for _, e := range m.Notifiers {
			l = e.Size()
			n += 1 + l + sovReportConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportConfiguration_VulnReportFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VulnReportFilters != nil {
		l = m.VulnReportFilters.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	return n
}
func (m *VulnerabilityReportFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fixability != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.Fixability))
	}
	if len(m.Severities) > 0 {
		l = 0
		for _, e := range m.Severities {
			l += sovReportConfigurationService(uint64(e))
		}
		n += 1 + sovReportConfigurationService(uint64(l)) + l
	}
	if len(m.ImageTypes) > 0 {
		l = 0
		for _, e := range m.ImageTypes {
			l += sovReportConfigurationService(uint64(e))
		}
		n += 1 + sovReportConfigurationService(uint64(l)) + l
	}
	if m.CvesSince != nil {
		n += m.CvesSince.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityReportFilters_AllVuln) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *VulnerabilityReportFilters_LastSuccessfulReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *VulnerabilityReportFilters_StartDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	return n
}
func (m *ReportSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntervalType != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.IntervalType))
	}
	if m.Hour != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.Hour))
	}
	if m.Minute != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.Minute))
	}
	if m.Interval != nil {
		n += m.Interval.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSchedule_DaysOfWeek_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DaysOfWeek != nil {
		l = m.DaysOfWeek.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	return n
}
func (m *ReportSchedule_DaysOfMonth_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DaysOfMonth != nil {
		l = m.DaysOfMonth.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	return n
}
func (m *ReportSchedule_DaysOfWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Days) > 0 {
		l = 0
		for _, e := range m.Days {
			l += sovReportConfigurationService(uint64(e))
		}
		n += 1 + sovReportConfigurationService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSchedule_DaysOfMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Days) > 0 {
		l = 0
		for _, e := range m.Days {
			l += sovReportConfigurationService(uint64(e))
		}
		n += 1 + sovReportConfigurationService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeReference != nil {
		n += m.ScopeReference.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceScope_CollectionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	n += 1 + l + sovReportConfigurationService(uint64(l))
	return n
}
func (m *NotifierConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifierConfig != nil {
		n += m.NotifierConfig.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifierConfiguration_EmailConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmailConfig != nil {
		l = m.EmailConfig.Size()
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	return n
}
func (m *EmailNotifierConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotifierId)
	if l > 0 {
		n += 1 + l + sovReportConfigurationService(uint64(l))
	}
	if len(m.MailingLists) > 0 {
		for _, s := range m.MailingLists {
			l = len(s)
			n += 1 + l + sovReportConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReportConfigurationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReportConfigs) > 0 {
		for _, e := range m.ReportConfigs {
			l = e.Size()
			n += 1 + l + sovReportConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountReportConfigurationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovReportConfigurationService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReportConfigurationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReportConfigurationService(x uint64) (n int) {
	return sovReportConfigurationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ReportConfiguration_ReportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VulnReportFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityReportFilters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filter = &ReportConfiguration_VulnReportFilters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &ReportSchedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceScope == nil {
				m.ResourceScope = &ResourceScope{}
			}
			if err := m.ResourceScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifiers = append(m.Notifiers, &NotifierConfiguration{})
			if err := m.Notifiers[len(m.Notifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityReportFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityReportFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityReportFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixability", wireType)
			}
			m.Fixability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fixability |= VulnerabilityReportFilters_Fixability(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v VulnerabilityReportFilters_VulnerabilitySeverity
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VulnerabilityReportFilters_VulnerabilitySeverity(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Severities = append(m.Severities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Severities) == 0 {
					m.Severities = make([]VulnerabilityReportFilters_VulnerabilitySeverity, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VulnerabilityReportFilters_VulnerabilitySeverity
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportConfigurationService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VulnerabilityReportFilters_VulnerabilitySeverity(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Severities = append(m.Severities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Severities", wireType)
			}
		case 3:
			if wireType == 0 {
				var v VulnerabilityReportFilters_ImageType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VulnerabilityReportFilters_ImageType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ImageTypes = append(m.ImageTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ImageTypes) == 0 {
					m.ImageTypes = make([]VulnerabilityReportFilters_ImageType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VulnerabilityReportFilters_ImageType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportConfigurationService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VulnerabilityReportFilters_ImageType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ImageTypes = append(m.ImageTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageTypes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllVuln", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CvesSince = &VulnerabilityReportFilters_AllVuln{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSuccessfulReport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CvesSince = &VulnerabilityReportFilters_LastSuccessfulReport{b}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CvesSince = &VulnerabilityReportFilters_StartDate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			m.IntervalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalType |= ReportSchedule_IntervalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			m.Hour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			m.Minute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysOfWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReportSchedule_DaysOfWeek{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Interval = &ReportSchedule_DaysOfWeek_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysOfMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReportSchedule_DaysOfMonth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Interval = &ReportSchedule_DaysOfMonth_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSchedule_DaysOfWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaysOfWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaysOfWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Days = append(m.Days, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Days) == 0 {
					m.Days = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportConfigurationService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Days = append(m.Days, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSchedule_DaysOfMonth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaysOfMonth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaysOfMonth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Days = append(m.Days, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportConfigurationService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReportConfigurationService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Days) == 0 {
					m.Days = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportConfigurationService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Days = append(m.Days, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceScope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceScope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceScope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeReference = &ResourceScope_CollectionId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifierConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifierConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifierConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailNotifierConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NotifierConfig = &NotifierConfiguration_EmailConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailNotifierConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailNotifierConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailNotifierConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifierId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifierId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailingLists", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailingLists = append(m.MailingLists, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReportConfigurationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigs = append(m.ReportConfigs, &ReportConfiguration{})
			if err := m.ReportConfigs[len(m.ReportConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountReportConfigurationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountReportConfigurationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountReportConfigurationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportConfigurationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportConfigurationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReportConfigurationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReportConfigurationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReportConfigurationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReportConfigurationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportConfigurationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReportConfigurationService = fmt.Errorf("proto: unexpected end of group")
)
