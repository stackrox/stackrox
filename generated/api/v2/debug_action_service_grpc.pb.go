// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/v2/debug_action_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebugActionService_RegisterAction_FullMethodName  = "/v2.DebugActionService/RegisterAction"
	DebugActionService_GetActionStatus_FullMethodName = "/v2.DebugActionService/GetActionStatus"
	DebugActionService_DeleteAction_FullMethodName    = "/v2.DebugActionService/DeleteAction"
	DebugActionService_ProceedOldest_FullMethodName   = "/v2.DebugActionService/ProceedOldest"
	DebugActionService_ProceedAll_FullMethodName      = "/v2.DebugActionService/ProceedAll"
)

// DebugActionServiceClient is the client API for DebugActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugActionServiceClient interface {
	// Register a new action to execute when the action identifier is encountered.
	// At any time, only one action can be registered per identifier.
	RegisterAction(ctx context.Context, in *DebugAction, opts ...grpc.CallOption) (*Empty, error)
	// Status of the registered action
	GetActionStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ActionStatus, error)
	// Deletes the registered action. If any routines are waiting due to this action, they are all signalled to proceed
	DeleteAction(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// Proceeds the oldest routine waiting on the given action identifier.
	// This is only relevant when registered action is of WaitAction type
	ProceedOldest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// Proceeds all routines waiting on the given action identifier.
	// This is only relevant when registered action is of WaitAction type
	ProceedAll(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type debugActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugActionServiceClient(cc grpc.ClientConnInterface) DebugActionServiceClient {
	return &debugActionServiceClient{cc}
}

func (c *debugActionServiceClient) RegisterAction(ctx context.Context, in *DebugAction, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DebugActionService_RegisterAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugActionServiceClient) GetActionStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ActionStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionStatus)
	err := c.cc.Invoke(ctx, DebugActionService_GetActionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugActionServiceClient) DeleteAction(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DebugActionService_DeleteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugActionServiceClient) ProceedOldest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DebugActionService_ProceedOldest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugActionServiceClient) ProceedAll(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DebugActionService_ProceedAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugActionServiceServer is the server API for DebugActionService service.
// All implementations should embed UnimplementedDebugActionServiceServer
// for forward compatibility.
type DebugActionServiceServer interface {
	// Register a new action to execute when the action identifier is encountered.
	// At any time, only one action can be registered per identifier.
	RegisterAction(context.Context, *DebugAction) (*Empty, error)
	// Status of the registered action
	GetActionStatus(context.Context, *ResourceByID) (*ActionStatus, error)
	// Deletes the registered action. If any routines are waiting due to this action, they are all signalled to proceed
	DeleteAction(context.Context, *ResourceByID) (*Empty, error)
	// Proceeds the oldest routine waiting on the given action identifier.
	// This is only relevant when registered action is of WaitAction type
	ProceedOldest(context.Context, *ResourceByID) (*Empty, error)
	// Proceeds all routines waiting on the given action identifier.
	// This is only relevant when registered action is of WaitAction type
	ProceedAll(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedDebugActionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebugActionServiceServer struct{}

func (UnimplementedDebugActionServiceServer) RegisterAction(context.Context, *DebugAction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAction not implemented")
}
func (UnimplementedDebugActionServiceServer) GetActionStatus(context.Context, *ResourceByID) (*ActionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionStatus not implemented")
}
func (UnimplementedDebugActionServiceServer) DeleteAction(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedDebugActionServiceServer) ProceedOldest(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProceedOldest not implemented")
}
func (UnimplementedDebugActionServiceServer) ProceedAll(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProceedAll not implemented")
}
func (UnimplementedDebugActionServiceServer) testEmbeddedByValue() {}

// UnsafeDebugActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugActionServiceServer will
// result in compilation errors.
type UnsafeDebugActionServiceServer interface {
	mustEmbedUnimplementedDebugActionServiceServer()
}

func RegisterDebugActionServiceServer(s grpc.ServiceRegistrar, srv DebugActionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebugActionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebugActionService_ServiceDesc, srv)
}

func _DebugActionService_RegisterAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugActionServiceServer).RegisterAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugActionService_RegisterAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugActionServiceServer).RegisterAction(ctx, req.(*DebugAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugActionService_GetActionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugActionServiceServer).GetActionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugActionService_GetActionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugActionServiceServer).GetActionStatus(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugActionService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugActionServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugActionService_DeleteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugActionServiceServer).DeleteAction(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugActionService_ProceedOldest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugActionServiceServer).ProceedOldest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugActionService_ProceedOldest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugActionServiceServer).ProceedOldest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugActionService_ProceedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugActionServiceServer).ProceedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugActionService_ProceedAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugActionServiceServer).ProceedAll(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugActionService_ServiceDesc is the grpc.ServiceDesc for DebugActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.DebugActionService",
	HandlerType: (*DebugActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAction",
			Handler:    _DebugActionService_RegisterAction_Handler,
		},
		{
			MethodName: "GetActionStatus",
			Handler:    _DebugActionService_GetActionStatus_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _DebugActionService_DeleteAction_Handler,
		},
		{
			MethodName: "ProceedOldest",
			Handler:    _DebugActionService_ProceedOldest_Handler,
		},
		{
			MethodName: "ProceedAll",
			Handler:    _DebugActionService_ProceedAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/debug_action_service.proto",
}
