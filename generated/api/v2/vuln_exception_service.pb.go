// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/v2/vuln_exception_service.proto

package v2

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the status of a request.
type ExceptionStatus int32

const (
	// Default request state. It indicates that the request has not been fulfilled and that an action (approve/deny) is required.
	ExceptionStatus_PENDING ExceptionStatus = 0
	// Indicates that the request has been approved by the approver.
	ExceptionStatus_APPROVED ExceptionStatus = 1
	// Indicates that the request has been denied by the approver.
	ExceptionStatus_DENIED ExceptionStatus = 2
	// Indicates that the original request was approved, but an update is still pending an approval or denial.
	ExceptionStatus_APPROVED_PENDING_UPDATE ExceptionStatus = 3
)

// Enum value maps for ExceptionStatus.
var (
	ExceptionStatus_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "DENIED",
		3: "APPROVED_PENDING_UPDATE",
	}
	ExceptionStatus_value = map[string]int32{
		"PENDING":                 0,
		"APPROVED":                1,
		"DENIED":                  2,
		"APPROVED_PENDING_UPDATE": 3,
	}
)

func (x ExceptionStatus) Enum() *ExceptionStatus {
	p := new(ExceptionStatus)
	*p = x
	return p
}

func (x ExceptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExceptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vuln_exception_service_proto_enumTypes[0].Descriptor()
}

func (ExceptionStatus) Type() protoreflect.EnumType {
	return &file_api_v2_vuln_exception_service_proto_enumTypes[0]
}

func (x ExceptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ExceptionExpiry_ExpiryType int32

const (
	ExceptionExpiry_TIME            ExceptionExpiry_ExpiryType = 0
	ExceptionExpiry_ALL_CVE_FIXABLE ExceptionExpiry_ExpiryType = 1
	ExceptionExpiry_ANY_CVE_FIXABLE ExceptionExpiry_ExpiryType = 2
)

// Enum value maps for ExceptionExpiry_ExpiryType.
var (
	ExceptionExpiry_ExpiryType_name = map[int32]string{
		0: "TIME",
		1: "ALL_CVE_FIXABLE",
		2: "ANY_CVE_FIXABLE",
	}
	ExceptionExpiry_ExpiryType_value = map[string]int32{
		"TIME":            0,
		"ALL_CVE_FIXABLE": 1,
		"ANY_CVE_FIXABLE": 2,
	}
)

func (x ExceptionExpiry_ExpiryType) Enum() *ExceptionExpiry_ExpiryType {
	p := new(ExceptionExpiry_ExpiryType)
	*p = x
	return p
}

func (x ExceptionExpiry_ExpiryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExceptionExpiry_ExpiryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_vuln_exception_service_proto_enumTypes[1].Descriptor()
}

func (ExceptionExpiry_ExpiryType) Type() protoreflect.EnumType {
	return &file_api_v2_vuln_exception_service_proto_enumTypes[1]
}

func (x ExceptionExpiry_ExpiryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Comment struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Message     *string                `protobuf:"bytes,2,opt,name=message"`
	xxx_hidden_User        *SlimUser              `protobuf:"bytes,3,opt,name=user"`
	xxx_hidden_CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Comment) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *Comment) GetMessage() string {
	if x != nil {
		if x.xxx_hidden_Message != nil {
			return *x.xxx_hidden_Message
		}
		return ""
	}
	return ""
}

func (x *Comment) GetUser() *SlimUser {
	if x != nil {
		return x.xxx_hidden_User
	}
	return nil
}

func (x *Comment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *Comment) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Comment) SetMessage(v string) {
	x.xxx_hidden_Message = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Comment) SetUser(v *SlimUser) {
	x.xxx_hidden_User = v
}

func (x *Comment) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *Comment) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Comment) HasMessage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Comment) HasUser() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_User != nil
}

func (x *Comment) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *Comment) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *Comment) ClearMessage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Message = nil
}

func (x *Comment) ClearUser() {
	x.xxx_hidden_User = nil
}

func (x *Comment) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

type Comment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        *string
	Message   *string
	User      *SlimUser
	CreatedAt *timestamppb.Timestamp
}

func (b0 Comment_builder) Build() *Comment {
	m0 := &Comment{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = b.Id
	}
	if b.Message != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Message = b.Message
	}
	x.xxx_hidden_User = b.User
	x.xxx_hidden_CreatedAt = b.CreatedAt
	return m0
}

type ExceptionExpiry struct {
	state                  protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_ExpiryType  ExceptionExpiry_ExpiryType `protobuf:"varint,1,opt,name=expiry_type,json=expiryType,enum=v2.ExceptionExpiry_ExpiryType"`
	xxx_hidden_ExpiresOn   *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExceptionExpiry) Reset() {
	*x = ExceptionExpiry{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExceptionExpiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptionExpiry) ProtoMessage() {}

func (x *ExceptionExpiry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExceptionExpiry) GetExpiryType() ExceptionExpiry_ExpiryType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_ExpiryType
		}
	}
	return ExceptionExpiry_TIME
}

func (x *ExceptionExpiry) GetExpiresOn() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ExpiresOn
	}
	return nil
}

func (x *ExceptionExpiry) SetExpiryType(v ExceptionExpiry_ExpiryType) {
	x.xxx_hidden_ExpiryType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ExceptionExpiry) SetExpiresOn(v *timestamppb.Timestamp) {
	x.xxx_hidden_ExpiresOn = v
}

func (x *ExceptionExpiry) HasExpiryType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ExceptionExpiry) HasExpiresOn() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExpiresOn != nil
}

func (x *ExceptionExpiry) ClearExpiryType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ExpiryType = ExceptionExpiry_TIME
}

func (x *ExceptionExpiry) ClearExpiresOn() {
	x.xxx_hidden_ExpiresOn = nil
}

type ExceptionExpiry_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// This field can be used only for deferral requests. It indicates the type of expiry set for the request.
	// `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
	// `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.
	// `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
	ExpiryType *ExceptionExpiry_ExpiryType
	// Indicates the timestamp when the exception expires. This field is REQUIRED only if the expiry type is set to TIME.
	ExpiresOn *timestamppb.Timestamp
}

func (b0 ExceptionExpiry_builder) Build() *ExceptionExpiry {
	m0 := &ExceptionExpiry{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ExpiryType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_ExpiryType = *b.ExpiryType
	}
	x.xxx_hidden_ExpiresOn = b.ExpiresOn
	return m0
}

type DeferralRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Expiry *ExceptionExpiry       `protobuf:"bytes,1,opt,name=expiry"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeferralRequest) Reset() {
	*x = DeferralRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeferralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeferralRequest) ProtoMessage() {}

func (x *DeferralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeferralRequest) GetExpiry() *ExceptionExpiry {
	if x != nil {
		return x.xxx_hidden_Expiry
	}
	return nil
}

func (x *DeferralRequest) SetExpiry(v *ExceptionExpiry) {
	x.xxx_hidden_Expiry = v
}

func (x *DeferralRequest) HasExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Expiry != nil
}

func (x *DeferralRequest) ClearExpiry() {
	x.xxx_hidden_Expiry = nil
}

type DeferralRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Expiry *ExceptionExpiry
}

func (b0 DeferralRequest_builder) Build() *DeferralRequest {
	m0 := &DeferralRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Expiry = b.Expiry
	return m0
}

type FalsePositiveRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FalsePositiveRequest) Reset() {
	*x = FalsePositiveRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FalsePositiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FalsePositiveRequest) ProtoMessage() {}

func (x *FalsePositiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type FalsePositiveRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 FalsePositiveRequest_builder) Build() *FalsePositiveRequest {
	m0 := &FalsePositiveRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Next available tag: 16
// VulnerabilityException represents a vulnerability exception such as deferral and false-positive.
type VulnerabilityException struct {
	state                  protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                             `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name        *string                             `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_TargetState VulnerabilityState                  `protobuf:"varint,3,opt,name=target_state,json=targetState,enum=v2.VulnerabilityState"`
	xxx_hidden_Status      ExceptionStatus                     `protobuf:"varint,4,opt,name=status,enum=v2.ExceptionStatus"`
	xxx_hidden_Expired     bool                                `protobuf:"varint,5,opt,name=expired"`
	xxx_hidden_Requester   *SlimUser                           `protobuf:"bytes,6,opt,name=requester"`
	xxx_hidden_Approvers   *[]*SlimUser                        `protobuf:"bytes,7,rep,name=approvers"`
	xxx_hidden_CreatedAt   *timestamppb.Timestamp              `protobuf:"bytes,8,opt,name=created_at,json=createdAt"`
	xxx_hidden_LastUpdated *timestamppb.Timestamp              `protobuf:"bytes,9,opt,name=last_updated,json=lastUpdated"`
	xxx_hidden_Comments    *[]*Comment                         `protobuf:"bytes,10,rep,name=comments"`
	xxx_hidden_Scope       *VulnerabilityException_Scope       `protobuf:"bytes,11,opt,name=scope"`
	xxx_hidden_Req         isVulnerabilityException_Req        `protobuf_oneof:"req"`
	xxx_hidden_Cves        []string                            `protobuf:"bytes,14,rep,name=cves"`
	xxx_hidden_UpdatedReq  isVulnerabilityException_UpdatedReq `protobuf_oneof:"updated_req"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VulnerabilityException) Reset() {
	*x = VulnerabilityException{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityException) ProtoMessage() {}

func (x *VulnerabilityException) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VulnerabilityException) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *VulnerabilityException) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *VulnerabilityException) GetTargetState() VulnerabilityState {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_TargetState
		}
	}
	return VulnerabilityState_OBSERVED
}

func (x *VulnerabilityException) GetStatus() ExceptionStatus {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_Status
		}
	}
	return ExceptionStatus_PENDING
}

func (x *VulnerabilityException) GetExpired() bool {
	if x != nil {
		return x.xxx_hidden_Expired
	}
	return false
}

func (x *VulnerabilityException) GetRequester() *SlimUser {
	if x != nil {
		return x.xxx_hidden_Requester
	}
	return nil
}

func (x *VulnerabilityException) GetApprovers() []*SlimUser {
	if x != nil {
		if x.xxx_hidden_Approvers != nil {
			return *x.xxx_hidden_Approvers
		}
	}
	return nil
}

func (x *VulnerabilityException) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *VulnerabilityException) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_LastUpdated
	}
	return nil
}

func (x *VulnerabilityException) GetComments() []*Comment {
	if x != nil {
		if x.xxx_hidden_Comments != nil {
			return *x.xxx_hidden_Comments
		}
	}
	return nil
}

func (x *VulnerabilityException) GetScope() *VulnerabilityException_Scope {
	if x != nil {
		return x.xxx_hidden_Scope
	}
	return nil
}

func (x *VulnerabilityException) GetDeferralRequest() *DeferralRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Req.(*vulnerabilityException_DeferralRequest); ok {
			return x.DeferralRequest
		}
	}
	return nil
}

func (x *VulnerabilityException) GetFalsePositiveRequest() *FalsePositiveRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Req.(*vulnerabilityException_FalsePositiveRequest); ok {
			return x.FalsePositiveRequest
		}
	}
	return nil
}

func (x *VulnerabilityException) GetCves() []string {
	if x != nil {
		return x.xxx_hidden_Cves
	}
	return nil
}

func (x *VulnerabilityException) GetDeferralUpdate() *DeferralUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_DeferralUpdate); ok {
			return x.DeferralUpdate
		}
	}
	return nil
}

func (x *VulnerabilityException) GetFalsePositiveUpdate() *FalsePositiveUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_FalsePositiveUpdate); ok {
			return x.FalsePositiveUpdate
		}
	}
	return nil
}

func (x *VulnerabilityException) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 14)
}

func (x *VulnerabilityException) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 14)
}

func (x *VulnerabilityException) SetTargetState(v VulnerabilityState) {
	x.xxx_hidden_TargetState = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 14)
}

func (x *VulnerabilityException) SetStatus(v ExceptionStatus) {
	x.xxx_hidden_Status = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 14)
}

func (x *VulnerabilityException) SetExpired(v bool) {
	x.xxx_hidden_Expired = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 14)
}

func (x *VulnerabilityException) SetRequester(v *SlimUser) {
	x.xxx_hidden_Requester = v
}

func (x *VulnerabilityException) SetApprovers(v []*SlimUser) {
	x.xxx_hidden_Approvers = &v
}

func (x *VulnerabilityException) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *VulnerabilityException) SetLastUpdated(v *timestamppb.Timestamp) {
	x.xxx_hidden_LastUpdated = v
}

func (x *VulnerabilityException) SetComments(v []*Comment) {
	x.xxx_hidden_Comments = &v
}

func (x *VulnerabilityException) SetScope(v *VulnerabilityException_Scope) {
	x.xxx_hidden_Scope = v
}

func (x *VulnerabilityException) SetDeferralRequest(v *DeferralRequest) {
	if v == nil {
		x.xxx_hidden_Req = nil
		return
	}
	x.xxx_hidden_Req = &vulnerabilityException_DeferralRequest{v}
}

func (x *VulnerabilityException) SetFalsePositiveRequest(v *FalsePositiveRequest) {
	if v == nil {
		x.xxx_hidden_Req = nil
		return
	}
	x.xxx_hidden_Req = &vulnerabilityException_FalsePositiveRequest{v}
}

func (x *VulnerabilityException) SetCves(v []string) {
	x.xxx_hidden_Cves = v
}

func (x *VulnerabilityException) SetDeferralUpdate(v *DeferralUpdate) {
	if v == nil {
		x.xxx_hidden_UpdatedReq = nil
		return
	}
	x.xxx_hidden_UpdatedReq = &vulnerabilityException_DeferralUpdate{v}
}

func (x *VulnerabilityException) SetFalsePositiveUpdate(v *FalsePositiveUpdate) {
	if v == nil {
		x.xxx_hidden_UpdatedReq = nil
		return
	}
	x.xxx_hidden_UpdatedReq = &vulnerabilityException_FalsePositiveUpdate{v}
}

func (x *VulnerabilityException) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *VulnerabilityException) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *VulnerabilityException) HasTargetState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *VulnerabilityException) HasStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *VulnerabilityException) HasExpired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *VulnerabilityException) HasRequester() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Requester != nil
}

func (x *VulnerabilityException) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *VulnerabilityException) HasLastUpdated() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastUpdated != nil
}

func (x *VulnerabilityException) HasScope() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Scope != nil
}

func (x *VulnerabilityException) HasReq() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Req != nil
}

func (x *VulnerabilityException) HasDeferralRequest() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Req.(*vulnerabilityException_DeferralRequest)
	return ok
}

func (x *VulnerabilityException) HasFalsePositiveRequest() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Req.(*vulnerabilityException_FalsePositiveRequest)
	return ok
}

func (x *VulnerabilityException) HasUpdatedReq() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_UpdatedReq != nil
}

func (x *VulnerabilityException) HasDeferralUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_DeferralUpdate)
	return ok
}

func (x *VulnerabilityException) HasFalsePositiveUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_FalsePositiveUpdate)
	return ok
}

func (x *VulnerabilityException) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *VulnerabilityException) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *VulnerabilityException) ClearTargetState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_TargetState = VulnerabilityState_OBSERVED
}

func (x *VulnerabilityException) ClearStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Status = ExceptionStatus_PENDING
}

func (x *VulnerabilityException) ClearExpired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Expired = false
}

func (x *VulnerabilityException) ClearRequester() {
	x.xxx_hidden_Requester = nil
}

func (x *VulnerabilityException) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

func (x *VulnerabilityException) ClearLastUpdated() {
	x.xxx_hidden_LastUpdated = nil
}

func (x *VulnerabilityException) ClearScope() {
	x.xxx_hidden_Scope = nil
}

func (x *VulnerabilityException) ClearReq() {
	x.xxx_hidden_Req = nil
}

func (x *VulnerabilityException) ClearDeferralRequest() {
	if _, ok := x.xxx_hidden_Req.(*vulnerabilityException_DeferralRequest); ok {
		x.xxx_hidden_Req = nil
	}
}

func (x *VulnerabilityException) ClearFalsePositiveRequest() {
	if _, ok := x.xxx_hidden_Req.(*vulnerabilityException_FalsePositiveRequest); ok {
		x.xxx_hidden_Req = nil
	}
}

func (x *VulnerabilityException) ClearUpdatedReq() {
	x.xxx_hidden_UpdatedReq = nil
}

func (x *VulnerabilityException) ClearDeferralUpdate() {
	if _, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_DeferralUpdate); ok {
		x.xxx_hidden_UpdatedReq = nil
	}
}

func (x *VulnerabilityException) ClearFalsePositiveUpdate() {
	if _, ok := x.xxx_hidden_UpdatedReq.(*vulnerabilityException_FalsePositiveUpdate); ok {
		x.xxx_hidden_UpdatedReq = nil
	}
}

const VulnerabilityException_Req_not_set_case case_VulnerabilityException_Req = 0
const VulnerabilityException_DeferralRequest_case case_VulnerabilityException_Req = 12
const VulnerabilityException_FalsePositiveRequest_case case_VulnerabilityException_Req = 13

func (x *VulnerabilityException) WhichReq() case_VulnerabilityException_Req {
	if x == nil {
		return VulnerabilityException_Req_not_set_case
	}
	switch x.xxx_hidden_Req.(type) {
	case *vulnerabilityException_DeferralRequest:
		return VulnerabilityException_DeferralRequest_case
	case *vulnerabilityException_FalsePositiveRequest:
		return VulnerabilityException_FalsePositiveRequest_case
	default:
		return VulnerabilityException_Req_not_set_case
	}
}

const VulnerabilityException_UpdatedReq_not_set_case case_VulnerabilityException_UpdatedReq = 0
const VulnerabilityException_DeferralUpdate_case case_VulnerabilityException_UpdatedReq = 15
const VulnerabilityException_FalsePositiveUpdate_case case_VulnerabilityException_UpdatedReq = 16

func (x *VulnerabilityException) WhichUpdatedReq() case_VulnerabilityException_UpdatedReq {
	if x == nil {
		return VulnerabilityException_UpdatedReq_not_set_case
	}
	switch x.xxx_hidden_UpdatedReq.(type) {
	case *vulnerabilityException_DeferralUpdate:
		return VulnerabilityException_DeferralUpdate_case
	case *vulnerabilityException_FalsePositiveUpdate:
		return VulnerabilityException_FalsePositiveUpdate_case
	default:
		return VulnerabilityException_UpdatedReq_not_set_case
	}
}

type VulnerabilityException_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id *string
	// Auto-generated display name of the exception.
	Name *string
	// Indicates the state that the vulnerabilities will move to once the exception is enforced.
	TargetState *VulnerabilityState
	// Indicates the status of the exception.
	Status *ExceptionStatus
	// If set to `true`, this field indicates that the exception is no longer enforced.
	Expired     *bool
	Requester   *SlimUser
	Approvers   []*SlimUser
	CreatedAt   *timestamppb.Timestamp
	LastUpdated *timestamppb.Timestamp
	Comments    []*Comment
	// Indicates the scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope
	// Fields of oneof xxx_hidden_Req:
	DeferralRequest      *DeferralRequest
	FalsePositiveRequest *FalsePositiveRequest
	// -- end of xxx_hidden_Req
	// Indicates the CVEs to which the exception applies.
	Cves []string
	// Fields of oneof xxx_hidden_UpdatedReq:
	// If set, indicates the update to be applied to the original deferral exception.
	DeferralUpdate *DeferralUpdate
	// If set, indicates the update to be applied to the original false-positive exception.
	FalsePositiveUpdate *FalsePositiveUpdate
	// -- end of xxx_hidden_UpdatedReq
}

func (b0 VulnerabilityException_builder) Build() *VulnerabilityException {
	m0 := &VulnerabilityException{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 14)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 14)
		x.xxx_hidden_Name = b.Name
	}
	if b.TargetState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 14)
		x.xxx_hidden_TargetState = *b.TargetState
	}
	if b.Status != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 14)
		x.xxx_hidden_Status = *b.Status
	}
	if b.Expired != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 14)
		x.xxx_hidden_Expired = *b.Expired
	}
	x.xxx_hidden_Requester = b.Requester
	x.xxx_hidden_Approvers = &b.Approvers
	x.xxx_hidden_CreatedAt = b.CreatedAt
	x.xxx_hidden_LastUpdated = b.LastUpdated
	x.xxx_hidden_Comments = &b.Comments
	x.xxx_hidden_Scope = b.Scope
	if b.DeferralRequest != nil {
		x.xxx_hidden_Req = &vulnerabilityException_DeferralRequest{b.DeferralRequest}
	}
	if b.FalsePositiveRequest != nil {
		x.xxx_hidden_Req = &vulnerabilityException_FalsePositiveRequest{b.FalsePositiveRequest}
	}
	x.xxx_hidden_Cves = b.Cves
	if b.DeferralUpdate != nil {
		x.xxx_hidden_UpdatedReq = &vulnerabilityException_DeferralUpdate{b.DeferralUpdate}
	}
	if b.FalsePositiveUpdate != nil {
		x.xxx_hidden_UpdatedReq = &vulnerabilityException_FalsePositiveUpdate{b.FalsePositiveUpdate}
	}
	return m0
}

type case_VulnerabilityException_Req protoreflect.FieldNumber

func (x case_VulnerabilityException_Req) String() string {
	md := file_api_v2_vuln_exception_service_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type case_VulnerabilityException_UpdatedReq protoreflect.FieldNumber

func (x case_VulnerabilityException_UpdatedReq) String() string {
	md := file_api_v2_vuln_exception_service_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isVulnerabilityException_Req interface {
	isVulnerabilityException_Req()
}

type vulnerabilityException_DeferralRequest struct {
	DeferralRequest *DeferralRequest `protobuf:"bytes,12,opt,name=deferral_request,json=deferralRequest,oneof"`
}

type vulnerabilityException_FalsePositiveRequest struct {
	FalsePositiveRequest *FalsePositiveRequest `protobuf:"bytes,13,opt,name=false_positive_request,json=falsePositiveRequest,oneof"`
}

func (*vulnerabilityException_DeferralRequest) isVulnerabilityException_Req() {}

func (*vulnerabilityException_FalsePositiveRequest) isVulnerabilityException_Req() {}

type isVulnerabilityException_UpdatedReq interface {
	isVulnerabilityException_UpdatedReq()
}

type vulnerabilityException_DeferralUpdate struct {
	// If set, indicates the update to be applied to the original deferral exception.
	DeferralUpdate *DeferralUpdate `protobuf:"bytes,15,opt,name=deferral_update,json=deferralUpdate,oneof"`
}

type vulnerabilityException_FalsePositiveUpdate struct {
	// If set, indicates the update to be applied to the original false-positive exception.
	FalsePositiveUpdate *FalsePositiveUpdate `protobuf:"bytes,16,opt,name=false_positive_update,json=falsePositiveUpdate,oneof"`
}

func (*vulnerabilityException_DeferralUpdate) isVulnerabilityException_UpdatedReq() {}

func (*vulnerabilityException_FalsePositiveUpdate) isVulnerabilityException_UpdatedReq() {}

type DeferralUpdate struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cves   []string               `protobuf:"bytes,1,rep,name=cves"`
	xxx_hidden_Expiry *ExceptionExpiry       `protobuf:"bytes,2,opt,name=expiry"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeferralUpdate) Reset() {
	*x = DeferralUpdate{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeferralUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeferralUpdate) ProtoMessage() {}

func (x *DeferralUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeferralUpdate) GetCves() []string {
	if x != nil {
		return x.xxx_hidden_Cves
	}
	return nil
}

func (x *DeferralUpdate) GetExpiry() *ExceptionExpiry {
	if x != nil {
		return x.xxx_hidden_Expiry
	}
	return nil
}

func (x *DeferralUpdate) SetCves(v []string) {
	x.xxx_hidden_Cves = v
}

func (x *DeferralUpdate) SetExpiry(v *ExceptionExpiry) {
	x.xxx_hidden_Expiry = v
}

func (x *DeferralUpdate) HasExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Expiry != nil
}

func (x *DeferralUpdate) ClearExpiry() {
	x.xxx_hidden_Expiry = nil
}

type DeferralUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Use this field to update the CVEs of a deferral exception.
	Cves []string
	// Use this field to update the exception expiry.
	Expiry *ExceptionExpiry
}

func (b0 DeferralUpdate_builder) Build() *DeferralUpdate {
	m0 := &DeferralUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cves = b.Cves
	x.xxx_hidden_Expiry = b.Expiry
	return m0
}

type FalsePositiveUpdate struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cves []string               `protobuf:"bytes,1,rep,name=cves"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FalsePositiveUpdate) Reset() {
	*x = FalsePositiveUpdate{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FalsePositiveUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FalsePositiveUpdate) ProtoMessage() {}

func (x *FalsePositiveUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FalsePositiveUpdate) GetCves() []string {
	if x != nil {
		return x.xxx_hidden_Cves
	}
	return nil
}

func (x *FalsePositiveUpdate) SetCves(v []string) {
	x.xxx_hidden_Cves = v
}

type FalsePositiveUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Use this field to update the CVEs of a false-positive exception.
	Cves []string
}

func (b0 FalsePositiveUpdate_builder) Build() *FalsePositiveUpdate {
	m0 := &FalsePositiveUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cves = b.Cves
	return m0
}

type GetVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetVulnerabilityExceptionResponse) Reset() {
	*x = GetVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *GetVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *GetVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *GetVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *GetVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type GetVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 GetVulnerabilityExceptionResponse_builder) Build() *GetVulnerabilityExceptionResponse {
	m0 := &GetVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type ListVulnerabilityExceptionsResponse struct {
	state                 protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Exceptions *[]*VulnerabilityException `protobuf:"bytes,1,rep,name=exceptions"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListVulnerabilityExceptionsResponse) Reset() {
	*x = ListVulnerabilityExceptionsResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVulnerabilityExceptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVulnerabilityExceptionsResponse) ProtoMessage() {}

func (x *ListVulnerabilityExceptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListVulnerabilityExceptionsResponse) GetExceptions() []*VulnerabilityException {
	if x != nil {
		if x.xxx_hidden_Exceptions != nil {
			return *x.xxx_hidden_Exceptions
		}
	}
	return nil
}

func (x *ListVulnerabilityExceptionsResponse) SetExceptions(v []*VulnerabilityException) {
	x.xxx_hidden_Exceptions = &v
}

type ListVulnerabilityExceptionsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exceptions []*VulnerabilityException
}

func (b0 ListVulnerabilityExceptionsResponse_builder) Build() *ListVulnerabilityExceptionsResponse {
	m0 := &ListVulnerabilityExceptionsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exceptions = &b.Exceptions
	return m0
}

// next available tag: 6
type CreateDeferVulnerabilityExceptionRequest struct {
	state                      protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Cves            []string                      `protobuf:"bytes,1,rep,name=cves"`
	xxx_hidden_Comment         *string                       `protobuf:"bytes,2,opt,name=comment"`
	xxx_hidden_Scope           *VulnerabilityException_Scope `protobuf:"bytes,3,opt,name=scope"`
	xxx_hidden_ExceptionExpiry *ExceptionExpiry              `protobuf:"bytes,4,opt,name=exception_expiry,json=exceptionExpiry"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CreateDeferVulnerabilityExceptionRequest) Reset() {
	*x = CreateDeferVulnerabilityExceptionRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeferVulnerabilityExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeferVulnerabilityExceptionRequest) ProtoMessage() {}

func (x *CreateDeferVulnerabilityExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateDeferVulnerabilityExceptionRequest) GetCves() []string {
	if x != nil {
		return x.xxx_hidden_Cves
	}
	return nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *CreateDeferVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if x != nil {
		return x.xxx_hidden_Scope
	}
	return nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) GetExceptionExpiry() *ExceptionExpiry {
	if x != nil {
		return x.xxx_hidden_ExceptionExpiry
	}
	return nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) SetCves(v []string) {
	x.xxx_hidden_Cves = v
}

func (x *CreateDeferVulnerabilityExceptionRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *CreateDeferVulnerabilityExceptionRequest) SetScope(v *VulnerabilityException_Scope) {
	x.xxx_hidden_Scope = v
}

func (x *CreateDeferVulnerabilityExceptionRequest) SetExceptionExpiry(v *ExceptionExpiry) {
	x.xxx_hidden_ExceptionExpiry = v
}

func (x *CreateDeferVulnerabilityExceptionRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateDeferVulnerabilityExceptionRequest) HasScope() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Scope != nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) HasExceptionExpiry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExceptionExpiry != nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Comment = nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) ClearScope() {
	x.xxx_hidden_Scope = nil
}

func (x *CreateDeferVulnerabilityExceptionRequest) ClearExceptionExpiry() {
	x.xxx_hidden_ExceptionExpiry = nil
}

type CreateDeferVulnerabilityExceptionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. The CVEs to which the exception should be applied.
	Cves []string
	// REQUIRED. The rationale for creating the exception.
	Comment *string
	// REQUIRED. The scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope
	// REQUIRED. The type of expiry to be enforced for the request.
	ExceptionExpiry *ExceptionExpiry
}

func (b0 CreateDeferVulnerabilityExceptionRequest_builder) Build() *CreateDeferVulnerabilityExceptionRequest {
	m0 := &CreateDeferVulnerabilityExceptionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cves = b.Cves
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Comment = b.Comment
	}
	x.xxx_hidden_Scope = b.Scope
	x.xxx_hidden_ExceptionExpiry = b.ExceptionExpiry
	return m0
}

type CreateDeferVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateDeferVulnerabilityExceptionResponse) Reset() {
	*x = CreateDeferVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeferVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeferVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *CreateDeferVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateDeferVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *CreateDeferVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *CreateDeferVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *CreateDeferVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type CreateDeferVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 CreateDeferVulnerabilityExceptionResponse_builder) Build() *CreateDeferVulnerabilityExceptionResponse {
	m0 := &CreateDeferVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type CreateFalsePositiveVulnerabilityExceptionRequest struct {
	state                  protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Cves        []string                      `protobuf:"bytes,1,rep,name=cves"`
	xxx_hidden_Scope       *VulnerabilityException_Scope `protobuf:"bytes,2,opt,name=scope"`
	xxx_hidden_Comment     *string                       `protobuf:"bytes,3,opt,name=comment"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) Reset() {
	*x = CreateFalsePositiveVulnerabilityExceptionRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFalsePositiveVulnerabilityExceptionRequest) ProtoMessage() {}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) GetCves() []string {
	if x != nil {
		return x.xxx_hidden_Cves
	}
	return nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if x != nil {
		return x.xxx_hidden_Scope
	}
	return nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) SetCves(v []string) {
	x.xxx_hidden_Cves = v
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) SetScope(v *VulnerabilityException_Scope) {
	x.xxx_hidden_Scope = v
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) HasScope() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Scope != nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) ClearScope() {
	x.xxx_hidden_Scope = nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Comment = nil
}

type CreateFalsePositiveVulnerabilityExceptionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. The CVEs to which the exception should be applied.
	Cves []string
	// REQUIRED. The scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope
	// REQUIRED. The rationale for creating the exception.
	Comment *string
}

func (b0 CreateFalsePositiveVulnerabilityExceptionRequest_builder) Build() *CreateFalsePositiveVulnerabilityExceptionRequest {
	m0 := &CreateFalsePositiveVulnerabilityExceptionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cves = b.Cves
	x.xxx_hidden_Scope = b.Scope
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Comment = b.Comment
	}
	return m0
}

type CreateFalsePositiveVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) Reset() {
	*x = CreateFalsePositiveVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFalsePositiveVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *CreateFalsePositiveVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type CreateFalsePositiveVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 CreateFalsePositiveVulnerabilityExceptionResponse_builder) Build() *CreateFalsePositiveVulnerabilityExceptionResponse {
	m0 := &CreateFalsePositiveVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type ApproveVulnerabilityExceptionRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Comment     *string                `protobuf:"bytes,2,opt,name=comment"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ApproveVulnerabilityExceptionRequest) Reset() {
	*x = ApproveVulnerabilityExceptionRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveVulnerabilityExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveVulnerabilityExceptionRequest) ProtoMessage() {}

func (x *ApproveVulnerabilityExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApproveVulnerabilityExceptionRequest) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ApproveVulnerabilityExceptionRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *ApproveVulnerabilityExceptionRequest) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ApproveVulnerabilityExceptionRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ApproveVulnerabilityExceptionRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApproveVulnerabilityExceptionRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ApproveVulnerabilityExceptionRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ApproveVulnerabilityExceptionRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Comment = nil
}

type ApproveVulnerabilityExceptionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. The ID of vulnerability exception to be approved.
	Id *string
	// REQUIRED. The rationale for approving the exception.
	Comment *string
}

func (b0 ApproveVulnerabilityExceptionRequest_builder) Build() *ApproveVulnerabilityExceptionRequest {
	m0 := &ApproveVulnerabilityExceptionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Comment = b.Comment
	}
	return m0
}

type ApproveVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ApproveVulnerabilityExceptionResponse) Reset() {
	*x = ApproveVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *ApproveVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApproveVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *ApproveVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *ApproveVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *ApproveVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type ApproveVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 ApproveVulnerabilityExceptionResponse_builder) Build() *ApproveVulnerabilityExceptionResponse {
	m0 := &ApproveVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type DenyVulnerabilityExceptionRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Comment     *string                `protobuf:"bytes,2,opt,name=comment"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DenyVulnerabilityExceptionRequest) Reset() {
	*x = DenyVulnerabilityExceptionRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyVulnerabilityExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyVulnerabilityExceptionRequest) ProtoMessage() {}

func (x *DenyVulnerabilityExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DenyVulnerabilityExceptionRequest) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *DenyVulnerabilityExceptionRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *DenyVulnerabilityExceptionRequest) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DenyVulnerabilityExceptionRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DenyVulnerabilityExceptionRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DenyVulnerabilityExceptionRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DenyVulnerabilityExceptionRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *DenyVulnerabilityExceptionRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Comment = nil
}

type DenyVulnerabilityExceptionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. The ID of vulnerability exception to be denied.
	Id *string
	// REQUIRED. The rationale for denying the exception.
	Comment *string
}

func (b0 DenyVulnerabilityExceptionRequest_builder) Build() *DenyVulnerabilityExceptionRequest {
	m0 := &DenyVulnerabilityExceptionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Comment = b.Comment
	}
	return m0
}

type DenyVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DenyVulnerabilityExceptionResponse) Reset() {
	*x = DenyVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *DenyVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DenyVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *DenyVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *DenyVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *DenyVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type DenyVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 DenyVulnerabilityExceptionResponse_builder) Build() *DenyVulnerabilityExceptionResponse {
	m0 := &DenyVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type UpdateVulnerabilityExceptionRequest struct {
	state                  protoimpl.MessageState                       `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                                      `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Comment     *string                                      `protobuf:"bytes,2,opt,name=comment"`
	xxx_hidden_Update      isUpdateVulnerabilityExceptionRequest_Update `protobuf_oneof:"update"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateVulnerabilityExceptionRequest) Reset() {
	*x = UpdateVulnerabilityExceptionRequest{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVulnerabilityExceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVulnerabilityExceptionRequest) ProtoMessage() {}

func (x *UpdateVulnerabilityExceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateVulnerabilityExceptionRequest) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *UpdateVulnerabilityExceptionRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *UpdateVulnerabilityExceptionRequest) GetDeferralUpdate() *DeferralUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_DeferralUpdate); ok {
			return x.DeferralUpdate
		}
	}
	return nil
}

func (x *UpdateVulnerabilityExceptionRequest) GetFalsePositiveUpdate() *FalsePositiveUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_FalsePositiveUpdate); ok {
			return x.FalsePositiveUpdate
		}
	}
	return nil
}

func (x *UpdateVulnerabilityExceptionRequest) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *UpdateVulnerabilityExceptionRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *UpdateVulnerabilityExceptionRequest) SetDeferralUpdate(v *DeferralUpdate) {
	if v == nil {
		x.xxx_hidden_Update = nil
		return
	}
	x.xxx_hidden_Update = &updateVulnerabilityExceptionRequest_DeferralUpdate{v}
}

func (x *UpdateVulnerabilityExceptionRequest) SetFalsePositiveUpdate(v *FalsePositiveUpdate) {
	if v == nil {
		x.xxx_hidden_Update = nil
		return
	}
	x.xxx_hidden_Update = &updateVulnerabilityExceptionRequest_FalsePositiveUpdate{v}
}

func (x *UpdateVulnerabilityExceptionRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateVulnerabilityExceptionRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateVulnerabilityExceptionRequest) HasUpdate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Update != nil
}

func (x *UpdateVulnerabilityExceptionRequest) HasDeferralUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_DeferralUpdate)
	return ok
}

func (x *UpdateVulnerabilityExceptionRequest) HasFalsePositiveUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_FalsePositiveUpdate)
	return ok
}

func (x *UpdateVulnerabilityExceptionRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *UpdateVulnerabilityExceptionRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Comment = nil
}

func (x *UpdateVulnerabilityExceptionRequest) ClearUpdate() {
	x.xxx_hidden_Update = nil
}

func (x *UpdateVulnerabilityExceptionRequest) ClearDeferralUpdate() {
	if _, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_DeferralUpdate); ok {
		x.xxx_hidden_Update = nil
	}
}

func (x *UpdateVulnerabilityExceptionRequest) ClearFalsePositiveUpdate() {
	if _, ok := x.xxx_hidden_Update.(*updateVulnerabilityExceptionRequest_FalsePositiveUpdate); ok {
		x.xxx_hidden_Update = nil
	}
}

const UpdateVulnerabilityExceptionRequest_Update_not_set_case case_UpdateVulnerabilityExceptionRequest_Update = 0
const UpdateVulnerabilityExceptionRequest_DeferralUpdate_case case_UpdateVulnerabilityExceptionRequest_Update = 3
const UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate_case case_UpdateVulnerabilityExceptionRequest_Update = 4

func (x *UpdateVulnerabilityExceptionRequest) WhichUpdate() case_UpdateVulnerabilityExceptionRequest_Update {
	if x == nil {
		return UpdateVulnerabilityExceptionRequest_Update_not_set_case
	}
	switch x.xxx_hidden_Update.(type) {
	case *updateVulnerabilityExceptionRequest_DeferralUpdate:
		return UpdateVulnerabilityExceptionRequest_DeferralUpdate_case
	case *updateVulnerabilityExceptionRequest_FalsePositiveUpdate:
		return UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate_case
	default:
		return UpdateVulnerabilityExceptionRequest_Update_not_set_case
	}
}

type UpdateVulnerabilityExceptionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// REQUIRED. The ID of vulnerability exception to be updated.
	Id *string
	// REQUIRED. The rationale for updating the exception.
	Comment *string
	// Fields of oneof xxx_hidden_Update:
	// Use this field to update a deferral exception.
	DeferralUpdate *DeferralUpdate
	// Use this field to update a false-positive exception.
	FalsePositiveUpdate *FalsePositiveUpdate
	// -- end of xxx_hidden_Update
}

func (b0 UpdateVulnerabilityExceptionRequest_builder) Build() *UpdateVulnerabilityExceptionRequest {
	m0 := &UpdateVulnerabilityExceptionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Comment = b.Comment
	}
	if b.DeferralUpdate != nil {
		x.xxx_hidden_Update = &updateVulnerabilityExceptionRequest_DeferralUpdate{b.DeferralUpdate}
	}
	if b.FalsePositiveUpdate != nil {
		x.xxx_hidden_Update = &updateVulnerabilityExceptionRequest_FalsePositiveUpdate{b.FalsePositiveUpdate}
	}
	return m0
}

type case_UpdateVulnerabilityExceptionRequest_Update protoreflect.FieldNumber

func (x case_UpdateVulnerabilityExceptionRequest_Update) String() string {
	md := file_api_v2_vuln_exception_service_proto_msgTypes[17].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isUpdateVulnerabilityExceptionRequest_Update interface {
	isUpdateVulnerabilityExceptionRequest_Update()
}

type updateVulnerabilityExceptionRequest_DeferralUpdate struct {
	// Use this field to update a deferral exception.
	DeferralUpdate *DeferralUpdate `protobuf:"bytes,3,opt,name=deferral_update,json=deferralUpdate,oneof"`
}

type updateVulnerabilityExceptionRequest_FalsePositiveUpdate struct {
	// Use this field to update a false-positive exception.
	FalsePositiveUpdate *FalsePositiveUpdate `protobuf:"bytes,4,opt,name=false_positive_update,json=falsePositiveUpdate,oneof"`
}

func (*updateVulnerabilityExceptionRequest_DeferralUpdate) isUpdateVulnerabilityExceptionRequest_Update() {
}

func (*updateVulnerabilityExceptionRequest_FalsePositiveUpdate) isUpdateVulnerabilityExceptionRequest_Update() {
}

type UpdateVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateVulnerabilityExceptionResponse) Reset() {
	*x = UpdateVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *UpdateVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *UpdateVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *UpdateVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *UpdateVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type UpdateVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 UpdateVulnerabilityExceptionResponse_builder) Build() *UpdateVulnerabilityExceptionResponse {
	m0 := &UpdateVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type CancelVulnerabilityExceptionResponse struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Exception *VulnerabilityException `protobuf:"bytes,1,opt,name=exception"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CancelVulnerabilityExceptionResponse) Reset() {
	*x = CancelVulnerabilityExceptionResponse{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelVulnerabilityExceptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelVulnerabilityExceptionResponse) ProtoMessage() {}

func (x *CancelVulnerabilityExceptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CancelVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if x != nil {
		return x.xxx_hidden_Exception
	}
	return nil
}

func (x *CancelVulnerabilityExceptionResponse) SetException(v *VulnerabilityException) {
	x.xxx_hidden_Exception = v
}

func (x *CancelVulnerabilityExceptionResponse) HasException() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Exception != nil
}

func (x *CancelVulnerabilityExceptionResponse) ClearException() {
	x.xxx_hidden_Exception = nil
}

type CancelVulnerabilityExceptionResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Exception *VulnerabilityException
}

func (b0 CancelVulnerabilityExceptionResponse_builder) Build() *CancelVulnerabilityExceptionResponse {
	m0 := &CancelVulnerabilityExceptionResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Exception = b.Exception
	return m0
}

type VulnerabilityException_Scope struct {
	state                 protoimpl.MessageState              `protogen:"opaque.v1"`
	xxx_hidden_ImageScope *VulnerabilityException_Scope_Image `protobuf:"bytes,1,opt,name=image_scope,json=imageScope"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VulnerabilityException_Scope) Reset() {
	*x = VulnerabilityException_Scope{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityException_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityException_Scope) ProtoMessage() {}

func (x *VulnerabilityException_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VulnerabilityException_Scope) GetImageScope() *VulnerabilityException_Scope_Image {
	if x != nil {
		return x.xxx_hidden_ImageScope
	}
	return nil
}

func (x *VulnerabilityException_Scope) SetImageScope(v *VulnerabilityException_Scope_Image) {
	x.xxx_hidden_ImageScope = v
}

func (x *VulnerabilityException_Scope) HasImageScope() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ImageScope != nil
}

func (x *VulnerabilityException_Scope) ClearImageScope() {
	x.xxx_hidden_ImageScope = nil
}

type VulnerabilityException_Scope_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// This field can be used to apply the exception to selected images.
	ImageScope *VulnerabilityException_Scope_Image
}

func (b0 VulnerabilityException_Scope_builder) Build() *VulnerabilityException_Scope {
	m0 := &VulnerabilityException_Scope{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ImageScope = b.ImageScope
	return m0
}

type VulnerabilityException_Scope_Image struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Registry    *string                `protobuf:"bytes,1,opt,name=registry"`
	xxx_hidden_Remote      *string                `protobuf:"bytes,2,opt,name=remote"`
	xxx_hidden_Tag         *string                `protobuf:"bytes,3,opt,name=tag"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VulnerabilityException_Scope_Image) Reset() {
	*x = VulnerabilityException_Scope_Image{}
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityException_Scope_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityException_Scope_Image) ProtoMessage() {}

func (x *VulnerabilityException_Scope_Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_vuln_exception_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VulnerabilityException_Scope_Image) GetRegistry() string {
	if x != nil {
		if x.xxx_hidden_Registry != nil {
			return *x.xxx_hidden_Registry
		}
		return ""
	}
	return ""
}

func (x *VulnerabilityException_Scope_Image) GetRemote() string {
	if x != nil {
		if x.xxx_hidden_Remote != nil {
			return *x.xxx_hidden_Remote
		}
		return ""
	}
	return ""
}

func (x *VulnerabilityException_Scope_Image) GetTag() string {
	if x != nil {
		if x.xxx_hidden_Tag != nil {
			return *x.xxx_hidden_Tag
		}
		return ""
	}
	return ""
}

func (x *VulnerabilityException_Scope_Image) SetRegistry(v string) {
	x.xxx_hidden_Registry = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *VulnerabilityException_Scope_Image) SetRemote(v string) {
	x.xxx_hidden_Remote = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *VulnerabilityException_Scope_Image) SetTag(v string) {
	x.xxx_hidden_Tag = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *VulnerabilityException_Scope_Image) HasRegistry() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *VulnerabilityException_Scope_Image) HasRemote() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *VulnerabilityException_Scope_Image) HasTag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *VulnerabilityException_Scope_Image) ClearRegistry() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Registry = nil
}

func (x *VulnerabilityException_Scope_Image) ClearRemote() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Remote = nil
}

func (x *VulnerabilityException_Scope_Image) ClearTag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Tag = nil
}

type VulnerabilityException_Scope_Image_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Registry *string
	Remote   *string
	Tag      *string
}

func (b0 VulnerabilityException_Scope_Image_builder) Build() *VulnerabilityException_Scope_Image {
	m0 := &VulnerabilityException_Scope_Image{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Registry != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Registry = b.Registry
	}
	if b.Remote != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Remote = b.Remote
	}
	if b.Tag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Tag = b.Tag
	}
	return m0
}

var File_api_v2_vuln_exception_service_proto protoreflect.FileDescriptor

const file_api_v2_vuln_exception_service_proto_rawDesc = "" +
	"\n" +
	"#api/v2/vuln_exception_service.proto\x12\x02v2\x1a\x13api/v2/common.proto\x1a\x19api/v2/search_query.proto\x1a\x11api/v2/user.proto\x1a\x17api/v2/vuln_state.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x90\x01\n" +
	"\aComment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12 \n" +
	"\x04user\x18\x03 \x01(\v2\f.v2.SlimUserR\x04user\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\xcf\x01\n" +
	"\x0fExceptionExpiry\x12?\n" +
	"\vexpiry_type\x18\x01 \x01(\x0e2\x1e.v2.ExceptionExpiry.ExpiryTypeR\n" +
	"expiryType\x129\n" +
	"\n" +
	"expires_on\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\texpiresOn\"@\n" +
	"\n" +
	"ExpiryType\x12\b\n" +
	"\x04TIME\x10\x00\x12\x13\n" +
	"\x0fALL_CVE_FIXABLE\x10\x01\x12\x13\n" +
	"\x0fANY_CVE_FIXABLE\x10\x02\">\n" +
	"\x0fDeferralRequest\x12+\n" +
	"\x06expiry\x18\x01 \x01(\v2\x13.v2.ExceptionExpiryR\x06expiry\"\x16\n" +
	"\x14FalsePositiveRequest\"\xdf\a\n" +
	"\x16VulnerabilityException\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x129\n" +
	"\ftarget_state\x18\x03 \x01(\x0e2\x16.v2.VulnerabilityStateR\vtargetState\x12+\n" +
	"\x06status\x18\x04 \x01(\x0e2\x13.v2.ExceptionStatusR\x06status\x12\x18\n" +
	"\aexpired\x18\x05 \x01(\bR\aexpired\x12*\n" +
	"\trequester\x18\x06 \x01(\v2\f.v2.SlimUserR\trequester\x12*\n" +
	"\tapprovers\x18\a \x03(\v2\f.v2.SlimUserR\tapprovers\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12=\n" +
	"\flast_updated\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12'\n" +
	"\bcomments\x18\n" +
	" \x03(\v2\v.v2.CommentR\bcomments\x126\n" +
	"\x05scope\x18\v \x01(\v2 .v2.VulnerabilityException.ScopeR\x05scope\x12@\n" +
	"\x10deferral_request\x18\f \x01(\v2\x13.v2.DeferralRequestH\x00R\x0fdeferralRequest\x12P\n" +
	"\x16false_positive_request\x18\r \x01(\v2\x18.v2.FalsePositiveRequestH\x00R\x14falsePositiveRequest\x12\x12\n" +
	"\x04cves\x18\x0e \x03(\tR\x04cves\x12=\n" +
	"\x0fdeferral_update\x18\x0f \x01(\v2\x12.v2.DeferralUpdateH\x01R\x0edeferralUpdate\x12M\n" +
	"\x15false_positive_update\x18\x10 \x01(\v2\x17.v2.FalsePositiveUpdateH\x01R\x13falsePositiveUpdate\x1a\x9f\x01\n" +
	"\x05Scope\x12G\n" +
	"\vimage_scope\x18\x01 \x01(\v2&.v2.VulnerabilityException.Scope.ImageR\n" +
	"imageScope\x1aM\n" +
	"\x05Image\x12\x1a\n" +
	"\bregistry\x18\x01 \x01(\tR\bregistry\x12\x16\n" +
	"\x06remote\x18\x02 \x01(\tR\x06remote\x12\x10\n" +
	"\x03tag\x18\x03 \x01(\tR\x03tagB\x05\n" +
	"\x03reqB\r\n" +
	"\vupdated_req\"Q\n" +
	"\x0eDeferralUpdate\x12\x12\n" +
	"\x04cves\x18\x01 \x03(\tR\x04cves\x12+\n" +
	"\x06expiry\x18\x02 \x01(\v2\x13.v2.ExceptionExpiryR\x06expiry\")\n" +
	"\x13FalsePositiveUpdate\x12\x12\n" +
	"\x04cves\x18\x01 \x03(\tR\x04cves\"]\n" +
	"!GetVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"a\n" +
	"#ListVulnerabilityExceptionsResponse\x12:\n" +
	"\n" +
	"exceptions\x18\x01 \x03(\v2\x1a.v2.VulnerabilityExceptionR\n" +
	"exceptions\"\xd0\x01\n" +
	"(CreateDeferVulnerabilityExceptionRequest\x12\x12\n" +
	"\x04cves\x18\x01 \x03(\tR\x04cves\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\x126\n" +
	"\x05scope\x18\x03 \x01(\v2 .v2.VulnerabilityException.ScopeR\x05scope\x12>\n" +
	"\x10exception_expiry\x18\x04 \x01(\v2\x13.v2.ExceptionExpiryR\x0fexceptionExpiry\"e\n" +
	")CreateDeferVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"\x98\x01\n" +
	"0CreateFalsePositiveVulnerabilityExceptionRequest\x12\x12\n" +
	"\x04cves\x18\x01 \x03(\tR\x04cves\x126\n" +
	"\x05scope\x18\x02 \x01(\v2 .v2.VulnerabilityException.ScopeR\x05scope\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\"m\n" +
	"1CreateFalsePositiveVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"P\n" +
	"$ApproveVulnerabilityExceptionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\"a\n" +
	"%ApproveVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"M\n" +
	"!DenyVulnerabilityExceptionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\"^\n" +
	"\"DenyVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"\xe7\x01\n" +
	"#UpdateVulnerabilityExceptionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\x12=\n" +
	"\x0fdeferral_update\x18\x03 \x01(\v2\x12.v2.DeferralUpdateH\x00R\x0edeferralUpdate\x12M\n" +
	"\x15false_positive_update\x18\x04 \x01(\v2\x17.v2.FalsePositiveUpdateH\x00R\x13falsePositiveUpdateB\b\n" +
	"\x06update\"`\n" +
	"$UpdateVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception\"`\n" +
	"$CancelVulnerabilityExceptionResponse\x128\n" +
	"\texception\x18\x01 \x01(\v2\x1a.v2.VulnerabilityExceptionR\texception*U\n" +
	"\x0fExceptionStatus\x12\v\n" +
	"\aPENDING\x10\x00\x12\f\n" +
	"\bAPPROVED\x10\x01\x12\n" +
	"\n" +
	"\x06DENIED\x10\x02\x12\x1b\n" +
	"\x17APPROVED_PENDING_UPDATE\x10\x032\x8b\v\n" +
	"\x1dVulnerabilityExceptionService\x12\x7f\n" +
	"\x19GetVulnerabilityException\x12\x10.v2.ResourceByID\x1a%.v2.GetVulnerabilityExceptionResponse\")\x82\xd3\xe4\x93\x02#\x12!/v2/vulnerability-exceptions/{id}\x12z\n" +
	"\x1bListVulnerabilityExceptions\x12\f.v2.RawQuery\x1a'.v2.ListVulnerabilityExceptionsResponse\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/v2/vulnerability-exceptions\x12\xb2\x01\n" +
	"!CreateDeferVulnerabilityException\x12,.v2.CreateDeferVulnerabilityExceptionRequest\x1a-.v2.CreateDeferVulnerabilityExceptionResponse\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/v2/vulnerability-exceptions/deferral\x12\xd0\x01\n" +
	")CreateFalsePositiveVulnerabilityException\x124.v2.CreateFalsePositiveVulnerabilityExceptionRequest\x1a5.v2.CreateFalsePositiveVulnerabilityExceptionResponse\"6\x82\xd3\xe4\x93\x020:\x01*\"+/v2/vulnerability-exceptions/false-positive\x12\xaa\x01\n" +
	"\x1dApproveVulnerabilityException\x12(.v2.ApproveVulnerabilityExceptionRequest\x1a).v2.ApproveVulnerabilityExceptionResponse\"4\x82\xd3\xe4\x93\x02.:\x01*\")/v2/vulnerability-exceptions/{id}/approve\x12\x9e\x01\n" +
	"\x1aDenyVulnerabilityException\x12%.v2.DenyVulnerabilityExceptionRequest\x1a&.v2.DenyVulnerabilityExceptionResponse\"1\x82\xd3\xe4\x93\x02+:\x01*\"&/v2/vulnerability-exceptions/{id}/deny\x12\x9f\x01\n" +
	"\x1cUpdateVulnerabilityException\x12'.v2.UpdateVulnerabilityExceptionRequest\x1a(.v2.UpdateVulnerabilityExceptionResponse\",\x82\xd3\xe4\x93\x02&:\x01*2!/v2/vulnerability-exceptions/{id}\x12\x8c\x01\n" +
	"\x1cCancelVulnerabilityException\x12\x10.v2.ResourceByID\x1a(.v2.CancelVulnerabilityExceptionResponse\"0\x82\xd3\xe4\x93\x02*\"(/v2/vulnerability-exceptions/{id}/cancel\x12f\n" +
	"\x1cDeleteVulnerabilityException\x12\x10.v2.ResourceByID\x1a\t.v2.Empty\")\x82\xd3\xe4\x93\x02#*!/v2/vulnerability-exceptions/{id}B/\n" +
	"\x18io.stackrox.proto.api.v2Z\v./api/v2;v2\x92\x03\x05\xd2>\x02\x10\x03X\x04b\beditionsp\xe8\a"

var file_api_v2_vuln_exception_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v2_vuln_exception_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_v2_vuln_exception_service_proto_goTypes = []any{
	(ExceptionStatus)(0),                                      // 0: v2.ExceptionStatus
	(ExceptionExpiry_ExpiryType)(0),                           // 1: v2.ExceptionExpiry.ExpiryType
	(*Comment)(nil),                                           // 2: v2.Comment
	(*ExceptionExpiry)(nil),                                   // 3: v2.ExceptionExpiry
	(*DeferralRequest)(nil),                                   // 4: v2.DeferralRequest
	(*FalsePositiveRequest)(nil),                              // 5: v2.FalsePositiveRequest
	(*VulnerabilityException)(nil),                            // 6: v2.VulnerabilityException
	(*DeferralUpdate)(nil),                                    // 7: v2.DeferralUpdate
	(*FalsePositiveUpdate)(nil),                               // 8: v2.FalsePositiveUpdate
	(*GetVulnerabilityExceptionResponse)(nil),                 // 9: v2.GetVulnerabilityExceptionResponse
	(*ListVulnerabilityExceptionsResponse)(nil),               // 10: v2.ListVulnerabilityExceptionsResponse
	(*CreateDeferVulnerabilityExceptionRequest)(nil),          // 11: v2.CreateDeferVulnerabilityExceptionRequest
	(*CreateDeferVulnerabilityExceptionResponse)(nil),         // 12: v2.CreateDeferVulnerabilityExceptionResponse
	(*CreateFalsePositiveVulnerabilityExceptionRequest)(nil),  // 13: v2.CreateFalsePositiveVulnerabilityExceptionRequest
	(*CreateFalsePositiveVulnerabilityExceptionResponse)(nil), // 14: v2.CreateFalsePositiveVulnerabilityExceptionResponse
	(*ApproveVulnerabilityExceptionRequest)(nil),              // 15: v2.ApproveVulnerabilityExceptionRequest
	(*ApproveVulnerabilityExceptionResponse)(nil),             // 16: v2.ApproveVulnerabilityExceptionResponse
	(*DenyVulnerabilityExceptionRequest)(nil),                 // 17: v2.DenyVulnerabilityExceptionRequest
	(*DenyVulnerabilityExceptionResponse)(nil),                // 18: v2.DenyVulnerabilityExceptionResponse
	(*UpdateVulnerabilityExceptionRequest)(nil),               // 19: v2.UpdateVulnerabilityExceptionRequest
	(*UpdateVulnerabilityExceptionResponse)(nil),              // 20: v2.UpdateVulnerabilityExceptionResponse
	(*CancelVulnerabilityExceptionResponse)(nil),              // 21: v2.CancelVulnerabilityExceptionResponse
	(*VulnerabilityException_Scope)(nil),                      // 22: v2.VulnerabilityException.Scope
	(*VulnerabilityException_Scope_Image)(nil),                // 23: v2.VulnerabilityException.Scope.Image
	(*SlimUser)(nil),                                          // 24: v2.SlimUser
	(*timestamppb.Timestamp)(nil),                             // 25: google.protobuf.Timestamp
	(VulnerabilityState)(0),                                   // 26: v2.VulnerabilityState
	(*ResourceByID)(nil),                                      // 27: v2.ResourceByID
	(*RawQuery)(nil),                                          // 28: v2.RawQuery
	(*Empty)(nil),                                             // 29: v2.Empty
}
var file_api_v2_vuln_exception_service_proto_depIdxs = []int32{
	24, // 0: v2.Comment.user:type_name -> v2.SlimUser
	25, // 1: v2.Comment.created_at:type_name -> google.protobuf.Timestamp
	1,  // 2: v2.ExceptionExpiry.expiry_type:type_name -> v2.ExceptionExpiry.ExpiryType
	25, // 3: v2.ExceptionExpiry.expires_on:type_name -> google.protobuf.Timestamp
	3,  // 4: v2.DeferralRequest.expiry:type_name -> v2.ExceptionExpiry
	26, // 5: v2.VulnerabilityException.target_state:type_name -> v2.VulnerabilityState
	0,  // 6: v2.VulnerabilityException.status:type_name -> v2.ExceptionStatus
	24, // 7: v2.VulnerabilityException.requester:type_name -> v2.SlimUser
	24, // 8: v2.VulnerabilityException.approvers:type_name -> v2.SlimUser
	25, // 9: v2.VulnerabilityException.created_at:type_name -> google.protobuf.Timestamp
	25, // 10: v2.VulnerabilityException.last_updated:type_name -> google.protobuf.Timestamp
	2,  // 11: v2.VulnerabilityException.comments:type_name -> v2.Comment
	22, // 12: v2.VulnerabilityException.scope:type_name -> v2.VulnerabilityException.Scope
	4,  // 13: v2.VulnerabilityException.deferral_request:type_name -> v2.DeferralRequest
	5,  // 14: v2.VulnerabilityException.false_positive_request:type_name -> v2.FalsePositiveRequest
	7,  // 15: v2.VulnerabilityException.deferral_update:type_name -> v2.DeferralUpdate
	8,  // 16: v2.VulnerabilityException.false_positive_update:type_name -> v2.FalsePositiveUpdate
	3,  // 17: v2.DeferralUpdate.expiry:type_name -> v2.ExceptionExpiry
	6,  // 18: v2.GetVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	6,  // 19: v2.ListVulnerabilityExceptionsResponse.exceptions:type_name -> v2.VulnerabilityException
	22, // 20: v2.CreateDeferVulnerabilityExceptionRequest.scope:type_name -> v2.VulnerabilityException.Scope
	3,  // 21: v2.CreateDeferVulnerabilityExceptionRequest.exception_expiry:type_name -> v2.ExceptionExpiry
	6,  // 22: v2.CreateDeferVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	22, // 23: v2.CreateFalsePositiveVulnerabilityExceptionRequest.scope:type_name -> v2.VulnerabilityException.Scope
	6,  // 24: v2.CreateFalsePositiveVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	6,  // 25: v2.ApproveVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	6,  // 26: v2.DenyVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	7,  // 27: v2.UpdateVulnerabilityExceptionRequest.deferral_update:type_name -> v2.DeferralUpdate
	8,  // 28: v2.UpdateVulnerabilityExceptionRequest.false_positive_update:type_name -> v2.FalsePositiveUpdate
	6,  // 29: v2.UpdateVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	6,  // 30: v2.CancelVulnerabilityExceptionResponse.exception:type_name -> v2.VulnerabilityException
	23, // 31: v2.VulnerabilityException.Scope.image_scope:type_name -> v2.VulnerabilityException.Scope.Image
	27, // 32: v2.VulnerabilityExceptionService.GetVulnerabilityException:input_type -> v2.ResourceByID
	28, // 33: v2.VulnerabilityExceptionService.ListVulnerabilityExceptions:input_type -> v2.RawQuery
	11, // 34: v2.VulnerabilityExceptionService.CreateDeferVulnerabilityException:input_type -> v2.CreateDeferVulnerabilityExceptionRequest
	13, // 35: v2.VulnerabilityExceptionService.CreateFalsePositiveVulnerabilityException:input_type -> v2.CreateFalsePositiveVulnerabilityExceptionRequest
	15, // 36: v2.VulnerabilityExceptionService.ApproveVulnerabilityException:input_type -> v2.ApproveVulnerabilityExceptionRequest
	17, // 37: v2.VulnerabilityExceptionService.DenyVulnerabilityException:input_type -> v2.DenyVulnerabilityExceptionRequest
	19, // 38: v2.VulnerabilityExceptionService.UpdateVulnerabilityException:input_type -> v2.UpdateVulnerabilityExceptionRequest
	27, // 39: v2.VulnerabilityExceptionService.CancelVulnerabilityException:input_type -> v2.ResourceByID
	27, // 40: v2.VulnerabilityExceptionService.DeleteVulnerabilityException:input_type -> v2.ResourceByID
	9,  // 41: v2.VulnerabilityExceptionService.GetVulnerabilityException:output_type -> v2.GetVulnerabilityExceptionResponse
	10, // 42: v2.VulnerabilityExceptionService.ListVulnerabilityExceptions:output_type -> v2.ListVulnerabilityExceptionsResponse
	12, // 43: v2.VulnerabilityExceptionService.CreateDeferVulnerabilityException:output_type -> v2.CreateDeferVulnerabilityExceptionResponse
	14, // 44: v2.VulnerabilityExceptionService.CreateFalsePositiveVulnerabilityException:output_type -> v2.CreateFalsePositiveVulnerabilityExceptionResponse
	16, // 45: v2.VulnerabilityExceptionService.ApproveVulnerabilityException:output_type -> v2.ApproveVulnerabilityExceptionResponse
	18, // 46: v2.VulnerabilityExceptionService.DenyVulnerabilityException:output_type -> v2.DenyVulnerabilityExceptionResponse
	20, // 47: v2.VulnerabilityExceptionService.UpdateVulnerabilityException:output_type -> v2.UpdateVulnerabilityExceptionResponse
	21, // 48: v2.VulnerabilityExceptionService.CancelVulnerabilityException:output_type -> v2.CancelVulnerabilityExceptionResponse
	29, // 49: v2.VulnerabilityExceptionService.DeleteVulnerabilityException:output_type -> v2.Empty
	41, // [41:50] is the sub-list for method output_type
	32, // [32:41] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_api_v2_vuln_exception_service_proto_init() }
func file_api_v2_vuln_exception_service_proto_init() {
	if File_api_v2_vuln_exception_service_proto != nil {
		return
	}
	file_api_v2_common_proto_init()
	file_api_v2_search_query_proto_init()
	file_api_v2_user_proto_init()
	file_api_v2_vuln_state_proto_init()
	file_api_v2_vuln_exception_service_proto_msgTypes[4].OneofWrappers = []any{
		(*vulnerabilityException_DeferralRequest)(nil),
		(*vulnerabilityException_FalsePositiveRequest)(nil),
		(*vulnerabilityException_DeferralUpdate)(nil),
		(*vulnerabilityException_FalsePositiveUpdate)(nil),
	}
	file_api_v2_vuln_exception_service_proto_msgTypes[17].OneofWrappers = []any{
		(*updateVulnerabilityExceptionRequest_DeferralUpdate)(nil),
		(*updateVulnerabilityExceptionRequest_FalsePositiveUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v2_vuln_exception_service_proto_rawDesc), len(file_api_v2_vuln_exception_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v2_vuln_exception_service_proto_goTypes,
		DependencyIndexes: file_api_v2_vuln_exception_service_proto_depIdxs,
		EnumInfos:         file_api_v2_vuln_exception_service_proto_enumTypes,
		MessageInfos:      file_api_v2_vuln_exception_service_proto_msgTypes,
	}.Build()
	File_api_v2_vuln_exception_service_proto = out.File
	file_api_v2_vuln_exception_service_proto_goTypes = nil
	file_api_v2_vuln_exception_service_proto_depIdxs = nil
}
