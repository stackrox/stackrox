// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/vuln_exception_service.proto

package v2

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Indicates the status of a request.
type ExceptionStatus int32

const (
	// Default request state. It indicates that the request has not been fulfilled and that an action (approve/deny) is required.
	ExceptionStatus_PENDING ExceptionStatus = 0
	// Indicates that the request has been approved by the approver.
	ExceptionStatus_APPROVED ExceptionStatus = 1
	// Indicates that the request has been denied by the approver.
	ExceptionStatus_DENIED ExceptionStatus = 2
	// Indicates that the original request was approved, but an update is still pending an approval or denial.
	ExceptionStatus_APPROVED_PENDING_UPDATE ExceptionStatus = 3
)

var ExceptionStatus_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "APPROVED_PENDING_UPDATE",
}

var ExceptionStatus_value = map[string]int32{
	"PENDING":                 0,
	"APPROVED":                1,
	"DENIED":                  2,
	"APPROVED_PENDING_UPDATE": 3,
}

func (x ExceptionStatus) String() string {
	return proto.EnumName(ExceptionStatus_name, int32(x))
}

func (ExceptionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{0}
}

type ExceptionExpiry_ExpiryType int32

const (
	ExceptionExpiry_TIME            ExceptionExpiry_ExpiryType = 0
	ExceptionExpiry_ALL_CVE_FIXABLE ExceptionExpiry_ExpiryType = 1
	ExceptionExpiry_ANY_CVE_FIXABLE ExceptionExpiry_ExpiryType = 2
)

var ExceptionExpiry_ExpiryType_name = map[int32]string{
	0: "TIME",
	1: "ALL_CVE_FIXABLE",
	2: "ANY_CVE_FIXABLE",
}

var ExceptionExpiry_ExpiryType_value = map[string]int32{
	"TIME":            0,
	"ALL_CVE_FIXABLE": 1,
	"ANY_CVE_FIXABLE": 2,
}

func (x ExceptionExpiry_ExpiryType) String() string {
	return proto.EnumName(ExceptionExpiry_ExpiryType_name, int32(x))
}

func (ExceptionExpiry_ExpiryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{1, 0}
}

type Comment struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	User                 *SlimUser        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{0}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Comment) GetUser() *SlimUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Comment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Comment) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Comment) Clone() *Comment {
	if m == nil {
		return nil
	}
	cloned := new(Comment)
	*cloned = *m

	cloned.User = m.User.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

type ExceptionExpiry struct {
	// This field can be used only for deferral requests. It indicates the type of expiry set for the request.
	// `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
	// `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.
	// `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
	ExpiryType ExceptionExpiry_ExpiryType `protobuf:"varint,1,opt,name=expiry_type,json=expiryType,proto3,enum=v2.ExceptionExpiry_ExpiryType" json:"expiry_type,omitempty"`
	// Indicates the timestamp when the exception expires. This field is REQUIRED only if the expiry type is set to TIME.
	ExpiresOn            *types.Timestamp `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ExceptionExpiry) Reset()         { *m = ExceptionExpiry{} }
func (m *ExceptionExpiry) String() string { return proto.CompactTextString(m) }
func (*ExceptionExpiry) ProtoMessage()    {}
func (*ExceptionExpiry) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{1}
}
func (m *ExceptionExpiry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExceptionExpiry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExceptionExpiry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExceptionExpiry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExceptionExpiry.Merge(m, src)
}
func (m *ExceptionExpiry) XXX_Size() int {
	return m.Size()
}
func (m *ExceptionExpiry) XXX_DiscardUnknown() {
	xxx_messageInfo_ExceptionExpiry.DiscardUnknown(m)
}

var xxx_messageInfo_ExceptionExpiry proto.InternalMessageInfo

func (m *ExceptionExpiry) GetExpiryType() ExceptionExpiry_ExpiryType {
	if m != nil {
		return m.ExpiryType
	}
	return ExceptionExpiry_TIME
}

func (m *ExceptionExpiry) GetExpiresOn() *types.Timestamp {
	if m != nil {
		return m.ExpiresOn
	}
	return nil
}

func (m *ExceptionExpiry) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExceptionExpiry) Clone() *ExceptionExpiry {
	if m == nil {
		return nil
	}
	cloned := new(ExceptionExpiry)
	*cloned = *m

	cloned.ExpiresOn = m.ExpiresOn.Clone()
	return cloned
}

type DeferralRequest struct {
	Expiry               *ExceptionExpiry `protobuf:"bytes,1,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeferralRequest) Reset()         { *m = DeferralRequest{} }
func (m *DeferralRequest) String() string { return proto.CompactTextString(m) }
func (*DeferralRequest) ProtoMessage()    {}
func (*DeferralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{2}
}
func (m *DeferralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferralRequest.Merge(m, src)
}
func (m *DeferralRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeferralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeferralRequest proto.InternalMessageInfo

func (m *DeferralRequest) GetExpiry() *ExceptionExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferralRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferralRequest) Clone() *DeferralRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeferralRequest)
	*cloned = *m

	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type FalsePositiveRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FalsePositiveRequest) Reset()         { *m = FalsePositiveRequest{} }
func (m *FalsePositiveRequest) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveRequest) ProtoMessage()    {}
func (*FalsePositiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{3}
}
func (m *FalsePositiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveRequest.Merge(m, src)
}
func (m *FalsePositiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveRequest proto.InternalMessageInfo

func (m *FalsePositiveRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveRequest) Clone() *FalsePositiveRequest {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveRequest)
	*cloned = *m

	return cloned
}

// Next available tag: 16
// VulnerabilityException represents a vulnerability exception such as deferral and false-positive.
type VulnerabilityException struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Auto-generated display name of the exception.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates the state that the vulnerabilities will move to once the exception is enforced.
	TargetState VulnerabilityState `protobuf:"varint,3,opt,name=target_state,json=targetState,proto3,enum=v2.VulnerabilityState" json:"target_state,omitempty"`
	// Indicates the status of the exception.
	Status ExceptionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=v2.ExceptionStatus" json:"status,omitempty"`
	// If set to `true`, this field indicates that the exception is no longer enforced.
	Expired     bool             `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	Requester   *SlimUser        `protobuf:"bytes,6,opt,name=requester,proto3" json:"requester,omitempty"`
	Approvers   []*SlimUser      `protobuf:"bytes,7,rep,name=approvers,proto3" json:"approvers,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUpdated *types.Timestamp `protobuf:"bytes,9,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Comments    []*Comment       `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty"`
	// Indicates the scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope `protobuf:"bytes,11,opt,name=scope,proto3" json:"scope,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*VulnerabilityException_DeferralRequest
	//	*VulnerabilityException_FalsePositiveRequest
	Req isVulnerabilityException_Req `protobuf_oneof:"req"`
	// Indicates the CVEs to which the exception applies.
	Cves []string `protobuf:"bytes,14,rep,name=cves,proto3" json:"cves,omitempty"`
	// Types that are valid to be assigned to UpdatedReq:
	//	*VulnerabilityException_DeferralUpdate
	//	*VulnerabilityException_FalsePositiveUpdate
	UpdatedReq           isVulnerabilityException_UpdatedReq `protobuf_oneof:"updated_req"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VulnerabilityException) Reset()         { *m = VulnerabilityException{} }
func (m *VulnerabilityException) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException) ProtoMessage()    {}
func (*VulnerabilityException) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4}
}
func (m *VulnerabilityException) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException.Merge(m, src)
}
func (m *VulnerabilityException) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException proto.InternalMessageInfo

type isVulnerabilityException_Req interface {
	isVulnerabilityException_Req()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityException_Req
}
type isVulnerabilityException_UpdatedReq interface {
	isVulnerabilityException_UpdatedReq()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityException_UpdatedReq
}

type VulnerabilityException_DeferralRequest struct {
	DeferralRequest *DeferralRequest `protobuf:"bytes,12,opt,name=deferral_request,json=deferralRequest,proto3,oneof" json:"deferral_request,omitempty"`
}
type VulnerabilityException_FalsePositiveRequest struct {
	FalsePositiveRequest *FalsePositiveRequest `protobuf:"bytes,13,opt,name=false_positive_request,json=falsePositiveRequest,proto3,oneof" json:"false_positive_request,omitempty"`
}
type VulnerabilityException_DeferralUpdate struct {
	DeferralUpdate *DeferralUpdate `protobuf:"bytes,15,opt,name=deferral_update,json=deferralUpdate,proto3,oneof" json:"deferral_update,omitempty"`
}
type VulnerabilityException_FalsePositiveUpdate struct {
	FalsePositiveUpdate *FalsePositiveUpdate `protobuf:"bytes,16,opt,name=false_positive_update,json=falsePositiveUpdate,proto3,oneof" json:"false_positive_update,omitempty"`
}

func (*VulnerabilityException_DeferralRequest) isVulnerabilityException_Req() {}
func (m *VulnerabilityException_DeferralRequest) Clone() isVulnerabilityException_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_DeferralRequest)
	*cloned = *m

	cloned.DeferralRequest = m.DeferralRequest.Clone()
	return cloned
}
func (*VulnerabilityException_FalsePositiveRequest) isVulnerabilityException_Req() {}
func (m *VulnerabilityException_FalsePositiveRequest) Clone() isVulnerabilityException_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_FalsePositiveRequest)
	*cloned = *m

	cloned.FalsePositiveRequest = m.FalsePositiveRequest.Clone()
	return cloned
}
func (*VulnerabilityException_DeferralUpdate) isVulnerabilityException_UpdatedReq() {}
func (m *VulnerabilityException_DeferralUpdate) Clone() isVulnerabilityException_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_DeferralUpdate)
	*cloned = *m

	cloned.DeferralUpdate = m.DeferralUpdate.Clone()
	return cloned
}
func (*VulnerabilityException_FalsePositiveUpdate) isVulnerabilityException_UpdatedReq() {}
func (m *VulnerabilityException_FalsePositiveUpdate) Clone() isVulnerabilityException_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_FalsePositiveUpdate)
	*cloned = *m

	cloned.FalsePositiveUpdate = m.FalsePositiveUpdate.Clone()
	return cloned
}

func (m *VulnerabilityException) GetReq() isVulnerabilityException_Req {
	if m != nil {
		return m.Req
	}
	return nil
}
func (m *VulnerabilityException) GetUpdatedReq() isVulnerabilityException_UpdatedReq {
	if m != nil {
		return m.UpdatedReq
	}
	return nil
}

func (m *VulnerabilityException) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VulnerabilityException) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityException) GetTargetState() VulnerabilityState {
	if m != nil {
		return m.TargetState
	}
	return VulnerabilityState_OBSERVED
}

func (m *VulnerabilityException) GetStatus() ExceptionStatus {
	if m != nil {
		return m.Status
	}
	return ExceptionStatus_PENDING
}

func (m *VulnerabilityException) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *VulnerabilityException) GetRequester() *SlimUser {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *VulnerabilityException) GetApprovers() []*SlimUser {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *VulnerabilityException) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *VulnerabilityException) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *VulnerabilityException) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *VulnerabilityException) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *VulnerabilityException) GetDeferralRequest() *DeferralRequest {
	if x, ok := m.GetReq().(*VulnerabilityException_DeferralRequest); ok {
		return x.DeferralRequest
	}
	return nil
}

func (m *VulnerabilityException) GetFalsePositiveRequest() *FalsePositiveRequest {
	if x, ok := m.GetReq().(*VulnerabilityException_FalsePositiveRequest); ok {
		return x.FalsePositiveRequest
	}
	return nil
}

func (m *VulnerabilityException) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *VulnerabilityException) GetDeferralUpdate() *DeferralUpdate {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityException_DeferralUpdate); ok {
		return x.DeferralUpdate
	}
	return nil
}

func (m *VulnerabilityException) GetFalsePositiveUpdate() *FalsePositiveUpdate {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityException_FalsePositiveUpdate); ok {
		return x.FalsePositiveUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VulnerabilityException) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VulnerabilityException_DeferralRequest)(nil),
		(*VulnerabilityException_FalsePositiveRequest)(nil),
		(*VulnerabilityException_DeferralUpdate)(nil),
		(*VulnerabilityException_FalsePositiveUpdate)(nil),
	}
}

func (m *VulnerabilityException) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException) Clone() *VulnerabilityException {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException)
	*cloned = *m

	cloned.Requester = m.Requester.Clone()
	if m.Approvers != nil {
		cloned.Approvers = make([]*SlimUser, len(m.Approvers))
		for idx, v := range m.Approvers {
			cloned.Approvers[idx] = v.Clone()
		}
	}
	cloned.CreatedAt = m.CreatedAt.Clone()
	cloned.LastUpdated = m.LastUpdated.Clone()
	if m.Comments != nil {
		cloned.Comments = make([]*Comment, len(m.Comments))
		for idx, v := range m.Comments {
			cloned.Comments[idx] = v.Clone()
		}
	}
	cloned.Scope = m.Scope.Clone()
	if m.Req != nil {
		cloned.Req = m.Req.Clone()
	}
	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	if m.UpdatedReq != nil {
		cloned.UpdatedReq = m.UpdatedReq.Clone()
	}
	return cloned
}

type VulnerabilityException_Scope struct {
	// This field can be used to apply the exception to selected images.
	ImageScope           *VulnerabilityException_Scope_Image `protobuf:"bytes,1,opt,name=image_scope,json=imageScope,proto3" json:"image_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VulnerabilityException_Scope) Reset()         { *m = VulnerabilityException_Scope{} }
func (m *VulnerabilityException_Scope) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException_Scope) ProtoMessage()    {}
func (*VulnerabilityException_Scope) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4, 0}
}
func (m *VulnerabilityException_Scope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException_Scope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException_Scope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException_Scope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException_Scope.Merge(m, src)
}
func (m *VulnerabilityException_Scope) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException_Scope) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException_Scope.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException_Scope proto.InternalMessageInfo

func (m *VulnerabilityException_Scope) GetImageScope() *VulnerabilityException_Scope_Image {
	if m != nil {
		return m.ImageScope
	}
	return nil
}

func (m *VulnerabilityException_Scope) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException_Scope) Clone() *VulnerabilityException_Scope {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_Scope)
	*cloned = *m

	cloned.ImageScope = m.ImageScope.Clone()
	return cloned
}

type VulnerabilityException_Scope_Image struct {
	Registry             string   `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	Remote               string   `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityException_Scope_Image) Reset()         { *m = VulnerabilityException_Scope_Image{} }
func (m *VulnerabilityException_Scope_Image) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException_Scope_Image) ProtoMessage()    {}
func (*VulnerabilityException_Scope_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4, 0, 0}
}
func (m *VulnerabilityException_Scope_Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException_Scope_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException_Scope_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException_Scope_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException_Scope_Image.Merge(m, src)
}
func (m *VulnerabilityException_Scope_Image) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException_Scope_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException_Scope_Image.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException_Scope_Image proto.InternalMessageInfo

func (m *VulnerabilityException_Scope_Image) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException_Scope_Image) Clone() *VulnerabilityException_Scope_Image {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_Scope_Image)
	*cloned = *m

	return cloned
}

type DeferralUpdate struct {
	// Use this field to update the CVEs of a deferral exception.
	Cves []string `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	// Use this field to update the exception expiry.
	Expiry               *ExceptionExpiry `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeferralUpdate) Reset()         { *m = DeferralUpdate{} }
func (m *DeferralUpdate) String() string { return proto.CompactTextString(m) }
func (*DeferralUpdate) ProtoMessage()    {}
func (*DeferralUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{5}
}
func (m *DeferralUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferralUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferralUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferralUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferralUpdate.Merge(m, src)
}
func (m *DeferralUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DeferralUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferralUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DeferralUpdate proto.InternalMessageInfo

func (m *DeferralUpdate) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *DeferralUpdate) GetExpiry() *ExceptionExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferralUpdate) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferralUpdate) Clone() *DeferralUpdate {
	if m == nil {
		return nil
	}
	cloned := new(DeferralUpdate)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type FalsePositiveUpdate struct {
	// Use this field to update the CVEs of a false-positive exception.
	Cves                 []string `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FalsePositiveUpdate) Reset()         { *m = FalsePositiveUpdate{} }
func (m *FalsePositiveUpdate) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveUpdate) ProtoMessage()    {}
func (*FalsePositiveUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{6}
}
func (m *FalsePositiveUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveUpdate.Merge(m, src)
}
func (m *FalsePositiveUpdate) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveUpdate proto.InternalMessageInfo

func (m *FalsePositiveUpdate) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *FalsePositiveUpdate) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveUpdate) Clone() *FalsePositiveUpdate {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveUpdate)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	return cloned
}

type GetVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetVulnerabilityExceptionResponse) Reset()         { *m = GetVulnerabilityExceptionResponse{} }
func (m *GetVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*GetVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*GetVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{7}
}
func (m *GetVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *GetVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *GetVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *GetVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetVulnerabilityExceptionResponse) Clone() *GetVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type ListVulnerabilityExceptionsResponse struct {
	Exceptions           []*VulnerabilityException `protobuf:"bytes,1,rep,name=exceptions,proto3" json:"exceptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListVulnerabilityExceptionsResponse) Reset()         { *m = ListVulnerabilityExceptionsResponse{} }
func (m *ListVulnerabilityExceptionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListVulnerabilityExceptionsResponse) ProtoMessage()    {}
func (*ListVulnerabilityExceptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{8}
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVulnerabilityExceptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVulnerabilityExceptionsResponse.Merge(m, src)
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVulnerabilityExceptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVulnerabilityExceptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVulnerabilityExceptionsResponse proto.InternalMessageInfo

func (m *ListVulnerabilityExceptionsResponse) GetExceptions() []*VulnerabilityException {
	if m != nil {
		return m.Exceptions
	}
	return nil
}

func (m *ListVulnerabilityExceptionsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListVulnerabilityExceptionsResponse) Clone() *ListVulnerabilityExceptionsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListVulnerabilityExceptionsResponse)
	*cloned = *m

	if m.Exceptions != nil {
		cloned.Exceptions = make([]*VulnerabilityException, len(m.Exceptions))
		for idx, v := range m.Exceptions {
			cloned.Exceptions[idx] = v.Clone()
		}
	}
	return cloned
}

// next available tag: 6
type CreateDeferVulnerabilityExceptionRequest struct {
	// REQUIRED. The CVEs to which the exception should be applied.
	Cves []string `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	// REQUIRED. The rationale for creating the exception.
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// REQUIRED. The scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// REQUIRED. The type of expiry to be enforced for the request.
	ExceptionExpiry      *ExceptionExpiry `protobuf:"bytes,4,opt,name=exception_expiry,json=exceptionExpiry,proto3" json:"exception_expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateDeferVulnerabilityExceptionRequest) Reset() {
	*m = CreateDeferVulnerabilityExceptionRequest{}
}
func (m *CreateDeferVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDeferVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*CreateDeferVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{9}
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *CreateDeferVulnerabilityExceptionRequest) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetExceptionExpiry() *ExceptionExpiry {
	if m != nil {
		return m.ExceptionExpiry
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateDeferVulnerabilityExceptionRequest) Clone() *CreateDeferVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateDeferVulnerabilityExceptionRequest)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	cloned.Scope = m.Scope.Clone()
	cloned.ExceptionExpiry = m.ExceptionExpiry.Clone()
	return cloned
}

type CreateDeferVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateDeferVulnerabilityExceptionResponse) Reset() {
	*m = CreateDeferVulnerabilityExceptionResponse{}
}
func (m *CreateDeferVulnerabilityExceptionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CreateDeferVulnerabilityExceptionResponse) ProtoMessage() {}
func (*CreateDeferVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{10}
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CreateDeferVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateDeferVulnerabilityExceptionResponse) Clone() *CreateDeferVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateDeferVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type CreateFalsePositiveVulnerabilityExceptionRequest struct {
	// REQUIRED. The CVEs to which the exception should be applied.
	Cves []string `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	// REQUIRED. The scope of enforcement of the exception.
	Scope *VulnerabilityException_Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// REQUIRED. The rationale for creating the exception.
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Reset() {
	*m = CreateFalsePositiveVulnerabilityExceptionRequest{}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CreateFalsePositiveVulnerabilityExceptionRequest) ProtoMessage() {}
func (*CreateFalsePositiveVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{11}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Clone() *CreateFalsePositiveVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateFalsePositiveVulnerabilityExceptionRequest)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	cloned.Scope = m.Scope.Clone()
	return cloned
}

type CreateFalsePositiveVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Reset() {
	*m = CreateFalsePositiveVulnerabilityExceptionResponse{}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CreateFalsePositiveVulnerabilityExceptionResponse) ProtoMessage() {}
func (*CreateFalsePositiveVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{12}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Clone() *CreateFalsePositiveVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateFalsePositiveVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type ApproveVulnerabilityExceptionRequest struct {
	// REQUIRED. The ID of vulnerability exception to be approved.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. The rationale for approving the exception.
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveVulnerabilityExceptionRequest) Reset()         { *m = ApproveVulnerabilityExceptionRequest{} }
func (m *ApproveVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*ApproveVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{13}
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *ApproveVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApproveVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ApproveVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnerabilityExceptionRequest) Clone() *ApproveVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnerabilityExceptionRequest)
	*cloned = *m

	return cloned
}

type ApproveVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ApproveVulnerabilityExceptionResponse) Reset()         { *m = ApproveVulnerabilityExceptionResponse{} }
func (m *ApproveVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*ApproveVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{14}
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *ApproveVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *ApproveVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnerabilityExceptionResponse) Clone() *ApproveVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type DenyVulnerabilityExceptionRequest struct {
	// REQUIRED. The ID of vulnerability exception to be denied.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. The rationale for denying the exception.
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenyVulnerabilityExceptionRequest) Reset()         { *m = DenyVulnerabilityExceptionRequest{} }
func (m *DenyVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*DenyVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*DenyVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{15}
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *DenyVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DenyVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *DenyVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnerabilityExceptionRequest) Clone() *DenyVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnerabilityExceptionRequest)
	*cloned = *m

	return cloned
}

type DenyVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DenyVulnerabilityExceptionResponse) Reset()         { *m = DenyVulnerabilityExceptionResponse{} }
func (m *DenyVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*DenyVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*DenyVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{16}
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *DenyVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *DenyVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnerabilityExceptionResponse) Clone() *DenyVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type UpdateVulnerabilityExceptionRequest struct {
	// REQUIRED. The ID of vulnerability exception to be updated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. The rationale for updating the exception.
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*UpdateVulnerabilityExceptionRequest_DeferralUpdate
	//	*UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate
	Update               isUpdateVulnerabilityExceptionRequest_Update `protobuf_oneof:"update"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *UpdateVulnerabilityExceptionRequest) Reset()         { *m = UpdateVulnerabilityExceptionRequest{} }
func (m *UpdateVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*UpdateVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{17}
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionRequest proto.InternalMessageInfo

type isUpdateVulnerabilityExceptionRequest_Update interface {
	isUpdateVulnerabilityExceptionRequest_Update()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isUpdateVulnerabilityExceptionRequest_Update
}

type UpdateVulnerabilityExceptionRequest_DeferralUpdate struct {
	DeferralUpdate *DeferralUpdate `protobuf:"bytes,3,opt,name=deferral_update,json=deferralUpdate,proto3,oneof" json:"deferral_update,omitempty"`
}
type UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate struct {
	FalsePositiveUpdate *FalsePositiveUpdate `protobuf:"bytes,4,opt,name=false_positive_update,json=falsePositiveUpdate,proto3,oneof" json:"false_positive_update,omitempty"`
}

func (*UpdateVulnerabilityExceptionRequest_DeferralUpdate) isUpdateVulnerabilityExceptionRequest_Update() {
}
func (m *UpdateVulnerabilityExceptionRequest_DeferralUpdate) Clone() isUpdateVulnerabilityExceptionRequest_Update {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionRequest_DeferralUpdate)
	*cloned = *m

	cloned.DeferralUpdate = m.DeferralUpdate.Clone()
	return cloned
}
func (*UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate) isUpdateVulnerabilityExceptionRequest_Update() {
}
func (m *UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate) Clone() isUpdateVulnerabilityExceptionRequest_Update {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate)
	*cloned = *m

	cloned.FalsePositiveUpdate = m.FalsePositiveUpdate.Clone()
	return cloned
}

func (m *UpdateVulnerabilityExceptionRequest) GetUpdate() isUpdateVulnerabilityExceptionRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *UpdateVulnerabilityExceptionRequest) GetDeferralUpdate() *DeferralUpdate {
	if x, ok := m.GetUpdate().(*UpdateVulnerabilityExceptionRequest_DeferralUpdate); ok {
		return x.DeferralUpdate
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionRequest) GetFalsePositiveUpdate() *FalsePositiveUpdate {
	if x, ok := m.GetUpdate().(*UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate); ok {
		return x.FalsePositiveUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateVulnerabilityExceptionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateVulnerabilityExceptionRequest_DeferralUpdate)(nil),
		(*UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate)(nil),
	}
}

func (m *UpdateVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionRequest) Clone() *UpdateVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionRequest)
	*cloned = *m

	if m.Update != nil {
		cloned.Update = m.Update.Clone()
	}
	return cloned
}

type UpdateVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpdateVulnerabilityExceptionResponse) Reset()         { *m = UpdateVulnerabilityExceptionResponse{} }
func (m *UpdateVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*UpdateVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{18}
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *UpdateVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionResponse) Clone() *UpdateVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

type CancelVulnerabilityExceptionResponse struct {
	Exception            *VulnerabilityException `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CancelVulnerabilityExceptionResponse) Reset()         { *m = CancelVulnerabilityExceptionResponse{} }
func (m *CancelVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*CancelVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*CancelVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{19}
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CancelVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CancelVulnerabilityExceptionResponse) GetException() *VulnerabilityException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *CancelVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CancelVulnerabilityExceptionResponse) Clone() *CancelVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CancelVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.Exception = m.Exception.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("v2.ExceptionStatus", ExceptionStatus_name, ExceptionStatus_value)
	proto.RegisterEnum("v2.ExceptionExpiry_ExpiryType", ExceptionExpiry_ExpiryType_name, ExceptionExpiry_ExpiryType_value)
	proto.RegisterType((*Comment)(nil), "v2.Comment")
	proto.RegisterType((*ExceptionExpiry)(nil), "v2.ExceptionExpiry")
	proto.RegisterType((*DeferralRequest)(nil), "v2.DeferralRequest")
	proto.RegisterType((*FalsePositiveRequest)(nil), "v2.FalsePositiveRequest")
	proto.RegisterType((*VulnerabilityException)(nil), "v2.VulnerabilityException")
	proto.RegisterType((*VulnerabilityException_Scope)(nil), "v2.VulnerabilityException.Scope")
	proto.RegisterType((*VulnerabilityException_Scope_Image)(nil), "v2.VulnerabilityException.Scope.Image")
	proto.RegisterType((*DeferralUpdate)(nil), "v2.DeferralUpdate")
	proto.RegisterType((*FalsePositiveUpdate)(nil), "v2.FalsePositiveUpdate")
	proto.RegisterType((*GetVulnerabilityExceptionResponse)(nil), "v2.GetVulnerabilityExceptionResponse")
	proto.RegisterType((*ListVulnerabilityExceptionsResponse)(nil), "v2.ListVulnerabilityExceptionsResponse")
	proto.RegisterType((*CreateDeferVulnerabilityExceptionRequest)(nil), "v2.CreateDeferVulnerabilityExceptionRequest")
	proto.RegisterType((*CreateDeferVulnerabilityExceptionResponse)(nil), "v2.CreateDeferVulnerabilityExceptionResponse")
	proto.RegisterType((*CreateFalsePositiveVulnerabilityExceptionRequest)(nil), "v2.CreateFalsePositiveVulnerabilityExceptionRequest")
	proto.RegisterType((*CreateFalsePositiveVulnerabilityExceptionResponse)(nil), "v2.CreateFalsePositiveVulnerabilityExceptionResponse")
	proto.RegisterType((*ApproveVulnerabilityExceptionRequest)(nil), "v2.ApproveVulnerabilityExceptionRequest")
	proto.RegisterType((*ApproveVulnerabilityExceptionResponse)(nil), "v2.ApproveVulnerabilityExceptionResponse")
	proto.RegisterType((*DenyVulnerabilityExceptionRequest)(nil), "v2.DenyVulnerabilityExceptionRequest")
	proto.RegisterType((*DenyVulnerabilityExceptionResponse)(nil), "v2.DenyVulnerabilityExceptionResponse")
	proto.RegisterType((*UpdateVulnerabilityExceptionRequest)(nil), "v2.UpdateVulnerabilityExceptionRequest")
	proto.RegisterType((*UpdateVulnerabilityExceptionResponse)(nil), "v2.UpdateVulnerabilityExceptionResponse")
	proto.RegisterType((*CancelVulnerabilityExceptionResponse)(nil), "v2.CancelVulnerabilityExceptionResponse")
}

func init() {
	proto.RegisterFile("api/v2/vuln_exception_service.proto", fileDescriptor_915f69594385714b)
}

var fileDescriptor_915f69594385714b = []byte{
	// 1448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x6f, 0x13, 0xc7,
	0x16, 0xf7, 0xda, 0x4e, 0x62, 0x1f, 0x07, 0xc7, 0x77, 0xc2, 0x0d, 0xcb, 0x12, 0x72, 0x9d, 0xcd,
	0x1f, 0x9c, 0x00, 0x1b, 0xf0, 0xa5, 0xa8, 0x20, 0x41, 0x49, 0x62, 0x03, 0x91, 0x92, 0x60, 0x36,
	0x09, 0xa2, 0x95, 0xda, 0x65, 0xb1, 0x27, 0xee, 0xaa, 0xf6, 0xee, 0xb2, 0xb3, 0x76, 0x71, 0xab,
	0xaa, 0x52, 0x5f, 0xdb, 0x87, 0x4a, 0x7d, 0xe1, 0xa9, 0xbc, 0xf7, 0xb1, 0x9f, 0xa2, 0x6f, 0x45,
	0xea, 0x07, 0x68, 0x45, 0x2b, 0xf5, 0x6b, 0x54, 0x33, 0x3b, 0xbb, 0xb6, 0x93, 0xb5, 0xd7, 0x51,
	0xe8, 0x93, 0x3d, 0xe7, 0x9c, 0x39, 0xf3, 0x3b, 0xbf, 0x39, 0x7f, 0x66, 0x61, 0x41, 0xb7, 0x8d,
	0xb5, 0x76, 0x71, 0xad, 0xdd, 0x6a, 0x98, 0x1a, 0x7e, 0x59, 0xc5, 0xb6, 0x6b, 0x58, 0xa6, 0x46,
	0xb0, 0xd3, 0x36, 0xaa, 0x58, 0xb1, 0x1d, 0xcb, 0xb5, 0x50, 0xbc, 0x5d, 0x94, 0xa6, 0xb9, 0x61,
	0xd5, 0x6a, 0x36, 0x2d, 0xd3, 0x53, 0x48, 0xe7, 0xb9, 0x90, 0x60, 0xdd, 0xa9, 0x7e, 0xaa, 0xbd,
	0x68, 0x61, 0xa7, 0xc3, 0x55, 0xff, 0xe1, 0xaa, 0x16, 0xc1, 0x0e, 0x17, 0x9d, 0xeb, 0x3d, 0x8b,
	0xb8, 0xba, 0xcb, 0xfd, 0x4b, 0xb3, 0x75, 0xcb, 0xaa, 0x37, 0xf0, 0x1a, 0xd5, 0xeb, 0xa6, 0x69,
	0xb9, 0x3a, 0x05, 0x41, 0xb8, 0xf6, 0x7f, 0x5c, 0xcb, 0x56, 0xcf, 0x5b, 0x87, 0x6b, 0xae, 0xd1,
	0xc4, 0xc4, 0xd5, 0x9b, 0xb6, 0x67, 0x20, 0x7f, 0x2f, 0xc0, 0xc4, 0xa6, 0xd5, 0x6c, 0x62, 0xd3,
	0x45, 0x59, 0x88, 0x1b, 0x35, 0x51, 0xc8, 0x0b, 0x85, 0xb4, 0x1a, 0x37, 0x6a, 0x48, 0x84, 0x89,
	0x26, 0x26, 0x44, 0xaf, 0x63, 0x31, 0xce, 0x84, 0xfe, 0x12, 0xe5, 0x21, 0x49, 0xb1, 0x89, 0x89,
	0xbc, 0x50, 0xc8, 0x14, 0x27, 0x95, 0x76, 0x51, 0xd9, 0x6b, 0x18, 0xcd, 0x03, 0x82, 0x1d, 0x95,
	0x69, 0xd0, 0x2d, 0x80, 0xaa, 0x83, 0x75, 0x17, 0xd7, 0x34, 0xdd, 0x15, 0x93, 0xcc, 0x4e, 0x52,
	0x3c, 0x34, 0x8a, 0x8f, 0x46, 0xd9, 0xf7, 0xd1, 0xa8, 0x69, 0x6e, 0xbd, 0xee, 0xca, 0xbf, 0x0a,
	0x30, 0x55, 0xf6, 0xd9, 0x2c, 0xbf, 0xb4, 0x0d, 0xa7, 0x83, 0x3e, 0x80, 0x0c, 0x66, 0xff, 0x34,
	0xb7, 0x63, 0x63, 0x86, 0x31, 0x5b, 0x9c, 0xa3, 0xe7, 0x1e, 0xb1, 0x54, 0xbc, 0x9f, 0xfd, 0x8e,
	0x8d, 0x55, 0xc0, 0xc1, 0x7f, 0x8a, 0x87, 0xad, 0x30, 0xd1, 0x2c, 0x93, 0x85, 0x13, 0x81, 0x87,
	0x5b, 0x3f, 0x32, 0xe5, 0x7b, 0x00, 0x5d, 0xa7, 0x28, 0x05, 0xc9, 0xfd, 0xad, 0x9d, 0x72, 0x2e,
	0x86, 0xa6, 0x61, 0x6a, 0x7d, 0x7b, 0x5b, 0xdb, 0x7c, 0x52, 0xd6, 0xee, 0x6f, 0x3d, 0x5d, 0xdf,
	0xd8, 0x2e, 0xe7, 0x04, 0x26, 0xdc, 0xfd, 0xb0, 0x4f, 0x18, 0x97, 0xef, 0xc2, 0x54, 0x09, 0x1f,
	0x62, 0xc7, 0xd1, 0x1b, 0x2a, 0x7e, 0xd1, 0xc2, 0xc4, 0x45, 0x97, 0x61, 0xdc, 0x43, 0xc7, 0x62,
	0xc9, 0x14, 0xa7, 0x43, 0x62, 0x51, 0xb9, 0x89, 0x3c, 0x03, 0x67, 0xef, 0xeb, 0x0d, 0x82, 0x2b,
	0x16, 0x31, 0x5c, 0xa3, 0x8d, 0xb9, 0x13, 0xf9, 0xf7, 0x09, 0x98, 0x79, 0xd2, 0x6a, 0x98, 0xd8,
	0xd1, 0x9f, 0x1b, 0x0d, 0xc3, 0xed, 0x04, 0x0e, 0x8e, 0xdd, 0x25, 0x82, 0xa4, 0xa9, 0x37, 0xfd,
	0x8b, 0x64, 0xff, 0xd1, 0x2d, 0x98, 0x74, 0x75, 0xa7, 0x8e, 0x5d, 0x2f, 0xa1, 0xd8, 0x6d, 0x66,
	0x8b, 0x33, 0x14, 0x49, 0x9f, 0xd7, 0x3d, 0xaa, 0x55, 0x33, 0x9e, 0x2d, 0x5b, 0x50, 0xf8, 0x74,
	0x4f, 0x8b, 0xb0, 0xab, 0xcd, 0x1e, 0x81, 0xbf, 0xc7, 0x54, 0x2a, 0x37, 0xa1, 0x79, 0xe4, 0xb1,
	0x59, 0x13, 0xc7, 0xf2, 0x42, 0x21, 0xa5, 0xfa, 0x4b, 0xb4, 0x0a, 0x69, 0xc7, 0x8b, 0x05, 0x3b,
	0xe2, 0x78, 0x48, 0x32, 0x75, 0xd5, 0xd4, 0x56, 0xb7, 0x6d, 0xc7, 0x6a, 0x63, 0x87, 0x88, 0x13,
	0xf9, 0xc4, 0x71, 0xdb, 0x40, 0x7d, 0x24, 0xfb, 0x52, 0x27, 0xc8, 0x3e, 0x74, 0x07, 0x26, 0x1b,
	0x3a, 0x71, 0xb5, 0x96, 0x5d, 0xa3, 0x12, 0x31, 0x1d, 0xb9, 0x39, 0x43, 0xed, 0x0f, 0x3c, 0x73,
	0x74, 0x09, 0x52, 0x55, 0xaf, 0x9c, 0x88, 0x08, 0x0c, 0x64, 0x86, 0x82, 0xe4, 0x25, 0xa6, 0x06,
	0x4a, 0x74, 0x13, 0xc6, 0x48, 0xd5, 0xb2, 0xb1, 0x98, 0x61, 0x07, 0xe4, 0x8f, 0xb1, 0x1e, 0xb0,
	0xa9, 0xec, 0x51, 0x3b, 0xd5, 0x33, 0x47, 0xf7, 0x20, 0x57, 0xe3, 0xb9, 0xa4, 0x71, 0x72, 0xc4,
	0xc9, 0x6e, 0x0a, 0x1d, 0xc9, 0xb3, 0x87, 0x31, 0x75, 0xaa, 0x76, 0x24, 0xf5, 0x2a, 0x30, 0x73,
	0x48, 0xb3, 0x49, 0xb3, 0x79, 0x3a, 0x05, 0x7e, 0xce, 0x30, 0x3f, 0x22, 0xf5, 0x13, 0x96, 0x6f,
	0x0f, 0x63, 0xea, 0xd9, 0xc3, 0x10, 0x39, 0x4d, 0xae, 0x6a, 0x1b, 0x13, 0x31, 0x9b, 0x4f, 0xd0,
	0xe4, 0xa2, 0xff, 0xd1, 0x1d, 0x08, 0x0e, 0xe6, 0x5c, 0x8a, 0x53, 0xcc, 0x3d, 0xea, 0x85, 0xe9,
	0xd1, 0xf6, 0x50, 0x50, 0xb3, 0xb5, 0x3e, 0x09, 0xda, 0x81, 0xff, 0x1e, 0x01, 0xc9, 0x9d, 0xe4,
	0x98, 0x93, 0x73, 0xc7, 0x30, 0x06, 0x9e, 0xa6, 0x0f, 0x8f, 0x8b, 0xa5, 0xd7, 0x02, 0x8c, 0x31,
	0x1a, 0xd1, 0x03, 0xc8, 0x18, 0x4d, 0xbd, 0x8e, 0x35, 0x8f, 0x7d, 0xaf, 0xfa, 0x96, 0xa3, 0xd8,
	0x57, 0xb6, 0xe8, 0x1e, 0x15, 0xd8, 0x56, 0x26, 0x91, 0x76, 0x60, 0x8c, 0x09, 0x91, 0x04, 0x29,
	0x07, 0xd7, 0x0d, 0xe2, 0xf2, 0x62, 0x4e, 0xab, 0xc1, 0x1a, 0xcd, 0xc0, 0xb8, 0x83, 0x9b, 0x96,
	0xeb, 0x17, 0x1e, 0x5f, 0xa1, 0x1c, 0x24, 0x5c, 0xbd, 0xce, 0x2a, 0x2e, 0xad, 0xd2, 0xbf, 0x1b,
	0x63, 0x90, 0x70, 0xf0, 0x8b, 0x8d, 0x33, 0x90, 0xe1, 0x99, 0x47, 0x6f, 0x45, 0x7e, 0x0c, 0xd9,
	0x7e, 0xaa, 0x02, 0xae, 0x85, 0x1e, 0xae, 0xbb, 0xcd, 0x24, 0x1e, 0xdd, 0x4c, 0x56, 0x60, 0x3a,
	0x84, 0xb8, 0x30, 0xbf, 0xf2, 0xc7, 0x30, 0xff, 0x00, 0xbb, 0xe1, 0xbc, 0xa8, 0x98, 0xd8, 0x96,
	0x49, 0x30, 0x7a, 0x1f, 0xd2, 0xc1, 0xec, 0xe3, 0x74, 0x4a, 0x83, 0xe9, 0x54, 0xbb, 0xc6, 0xb2,
	0x0e, 0x0b, 0xdb, 0x06, 0x19, 0xe0, 0x9f, 0x04, 0x07, 0xdc, 0xa6, 0xad, 0xdb, 0x97, 0x32, 0x7c,
	0xc3, 0x4f, 0xe8, 0xb1, 0x96, 0xdf, 0x08, 0x50, 0xd8, 0x64, 0xb5, 0xcd, 0x68, 0x1c, 0x14, 0x4a,
	0x7f, 0x1a, 0xf7, 0x52, 0x2b, 0xc2, 0x04, 0x2f, 0x59, 0x7f, 0x06, 0xf2, 0x65, 0xb7, 0x80, 0x13,
	0x27, 0x2b, 0xe0, 0xbb, 0x90, 0xeb, 0xbe, 0x15, 0xf8, 0xb5, 0x25, 0x07, 0x5f, 0xdb, 0x14, 0xee,
	0x17, 0xc8, 0x18, 0x56, 0x46, 0x88, 0xe8, 0xd4, 0x97, 0xf3, 0x4a, 0x80, 0x6b, 0xde, 0x39, 0x7d,
	0xd9, 0x72, 0x72, 0x06, 0x03, 0x9e, 0xe2, 0x27, 0xe3, 0xa9, 0x87, 0xf9, 0x44, 0x1f, 0xf3, 0x72,
	0x13, 0xae, 0x9f, 0x00, 0xd9, 0xa9, 0x99, 0xa8, 0xc0, 0xe2, 0xba, 0x37, 0x59, 0x86, 0x07, 0x1f,
	0xf2, 0x7c, 0x0a, 0x4f, 0x1d, 0x59, 0x87, 0xa5, 0x08, 0x8f, 0xa7, 0x06, 0xbd, 0x03, 0xf3, 0x25,
	0x6c, 0x76, 0xde, 0x15, 0xe2, 0x4f, 0x40, 0x1e, 0xe6, 0xee, 0xd4, 0x70, 0xff, 0x16, 0x60, 0xc1,
	0x6b, 0x44, 0xef, 0x08, 0x71, 0xd8, 0xfc, 0x49, 0x0c, 0x9c, 0x3f, 0xb1, 0xd1, 0xe7, 0x4f, 0x72,
	0xf8, 0xfc, 0x89, 0x85, 0xce, 0x9f, 0x8d, 0x14, 0x8c, 0x7b, 0xfb, 0xe5, 0x67, 0xb0, 0x38, 0x3c,
	0xd0, 0x53, 0x73, 0xf9, 0x0c, 0x16, 0x37, 0x75, 0xb3, 0x8a, 0x1b, 0xff, 0xd6, 0x09, 0xab, 0x07,
	0x3d, 0x0f, 0x74, 0xef, 0xad, 0x87, 0x32, 0x30, 0x51, 0x29, 0xef, 0x96, 0xb6, 0x76, 0x1f, 0xe4,
	0x62, 0x68, 0x12, 0x52, 0xeb, 0x95, 0x8a, 0xfa, 0xe8, 0x49, 0xb9, 0x94, 0x13, 0x10, 0xc0, 0x78,
	0xa9, 0xbc, 0xbb, 0x55, 0x2e, 0xe5, 0xe2, 0xe8, 0x02, 0x9c, 0xf3, 0x35, 0x1a, 0xb7, 0xd7, 0x0e,
	0x2a, 0xa5, 0xf5, 0xfd, 0x72, 0x2e, 0x51, 0xfc, 0x36, 0x03, 0x17, 0xc3, 0x0f, 0xdf, 0xf3, 0x3e,
	0xa9, 0xd0, 0xd7, 0x70, 0x7e, 0xe0, 0x40, 0x42, 0x39, 0x0a, 0x5e, 0xc5, 0xc4, 0x6a, 0x39, 0x55,
	0xbc, 0xd1, 0xd9, 0x2a, 0x49, 0x4b, 0x54, 0x12, 0x39, 0xc1, 0xe4, 0x95, 0x6f, 0x7e, 0xfb, 0xeb,
	0x87, 0xf8, 0x02, 0x9a, 0xf7, 0x3f, 0xb0, 0x02, 0xdb, 0xab, 0xdd, 0x51, 0xb2, 0xf6, 0xa5, 0x51,
	0xfb, 0x0a, 0x7d, 0x01, 0x17, 0x86, 0x8c, 0x2c, 0xc4, 0x1e, 0xa4, 0xaa, 0xfe, 0xf9, 0x63, 0xfa,
	0x31, 0x27, 0x5d, 0xa2, 0xab, 0x11, 0x26, 0x9c, 0xbc, 0xc8, 0x00, 0xcc, 0xa1, 0xd9, 0x61, 0x00,
	0xd0, 0xcf, 0x02, 0xcc, 0x47, 0x76, 0x7e, 0x74, 0x85, 0x3d, 0x37, 0x47, 0x1c, 0x79, 0xd2, 0xd5,
	0x11, 0xad, 0x39, 0xd0, 0x6b, 0x0c, 0xe8, 0xaa, 0xbc, 0x34, 0x94, 0x29, 0xbf, 0x94, 0x6e, 0x0b,
	0xab, 0xe8, 0x8d, 0xe0, 0x8f, 0xab, 0x11, 0x9a, 0x35, 0xba, 0xd1, 0x85, 0x33, 0xfa, 0xd4, 0x91,
	0xde, 0x3b, 0xe1, 0x2e, 0x1e, 0xcc, 0x4d, 0x16, 0xcc, 0x35, 0xf9, 0xf2, 0xd0, 0x60, 0x58, 0x35,
	0x5f, 0xf5, 0xbb, 0x00, 0x0d, 0xe9, 0x27, 0x01, 0x2e, 0x0e, 0x6d, 0xdf, 0xa8, 0x40, 0x01, 0x8d,
	0x32, 0x33, 0xa4, 0x95, 0x11, 0x2c, 0x39, 0xdc, 0x1b, 0x0c, 0xae, 0x22, 0xaf, 0x44, 0x66, 0xe9,
	0x1a, 0xff, 0x10, 0xa2, 0x60, 0x7f, 0x14, 0x40, 0x1a, 0xdc, 0xb9, 0xd1, 0x92, 0xd7, 0x0c, 0x23,
	0x06, 0x85, 0xb4, 0x1c, 0x65, 0xc6, 0x31, 0x5e, 0x67, 0x18, 0x2f, 0xcb, 0xcb, 0xd1, 0x18, 0x6b,
	0xd8, 0xec, 0x50, 0x80, 0xaf, 0x05, 0x98, 0x1d, 0xd6, 0x10, 0x11, 0xab, 0xa2, 0x11, 0x66, 0x83,
	0x54, 0x88, 0x36, 0xe4, 0x30, 0xaf, 0x30, 0x98, 0xcb, 0xc5, 0xe8, 0x82, 0xa7, 0x08, 0xbf, 0x13,
	0x60, 0x76, 0x58, 0x43, 0x0d, 0x69, 0x3c, 0x0c, 0xca, 0x28, 0x4d, 0x38, 0xa8, 0xa8, 0x42, 0x34,
	0x63, 0x55, 0xe6, 0x0f, 0x1d, 0xc2, 0x6c, 0x09, 0x37, 0xf0, 0x40, 0xbe, 0x8e, 0xa3, 0x49, 0xb3,
	0x77, 0x65, 0xd3, 0x76, 0x3b, 0x7e, 0xab, 0x5b, 0x8d, 0x8e, 0x7c, 0x43, 0xf9, 0xe5, 0xed, 0x9c,
	0xf0, 0xe6, 0xed, 0x9c, 0xf0, 0xc7, 0xdb, 0x39, 0xe1, 0xd5, 0x9f, 0x73, 0x31, 0x10, 0x0d, 0x4b,
	0x21, 0xae, 0x5e, 0xfd, 0xcc, 0xb1, 0x5e, 0x7a, 0x1f, 0xc2, 0x8a, 0x6e, 0x1b, 0x4a, 0xbb, 0xf8,
	0x51, 0xbc, 0x5d, 0x7c, 0x9a, 0x7c, 0x3e, 0xce, 0x64, 0xff, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x03, 0xac, 0xc1, 0x18, 0x13, 0x00, 0x00,
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExceptionExpiry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExceptionExpiry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExceptionExpiry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresOn != nil {
		{
			size, err := m.ExpiresOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExpiryType != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.ExpiryType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeferralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedReq != nil {
		{
			size := m.UpdatedReq.Size()
			i -= size
			if _, err := m.UpdatedReq.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Approvers) > 0 {
		for iNdEx := len(m.Approvers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Requester != nil {
		{
			size, err := m.Requester.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetState != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.TargetState))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException_DeferralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_DeferralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralRequest != nil {
		{
			size, err := m.DeferralRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_FalsePositiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_FalsePositiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FalsePositiveRequest != nil {
		{
			size, err := m.FalsePositiveRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_DeferralUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_DeferralUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralUpdate != nil {
		{
			size, err := m.DeferralUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_FalsePositiveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_FalsePositiveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FalsePositiveUpdate != nil {
		{
			size, err := m.FalsePositiveUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_Scope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException_Scope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_Scope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageScope != nil {
		{
			size, err := m.ImageScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException_Scope_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException_Scope_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_Scope_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Remote) > 0 {
		i -= len(m.Remote)
		copy(dAtA[i:], m.Remote)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Remote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registry) > 0 {
		i -= len(m.Registry)
		copy(dAtA[i:], m.Registry)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Registry)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeferralUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferralUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferralUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVulnerabilityExceptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVulnerabilityExceptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVulnerabilityExceptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Exceptions) > 0 {
		for iNdEx := len(m.Exceptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exceptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeferVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExceptionExpiry != nil {
		{
			size, err := m.ExceptionExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeferVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Update != nil {
		{
			size := m.Update.Size()
			i -= size
			if _, err := m.Update.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionRequest_DeferralUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionRequest_DeferralUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralUpdate != nil {
		{
			size, err := m.DeferralUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FalsePositiveUpdate != nil {
		{
			size, err := m.FalsePositiveUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UpdateVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVulnExceptionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovVulnExceptionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExceptionExpiry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryType != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.ExpiryType))
	}
	if m.ExpiresOn != nil {
		l = m.ExpiresOn.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.TargetState != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.TargetState))
	}
	if m.Status != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.Status))
	}
	if m.Expired {
		n += 2
	}
	if m.Requester != nil {
		l = m.Requester.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if len(m.Approvers) > 0 {
		for _, e := range m.Approvers {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.UpdatedReq != nil {
		n += m.UpdatedReq.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException_DeferralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralRequest != nil {
		l = m.DeferralRequest.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_FalsePositiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveRequest != nil {
		l = m.FalsePositiveRequest.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_DeferralUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralUpdate != nil {
		l = m.DeferralUpdate.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_FalsePositiveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveUpdate != nil {
		l = m.FalsePositiveUpdate.Size()
		n += 2 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_Scope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageScope != nil {
		l = m.ImageScope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException_Scope_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Remote)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferralUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVulnerabilityExceptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exceptions) > 0 {
		for _, e := range m.Exceptions {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeferVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.ExceptionExpiry != nil {
		l = m.ExceptionExpiry.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeferVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Update != nil {
		n += m.Update.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionRequest_DeferralUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralUpdate != nil {
		l = m.DeferralUpdate.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveUpdate != nil {
		l = m.FalsePositiveUpdate.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *UpdateVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVulnExceptionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVulnExceptionService(x uint64) (n int) {
	return sovVulnExceptionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SlimUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExceptionExpiry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExceptionExpiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExceptionExpiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryType", wireType)
			}
			m.ExpiryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryType |= ExceptionExpiry_ExpiryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresOn == nil {
				m.ExpiresOn = &types.Timestamp{}
			}
			if err := m.ExpiresOn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &ExceptionExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityException: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityException: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetState", wireType)
			}
			m.TargetState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetState |= VulnerabilityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ExceptionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requester == nil {
				m.Requester = &SlimUser{}
			}
			if err := m.Requester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvers = append(m.Approvers, &SlimUser{})
			if err := m.Approvers[len(m.Approvers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityException_DeferralRequest{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityException_FalsePositiveRequest{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityException_DeferralUpdate{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityException_FalsePositiveUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException_Scope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageScope == nil {
				m.ImageScope = &VulnerabilityException_Scope_Image{}
			}
			if err := m.ImageScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException_Scope_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferralUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferralUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferralUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &ExceptionExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVulnerabilityExceptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVulnerabilityExceptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVulnerabilityExceptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exceptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exceptions = append(m.Exceptions, &VulnerabilityException{})
			if err := m.Exceptions[len(m.Exceptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeferVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptionExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExceptionExpiry == nil {
				m.ExceptionExpiry = &ExceptionExpiry{}
			}
			if err := m.ExceptionExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeferVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateVulnerabilityExceptionRequest_DeferralUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateVulnerabilityExceptionRequest_FalsePositiveUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &VulnerabilityException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVulnExceptionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVulnExceptionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVulnExceptionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVulnExceptionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVulnExceptionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVulnExceptionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVulnExceptionService = fmt.Errorf("proto: unexpected end of group")
)
