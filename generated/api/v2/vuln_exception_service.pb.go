// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/vuln_exception_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Indicates the status of a request.
type RequestStatus int32

const (
	// Default request state. It indicates that the request has not been fulfilled and that an action (approve/deny) is required.
	RequestStatus_PENDING RequestStatus = 0
	// Indicates that the request has been approved by the approver.
	RequestStatus_APPROVED RequestStatus = 1
	// Indicates that the request has been denied by the approver.
	RequestStatus_DENIED RequestStatus = 2
	// Indicates that the original request was approved, but an update is still pending an approval or denial.
	RequestStatus_APPROVED_PENDING_UPDATE RequestStatus = 3
)

var RequestStatus_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "APPROVED_PENDING_UPDATE",
}

var RequestStatus_value = map[string]int32{
	"PENDING":                 0,
	"APPROVED":                1,
	"DENIED":                  2,
	"APPROVED_PENDING_UPDATE": 3,
}

func (x RequestStatus) String() string {
	return proto.EnumName(RequestStatus_name, int32(x))
}

func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{0}
}

type RequestExpiry_ExpiryType int32

const (
	RequestExpiry_TIME            RequestExpiry_ExpiryType = 0
	RequestExpiry_ALL_CVE_FIXABLE RequestExpiry_ExpiryType = 1
	RequestExpiry_ANY_CVE_FIXABLE RequestExpiry_ExpiryType = 2
)

var RequestExpiry_ExpiryType_name = map[int32]string{
	0: "TIME",
	1: "ALL_CVE_FIXABLE",
	2: "ANY_CVE_FIXABLE",
}

var RequestExpiry_ExpiryType_value = map[string]int32{
	"TIME":            0,
	"ALL_CVE_FIXABLE": 1,
	"ANY_CVE_FIXABLE": 2,
}

func (x RequestExpiry_ExpiryType) String() string {
	return proto.EnumName(RequestExpiry_ExpiryType_name, int32(x))
}

func (RequestExpiry_ExpiryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{1, 0}
}

type CreateDeferVulnerabilityExceptionRequest_ExpiryType int32

const (
	CreateDeferVulnerabilityExceptionRequest_TIME            CreateDeferVulnerabilityExceptionRequest_ExpiryType = 0
	CreateDeferVulnerabilityExceptionRequest_ALL_CVE_FIXABLE CreateDeferVulnerabilityExceptionRequest_ExpiryType = 1
	CreateDeferVulnerabilityExceptionRequest_ANY_CVE_FIXABLE CreateDeferVulnerabilityExceptionRequest_ExpiryType = 2
)

var CreateDeferVulnerabilityExceptionRequest_ExpiryType_name = map[int32]string{
	0: "TIME",
	1: "ALL_CVE_FIXABLE",
	2: "ANY_CVE_FIXABLE",
}

var CreateDeferVulnerabilityExceptionRequest_ExpiryType_value = map[string]int32{
	"TIME":            0,
	"ALL_CVE_FIXABLE": 1,
	"ANY_CVE_FIXABLE": 2,
}

func (x CreateDeferVulnerabilityExceptionRequest_ExpiryType) String() string {
	return proto.EnumName(CreateDeferVulnerabilityExceptionRequest_ExpiryType_name, int32(x))
}

func (CreateDeferVulnerabilityExceptionRequest_ExpiryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{7, 0}
}

type RequestComment struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	User                 *SlimUser        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequestComment) Reset()         { *m = RequestComment{} }
func (m *RequestComment) String() string { return proto.CompactTextString(m) }
func (*RequestComment) ProtoMessage()    {}
func (*RequestComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{0}
}
func (m *RequestComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestComment.Merge(m, src)
}
func (m *RequestComment) XXX_Size() int {
	return m.Size()
}
func (m *RequestComment) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestComment.DiscardUnknown(m)
}

var xxx_messageInfo_RequestComment proto.InternalMessageInfo

func (m *RequestComment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestComment) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestComment) GetUser() *SlimUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestComment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RequestComment) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RequestComment) Clone() *RequestComment {
	if m == nil {
		return nil
	}
	cloned := new(RequestComment)
	*cloned = *m

	cloned.User = m.User.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

type RequestExpiry struct {
	// This field can be used only for deferral requests. It indicates the type of expiry set for the request.
	// `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
	// `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.
	// `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
	ExpiryType RequestExpiry_ExpiryType `protobuf:"varint,1,opt,name=expiry_type,json=expiryType,proto3,enum=v2.RequestExpiry_ExpiryType" json:"expiry_type,omitempty"`
	// Indicates the timestamp when this request expires. This field must be set only if the expiry type is set to TIME.
	ExpiresOn            *types.Timestamp `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequestExpiry) Reset()         { *m = RequestExpiry{} }
func (m *RequestExpiry) String() string { return proto.CompactTextString(m) }
func (*RequestExpiry) ProtoMessage()    {}
func (*RequestExpiry) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{1}
}
func (m *RequestExpiry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestExpiry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestExpiry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestExpiry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestExpiry.Merge(m, src)
}
func (m *RequestExpiry) XXX_Size() int {
	return m.Size()
}
func (m *RequestExpiry) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestExpiry.DiscardUnknown(m)
}

var xxx_messageInfo_RequestExpiry proto.InternalMessageInfo

func (m *RequestExpiry) GetExpiryType() RequestExpiry_ExpiryType {
	if m != nil {
		return m.ExpiryType
	}
	return RequestExpiry_TIME
}

func (m *RequestExpiry) GetExpiresOn() *types.Timestamp {
	if m != nil {
		return m.ExpiresOn
	}
	return nil
}

func (m *RequestExpiry) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RequestExpiry) Clone() *RequestExpiry {
	if m == nil {
		return nil
	}
	cloned := new(RequestExpiry)
	*cloned = *m

	cloned.ExpiresOn = m.ExpiresOn.Clone()
	return cloned
}

type DeferralRequest struct {
	Expiry               *RequestExpiry `protobuf:"bytes,1,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeferralRequest) Reset()         { *m = DeferralRequest{} }
func (m *DeferralRequest) String() string { return proto.CompactTextString(m) }
func (*DeferralRequest) ProtoMessage()    {}
func (*DeferralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{2}
}
func (m *DeferralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferralRequest.Merge(m, src)
}
func (m *DeferralRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeferralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeferralRequest proto.InternalMessageInfo

func (m *DeferralRequest) GetExpiry() *RequestExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferralRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferralRequest) Clone() *DeferralRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeferralRequest)
	*cloned = *m

	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type FalsePositiveRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FalsePositiveRequest) Reset()         { *m = FalsePositiveRequest{} }
func (m *FalsePositiveRequest) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveRequest) ProtoMessage()    {}
func (*FalsePositiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{3}
}
func (m *FalsePositiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveRequest.Merge(m, src)
}
func (m *FalsePositiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveRequest proto.InternalMessageInfo

func (m *FalsePositiveRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveRequest) Clone() *FalsePositiveRequest {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveRequest)
	*cloned = *m

	return cloned
}

// Next available tag: 16
// VulnerabilityException represents an vulnerability exception such as deferral and false-positive.
type VulnerabilityException struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Auto-generated display name of the exception.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates the state that the vulnerabilities will move to once the exception is enforced.
	TargetState VulnerabilityState `protobuf:"varint,3,opt,name=target_state,json=targetState,proto3,enum=v2.VulnerabilityState" json:"target_state,omitempty"`
	// Indicates the status of a exception request.
	Status RequestStatus `protobuf:"varint,4,opt,name=status,proto3,enum=v2.RequestStatus" json:"status,omitempty"`
	// If set to `true`, this field indicates that the request that is no longer enforced.
	Expired     bool              `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	Requester   *SlimUser         `protobuf:"bytes,6,opt,name=requester,proto3" json:"requester,omitempty"`
	Approvers   []*SlimUser       `protobuf:"bytes,7,rep,name=approvers,proto3" json:"approvers,omitempty"`
	CreatedAt   *types.Timestamp  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUpdated *types.Timestamp  `protobuf:"bytes,9,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Comments    []*RequestComment `protobuf:"bytes,10,rep,name=comments,proto3" json:"comments,omitempty"`
	// Indicates the scope of enforcement of this exception.
	Scope *VulnerabilityException_Scope `protobuf:"bytes,11,opt,name=scope,proto3" json:"scope,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*VulnerabilityException_DeferralReq
	//	*VulnerabilityException_FpRequest
	Req isVulnerabilityException_Req `protobuf_oneof:"req"`
	// Indicates the CVEs that to which this exception applies.
	Cves []string `protobuf:"bytes,14,rep,name=cves,proto3" json:"cves,omitempty"`
	// Types that are valid to be assigned to UpdatedReq:
	//	*VulnerabilityException_DeferralReqUpdate
	UpdatedReq           isVulnerabilityException_UpdatedReq `protobuf_oneof:"updated_req"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VulnerabilityException) Reset()         { *m = VulnerabilityException{} }
func (m *VulnerabilityException) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException) ProtoMessage()    {}
func (*VulnerabilityException) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4}
}
func (m *VulnerabilityException) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException.Merge(m, src)
}
func (m *VulnerabilityException) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException proto.InternalMessageInfo

type isVulnerabilityException_Req interface {
	isVulnerabilityException_Req()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityException_Req
}
type isVulnerabilityException_UpdatedReq interface {
	isVulnerabilityException_UpdatedReq()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isVulnerabilityException_UpdatedReq
}

type VulnerabilityException_DeferralReq struct {
	DeferralReq *DeferralRequest `protobuf:"bytes,12,opt,name=deferral_req,json=deferralReq,proto3,oneof" json:"deferral_req,omitempty"`
}
type VulnerabilityException_FpRequest struct {
	FpRequest *FalsePositiveRequest `protobuf:"bytes,13,opt,name=fp_request,json=fpRequest,proto3,oneof" json:"fp_request,omitempty"`
}
type VulnerabilityException_DeferralReqUpdate struct {
	DeferralReqUpdate *DeferralRequest `protobuf:"bytes,15,opt,name=deferral_req_update,json=deferralReqUpdate,proto3,oneof" json:"deferral_req_update,omitempty"`
}

func (*VulnerabilityException_DeferralReq) isVulnerabilityException_Req() {}
func (m *VulnerabilityException_DeferralReq) Clone() isVulnerabilityException_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_DeferralReq)
	*cloned = *m

	cloned.DeferralReq = m.DeferralReq.Clone()
	return cloned
}
func (*VulnerabilityException_FpRequest) isVulnerabilityException_Req() {}
func (m *VulnerabilityException_FpRequest) Clone() isVulnerabilityException_Req {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_FpRequest)
	*cloned = *m

	cloned.FpRequest = m.FpRequest.Clone()
	return cloned
}
func (*VulnerabilityException_DeferralReqUpdate) isVulnerabilityException_UpdatedReq() {}
func (m *VulnerabilityException_DeferralReqUpdate) Clone() isVulnerabilityException_UpdatedReq {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_DeferralReqUpdate)
	*cloned = *m

	cloned.DeferralReqUpdate = m.DeferralReqUpdate.Clone()
	return cloned
}

func (m *VulnerabilityException) GetReq() isVulnerabilityException_Req {
	if m != nil {
		return m.Req
	}
	return nil
}
func (m *VulnerabilityException) GetUpdatedReq() isVulnerabilityException_UpdatedReq {
	if m != nil {
		return m.UpdatedReq
	}
	return nil
}

func (m *VulnerabilityException) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VulnerabilityException) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityException) GetTargetState() VulnerabilityState {
	if m != nil {
		return m.TargetState
	}
	return VulnerabilityState_OBSERVED
}

func (m *VulnerabilityException) GetStatus() RequestStatus {
	if m != nil {
		return m.Status
	}
	return RequestStatus_PENDING
}

func (m *VulnerabilityException) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *VulnerabilityException) GetRequester() *SlimUser {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *VulnerabilityException) GetApprovers() []*SlimUser {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *VulnerabilityException) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *VulnerabilityException) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *VulnerabilityException) GetComments() []*RequestComment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *VulnerabilityException) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *VulnerabilityException) GetDeferralReq() *DeferralRequest {
	if x, ok := m.GetReq().(*VulnerabilityException_DeferralReq); ok {
		return x.DeferralReq
	}
	return nil
}

func (m *VulnerabilityException) GetFpRequest() *FalsePositiveRequest {
	if x, ok := m.GetReq().(*VulnerabilityException_FpRequest); ok {
		return x.FpRequest
	}
	return nil
}

func (m *VulnerabilityException) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *VulnerabilityException) GetDeferralReqUpdate() *DeferralRequest {
	if x, ok := m.GetUpdatedReq().(*VulnerabilityException_DeferralReqUpdate); ok {
		return x.DeferralReqUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VulnerabilityException) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VulnerabilityException_DeferralReq)(nil),
		(*VulnerabilityException_FpRequest)(nil),
		(*VulnerabilityException_DeferralReqUpdate)(nil),
	}
}

func (m *VulnerabilityException) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException) Clone() *VulnerabilityException {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException)
	*cloned = *m

	cloned.Requester = m.Requester.Clone()
	if m.Approvers != nil {
		cloned.Approvers = make([]*SlimUser, len(m.Approvers))
		for idx, v := range m.Approvers {
			cloned.Approvers[idx] = v.Clone()
		}
	}
	cloned.CreatedAt = m.CreatedAt.Clone()
	cloned.LastUpdated = m.LastUpdated.Clone()
	if m.Comments != nil {
		cloned.Comments = make([]*RequestComment, len(m.Comments))
		for idx, v := range m.Comments {
			cloned.Comments[idx] = v.Clone()
		}
	}
	cloned.Scope = m.Scope.Clone()
	if m.Req != nil {
		cloned.Req = m.Req.Clone()
	}
	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	if m.UpdatedReq != nil {
		cloned.UpdatedReq = m.UpdatedReq.Clone()
	}
	return cloned
}

type VulnerabilityException_Scope struct {
	// This field can be used to apply the request to selected images.
	ImageScope           *VulnerabilityException_Scope_Image `protobuf:"bytes,1,opt,name=image_scope,json=imageScope,proto3" json:"image_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VulnerabilityException_Scope) Reset()         { *m = VulnerabilityException_Scope{} }
func (m *VulnerabilityException_Scope) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException_Scope) ProtoMessage()    {}
func (*VulnerabilityException_Scope) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4, 0}
}
func (m *VulnerabilityException_Scope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException_Scope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException_Scope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException_Scope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException_Scope.Merge(m, src)
}
func (m *VulnerabilityException_Scope) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException_Scope) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException_Scope.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException_Scope proto.InternalMessageInfo

func (m *VulnerabilityException_Scope) GetImageScope() *VulnerabilityException_Scope_Image {
	if m != nil {
		return m.ImageScope
	}
	return nil
}

func (m *VulnerabilityException_Scope) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException_Scope) Clone() *VulnerabilityException_Scope {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_Scope)
	*cloned = *m

	cloned.ImageScope = m.ImageScope.Clone()
	return cloned
}

type VulnerabilityException_Scope_Image struct {
	Registry             string   `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	Remote               string   `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityException_Scope_Image) Reset()         { *m = VulnerabilityException_Scope_Image{} }
func (m *VulnerabilityException_Scope_Image) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityException_Scope_Image) ProtoMessage()    {}
func (*VulnerabilityException_Scope_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{4, 0, 0}
}
func (m *VulnerabilityException_Scope_Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityException_Scope_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityException_Scope_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityException_Scope_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityException_Scope_Image.Merge(m, src)
}
func (m *VulnerabilityException_Scope_Image) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityException_Scope_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityException_Scope_Image.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityException_Scope_Image proto.InternalMessageInfo

func (m *VulnerabilityException_Scope_Image) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) GetRemote() string {
	if m != nil {
		return m.Remote
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *VulnerabilityException_Scope_Image) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityException_Scope_Image) Clone() *VulnerabilityException_Scope_Image {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityException_Scope_Image)
	*cloned = *m

	return cloned
}

type GetVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetVulnerabilityExceptionResponse) Reset()         { *m = GetVulnerabilityExceptionResponse{} }
func (m *GetVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*GetVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*GetVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{5}
}
func (m *GetVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *GetVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *GetVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *GetVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetVulnerabilityExceptionResponse) Clone() *GetVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type ListVulnerabilityExceptionsResponse struct {
	RequestInfos         []*VulnerabilityException `protobuf:"bytes,1,rep,name=request_infos,json=requestInfos,proto3" json:"request_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListVulnerabilityExceptionsResponse) Reset()         { *m = ListVulnerabilityExceptionsResponse{} }
func (m *ListVulnerabilityExceptionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListVulnerabilityExceptionsResponse) ProtoMessage()    {}
func (*ListVulnerabilityExceptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{6}
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVulnerabilityExceptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVulnerabilityExceptionsResponse.Merge(m, src)
}
func (m *ListVulnerabilityExceptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVulnerabilityExceptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVulnerabilityExceptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVulnerabilityExceptionsResponse proto.InternalMessageInfo

func (m *ListVulnerabilityExceptionsResponse) GetRequestInfos() []*VulnerabilityException {
	if m != nil {
		return m.RequestInfos
	}
	return nil
}

func (m *ListVulnerabilityExceptionsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListVulnerabilityExceptionsResponse) Clone() *ListVulnerabilityExceptionsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListVulnerabilityExceptionsResponse)
	*cloned = *m

	if m.RequestInfos != nil {
		cloned.RequestInfos = make([]*VulnerabilityException, len(m.RequestInfos))
		for idx, v := range m.RequestInfos {
			cloned.RequestInfos[idx] = v.Clone()
		}
	}
	return cloned
}

// next available tag: 8
type CreateDeferVulnerabilityExceptionRequest struct {
	// Indicates the CVEs to the exception should be applied.
	Cves    []string                      `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	Comment string                        `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Scope   *VulnerabilityException_Scope `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// This field can be used only for deferral requests. It indicates the type of expiry set for the request.
	// `TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.
	// `ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.
	// `ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable.
	ExpiryType CreateDeferVulnerabilityExceptionRequest_ExpiryType `protobuf:"varint,4,opt,name=expiry_type,json=expiryType,proto3,enum=v2.CreateDeferVulnerabilityExceptionRequest_ExpiryType" json:"expiry_type,omitempty"`
	// Indicates the timestamp when this request expires. This field must be set only if the expiry type is set to TIME.
	ExpiresOn            *types.Timestamp `protobuf:"bytes,5,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateDeferVulnerabilityExceptionRequest) Reset() {
	*m = CreateDeferVulnerabilityExceptionRequest{}
}
func (m *CreateDeferVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDeferVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*CreateDeferVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{7}
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeferVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeferVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *CreateDeferVulnerabilityExceptionRequest) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetExpiryType() CreateDeferVulnerabilityExceptionRequest_ExpiryType {
	if m != nil {
		return m.ExpiryType
	}
	return CreateDeferVulnerabilityExceptionRequest_TIME
}

func (m *CreateDeferVulnerabilityExceptionRequest) GetExpiresOn() *types.Timestamp {
	if m != nil {
		return m.ExpiresOn
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateDeferVulnerabilityExceptionRequest) Clone() *CreateDeferVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateDeferVulnerabilityExceptionRequest)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	cloned.Scope = m.Scope.Clone()
	cloned.ExpiresOn = m.ExpiresOn.Clone()
	return cloned
}

type CreateDeferVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateDeferVulnerabilityExceptionResponse) Reset() {
	*m = CreateDeferVulnerabilityExceptionResponse{}
}
func (m *CreateDeferVulnerabilityExceptionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CreateDeferVulnerabilityExceptionResponse) ProtoMessage() {}
func (*CreateDeferVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{8}
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeferVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeferVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CreateDeferVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateDeferVulnerabilityExceptionResponse) Clone() *CreateDeferVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateDeferVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type CreateFalsePositiveVulnerabilityExceptionRequest struct {
	// This field is under development. This field indicates the CVEs requested to be marked as false-positive.
	// Only one field, `cve` or `cves`, can be set in the request.
	Cves                 []string                      `protobuf:"bytes,1,rep,name=cves,proto3" json:"cves,omitempty"`
	Scope                *VulnerabilityException_Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment              string                        `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Reset() {
	*m = CreateFalsePositiveVulnerabilityExceptionRequest{}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CreateFalsePositiveVulnerabilityExceptionRequest) ProtoMessage() {}
func (*CreateFalsePositiveVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{9}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetScope() *VulnerabilityException_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Clone() *CreateFalsePositiveVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateFalsePositiveVulnerabilityExceptionRequest)
	*cloned = *m

	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	cloned.Scope = m.Scope.Clone()
	return cloned
}

type CreateFalsePositiveVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Reset() {
	*m = CreateFalsePositiveVulnerabilityExceptionResponse{}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CreateFalsePositiveVulnerabilityExceptionResponse) ProtoMessage() {}
func (*CreateFalsePositiveVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{10}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFalsePositiveVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Clone() *CreateFalsePositiveVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateFalsePositiveVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type ApproveVulnerabilityExceptionRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveVulnerabilityExceptionRequest) Reset()         { *m = ApproveVulnerabilityExceptionRequest{} }
func (m *ApproveVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*ApproveVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{11}
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *ApproveVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApproveVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ApproveVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnerabilityExceptionRequest) Clone() *ApproveVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnerabilityExceptionRequest)
	*cloned = *m

	return cloned
}

type ApproveVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ApproveVulnerabilityExceptionResponse) Reset()         { *m = ApproveVulnerabilityExceptionResponse{} }
func (m *ApproveVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*ApproveVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{12}
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *ApproveVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *ApproveVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnerabilityExceptionResponse) Clone() *ApproveVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type DenyVulnerabilityExceptionRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenyVulnerabilityExceptionRequest) Reset()         { *m = DenyVulnerabilityExceptionRequest{} }
func (m *DenyVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*DenyVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*DenyVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{13}
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *DenyVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *DenyVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DenyVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *DenyVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnerabilityExceptionRequest) Clone() *DenyVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnerabilityExceptionRequest)
	*cloned = *m

	return cloned
}

type DenyVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DenyVulnerabilityExceptionResponse) Reset()         { *m = DenyVulnerabilityExceptionResponse{} }
func (m *DenyVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*DenyVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*DenyVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{14}
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *DenyVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *DenyVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *DenyVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnerabilityExceptionResponse) Clone() *DenyVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type UpdateVulnerabilityExceptionRequest struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string         `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Expiry               *RequestExpiry `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Cves                 []string       `protobuf:"bytes,4,rep,name=cves,proto3" json:"cves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateVulnerabilityExceptionRequest) Reset()         { *m = UpdateVulnerabilityExceptionRequest{} }
func (m *UpdateVulnerabilityExceptionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnerabilityExceptionRequest) ProtoMessage()    {}
func (*UpdateVulnerabilityExceptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{15}
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionRequest.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionRequest proto.InternalMessageInfo

func (m *UpdateVulnerabilityExceptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateVulnerabilityExceptionRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *UpdateVulnerabilityExceptionRequest) GetExpiry() *RequestExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionRequest) GetCves() []string {
	if m != nil {
		return m.Cves
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionRequest) Clone() *UpdateVulnerabilityExceptionRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionRequest)
	*cloned = *m

	cloned.Expiry = m.Expiry.Clone()
	if m.Cves != nil {
		cloned.Cves = make([]string, len(m.Cves))
		copy(cloned.Cves, m.Cves)
	}
	return cloned
}

type UpdateVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpdateVulnerabilityExceptionResponse) Reset()         { *m = UpdateVulnerabilityExceptionResponse{} }
func (m *UpdateVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*UpdateVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{16}
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *UpdateVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionResponse) Clone() *UpdateVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type CancelVulnerabilityExceptionResponse struct {
	RequestInfo          *VulnerabilityException `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CancelVulnerabilityExceptionResponse) Reset()         { *m = CancelVulnerabilityExceptionResponse{} }
func (m *CancelVulnerabilityExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*CancelVulnerabilityExceptionResponse) ProtoMessage()    {}
func (*CancelVulnerabilityExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_915f69594385714b, []int{17}
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelVulnerabilityExceptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelVulnerabilityExceptionResponse.Merge(m, src)
}
func (m *CancelVulnerabilityExceptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CancelVulnerabilityExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelVulnerabilityExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelVulnerabilityExceptionResponse proto.InternalMessageInfo

func (m *CancelVulnerabilityExceptionResponse) GetRequestInfo() *VulnerabilityException {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *CancelVulnerabilityExceptionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CancelVulnerabilityExceptionResponse) Clone() *CancelVulnerabilityExceptionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CancelVulnerabilityExceptionResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("v2.RequestStatus", RequestStatus_name, RequestStatus_value)
	proto.RegisterEnum("v2.RequestExpiry_ExpiryType", RequestExpiry_ExpiryType_name, RequestExpiry_ExpiryType_value)
	proto.RegisterEnum("v2.CreateDeferVulnerabilityExceptionRequest_ExpiryType", CreateDeferVulnerabilityExceptionRequest_ExpiryType_name, CreateDeferVulnerabilityExceptionRequest_ExpiryType_value)
	proto.RegisterType((*RequestComment)(nil), "v2.RequestComment")
	proto.RegisterType((*RequestExpiry)(nil), "v2.RequestExpiry")
	proto.RegisterType((*DeferralRequest)(nil), "v2.DeferralRequest")
	proto.RegisterType((*FalsePositiveRequest)(nil), "v2.FalsePositiveRequest")
	proto.RegisterType((*VulnerabilityException)(nil), "v2.VulnerabilityException")
	proto.RegisterType((*VulnerabilityException_Scope)(nil), "v2.VulnerabilityException.Scope")
	proto.RegisterType((*VulnerabilityException_Scope_Image)(nil), "v2.VulnerabilityException.Scope.Image")
	proto.RegisterType((*GetVulnerabilityExceptionResponse)(nil), "v2.GetVulnerabilityExceptionResponse")
	proto.RegisterType((*ListVulnerabilityExceptionsResponse)(nil), "v2.ListVulnerabilityExceptionsResponse")
	proto.RegisterType((*CreateDeferVulnerabilityExceptionRequest)(nil), "v2.CreateDeferVulnerabilityExceptionRequest")
	proto.RegisterType((*CreateDeferVulnerabilityExceptionResponse)(nil), "v2.CreateDeferVulnerabilityExceptionResponse")
	proto.RegisterType((*CreateFalsePositiveVulnerabilityExceptionRequest)(nil), "v2.CreateFalsePositiveVulnerabilityExceptionRequest")
	proto.RegisterType((*CreateFalsePositiveVulnerabilityExceptionResponse)(nil), "v2.CreateFalsePositiveVulnerabilityExceptionResponse")
	proto.RegisterType((*ApproveVulnerabilityExceptionRequest)(nil), "v2.ApproveVulnerabilityExceptionRequest")
	proto.RegisterType((*ApproveVulnerabilityExceptionResponse)(nil), "v2.ApproveVulnerabilityExceptionResponse")
	proto.RegisterType((*DenyVulnerabilityExceptionRequest)(nil), "v2.DenyVulnerabilityExceptionRequest")
	proto.RegisterType((*DenyVulnerabilityExceptionResponse)(nil), "v2.DenyVulnerabilityExceptionResponse")
	proto.RegisterType((*UpdateVulnerabilityExceptionRequest)(nil), "v2.UpdateVulnerabilityExceptionRequest")
	proto.RegisterType((*UpdateVulnerabilityExceptionResponse)(nil), "v2.UpdateVulnerabilityExceptionResponse")
	proto.RegisterType((*CancelVulnerabilityExceptionResponse)(nil), "v2.CancelVulnerabilityExceptionResponse")
}

func init() {
	proto.RegisterFile("api/v2/vuln_exception_service.proto", fileDescriptor_915f69594385714b)
}

var fileDescriptor_915f69594385714b = []byte{
	// 1400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0xf9, 0xe7, 0x67, 0x27, 0x75, 0x27, 0x28, 0xdd, 0x6e, 0xd3, 0xe0, 0x6c, 0xfe,
	0xe0, 0xa4, 0xed, 0xa6, 0x35, 0xa5, 0x50, 0x44, 0x05, 0x49, 0xec, 0xb6, 0x96, 0xd2, 0x34, 0x6c,
	0xd2, 0xaa, 0x70, 0x59, 0x6d, 0xd6, 0x63, 0xb3, 0x60, 0xef, 0x6e, 0x76, 0xc6, 0xa6, 0x06, 0x21,
	0x24, 0xae, 0x20, 0x2e, 0x1c, 0xe8, 0x89, 0xde, 0x39, 0xf2, 0x29, 0x90, 0xb8, 0x54, 0xe2, 0x0b,
	0xa0, 0x82, 0xc4, 0xb7, 0x40, 0x68, 0x66, 0x67, 0xfd, 0xa7, 0xb1, 0xbd, 0xb6, 0x64, 0x38, 0xd9,
	0xf3, 0xe6, 0x37, 0xf3, 0x7e, 0xef, 0xcd, 0x6f, 0xde, 0x9b, 0x85, 0x55, 0xd3, 0xb3, 0xb7, 0x1b,
	0xb9, 0xed, 0x46, 0xbd, 0xea, 0x18, 0xf8, 0xa9, 0x85, 0x3d, 0x6a, 0xbb, 0x8e, 0x41, 0xb0, 0xdf,
	0xb0, 0x2d, 0xac, 0x79, 0xbe, 0x4b, 0x5d, 0x14, 0x6b, 0xe4, 0x94, 0xa5, 0x8a, 0xeb, 0x56, 0xaa,
	0x78, 0x9b, 0xe1, 0x4d, 0xc7, 0x71, 0xa9, 0xc9, 0x80, 0x24, 0x40, 0x28, 0xaf, 0x8b, 0x59, 0x3e,
	0x3a, 0xa9, 0x97, 0xb7, 0xa9, 0x5d, 0xc3, 0x84, 0x9a, 0x35, 0x4f, 0x00, 0x16, 0x84, 0x1f, 0xcb,
	0xad, 0xd5, 0x5c, 0x47, 0x18, 0x2f, 0x0a, 0x23, 0xc1, 0xa6, 0x6f, 0x7d, 0x62, 0x9c, 0xd6, 0xb1,
	0xdf, 0x14, 0x53, 0xe7, 0xc5, 0x54, 0x9d, 0x60, 0x5f, 0x98, 0x2e, 0x74, 0x52, 0x25, 0xd4, 0xa4,
	0x82, 0x9e, 0xfa, 0xa3, 0x04, 0xf3, 0x3a, 0x3e, 0xad, 0x63, 0x42, 0xf7, 0xdc, 0x5a, 0x0d, 0x3b,
	0x14, 0xcd, 0x43, 0xcc, 0x2e, 0xc9, 0x52, 0x46, 0xca, 0x26, 0xf4, 0x98, 0x5d, 0x42, 0x32, 0xcc,
	0xd4, 0x30, 0x21, 0x66, 0x05, 0xcb, 0x31, 0x6e, 0x0c, 0x87, 0x28, 0x03, 0x93, 0xcc, 0x87, 0x1c,
	0xcf, 0x48, 0xd9, 0x64, 0x2e, 0xa5, 0x35, 0x72, 0xda, 0x51, 0xd5, 0xae, 0x3d, 0x22, 0xd8, 0xd7,
	0xf9, 0x0c, 0xba, 0x0d, 0x60, 0xf9, 0xd8, 0xa4, 0xb8, 0x64, 0x98, 0x54, 0x9e, 0xe4, 0x38, 0x45,
	0x0b, 0x02, 0xd6, 0xc2, 0x80, 0xb5, 0xe3, 0x30, 0x60, 0x3d, 0x21, 0xd0, 0x3b, 0x54, 0xfd, 0x4d,
	0x82, 0x39, 0xc1, 0xac, 0xf0, 0xd4, 0xb3, 0xfd, 0x26, 0xba, 0x03, 0x49, 0xcc, 0xff, 0x19, 0xb4,
	0xe9, 0x61, 0xce, 0x70, 0x3e, 0xb7, 0xc4, 0xbc, 0x76, 0xe1, 0xb4, 0xe0, 0xe7, 0xb8, 0xe9, 0x61,
	0x1d, 0x70, 0xeb, 0x3f, 0xe3, 0xc2, 0x47, 0x98, 0x18, 0xae, 0xc3, 0x43, 0x89, 0xe0, 0x22, 0xd0,
	0x0f, 0x1d, 0xf5, 0x03, 0x80, 0xf6, 0xa6, 0x68, 0x16, 0x26, 0x8f, 0x8b, 0x0f, 0x0a, 0xe9, 0x09,
	0xb4, 0x00, 0xe7, 0x76, 0xf6, 0xf7, 0x8d, 0xbd, 0xc7, 0x05, 0xe3, 0x6e, 0xf1, 0xc9, 0xce, 0xee,
	0x7e, 0x21, 0x2d, 0x71, 0xe3, 0xc1, 0x47, 0x5d, 0xc6, 0x98, 0xfa, 0x1e, 0x9c, 0xcb, 0xe3, 0x32,
	0xf6, 0x7d, 0xb3, 0x2a, 0xc8, 0xa2, 0x4d, 0x98, 0x0e, 0xd8, 0xf1, 0x48, 0x92, 0xb9, 0xf3, 0x67,
	0x22, 0xd1, 0x05, 0x40, 0x5d, 0x84, 0xd7, 0xee, 0x9a, 0x55, 0x82, 0x0f, 0x5d, 0x62, 0x53, 0xbb,
	0x81, 0x05, 0x4a, 0xfd, 0x67, 0x1a, 0x16, 0x1f, 0xd7, 0xab, 0x0e, 0xf6, 0xcd, 0x13, 0xbb, 0x6a,
	0xd3, 0x66, 0x21, 0x54, 0xe1, 0x99, 0x53, 0x44, 0x30, 0xe9, 0x98, 0xb5, 0xf0, 0x08, 0xf9, 0x7f,
	0x74, 0x1b, 0x52, 0xd4, 0xf4, 0x2b, 0x98, 0x06, 0x92, 0xe0, 0xe7, 0x38, 0x9f, 0x5b, 0x64, 0x3c,
	0xba, 0x76, 0x3d, 0x62, 0xb3, 0x7a, 0x32, 0xc0, 0xf2, 0x01, 0x23, 0xcf, 0xd6, 0xd4, 0x09, 0x3f,
	0xd4, 0xf9, 0x2e, 0xf2, 0x47, 0x7c, 0x42, 0x17, 0x00, 0xa6, 0x9f, 0x20, 0x93, 0x25, 0x79, 0x2a,
	0x23, 0x65, 0x67, 0xf5, 0x70, 0x88, 0xb6, 0x20, 0xe1, 0x07, 0x4b, 0xb0, 0x2f, 0x4f, 0xf7, 0x10,
	0x51, 0x7b, 0x9a, 0x61, 0x4d, 0xcf, 0xf3, 0xdd, 0x06, 0xf6, 0x89, 0x3c, 0x93, 0x89, 0x9f, 0xc5,
	0xb6, 0xa6, 0x5f, 0x51, 0xdd, 0xec, 0x08, 0xaa, 0x43, 0x77, 0x20, 0x55, 0x35, 0x09, 0x35, 0xea,
	0x5e, 0x89, 0x59, 0xe4, 0x44, 0xe4, 0xe2, 0x24, 0xc3, 0x3f, 0x0a, 0xe0, 0x48, 0x83, 0x59, 0x2b,
	0xb8, 0x46, 0x44, 0x06, 0x4e, 0x12, 0x75, 0x24, 0x46, 0xdc, 0x30, 0xbd, 0x85, 0x41, 0xb7, 0x60,
	0x8a, 0x58, 0xae, 0x87, 0xe5, 0x24, 0xf7, 0x93, 0x39, 0x93, 0xfa, 0xd6, 0x81, 0x6a, 0x47, 0x0c,
	0xa7, 0x07, 0x70, 0xf4, 0x0e, 0xa4, 0x4a, 0x42, 0x4e, 0x86, 0x8f, 0x4f, 0xe5, 0x14, 0x5f, 0xbe,
	0xc0, 0x96, 0xbf, 0x22, 0xb3, 0xfb, 0x13, 0x7a, 0xb2, 0xd4, 0x36, 0xb1, 0xdc, 0x94, 0x3d, 0x43,
	0xe4, 0x55, 0x9e, 0xe3, 0xeb, 0x64, 0xb6, 0xae, 0x97, 0xc0, 0xee, 0x4f, 0xe8, 0x89, 0xb2, 0x17,
	0x0a, 0x16, 0xc1, 0xa4, 0xd5, 0xc0, 0x44, 0x9e, 0xcf, 0xc4, 0x99, 0x84, 0xd8, 0x7f, 0x54, 0x80,
	0x85, 0x4e, 0x22, 0x22, 0x6f, 0xf2, 0xb9, 0xfe, 0x7c, 0x24, 0xfd, 0x7c, 0x07, 0x9f, 0x20, 0x71,
	0xca, 0x73, 0x09, 0xa6, 0x78, 0x80, 0xe8, 0x1e, 0x24, 0xed, 0x9a, 0x59, 0xc1, 0x46, 0x90, 0x97,
	0xe0, 0x6a, 0x6c, 0x44, 0xe5, 0x45, 0x2b, 0xb2, 0x35, 0x3a, 0xf0, 0xa5, 0xdc, 0xa2, 0x3c, 0x80,
	0x29, 0x6e, 0x44, 0x0a, 0xcc, 0xfa, 0xb8, 0x62, 0x13, 0x2a, 0x6e, 0x5a, 0x42, 0x6f, 0x8d, 0xd1,
	0x22, 0x4c, 0xfb, 0xb8, 0xe6, 0xd2, 0xf0, 0x5e, 0x88, 0x11, 0x4a, 0x43, 0x9c, 0x9a, 0x15, 0x7e,
	0x21, 0x12, 0x3a, 0xfb, 0xbb, 0x3b, 0x05, 0x71, 0x1f, 0x9f, 0xee, 0xce, 0x41, 0x52, 0x48, 0x83,
	0x85, 0xab, 0x9e, 0xc0, 0xca, 0x3d, 0x4c, 0x7b, 0x33, 0xd3, 0x31, 0xf1, 0x5c, 0x87, 0x60, 0xa6,
	0x29, 0x91, 0x6f, 0xc3, 0x76, 0xca, 0xae, 0x88, 0x49, 0xe9, 0x1f, 0x93, 0x9e, 0x14, 0xf8, 0xa2,
	0x53, 0x76, 0xd5, 0x32, 0xac, 0xee, 0xdb, 0xa4, 0x8f, 0x13, 0xd2, 0xf2, 0xf2, 0x3e, 0xcc, 0x75,
	0x7a, 0x21, 0xb2, 0xc4, 0xf5, 0x37, 0xc8, 0x4d, 0xaa, 0xc3, 0x0d, 0x51, 0xff, 0x8e, 0x41, 0x76,
	0x8f, 0x5f, 0x04, 0x7e, 0x64, 0xfd, 0x82, 0xea, 0xd6, 0x82, 0xd4, 0xa1, 0x05, 0x19, 0x66, 0x84,
	0xb0, 0xc3, 0x46, 0x21, 0x86, 0x6d, 0x99, 0xc7, 0x47, 0x93, 0xf9, 0x93, 0xee, 0x8a, 0x1f, 0x94,
	0x9a, 0xb7, 0xd9, 0xea, 0x61, 0x89, 0x0e, 0xd7, 0x0c, 0xa6, 0xfe, 0xdf, 0x66, 0xf0, 0x29, 0x6c,
	0x0e, 0xc1, 0x7f, 0x3c, 0xea, 0x79, 0x26, 0xc1, 0xf5, 0xc0, 0x59, 0xd7, 0x05, 0x1f, 0xfd, 0x74,
	0x5b, 0x67, 0x18, 0x1b, 0xed, 0x0c, 0x3b, 0x54, 0x11, 0xef, 0x52, 0x85, 0xea, 0xc3, 0x8d, 0x11,
	0x98, 0x8d, 0x27, 0x1d, 0x87, 0xb0, 0xb6, 0x13, 0xf4, 0x89, 0xc1, 0x19, 0xe8, 0xf1, 0x08, 0xea,
	0xad, 0x6d, 0xb5, 0x0c, 0xeb, 0x11, 0x3b, 0x8e, 0x87, 0xf9, 0x03, 0x58, 0xc9, 0x63, 0xa7, 0x39,
	0x2e, 0xda, 0x16, 0xa8, 0x83, 0xb6, 0x1b, 0x0f, 0xe7, 0xef, 0x25, 0x58, 0x0d, 0x2a, 0xfc, 0x98,
	0x68, 0x77, 0x3c, 0x9a, 0xe2, 0x11, 0x8f, 0xa6, 0x96, 0x88, 0x27, 0xdb, 0x22, 0x56, 0x31, 0xac,
	0x0d, 0xe6, 0x33, 0x9e, 0xb8, 0x31, 0xac, 0xed, 0x99, 0x8e, 0x85, 0xab, 0xff, 0xa9, 0x9b, 0xad,
	0xa3, 0xd6, 0x0b, 0x39, 0x78, 0x72, 0xa1, 0x24, 0xcc, 0x1c, 0x16, 0x0e, 0xf2, 0xc5, 0x83, 0x7b,
	0xe9, 0x09, 0x94, 0x82, 0xd9, 0x9d, 0xc3, 0x43, 0xfd, 0xe1, 0xe3, 0x42, 0x3e, 0x2d, 0x21, 0x80,
	0xe9, 0x7c, 0xe1, 0xa0, 0x58, 0xc8, 0xa7, 0x63, 0xe8, 0x12, 0x5c, 0x08, 0x67, 0x0c, 0x81, 0x37,
	0x1e, 0x1d, 0xe6, 0x77, 0x8e, 0x0b, 0xe9, 0x78, 0xee, 0xdb, 0x24, 0x5c, 0xee, 0xed, 0xfc, 0x28,
	0xf8, 0xb0, 0x41, 0x5f, 0xc3, 0xc5, 0xbe, 0x4d, 0x0f, 0xa5, 0x83, 0x03, 0x21, 0x6e, 0xdd, 0xb7,
	0xf0, 0x6e, 0xb3, 0x98, 0x57, 0xd6, 0x99, 0x25, 0xb2, 0x4b, 0xaa, 0x9b, 0xdf, 0xfc, 0xfe, 0xd7,
	0x0f, 0xb1, 0x55, 0xb4, 0x12, 0x7e, 0xa7, 0xb4, 0xb0, 0xd7, 0x5a, 0xdf, 0x56, 0x64, 0xfb, 0x4b,
	0xbb, 0xf4, 0x15, 0xfa, 0x02, 0x2e, 0x0d, 0xe8, 0x88, 0x88, 0xbf, 0x0b, 0x75, 0xf3, 0xf3, 0x0f,
	0xd9, 0x37, 0x91, 0xf2, 0x06, 0x1b, 0x0d, 0xd1, 0x40, 0xd5, 0x35, 0x4e, 0x60, 0x19, 0x2d, 0x0d,
	0x22, 0x80, 0x7e, 0x91, 0x60, 0x25, 0xb2, 0x78, 0xa3, 0xab, 0xa3, 0xf4, 0x28, 0xe5, 0xda, 0x90,
	0x68, 0x41, 0xf4, 0x3a, 0x27, 0xba, 0xa5, 0xae, 0x0f, 0xcc, 0x54, 0xf8, 0xc8, 0x7a, 0x57, 0xda,
	0x42, 0x2f, 0xa4, 0xb0, 0xe3, 0x0c, 0x51, 0x6a, 0xd1, 0xcd, 0x36, 0x9d, 0xe1, 0x7b, 0x86, 0xf2,
	0xd6, 0x88, 0xab, 0x44, 0x30, 0xb7, 0x78, 0x30, 0xd7, 0xd5, 0x2b, 0x03, 0x83, 0x29, 0xb3, 0x1d,
	0xaf, 0x79, 0x62, 0x4b, 0x16, 0xd2, 0xcf, 0x12, 0x5c, 0x1e, 0x58, 0x77, 0x51, 0x96, 0x11, 0x1a,
	0xa6, 0xd8, 0x2b, 0x9b, 0x43, 0x20, 0x05, 0xdd, 0x9b, 0x9c, 0xae, 0xa6, 0x6e, 0x46, 0xaa, 0x74,
	0x5b, 0x7c, 0x8f, 0x30, 0xb2, 0x3f, 0x49, 0xa0, 0xf4, 0xaf, 0xb6, 0x68, 0x3d, 0x78, 0x27, 0x47,
	0x14, 0x77, 0x65, 0x23, 0x0a, 0x26, 0x38, 0xde, 0xe0, 0x1c, 0xaf, 0xa8, 0x1b, 0xd1, 0x1c, 0x4b,
	0xd8, 0x69, 0x32, 0x82, 0xcf, 0x25, 0x58, 0x1a, 0x54, 0x18, 0x11, 0xbf, 0x45, 0x43, 0x94, 0x72,
	0x25, 0x1b, 0x0d, 0x14, 0x34, 0xaf, 0x72, 0x9a, 0x1b, 0xb9, 0xe8, 0x0b, 0xcf, 0x18, 0x7e, 0x27,
	0xc1, 0xd2, 0xa0, 0x9a, 0xda, 0xa3, 0xf0, 0x70, 0x2a, 0xc3, 0xd4, 0xe1, 0xd6, 0x8d, 0xca, 0x46,
	0x67, 0xcc, 0xe2, 0xfb, 0xa1, 0x32, 0x2c, 0xe5, 0x71, 0x15, 0xf7, 0xcd, 0xd7, 0x59, 0x36, 0x09,
	0x66, 0x29, 0xd4, 0x3c, 0xda, 0x0c, 0x4b, 0xdd, 0x56, 0x74, 0xe4, 0xbb, 0xda, 0xaf, 0x2f, 0x97,
	0xa5, 0x17, 0x2f, 0x97, 0xa5, 0x3f, 0x5e, 0x2e, 0x4b, 0xcf, 0xfe, 0x5c, 0x9e, 0x00, 0xd9, 0x76,
	0x35, 0x42, 0x4d, 0xeb, 0x33, 0xdf, 0x7d, 0x1a, 0xbc, 0x54, 0x35, 0xd3, 0xb3, 0xb5, 0x46, 0xee,
	0xe3, 0x58, 0x23, 0xf7, 0x64, 0xe2, 0x64, 0x9a, 0xdb, 0xde, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x8d, 0xb0, 0xb6, 0x73, 0x9e, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VulnerabilityExceptionServiceClient is the client API for VulnerabilityExceptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type VulnerabilityExceptionServiceClient interface {
	// GetVulnerabilityException returns the vulnerability exception with specified ID.
	GetVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityExceptionResponse, error)
	// ListVulnerabilityExceptions returns a list of vulnerability exceptions.
	ListVulnerabilityExceptions(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityExceptionsResponse, error)
	// CreateDeferVulnerabilityException creates an exception request to deferral specified vulnerabilities.
	// Once an exception is created, it moves to the PENDING state. The exception is enforced only after it is approved.
	CreateDeferVulnerabilityException(ctx context.Context, in *CreateDeferVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*CreateDeferVulnerabilityExceptionResponse, error)
	// CreateFalsePositiveVulnerabilityException creates an exception request to mark specified vulnerabilities as false positive.
	// Once an exception is created, it moves to the PENDING state. The exception is enforced only after it is approved.
	CreateFalsePositiveVulnerabilityException(ctx context.Context, in *CreateFalsePositiveVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*CreateFalsePositiveVulnerabilityExceptionResponse, error)
	// ApproveVulnerabilityException approves a vulnerability exception. Once approved, the exception is enforced.
	// The associated vulnerabilities are excluded from policy evaluation and risk evaluation, and the vulnerabilities
	// may not appear in certain APIs responses by default.
	ApproveVulnerabilityException(ctx context.Context, in *ApproveVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*ApproveVulnerabilityExceptionResponse, error)
	// DenyVulnerabilityException denies a vulnerability exception.
	DenyVulnerabilityException(ctx context.Context, in *DenyVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*DenyVulnerabilityExceptionResponse, error)
	// UpdateVulnerabilityException updates an existing vulnerability exception. Currently only the following can be updated:
	// - CVEs and expiration time of the deferral exceptions
	// - CVEs of the false positive requests
	UpdateVulnerabilityException(ctx context.Context, in *UpdateVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*UpdateVulnerabilityExceptionResponse, error)
	// CancelVulnerabilityException cancels a vulnerability exception. Once cancelled, the exception is no longer
	// enforced if it was in APPROVED state.
	CancelVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*CancelVulnerabilityExceptionResponse, error)
	// DeleteVulnerabilityException deletes a vulnerability exception.
	DeleteVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type vulnerabilityExceptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilityExceptionServiceClient(cc grpc.ClientConnInterface) VulnerabilityExceptionServiceClient {
	return &vulnerabilityExceptionServiceClient{cc}
}

func (c *vulnerabilityExceptionServiceClient) GetVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityExceptionResponse, error) {
	out := new(GetVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/GetVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) ListVulnerabilityExceptions(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityExceptionsResponse, error) {
	out := new(ListVulnerabilityExceptionsResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/ListVulnerabilityExceptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) CreateDeferVulnerabilityException(ctx context.Context, in *CreateDeferVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*CreateDeferVulnerabilityExceptionResponse, error) {
	out := new(CreateDeferVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/CreateDeferVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) CreateFalsePositiveVulnerabilityException(ctx context.Context, in *CreateFalsePositiveVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*CreateFalsePositiveVulnerabilityExceptionResponse, error) {
	out := new(CreateFalsePositiveVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/CreateFalsePositiveVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) ApproveVulnerabilityException(ctx context.Context, in *ApproveVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*ApproveVulnerabilityExceptionResponse, error) {
	out := new(ApproveVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/ApproveVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) DenyVulnerabilityException(ctx context.Context, in *DenyVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*DenyVulnerabilityExceptionResponse, error) {
	out := new(DenyVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/DenyVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) UpdateVulnerabilityException(ctx context.Context, in *UpdateVulnerabilityExceptionRequest, opts ...grpc.CallOption) (*UpdateVulnerabilityExceptionResponse, error) {
	out := new(UpdateVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/UpdateVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) CancelVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*CancelVulnerabilityExceptionResponse, error) {
	out := new(CancelVulnerabilityExceptionResponse)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/CancelVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityExceptionServiceClient) DeleteVulnerabilityException(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.VulnerabilityExceptionService/DeleteVulnerabilityException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilityExceptionServiceServer is the server API for VulnerabilityExceptionService service.
type VulnerabilityExceptionServiceServer interface {
	// GetVulnerabilityException returns the vulnerability exception with specified ID.
	GetVulnerabilityException(context.Context, *ResourceByID) (*GetVulnerabilityExceptionResponse, error)
	// ListVulnerabilityExceptions returns a list of vulnerability exceptions.
	ListVulnerabilityExceptions(context.Context, *RawQuery) (*ListVulnerabilityExceptionsResponse, error)
	// CreateDeferVulnerabilityException creates an exception request to deferral specified vulnerabilities.
	// Once an exception is created, it moves to the PENDING state. The exception is enforced only after it is approved.
	CreateDeferVulnerabilityException(context.Context, *CreateDeferVulnerabilityExceptionRequest) (*CreateDeferVulnerabilityExceptionResponse, error)
	// CreateFalsePositiveVulnerabilityException creates an exception request to mark specified vulnerabilities as false positive.
	// Once an exception is created, it moves to the PENDING state. The exception is enforced only after it is approved.
	CreateFalsePositiveVulnerabilityException(context.Context, *CreateFalsePositiveVulnerabilityExceptionRequest) (*CreateFalsePositiveVulnerabilityExceptionResponse, error)
	// ApproveVulnerabilityException approves a vulnerability exception. Once approved, the exception is enforced.
	// The associated vulnerabilities are excluded from policy evaluation and risk evaluation, and the vulnerabilities
	// may not appear in certain APIs responses by default.
	ApproveVulnerabilityException(context.Context, *ApproveVulnerabilityExceptionRequest) (*ApproveVulnerabilityExceptionResponse, error)
	// DenyVulnerabilityException denies a vulnerability exception.
	DenyVulnerabilityException(context.Context, *DenyVulnerabilityExceptionRequest) (*DenyVulnerabilityExceptionResponse, error)
	// UpdateVulnerabilityException updates an existing vulnerability exception. Currently only the following can be updated:
	// - CVEs and expiration time of the deferral exceptions
	// - CVEs of the false positive requests
	UpdateVulnerabilityException(context.Context, *UpdateVulnerabilityExceptionRequest) (*UpdateVulnerabilityExceptionResponse, error)
	// CancelVulnerabilityException cancels a vulnerability exception. Once cancelled, the exception is no longer
	// enforced if it was in APPROVED state.
	CancelVulnerabilityException(context.Context, *ResourceByID) (*CancelVulnerabilityExceptionResponse, error)
	// DeleteVulnerabilityException deletes a vulnerability exception.
	DeleteVulnerabilityException(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedVulnerabilityExceptionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVulnerabilityExceptionServiceServer struct {
}

func (*UnimplementedVulnerabilityExceptionServiceServer) GetVulnerabilityException(ctx context.Context, req *ResourceByID) (*GetVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) ListVulnerabilityExceptions(ctx context.Context, req *RawQuery) (*ListVulnerabilityExceptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilityExceptions not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) CreateDeferVulnerabilityException(ctx context.Context, req *CreateDeferVulnerabilityExceptionRequest) (*CreateDeferVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeferVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) CreateFalsePositiveVulnerabilityException(ctx context.Context, req *CreateFalsePositiveVulnerabilityExceptionRequest) (*CreateFalsePositiveVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFalsePositiveVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) ApproveVulnerabilityException(ctx context.Context, req *ApproveVulnerabilityExceptionRequest) (*ApproveVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) DenyVulnerabilityException(ctx context.Context, req *DenyVulnerabilityExceptionRequest) (*DenyVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) UpdateVulnerabilityException(ctx context.Context, req *UpdateVulnerabilityExceptionRequest) (*UpdateVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) CancelVulnerabilityException(ctx context.Context, req *ResourceByID) (*CancelVulnerabilityExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelVulnerabilityException not implemented")
}
func (*UnimplementedVulnerabilityExceptionServiceServer) DeleteVulnerabilityException(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVulnerabilityException not implemented")
}

func RegisterVulnerabilityExceptionServiceServer(s *grpc.Server, srv VulnerabilityExceptionServiceServer) {
	s.RegisterService(&_VulnerabilityExceptionService_serviceDesc, srv)
}

func _VulnerabilityExceptionService_GetVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).GetVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/GetVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).GetVulnerabilityException(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_ListVulnerabilityExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).ListVulnerabilityExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/ListVulnerabilityExceptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).ListVulnerabilityExceptions(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_CreateDeferVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeferVulnerabilityExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).CreateDeferVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/CreateDeferVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).CreateDeferVulnerabilityException(ctx, req.(*CreateDeferVulnerabilityExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_CreateFalsePositiveVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFalsePositiveVulnerabilityExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).CreateFalsePositiveVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/CreateFalsePositiveVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).CreateFalsePositiveVulnerabilityException(ctx, req.(*CreateFalsePositiveVulnerabilityExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_ApproveVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveVulnerabilityExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).ApproveVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/ApproveVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).ApproveVulnerabilityException(ctx, req.(*ApproveVulnerabilityExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_DenyVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyVulnerabilityExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).DenyVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/DenyVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).DenyVulnerabilityException(ctx, req.(*DenyVulnerabilityExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_UpdateVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVulnerabilityExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).UpdateVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/UpdateVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).UpdateVulnerabilityException(ctx, req.(*UpdateVulnerabilityExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_CancelVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).CancelVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/CancelVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).CancelVulnerabilityException(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityExceptionService_DeleteVulnerabilityException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityExceptionServiceServer).DeleteVulnerabilityException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.VulnerabilityExceptionService/DeleteVulnerabilityException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityExceptionServiceServer).DeleteVulnerabilityException(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _VulnerabilityExceptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.VulnerabilityExceptionService",
	HandlerType: (*VulnerabilityExceptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_GetVulnerabilityException_Handler,
		},
		{
			MethodName: "ListVulnerabilityExceptions",
			Handler:    _VulnerabilityExceptionService_ListVulnerabilityExceptions_Handler,
		},
		{
			MethodName: "CreateDeferVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_CreateDeferVulnerabilityException_Handler,
		},
		{
			MethodName: "CreateFalsePositiveVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_CreateFalsePositiveVulnerabilityException_Handler,
		},
		{
			MethodName: "ApproveVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_ApproveVulnerabilityException_Handler,
		},
		{
			MethodName: "DenyVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_DenyVulnerabilityException_Handler,
		},
		{
			MethodName: "UpdateVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_UpdateVulnerabilityException_Handler,
		},
		{
			MethodName: "CancelVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_CancelVulnerabilityException_Handler,
		},
		{
			MethodName: "DeleteVulnerabilityException",
			Handler:    _VulnerabilityExceptionService_DeleteVulnerabilityException_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/vuln_exception_service.proto",
}

func (m *RequestComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestExpiry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestExpiry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestExpiry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresOn != nil {
		{
			size, err := m.ExpiresOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExpiryType != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.ExpiryType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeferralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedReq != nil {
		{
			size := m.UpdatedReq.Size()
			i -= size
			if _, err := m.UpdatedReq.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Approvers) > 0 {
		for iNdEx := len(m.Approvers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Requester != nil {
		{
			size, err := m.Requester.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetState != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.TargetState))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException_DeferralReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_DeferralReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralReq != nil {
		{
			size, err := m.DeferralReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_FpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_FpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FpRequest != nil {
		{
			size, err := m.FpRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_DeferralReqUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_DeferralReqUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeferralReqUpdate != nil {
		{
			size, err := m.DeferralReqUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *VulnerabilityException_Scope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException_Scope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_Scope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageScope != nil {
		{
			size, err := m.ImageScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityException_Scope_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityException_Scope_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityException_Scope_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Remote) > 0 {
		i -= len(m.Remote)
		copy(dAtA[i:], m.Remote)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Remote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registry) > 0 {
		i -= len(m.Registry)
		copy(dAtA[i:], m.Registry)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Registry)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVulnerabilityExceptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVulnerabilityExceptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVulnerabilityExceptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestInfos) > 0 {
		for iNdEx := len(m.RequestInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeferVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeferVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresOn != nil {
		{
			size, err := m.ExpiresOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpiryType != 0 {
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(m.ExpiryType))
		i--
		dAtA[i] = 0x20
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeferVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeferVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cves) > 0 {
		for iNdEx := len(m.Cves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cves[iNdEx])
			copy(dAtA[i:], m.Cves[iNdEx])
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Cves[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnExceptionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelVulnerabilityExceptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelVulnerabilityExceptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelVulnerabilityExceptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnExceptionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVulnExceptionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovVulnExceptionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestExpiry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryType != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.ExpiryType))
	}
	if m.ExpiresOn != nil {
		l = m.ExpiresOn.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.TargetState != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.TargetState))
	}
	if m.Status != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.Status))
	}
	if m.Expired {
		n += 2
	}
	if m.Requester != nil {
		l = m.Requester.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if len(m.Approvers) > 0 {
		for _, e := range m.Approvers {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.UpdatedReq != nil {
		n += m.UpdatedReq.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException_DeferralReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralReq != nil {
		l = m.DeferralReq.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_FpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FpRequest != nil {
		l = m.FpRequest.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_DeferralReqUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeferralReqUpdate != nil {
		l = m.DeferralReqUpdate.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	return n
}
func (m *VulnerabilityException_Scope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageScope != nil {
		l = m.ImageScope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityException_Scope_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Remote)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVulnerabilityExceptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestInfos) > 0 {
		for _, e := range m.RequestInfos {
			l = e.Size()
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeferVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.ExpiryType != 0 {
		n += 1 + sovVulnExceptionService(uint64(m.ExpiryType))
	}
	if m.ExpiresOn != nil {
		l = m.ExpiresOn.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeferVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if len(m.Cves) > 0 {
		for _, s := range m.Cves {
			l = len(s)
			n += 1 + l + sovVulnExceptionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelVulnerabilityExceptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnExceptionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVulnExceptionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVulnExceptionService(x uint64) (n int) {
	return sovVulnExceptionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SlimUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestExpiry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestExpiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestExpiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryType", wireType)
			}
			m.ExpiryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryType |= RequestExpiry_ExpiryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresOn == nil {
				m.ExpiresOn = &types.Timestamp{}
			}
			if err := m.ExpiresOn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &RequestExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityException: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityException: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetState", wireType)
			}
			m.TargetState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetState |= VulnerabilityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requester == nil {
				m.Requester = &SlimUser{}
			}
			if err := m.Requester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvers = append(m.Approvers, &SlimUser{})
			if err := m.Approvers[len(m.Approvers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &RequestComment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityException_DeferralReq{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FalsePositiveRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &VulnerabilityException_FpRequest{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferralReqUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeferralRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdatedReq = &VulnerabilityException_DeferralReqUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException_Scope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageScope == nil {
				m.ImageScope = &VulnerabilityException_Scope_Image{}
			}
			if err := m.ImageScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityException_Scope_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVulnerabilityExceptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVulnerabilityExceptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVulnerabilityExceptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestInfos = append(m.RequestInfos, &VulnerabilityException{})
			if err := m.RequestInfos[len(m.RequestInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeferVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryType", wireType)
			}
			m.ExpiryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryType |= CreateDeferVulnerabilityExceptionRequest_ExpiryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresOn == nil {
				m.ExpiresOn = &types.Timestamp{}
			}
			if err := m.ExpiresOn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeferVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeferVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFalsePositiveVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &VulnerabilityException_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFalsePositiveVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFalsePositiveVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &RequestExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cves", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cves = append(m.Cves, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelVulnerabilityExceptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelVulnerabilityExceptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelVulnerabilityExceptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &VulnerabilityException{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnExceptionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnExceptionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVulnExceptionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVulnExceptionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnExceptionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVulnExceptionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVulnExceptionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVulnExceptionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVulnExceptionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVulnExceptionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVulnExceptionService = fmt.Errorf("proto: unexpected end of group")
)
