// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v2/report_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportService_PostReportConfiguration_FullMethodName   = "/v2.ReportService/PostReportConfiguration"
	ReportService_UpdateReportConfiguration_FullMethodName = "/v2.ReportService/UpdateReportConfiguration"
	ReportService_ListReportConfigurations_FullMethodName  = "/v2.ReportService/ListReportConfigurations"
	ReportService_CountReportConfigurations_FullMethodName = "/v2.ReportService/CountReportConfigurations"
	ReportService_GetReportConfiguration_FullMethodName    = "/v2.ReportService/GetReportConfiguration"
	ReportService_DeleteReportConfiguration_FullMethodName = "/v2.ReportService/DeleteReportConfiguration"
	ReportService_GetReportStatus_FullMethodName           = "/v2.ReportService/GetReportStatus"
	ReportService_GetReportHistory_FullMethodName          = "/v2.ReportService/GetReportHistory"
	ReportService_GetMyReportHistory_FullMethodName        = "/v2.ReportService/GetMyReportHistory"
	ReportService_RunReport_FullMethodName                 = "/v2.ReportService/RunReport"
	ReportService_CancelReport_FullMethodName              = "/v2.ReportService/CancelReport"
	ReportService_DeleteReport_FullMethodName              = "/v2.ReportService/DeleteReport"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*ReportConfiguration, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// ListReportConfigurations returns report configurations matching given query
	ListReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListReportConfigurationsResponse, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error)
	// GetReportConfiguration returns the report configuration with given ID
	GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportConfiguration, error)
	// DeleteReportConfiguration removes the report configuration with given ID
	DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// GetReportStatus returns report status for the given report id
	GetReportStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error)
	// GetReportHistory returns the full report job history for a report configuration with the specified ID.
	GetReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error)
	// GetMyReportHistory returns the requester's report job history for a report configuration with the specified ID.
	GetMyReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error)
	// Submits a new report generation request if the user requesting this report does not have another waiting or preparing
	// report for the same report configuration.
	RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*RunReportResponse, error)
	// Cancels a queued report job for the given report id. If the job is not active, it is a noop.
	// If a report is already being prepared, it won't be cancelled.
	CancelReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// Deletes a generated report for the given report id
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*Empty, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) PostReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*ReportConfiguration, error) {
	out := new(ReportConfiguration)
	err := c.cc.Invoke(ctx, ReportService_PostReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) UpdateReportConfiguration(ctx context.Context, in *ReportConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportService_UpdateReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) ListReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListReportConfigurationsResponse, error) {
	out := new(ListReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, ReportService_ListReportConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error) {
	out := new(CountReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, ReportService_CountReportConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportConfiguration, error) {
	out := new(ReportConfiguration)
	err := c.cc.Invoke(ctx, ReportService_GetReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportService_DeleteReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetReportStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error) {
	out := new(ReportStatusResponse)
	err := c.cc.Invoke(ctx, ReportService_GetReportStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error) {
	out := new(ReportHistoryResponse)
	err := c.cc.Invoke(ctx, ReportService_GetReportHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetMyReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error) {
	out := new(ReportHistoryResponse)
	err := c.cc.Invoke(ctx, ReportService_GetMyReportHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*RunReportResponse, error) {
	out := new(RunReportResponse)
	err := c.cc.Invoke(ctx, ReportService_RunReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) CancelReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportService_CancelReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportService_DeleteReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations should embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(context.Context, *ReportConfiguration) (*ReportConfiguration, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(context.Context, *ReportConfiguration) (*Empty, error)
	// ListReportConfigurations returns report configurations matching given query
	ListReportConfigurations(context.Context, *RawQuery) (*ListReportConfigurationsResponse, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error)
	// GetReportConfiguration returns the report configuration with given ID
	GetReportConfiguration(context.Context, *ResourceByID) (*ReportConfiguration, error)
	// DeleteReportConfiguration removes the report configuration with given ID
	DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// GetReportStatus returns report status for the given report id
	GetReportStatus(context.Context, *ResourceByID) (*ReportStatusResponse, error)
	// GetReportHistory returns the full report job history for a report configuration with the specified ID.
	GetReportHistory(context.Context, *GetReportHistoryRequest) (*ReportHistoryResponse, error)
	// GetMyReportHistory returns the requester's report job history for a report configuration with the specified ID.
	GetMyReportHistory(context.Context, *GetReportHistoryRequest) (*ReportHistoryResponse, error)
	// Submits a new report generation request if the user requesting this report does not have another waiting or preparing
	// report for the same report configuration.
	RunReport(context.Context, *RunReportRequest) (*RunReportResponse, error)
	// Cancels a queued report job for the given report id. If the job is not active, it is a noop.
	// If a report is already being prepared, it won't be cancelled.
	CancelReport(context.Context, *ResourceByID) (*Empty, error)
	// Deletes a generated report for the given report id
	DeleteReport(context.Context, *DeleteReportRequest) (*Empty, error)
}

// UnimplementedReportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (UnimplementedReportServiceServer) PostReportConfiguration(context.Context, *ReportConfiguration) (*ReportConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReportConfiguration not implemented")
}
func (UnimplementedReportServiceServer) UpdateReportConfiguration(context.Context, *ReportConfiguration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportConfiguration not implemented")
}
func (UnimplementedReportServiceServer) ListReportConfigurations(context.Context, *RawQuery) (*ListReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportConfigurations not implemented")
}
func (UnimplementedReportServiceServer) CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReportConfigurations not implemented")
}
func (UnimplementedReportServiceServer) GetReportConfiguration(context.Context, *ResourceByID) (*ReportConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfiguration not implemented")
}
func (UnimplementedReportServiceServer) DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportConfiguration not implemented")
}
func (UnimplementedReportServiceServer) GetReportStatus(context.Context, *ResourceByID) (*ReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportStatus not implemented")
}
func (UnimplementedReportServiceServer) GetReportHistory(context.Context, *GetReportHistoryRequest) (*ReportHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportHistory not implemented")
}
func (UnimplementedReportServiceServer) GetMyReportHistory(context.Context, *GetReportHistoryRequest) (*ReportHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyReportHistory not implemented")
}
func (UnimplementedReportServiceServer) RunReport(context.Context, *RunReportRequest) (*RunReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}
func (UnimplementedReportServiceServer) CancelReport(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReport not implemented")
}
func (UnimplementedReportServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s grpc.ServiceRegistrar, srv ReportServiceServer) {
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_PostReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).PostReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_PostReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).PostReportConfiguration(ctx, req.(*ReportConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_UpdateReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).UpdateReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_UpdateReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).UpdateReportConfiguration(ctx, req.(*ReportConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_ListReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).ListReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_ListReportConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).ListReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_CountReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).CountReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_CountReportConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).CountReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_DeleteReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).DeleteReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_DeleteReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).DeleteReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReportStatus(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetReportHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReportHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetReportHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReportHistory(ctx, req.(*GetReportHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetMyReportHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetMyReportHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_GetMyReportHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetMyReportHistory(ctx, req.(*GetReportHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_RunReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).RunReport(ctx, req.(*RunReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_CancelReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).CancelReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_CancelReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).CancelReport(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_DeleteReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the grpc.ServiceDesc for ReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostReportConfiguration",
			Handler:    _ReportService_PostReportConfiguration_Handler,
		},
		{
			MethodName: "UpdateReportConfiguration",
			Handler:    _ReportService_UpdateReportConfiguration_Handler,
		},
		{
			MethodName: "ListReportConfigurations",
			Handler:    _ReportService_ListReportConfigurations_Handler,
		},
		{
			MethodName: "CountReportConfigurations",
			Handler:    _ReportService_CountReportConfigurations_Handler,
		},
		{
			MethodName: "GetReportConfiguration",
			Handler:    _ReportService_GetReportConfiguration_Handler,
		},
		{
			MethodName: "DeleteReportConfiguration",
			Handler:    _ReportService_DeleteReportConfiguration_Handler,
		},
		{
			MethodName: "GetReportStatus",
			Handler:    _ReportService_GetReportStatus_Handler,
		},
		{
			MethodName: "GetReportHistory",
			Handler:    _ReportService_GetReportHistory_Handler,
		},
		{
			MethodName: "GetMyReportHistory",
			Handler:    _ReportService_GetMyReportHistory_Handler,
		},
		{
			MethodName: "RunReport",
			Handler:    _ReportService_RunReport_Handler,
		},
		{
			MethodName: "CancelReport",
			Handler:    _ReportService_CancelReport_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _ReportService_DeleteReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/report_service.proto",
}
