// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_results_stats_service.proto

package v2

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ComplianceScanStatsShim models statistics of checks for a given scan configuration
type ComplianceScanStatsShim struct {
	ScanName             string                        `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	CheckStats           []*ComplianceCheckStatusCount `protobuf:"bytes,2,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	LastScan             *types.Timestamp              `protobuf:"bytes,3,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	ScanConfigId         string                        `protobuf:"bytes,4,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComplianceScanStatsShim) Reset()         { *m = ComplianceScanStatsShim{} }
func (m *ComplianceScanStatsShim) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanStatsShim) ProtoMessage()    {}
func (*ComplianceScanStatsShim) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{0}
}
func (m *ComplianceScanStatsShim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanStatsShim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanStatsShim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanStatsShim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanStatsShim.Merge(m, src)
}
func (m *ComplianceScanStatsShim) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanStatsShim) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanStatsShim.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanStatsShim proto.InternalMessageInfo

func (m *ComplianceScanStatsShim) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanStatsShim) GetCheckStats() []*ComplianceCheckStatusCount {
	if m != nil {
		return m.CheckStats
	}
	return nil
}

func (m *ComplianceScanStatsShim) GetLastScan() *types.Timestamp {
	if m != nil {
		return m.LastScan
	}
	return nil
}

func (m *ComplianceScanStatsShim) GetScanConfigId() string {
	if m != nil {
		return m.ScanConfigId
	}
	return ""
}

func (m *ComplianceScanStatsShim) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanStatsShim) Clone() *ComplianceScanStatsShim {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanStatsShim)
	*cloned = *m

	if m.CheckStats != nil {
		cloned.CheckStats = make([]*ComplianceCheckStatusCount, len(m.CheckStats))
		for idx, v := range m.CheckStats {
			cloned.CheckStats[idx] = v.Clone()
		}
	}
	cloned.LastScan = m.LastScan.Clone()
	return cloned
}

// ComplianceProfileScanStats provides scan stats overview based on profile
type ComplianceProfileScanStats struct {
	CheckStats           []*ComplianceCheckStatusCount `protobuf:"bytes,1,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	ProfileName          string                        `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Title                string                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Version              string                        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Benchmarks           []*ComplianceBenchmark        `protobuf:"bytes,5,rep,name=benchmarks,proto3" json:"benchmarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ComplianceProfileScanStats) Reset()         { *m = ComplianceProfileScanStats{} }
func (m *ComplianceProfileScanStats) String() string { return proto.CompactTextString(m) }
func (*ComplianceProfileScanStats) ProtoMessage()    {}
func (*ComplianceProfileScanStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{1}
}
func (m *ComplianceProfileScanStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceProfileScanStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceProfileScanStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceProfileScanStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceProfileScanStats.Merge(m, src)
}
func (m *ComplianceProfileScanStats) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceProfileScanStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceProfileScanStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceProfileScanStats proto.InternalMessageInfo

func (m *ComplianceProfileScanStats) GetCheckStats() []*ComplianceCheckStatusCount {
	if m != nil {
		return m.CheckStats
	}
	return nil
}

func (m *ComplianceProfileScanStats) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ComplianceProfileScanStats) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ComplianceProfileScanStats) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ComplianceProfileScanStats) GetBenchmarks() []*ComplianceBenchmark {
	if m != nil {
		return m.Benchmarks
	}
	return nil
}

func (m *ComplianceProfileScanStats) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceProfileScanStats) Clone() *ComplianceProfileScanStats {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceProfileScanStats)
	*cloned = *m

	if m.CheckStats != nil {
		cloned.CheckStats = make([]*ComplianceCheckStatusCount, len(m.CheckStats))
		for idx, v := range m.CheckStats {
			cloned.CheckStats[idx] = v.Clone()
		}
	}
	if m.Benchmarks != nil {
		cloned.Benchmarks = make([]*ComplianceBenchmark, len(m.Benchmarks))
		for idx, v := range m.Benchmarks {
			cloned.Benchmarks[idx] = v.Clone()
		}
	}
	return cloned
}

// ComplianceClusterScanStats provides scan stats overview based on cluster
type ComplianceClusterScanStats struct {
	ScanStats            *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	Cluster              *ComplianceScanCluster   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ComplianceClusterScanStats) Reset()         { *m = ComplianceClusterScanStats{} }
func (m *ComplianceClusterScanStats) String() string { return proto.CompactTextString(m) }
func (*ComplianceClusterScanStats) ProtoMessage()    {}
func (*ComplianceClusterScanStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{2}
}
func (m *ComplianceClusterScanStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceClusterScanStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceClusterScanStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceClusterScanStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceClusterScanStats.Merge(m, src)
}
func (m *ComplianceClusterScanStats) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceClusterScanStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceClusterScanStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceClusterScanStats proto.InternalMessageInfo

func (m *ComplianceClusterScanStats) GetScanStats() *ComplianceScanStatsShim {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ComplianceClusterScanStats) GetCluster() *ComplianceScanCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ComplianceClusterScanStats) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceClusterScanStats) Clone() *ComplianceClusterScanStats {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceClusterScanStats)
	*cloned = *m

	cloned.ScanStats = m.ScanStats.Clone()
	cloned.Cluster = m.Cluster.Clone()
	return cloned
}

type ComplianceScanClusterRequest struct {
	ClusterId            string    `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Query                *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceScanClusterRequest) Reset()         { *m = ComplianceScanClusterRequest{} }
func (m *ComplianceScanClusterRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanClusterRequest) ProtoMessage()    {}
func (*ComplianceScanClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{3}
}
func (m *ComplianceScanClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanClusterRequest.Merge(m, src)
}
func (m *ComplianceScanClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanClusterRequest proto.InternalMessageInfo

func (m *ComplianceScanClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceScanClusterRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ComplianceScanClusterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanClusterRequest) Clone() *ComplianceScanClusterRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanClusterRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

// ListComplianceProfileScanStatsResponse provides stats for the profiles within the scans
type ListComplianceProfileScanStatsResponse struct {
	ScanStats            []*ComplianceProfileScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	TotalCount           int32                         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListComplianceProfileScanStatsResponse) Reset() {
	*m = ListComplianceProfileScanStatsResponse{}
}
func (m *ListComplianceProfileScanStatsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceProfileScanStatsResponse) ProtoMessage()    {}
func (*ListComplianceProfileScanStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{4}
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceProfileScanStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceProfileScanStatsResponse.Merge(m, src)
}
func (m *ListComplianceProfileScanStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceProfileScanStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceProfileScanStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceProfileScanStatsResponse proto.InternalMessageInfo

func (m *ListComplianceProfileScanStatsResponse) GetScanStats() []*ComplianceProfileScanStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceProfileScanStatsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceProfileScanStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceProfileScanStatsResponse) Clone() *ListComplianceProfileScanStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceProfileScanStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceProfileScanStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceClusterProfileStatsResponse provides stats for the profiles within the scans
type ListComplianceClusterProfileStatsResponse struct {
	ScanStats            []*ComplianceProfileScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	ClusterId            string                        `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName          string                        `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	TotalCount           int32                         `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListComplianceClusterProfileStatsResponse) Reset() {
	*m = ListComplianceClusterProfileStatsResponse{}
}
func (m *ListComplianceClusterProfileStatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ListComplianceClusterProfileStatsResponse) ProtoMessage() {}
func (*ListComplianceClusterProfileStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{5}
}
func (m *ListComplianceClusterProfileStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceClusterProfileStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceClusterProfileStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceClusterProfileStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceClusterProfileStatsResponse.Merge(m, src)
}
func (m *ListComplianceClusterProfileStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceClusterProfileStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceClusterProfileStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceClusterProfileStatsResponse proto.InternalMessageInfo

func (m *ListComplianceClusterProfileStatsResponse) GetScanStats() []*ComplianceProfileScanStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceClusterProfileStatsResponse) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListComplianceClusterProfileStatsResponse) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ListComplianceClusterProfileStatsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceClusterProfileStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceClusterProfileStatsResponse) Clone() *ListComplianceClusterProfileStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceClusterProfileStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceProfileScanStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

// ListComplianceClusterScanStatsResponse provides stats for the clusters within the scans
type ListComplianceClusterScanStatsResponse struct {
	ScanStats            []*ComplianceClusterScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	TotalCount           int32                         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListComplianceClusterScanStatsResponse) Reset() {
	*m = ListComplianceClusterScanStatsResponse{}
}
func (m *ListComplianceClusterScanStatsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceClusterScanStatsResponse) ProtoMessage()    {}
func (*ListComplianceClusterScanStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d822cfee808115fe, []int{6}
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceClusterScanStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceClusterScanStatsResponse.Merge(m, src)
}
func (m *ListComplianceClusterScanStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceClusterScanStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceClusterScanStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceClusterScanStatsResponse proto.InternalMessageInfo

func (m *ListComplianceClusterScanStatsResponse) GetScanStats() []*ComplianceClusterScanStats {
	if m != nil {
		return m.ScanStats
	}
	return nil
}

func (m *ListComplianceClusterScanStatsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListComplianceClusterScanStatsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceClusterScanStatsResponse) Clone() *ListComplianceClusterScanStatsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceClusterScanStatsResponse)
	*cloned = *m

	if m.ScanStats != nil {
		cloned.ScanStats = make([]*ComplianceClusterScanStats, len(m.ScanStats))
		for idx, v := range m.ScanStats {
			cloned.ScanStats[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ComplianceScanStatsShim)(nil), "v2.ComplianceScanStatsShim")
	proto.RegisterType((*ComplianceProfileScanStats)(nil), "v2.ComplianceProfileScanStats")
	proto.RegisterType((*ComplianceClusterScanStats)(nil), "v2.ComplianceClusterScanStats")
	proto.RegisterType((*ComplianceScanClusterRequest)(nil), "v2.ComplianceScanClusterRequest")
	proto.RegisterType((*ListComplianceProfileScanStatsResponse)(nil), "v2.ListComplianceProfileScanStatsResponse")
	proto.RegisterType((*ListComplianceClusterProfileStatsResponse)(nil), "v2.ListComplianceClusterProfileStatsResponse")
	proto.RegisterType((*ListComplianceClusterScanStatsResponse)(nil), "v2.ListComplianceClusterScanStatsResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_results_stats_service.proto", fileDescriptor_d822cfee808115fe)
}

var fileDescriptor_d822cfee808115fe = []byte{
	// 889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x99, 0xec, 0x86, 0xdd, 0x3c, 0x47, 0x1c, 0x46, 0x48, 0x9b, 0x66, 0xb7, 0xd9, 0xd4,
	0xac, 0x50, 0xb7, 0xa8, 0xb6, 0xea, 0x1e, 0x4a, 0x5b, 0x10, 0xd0, 0x08, 0x55, 0x95, 0xf8, 0xe9,
	0x72, 0x40, 0x5c, 0xa2, 0xa9, 0x3b, 0x6d, 0xac, 0xda, 0x9e, 0xd4, 0x33, 0x36, 0xa0, 0xaa, 0x97,
	0x9e, 0xb8, 0x70, 0x81, 0x0b, 0xff, 0x01, 0x57, 0x24, 0x10, 0x27, 0xfe, 0x00, 0x2e, 0x48, 0x48,
	0x48, 0x9c, 0x51, 0xe1, 0xc2, 0x7f, 0x81, 0xe6, 0x87, 0x49, 0x1c, 0x3b, 0xb4, 0x41, 0x7b, 0x89,
	0x94, 0x37, 0x6f, 0xde, 0x7c, 0xde, 0xf7, 0x7d, 0x3d, 0x36, 0xac, 0x93, 0x71, 0xe8, 0xe6, 0x9e,
	0x1b, 0xb0, 0x78, 0x1c, 0x85, 0x24, 0x09, 0xe8, 0x30, 0xa5, 0x3c, 0x8b, 0x04, 0x1f, 0x72, 0x41,
	0xe4, 0x2f, 0x4d, 0xf3, 0x30, 0xa0, 0xce, 0x38, 0x65, 0x82, 0xe1, 0x46, 0xee, 0x75, 0x7b, 0xd5,
	0x2d, 0x01, 0x8b, 0x63, 0x96, 0xe8, 0x9c, 0xee, 0x92, 0x59, 0xe7, 0x94, 0xa4, 0xc1, 0x68, 0x78,
	0x9e, 0xd1, 0xf4, 0x73, 0xb3, 0xf4, 0xe8, 0x94, 0xb1, 0xd3, 0x88, 0xba, 0x32, 0x83, 0x24, 0x09,
	0x13, 0x44, 0x84, 0x2c, 0xe1, 0x66, 0xf5, 0xb1, 0x59, 0x55, 0xff, 0x8e, 0xb2, 0x13, 0x57, 0x84,
	0x31, 0xe5, 0x82, 0xc4, 0x63, 0x9d, 0x60, 0xff, 0x8e, 0xe0, 0xc1, 0xe0, 0xdf, 0x53, 0x0f, 0x03,
	0x92, 0x1c, 0x4a, 0xc6, 0xc3, 0x51, 0x18, 0xe3, 0x87, 0xd0, 0xe2, 0x01, 0x49, 0x86, 0x09, 0x89,
	0x69, 0x07, 0xf5, 0xd1, 0x6a, 0xcb, 0xbf, 0x2f, 0x03, 0xef, 0x91, 0x98, 0xe2, 0x37, 0xc0, 0x0a,
	0x46, 0x34, 0x38, 0xd3, 0x3d, 0x75, 0x1a, 0xfd, 0x3b, 0xab, 0x96, 0xd7, 0x73, 0x72, 0xcf, 0x99,
	0x94, 0x1b, 0xc8, 0x04, 0x59, 0x2f, 0xe3, 0x03, 0x96, 0x25, 0xc2, 0x87, 0xa0, 0x88, 0x70, 0xbc,
	0x05, 0xad, 0x88, 0x70, 0x31, 0x94, 0x15, 0x3b, 0x77, 0xfa, 0x68, 0xd5, 0xf2, 0xba, 0x8e, 0xc6,
	0x75, 0x0a, 0x5c, 0xe7, 0xa3, 0x02, 0xd7, 0xbf, 0x2f, 0x93, 0x25, 0x1f, 0x7e, 0x02, 0x2f, 0x28,
	0xac, 0x80, 0x25, 0x27, 0xe1, 0xe9, 0x30, 0x3c, 0xee, 0xdc, 0x55, 0x6c, 0x6d, 0x19, 0x1d, 0xa8,
	0xe0, 0xc1, 0xb1, 0xfd, 0x37, 0x82, 0xee, 0x84, 0xe4, 0x83, 0x94, 0x9d, 0x84, 0xd1, 0xa4, 0xbf,
	0x59, 0x7c, 0xb4, 0x30, 0xfe, 0x0a, 0xb4, 0xc7, 0xba, 0xa8, 0xd6, 0xa7, 0xa1, 0x18, 0x2c, 0x13,
	0x53, 0x12, 0xbd, 0x08, 0x4d, 0x11, 0x8a, 0x88, 0xaa, 0xee, 0x5a, 0xbe, 0xfe, 0x83, 0x3b, 0x70,
	0x2f, 0xa7, 0x29, 0x0f, 0x59, 0x62, 0xb8, 0x8b, 0xbf, 0x78, 0x0b, 0xe0, 0x88, 0x26, 0xc1, 0x28,
	0x26, 0xe9, 0x19, 0xef, 0x34, 0x15, 0xd2, 0x83, 0x32, 0xd2, 0x5e, 0xb1, 0xee, 0x4f, 0xa5, 0xda,
	0x5f, 0x96, 0x7a, 0x1d, 0x44, 0x19, 0x17, 0x34, 0x9d, 0xf4, 0xba, 0x03, 0xa0, 0x04, 0x2b, 0x5a,
	0x95, 0x52, 0x3f, 0x2c, 0xd7, 0x2d, 0x0d, 0xde, 0x57, 0x63, 0xd7, 0x7b, 0x37, 0xe1, 0x5e, 0xa0,
	0xeb, 0xa9, 0x0e, 0x2d, 0x6f, 0xa9, 0xba, 0xd1, 0x1c, 0xe8, 0x17, 0x99, 0x36, 0x81, 0x47, 0xf5,
	0x19, 0xf4, 0x3c, 0xa3, 0x5c, 0xe0, 0x65, 0x00, 0x93, 0x2a, 0xa7, 0xa7, 0x9d, 0xd5, 0x32, 0x91,
	0x83, 0x63, 0x6c, 0x43, 0x53, 0x39, 0xdc, 0x9c, 0xd8, 0x96, 0x27, 0xfa, 0xe4, 0xd3, 0x0f, 0x65,
	0xcc, 0xd7, 0x4b, 0xf6, 0x17, 0x08, 0x5e, 0x7e, 0x27, 0xe4, 0x62, 0xfe, 0x88, 0x7d, 0xca, 0xc7,
	0x2c, 0xe1, 0x14, 0xbf, 0x3e, 0xd3, 0x7e, 0xcd, 0xa4, 0x2b, 0x7b, 0xa7, 0x14, 0x78, 0x0c, 0x96,
	0x60, 0x82, 0x44, 0xc3, 0x40, 0x7a, 0x40, 0x31, 0x35, 0x7d, 0x50, 0x21, 0xe5, 0x0a, 0xfb, 0x17,
	0x04, 0x4f, 0xcb, 0x28, 0xa6, 0xdd, 0xa2, 0xea, 0xb3, 0xa4, 0x29, 0x4b, 0xd7, 0x98, 0x95, 0x6e,
	0x05, 0xda, 0xc5, 0xb2, 0x72, 0xa5, 0x76, 0x9e, 0x65, 0x62, 0xca, 0x95, 0x33, 0xfd, 0xdc, 0xad,
	0xf4, 0x53, 0x95, 0x76, 0xd6, 0x51, 0x8b, 0x34, 0x53, 0xd9, 0xbb, 0x80, 0xb4, 0xde, 0x4f, 0x2d,
	0x58, 0x9e, 0x94, 0xf2, 0xf5, 0x2d, 0xaa, 0x7d, 0xaa, 0xef, 0x50, 0xfc, 0x2d, 0x82, 0xa5, 0x7d,
	0x5a, 0x63, 0x03, 0x75, 0xc0, 0x4b, 0xb5, 0xc2, 0x9a, 0x3a, 0xc6, 0x8d, 0xdd, 0x35, 0x99, 0x74,
	0x3b, 0x2f, 0xd9, 0xdb, 0x57, 0xbf, 0xfd, 0xf5, 0x75, 0x63, 0x13, 0x6f, 0x94, 0x6f, 0x6b, 0x57,
	0xf6, 0xe4, 0x2a, 0x15, 0x5c, 0x73, 0x03, 0x70, 0xf7, 0x62, 0xfa, 0x7e, 0xb8, 0xc4, 0x57, 0x08,
	0xba, 0x75, 0xa4, 0xba, 0x1f, 0x5c, 0x72, 0xf9, 0x42, 0x4c, 0x6b, 0x8a, 0xe9, 0x09, 0xb6, 0x6f,
	0x66, 0xc2, 0x3f, 0x22, 0x58, 0xa9, 0x85, 0x28, 0xc6, 0xa4, 0x58, 0xfa, 0xf3, 0x9f, 0x71, 0xa3,
	0xd9, 0x7a, 0x95, 0xef, 0x3f, 0x4c, 0x6f, 0xbf, 0xa9, 0x10, 0x77, 0xf0, 0xab, 0xb7, 0x90, 0xcd,
	0x78, 0x95, 0xbb, 0x17, 0x13, 0xa3, 0x5f, 0xe2, 0x1f, 0x10, 0xf4, 0xea, 0xc0, 0x07, 0x53, 0x37,
	0x72, 0xed, 0xb0, 0x55, 0x42, 0x81, 0xdd, 0x9f, 0x2b, 0xab, 0xf1, 0x84, 0xfd, 0xae, 0x22, 0xdd,
	0xc7, 0x6f, 0x2f, 0x3c, 0x60, 0x57, 0xbd, 0x1c, 0x24, 0xb6, 0x7a, 0xaf, 0xe8, 0xa1, 0x7f, 0x87,
	0x60, 0xb9, 0x84, 0x5d, 0xb9, 0x9c, 0x6f, 0xd6, 0x7a, 0x6d, 0xae, 0xd6, 0x55, 0x2f, 0xbc, 0xa5,
	0xf0, 0x77, 0xf1, 0xf6, 0x2c, 0xbe, 0x22, 0xd7, 0x6f, 0xcc, 0x2c, 0xd5, 0x9f, 0x08, 0x73, 0x94,
	0xfe, 0x0a, 0x41, 0xbf, 0x84, 0xfc, 0x7e, 0x4e, 0x53, 0x12, 0x45, 0x25, 0x87, 0x94, 0xdd, 0x3a,
	0xdf, 0x0d, 0x66, 0x6f, 0x19, 0x72, 0x43, 0x41, 0xbe, 0x82, 0x9f, 0xce, 0xd7, 0x98, 0xe9, 0x7d,
	0x05, 0x22, 0xfe, 0x7e, 0xf6, 0x31, 0x2f, 0xd1, 0xdc, 0xea, 0x31, 0x5f, 0x10, 0x72, 0x4f, 0x41,
	0xbe, 0x86, 0x77, 0xfe, 0x87, 0x11, 0x8c, 0xae, 0x7b, 0x5b, 0x3f, 0x5f, 0xf7, 0xd0, 0xaf, 0xd7,
	0x3d, 0xf4, 0xc7, 0x75, 0x0f, 0x7d, 0xf3, 0x67, 0xef, 0x39, 0xe8, 0x84, 0xcc, 0xe1, 0x82, 0x04,
	0x67, 0x29, 0xfb, 0x4c, 0x7f, 0xe5, 0x38, 0x64, 0x1c, 0x3a, 0xb9, 0xf7, 0x89, 0xe5, 0xb8, 0xfa,
	0x23, 0x6f, 0x37, 0xf7, 0x3e, 0x6e, 0x1c, 0x3d, 0xaf, 0x16, 0x37, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xba, 0x0f, 0x40, 0x68, 0x4d, 0x0a, 0x00, 0x00,
}

func (m *ComplianceScanStatsShim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanStatsShim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanStatsShim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanConfigId) > 0 {
		i -= len(m.ScanConfigId)
		copy(dAtA[i:], m.ScanConfigId)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ScanConfigId)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastScan != nil {
		{
			size, err := m.LastScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckStats) > 0 {
		for iNdEx := len(m.CheckStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceProfileScanStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceProfileScanStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceProfileScanStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Benchmarks) > 0 {
		for iNdEx := len(m.Benchmarks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Benchmarks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProfileName) > 0 {
		i -= len(m.ProfileName)
		copy(dAtA[i:], m.ProfileName)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ProfileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheckStats) > 0 {
		for iNdEx := len(m.CheckStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceClusterScanStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceClusterScanStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceClusterScanStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ScanStats != nil {
		{
			size, err := m.ScanStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceProfileScanStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceProfileScanStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceProfileScanStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceClusterProfileStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceClusterProfileStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceClusterProfileStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceClusterScanStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceClusterScanStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceClusterScanStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCount != 0 {
		i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScanStats) > 0 {
		for iNdEx := len(m.ScanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsStatsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceResultsStatsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceResultsStatsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceScanStatsShim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if len(m.CheckStats) > 0 {
		for _, e := range m.CheckStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	if m.LastScan != nil {
		l = m.LastScan.Size()
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	l = len(m.ScanConfigId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceProfileScanStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckStats) > 0 {
		for _, e := range m.CheckStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	l = len(m.ProfileName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if len(m.Benchmarks) > 0 {
		for _, e := range m.Benchmarks {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceClusterScanStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanStats != nil {
		l = m.ScanStats.Size()
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceProfileScanStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceResultsStatsService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceClusterProfileStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsStatsService(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceResultsStatsService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceClusterScanStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanStats) > 0 {
		for _, e := range m.ScanStats {
			l = e.Size()
			n += 1 + l + sovComplianceResultsStatsService(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovComplianceResultsStatsService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceResultsStatsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceResultsStatsService(x uint64) (n int) {
	return sovComplianceResultsStatsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceScanStatsShim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanStatsShim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanStatsShim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckStats = append(m.CheckStats, &ComplianceCheckStatusCount{})
			if err := m.CheckStats[len(m.CheckStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScan == nil {
				m.LastScan = &types.Timestamp{}
			}
			if err := m.LastScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceProfileScanStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceProfileScanStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceProfileScanStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckStats = append(m.CheckStats, &ComplianceCheckStatusCount{})
			if err := m.CheckStats[len(m.CheckStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmarks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmarks = append(m.Benchmarks, &ComplianceBenchmark{})
			if err := m.Benchmarks[len(m.Benchmarks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceClusterScanStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceClusterScanStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceClusterScanStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanStats == nil {
				m.ScanStats = &ComplianceScanStatsShim{}
			}
			if err := m.ScanStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &ComplianceScanCluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceProfileScanStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceProfileScanStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceProfileScanStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceProfileScanStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceClusterProfileStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceClusterProfileStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceClusterProfileStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceProfileScanStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceClusterScanStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceClusterScanStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceClusterScanStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanStats = append(m.ScanStats, &ComplianceClusterScanStats{})
			if err := m.ScanStats[len(m.ScanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsStatsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsStatsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceResultsStatsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceResultsStatsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsStatsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceResultsStatsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceResultsStatsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceResultsStatsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceResultsStatsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceResultsStatsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceResultsStatsService = fmt.Errorf("proto: unexpected end of group")
)
