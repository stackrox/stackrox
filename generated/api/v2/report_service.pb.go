// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/report_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NotificationMethod int32

const (
	NotificationMethod_EMAIL    NotificationMethod = 0
	NotificationMethod_DOWNLOAD NotificationMethod = 1
)

var NotificationMethod_name = map[int32]string{
	0: "EMAIL",
	1: "DOWNLOAD",
}

var NotificationMethod_value = map[string]int32{
	"EMAIL":    0,
	"DOWNLOAD": 1,
}

func (x NotificationMethod) String() string {
	return proto.EnumName(NotificationMethod_name, int32(x))
}

func (NotificationMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{0}
}

type ReportStatus_RunState int32

const (
	ReportStatus_WAITING   ReportStatus_RunState = 0
	ReportStatus_PREPARING ReportStatus_RunState = 1
	ReportStatus_SUCCESS   ReportStatus_RunState = 2
	ReportStatus_FAILURE   ReportStatus_RunState = 3
)

var ReportStatus_RunState_name = map[int32]string{
	0: "WAITING",
	1: "PREPARING",
	2: "SUCCESS",
	3: "FAILURE",
}

var ReportStatus_RunState_value = map[string]int32{
	"WAITING":   0,
	"PREPARING": 1,
	"SUCCESS":   2,
	"FAILURE":   3,
}

func (x ReportStatus_RunState) String() string {
	return proto.EnumName(ReportStatus_RunState_name, int32(x))
}

func (ReportStatus_RunState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{6, 0}
}

type ReportStatus_ReportMethod int32

const (
	ReportStatus_ON_DEMAND ReportStatus_ReportMethod = 0
	ReportStatus_SCHEDULED ReportStatus_ReportMethod = 1
)

var ReportStatus_ReportMethod_name = map[int32]string{
	0: "ON_DEMAND",
	1: "SCHEDULED",
}

var ReportStatus_ReportMethod_value = map[string]int32{
	"ON_DEMAND": 0,
	"SCHEDULED": 1,
}

func (x ReportStatus_ReportMethod) String() string {
	return proto.EnumName(ReportStatus_ReportMethod_name, int32(x))
}

func (ReportStatus_ReportMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{6, 1}
}

type GetReportHistoryRequest struct {
	ReportConfigId       string    `protobuf:"bytes,1,opt,name=report_config_id,json=reportConfigId,proto3" json:"report_config_id,omitempty"`
	ReportParamQuery     *RawQuery `protobuf:"bytes,2,opt,name=report_param_query,json=reportParamQuery,proto3" json:"report_param_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetReportHistoryRequest) Reset()         { *m = GetReportHistoryRequest{} }
func (m *GetReportHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetReportHistoryRequest) ProtoMessage()    {}
func (*GetReportHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{0}
}
func (m *GetReportHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReportHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReportHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReportHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReportHistoryRequest.Merge(m, src)
}
func (m *GetReportHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReportHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReportHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReportHistoryRequest proto.InternalMessageInfo

func (m *GetReportHistoryRequest) GetReportConfigId() string {
	if m != nil {
		return m.ReportConfigId
	}
	return ""
}

func (m *GetReportHistoryRequest) GetReportParamQuery() *RawQuery {
	if m != nil {
		return m.ReportParamQuery
	}
	return nil
}

func (m *GetReportHistoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetReportHistoryRequest) Clone() *GetReportHistoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetReportHistoryRequest)
	*cloned = *m

	cloned.ReportParamQuery = m.ReportParamQuery.Clone()
	return cloned
}

type ReportHistoryResponse struct {
	ReportSnapshots      []*ReportSnapshot `protobuf:"bytes,1,rep,name=report_snapshots,json=reportSnapshots,proto3" json:"report_snapshots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReportHistoryResponse) Reset()         { *m = ReportHistoryResponse{} }
func (m *ReportHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*ReportHistoryResponse) ProtoMessage()    {}
func (*ReportHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{1}
}
func (m *ReportHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportHistoryResponse.Merge(m, src)
}
func (m *ReportHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportHistoryResponse proto.InternalMessageInfo

func (m *ReportHistoryResponse) GetReportSnapshots() []*ReportSnapshot {
	if m != nil {
		return m.ReportSnapshots
	}
	return nil
}

func (m *ReportHistoryResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportHistoryResponse) Clone() *ReportHistoryResponse {
	if m == nil {
		return nil
	}
	cloned := new(ReportHistoryResponse)
	*cloned = *m

	if m.ReportSnapshots != nil {
		cloned.ReportSnapshots = make([]*ReportSnapshot, len(m.ReportSnapshots))
		for idx, v := range m.ReportSnapshots {
			cloned.ReportSnapshots[idx] = v.Clone()
		}
	}
	return cloned
}

type ReportStatusResponse struct {
	Status               *ReportStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReportStatusResponse) Reset()         { *m = ReportStatusResponse{} }
func (m *ReportStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ReportStatusResponse) ProtoMessage()    {}
func (*ReportStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{2}
}
func (m *ReportStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportStatusResponse.Merge(m, src)
}
func (m *ReportStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportStatusResponse proto.InternalMessageInfo

func (m *ReportStatusResponse) GetStatus() *ReportStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ReportStatusResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportStatusResponse) Clone() *ReportStatusResponse {
	if m == nil {
		return nil
	}
	cloned := new(ReportStatusResponse)
	*cloned = *m

	cloned.Status = m.Status.Clone()
	return cloned
}

type CollectionSnapshot struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionSnapshot) Reset()         { *m = CollectionSnapshot{} }
func (m *CollectionSnapshot) String() string { return proto.CompactTextString(m) }
func (*CollectionSnapshot) ProtoMessage()    {}
func (*CollectionSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{3}
}
func (m *CollectionSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSnapshot.Merge(m, src)
}
func (m *CollectionSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *CollectionSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSnapshot proto.InternalMessageInfo

func (m *CollectionSnapshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CollectionSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CollectionSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CollectionSnapshot) Clone() *CollectionSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(CollectionSnapshot)
	*cloned = *m

	return cloned
}

type ReportSnapshot struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to Filter:
	//	*ReportSnapshot_VulnReportFilters
	Filter               isReportSnapshot_Filter `protobuf_oneof:"filter"`
	CollectionSnapshot   *CollectionSnapshot     `protobuf:"bytes,6,opt,name=collection_snapshot,json=collectionSnapshot,proto3" json:"collection_snapshot,omitempty"`
	Schedule             *ReportSchedule         `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ReportStatus         *ReportStatus           `protobuf:"bytes,8,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`
	Notifiers            []*NotifierSnapshot     `protobuf:"bytes,9,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	User                 *SlimUser               `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReportSnapshot) Reset()         { *m = ReportSnapshot{} }
func (m *ReportSnapshot) String() string { return proto.CompactTextString(m) }
func (*ReportSnapshot) ProtoMessage()    {}
func (*ReportSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{4}
}
func (m *ReportSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSnapshot.Merge(m, src)
}
func (m *ReportSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ReportSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSnapshot proto.InternalMessageInfo

type isReportSnapshot_Filter interface {
	isReportSnapshot_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isReportSnapshot_Filter
}

type ReportSnapshot_VulnReportFilters struct {
	VulnReportFilters *VulnerabilityReportFilters `protobuf:"bytes,5,opt,name=vuln_report_filters,json=vulnReportFilters,proto3,oneof" json:"vuln_report_filters,omitempty"`
}

func (*ReportSnapshot_VulnReportFilters) isReportSnapshot_Filter() {}
func (m *ReportSnapshot_VulnReportFilters) Clone() isReportSnapshot_Filter {
	if m == nil {
		return nil
	}
	cloned := new(ReportSnapshot_VulnReportFilters)
	*cloned = *m

	cloned.VulnReportFilters = m.VulnReportFilters.Clone()
	return cloned
}

func (m *ReportSnapshot) GetFilter() isReportSnapshot_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReportSnapshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReportSnapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReportSnapshot) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReportSnapshot) GetVulnReportFilters() *VulnerabilityReportFilters {
	if x, ok := m.GetFilter().(*ReportSnapshot_VulnReportFilters); ok {
		return x.VulnReportFilters
	}
	return nil
}

func (m *ReportSnapshot) GetCollectionSnapshot() *CollectionSnapshot {
	if m != nil {
		return m.CollectionSnapshot
	}
	return nil
}

func (m *ReportSnapshot) GetSchedule() *ReportSchedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *ReportSnapshot) GetReportStatus() *ReportStatus {
	if m != nil {
		return m.ReportStatus
	}
	return nil
}

func (m *ReportSnapshot) GetNotifiers() []*NotifierSnapshot {
	if m != nil {
		return m.Notifiers
	}
	return nil
}

func (m *ReportSnapshot) GetUser() *SlimUser {
	if m != nil {
		return m.User
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReportSnapshot) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReportSnapshot_VulnReportFilters)(nil),
	}
}

func (m *ReportSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportSnapshot) Clone() *ReportSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(ReportSnapshot)
	*cloned = *m

	if m.Filter != nil {
		cloned.Filter = m.Filter.Clone()
	}
	cloned.CollectionSnapshot = m.CollectionSnapshot.Clone()
	cloned.Schedule = m.Schedule.Clone()
	cloned.ReportStatus = m.ReportStatus.Clone()
	if m.Notifiers != nil {
		cloned.Notifiers = make([]*NotifierSnapshot, len(m.Notifiers))
		for idx, v := range m.Notifiers {
			cloned.Notifiers[idx] = v.Clone()
		}
	}
	cloned.User = m.User.Clone()
	return cloned
}

type NotifierSnapshot struct {
	// Types that are valid to be assigned to NotifierConfig:
	//	*NotifierSnapshot_EmailConfig
	NotifierConfig       isNotifierSnapshot_NotifierConfig `protobuf_oneof:"notifier_config"`
	NotifierName         string                            `protobuf:"bytes,2,opt,name=notifier_name,json=notifierName,proto3" json:"notifier_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *NotifierSnapshot) Reset()         { *m = NotifierSnapshot{} }
func (m *NotifierSnapshot) String() string { return proto.CompactTextString(m) }
func (*NotifierSnapshot) ProtoMessage()    {}
func (*NotifierSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{5}
}
func (m *NotifierSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifierSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifierSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifierSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifierSnapshot.Merge(m, src)
}
func (m *NotifierSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *NotifierSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifierSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_NotifierSnapshot proto.InternalMessageInfo

type isNotifierSnapshot_NotifierConfig interface {
	isNotifierSnapshot_NotifierConfig()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNotifierSnapshot_NotifierConfig
}

type NotifierSnapshot_EmailConfig struct {
	EmailConfig *EmailNotifierConfiguration `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,proto3,oneof" json:"email_config,omitempty"`
}

func (*NotifierSnapshot_EmailConfig) isNotifierSnapshot_NotifierConfig() {}
func (m *NotifierSnapshot_EmailConfig) Clone() isNotifierSnapshot_NotifierConfig {
	if m == nil {
		return nil
	}
	cloned := new(NotifierSnapshot_EmailConfig)
	*cloned = *m

	cloned.EmailConfig = m.EmailConfig.Clone()
	return cloned
}

func (m *NotifierSnapshot) GetNotifierConfig() isNotifierSnapshot_NotifierConfig {
	if m != nil {
		return m.NotifierConfig
	}
	return nil
}

func (m *NotifierSnapshot) GetEmailConfig() *EmailNotifierConfiguration {
	if x, ok := m.GetNotifierConfig().(*NotifierSnapshot_EmailConfig); ok {
		return x.EmailConfig
	}
	return nil
}

func (m *NotifierSnapshot) GetNotifierName() string {
	if m != nil {
		return m.NotifierName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotifierSnapshot) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotifierSnapshot_EmailConfig)(nil),
	}
}

func (m *NotifierSnapshot) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NotifierSnapshot) Clone() *NotifierSnapshot {
	if m == nil {
		return nil
	}
	cloned := new(NotifierSnapshot)
	*cloned = *m

	if m.NotifierConfig != nil {
		cloned.NotifierConfig = m.NotifierConfig.Clone()
	}
	return cloned
}

type ReportStatus struct {
	RunState                 ReportStatus_RunState     `protobuf:"varint,1,opt,name=run_state,json=runState,proto3,enum=v2.ReportStatus_RunState" json:"run_state,omitempty"`
	CompletedAt              *types.Timestamp          `protobuf:"bytes,2,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	ErrorMsg                 string                    `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	ReportRequestType        ReportStatus_ReportMethod `protobuf:"varint,4,opt,name=report_request_type,json=reportRequestType,proto3,enum=v2.ReportStatus_ReportMethod" json:"report_request_type,omitempty"`
	ReportNotificationMethod NotificationMethod        `protobuf:"varint,5,opt,name=report_notification_method,json=reportNotificationMethod,proto3,enum=v2.NotificationMethod" json:"report_notification_method,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *ReportStatus) Reset()         { *m = ReportStatus{} }
func (m *ReportStatus) String() string { return proto.CompactTextString(m) }
func (*ReportStatus) ProtoMessage()    {}
func (*ReportStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{6}
}
func (m *ReportStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportStatus.Merge(m, src)
}
func (m *ReportStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReportStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReportStatus proto.InternalMessageInfo

func (m *ReportStatus) GetRunState() ReportStatus_RunState {
	if m != nil {
		return m.RunState
	}
	return ReportStatus_WAITING
}

func (m *ReportStatus) GetCompletedAt() *types.Timestamp {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *ReportStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *ReportStatus) GetReportRequestType() ReportStatus_ReportMethod {
	if m != nil {
		return m.ReportRequestType
	}
	return ReportStatus_ON_DEMAND
}

func (m *ReportStatus) GetReportNotificationMethod() NotificationMethod {
	if m != nil {
		return m.ReportNotificationMethod
	}
	return NotificationMethod_EMAIL
}

func (m *ReportStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ReportStatus) Clone() *ReportStatus {
	if m == nil {
		return nil
	}
	cloned := new(ReportStatus)
	*cloned = *m

	cloned.CompletedAt = m.CompletedAt.Clone()
	return cloned
}

type RunReportRequest struct {
	ReportConfigId           string             `protobuf:"bytes,1,opt,name=report_config_id,json=reportConfigId,proto3" json:"report_config_id,omitempty"`
	ReportNotificationMethod NotificationMethod `protobuf:"varint,2,opt,name=report_notification_method,json=reportNotificationMethod,proto3,enum=v2.NotificationMethod" json:"report_notification_method,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}           `json:"-"`
	XXX_unrecognized         []byte             `json:"-"`
	XXX_sizecache            int32              `json:"-"`
}

func (m *RunReportRequest) Reset()         { *m = RunReportRequest{} }
func (m *RunReportRequest) String() string { return proto.CompactTextString(m) }
func (*RunReportRequest) ProtoMessage()    {}
func (*RunReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{7}
}
func (m *RunReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunReportRequest.Merge(m, src)
}
func (m *RunReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunReportRequest proto.InternalMessageInfo

func (m *RunReportRequest) GetReportConfigId() string {
	if m != nil {
		return m.ReportConfigId
	}
	return ""
}

func (m *RunReportRequest) GetReportNotificationMethod() NotificationMethod {
	if m != nil {
		return m.ReportNotificationMethod
	}
	return NotificationMethod_EMAIL
}

func (m *RunReportRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RunReportRequest) Clone() *RunReportRequest {
	if m == nil {
		return nil
	}
	cloned := new(RunReportRequest)
	*cloned = *m

	return cloned
}

type RunReportResponse struct {
	ReportConfigId       string   `protobuf:"bytes,1,opt,name=report_config_id,json=reportConfigId,proto3" json:"report_config_id,omitempty"`
	ReportId             string   `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunReportResponse) Reset()         { *m = RunReportResponse{} }
func (m *RunReportResponse) String() string { return proto.CompactTextString(m) }
func (*RunReportResponse) ProtoMessage()    {}
func (*RunReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e2917f181293be, []int{8}
}
func (m *RunReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunReportResponse.Merge(m, src)
}
func (m *RunReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunReportResponse proto.InternalMessageInfo

func (m *RunReportResponse) GetReportConfigId() string {
	if m != nil {
		return m.ReportConfigId
	}
	return ""
}

func (m *RunReportResponse) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *RunReportResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RunReportResponse) Clone() *RunReportResponse {
	if m == nil {
		return nil
	}
	cloned := new(RunReportResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("v2.NotificationMethod", NotificationMethod_name, NotificationMethod_value)
	proto.RegisterEnum("v2.ReportStatus_RunState", ReportStatus_RunState_name, ReportStatus_RunState_value)
	proto.RegisterEnum("v2.ReportStatus_ReportMethod", ReportStatus_ReportMethod_name, ReportStatus_ReportMethod_value)
	proto.RegisterType((*GetReportHistoryRequest)(nil), "v2.GetReportHistoryRequest")
	proto.RegisterType((*ReportHistoryResponse)(nil), "v2.ReportHistoryResponse")
	proto.RegisterType((*ReportStatusResponse)(nil), "v2.ReportStatusResponse")
	proto.RegisterType((*CollectionSnapshot)(nil), "v2.CollectionSnapshot")
	proto.RegisterType((*ReportSnapshot)(nil), "v2.ReportSnapshot")
	proto.RegisterType((*NotifierSnapshot)(nil), "v2.NotifierSnapshot")
	proto.RegisterType((*ReportStatus)(nil), "v2.ReportStatus")
	proto.RegisterType((*RunReportRequest)(nil), "v2.RunReportRequest")
	proto.RegisterType((*RunReportResponse)(nil), "v2.RunReportResponse")
}

func init() { proto.RegisterFile("api/v2/report_service.proto", fileDescriptor_c1e2917f181293be) }

var fileDescriptor_c1e2917f181293be = []byte{
	// 1088 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xe1, 0x6e, 0x1b, 0x45,
	0x10, 0xce, 0xd9, 0x69, 0x6a, 0x8f, 0x9d, 0xc4, 0xd9, 0xa4, 0xf4, 0xe2, 0x14, 0x37, 0x3a, 0x10,
	0x32, 0x11, 0x3d, 0x4b, 0x87, 0x40, 0xa8, 0x52, 0xa5, 0x3a, 0xb6, 0x9b, 0x58, 0x72, 0x9c, 0x70,
	0x4e, 0x5a, 0xd4, 0x1f, 0x58, 0x97, 0xf3, 0x26, 0x39, 0x71, 0x77, 0x7b, 0xdd, 0xdd, 0x33, 0x98,
	0xaa, 0x02, 0xf1, 0x02, 0x48, 0xf0, 0x87, 0x37, 0x81, 0x47, 0xe0, 0x27, 0x12, 0x2f, 0x80, 0x02,
	0x0f, 0x82, 0x6e, 0x77, 0x7d, 0x39, 0xdb, 0x2a, 0x6a, 0xf9, 0x77, 0xf7, 0xcd, 0xcc, 0x37, 0xb3,
	0xdf, 0xcc, 0xce, 0xc2, 0x8e, 0x13, 0x79, 0x8d, 0xb1, 0xd5, 0xa0, 0x38, 0x22, 0x94, 0x0f, 0x19,
	0xa6, 0x63, 0xcf, 0xc5, 0x66, 0x44, 0x09, 0x27, 0x28, 0x37, 0xb6, 0xaa, 0xf7, 0x2f, 0x09, 0xb9,
	0xf4, 0x71, 0x43, 0x20, 0xe7, 0xf1, 0x45, 0x83, 0x7b, 0x01, 0x66, 0xdc, 0x09, 0x22, 0xe9, 0x54,
	0xdd, 0x54, 0x0c, 0x2e, 0x09, 0x02, 0x12, 0x2a, 0x70, 0x5b, 0x81, 0x0c, 0x3b, 0xd4, 0xbd, 0x1a,
	0xbe, 0x88, 0x31, 0x9d, 0x28, 0xd3, 0x3d, 0x45, 0x98, 0x78, 0x38, 0x61, 0x48, 0xb8, 0xc3, 0x3d,
	0x12, 0x32, 0x65, 0xfd, 0x70, 0xb6, 0x1e, 0x97, 0x84, 0x17, 0xde, 0x65, 0x4c, 0x85, 0xcf, 0x6c,
	0x75, 0xd5, 0x0d, 0xe5, 0x1a, 0x33, 0x4c, 0x25, 0x64, 0x7c, 0x07, 0x77, 0x0f, 0x30, 0xb7, 0x45,
	0xec, 0xa1, 0xc7, 0x38, 0xa1, 0x13, 0x1b, 0xbf, 0x88, 0x31, 0xe3, 0xa8, 0x0e, 0x95, 0x19, 0xce,
	0xa1, 0x37, 0xd2, 0xb5, 0x5d, 0xad, 0x5e, 0xb4, 0xd7, 0x24, 0xde, 0x12, 0x70, 0x77, 0x84, 0x1e,
	0x02, 0x52, 0x9e, 0x91, 0x43, 0x9d, 0x40, 0x16, 0xaf, 0xe7, 0x76, 0xb5, 0x7a, 0xc9, 0x2a, 0x9b,
	0x63, 0xcb, 0xb4, 0x9d, 0xaf, 0x3f, 0x4f, 0x30, 0x5b, 0x31, 0x9e, 0x24, 0x6e, 0x02, 0x31, 0x9e,
	0xc2, 0x9d, 0xb9, 0xec, 0x2c, 0x22, 0x21, 0xc3, 0xe8, 0x51, 0x9a, 0x9e, 0x85, 0x4e, 0xc4, 0xae,
	0x08, 0x67, 0xba, 0xb6, 0x9b, 0xaf, 0x97, 0x2c, 0x24, 0x28, 0x85, 0x6d, 0xa0, 0x4c, 0xf6, 0x3a,
	0x9d, 0xf9, 0x67, 0xc6, 0x63, 0xd8, 0x52, 0x2e, 0xdc, 0xe1, 0x31, 0x4b, 0x69, 0xeb, 0xb0, 0xc2,
	0x04, 0x22, 0xce, 0x52, 0xb2, 0x2a, 0x19, 0x32, 0xe9, 0xa9, 0xec, 0xc6, 0x67, 0x80, 0x5a, 0xc4,
	0xf7, 0xb1, 0x9b, 0x28, 0x39, 0x25, 0x46, 0x6b, 0x90, 0x4b, 0x75, 0xc8, 0x79, 0x23, 0x84, 0x60,
	0x39, 0x74, 0x02, 0x2c, 0x4e, 0x5b, 0xb4, 0xc5, 0xb7, 0xf1, 0x5b, 0x1e, 0xd6, 0x66, 0xeb, 0x7b,
	0x93, 0x30, 0xb4, 0x0b, 0xa5, 0x11, 0x66, 0x2e, 0xf5, 0xa2, 0x24, 0xa3, 0x9e, 0x17, 0xa6, 0x2c,
	0x84, 0x4e, 0x60, 0x73, 0x1c, 0xfb, 0xe1, 0x50, 0x09, 0x73, 0xe1, 0xf9, 0x1c, 0x53, 0xa6, 0xdf,
	0x12, 0x27, 0xa9, 0x25, 0x27, 0x79, 0x1a, 0xfb, 0x21, 0xa6, 0xce, 0xb9, 0xe7, 0x7b, 0x7c, 0x22,
	0x6b, 0x78, 0x22, 0xbd, 0x0e, 0x97, 0xec, 0x8d, 0x24, 0x78, 0x06, 0x44, 0x07, 0xb0, 0xe9, 0xa6,
	0x87, 0x4c, 0x95, 0xd6, 0x57, 0x04, 0xe3, 0x3b, 0x09, 0xe3, 0xa2, 0x06, 0x36, 0x72, 0x17, 0x75,
	0x31, 0xa1, 0xc0, 0xdc, 0x2b, 0x3c, 0x8a, 0x7d, 0xac, 0xdf, 0x16, 0xd1, 0xd9, 0x36, 0x29, 0x8b,
	0x9d, 0xfa, 0xa0, 0x4f, 0x60, 0x75, 0xda, 0x5e, 0xd9, 0x8e, 0xc2, 0x6b, 0xda, 0x51, 0xa6, 0x99,
	0x3f, 0x64, 0x41, 0x31, 0x24, 0xdc, 0xbb, 0xf0, 0x92, 0x73, 0x17, 0xc5, 0x38, 0x6c, 0x25, 0x21,
	0x7d, 0x05, 0xa6, 0x35, 0xde, 0xb8, 0xa1, 0x5d, 0x58, 0x4e, 0x26, 0x5e, 0x87, 0x9b, 0x81, 0x1c,
	0xf8, 0x5e, 0x70, 0xc6, 0x30, 0xb5, 0x85, 0x65, 0xbf, 0x00, 0x2b, 0x52, 0x4b, 0xe3, 0x47, 0x0d,
	0x2a, 0xf3, 0x5c, 0xa8, 0x05, 0x65, 0x1c, 0x38, 0x9e, 0xaf, 0x2e, 0x82, 0x9a, 0x1c, 0xa1, 0x77,
	0x27, 0xc1, 0xa7, 0x01, 0xad, 0xec, 0xdd, 0x3b, 0x5c, 0xb2, 0x4b, 0x22, 0x4a, 0xa2, 0xe8, 0x3d,
	0x58, 0x9d, 0x96, 0x34, 0xcc, 0xb4, 0xbe, 0x3c, 0x05, 0xfb, 0x4e, 0x80, 0xf7, 0x37, 0x60, 0x3d,
	0x75, 0x92, 0xc9, 0x8c, 0x5f, 0xf3, 0x50, 0xce, 0x0a, 0x82, 0x3e, 0x85, 0x22, 0x8d, 0x43, 0x21,
	0x1b, 0x16, 0xa5, 0xac, 0x59, 0xdb, 0xf3, 0xaa, 0x99, 0x76, 0x1c, 0x26, 0x5f, 0xd8, 0x2e, 0x50,
	0xf5, 0x85, 0x1e, 0x41, 0xd9, 0x25, 0x41, 0xe4, 0x63, 0x8e, 0x47, 0x43, 0x87, 0xab, 0xfb, 0x59,
	0x35, 0xe5, 0x76, 0x31, 0xa7, 0xeb, 0xca, 0x3c, 0x9d, 0xae, 0x2b, 0xbb, 0x94, 0xfa, 0x37, 0x39,
	0xda, 0x81, 0x22, 0xa6, 0x94, 0xd0, 0x61, 0xc0, 0x2e, 0xd5, 0x6c, 0x16, 0x04, 0x70, 0xc4, 0x2e,
	0xd1, 0x11, 0x6c, 0xaa, 0x6e, 0x52, 0xb9, 0x3d, 0x86, 0x7c, 0x12, 0x61, 0x7d, 0x59, 0x54, 0xf7,
	0xee, 0x62, 0x75, 0xe2, 0xe7, 0x08, 0xf3, 0x2b, 0x32, 0xb2, 0x37, 0x64, 0xa4, 0x5a, 0x3b, 0xa7,
	0x93, 0x08, 0xa3, 0x53, 0xa8, 0x2a, 0x3a, 0xa9, 0x86, 0x2b, 0xb7, 0x59, 0x20, 0x02, 0xc4, 0xb8,
	0xaf, 0xc9, 0xe1, 0xec, 0x67, 0xcc, 0x8a, 0x4e, 0x97, 0x91, 0x8b, 0x16, 0xe3, 0x31, 0x14, 0xa6,
	0xb2, 0xa0, 0x12, 0xdc, 0x7e, 0xd6, 0xec, 0x9e, 0x76, 0xfb, 0x07, 0x95, 0x25, 0xb4, 0x0a, 0xc5,
	0x13, 0xbb, 0x73, 0xd2, 0xb4, 0x93, 0x5f, 0x2d, 0xb1, 0x0d, 0xce, 0x5a, 0xad, 0xce, 0x60, 0x50,
	0xc9, 0x25, 0x3f, 0x4f, 0x9a, 0xdd, 0xde, 0x99, 0xdd, 0xa9, 0xe4, 0x8d, 0x8f, 0xa6, 0xad, 0x90,
	0x8c, 0x49, 0xe0, 0x71, 0x7f, 0xd8, 0xee, 0x1c, 0x35, 0xfb, 0x6d, 0xc9, 0x33, 0x68, 0x1d, 0x76,
	0xda, 0x67, 0xbd, 0x4e, 0xbb, 0xa2, 0x19, 0x3f, 0x69, 0x50, 0xb1, 0x63, 0x75, 0xe1, 0xde, 0x7e,
	0xab, 0xfe, 0xb7, 0x08, 0xb9, 0xff, 0x29, 0xc2, 0x73, 0xd8, 0xc8, 0xd4, 0x94, 0x2e, 0xc5, 0x37,
	0x2d, 0x6a, 0x07, 0x8a, 0xca, 0xd3, 0x1b, 0xa9, 0x09, 0x2e, 0x48, 0xa0, 0x3b, 0xda, 0x7b, 0x00,
	0x68, 0x31, 0x23, 0x2a, 0xc2, 0xad, 0xce, 0x51, 0xb3, 0xdb, 0xab, 0x2c, 0xa1, 0x32, 0x14, 0xda,
	0xc7, 0xcf, 0xfa, 0xbd, 0xe3, 0x66, 0xbb, 0xa2, 0x59, 0xdf, 0x2f, 0xc3, 0xaa, 0x1a, 0x0b, 0xf9,
	0x4c, 0xa1, 0x2f, 0x61, 0x3d, 0x7d, 0x8d, 0xd4, 0xb4, 0xab, 0x85, 0xc0, 0x48, 0x4c, 0x5d, 0xbc,
	0x3f, 0xe9, 0xb6, 0xab, 0xfa, 0xc2, 0x8a, 0x50, 0xc7, 0x30, 0xee, 0xff, 0xf0, 0xe7, 0x3f, 0x3f,
	0xe7, 0xb6, 0xd1, 0xdd, 0x9b, 0xf7, 0x90, 0x35, 0xe4, 0x7a, 0x69, 0xbc, 0xf4, 0x46, 0xaf, 0x10,
	0x81, 0x9d, 0x03, 0xcc, 0x7b, 0x0e, 0x9b, 0xc9, 0xa1, 0x0e, 0xd7, 0x7e, 0xab, 0x5c, 0xef, 0x8b,
	0x5c, 0x35, 0x74, 0x2f, 0x9b, 0xcb, 0x77, 0x18, 0x7f, 0x90, 0x4d, 0xf8, 0x2d, 0x54, 0xe6, 0x9f,
	0x57, 0xb4, 0x93, 0x70, 0xbe, 0xe6, 0xd1, 0xad, 0x66, 0x6e, 0xf2, 0xdc, 0x83, 0x68, 0x98, 0x22,
	0x63, 0x1d, 0x7d, 0x90, 0xcd, 0x78, 0x25, 0x9d, 0x1a, 0x2f, 0xe7, 0xfb, 0xf7, 0x0a, 0x9d, 0x42,
	0x31, 0xed, 0x34, 0x12, 0x4b, 0x72, 0x7e, 0x18, 0xab, 0x77, 0xe6, 0x50, 0x95, 0xa9, 0x2a, 0x32,
	0x6d, 0x19, 0xeb, 0xd9, 0x4c, 0x34, 0x0e, 0x1f, 0x6a, 0x7b, 0xa8, 0x07, 0xe5, 0x96, 0x13, 0xba,
	0xd8, 0x57, 0xc4, 0x8b, 0x9a, 0x15, 0xe5, 0x5e, 0x8c, 0xf8, 0x64, 0xda, 0x90, 0xbd, 0x99, 0x86,
	0xb8, 0x22, 0x5c, 0xe8, 0xb3, 0x6f, 0xfe, 0x7e, 0x5d, 0xd3, 0xfe, 0xb8, 0xae, 0x69, 0x7f, 0x5d,
	0xd7, 0xb4, 0x5f, 0xfe, 0xae, 0x2d, 0x81, 0xee, 0x11, 0x93, 0x71, 0xc7, 0xfd, 0x8a, 0x92, 0x6f,
	0xe4, 0x4e, 0x32, 0x9d, 0xc8, 0x33, 0xc7, 0xd6, 0xf3, 0xdc, 0xd8, 0xfa, 0x22, 0x7f, 0xbe, 0x22,
	0xb0, 0x8f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x37, 0x2c, 0x90, 0x87, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ReportServiceClient interface {
	// GetReportStatus returns report status for the given report id
	GetReportStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error)
	// GetReportStatusConfigID returns report status for a report config id
	GetLastReportStatusConfigID(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error)
	// GetReportHistory returns the full history for a report configuration with the specified ID.
	GetReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error)
	// Submits a new report generation request if the user requesting this report does not have another waiting or preparing
	// report for the same report configuration.
	RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*RunReportResponse, error)
	// Cancels a queued report job for the given report id. If the job is not active, it is a noop.
	// If a report is already being prepared, it won't be cancelled.
	CancelReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) GetReportStatus(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error) {
	out := new(ReportStatusResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportService/GetReportStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetLastReportStatusConfigID(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ReportStatusResponse, error) {
	out := new(ReportStatusResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportService/GetLastReportStatusConfigID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) GetReportHistory(ctx context.Context, in *GetReportHistoryRequest, opts ...grpc.CallOption) (*ReportHistoryResponse, error) {
	out := new(ReportHistoryResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportService/GetReportHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*RunReportResponse, error) {
	out := new(RunReportResponse)
	err := c.cc.Invoke(ctx, "/v2.ReportService/RunReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) CancelReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ReportService/CancelReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	// GetReportStatus returns report status for the given report id
	GetReportStatus(context.Context, *ResourceByID) (*ReportStatusResponse, error)
	// GetReportStatusConfigID returns report status for a report config id
	GetLastReportStatusConfigID(context.Context, *ResourceByID) (*ReportStatusResponse, error)
	// GetReportHistory returns the full history for a report configuration with the specified ID.
	GetReportHistory(context.Context, *GetReportHistoryRequest) (*ReportHistoryResponse, error)
	// Submits a new report generation request if the user requesting this report does not have another waiting or preparing
	// report for the same report configuration.
	RunReport(context.Context, *RunReportRequest) (*RunReportResponse, error)
	// Cancels a queued report job for the given report id. If the job is not active, it is a noop.
	// If a report is already being prepared, it won't be cancelled.
	CancelReport(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) GetReportStatus(ctx context.Context, req *ResourceByID) (*ReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportStatus not implemented")
}
func (*UnimplementedReportServiceServer) GetLastReportStatusConfigID(ctx context.Context, req *ResourceByID) (*ReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastReportStatusConfigID not implemented")
}
func (*UnimplementedReportServiceServer) GetReportHistory(ctx context.Context, req *GetReportHistoryRequest) (*ReportHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportHistory not implemented")
}
func (*UnimplementedReportServiceServer) RunReport(ctx context.Context, req *RunReportRequest) (*RunReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}
func (*UnimplementedReportServiceServer) CancelReport(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReport not implemented")
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_GetReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportService/GetReportStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReportStatus(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetLastReportStatusConfigID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetLastReportStatusConfigID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportService/GetLastReportStatusConfigID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetLastReportStatusConfigID(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_GetReportHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReportHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportService/GetReportHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReportHistory(ctx, req.(*GetReportHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportService/RunReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).RunReport(ctx, req.(*RunReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_CancelReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).CancelReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ReportService/CancelReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).CancelReport(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportStatus",
			Handler:    _ReportService_GetReportStatus_Handler,
		},
		{
			MethodName: "GetLastReportStatusConfigID",
			Handler:    _ReportService_GetLastReportStatusConfigID_Handler,
		},
		{
			MethodName: "GetReportHistory",
			Handler:    _ReportService_GetReportHistory_Handler,
		},
		{
			MethodName: "RunReport",
			Handler:    _ReportService_RunReport_Handler,
		},
		{
			MethodName: "CancelReport",
			Handler:    _ReportService_CancelReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/report_service.proto",
}

func (m *GetReportHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReportHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReportHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReportParamQuery != nil {
		{
			size, err := m.ReportParamQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReportConfigId) > 0 {
		i -= len(m.ReportConfigId)
		copy(dAtA[i:], m.ReportConfigId)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.ReportConfigId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReportSnapshots) > 0 {
		for iNdEx := len(m.ReportSnapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportSnapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReportService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReportStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Notifiers) > 0 {
		for iNdEx := len(m.Notifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReportService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.ReportStatus != nil {
		{
			size, err := m.ReportStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CollectionSnapshot != nil {
		{
			size, err := m.CollectionSnapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportSnapshot_VulnReportFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSnapshot_VulnReportFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VulnReportFilters != nil {
		{
			size, err := m.VulnReportFilters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *NotifierSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifierSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotifierName) > 0 {
		i -= len(m.NotifierName)
		copy(dAtA[i:], m.NotifierName)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.NotifierName)))
		i--
		dAtA[i] = 0x12
	}
	if m.NotifierConfig != nil {
		{
			size := m.NotifierConfig.Size()
			i -= size
			if _, err := m.NotifierConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotifierSnapshot_EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifierSnapshot_EmailConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmailConfig != nil {
		{
			size, err := m.EmailConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReportNotificationMethod != 0 {
		i = encodeVarintReportService(dAtA, i, uint64(m.ReportNotificationMethod))
		i--
		dAtA[i] = 0x28
	}
	if m.ReportRequestType != 0 {
		i = encodeVarintReportService(dAtA, i, uint64(m.ReportRequestType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CompletedAt != nil {
		{
			size, err := m.CompletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReportService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RunState != 0 {
		i = encodeVarintReportService(dAtA, i, uint64(m.RunState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReportNotificationMethod != 0 {
		i = encodeVarintReportService(dAtA, i, uint64(m.ReportNotificationMethod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReportConfigId) > 0 {
		i -= len(m.ReportConfigId)
		copy(dAtA[i:], m.ReportConfigId)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.ReportConfigId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReportId) > 0 {
		i -= len(m.ReportId)
		copy(dAtA[i:], m.ReportId)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.ReportId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReportConfigId) > 0 {
		i -= len(m.ReportConfigId)
		copy(dAtA[i:], m.ReportConfigId)
		i = encodeVarintReportService(dAtA, i, uint64(len(m.ReportConfigId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReportService(dAtA []byte, offset int, v uint64) int {
	offset -= sovReportService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetReportHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportConfigId)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.ReportParamQuery != nil {
		l = m.ReportParamQuery.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReportSnapshots) > 0 {
		for _, e := range m.ReportSnapshots {
			l = e.Size()
			n += 1 + l + sovReportService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	if m.CollectionSnapshot != nil {
		l = m.CollectionSnapshot.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.ReportStatus != nil {
		l = m.ReportStatus.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if len(m.Notifiers) > 0 {
		for _, e := range m.Notifiers {
			l = e.Size()
			n += 1 + l + sovReportService(uint64(l))
		}
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportSnapshot_VulnReportFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VulnReportFilters != nil {
		l = m.VulnReportFilters.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	return n
}
func (m *NotifierSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifierConfig != nil {
		n += m.NotifierConfig.Size()
	}
	l = len(m.NotifierName)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifierSnapshot_EmailConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmailConfig != nil {
		l = m.EmailConfig.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	return n
}
func (m *ReportStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunState != 0 {
		n += 1 + sovReportService(uint64(m.RunState))
	}
	if m.CompletedAt != nil {
		l = m.CompletedAt.Size()
		n += 1 + l + sovReportService(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.ReportRequestType != 0 {
		n += 1 + sovReportService(uint64(m.ReportRequestType))
	}
	if m.ReportNotificationMethod != 0 {
		n += 1 + sovReportService(uint64(m.ReportNotificationMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportConfigId)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.ReportNotificationMethod != 0 {
		n += 1 + sovReportService(uint64(m.ReportNotificationMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportConfigId)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	l = len(m.ReportId)
	if l > 0 {
		n += 1 + l + sovReportService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReportService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReportService(x uint64) (n int) {
	return sovReportService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetReportHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReportHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReportHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportParamQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportParamQuery == nil {
				m.ReportParamQuery = &RawQuery{}
			}
			if err := m.ReportParamQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportSnapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportSnapshots = append(m.ReportSnapshots, &ReportSnapshot{})
			if err := m.ReportSnapshots[len(m.ReportSnapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ReportStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VulnReportFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VulnerabilityReportFilters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filter = &ReportSnapshot_VulnReportFilters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectionSnapshot == nil {
				m.CollectionSnapshot = &CollectionSnapshot{}
			}
			if err := m.CollectionSnapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &ReportSchedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportStatus == nil {
				m.ReportStatus = &ReportStatus{}
			}
			if err := m.ReportStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifiers = append(m.Notifiers, &NotifierSnapshot{})
			if err := m.Notifiers[len(m.Notifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SlimUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifierSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifierSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifierSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailNotifierConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NotifierConfig = &NotifierSnapshot_EmailConfig{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunState", wireType)
			}
			m.RunState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunState |= ReportStatus_RunState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = &types.Timestamp{}
			}
			if err := m.CompletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportRequestType", wireType)
			}
			m.ReportRequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportRequestType |= ReportStatus_ReportMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportNotificationMethod", wireType)
			}
			m.ReportNotificationMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportNotificationMethod |= NotificationMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportNotificationMethod", wireType)
			}
			m.ReportNotificationMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportNotificationMethod |= NotificationMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReportService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReportService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReportService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReportService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReportService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReportService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReportService = fmt.Errorf("proto: unexpected end of group")
)
