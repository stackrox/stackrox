// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v2/compliance_results_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComplianceResultsService_GetComplianceScanCheckResult_FullMethodName               = "/v2.ComplianceResultsService/GetComplianceScanCheckResult"
	ComplianceResultsService_GetComplianceScanResultsOverview_FullMethodName           = "/v2.ComplianceResultsService/GetComplianceScanResultsOverview"
	ComplianceResultsService_GetComplianceScanResults_FullMethodName                   = "/v2.ComplianceResultsService/GetComplianceScanResults"
	ComplianceResultsService_GetComplianceScanConfigurationResults_FullMethodName      = "/v2.ComplianceResultsService/GetComplianceScanConfigurationResults"
	ComplianceResultsService_GetComplianceProfileResults_FullMethodName                = "/v2.ComplianceResultsService/GetComplianceProfileResults"
	ComplianceResultsService_GetComplianceProfileStats_FullMethodName                  = "/v2.ComplianceResultsService/GetComplianceProfileStats"
	ComplianceResultsService_GetComplianceProfilesStats_FullMethodName                 = "/v2.ComplianceResultsService/GetComplianceProfilesStats"
	ComplianceResultsService_GetComplianceClusterScanStats_FullMethodName              = "/v2.ComplianceResultsService/GetComplianceClusterScanStats"
	ComplianceResultsService_GetComplianceOverallClusterStats_FullMethodName           = "/v2.ComplianceResultsService/GetComplianceOverallClusterStats"
	ComplianceResultsService_GetComplianceOverallClusterCount_FullMethodName           = "/v2.ComplianceResultsService/GetComplianceOverallClusterCount"
	ComplianceResultsService_GetComplianceScanResultsCount_FullMethodName              = "/v2.ComplianceResultsService/GetComplianceScanResultsCount"
	ComplianceResultsService_GetComplianceScanConfigurationResultsCount_FullMethodName = "/v2.ComplianceResultsService/GetComplianceScanConfigurationResultsCount"
)

// ComplianceResultsServiceClient is the client API for ComplianceResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceResultsServiceClient interface {
	// GetComplianceScanCheckResult returns the specific result by ID
	GetComplianceScanCheckResult(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceCheckResult, error)
	// GetComplianceScanResultsOverview lists current scan configurations with most recent results overview that match the query
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceScanResultsOverview(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsOverviewResponse, error)
	// GetComplianceScanResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceScanResults(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
	// GetComplianceScanConfigurationResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	GetComplianceScanConfigurationResults(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
	// GetComplianceProfileResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	GetComplianceProfileResults(ctx context.Context, in *ComplianceProfileResultsRequest, opts ...grpc.CallOption) (*ComplianceProfileResults, error)
	// GetComplianceProfileScanStats lists current scan stats grouped by profile
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceProfileStats(ctx context.Context, in *ComplianceProfileResultsRequest, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceProfileScanStats lists current scan stats grouped by profile
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceProfilesStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceClusterScanStats lists current scan stats grouped by cluster
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceClusterScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterScanStatsResponse, error)
	GetComplianceOverallClusterStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterOverallStatsResponse, error)
	GetComplianceOverallClusterCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceScanResults, error)
	GetComplianceScanResultsCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceScanResults, error)
	GetComplianceScanConfigurationResultsCount(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*CountComplianceScanResults, error)
}

type complianceResultsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceResultsServiceClient(cc grpc.ClientConnInterface) ComplianceResultsServiceClient {
	return &complianceResultsServiceClient{cc}
}

func (c *complianceResultsServiceClient) GetComplianceScanCheckResult(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceCheckResult, error) {
	out := new(ComplianceCheckResult)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanCheckResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanResultsOverview(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsOverviewResponse, error) {
	out := new(ListComplianceScanResultsOverviewResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanResultsOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanResults(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanConfigurationResults(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanConfigurationResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceProfileResults(ctx context.Context, in *ComplianceProfileResultsRequest, opts ...grpc.CallOption) (*ComplianceProfileResults, error) {
	out := new(ComplianceProfileResults)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceProfileResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceProfileStats(ctx context.Context, in *ComplianceProfileResultsRequest, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error) {
	out := new(ListComplianceProfileScanStatsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceProfileStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceProfilesStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceProfileScanStatsResponse, error) {
	out := new(ListComplianceProfileScanStatsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceProfilesStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceClusterScanStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterScanStatsResponse, error) {
	out := new(ListComplianceClusterScanStatsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceClusterScanStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceOverallClusterStats(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceClusterOverallStatsResponse, error) {
	out := new(ListComplianceClusterOverallStatsResponse)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceOverallClusterStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceOverallClusterCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceScanResults, error) {
	out := new(CountComplianceScanResults)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceOverallClusterCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanResultsCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceScanResults, error) {
	out := new(CountComplianceScanResults)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanResultsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanConfigurationResultsCount(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*CountComplianceScanResults, error) {
	out := new(CountComplianceScanResults)
	err := c.cc.Invoke(ctx, ComplianceResultsService_GetComplianceScanConfigurationResultsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceResultsServiceServer is the server API for ComplianceResultsService service.
// All implementations should embed UnimplementedComplianceResultsServiceServer
// for forward compatibility
type ComplianceResultsServiceServer interface {
	// GetComplianceScanCheckResult returns the specific result by ID
	GetComplianceScanCheckResult(context.Context, *ResourceByID) (*ComplianceCheckResult, error)
	// GetComplianceScanResultsOverview lists current scan configurations with most recent results overview that match the query
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceScanResultsOverview(context.Context, *RawQuery) (*ListComplianceScanResultsOverviewResponse, error)
	// GetComplianceScanResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceScanResults(context.Context, *RawQuery) (*ListComplianceScanResultsResponse, error)
	// GetComplianceScanConfigurationResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	GetComplianceScanConfigurationResults(context.Context, *ComplianceScanResultsRequest) (*ListComplianceScanResultsResponse, error)
	// GetComplianceProfileResults retrieves the most recent compliance operator scan results for the specified query
	// Optional RawQuery query fields can be combined.
	GetComplianceProfileResults(context.Context, *ComplianceProfileResultsRequest) (*ComplianceProfileResults, error)
	// GetComplianceProfileScanStats lists current scan stats grouped by profile
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceProfileStats(context.Context, *ComplianceProfileResultsRequest) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceProfileScanStats lists current scan stats grouped by profile
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceProfilesStats(context.Context, *RawQuery) (*ListComplianceProfileScanStatsResponse, error)
	// GetComplianceClusterScanStats lists current scan stats grouped by cluster
	// Optional RawQuery query fields can be combined.
	// Commonly used ones include but are not limited to
	// - scan: id(s) of the compliance scan
	// - cluster: id(s) of the cluster
	// - profile: id(s) of the profile
	GetComplianceClusterScanStats(context.Context, *RawQuery) (*ListComplianceClusterScanStatsResponse, error)
	GetComplianceOverallClusterStats(context.Context, *RawQuery) (*ListComplianceClusterOverallStatsResponse, error)
	GetComplianceOverallClusterCount(context.Context, *RawQuery) (*CountComplianceScanResults, error)
	GetComplianceScanResultsCount(context.Context, *RawQuery) (*CountComplianceScanResults, error)
	GetComplianceScanConfigurationResultsCount(context.Context, *ComplianceScanResultsRequest) (*CountComplianceScanResults, error)
}

// UnimplementedComplianceResultsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedComplianceResultsServiceServer struct {
}

func (UnimplementedComplianceResultsServiceServer) GetComplianceScanCheckResult(context.Context, *ResourceByID) (*ComplianceCheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanCheckResult not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceScanResultsOverview(context.Context, *RawQuery) (*ListComplianceScanResultsOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResultsOverview not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceScanResults(context.Context, *RawQuery) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResults not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceScanConfigurationResults(context.Context, *ComplianceScanResultsRequest) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanConfigurationResults not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceProfileResults(context.Context, *ComplianceProfileResultsRequest) (*ComplianceProfileResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfileResults not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceProfileStats(context.Context, *ComplianceProfileResultsRequest) (*ListComplianceProfileScanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfileStats not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceProfilesStats(context.Context, *RawQuery) (*ListComplianceProfileScanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfilesStats not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceClusterScanStats(context.Context, *RawQuery) (*ListComplianceClusterScanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceClusterScanStats not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceOverallClusterStats(context.Context, *RawQuery) (*ListComplianceClusterOverallStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceOverallClusterStats not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceOverallClusterCount(context.Context, *RawQuery) (*CountComplianceScanResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceOverallClusterCount not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceScanResultsCount(context.Context, *RawQuery) (*CountComplianceScanResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResultsCount not implemented")
}
func (UnimplementedComplianceResultsServiceServer) GetComplianceScanConfigurationResultsCount(context.Context, *ComplianceScanResultsRequest) (*CountComplianceScanResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanConfigurationResultsCount not implemented")
}

// UnsafeComplianceResultsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceResultsServiceServer will
// result in compilation errors.
type UnsafeComplianceResultsServiceServer interface {
	mustEmbedUnimplementedComplianceResultsServiceServer()
}

func RegisterComplianceResultsServiceServer(s grpc.ServiceRegistrar, srv ComplianceResultsServiceServer) {
	s.RegisterService(&ComplianceResultsService_ServiceDesc, srv)
}

func _ComplianceResultsService_GetComplianceScanCheckResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanCheckResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanCheckResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanCheckResult(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanResultsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanResultsOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsOverview(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanConfigurationResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanConfigurationResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanConfigurationResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanConfigurationResults(ctx, req.(*ComplianceScanResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceProfileResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceProfileResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceProfileResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileResults(ctx, req.(*ComplianceProfileResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceProfileStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceProfileResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceProfileStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfileStats(ctx, req.(*ComplianceProfileResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceProfilesStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfilesStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceProfilesStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceProfilesStats(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceClusterScanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceClusterScanStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanStats(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceOverallClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceOverallClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceOverallClusterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceOverallClusterStats(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceOverallClusterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceOverallClusterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceOverallClusterCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceOverallClusterCount(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanResultsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanResultsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResultsCount(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanConfigurationResultsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanConfigurationResultsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceResultsService_GetComplianceScanConfigurationResultsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanConfigurationResultsCount(ctx, req.(*ComplianceScanResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceResultsService_ServiceDesc is the grpc.ServiceDesc for ComplianceResultsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceResultsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceResultsService",
	HandlerType: (*ComplianceResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComplianceScanCheckResult",
			Handler:    _ComplianceResultsService_GetComplianceScanCheckResult_Handler,
		},
		{
			MethodName: "GetComplianceScanResultsOverview",
			Handler:    _ComplianceResultsService_GetComplianceScanResultsOverview_Handler,
		},
		{
			MethodName: "GetComplianceScanResults",
			Handler:    _ComplianceResultsService_GetComplianceScanResults_Handler,
		},
		{
			MethodName: "GetComplianceScanConfigurationResults",
			Handler:    _ComplianceResultsService_GetComplianceScanConfigurationResults_Handler,
		},
		{
			MethodName: "GetComplianceProfileResults",
			Handler:    _ComplianceResultsService_GetComplianceProfileResults_Handler,
		},
		{
			MethodName: "GetComplianceProfileStats",
			Handler:    _ComplianceResultsService_GetComplianceProfileStats_Handler,
		},
		{
			MethodName: "GetComplianceProfilesStats",
			Handler:    _ComplianceResultsService_GetComplianceProfilesStats_Handler,
		},
		{
			MethodName: "GetComplianceClusterScanStats",
			Handler:    _ComplianceResultsService_GetComplianceClusterScanStats_Handler,
		},
		{
			MethodName: "GetComplianceOverallClusterStats",
			Handler:    _ComplianceResultsService_GetComplianceOverallClusterStats_Handler,
		},
		{
			MethodName: "GetComplianceOverallClusterCount",
			Handler:    _ComplianceResultsService_GetComplianceOverallClusterCount_Handler,
		},
		{
			MethodName: "GetComplianceScanResultsCount",
			Handler:    _ComplianceResultsService_GetComplianceScanResultsCount_Handler,
		},
		{
			MethodName: "GetComplianceScanConfigurationResultsCount",
			Handler:    _ComplianceResultsService_GetComplianceScanConfigurationResultsCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_results_service.proto",
}
