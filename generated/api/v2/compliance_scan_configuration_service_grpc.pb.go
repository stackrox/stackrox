// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/v2/compliance_scan_configuration_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplianceScanConfigurationService_ListComplianceScanConfigurations_FullMethodName        = "/v2.ComplianceScanConfigurationService/ListComplianceScanConfigurations"
	ComplianceScanConfigurationService_GetComplianceScanConfiguration_FullMethodName          = "/v2.ComplianceScanConfigurationService/GetComplianceScanConfiguration"
	ComplianceScanConfigurationService_CreateComplianceScanConfiguration_FullMethodName       = "/v2.ComplianceScanConfigurationService/CreateComplianceScanConfiguration"
	ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_FullMethodName       = "/v2.ComplianceScanConfigurationService/UpdateComplianceScanConfiguration"
	ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_FullMethodName       = "/v2.ComplianceScanConfigurationService/DeleteComplianceScanConfiguration"
	ComplianceScanConfigurationService_RunComplianceScanConfiguration_FullMethodName          = "/v2.ComplianceScanConfigurationService/RunComplianceScanConfiguration"
	ComplianceScanConfigurationService_RunReport_FullMethodName                               = "/v2.ComplianceScanConfigurationService/RunReport"
	ComplianceScanConfigurationService_ListComplianceScanConfigProfiles_FullMethodName        = "/v2.ComplianceScanConfigurationService/ListComplianceScanConfigProfiles"
	ComplianceScanConfigurationService_ListComplianceScanConfigClusterProfiles_FullMethodName = "/v2.ComplianceScanConfigurationService/ListComplianceScanConfigClusterProfiles"
)

// ComplianceScanConfigurationServiceClient is the client API for ComplianceScanConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceScanConfigurationServiceClient interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigurationsResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error)
	// CreateComplianceScanConfiguration creates a compliance scan configuration
	CreateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan
	// configuration, which will invoke scans to run for the applicable
	// profiles across the configured clusters.
	RunComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// RunReport runs an on demand compliance report for the scan configuration
	RunReport(ctx context.Context, in *ComplianceRunReportRequest, opts ...grpc.CallOption) (*ComplianceRunReportResponse, error)
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigProfiles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigsProfileResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	ListComplianceScanConfigClusterProfiles(ctx context.Context, in *ComplianceConfigClusterProfileRequest, opts ...grpc.CallOption) (*ListComplianceScanConfigsClusterProfileResponse, error)
}

type complianceScanConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceScanConfigurationServiceClient(cc grpc.ClientConnInterface) ComplianceScanConfigurationServiceClient {
	return &complianceScanConfigurationServiceClient{cc}
}

func (c *complianceScanConfigurationServiceClient) ListComplianceScanConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComplianceScanConfigurationsResponse)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_ListComplianceScanConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) GetComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplianceScanConfigurationStatus)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_GetComplianceScanConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) CreateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplianceScanConfiguration)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_CreateComplianceScanConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) DeleteComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) RunComplianceScanConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_RunComplianceScanConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) RunReport(ctx context.Context, in *ComplianceRunReportRequest, opts ...grpc.CallOption) (*ComplianceRunReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplianceRunReportResponse)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_RunReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) ListComplianceScanConfigProfiles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListComplianceScanConfigsProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComplianceScanConfigsProfileResponse)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_ListComplianceScanConfigProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanConfigurationServiceClient) ListComplianceScanConfigClusterProfiles(ctx context.Context, in *ComplianceConfigClusterProfileRequest, opts ...grpc.CallOption) (*ListComplianceScanConfigsClusterProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComplianceScanConfigsClusterProfileResponse)
	err := c.cc.Invoke(ctx, ComplianceScanConfigurationService_ListComplianceScanConfigClusterProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceScanConfigurationServiceServer is the server API for ComplianceScanConfigurationService service.
// All implementations should embed UnimplementedComplianceScanConfigurationServiceServer
// for forward compatibility.
type ComplianceScanConfigurationServiceServer interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(context.Context, *RawQuery) (*ListComplianceScanConfigurationsResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(context.Context, *ResourceByID) (*ComplianceScanConfigurationStatus, error)
	// CreateComplianceScanConfiguration creates a compliance scan configuration
	CreateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan
	// configuration, which will invoke scans to run for the applicable
	// profiles across the configured clusters.
	RunComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// RunReport runs an on demand compliance report for the scan configuration
	RunReport(context.Context, *ComplianceRunReportRequest) (*ComplianceRunReportResponse, error)
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigProfiles(context.Context, *RawQuery) (*ListComplianceScanConfigsProfileResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	ListComplianceScanConfigClusterProfiles(context.Context, *ComplianceConfigClusterProfileRequest) (*ListComplianceScanConfigsClusterProfileResponse, error)
}

// UnimplementedComplianceScanConfigurationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplianceScanConfigurationServiceServer struct{}

func (UnimplementedComplianceScanConfigurationServiceServer) ListComplianceScanConfigurations(context.Context, *RawQuery) (*ListComplianceScanConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanConfigurations not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) GetComplianceScanConfiguration(context.Context, *ResourceByID) (*ComplianceScanConfigurationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanConfiguration not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) CreateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComplianceScanConfiguration not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) UpdateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComplianceScanConfiguration not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) DeleteComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComplianceScanConfiguration not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) RunComplianceScanConfiguration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunComplianceScanConfiguration not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) RunReport(context.Context, *ComplianceRunReportRequest) (*ComplianceRunReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) ListComplianceScanConfigProfiles(context.Context, *RawQuery) (*ListComplianceScanConfigsProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanConfigProfiles not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) ListComplianceScanConfigClusterProfiles(context.Context, *ComplianceConfigClusterProfileRequest) (*ListComplianceScanConfigsClusterProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanConfigClusterProfiles not implemented")
}
func (UnimplementedComplianceScanConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeComplianceScanConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceScanConfigurationServiceServer will
// result in compilation errors.
type UnsafeComplianceScanConfigurationServiceServer interface {
	mustEmbedUnimplementedComplianceScanConfigurationServiceServer()
}

func RegisterComplianceScanConfigurationServiceServer(s grpc.ServiceRegistrar, srv ComplianceScanConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedComplianceScanConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplianceScanConfigurationService_ServiceDesc, srv)
}

func _ComplianceScanConfigurationService_ListComplianceScanConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_ListComplianceScanConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_GetComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).GetComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_GetComplianceScanConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).GetComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_CreateComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).CreateComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_CreateComplianceScanConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).CreateComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).UpdateComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).UpdateComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).DeleteComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).DeleteComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_RunComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).RunComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_RunComplianceScanConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).RunComplianceScanConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceRunReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_RunReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).RunReport(ctx, req.(*ComplianceRunReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_ListComplianceScanConfigProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_ListComplianceScanConfigProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigProfiles(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanConfigurationService_ListComplianceScanConfigClusterProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceConfigClusterProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigClusterProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceScanConfigurationService_ListComplianceScanConfigClusterProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanConfigurationServiceServer).ListComplianceScanConfigClusterProfiles(ctx, req.(*ComplianceConfigClusterProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceScanConfigurationService_ServiceDesc is the grpc.ServiceDesc for ComplianceScanConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceScanConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceScanConfigurationService",
	HandlerType: (*ComplianceScanConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComplianceScanConfigurations",
			Handler:    _ComplianceScanConfigurationService_ListComplianceScanConfigurations_Handler,
		},
		{
			MethodName: "GetComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_GetComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "CreateComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_CreateComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "UpdateComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_UpdateComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "DeleteComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_DeleteComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "RunComplianceScanConfiguration",
			Handler:    _ComplianceScanConfigurationService_RunComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "RunReport",
			Handler:    _ComplianceScanConfigurationService_RunReport_Handler,
		},
		{
			MethodName: "ListComplianceScanConfigProfiles",
			Handler:    _ComplianceScanConfigurationService_ListComplianceScanConfigProfiles_Handler,
		},
		{
			MethodName: "ListComplianceScanConfigClusterProfiles",
			Handler:    _ComplianceScanConfigurationService_ListComplianceScanConfigClusterProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_scan_configuration_service.proto",
}
