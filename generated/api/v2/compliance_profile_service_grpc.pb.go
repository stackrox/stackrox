// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v2/compliance_profile_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComplianceProfileService_GetComplianceProfile_FullMethodName      = "/v2.ComplianceProfileService/GetComplianceProfile"
	ComplianceProfileService_ListComplianceProfiles_FullMethodName    = "/v2.ComplianceProfileService/ListComplianceProfiles"
	ComplianceProfileService_ListProfileSummaries_FullMethodName      = "/v2.ComplianceProfileService/ListProfileSummaries"
	ComplianceProfileService_GetComplianceProfileCount_FullMethodName = "/v2.ComplianceProfileService/GetComplianceProfileCount"
)

// ComplianceProfileServiceClient is the client API for ComplianceProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceProfileServiceClient interface {
	// GetComplianceProfile retrieves the specified compliance profile
	GetComplianceProfile(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceProfile, error)
	// ListComplianceProfiles returns profiles matching given request
	ListComplianceProfiles(ctx context.Context, in *ProfilesForClusterRequest, opts ...grpc.CallOption) (*ListComplianceProfilesResponse, error)
	// ListProfileSummaries returns profiles matching each cluster and the given query
	ListProfileSummaries(ctx context.Context, in *ClustersProfileSummaryRequest, opts ...grpc.CallOption) (*ListComplianceProfileSummaryResponse, error)
	// GetComplianceProfileCount returns the number of profiles matching the given query
	GetComplianceProfileCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceProfilesResponse, error)
}

type complianceProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceProfileServiceClient(cc grpc.ClientConnInterface) ComplianceProfileServiceClient {
	return &complianceProfileServiceClient{cc}
}

func (c *complianceProfileServiceClient) GetComplianceProfile(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ComplianceProfile, error) {
	out := new(ComplianceProfile)
	err := c.cc.Invoke(ctx, ComplianceProfileService_GetComplianceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceProfileServiceClient) ListComplianceProfiles(ctx context.Context, in *ProfilesForClusterRequest, opts ...grpc.CallOption) (*ListComplianceProfilesResponse, error) {
	out := new(ListComplianceProfilesResponse)
	err := c.cc.Invoke(ctx, ComplianceProfileService_ListComplianceProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceProfileServiceClient) ListProfileSummaries(ctx context.Context, in *ClustersProfileSummaryRequest, opts ...grpc.CallOption) (*ListComplianceProfileSummaryResponse, error) {
	out := new(ListComplianceProfileSummaryResponse)
	err := c.cc.Invoke(ctx, ComplianceProfileService_ListProfileSummaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceProfileServiceClient) GetComplianceProfileCount(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountComplianceProfilesResponse, error) {
	out := new(CountComplianceProfilesResponse)
	err := c.cc.Invoke(ctx, ComplianceProfileService_GetComplianceProfileCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceProfileServiceServer is the server API for ComplianceProfileService service.
// All implementations should embed UnimplementedComplianceProfileServiceServer
// for forward compatibility
type ComplianceProfileServiceServer interface {
	// GetComplianceProfile retrieves the specified compliance profile
	GetComplianceProfile(context.Context, *ResourceByID) (*ComplianceProfile, error)
	// ListComplianceProfiles returns profiles matching given request
	ListComplianceProfiles(context.Context, *ProfilesForClusterRequest) (*ListComplianceProfilesResponse, error)
	// ListProfileSummaries returns profiles matching each cluster and the given query
	ListProfileSummaries(context.Context, *ClustersProfileSummaryRequest) (*ListComplianceProfileSummaryResponse, error)
	// GetComplianceProfileCount returns the number of profiles matching the given query
	GetComplianceProfileCount(context.Context, *RawQuery) (*CountComplianceProfilesResponse, error)
}

// UnimplementedComplianceProfileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedComplianceProfileServiceServer struct {
}

func (UnimplementedComplianceProfileServiceServer) GetComplianceProfile(context.Context, *ResourceByID) (*ComplianceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfile not implemented")
}
func (UnimplementedComplianceProfileServiceServer) ListComplianceProfiles(context.Context, *ProfilesForClusterRequest) (*ListComplianceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceProfiles not implemented")
}
func (UnimplementedComplianceProfileServiceServer) ListProfileSummaries(context.Context, *ClustersProfileSummaryRequest) (*ListComplianceProfileSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfileSummaries not implemented")
}
func (UnimplementedComplianceProfileServiceServer) GetComplianceProfileCount(context.Context, *RawQuery) (*CountComplianceProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceProfileCount not implemented")
}

// UnsafeComplianceProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceProfileServiceServer will
// result in compilation errors.
type UnsafeComplianceProfileServiceServer interface {
	mustEmbedUnimplementedComplianceProfileServiceServer()
}

func RegisterComplianceProfileServiceServer(s grpc.ServiceRegistrar, srv ComplianceProfileServiceServer) {
	s.RegisterService(&ComplianceProfileService_ServiceDesc, srv)
}

func _ComplianceProfileService_GetComplianceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceProfileService_GetComplianceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfile(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceProfileService_ListComplianceProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).ListComplianceProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceProfileService_ListComplianceProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).ListComplianceProfiles(ctx, req.(*ProfilesForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceProfileService_ListProfileSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersProfileSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).ListProfileSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceProfileService_ListProfileSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).ListProfileSummaries(ctx, req.(*ClustersProfileSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceProfileService_GetComplianceProfileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceProfileService_GetComplianceProfileCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceProfileServiceServer).GetComplianceProfileCount(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceProfileService_ServiceDesc is the grpc.ServiceDesc for ComplianceProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceProfileService",
	HandlerType: (*ComplianceProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComplianceProfile",
			Handler:    _ComplianceProfileService_GetComplianceProfile_Handler,
		},
		{
			MethodName: "ListComplianceProfiles",
			Handler:    _ComplianceProfileService_ListComplianceProfiles_Handler,
		},
		{
			MethodName: "ListProfileSummaries",
			Handler:    _ComplianceProfileService_ListProfileSummaries_Handler,
		},
		{
			MethodName: "GetComplianceProfileCount",
			Handler:    _ComplianceProfileService_GetComplianceProfileCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_profile_service.proto",
}
