// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: api/integrations/splunk_service.proto

package integrations

import (
	storage "github.com/stackrox/rox/generated/storage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A new enum is introduced instead of storage.Alert.Violation.Type because
// 1) storage.Alert.Violation.Type does not have an item for PROCESS_EVENT
// 2) default value of storage.Alert.Violation.Type is GENERIC=0 and therefore not serialized to JSON.
type SplunkViolation_ViolationInfo_ViolationType int32

const (
	SplunkViolation_ViolationInfo_UNKNOWN       SplunkViolation_ViolationInfo_ViolationType = 0
	SplunkViolation_ViolationInfo_GENERIC       SplunkViolation_ViolationInfo_ViolationType = 1
	SplunkViolation_ViolationInfo_K8S_EVENT     SplunkViolation_ViolationInfo_ViolationType = 2
	SplunkViolation_ViolationInfo_PROCESS_EVENT SplunkViolation_ViolationInfo_ViolationType = 3
	SplunkViolation_ViolationInfo_NETWORK_FLOW  SplunkViolation_ViolationInfo_ViolationType = 4
)

// Enum value maps for SplunkViolation_ViolationInfo_ViolationType.
var (
	SplunkViolation_ViolationInfo_ViolationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GENERIC",
		2: "K8S_EVENT",
		3: "PROCESS_EVENT",
		4: "NETWORK_FLOW",
	}
	SplunkViolation_ViolationInfo_ViolationType_value = map[string]int32{
		"UNKNOWN":       0,
		"GENERIC":       1,
		"K8S_EVENT":     2,
		"PROCESS_EVENT": 3,
		"NETWORK_FLOW":  4,
	}
)

func (x SplunkViolation_ViolationInfo_ViolationType) Enum() *SplunkViolation_ViolationInfo_ViolationType {
	p := new(SplunkViolation_ViolationInfo_ViolationType)
	*p = x
	return p
}

func (x SplunkViolation_ViolationInfo_ViolationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplunkViolation_ViolationInfo_ViolationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_integrations_splunk_service_proto_enumTypes[0].Descriptor()
}

func (SplunkViolation_ViolationInfo_ViolationType) Type() protoreflect.EnumType {
	return &file_api_integrations_splunk_service_proto_enumTypes[0]
}

func (x SplunkViolation_ViolationInfo_ViolationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplunkViolation_ViolationInfo_ViolationType.Descriptor instead.
func (SplunkViolation_ViolationInfo_ViolationType) EnumDescriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

// SplunkViolationsResponse is what StackRox Platform returns on the request from Splunk Technology Addon for StackRox.
type SplunkViolationsResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Violations []*SplunkViolation     `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	// new_checkpoint sets the checkpoint value for Splunk to use on the next call.
	NewCheckpoint string `protobuf:"bytes,6,opt,name=new_checkpoint,json=newCheckpoint,proto3" json:"new_checkpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplunkViolationsResponse) Reset() {
	*x = SplunkViolationsResponse{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolationsResponse) ProtoMessage() {}

func (x *SplunkViolationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolationsResponse.ProtoReflect.Descriptor instead.
func (*SplunkViolationsResponse) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{0}
}

func (x *SplunkViolationsResponse) GetViolations() []*SplunkViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *SplunkViolationsResponse) GetNewCheckpoint() string {
	if x != nil {
		return x.NewCheckpoint
	}
	return ""
}

// SplunkViolation presents a violation information for Splunk. Essentially, it is a view of data centered around each
// separate violation in storage.Alert structure: storage.Alert.Violation and storage.ProcessIndicator.
// We're not using storage.Alert directly because it will be inconvenient to expose _individual_ violations that way.
// Also, that would unnecessarily couple our Splunk Technology Addon (TA) to internal (storage) data structures of
// StackRox. Given that TA and StackRox Platform are versioned and updated independently, it is safer to work with a
// dedicated data structure for the SackRox-TA API interface, which is this SplunkViolation.
// Note that SplunkViolation still re-uses some definitions from storage where it seemed practical to not reinvent too
// much.
type SplunkViolation struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ViolationInfo *SplunkViolation_ViolationInfo `protobuf:"bytes,1,opt,name=violation_info,json=violationInfo,proto3" json:"violation_info,omitempty"`
	AlertInfo     *SplunkViolation_AlertInfo     `protobuf:"bytes,2,opt,name=alert_info,json=alertInfo,proto3" json:"alert_info,omitempty"`
	ProcessInfo   *SplunkViolation_ProcessInfo   `protobuf:"bytes,3,opt,name=process_info,json=processInfo,proto3" json:"process_info,omitempty"`
	// Types that are valid to be assigned to EntityInfo:
	//
	//	*SplunkViolation_DeploymentInfo_
	//	*SplunkViolation_ResourceInfo_
	EntityInfo isSplunkViolation_EntityInfo `protobuf_oneof:"EntityInfo"`
	PolicyInfo *SplunkViolation_PolicyInfo  `protobuf:"bytes,5,opt,name=policy_info,json=policyInfo,proto3" json:"policy_info,omitempty"`
	// extra details for network violation
	NetworkFlowInfo *storage.Alert_Violation_NetworkFlowInfo `protobuf:"bytes,6,opt,name=network_flow_info,json=networkFlowInfo,proto3" json:"network_flow_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SplunkViolation) Reset() {
	*x = SplunkViolation{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation) ProtoMessage() {}

func (x *SplunkViolation) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation.ProtoReflect.Descriptor instead.
func (*SplunkViolation) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1}
}

func (x *SplunkViolation) GetViolationInfo() *SplunkViolation_ViolationInfo {
	if x != nil {
		return x.ViolationInfo
	}
	return nil
}

func (x *SplunkViolation) GetAlertInfo() *SplunkViolation_AlertInfo {
	if x != nil {
		return x.AlertInfo
	}
	return nil
}

func (x *SplunkViolation) GetProcessInfo() *SplunkViolation_ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

func (x *SplunkViolation) GetEntityInfo() isSplunkViolation_EntityInfo {
	if x != nil {
		return x.EntityInfo
	}
	return nil
}

func (x *SplunkViolation) GetDeploymentInfo() *SplunkViolation_DeploymentInfo {
	if x != nil {
		if x, ok := x.EntityInfo.(*SplunkViolation_DeploymentInfo_); ok {
			return x.DeploymentInfo
		}
	}
	return nil
}

func (x *SplunkViolation) GetResourceInfo() *SplunkViolation_ResourceInfo {
	if x != nil {
		if x, ok := x.EntityInfo.(*SplunkViolation_ResourceInfo_); ok {
			return x.ResourceInfo
		}
	}
	return nil
}

func (x *SplunkViolation) GetPolicyInfo() *SplunkViolation_PolicyInfo {
	if x != nil {
		return x.PolicyInfo
	}
	return nil
}

func (x *SplunkViolation) GetNetworkFlowInfo() *storage.Alert_Violation_NetworkFlowInfo {
	if x != nil {
		return x.NetworkFlowInfo
	}
	return nil
}

type isSplunkViolation_EntityInfo interface {
	isSplunkViolation_EntityInfo()
}

type SplunkViolation_DeploymentInfo_ struct {
	DeploymentInfo *SplunkViolation_DeploymentInfo `protobuf:"bytes,4,opt,name=deployment_info,json=deploymentInfo,proto3,oneof"`
}

type SplunkViolation_ResourceInfo_ struct {
	ResourceInfo *SplunkViolation_ResourceInfo `protobuf:"bytes,10,opt,name=resource_info,json=resourceInfo,proto3,oneof"`
}

func (*SplunkViolation_DeploymentInfo_) isSplunkViolation_EntityInfo() {}

func (*SplunkViolation_ResourceInfo_) isSplunkViolation_EntityInfo() {}

// From storage.Alert.Violation (numbers <100).
type SplunkViolation_ViolationInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// In case of non-Process alerts (k8s and non-runtime), this is surrogate identifier derived from
	// alert_id + crypto_hash(storage.Alert.Violation).
	// In case of Process alerts, this has the same value as ProcessInfo.process_violation_id.
	ViolationId                string                                                `protobuf:"bytes,1,opt,name=violation_id,json=violationId,proto3" json:"violation_id,omitempty"`
	ViolationMessage           string                                                `protobuf:"bytes,2,opt,name=violation_message,json=violationMessage,proto3" json:"violation_message,omitempty"`
	ViolationMessageAttributes []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr `protobuf:"bytes,3,rep,name=violation_message_attributes,json=violationMessageAttributes,proto3" json:"violation_message_attributes,omitempty"`
	ViolationType              SplunkViolation_ViolationInfo_ViolationType           `protobuf:"varint,4,opt,name=violation_type,json=violationType,proto3,enum=integrations.SplunkViolation_ViolationInfo_ViolationType" json:"violation_type,omitempty"`
	// In case of k8s alerts, this is storage.Alert.Violation.time
	// In case of Process alerts, this is storage.ProcessSignal.process_creation_time
	// In case of other alerts, this is storage.Alert.time
	ViolationTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=violation_time,json=violationTime,proto3" json:"violation_time,omitempty"`
	PodId              string                 `protobuf:"bytes,102,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	PodUid             string                 `protobuf:"bytes,103,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	ContainerName      string                 `protobuf:"bytes,104,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerStartTime *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=container_start_time,json=containerStartTime,proto3" json:"container_start_time,omitempty"`
	ContainerId        string                 `protobuf:"bytes,106,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SplunkViolation_ViolationInfo) Reset() {
	*x = SplunkViolation_ViolationInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ViolationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ViolationInfo) ProtoMessage() {}

func (x *SplunkViolation_ViolationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_ViolationInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_ViolationInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SplunkViolation_ViolationInfo) GetViolationId() string {
	if x != nil {
		return x.ViolationId
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetViolationMessage() string {
	if x != nil {
		return x.ViolationMessage
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetViolationMessageAttributes() []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr {
	if x != nil {
		return x.ViolationMessageAttributes
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetViolationType() SplunkViolation_ViolationInfo_ViolationType {
	if x != nil {
		return x.ViolationType
	}
	return SplunkViolation_ViolationInfo_UNKNOWN
}

func (x *SplunkViolation_ViolationInfo) GetViolationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ViolationTime
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetContainerStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ContainerStartTime
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// From storage.Alert
type SplunkViolation_AlertInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AlertId            string                 `protobuf:"bytes,1,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`
	LifecycleStage     storage.LifecycleStage `protobuf:"varint,2,opt,name=lifecycle_stage,json=lifecycleStage,proto3,enum=storage.LifecycleStage" json:"lifecycle_stage,omitempty"`
	AlertFirstOccurred *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=alert_first_occurred,json=alertFirstOccurred,proto3" json:"alert_first_occurred,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SplunkViolation_AlertInfo) Reset() {
	*x = SplunkViolation_AlertInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_AlertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_AlertInfo) ProtoMessage() {}

func (x *SplunkViolation_AlertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_AlertInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_AlertInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SplunkViolation_AlertInfo) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

func (x *SplunkViolation_AlertInfo) GetLifecycleStage() storage.LifecycleStage {
	if x != nil {
		return x.LifecycleStage
	}
	return storage.LifecycleStage(0)
}

func (x *SplunkViolation_AlertInfo) GetAlertFirstOccurred() *timestamppb.Timestamp {
	if x != nil {
		return x.AlertFirstOccurred
	}
	return nil
}

// From storage.ProcessIndicator (numbers 1xx) and storage.ProcessSignal (numbers 2xx).
type SplunkViolation_ProcessInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ProcessViolationId  string                 `protobuf:"bytes,101,opt,name=process_violation_id,json=processViolationId,proto3" json:"process_violation_id,omitempty"`
	ProcessSignalId     string                 `protobuf:"bytes,202,opt,name=process_signal_id,json=processSignalId,proto3" json:"process_signal_id,omitempty"`
	ProcessCreationTime *timestamppb.Timestamp `protobuf:"bytes,203,opt,name=process_creation_time,json=processCreationTime,proto3" json:"process_creation_time,omitempty"`
	ProcessName         string                 `protobuf:"bytes,204,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	ProcessArgs         string                 `protobuf:"bytes,205,opt,name=process_args,json=processArgs,proto3" json:"process_args,omitempty"`
	ExecFilePath        string                 `protobuf:"bytes,206,opt,name=exec_file_path,json=execFilePath,proto3" json:"exec_file_path,omitempty"`
	// UInt32Value is used for pid, process_uid and process_gid instead of plain uint32 to include 0 values on output.
	Pid                *wrapperspb.UInt32Value              `protobuf:"bytes,207,opt,name=pid,proto3" json:"pid,omitempty"`
	ProcessUid         *wrapperspb.UInt32Value              `protobuf:"bytes,208,opt,name=process_uid,json=processUid,proto3" json:"process_uid,omitempty"`
	ProcessGid         *wrapperspb.UInt32Value              `protobuf:"bytes,209,opt,name=process_gid,json=processGid,proto3" json:"process_gid,omitempty"`
	ProcessLineageInfo []*storage.ProcessSignal_LineageInfo `protobuf:"bytes,210,rep,name=process_lineage_info,json=processLineageInfo,proto3" json:"process_lineage_info,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SplunkViolation_ProcessInfo) Reset() {
	*x = SplunkViolation_ProcessInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ProcessInfo) ProtoMessage() {}

func (x *SplunkViolation_ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_ProcessInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_ProcessInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *SplunkViolation_ProcessInfo) GetProcessViolationId() string {
	if x != nil {
		return x.ProcessViolationId
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessSignalId() string {
	if x != nil {
		return x.ProcessSignalId
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessCreationTime
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessArgs() string {
	if x != nil {
		return x.ProcessArgs
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetExecFilePath() string {
	if x != nil {
		return x.ExecFilePath
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessUid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProcessUid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessGid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProcessGid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessLineageInfo() []*storage.ProcessSignal_LineageInfo {
	if x != nil {
		return x.ProcessLineageInfo
	}
	return nil
}

// From storage.Alert.Entity: storage.Alert.Deployment (numbers 1xx) and storage.ContainerImage (2xx).
// NOTE: While Deployment in K8S is a resource, we have DeploymentInfo separate from ResourceInfo mainly for
// historical reasons and backwards compatibility. Next time we modify DeploymentInfo/ResourceInfo we should consider
// unifying both and migrating users to ResourceInfo (or even newer object).
type SplunkViolation_DeploymentInfo struct {
	state                 protoimpl.MessageState                `protogen:"open.v1"`
	DeploymentId          string                                `protobuf:"bytes,101,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentName        string                                `protobuf:"bytes,102,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	DeploymentType        string                                `protobuf:"bytes,103,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty"`
	DeploymentNamespace   string                                `protobuf:"bytes,104,opt,name=deployment_namespace,json=deploymentNamespace,proto3" json:"deployment_namespace,omitempty"`
	DeploymentNamespaceId string                                `protobuf:"bytes,105,opt,name=deployment_namespace_id,json=deploymentNamespaceId,proto3" json:"deployment_namespace_id,omitempty"`
	DeploymentLabels      map[string]string                     `protobuf:"bytes,106,rep,name=deployment_labels,json=deploymentLabels,proto3" json:"deployment_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClusterId             string                                `protobuf:"bytes,107,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName           string                                `protobuf:"bytes,108,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	DeploymentContainers  []*storage.Alert_Deployment_Container `protobuf:"bytes,109,rep,name=deployment_containers,json=deploymentContainers,proto3" json:"deployment_containers,omitempty"`
	DeploymentAnnotations map[string]string                     `protobuf:"bytes,110,rep,name=deployment_annotations,json=deploymentAnnotations,proto3" json:"deployment_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeploymentImage       *storage.ContainerImage               `protobuf:"bytes,201,opt,name=deployment_image,json=deploymentImage,proto3" json:"deployment_image,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SplunkViolation_DeploymentInfo) Reset() {
	*x = SplunkViolation_DeploymentInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_DeploymentInfo) ProtoMessage() {}

func (x *SplunkViolation_DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_DeploymentInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 3}
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentType() string {
	if x != nil {
		return x.DeploymentType
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentNamespace() string {
	if x != nil {
		return x.DeploymentNamespace
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentNamespaceId() string {
	if x != nil {
		return x.DeploymentNamespaceId
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentLabels() map[string]string {
	if x != nil {
		return x.DeploymentLabels
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentContainers() []*storage.Alert_Deployment_Container {
	if x != nil {
		return x.DeploymentContainers
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentAnnotations() map[string]string {
	if x != nil {
		return x.DeploymentAnnotations
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentImage() *storage.ContainerImage {
	if x != nil {
		return x.DeploymentImage
	}
	return nil
}

// A trimmed down version of storage.Alert.Resource.
type SplunkViolation_ResourceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is converted from an enum to a string so that it can be properly formatted (capitalized, etc)
	ResourceType  string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId     string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName   string `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace     string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplunkViolation_ResourceInfo) Reset() {
	*x = SplunkViolation_ResourceInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ResourceInfo) ProtoMessage() {}

func (x *SplunkViolation_ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_ResourceInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_ResourceInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 4}
}

func (x *SplunkViolation_ResourceInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// From storage.Policy
type SplunkViolation_PolicyInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PolicyId              string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyName            string                 `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyDescription     string                 `protobuf:"bytes,3,opt,name=policy_description,json=policyDescription,proto3" json:"policy_description,omitempty"`
	PolicyRationale       string                 `protobuf:"bytes,4,opt,name=policy_rationale,json=policyRationale,proto3" json:"policy_rationale,omitempty"`
	PolicyCategories      []string               `protobuf:"bytes,5,rep,name=policy_categories,json=policyCategories,proto3" json:"policy_categories,omitempty"`
	PolicyLifecycleStages []string               `protobuf:"bytes,6,rep,name=policy_lifecycle_stages,json=policyLifecycleStages,proto3" json:"policy_lifecycle_stages,omitempty"`
	PolicySeverity        string                 `protobuf:"bytes,7,opt,name=policy_severity,json=policySeverity,proto3" json:"policy_severity,omitempty"`
	PolicyVersion         string                 `protobuf:"bytes,8,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SplunkViolation_PolicyInfo) Reset() {
	*x = SplunkViolation_PolicyInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_PolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_PolicyInfo) ProtoMessage() {}

func (x *SplunkViolation_PolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkViolation_PolicyInfo.ProtoReflect.Descriptor instead.
func (*SplunkViolation_PolicyInfo) Descriptor() ([]byte, []int) {
	return file_api_integrations_splunk_service_proto_rawDescGZIP(), []int{1, 5}
}

func (x *SplunkViolation_PolicyInfo) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyDescription() string {
	if x != nil {
		return x.PolicyDescription
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyRationale() string {
	if x != nil {
		return x.PolicyRationale
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyCategories() []string {
	if x != nil {
		return x.PolicyCategories
	}
	return nil
}

func (x *SplunkViolation_PolicyInfo) GetPolicyLifecycleStages() []string {
	if x != nil {
		return x.PolicyLifecycleStages
	}
	return nil
}

func (x *SplunkViolation_PolicyInfo) GetPolicySeverity() string {
	if x != nil {
		return x.PolicySeverity
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

var File_api_integrations_splunk_service_proto protoreflect.FileDescriptor

const file_api_integrations_splunk_service_proto_rawDesc = "" +
	"\n" +
	"%api/integrations/splunk_service.proto\x12\fintegrations\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x13storage/alert.proto\x1a\x18storage/deployment.proto\x1a\x14storage/policy.proto\x1a\x1fstorage/process_indicator.proto\"\x80\x01\n" +
	"\x18SplunkViolationsResponse\x12=\n" +
	"\n" +
	"violations\x18\x01 \x03(\v2\x1d.integrations.SplunkViolationR\n" +
	"violations\x12%\n" +
	"\x0enew_checkpoint\x18\x06 \x01(\tR\rnewCheckpoint\"\xcd\x1a\n" +
	"\x0fSplunkViolation\x12R\n" +
	"\x0eviolation_info\x18\x01 \x01(\v2+.integrations.SplunkViolation.ViolationInfoR\rviolationInfo\x12F\n" +
	"\n" +
	"alert_info\x18\x02 \x01(\v2'.integrations.SplunkViolation.AlertInfoR\talertInfo\x12L\n" +
	"\fprocess_info\x18\x03 \x01(\v2).integrations.SplunkViolation.ProcessInfoR\vprocessInfo\x12W\n" +
	"\x0fdeployment_info\x18\x04 \x01(\v2,.integrations.SplunkViolation.DeploymentInfoH\x00R\x0edeploymentInfo\x12Q\n" +
	"\rresource_info\x18\n" +
	" \x01(\v2*.integrations.SplunkViolation.ResourceInfoH\x00R\fresourceInfo\x12I\n" +
	"\vpolicy_info\x18\x05 \x01(\v2(.integrations.SplunkViolation.PolicyInfoR\n" +
	"policyInfo\x12T\n" +
	"\x11network_flow_info\x18\x06 \x01(\v2(.storage.Alert.Violation.NetworkFlowInfoR\x0fnetworkFlowInfo\x1a\xa2\x05\n" +
	"\rViolationInfo\x12!\n" +
	"\fviolation_id\x18\x01 \x01(\tR\vviolationId\x12+\n" +
	"\x11violation_message\x18\x02 \x01(\tR\x10violationMessage\x12u\n" +
	"\x1cviolation_message_attributes\x18\x03 \x03(\v23.storage.Alert.Violation.KeyValueAttrs.KeyValueAttrR\x1aviolationMessageAttributes\x12`\n" +
	"\x0eviolation_type\x18\x04 \x01(\x0e29.integrations.SplunkViolation.ViolationInfo.ViolationTypeR\rviolationType\x12A\n" +
	"\x0eviolation_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rviolationTime\x12\x15\n" +
	"\x06pod_id\x18f \x01(\tR\x05podId\x12\x17\n" +
	"\apod_uid\x18g \x01(\tR\x06podUid\x12%\n" +
	"\x0econtainer_name\x18h \x01(\tR\rcontainerName\x12L\n" +
	"\x14container_start_time\x18i \x01(\v2\x1a.google.protobuf.TimestampR\x12containerStartTime\x12!\n" +
	"\fcontainer_id\x18j \x01(\tR\vcontainerId\"]\n" +
	"\rViolationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aGENERIC\x10\x01\x12\r\n" +
	"\tK8S_EVENT\x10\x02\x12\x11\n" +
	"\rPROCESS_EVENT\x10\x03\x12\x10\n" +
	"\fNETWORK_FLOW\x10\x04\x1a\xbc\x01\n" +
	"\tAlertInfo\x12\x19\n" +
	"\balert_id\x18\x01 \x01(\tR\aalertId\x12@\n" +
	"\x0flifecycle_stage\x18\x02 \x01(\x0e2\x17.storage.LifecycleStageR\x0elifecycleStage\x12L\n" +
	"\x14alert_first_occurred\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x12alertFirstOccurredJ\x04\b\x03\x10\x04\x1a\xb4\x04\n" +
	"\vProcessInfo\x120\n" +
	"\x14process_violation_id\x18e \x01(\tR\x12processViolationId\x12+\n" +
	"\x11process_signal_id\x18\xca\x01 \x01(\tR\x0fprocessSignalId\x12O\n" +
	"\x15process_creation_time\x18\xcb\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x13processCreationTime\x12\"\n" +
	"\fprocess_name\x18\xcc\x01 \x01(\tR\vprocessName\x12\"\n" +
	"\fprocess_args\x18\xcd\x01 \x01(\tR\vprocessArgs\x12%\n" +
	"\x0eexec_file_path\x18\xce\x01 \x01(\tR\fexecFilePath\x12/\n" +
	"\x03pid\x18\xcf\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x03pid\x12>\n" +
	"\vprocess_uid\x18\xd0\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\n" +
	"processUid\x12>\n" +
	"\vprocess_gid\x18\xd1\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\n" +
	"processGid\x12U\n" +
	"\x14process_lineage_info\x18\xd2\x01 \x03(\v2\".storage.ProcessSignal.LineageInfoR\x12processLineageInfo\x1a\xd3\x06\n" +
	"\x0eDeploymentInfo\x12#\n" +
	"\rdeployment_id\x18e \x01(\tR\fdeploymentId\x12'\n" +
	"\x0fdeployment_name\x18f \x01(\tR\x0edeploymentName\x12'\n" +
	"\x0fdeployment_type\x18g \x01(\tR\x0edeploymentType\x121\n" +
	"\x14deployment_namespace\x18h \x01(\tR\x13deploymentNamespace\x126\n" +
	"\x17deployment_namespace_id\x18i \x01(\tR\x15deploymentNamespaceId\x12o\n" +
	"\x11deployment_labels\x18j \x03(\v2B.integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntryR\x10deploymentLabels\x12\x1d\n" +
	"\n" +
	"cluster_id\x18k \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18l \x01(\tR\vclusterName\x12X\n" +
	"\x15deployment_containers\x18m \x03(\v2#.storage.Alert.Deployment.ContainerR\x14deploymentContainers\x12~\n" +
	"\x16deployment_annotations\x18n \x03(\v2G.integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntryR\x15deploymentAnnotations\x12C\n" +
	"\x10deployment_image\x18\xc9\x01 \x01(\v2\x17.storage.ContainerImageR\x0fdeploymentImage\x1aC\n" +
	"\x15DeploymentLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aH\n" +
	"\x1aDeploymentAnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xa7\x01\n" +
	"\fResourceInfo\x12#\n" +
	"\rresource_type\x18\x01 \x01(\tR\fresourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x03 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x04 \x01(\tR\vclusterName\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x1a\xd9\x02\n" +
	"\n" +
	"PolicyInfo\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x1f\n" +
	"\vpolicy_name\x18\x02 \x01(\tR\n" +
	"policyName\x12-\n" +
	"\x12policy_description\x18\x03 \x01(\tR\x11policyDescription\x12)\n" +
	"\x10policy_rationale\x18\x04 \x01(\tR\x0fpolicyRationale\x12+\n" +
	"\x11policy_categories\x18\x05 \x03(\tR\x10policyCategories\x126\n" +
	"\x17policy_lifecycle_stages\x18\x06 \x03(\tR\x15policyLifecycleStages\x12'\n" +
	"\x0fpolicy_severity\x18\a \x01(\tR\x0epolicySeverity\x12%\n" +
	"\x0epolicy_version\x18\b \x01(\tR\rpolicyVersionB\f\n" +
	"\n" +
	"EntityInfoBE\n" +
	"\"io.stackrox.proto.api.integrationsZ\x1f./api/integrations;integrationsb\x06proto3"

var (
	file_api_integrations_splunk_service_proto_rawDescOnce sync.Once
	file_api_integrations_splunk_service_proto_rawDescData []byte
)

func file_api_integrations_splunk_service_proto_rawDescGZIP() []byte {
	file_api_integrations_splunk_service_proto_rawDescOnce.Do(func() {
		file_api_integrations_splunk_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_integrations_splunk_service_proto_rawDesc), len(file_api_integrations_splunk_service_proto_rawDesc)))
	})
	return file_api_integrations_splunk_service_proto_rawDescData
}

var file_api_integrations_splunk_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_integrations_splunk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_integrations_splunk_service_proto_goTypes = []any{
	(SplunkViolation_ViolationInfo_ViolationType)(0),           // 0: integrations.SplunkViolation.ViolationInfo.ViolationType
	(*SplunkViolationsResponse)(nil),                           // 1: integrations.SplunkViolationsResponse
	(*SplunkViolation)(nil),                                    // 2: integrations.SplunkViolation
	(*SplunkViolation_ViolationInfo)(nil),                      // 3: integrations.SplunkViolation.ViolationInfo
	(*SplunkViolation_AlertInfo)(nil),                          // 4: integrations.SplunkViolation.AlertInfo
	(*SplunkViolation_ProcessInfo)(nil),                        // 5: integrations.SplunkViolation.ProcessInfo
	(*SplunkViolation_DeploymentInfo)(nil),                     // 6: integrations.SplunkViolation.DeploymentInfo
	(*SplunkViolation_ResourceInfo)(nil),                       // 7: integrations.SplunkViolation.ResourceInfo
	(*SplunkViolation_PolicyInfo)(nil),                         // 8: integrations.SplunkViolation.PolicyInfo
	nil,                                                        // 9: integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntry
	nil,                                                        // 10: integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntry
	(*storage.Alert_Violation_NetworkFlowInfo)(nil),            // 11: storage.Alert.Violation.NetworkFlowInfo
	(*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr)(nil), // 12: storage.Alert.Violation.KeyValueAttrs.KeyValueAttr
	(*timestamppb.Timestamp)(nil),                              // 13: google.protobuf.Timestamp
	(storage.LifecycleStage)(0),                                // 14: storage.LifecycleStage
	(*wrapperspb.UInt32Value)(nil),                             // 15: google.protobuf.UInt32Value
	(*storage.ProcessSignal_LineageInfo)(nil),                  // 16: storage.ProcessSignal.LineageInfo
	(*storage.Alert_Deployment_Container)(nil),                 // 17: storage.Alert.Deployment.Container
	(*storage.ContainerImage)(nil),                             // 18: storage.ContainerImage
}
var file_api_integrations_splunk_service_proto_depIdxs = []int32{
	2,  // 0: integrations.SplunkViolationsResponse.violations:type_name -> integrations.SplunkViolation
	3,  // 1: integrations.SplunkViolation.violation_info:type_name -> integrations.SplunkViolation.ViolationInfo
	4,  // 2: integrations.SplunkViolation.alert_info:type_name -> integrations.SplunkViolation.AlertInfo
	5,  // 3: integrations.SplunkViolation.process_info:type_name -> integrations.SplunkViolation.ProcessInfo
	6,  // 4: integrations.SplunkViolation.deployment_info:type_name -> integrations.SplunkViolation.DeploymentInfo
	7,  // 5: integrations.SplunkViolation.resource_info:type_name -> integrations.SplunkViolation.ResourceInfo
	8,  // 6: integrations.SplunkViolation.policy_info:type_name -> integrations.SplunkViolation.PolicyInfo
	11, // 7: integrations.SplunkViolation.network_flow_info:type_name -> storage.Alert.Violation.NetworkFlowInfo
	12, // 8: integrations.SplunkViolation.ViolationInfo.violation_message_attributes:type_name -> storage.Alert.Violation.KeyValueAttrs.KeyValueAttr
	0,  // 9: integrations.SplunkViolation.ViolationInfo.violation_type:type_name -> integrations.SplunkViolation.ViolationInfo.ViolationType
	13, // 10: integrations.SplunkViolation.ViolationInfo.violation_time:type_name -> google.protobuf.Timestamp
	13, // 11: integrations.SplunkViolation.ViolationInfo.container_start_time:type_name -> google.protobuf.Timestamp
	14, // 12: integrations.SplunkViolation.AlertInfo.lifecycle_stage:type_name -> storage.LifecycleStage
	13, // 13: integrations.SplunkViolation.AlertInfo.alert_first_occurred:type_name -> google.protobuf.Timestamp
	13, // 14: integrations.SplunkViolation.ProcessInfo.process_creation_time:type_name -> google.protobuf.Timestamp
	15, // 15: integrations.SplunkViolation.ProcessInfo.pid:type_name -> google.protobuf.UInt32Value
	15, // 16: integrations.SplunkViolation.ProcessInfo.process_uid:type_name -> google.protobuf.UInt32Value
	15, // 17: integrations.SplunkViolation.ProcessInfo.process_gid:type_name -> google.protobuf.UInt32Value
	16, // 18: integrations.SplunkViolation.ProcessInfo.process_lineage_info:type_name -> storage.ProcessSignal.LineageInfo
	9,  // 19: integrations.SplunkViolation.DeploymentInfo.deployment_labels:type_name -> integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntry
	17, // 20: integrations.SplunkViolation.DeploymentInfo.deployment_containers:type_name -> storage.Alert.Deployment.Container
	10, // 21: integrations.SplunkViolation.DeploymentInfo.deployment_annotations:type_name -> integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntry
	18, // 22: integrations.SplunkViolation.DeploymentInfo.deployment_image:type_name -> storage.ContainerImage
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_integrations_splunk_service_proto_init() }
func file_api_integrations_splunk_service_proto_init() {
	if File_api_integrations_splunk_service_proto != nil {
		return
	}
	file_api_integrations_splunk_service_proto_msgTypes[1].OneofWrappers = []any{
		(*SplunkViolation_DeploymentInfo_)(nil),
		(*SplunkViolation_ResourceInfo_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_integrations_splunk_service_proto_rawDesc), len(file_api_integrations_splunk_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_integrations_splunk_service_proto_goTypes,
		DependencyIndexes: file_api_integrations_splunk_service_proto_depIdxs,
		EnumInfos:         file_api_integrations_splunk_service_proto_enumTypes,
		MessageInfos:      file_api_integrations_splunk_service_proto_msgTypes,
	}.Build()
	File_api_integrations_splunk_service_proto = out.File
	file_api_integrations_splunk_service_proto_goTypes = nil
	file_api_integrations_splunk_service_proto_depIdxs = nil
}
