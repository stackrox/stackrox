// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/integrations/splunk_service.proto

package integrations

import (
	storage "github.com/stackrox/rox/generated/storage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A new enum is introduced instead of storage.Alert.Violation.Type because
// 1) storage.Alert.Violation.Type does not have an item for PROCESS_EVENT
// 2) default value of storage.Alert.Violation.Type is GENERIC=0 and therefore not serialized to JSON.
type SplunkViolation_ViolationInfo_ViolationType int32

const (
	SplunkViolation_ViolationInfo_UNKNOWN       SplunkViolation_ViolationInfo_ViolationType = 0
	SplunkViolation_ViolationInfo_GENERIC       SplunkViolation_ViolationInfo_ViolationType = 1
	SplunkViolation_ViolationInfo_K8S_EVENT     SplunkViolation_ViolationInfo_ViolationType = 2
	SplunkViolation_ViolationInfo_PROCESS_EVENT SplunkViolation_ViolationInfo_ViolationType = 3
	SplunkViolation_ViolationInfo_NETWORK_FLOW  SplunkViolation_ViolationInfo_ViolationType = 4
)

// Enum value maps for SplunkViolation_ViolationInfo_ViolationType.
var (
	SplunkViolation_ViolationInfo_ViolationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GENERIC",
		2: "K8S_EVENT",
		3: "PROCESS_EVENT",
		4: "NETWORK_FLOW",
	}
	SplunkViolation_ViolationInfo_ViolationType_value = map[string]int32{
		"UNKNOWN":       0,
		"GENERIC":       1,
		"K8S_EVENT":     2,
		"PROCESS_EVENT": 3,
		"NETWORK_FLOW":  4,
	}
)

func (x SplunkViolation_ViolationInfo_ViolationType) Enum() *SplunkViolation_ViolationInfo_ViolationType {
	p := new(SplunkViolation_ViolationInfo_ViolationType)
	*p = x
	return p
}

func (x SplunkViolation_ViolationInfo_ViolationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplunkViolation_ViolationInfo_ViolationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_integrations_splunk_service_proto_enumTypes[0].Descriptor()
}

func (SplunkViolation_ViolationInfo_ViolationType) Type() protoreflect.EnumType {
	return &file_api_integrations_splunk_service_proto_enumTypes[0]
}

func (x SplunkViolation_ViolationInfo_ViolationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// SplunkViolationsResponse is what StackRox Platform returns on the request from Splunk Technology Addon for StackRox.
type SplunkViolationsResponse struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Violations    *[]*SplunkViolation    `protobuf:"bytes,1,rep,name=violations"`
	xxx_hidden_NewCheckpoint *string                `protobuf:"bytes,6,opt,name=new_checkpoint,json=newCheckpoint"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SplunkViolationsResponse) Reset() {
	*x = SplunkViolationsResponse{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolationsResponse) ProtoMessage() {}

func (x *SplunkViolationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolationsResponse) GetViolations() []*SplunkViolation {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Violations) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *[]*SplunkViolation
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Violations), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *SplunkViolationsResponse) GetNewCheckpoint() string {
	if x != nil {
		if x.xxx_hidden_NewCheckpoint != nil {
			return *x.xxx_hidden_NewCheckpoint
		}
		return ""
	}
	return ""
}

func (x *SplunkViolationsResponse) SetViolations(v []*SplunkViolation) {
	var sv *[]*SplunkViolation
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Violations), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*SplunkViolation{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Violations), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *SplunkViolationsResponse) SetNewCheckpoint(v string) {
	x.xxx_hidden_NewCheckpoint = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *SplunkViolationsResponse) HasNewCheckpoint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolationsResponse) ClearNewCheckpoint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NewCheckpoint = nil
}

type SplunkViolationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Violations []*SplunkViolation
	// new_checkpoint sets the checkpoint value for Splunk to use on the next call.
	NewCheckpoint *string
}

func (b0 SplunkViolationsResponse_builder) Build() *SplunkViolationsResponse {
	m0 := &SplunkViolationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Violations != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Violations = &b.Violations
	}
	if b.NewCheckpoint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_NewCheckpoint = b.NewCheckpoint
	}
	return m0
}

// SplunkViolation presents a violation information for Splunk. Essentially, it is a view of data centered around each
// separate violation in storage.Alert structure: storage.Alert.Violation and storage.ProcessIndicator.
// We're not using storage.Alert directly because it will be inconvenient to expose _individual_ violations that way.
// Also, that would unnecessarily couple our Splunk Technology Addon (TA) to internal (storage) data structures of
// StackRox. Given that TA and StackRox Platform are versioned and updated independently, it is safer to work with a
// dedicated data structure for the SackRox-TA API interface, which is this SplunkViolation.
// Note that SplunkViolation still re-uses some definitions from storage where it seemed practical to not reinvent too
// much.
type SplunkViolation struct {
	state                      protoimpl.MessageState                   `protogen:"opaque.v1"`
	xxx_hidden_ViolationInfo   *SplunkViolation_ViolationInfo           `protobuf:"bytes,1,opt,name=violation_info,json=violationInfo"`
	xxx_hidden_AlertInfo       *SplunkViolation_AlertInfo               `protobuf:"bytes,2,opt,name=alert_info,json=alertInfo"`
	xxx_hidden_ProcessInfo     *SplunkViolation_ProcessInfo             `protobuf:"bytes,3,opt,name=process_info,json=processInfo"`
	xxx_hidden_EntityInfo      isSplunkViolation_EntityInfo             `protobuf_oneof:"EntityInfo"`
	xxx_hidden_PolicyInfo      *SplunkViolation_PolicyInfo              `protobuf:"bytes,5,opt,name=policy_info,json=policyInfo"`
	xxx_hidden_NetworkFlowInfo *storage.Alert_Violation_NetworkFlowInfo `protobuf:"bytes,6,opt,name=network_flow_info,json=networkFlowInfo"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SplunkViolation) Reset() {
	*x = SplunkViolation{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation) ProtoMessage() {}

func (x *SplunkViolation) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation) GetViolationInfo() *SplunkViolation_ViolationInfo {
	if x != nil {
		return x.xxx_hidden_ViolationInfo
	}
	return nil
}

func (x *SplunkViolation) GetAlertInfo() *SplunkViolation_AlertInfo {
	if x != nil {
		return x.xxx_hidden_AlertInfo
	}
	return nil
}

func (x *SplunkViolation) GetProcessInfo() *SplunkViolation_ProcessInfo {
	if x != nil {
		return x.xxx_hidden_ProcessInfo
	}
	return nil
}

func (x *SplunkViolation) GetDeploymentInfo() *SplunkViolation_DeploymentInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_DeploymentInfo_); ok {
			return x.DeploymentInfo
		}
	}
	return nil
}

func (x *SplunkViolation) GetResourceInfo() *SplunkViolation_ResourceInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_ResourceInfo_); ok {
			return x.ResourceInfo
		}
	}
	return nil
}

func (x *SplunkViolation) GetPolicyInfo() *SplunkViolation_PolicyInfo {
	if x != nil {
		return x.xxx_hidden_PolicyInfo
	}
	return nil
}

func (x *SplunkViolation) GetNetworkFlowInfo() *storage.Alert_Violation_NetworkFlowInfo {
	if x != nil {
		return x.xxx_hidden_NetworkFlowInfo
	}
	return nil
}

func (x *SplunkViolation) SetViolationInfo(v *SplunkViolation_ViolationInfo) {
	x.xxx_hidden_ViolationInfo = v
}

func (x *SplunkViolation) SetAlertInfo(v *SplunkViolation_AlertInfo) {
	x.xxx_hidden_AlertInfo = v
}

func (x *SplunkViolation) SetProcessInfo(v *SplunkViolation_ProcessInfo) {
	x.xxx_hidden_ProcessInfo = v
}

func (x *SplunkViolation) SetDeploymentInfo(v *SplunkViolation_DeploymentInfo) {
	if v == nil {
		x.xxx_hidden_EntityInfo = nil
		return
	}
	x.xxx_hidden_EntityInfo = &splunkViolation_DeploymentInfo_{v}
}

func (x *SplunkViolation) SetResourceInfo(v *SplunkViolation_ResourceInfo) {
	if v == nil {
		x.xxx_hidden_EntityInfo = nil
		return
	}
	x.xxx_hidden_EntityInfo = &splunkViolation_ResourceInfo_{v}
}

func (x *SplunkViolation) SetPolicyInfo(v *SplunkViolation_PolicyInfo) {
	x.xxx_hidden_PolicyInfo = v
}

func (x *SplunkViolation) SetNetworkFlowInfo(v *storage.Alert_Violation_NetworkFlowInfo) {
	x.xxx_hidden_NetworkFlowInfo = v
}

func (x *SplunkViolation) HasViolationInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ViolationInfo != nil
}

func (x *SplunkViolation) HasAlertInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AlertInfo != nil
}

func (x *SplunkViolation) HasProcessInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProcessInfo != nil
}

func (x *SplunkViolation) HasEntityInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EntityInfo != nil
}

func (x *SplunkViolation) HasDeploymentInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_DeploymentInfo_)
	return ok
}

func (x *SplunkViolation) HasResourceInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_ResourceInfo_)
	return ok
}

func (x *SplunkViolation) HasPolicyInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PolicyInfo != nil
}

func (x *SplunkViolation) HasNetworkFlowInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NetworkFlowInfo != nil
}

func (x *SplunkViolation) ClearViolationInfo() {
	x.xxx_hidden_ViolationInfo = nil
}

func (x *SplunkViolation) ClearAlertInfo() {
	x.xxx_hidden_AlertInfo = nil
}

func (x *SplunkViolation) ClearProcessInfo() {
	x.xxx_hidden_ProcessInfo = nil
}

func (x *SplunkViolation) ClearEntityInfo() {
	x.xxx_hidden_EntityInfo = nil
}

func (x *SplunkViolation) ClearDeploymentInfo() {
	if _, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_DeploymentInfo_); ok {
		x.xxx_hidden_EntityInfo = nil
	}
}

func (x *SplunkViolation) ClearResourceInfo() {
	if _, ok := x.xxx_hidden_EntityInfo.(*splunkViolation_ResourceInfo_); ok {
		x.xxx_hidden_EntityInfo = nil
	}
}

func (x *SplunkViolation) ClearPolicyInfo() {
	x.xxx_hidden_PolicyInfo = nil
}

func (x *SplunkViolation) ClearNetworkFlowInfo() {
	x.xxx_hidden_NetworkFlowInfo = nil
}

const SplunkViolation_EntityInfo_not_set_case case_SplunkViolation_EntityInfo = 0
const SplunkViolation_DeploymentInfo_case case_SplunkViolation_EntityInfo = 4
const SplunkViolation_ResourceInfo_case case_SplunkViolation_EntityInfo = 10

func (x *SplunkViolation) WhichEntityInfo() case_SplunkViolation_EntityInfo {
	if x == nil {
		return SplunkViolation_EntityInfo_not_set_case
	}
	switch x.xxx_hidden_EntityInfo.(type) {
	case *splunkViolation_DeploymentInfo_:
		return SplunkViolation_DeploymentInfo_case
	case *splunkViolation_ResourceInfo_:
		return SplunkViolation_ResourceInfo_case
	default:
		return SplunkViolation_EntityInfo_not_set_case
	}
}

type SplunkViolation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ViolationInfo *SplunkViolation_ViolationInfo
	AlertInfo     *SplunkViolation_AlertInfo
	ProcessInfo   *SplunkViolation_ProcessInfo
	// Fields of oneof xxx_hidden_EntityInfo:
	DeploymentInfo *SplunkViolation_DeploymentInfo
	ResourceInfo   *SplunkViolation_ResourceInfo
	// -- end of xxx_hidden_EntityInfo
	PolicyInfo *SplunkViolation_PolicyInfo
	// extra details for network violation
	NetworkFlowInfo *storage.Alert_Violation_NetworkFlowInfo
}

func (b0 SplunkViolation_builder) Build() *SplunkViolation {
	m0 := &SplunkViolation{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ViolationInfo = b.ViolationInfo
	x.xxx_hidden_AlertInfo = b.AlertInfo
	x.xxx_hidden_ProcessInfo = b.ProcessInfo
	if b.DeploymentInfo != nil {
		x.xxx_hidden_EntityInfo = &splunkViolation_DeploymentInfo_{b.DeploymentInfo}
	}
	if b.ResourceInfo != nil {
		x.xxx_hidden_EntityInfo = &splunkViolation_ResourceInfo_{b.ResourceInfo}
	}
	x.xxx_hidden_PolicyInfo = b.PolicyInfo
	x.xxx_hidden_NetworkFlowInfo = b.NetworkFlowInfo
	return m0
}

type case_SplunkViolation_EntityInfo protoreflect.FieldNumber

func (x case_SplunkViolation_EntityInfo) String() string {
	md := file_api_integrations_splunk_service_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSplunkViolation_EntityInfo interface {
	isSplunkViolation_EntityInfo()
}

type splunkViolation_DeploymentInfo_ struct {
	DeploymentInfo *SplunkViolation_DeploymentInfo `protobuf:"bytes,4,opt,name=deployment_info,json=deploymentInfo,oneof"`
}

type splunkViolation_ResourceInfo_ struct {
	ResourceInfo *SplunkViolation_ResourceInfo `protobuf:"bytes,10,opt,name=resource_info,json=resourceInfo,oneof"`
}

func (*splunkViolation_DeploymentInfo_) isSplunkViolation_EntityInfo() {}

func (*splunkViolation_ResourceInfo_) isSplunkViolation_EntityInfo() {}

// From storage.Alert.Violation (numbers <100).
type SplunkViolation_ViolationInfo struct {
	state                                 protoimpl.MessageState                                 `protogen:"opaque.v1"`
	xxx_hidden_ViolationId                *string                                                `protobuf:"bytes,1,opt,name=violation_id,json=violationId"`
	xxx_hidden_ViolationMessage           *string                                                `protobuf:"bytes,2,opt,name=violation_message,json=violationMessage"`
	xxx_hidden_ViolationMessageAttributes *[]*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr `protobuf:"bytes,3,rep,name=violation_message_attributes,json=violationMessageAttributes"`
	xxx_hidden_ViolationType              SplunkViolation_ViolationInfo_ViolationType            `protobuf:"varint,4,opt,name=violation_type,json=violationType,enum=integrations.SplunkViolation_ViolationInfo_ViolationType"`
	xxx_hidden_ViolationTime              *timestamppb.Timestamp                                 `protobuf:"bytes,5,opt,name=violation_time,json=violationTime"`
	xxx_hidden_PodId                      *string                                                `protobuf:"bytes,102,opt,name=pod_id,json=podId"`
	xxx_hidden_PodUid                     *string                                                `protobuf:"bytes,103,opt,name=pod_uid,json=podUid"`
	xxx_hidden_ContainerName              *string                                                `protobuf:"bytes,104,opt,name=container_name,json=containerName"`
	xxx_hidden_ContainerStartTime         *timestamppb.Timestamp                                 `protobuf:"bytes,105,opt,name=container_start_time,json=containerStartTime"`
	xxx_hidden_ContainerId                *string                                                `protobuf:"bytes,106,opt,name=container_id,json=containerId"`
	XXX_raceDetectHookData                protoimpl.RaceDetectHookData
	XXX_presence                          [1]uint32
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *SplunkViolation_ViolationInfo) Reset() {
	*x = SplunkViolation_ViolationInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ViolationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ViolationInfo) ProtoMessage() {}

func (x *SplunkViolation_ViolationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_ViolationInfo) GetViolationId() string {
	if x != nil {
		if x.xxx_hidden_ViolationId != nil {
			return *x.xxx_hidden_ViolationId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetViolationMessage() string {
	if x != nil {
		if x.xxx_hidden_ViolationMessage != nil {
			return *x.xxx_hidden_ViolationMessage
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetViolationMessageAttributes() []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr {
	if x != nil {
		if x.xxx_hidden_ViolationMessageAttributes != nil {
			return *x.xxx_hidden_ViolationMessageAttributes
		}
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetViolationType() SplunkViolation_ViolationInfo_ViolationType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_ViolationType
		}
	}
	return SplunkViolation_ViolationInfo_UNKNOWN
}

func (x *SplunkViolation_ViolationInfo) GetViolationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ViolationTime
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetPodId() string {
	if x != nil {
		if x.xxx_hidden_PodId != nil {
			return *x.xxx_hidden_PodId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetPodUid() string {
	if x != nil {
		if x.xxx_hidden_PodUid != nil {
			return *x.xxx_hidden_PodUid
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetContainerName() string {
	if x != nil {
		if x.xxx_hidden_ContainerName != nil {
			return *x.xxx_hidden_ContainerName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) GetContainerStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ContainerStartTime
	}
	return nil
}

func (x *SplunkViolation_ViolationInfo) GetContainerId() string {
	if x != nil {
		if x.xxx_hidden_ContainerId != nil {
			return *x.xxx_hidden_ContainerId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ViolationInfo) SetViolationId(v string) {
	x.xxx_hidden_ViolationId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 10)
}

func (x *SplunkViolation_ViolationInfo) SetViolationMessage(v string) {
	x.xxx_hidden_ViolationMessage = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 10)
}

func (x *SplunkViolation_ViolationInfo) SetViolationMessageAttributes(v []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr) {
	x.xxx_hidden_ViolationMessageAttributes = &v
}

func (x *SplunkViolation_ViolationInfo) SetViolationType(v SplunkViolation_ViolationInfo_ViolationType) {
	x.xxx_hidden_ViolationType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *SplunkViolation_ViolationInfo) SetViolationTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_ViolationTime = v
}

func (x *SplunkViolation_ViolationInfo) SetPodId(v string) {
	x.xxx_hidden_PodId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 10)
}

func (x *SplunkViolation_ViolationInfo) SetPodUid(v string) {
	x.xxx_hidden_PodUid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 10)
}

func (x *SplunkViolation_ViolationInfo) SetContainerName(v string) {
	x.xxx_hidden_ContainerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 10)
}

func (x *SplunkViolation_ViolationInfo) SetContainerStartTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_ContainerStartTime = v
}

func (x *SplunkViolation_ViolationInfo) SetContainerId(v string) {
	x.xxx_hidden_ContainerId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 10)
}

func (x *SplunkViolation_ViolationInfo) HasViolationId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_ViolationInfo) HasViolationMessage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_ViolationInfo) HasViolationType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SplunkViolation_ViolationInfo) HasViolationTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ViolationTime != nil
}

func (x *SplunkViolation_ViolationInfo) HasPodId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *SplunkViolation_ViolationInfo) HasPodUid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *SplunkViolation_ViolationInfo) HasContainerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *SplunkViolation_ViolationInfo) HasContainerStartTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ContainerStartTime != nil
}

func (x *SplunkViolation_ViolationInfo) HasContainerId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *SplunkViolation_ViolationInfo) ClearViolationId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ViolationId = nil
}

func (x *SplunkViolation_ViolationInfo) ClearViolationMessage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ViolationMessage = nil
}

func (x *SplunkViolation_ViolationInfo) ClearViolationType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ViolationType = SplunkViolation_ViolationInfo_UNKNOWN
}

func (x *SplunkViolation_ViolationInfo) ClearViolationTime() {
	x.xxx_hidden_ViolationTime = nil
}

func (x *SplunkViolation_ViolationInfo) ClearPodId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_PodId = nil
}

func (x *SplunkViolation_ViolationInfo) ClearPodUid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_PodUid = nil
}

func (x *SplunkViolation_ViolationInfo) ClearContainerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_ContainerName = nil
}

func (x *SplunkViolation_ViolationInfo) ClearContainerStartTime() {
	x.xxx_hidden_ContainerStartTime = nil
}

func (x *SplunkViolation_ViolationInfo) ClearContainerId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_ContainerId = nil
}

type SplunkViolation_ViolationInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// In case of non-Process alerts (k8s and non-runtime), this is surrogate identifier derived from
	// alert_id + crypto_hash(storage.Alert.Violation).
	// In case of Process alerts, this has the same value as ProcessInfo.process_violation_id.
	ViolationId                *string
	ViolationMessage           *string
	ViolationMessageAttributes []*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr
	ViolationType              *SplunkViolation_ViolationInfo_ViolationType
	// In case of k8s alerts, this is storage.Alert.Violation.time
	// In case of Process alerts, this is storage.ProcessSignal.process_creation_time
	// In case of other alerts, this is storage.Alert.time
	ViolationTime      *timestamppb.Timestamp
	PodId              *string
	PodUid             *string
	ContainerName      *string
	ContainerStartTime *timestamppb.Timestamp
	ContainerId        *string
}

func (b0 SplunkViolation_ViolationInfo_builder) Build() *SplunkViolation_ViolationInfo {
	m0 := &SplunkViolation_ViolationInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ViolationId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 10)
		x.xxx_hidden_ViolationId = b.ViolationId
	}
	if b.ViolationMessage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 10)
		x.xxx_hidden_ViolationMessage = b.ViolationMessage
	}
	x.xxx_hidden_ViolationMessageAttributes = &b.ViolationMessageAttributes
	if b.ViolationType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_ViolationType = *b.ViolationType
	}
	x.xxx_hidden_ViolationTime = b.ViolationTime
	if b.PodId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 10)
		x.xxx_hidden_PodId = b.PodId
	}
	if b.PodUid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 10)
		x.xxx_hidden_PodUid = b.PodUid
	}
	if b.ContainerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 10)
		x.xxx_hidden_ContainerName = b.ContainerName
	}
	x.xxx_hidden_ContainerStartTime = b.ContainerStartTime
	if b.ContainerId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 10)
		x.xxx_hidden_ContainerId = b.ContainerId
	}
	return m0
}

// From storage.Alert
type SplunkViolation_AlertInfo struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AlertId            *string                `protobuf:"bytes,1,opt,name=alert_id,json=alertId"`
	xxx_hidden_LifecycleStage     storage.LifecycleStage `protobuf:"varint,2,opt,name=lifecycle_stage,json=lifecycleStage,enum=storage.LifecycleStage"`
	xxx_hidden_AlertFirstOccurred *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=alert_first_occurred,json=alertFirstOccurred"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *SplunkViolation_AlertInfo) Reset() {
	*x = SplunkViolation_AlertInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_AlertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_AlertInfo) ProtoMessage() {}

func (x *SplunkViolation_AlertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_AlertInfo) GetAlertId() string {
	if x != nil {
		if x.xxx_hidden_AlertId != nil {
			return *x.xxx_hidden_AlertId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_AlertInfo) GetLifecycleStage() storage.LifecycleStage {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_LifecycleStage
		}
	}
	return storage.LifecycleStage(0)
}

func (x *SplunkViolation_AlertInfo) GetAlertFirstOccurred() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_AlertFirstOccurred
	}
	return nil
}

func (x *SplunkViolation_AlertInfo) SetAlertId(v string) {
	x.xxx_hidden_AlertId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *SplunkViolation_AlertInfo) SetLifecycleStage(v storage.LifecycleStage) {
	x.xxx_hidden_LifecycleStage = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *SplunkViolation_AlertInfo) SetAlertFirstOccurred(v *timestamppb.Timestamp) {
	x.xxx_hidden_AlertFirstOccurred = v
}

func (x *SplunkViolation_AlertInfo) HasAlertId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_AlertInfo) HasLifecycleStage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_AlertInfo) HasAlertFirstOccurred() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AlertFirstOccurred != nil
}

func (x *SplunkViolation_AlertInfo) ClearAlertId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_AlertId = nil
}

func (x *SplunkViolation_AlertInfo) ClearLifecycleStage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_LifecycleStage = storage.LifecycleStage_DEPLOY
}

func (x *SplunkViolation_AlertInfo) ClearAlertFirstOccurred() {
	x.xxx_hidden_AlertFirstOccurred = nil
}

type SplunkViolation_AlertInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AlertId            *string
	LifecycleStage     *storage.LifecycleStage
	AlertFirstOccurred *timestamppb.Timestamp
}

func (b0 SplunkViolation_AlertInfo_builder) Build() *SplunkViolation_AlertInfo {
	m0 := &SplunkViolation_AlertInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.AlertId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_AlertId = b.AlertId
	}
	if b.LifecycleStage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_LifecycleStage = *b.LifecycleStage
	}
	x.xxx_hidden_AlertFirstOccurred = b.AlertFirstOccurred
	return m0
}

// From storage.ProcessIndicator (numbers 1xx) and storage.ProcessSignal (numbers 2xx).
type SplunkViolation_ProcessInfo struct {
	state                          protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_ProcessViolationId  *string                               `protobuf:"bytes,101,opt,name=process_violation_id,json=processViolationId"`
	xxx_hidden_ProcessSignalId     *string                               `protobuf:"bytes,202,opt,name=process_signal_id,json=processSignalId"`
	xxx_hidden_ProcessCreationTime *timestamppb.Timestamp                `protobuf:"bytes,203,opt,name=process_creation_time,json=processCreationTime"`
	xxx_hidden_ProcessName         *string                               `protobuf:"bytes,204,opt,name=process_name,json=processName"`
	xxx_hidden_ProcessArgs         *string                               `protobuf:"bytes,205,opt,name=process_args,json=processArgs"`
	xxx_hidden_ExecFilePath        *string                               `protobuf:"bytes,206,opt,name=exec_file_path,json=execFilePath"`
	xxx_hidden_Pid                 *wrapperspb.UInt32Value               `protobuf:"bytes,207,opt,name=pid"`
	xxx_hidden_ProcessUid          *wrapperspb.UInt32Value               `protobuf:"bytes,208,opt,name=process_uid,json=processUid"`
	xxx_hidden_ProcessGid          *wrapperspb.UInt32Value               `protobuf:"bytes,209,opt,name=process_gid,json=processGid"`
	xxx_hidden_ProcessLineageInfo  *[]*storage.ProcessSignal_LineageInfo `protobuf:"bytes,210,rep,name=process_lineage_info,json=processLineageInfo"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *SplunkViolation_ProcessInfo) Reset() {
	*x = SplunkViolation_ProcessInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ProcessInfo) ProtoMessage() {}

func (x *SplunkViolation_ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_ProcessInfo) GetProcessViolationId() string {
	if x != nil {
		if x.xxx_hidden_ProcessViolationId != nil {
			return *x.xxx_hidden_ProcessViolationId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessSignalId() string {
	if x != nil {
		if x.xxx_hidden_ProcessSignalId != nil {
			return *x.xxx_hidden_ProcessSignalId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ProcessCreationTime
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessName() string {
	if x != nil {
		if x.xxx_hidden_ProcessName != nil {
			return *x.xxx_hidden_ProcessName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetProcessArgs() string {
	if x != nil {
		if x.xxx_hidden_ProcessArgs != nil {
			return *x.xxx_hidden_ProcessArgs
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetExecFilePath() string {
	if x != nil {
		if x.xxx_hidden_ExecFilePath != nil {
			return *x.xxx_hidden_ExecFilePath
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ProcessInfo) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.xxx_hidden_Pid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessUid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.xxx_hidden_ProcessUid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessGid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.xxx_hidden_ProcessGid
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) GetProcessLineageInfo() []*storage.ProcessSignal_LineageInfo {
	if x != nil {
		if x.xxx_hidden_ProcessLineageInfo != nil {
			return *x.xxx_hidden_ProcessLineageInfo
		}
	}
	return nil
}

func (x *SplunkViolation_ProcessInfo) SetProcessViolationId(v string) {
	x.xxx_hidden_ProcessViolationId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 10)
}

func (x *SplunkViolation_ProcessInfo) SetProcessSignalId(v string) {
	x.xxx_hidden_ProcessSignalId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 10)
}

func (x *SplunkViolation_ProcessInfo) SetProcessCreationTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_ProcessCreationTime = v
}

func (x *SplunkViolation_ProcessInfo) SetProcessName(v string) {
	x.xxx_hidden_ProcessName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *SplunkViolation_ProcessInfo) SetProcessArgs(v string) {
	x.xxx_hidden_ProcessArgs = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 10)
}

func (x *SplunkViolation_ProcessInfo) SetExecFilePath(v string) {
	x.xxx_hidden_ExecFilePath = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 10)
}

func (x *SplunkViolation_ProcessInfo) SetPid(v *wrapperspb.UInt32Value) {
	x.xxx_hidden_Pid = v
}

func (x *SplunkViolation_ProcessInfo) SetProcessUid(v *wrapperspb.UInt32Value) {
	x.xxx_hidden_ProcessUid = v
}

func (x *SplunkViolation_ProcessInfo) SetProcessGid(v *wrapperspb.UInt32Value) {
	x.xxx_hidden_ProcessGid = v
}

func (x *SplunkViolation_ProcessInfo) SetProcessLineageInfo(v []*storage.ProcessSignal_LineageInfo) {
	x.xxx_hidden_ProcessLineageInfo = &v
}

func (x *SplunkViolation_ProcessInfo) HasProcessViolationId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_ProcessInfo) HasProcessSignalId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_ProcessInfo) HasProcessCreationTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProcessCreationTime != nil
}

func (x *SplunkViolation_ProcessInfo) HasProcessName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SplunkViolation_ProcessInfo) HasProcessArgs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *SplunkViolation_ProcessInfo) HasExecFilePath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *SplunkViolation_ProcessInfo) HasPid() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pid != nil
}

func (x *SplunkViolation_ProcessInfo) HasProcessUid() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProcessUid != nil
}

func (x *SplunkViolation_ProcessInfo) HasProcessGid() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProcessGid != nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessViolationId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ProcessViolationId = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessSignalId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ProcessSignalId = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessCreationTime() {
	x.xxx_hidden_ProcessCreationTime = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ProcessName = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessArgs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ProcessArgs = nil
}

func (x *SplunkViolation_ProcessInfo) ClearExecFilePath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ExecFilePath = nil
}

func (x *SplunkViolation_ProcessInfo) ClearPid() {
	x.xxx_hidden_Pid = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessUid() {
	x.xxx_hidden_ProcessUid = nil
}

func (x *SplunkViolation_ProcessInfo) ClearProcessGid() {
	x.xxx_hidden_ProcessGid = nil
}

type SplunkViolation_ProcessInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProcessViolationId  *string
	ProcessSignalId     *string
	ProcessCreationTime *timestamppb.Timestamp
	ProcessName         *string
	ProcessArgs         *string
	ExecFilePath        *string
	// UInt32Value is used for pid, process_uid and process_gid instead of plain uint32 to include 0 values on output.
	Pid                *wrapperspb.UInt32Value
	ProcessUid         *wrapperspb.UInt32Value
	ProcessGid         *wrapperspb.UInt32Value
	ProcessLineageInfo []*storage.ProcessSignal_LineageInfo
}

func (b0 SplunkViolation_ProcessInfo_builder) Build() *SplunkViolation_ProcessInfo {
	m0 := &SplunkViolation_ProcessInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ProcessViolationId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 10)
		x.xxx_hidden_ProcessViolationId = b.ProcessViolationId
	}
	if b.ProcessSignalId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 10)
		x.xxx_hidden_ProcessSignalId = b.ProcessSignalId
	}
	x.xxx_hidden_ProcessCreationTime = b.ProcessCreationTime
	if b.ProcessName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_ProcessName = b.ProcessName
	}
	if b.ProcessArgs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 10)
		x.xxx_hidden_ProcessArgs = b.ProcessArgs
	}
	if b.ExecFilePath != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 10)
		x.xxx_hidden_ExecFilePath = b.ExecFilePath
	}
	x.xxx_hidden_Pid = b.Pid
	x.xxx_hidden_ProcessUid = b.ProcessUid
	x.xxx_hidden_ProcessGid = b.ProcessGid
	x.xxx_hidden_ProcessLineageInfo = &b.ProcessLineageInfo
	return m0
}

// From storage.Alert.Entity: storage.Alert.Deployment (numbers 1xx) and storage.ContainerImage (2xx).
// NOTE: While Deployment in K8S is a resource, we have DeploymentInfo separate from ResourceInfo mainly for
// historical reasons and backwards compatibility. Next time we modify DeploymentInfo/ResourceInfo we should consider
// unifying both and migrating users to ResourceInfo (or even newer object).
type SplunkViolation_DeploymentInfo struct {
	state                            protoimpl.MessageState                 `protogen:"opaque.v1"`
	xxx_hidden_DeploymentId          *string                                `protobuf:"bytes,101,opt,name=deployment_id,json=deploymentId"`
	xxx_hidden_DeploymentName        *string                                `protobuf:"bytes,102,opt,name=deployment_name,json=deploymentName"`
	xxx_hidden_DeploymentType        *string                                `protobuf:"bytes,103,opt,name=deployment_type,json=deploymentType"`
	xxx_hidden_DeploymentNamespace   *string                                `protobuf:"bytes,104,opt,name=deployment_namespace,json=deploymentNamespace"`
	xxx_hidden_DeploymentNamespaceId *string                                `protobuf:"bytes,105,opt,name=deployment_namespace_id,json=deploymentNamespaceId"`
	xxx_hidden_DeploymentLabels      map[string]string                      `protobuf:"bytes,106,rep,name=deployment_labels,json=deploymentLabels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_ClusterId             *string                                `protobuf:"bytes,107,opt,name=cluster_id,json=clusterId"`
	xxx_hidden_ClusterName           *string                                `protobuf:"bytes,108,opt,name=cluster_name,json=clusterName"`
	xxx_hidden_DeploymentContainers  *[]*storage.Alert_Deployment_Container `protobuf:"bytes,109,rep,name=deployment_containers,json=deploymentContainers"`
	xxx_hidden_DeploymentAnnotations map[string]string                      `protobuf:"bytes,110,rep,name=deployment_annotations,json=deploymentAnnotations" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_DeploymentImage       *storage.ContainerImage                `protobuf:"bytes,201,opt,name=deployment_image,json=deploymentImage"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SplunkViolation_DeploymentInfo) Reset() {
	*x = SplunkViolation_DeploymentInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_DeploymentInfo) ProtoMessage() {}

func (x *SplunkViolation_DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentId() string {
	if x != nil {
		if x.xxx_hidden_DeploymentId != nil {
			return *x.xxx_hidden_DeploymentId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentName() string {
	if x != nil {
		if x.xxx_hidden_DeploymentName != nil {
			return *x.xxx_hidden_DeploymentName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentType() string {
	if x != nil {
		if x.xxx_hidden_DeploymentType != nil {
			return *x.xxx_hidden_DeploymentType
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentNamespace() string {
	if x != nil {
		if x.xxx_hidden_DeploymentNamespace != nil {
			return *x.xxx_hidden_DeploymentNamespace
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentNamespaceId() string {
	if x != nil {
		if x.xxx_hidden_DeploymentNamespaceId != nil {
			return *x.xxx_hidden_DeploymentNamespaceId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_DeploymentLabels
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetClusterId() string {
	if x != nil {
		if x.xxx_hidden_ClusterId != nil {
			return *x.xxx_hidden_ClusterId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetClusterName() string {
	if x != nil {
		if x.xxx_hidden_ClusterName != nil {
			return *x.xxx_hidden_ClusterName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentContainers() []*storage.Alert_Deployment_Container {
	if x != nil {
		if x.xxx_hidden_DeploymentContainers != nil {
			return *x.xxx_hidden_DeploymentContainers
		}
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentAnnotations() map[string]string {
	if x != nil {
		return x.xxx_hidden_DeploymentAnnotations
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) GetDeploymentImage() *storage.ContainerImage {
	if x != nil {
		return x.xxx_hidden_DeploymentImage
	}
	return nil
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentId(v string) {
	x.xxx_hidden_DeploymentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentName(v string) {
	x.xxx_hidden_DeploymentName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentType(v string) {
	x.xxx_hidden_DeploymentType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentNamespace(v string) {
	x.xxx_hidden_DeploymentNamespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentNamespaceId(v string) {
	x.xxx_hidden_DeploymentNamespaceId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentLabels(v map[string]string) {
	x.xxx_hidden_DeploymentLabels = v
}

func (x *SplunkViolation_DeploymentInfo) SetClusterId(v string) {
	x.xxx_hidden_ClusterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetClusterName(v string) {
	x.xxx_hidden_ClusterName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 11)
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentContainers(v []*storage.Alert_Deployment_Container) {
	x.xxx_hidden_DeploymentContainers = &v
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentAnnotations(v map[string]string) {
	x.xxx_hidden_DeploymentAnnotations = v
}

func (x *SplunkViolation_DeploymentInfo) SetDeploymentImage(v *storage.ContainerImage) {
	x.xxx_hidden_DeploymentImage = v
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentNamespaceId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *SplunkViolation_DeploymentInfo) HasClusterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *SplunkViolation_DeploymentInfo) HasClusterName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *SplunkViolation_DeploymentInfo) HasDeploymentImage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DeploymentImage != nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_DeploymentId = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DeploymentName = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DeploymentType = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_DeploymentNamespace = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentNamespaceId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_DeploymentNamespaceId = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearClusterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ClusterId = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearClusterName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_ClusterName = nil
}

func (x *SplunkViolation_DeploymentInfo) ClearDeploymentImage() {
	x.xxx_hidden_DeploymentImage = nil
}

type SplunkViolation_DeploymentInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	DeploymentId          *string
	DeploymentName        *string
	DeploymentType        *string
	DeploymentNamespace   *string
	DeploymentNamespaceId *string
	DeploymentLabels      map[string]string
	ClusterId             *string
	ClusterName           *string
	DeploymentContainers  []*storage.Alert_Deployment_Container
	DeploymentAnnotations map[string]string
	DeploymentImage       *storage.ContainerImage
}

func (b0 SplunkViolation_DeploymentInfo_builder) Build() *SplunkViolation_DeploymentInfo {
	m0 := &SplunkViolation_DeploymentInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.DeploymentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_DeploymentId = b.DeploymentId
	}
	if b.DeploymentName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_DeploymentName = b.DeploymentName
	}
	if b.DeploymentType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_DeploymentType = b.DeploymentType
	}
	if b.DeploymentNamespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_DeploymentNamespace = b.DeploymentNamespace
	}
	if b.DeploymentNamespaceId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_DeploymentNamespaceId = b.DeploymentNamespaceId
	}
	x.xxx_hidden_DeploymentLabels = b.DeploymentLabels
	if b.ClusterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_ClusterId = b.ClusterId
	}
	if b.ClusterName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 11)
		x.xxx_hidden_ClusterName = b.ClusterName
	}
	x.xxx_hidden_DeploymentContainers = &b.DeploymentContainers
	x.xxx_hidden_DeploymentAnnotations = b.DeploymentAnnotations
	x.xxx_hidden_DeploymentImage = b.DeploymentImage
	return m0
}

// A trimmed down version of storage.Alert.Resource.
type SplunkViolation_ResourceInfo struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ResourceType *string                `protobuf:"bytes,1,opt,name=resource_type,json=resourceType"`
	xxx_hidden_Name         *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_ClusterId    *string                `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId"`
	xxx_hidden_ClusterName  *string                `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName"`
	xxx_hidden_Namespace    *string                `protobuf:"bytes,5,opt,name=namespace"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SplunkViolation_ResourceInfo) Reset() {
	*x = SplunkViolation_ResourceInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_ResourceInfo) ProtoMessage() {}

func (x *SplunkViolation_ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_ResourceInfo) GetResourceType() string {
	if x != nil {
		if x.xxx_hidden_ResourceType != nil {
			return *x.xxx_hidden_ResourceType
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetClusterId() string {
	if x != nil {
		if x.xxx_hidden_ClusterId != nil {
			return *x.xxx_hidden_ClusterId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetClusterName() string {
	if x != nil {
		if x.xxx_hidden_ClusterName != nil {
			return *x.xxx_hidden_ClusterName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) GetNamespace() string {
	if x != nil {
		if x.xxx_hidden_Namespace != nil {
			return *x.xxx_hidden_Namespace
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_ResourceInfo) SetResourceType(v string) {
	x.xxx_hidden_ResourceType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *SplunkViolation_ResourceInfo) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *SplunkViolation_ResourceInfo) SetClusterId(v string) {
	x.xxx_hidden_ClusterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *SplunkViolation_ResourceInfo) SetClusterName(v string) {
	x.xxx_hidden_ClusterName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *SplunkViolation_ResourceInfo) SetNamespace(v string) {
	x.xxx_hidden_Namespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *SplunkViolation_ResourceInfo) HasResourceType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_ResourceInfo) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_ResourceInfo) HasClusterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SplunkViolation_ResourceInfo) HasClusterName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SplunkViolation_ResourceInfo) HasNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *SplunkViolation_ResourceInfo) ClearResourceType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ResourceType = nil
}

func (x *SplunkViolation_ResourceInfo) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *SplunkViolation_ResourceInfo) ClearClusterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ClusterId = nil
}

func (x *SplunkViolation_ResourceInfo) ClearClusterName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ClusterName = nil
}

func (x *SplunkViolation_ResourceInfo) ClearNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Namespace = nil
}

type SplunkViolation_ResourceInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// This is converted from an enum to a string so that it can be properly formatted (capitalized, etc)
	ResourceType *string
	Name         *string
	ClusterId    *string
	ClusterName  *string
	Namespace    *string
}

func (b0 SplunkViolation_ResourceInfo_builder) Build() *SplunkViolation_ResourceInfo {
	m0 := &SplunkViolation_ResourceInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ResourceType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_ResourceType = b.ResourceType
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.ClusterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_ClusterId = b.ClusterId
	}
	if b.ClusterName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_ClusterName = b.ClusterName
	}
	if b.Namespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Namespace = b.Namespace
	}
	return m0
}

// From storage.Policy
type SplunkViolation_PolicyInfo struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PolicyId              *string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId"`
	xxx_hidden_PolicyName            *string                `protobuf:"bytes,2,opt,name=policy_name,json=policyName"`
	xxx_hidden_PolicyDescription     *string                `protobuf:"bytes,3,opt,name=policy_description,json=policyDescription"`
	xxx_hidden_PolicyRationale       *string                `protobuf:"bytes,4,opt,name=policy_rationale,json=policyRationale"`
	xxx_hidden_PolicyCategories      []string               `protobuf:"bytes,5,rep,name=policy_categories,json=policyCategories"`
	xxx_hidden_PolicyLifecycleStages []string               `protobuf:"bytes,6,rep,name=policy_lifecycle_stages,json=policyLifecycleStages"`
	xxx_hidden_PolicySeverity        *string                `protobuf:"bytes,7,opt,name=policy_severity,json=policySeverity"`
	xxx_hidden_PolicyVersion         *string                `protobuf:"bytes,8,opt,name=policy_version,json=policyVersion"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *SplunkViolation_PolicyInfo) Reset() {
	*x = SplunkViolation_PolicyInfo{}
	mi := &file_api_integrations_splunk_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplunkViolation_PolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkViolation_PolicyInfo) ProtoMessage() {}

func (x *SplunkViolation_PolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_integrations_splunk_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SplunkViolation_PolicyInfo) GetPolicyId() string {
	if x != nil {
		if x.xxx_hidden_PolicyId != nil {
			return *x.xxx_hidden_PolicyId
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyName() string {
	if x != nil {
		if x.xxx_hidden_PolicyName != nil {
			return *x.xxx_hidden_PolicyName
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyDescription() string {
	if x != nil {
		if x.xxx_hidden_PolicyDescription != nil {
			return *x.xxx_hidden_PolicyDescription
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyRationale() string {
	if x != nil {
		if x.xxx_hidden_PolicyRationale != nil {
			return *x.xxx_hidden_PolicyRationale
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyCategories() []string {
	if x != nil {
		return x.xxx_hidden_PolicyCategories
	}
	return nil
}

func (x *SplunkViolation_PolicyInfo) GetPolicyLifecycleStages() []string {
	if x != nil {
		return x.xxx_hidden_PolicyLifecycleStages
	}
	return nil
}

func (x *SplunkViolation_PolicyInfo) GetPolicySeverity() string {
	if x != nil {
		if x.xxx_hidden_PolicySeverity != nil {
			return *x.xxx_hidden_PolicySeverity
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) GetPolicyVersion() string {
	if x != nil {
		if x.xxx_hidden_PolicyVersion != nil {
			return *x.xxx_hidden_PolicyVersion
		}
		return ""
	}
	return ""
}

func (x *SplunkViolation_PolicyInfo) SetPolicyId(v string) {
	x.xxx_hidden_PolicyId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *SplunkViolation_PolicyInfo) SetPolicyName(v string) {
	x.xxx_hidden_PolicyName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *SplunkViolation_PolicyInfo) SetPolicyDescription(v string) {
	x.xxx_hidden_PolicyDescription = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *SplunkViolation_PolicyInfo) SetPolicyRationale(v string) {
	x.xxx_hidden_PolicyRationale = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *SplunkViolation_PolicyInfo) SetPolicyCategories(v []string) {
	x.xxx_hidden_PolicyCategories = v
}

func (x *SplunkViolation_PolicyInfo) SetPolicyLifecycleStages(v []string) {
	x.xxx_hidden_PolicyLifecycleStages = v
}

func (x *SplunkViolation_PolicyInfo) SetPolicySeverity(v string) {
	x.xxx_hidden_PolicySeverity = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *SplunkViolation_PolicyInfo) SetPolicyVersion(v string) {
	x.xxx_hidden_PolicyVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *SplunkViolation_PolicyInfo) HasPolicyId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SplunkViolation_PolicyInfo) HasPolicyName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SplunkViolation_PolicyInfo) HasPolicyDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SplunkViolation_PolicyInfo) HasPolicyRationale() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SplunkViolation_PolicyInfo) HasPolicySeverity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *SplunkViolation_PolicyInfo) HasPolicyVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *SplunkViolation_PolicyInfo) ClearPolicyId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PolicyId = nil
}

func (x *SplunkViolation_PolicyInfo) ClearPolicyName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_PolicyName = nil
}

func (x *SplunkViolation_PolicyInfo) ClearPolicyDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_PolicyDescription = nil
}

func (x *SplunkViolation_PolicyInfo) ClearPolicyRationale() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_PolicyRationale = nil
}

func (x *SplunkViolation_PolicyInfo) ClearPolicySeverity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_PolicySeverity = nil
}

func (x *SplunkViolation_PolicyInfo) ClearPolicyVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_PolicyVersion = nil
}

type SplunkViolation_PolicyInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PolicyId              *string
	PolicyName            *string
	PolicyDescription     *string
	PolicyRationale       *string
	PolicyCategories      []string
	PolicyLifecycleStages []string
	PolicySeverity        *string
	PolicyVersion         *string
}

func (b0 SplunkViolation_PolicyInfo_builder) Build() *SplunkViolation_PolicyInfo {
	m0 := &SplunkViolation_PolicyInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PolicyId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_PolicyId = b.PolicyId
	}
	if b.PolicyName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_PolicyName = b.PolicyName
	}
	if b.PolicyDescription != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_PolicyDescription = b.PolicyDescription
	}
	if b.PolicyRationale != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_PolicyRationale = b.PolicyRationale
	}
	x.xxx_hidden_PolicyCategories = b.PolicyCategories
	x.xxx_hidden_PolicyLifecycleStages = b.PolicyLifecycleStages
	if b.PolicySeverity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_PolicySeverity = b.PolicySeverity
	}
	if b.PolicyVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_PolicyVersion = b.PolicyVersion
	}
	return m0
}

var File_api_integrations_splunk_service_proto protoreflect.FileDescriptor

const file_api_integrations_splunk_service_proto_rawDesc = "" +
	"\n" +
	"%api/integrations/splunk_service.proto\x12\fintegrations\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x13storage/alert.proto\x1a\x18storage/deployment.proto\x1a\x14storage/policy.proto\x1a\x1fstorage/process_indicator.proto\x1a!google/protobuf/go_features.proto\"\x84\x01\n" +
	"\x18SplunkViolationsResponse\x12A\n" +
	"\n" +
	"violations\x18\x01 \x03(\v2\x1d.integrations.SplunkViolationB\x02(\x01R\n" +
	"violations\x12%\n" +
	"\x0enew_checkpoint\x18\x06 \x01(\tR\rnewCheckpoint\"\xd6\x1a\n" +
	"\x0fSplunkViolation\x12R\n" +
	"\x0eviolation_info\x18\x01 \x01(\v2+.integrations.SplunkViolation.ViolationInfoR\rviolationInfo\x12F\n" +
	"\n" +
	"alert_info\x18\x02 \x01(\v2'.integrations.SplunkViolation.AlertInfoR\talertInfo\x12L\n" +
	"\fprocess_info\x18\x03 \x01(\v2).integrations.SplunkViolation.ProcessInfoR\vprocessInfo\x12W\n" +
	"\x0fdeployment_info\x18\x04 \x01(\v2,.integrations.SplunkViolation.DeploymentInfoH\x00R\x0edeploymentInfo\x12Q\n" +
	"\rresource_info\x18\n" +
	" \x01(\v2*.integrations.SplunkViolation.ResourceInfoH\x00R\fresourceInfo\x12I\n" +
	"\vpolicy_info\x18\x05 \x01(\v2(.integrations.SplunkViolation.PolicyInfoR\n" +
	"policyInfo\x12T\n" +
	"\x11network_flow_info\x18\x06 \x01(\v2(.storage.Alert.Violation.NetworkFlowInfoR\x0fnetworkFlowInfo\x1a\xa2\x05\n" +
	"\rViolationInfo\x12!\n" +
	"\fviolation_id\x18\x01 \x01(\tR\vviolationId\x12+\n" +
	"\x11violation_message\x18\x02 \x01(\tR\x10violationMessage\x12u\n" +
	"\x1cviolation_message_attributes\x18\x03 \x03(\v23.storage.Alert.Violation.KeyValueAttrs.KeyValueAttrR\x1aviolationMessageAttributes\x12`\n" +
	"\x0eviolation_type\x18\x04 \x01(\x0e29.integrations.SplunkViolation.ViolationInfo.ViolationTypeR\rviolationType\x12A\n" +
	"\x0eviolation_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rviolationTime\x12\x15\n" +
	"\x06pod_id\x18f \x01(\tR\x05podId\x12\x17\n" +
	"\apod_uid\x18g \x01(\tR\x06podUid\x12%\n" +
	"\x0econtainer_name\x18h \x01(\tR\rcontainerName\x12L\n" +
	"\x14container_start_time\x18i \x01(\v2\x1a.google.protobuf.TimestampR\x12containerStartTime\x12!\n" +
	"\fcontainer_id\x18j \x01(\tR\vcontainerId\"]\n" +
	"\rViolationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aGENERIC\x10\x01\x12\r\n" +
	"\tK8S_EVENT\x10\x02\x12\x11\n" +
	"\rPROCESS_EVENT\x10\x03\x12\x10\n" +
	"\fNETWORK_FLOW\x10\x04\x1a\xbc\x01\n" +
	"\tAlertInfo\x12\x19\n" +
	"\balert_id\x18\x01 \x01(\tR\aalertId\x12@\n" +
	"\x0flifecycle_stage\x18\x02 \x01(\x0e2\x17.storage.LifecycleStageR\x0elifecycleStage\x12L\n" +
	"\x14alert_first_occurred\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x12alertFirstOccurredJ\x04\b\x03\x10\x04\x1a\xb4\x04\n" +
	"\vProcessInfo\x120\n" +
	"\x14process_violation_id\x18e \x01(\tR\x12processViolationId\x12+\n" +
	"\x11process_signal_id\x18\xca\x01 \x01(\tR\x0fprocessSignalId\x12O\n" +
	"\x15process_creation_time\x18\xcb\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x13processCreationTime\x12\"\n" +
	"\fprocess_name\x18\xcc\x01 \x01(\tR\vprocessName\x12\"\n" +
	"\fprocess_args\x18\xcd\x01 \x01(\tR\vprocessArgs\x12%\n" +
	"\x0eexec_file_path\x18\xce\x01 \x01(\tR\fexecFilePath\x12/\n" +
	"\x03pid\x18\xcf\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x03pid\x12>\n" +
	"\vprocess_uid\x18\xd0\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\n" +
	"processUid\x12>\n" +
	"\vprocess_gid\x18\xd1\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\n" +
	"processGid\x12U\n" +
	"\x14process_lineage_info\x18\xd2\x01 \x03(\v2\".storage.ProcessSignal.LineageInfoR\x12processLineageInfo\x1a\xdc\x06\n" +
	"\x0eDeploymentInfo\x12#\n" +
	"\rdeployment_id\x18e \x01(\tR\fdeploymentId\x12'\n" +
	"\x0fdeployment_name\x18f \x01(\tR\x0edeploymentName\x12'\n" +
	"\x0fdeployment_type\x18g \x01(\tR\x0edeploymentType\x121\n" +
	"\x14deployment_namespace\x18h \x01(\tR\x13deploymentNamespace\x126\n" +
	"\x17deployment_namespace_id\x18i \x01(\tR\x15deploymentNamespaceId\x12s\n" +
	"\x11deployment_labels\x18j \x03(\v2B.integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntryB\x02(\x01R\x10deploymentLabels\x12\x1d\n" +
	"\n" +
	"cluster_id\x18k \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18l \x01(\tR\vclusterName\x12X\n" +
	"\x15deployment_containers\x18m \x03(\v2#.storage.Alert.Deployment.ContainerR\x14deploymentContainers\x12\x82\x01\n" +
	"\x16deployment_annotations\x18n \x03(\v2G.integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntryB\x02(\x01R\x15deploymentAnnotations\x12C\n" +
	"\x10deployment_image\x18\xc9\x01 \x01(\v2\x17.storage.ContainerImageR\x0fdeploymentImage\x1aC\n" +
	"\x15DeploymentLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aH\n" +
	"\x1aDeploymentAnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xa7\x01\n" +
	"\fResourceInfo\x12#\n" +
	"\rresource_type\x18\x01 \x01(\tR\fresourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x03 \x01(\tR\tclusterId\x12!\n" +
	"\fcluster_name\x18\x04 \x01(\tR\vclusterName\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x1a\xd9\x02\n" +
	"\n" +
	"PolicyInfo\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x1f\n" +
	"\vpolicy_name\x18\x02 \x01(\tR\n" +
	"policyName\x12-\n" +
	"\x12policy_description\x18\x03 \x01(\tR\x11policyDescription\x12)\n" +
	"\x10policy_rationale\x18\x04 \x01(\tR\x0fpolicyRationale\x12+\n" +
	"\x11policy_categories\x18\x05 \x03(\tR\x10policyCategories\x126\n" +
	"\x17policy_lifecycle_stages\x18\x06 \x03(\tR\x15policyLifecycleStages\x12'\n" +
	"\x0fpolicy_severity\x18\a \x01(\tR\x0epolicySeverity\x12%\n" +
	"\x0epolicy_version\x18\b \x01(\tR\rpolicyVersionB\f\n" +
	"\n" +
	"EntityInfoBM\n" +
	"\"io.stackrox.proto.api.integrationsZ\x1f./api/integrations;integrations\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_api_integrations_splunk_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_integrations_splunk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_integrations_splunk_service_proto_goTypes = []any{
	(SplunkViolation_ViolationInfo_ViolationType)(0),           // 0: integrations.SplunkViolation.ViolationInfo.ViolationType
	(*SplunkViolationsResponse)(nil),                           // 1: integrations.SplunkViolationsResponse
	(*SplunkViolation)(nil),                                    // 2: integrations.SplunkViolation
	(*SplunkViolation_ViolationInfo)(nil),                      // 3: integrations.SplunkViolation.ViolationInfo
	(*SplunkViolation_AlertInfo)(nil),                          // 4: integrations.SplunkViolation.AlertInfo
	(*SplunkViolation_ProcessInfo)(nil),                        // 5: integrations.SplunkViolation.ProcessInfo
	(*SplunkViolation_DeploymentInfo)(nil),                     // 6: integrations.SplunkViolation.DeploymentInfo
	(*SplunkViolation_ResourceInfo)(nil),                       // 7: integrations.SplunkViolation.ResourceInfo
	(*SplunkViolation_PolicyInfo)(nil),                         // 8: integrations.SplunkViolation.PolicyInfo
	nil,                                                        // 9: integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntry
	nil,                                                        // 10: integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntry
	(*storage.Alert_Violation_NetworkFlowInfo)(nil),            // 11: storage.Alert.Violation.NetworkFlowInfo
	(*storage.Alert_Violation_KeyValueAttrs_KeyValueAttr)(nil), // 12: storage.Alert.Violation.KeyValueAttrs.KeyValueAttr
	(*timestamppb.Timestamp)(nil),                              // 13: google.protobuf.Timestamp
	(storage.LifecycleStage)(0),                                // 14: storage.LifecycleStage
	(*wrapperspb.UInt32Value)(nil),                             // 15: google.protobuf.UInt32Value
	(*storage.ProcessSignal_LineageInfo)(nil),                  // 16: storage.ProcessSignal.LineageInfo
	(*storage.Alert_Deployment_Container)(nil),                 // 17: storage.Alert.Deployment.Container
	(*storage.ContainerImage)(nil),                             // 18: storage.ContainerImage
}
var file_api_integrations_splunk_service_proto_depIdxs = []int32{
	2,  // 0: integrations.SplunkViolationsResponse.violations:type_name -> integrations.SplunkViolation
	3,  // 1: integrations.SplunkViolation.violation_info:type_name -> integrations.SplunkViolation.ViolationInfo
	4,  // 2: integrations.SplunkViolation.alert_info:type_name -> integrations.SplunkViolation.AlertInfo
	5,  // 3: integrations.SplunkViolation.process_info:type_name -> integrations.SplunkViolation.ProcessInfo
	6,  // 4: integrations.SplunkViolation.deployment_info:type_name -> integrations.SplunkViolation.DeploymentInfo
	7,  // 5: integrations.SplunkViolation.resource_info:type_name -> integrations.SplunkViolation.ResourceInfo
	8,  // 6: integrations.SplunkViolation.policy_info:type_name -> integrations.SplunkViolation.PolicyInfo
	11, // 7: integrations.SplunkViolation.network_flow_info:type_name -> storage.Alert.Violation.NetworkFlowInfo
	12, // 8: integrations.SplunkViolation.ViolationInfo.violation_message_attributes:type_name -> storage.Alert.Violation.KeyValueAttrs.KeyValueAttr
	0,  // 9: integrations.SplunkViolation.ViolationInfo.violation_type:type_name -> integrations.SplunkViolation.ViolationInfo.ViolationType
	13, // 10: integrations.SplunkViolation.ViolationInfo.violation_time:type_name -> google.protobuf.Timestamp
	13, // 11: integrations.SplunkViolation.ViolationInfo.container_start_time:type_name -> google.protobuf.Timestamp
	14, // 12: integrations.SplunkViolation.AlertInfo.lifecycle_stage:type_name -> storage.LifecycleStage
	13, // 13: integrations.SplunkViolation.AlertInfo.alert_first_occurred:type_name -> google.protobuf.Timestamp
	13, // 14: integrations.SplunkViolation.ProcessInfo.process_creation_time:type_name -> google.protobuf.Timestamp
	15, // 15: integrations.SplunkViolation.ProcessInfo.pid:type_name -> google.protobuf.UInt32Value
	15, // 16: integrations.SplunkViolation.ProcessInfo.process_uid:type_name -> google.protobuf.UInt32Value
	15, // 17: integrations.SplunkViolation.ProcessInfo.process_gid:type_name -> google.protobuf.UInt32Value
	16, // 18: integrations.SplunkViolation.ProcessInfo.process_lineage_info:type_name -> storage.ProcessSignal.LineageInfo
	9,  // 19: integrations.SplunkViolation.DeploymentInfo.deployment_labels:type_name -> integrations.SplunkViolation.DeploymentInfo.DeploymentLabelsEntry
	17, // 20: integrations.SplunkViolation.DeploymentInfo.deployment_containers:type_name -> storage.Alert.Deployment.Container
	10, // 21: integrations.SplunkViolation.DeploymentInfo.deployment_annotations:type_name -> integrations.SplunkViolation.DeploymentInfo.DeploymentAnnotationsEntry
	18, // 22: integrations.SplunkViolation.DeploymentInfo.deployment_image:type_name -> storage.ContainerImage
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_integrations_splunk_service_proto_init() }
func file_api_integrations_splunk_service_proto_init() {
	if File_api_integrations_splunk_service_proto != nil {
		return
	}
	file_api_integrations_splunk_service_proto_msgTypes[1].OneofWrappers = []any{
		(*splunkViolation_DeploymentInfo_)(nil),
		(*splunkViolation_ResourceInfo_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_integrations_splunk_service_proto_rawDesc), len(file_api_integrations_splunk_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_integrations_splunk_service_proto_goTypes,
		DependencyIndexes: file_api_integrations_splunk_service_proto_depIdxs,
		EnumInfos:         file_api_integrations_splunk_service_proto_enumTypes,
		MessageInfos:      file_api_integrations_splunk_service_proto_msgTypes,
	}.Build()
	File_api_integrations_splunk_service_proto = out.File
	file_api_integrations_splunk_service_proto_goTypes = nil
	file_api_integrations_splunk_service_proto_depIdxs = nil
}
