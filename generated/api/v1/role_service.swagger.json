{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/role_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "RoleService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/computeeffectiveaccessscope": {
      "post": {
        "summary": "ComputeEffectiveAccessScope",
        "description": "Returns effective access scope based on the rules in the request. Does\nnot persist anything; not idempotent due to possible changes to clusters\nand namespaces. POST is chosen due to potentially large payload.\n\nThere are advantages in both keeping the response slim and detailed. If\nonly IDs of selected clusters and namespaces are included, response\nlatency and processing time are lower but the caller shall overlay the\nresponse with its view of the world which is susceptible to consistency\nissues. Listing all clusters and namespaces with related metadata is\nconvenient for the caller but bloat the message with secondary data.\n\nWe let the caller decide what level of detail they would like to have:\n\n  - Minimal, when only roots of included subtrees are listed by their\n    IDs. Clusters can be either INCLUDED (its namespaces are included but\n    are not listed) or PARTIAL (at least one namespace is explicitly\n    included). Namespaces can only be INCLUDED.\n\n  - Standard [default], when all known clusters and namespaces are listed\n    with their IDs and names. Clusters can be INCLUDED (all its\n    namespaces are explicitly listed as INCLUDED), PARTIAL (all its\n    namespaces are explicitly listed, some as INCLUDED and some as\n    EXCLUDED), and EXCLUDED (all its namespaces are explicitly listed as\n    EXCLUDED). Namespaces can be either INCLUDED or EXCLUDED.\n\n  - High, when every cluster and namespace is augmented with metadata.",
        "operationId": "RoleService_ComputeEffectiveAccessScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageEffectiveAccessScope"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessScope",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComputeEffectiveAccessScopeRequestPayload"
            }
          },
          {
            "name": "detail",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STANDARD",
              "MINIMAL",
              "HIGH"
            ],
            "default": "STANDARD"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/mypermissions": {
      "get": {
        "operationId": "RoleService_GetMyPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/permissionsets": {
      "get": {
        "operationId": "RoleService_ListPermissionSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPermissionSetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RoleService"
        ]
      },
      "post": {
        "summary": "PostPermissionSet",
        "description": "PermissionSet.id is disallowed in request and set in response.",
        "operationId": "RoleService_PostPermissionSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePermissionSet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "This encodes a set of permissions for StackRox resources.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePermissionSet"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/permissionsets/{id}": {
      "get": {
        "operationId": "RoleService_GetPermissionSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePermissionSet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "delete": {
        "operationId": "RoleService_DeletePermissionSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "put": {
        "operationId": "RoleService_PutPermissionSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleServicePutPermissionSetBody"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/resources": {
      "get": {
        "operationId": "RoleService_GetResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "operationId": "RoleService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/roles/{id}": {
      "get": {
        "operationId": "RoleService_GetRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "delete": {
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/roles/{name}": {
      "post": {
        "operationId": "RoleService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageRole"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "put": {
        "operationId": "RoleService_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleServiceUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/sac/clusters": {
      "get": {
        "summary": "GetClustersForPermissions",
        "description": "Returns the list of cluster ID and cluster name pairs that have at least read allowed\nby the scope of the requesting user for the list of requested permissions.\nEffective access scopes are only considered for input permissions that have\ncluster scope or narrower (i.e. global permissions from the input are ignored).\n\nIf the input only contains permissions at global level, the output will be an empty list.\n\nIf no permission is given in input, all clusters allowed by the requester scope for\nany permission with cluster scope or narrower will be part of the response.",
        "operationId": "RoleService_GetClustersForPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetClustersForPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/sac/clusters/{clusterId}/namespaces": {
      "get": {
        "summary": "GetNamespacesForClusterAndPermissions",
        "description": "Returns the list of namespace ID and namespace name pairs that belong to the requested\ncluster and for which the user has at least read access granted for the list of\nrequested permissions that have namespace scope or narrower (i.e. global and cluster\npermissions from the input are ignored).\n\nIf the input only contains permissions at global or cluster level, the output will be\nan empty list.\n\nIf no permission is given in input, all namespaces allowed by the requester scope for\nany permission with namespace scope or narrower will be part of the response.",
        "operationId": "RoleService_GetNamespacesForClusterAndPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNamespacesForClusterAndPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/simpleaccessscopes": {
      "get": {
        "operationId": "RoleService_ListSimpleAccessScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSimpleAccessScopesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RoleService"
        ]
      },
      "post": {
        "summary": "PostSimpleAccessScope",
        "description": "SimpleAccessScope.id is disallowed in request and set in response.",
        "operationId": "RoleService_PostSimpleAccessScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageSimpleAccessScope"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Simple access scope is a (simple) selection criteria for scoped resources.\nIt does *not* allow multi-component AND-rules nor set operations on names.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageSimpleAccessScope"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/v1/simpleaccessscopes/{id}": {
      "get": {
        "operationId": "RoleService_GetSimpleAccessScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageSimpleAccessScope"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "delete": {
        "operationId": "RoleService_DeleteSimpleAccessScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "put": {
        "operationId": "RoleService_PutSimpleAccessScope",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleServicePutSimpleAccessScopeBody"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    }
  },
  "definitions": {
    "ComputeEffectiveAccessScopeRequestDetail": {
      "type": "string",
      "enum": [
        "STANDARD",
        "MINIMAL",
        "HIGH"
      ],
      "default": "STANDARD"
    },
    "ComputeEffectiveAccessScopeRequestPayload": {
      "type": "object",
      "properties": {
        "simpleRules": {
          "$ref": "#/definitions/SimpleAccessScopeRules"
        }
      }
    },
    "RoleServicePutPermissionSetBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          }
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "This encodes a set of permissions for StackRox resources."
    },
    "RoleServicePutSimpleAccessScopeBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rules": {
          "$ref": "#/definitions/SimpleAccessScopeRules"
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "Simple access scope is a (simple) selection criteria for scoped resources.\nIt does *not* allow multi-component AND-rules nor set operations on names."
    },
    "RoleServiceUpdateRoleBody": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "permissionSetId": {
          "type": "string"
        },
        "accessScopeId": {
          "type": "string"
        },
        "globalAccess": {
          "$ref": "#/definitions/storageAccess",
          "title": "Minimum (not default!) access level for every resource. Can be extended\nbelow by explicit permissions but not shrunk.\nDeprecated 2021-04-20 in favor of `permission_set_id`.\nThis field now should be always NO_ACCESS"
        },
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          },
          "description": "Deprecated 2021-04-20 in favor of `permission_set_id`."
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "A role specifies which actions are allowed for which subset of cluster\nobjects. Permissions be can either specified directly via setting\nresource_to_access together with global_access or by referencing a\npermission set by its id in permission_set_name."
    },
    "SimpleAccessScopeRules": {
      "type": "object",
      "properties": {
        "includedClusters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedNamespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SimpleAccessScopeRulesNamespace"
          }
        },
        "clusterLabelSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSetBasedLabelSelector"
          }
        },
        "namespaceLabelSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSetBasedLabelSelector"
          }
        }
      },
      "description": "Each element of any repeated field is an individual rule. Rules are\njoined by logical OR: if there exists a rule allowing resource `x`,\n`x` is in the access scope."
    },
    "SimpleAccessScopeRulesNamespace": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string",
          "description": "Both fields must be set."
        },
        "namespaceName": {
          "type": "string"
        }
      }
    },
    "TraitsMutabilityMode": {
      "type": "string",
      "enum": [
        "ALLOW_MUTATE",
        "ALLOW_MUTATE_FORCED"
      ],
      "default": "ALLOW_MUTATE",
      "description": "EXPERIMENTAL.\nNOTE: Please refer from using MutabilityMode for the time being. It will be replaced in the future (ROX-14276).\nMutabilityMode specifies whether and how an object can be modified. Default\nis ALLOW_MUTATE and means there are no modification restrictions; this is equivalent\nto the absence of MutabilityMode specification. ALLOW_MUTATE_FORCED forbids all\nmodifying operations except object removal with force bit on.\n\nBe careful when changing the state of this field. For example, modifying an\nobject from ALLOW_MUTATE to ALLOW_MUTATE_FORCED is allowed but will prohibit any further\nchanges to it, including modifying it back to ALLOW_MUTATE."
    },
    "TraitsOrigin": {
      "type": "string",
      "enum": [
        "IMPERATIVE",
        "DEFAULT",
        "DECLARATIVE",
        "DECLARATIVE_ORPHANED"
      ],
      "default": "IMPERATIVE",
      "description": "Origin specifies the origin of an object.\nObjects can have four different origins:\n- IMPERATIVE: the object was created via the API. This is assumed by default.\n- DEFAULT: the object is a default object, such as default roles, access scopes etc.\n- DECLARATIVE: the object is created via declarative configuration.\n- DECLARATIVE_ORPHANED: the object is created via declarative configuration and then unsuccessfully deleted(for example, because it is referenced by another object)\nBased on the origin, different rules apply to the objects.\nObjects with the DECLARATIVE origin are not allowed to be modified via API, only via declarative configuration.\nAdditionally, they may not reference objects with the IMPERATIVE origin.\nObjects with the DEFAULT origin are not allowed to be modified via either API or declarative configuration.\nThey may be referenced by all other objects.\nObjects with the IMPERATIVE origin are allowed to be modified via API, not via declarative configuration.\nThey may reference all other objects.\nObjects with the DECLARATIVE_ORPHANED origin are not allowed to be modified via either API or declarative configuration.\nDECLARATIVE_ORPHANED resource can become DECLARATIVE again if it is redefined in declarative configuration.\nObjects with this origin will be cleaned up from the system immediately after they are not referenced by other resources anymore.\nThey may be referenced by all other objects."
    },
    "TraitsVisibility": {
      "type": "string",
      "enum": [
        "VISIBLE",
        "HIDDEN"
      ],
      "default": "VISIBLE",
      "description": "EXPERIMENTAL.\nvisibility allows to specify whether the object should be visible for certain APIs."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "storageAccess": {
      "type": "string",
      "enum": [
        "NO_ACCESS",
        "READ_ACCESS",
        "READ_WRITE_ACCESS"
      ],
      "default": "NO_ACCESS"
    },
    "storageEffectiveAccessScope": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEffectiveAccessScopeCluster"
          }
        }
      },
      "description": "EffectiveAccessScope describes which clusters and namespaces are \"in scope\"\ngiven current state. Basically, if AccessScope is applied to the currently\nknown clusters and namespaces, the result is EffectiveAccessScope.\n\nEffectiveAccessScope represents a tree with nodes marked as included and\nexcluded. If a node is included, all its child nodes are included."
    },
    "storageEffectiveAccessScopeCluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/storageEffectiveAccessScopeState"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEffectiveAccessScopeNamespace"
          }
        }
      }
    },
    "storageEffectiveAccessScopeNamespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/storageEffectiveAccessScopeState"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "storageEffectiveAccessScopeState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "INCLUDED",
        "EXCLUDED",
        "PARTIAL"
      ],
      "default": "UNKNOWN"
    },
    "storagePermissionSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          }
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "This encodes a set of permissions for StackRox resources."
    },
    "storageRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissionSetId": {
          "type": "string"
        },
        "accessScopeId": {
          "type": "string"
        },
        "globalAccess": {
          "$ref": "#/definitions/storageAccess",
          "title": "Minimum (not default!) access level for every resource. Can be extended\nbelow by explicit permissions but not shrunk.\nDeprecated 2021-04-20 in favor of `permission_set_id`.\nThis field now should be always NO_ACCESS"
        },
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          },
          "description": "Deprecated 2021-04-20 in favor of `permission_set_id`."
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "A role specifies which actions are allowed for which subset of cluster\nobjects. Permissions be can either specified directly via setting\nresource_to_access together with global_access or by referencing a\npermission set by its id in permission_set_name."
    },
    "storageSetBasedLabelSelector": {
      "type": "object",
      "properties": {
        "requirements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSetBasedLabelSelectorRequirement"
          }
        }
      },
      "description": "SetBasedLabelSelector only allows set-based label requirements.\n\nNext available tag: 3"
    },
    "storageSetBasedLabelSelectorOperator": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN",
        "NOT_IN",
        "EXISTS",
        "NOT_EXISTS"
      ],
      "default": "UNKNOWN"
    },
    "storageSetBasedLabelSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/storageSetBasedLabelSelectorOperator"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Next available tag: 4"
    },
    "storageSimpleAccessScope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rules": {
          "$ref": "#/definitions/SimpleAccessScopeRules"
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        }
      },
      "description": "Simple access scope is a (simple) selection criteria for scoped resources.\nIt does *not* allow multi-component AND-rules nor set operations on names."
    },
    "storageTraits": {
      "type": "object",
      "properties": {
        "mutabilityMode": {
          "$ref": "#/definitions/TraitsMutabilityMode"
        },
        "visibility": {
          "$ref": "#/definitions/TraitsVisibility"
        },
        "origin": {
          "$ref": "#/definitions/TraitsOrigin"
        }
      }
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetClustersForPermissionsResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ScopeObject"
          }
        }
      }
    },
    "v1GetNamespacesForClusterAndPermissionsResponse": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ScopeObject"
          }
        }
      }
    },
    "v1GetPermissionsResponse": {
      "type": "object",
      "properties": {
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          }
        }
      },
      "description": "GetPermissionsResponse is wire-compatible with the old format of the Role\nmessage and represents a collection of aggregated permissions."
    },
    "v1GetResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageRole"
          }
        }
      }
    },
    "v1ListPermissionSetsResponse": {
      "type": "object",
      "properties": {
        "permissionSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePermissionSet"
          }
        }
      }
    },
    "v1ListSimpleAccessScopesResponse": {
      "type": "object",
      "properties": {
        "accessScopes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSimpleAccessScope"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1ScopeObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "ScopeObject represents an ID, name pair, which can apply to any\nentity that takes part in an access scope (so far Cluster and Namespace)."
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    }
  }
}
