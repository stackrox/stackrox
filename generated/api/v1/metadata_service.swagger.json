{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/metadata_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backup/status": {
      "get": {
        "operationId": "MetadataService_GetDatabaseBackupStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DatabaseBackupStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/central-capabilities": {
      "get": {
        "operationId": "MetadataService_GetCentralCapabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CentralServicesCapabilities"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/database/status": {
      "get": {
        "operationId": "MetadataService_GetDatabaseStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DatabaseStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/metadata": {
      "get": {
        "operationId": "MetadataService_GetMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Metadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/tls-challenge": {
      "get": {
        "summary": "TLSChallenge",
        "description": "Returns all trusted CAs, i.e., secret/additional-ca and Central's cert\nchain. This is necessary if Central is running behind a load balancer\nwith self-signed certificates. Does not require authentication.",
        "operationId": "MetadataService_TLSChallenge",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TLSChallengeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "challengeToken",
            "description": "generated challenge token by the service asking for TLS certs.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    }
  },
  "definitions": {
    "CentralServicesCapabilitiesCapabilityStatus": {
      "type": "string",
      "enum": [
        "CapabilityAvailable",
        "CapabilityDisabled"
      ],
      "default": "CapabilityAvailable",
      "description": " - CapabilityAvailable: CapabilityAvailable means that UI and APIs should be available for users to use.\nThis does not automatically mean that the functionality is 100% available and any calls to APIs will result\nin successful execution. Rather it means that users should be allowed to leverage the functionality as\nopposed to CapabilityDisabled when functionality should be blocked.\n - CapabilityDisabled: CapabilityDisabled means the corresponding UI should be disabled and attempts to use related APIs\nshould lead to errors."
    },
    "DatabaseStatusDatabaseType": {
      "type": "string",
      "enum": [
        "Hidden",
        "RocksDB",
        "PostgresDB"
      ],
      "default": "Hidden"
    },
    "MetadataLicenseStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "INVALID",
        "EXPIRED",
        "RESTARTING",
        "VALID"
      ],
      "default": "NONE"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageBackupInfo": {
      "type": "object",
      "properties": {
        "backupLastRunAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/storageOperationStatus"
        },
        "requestor": {
          "$ref": "#/definitions/storageSlimUser"
        }
      }
    },
    "storageOperationStatus": {
      "type": "string",
      "enum": [
        "FAIL",
        "PASS"
      ],
      "default": "FAIL"
    },
    "storageSlimUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CentralServicesCapabilities": {
      "type": "object",
      "properties": {
        "centralScanningCanUseContainerIamRoleForEcr": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to use container IAM role for scanning images from Amazon ECR using Scanner deployed as part of Central\nServices.\nNote that CapabilityAvailable status does not mean that Scanner container actually has IAM role attached. Such\ncheck isn't implemented at the moment and an attempt to use the corresponding setting may lead to errors when\nthe role is not actually there. It's user's responsibility to check the presence of role and integration status\nwhen the corresponding setting is enabled."
        },
        "centralCanUseCloudBackupIntegrations": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to configure and perform Central backups to Amazon S3 or Google Cloud Storage."
        },
        "centralCanDisplayDeclarativeConfigHealth": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to present health of declarative config resources (e.g. auth providers, roles, access scopes, permission\nsets, notifiers) to the user."
        },
        "centralCanUpdateCert": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "title": "Ability to trigger generation of new certificates"
        }
      },
      "description": "Provides availability of certain functionality of Central Services in the current configuration.\nThe initial intended use is to disable certain functionality that does not make sense in the Cloud Service context."
    },
    "v1DatabaseBackupStatus": {
      "type": "object",
      "properties": {
        "backupInfo": {
          "$ref": "#/definitions/storageBackupInfo"
        }
      }
    },
    "v1DatabaseStatus": {
      "type": "object",
      "properties": {
        "databaseAvailable": {
          "type": "boolean",
          "title": "indicates whether or not central can communicate with the database"
        },
        "databaseType": {
          "$ref": "#/definitions/DatabaseStatusDatabaseType",
          "title": "type of database serving central"
        },
        "databaseVersion": {
          "type": "string",
          "title": "version of the database"
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "buildFlavor": {
          "type": "string"
        },
        "releaseBuild": {
          "type": "boolean"
        },
        "licenseStatus": {
          "$ref": "#/definitions/MetadataLicenseStatus",
          "title": "Do not use this field. It will always contain \"VALID\""
        }
      }
    },
    "v1TLSChallengeResponse": {
      "type": "object",
      "properties": {
        "trustInfoSerialized": {
          "type": "string",
          "format": "byte",
          "title": "signed data which is returned to the caller, is validated against the signature"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        }
      }
    }
  }
}
