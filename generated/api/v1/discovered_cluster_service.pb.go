// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/discovered_cluster_service.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiscoveredCluster_Status int32

const (
	// The status of the cluster is unknown. May occur if a secured cluster
	// is missing the metadata for a possible match.
	DiscoveredCluster_STATUS_UNSPECIFIED DiscoveredCluster_Status = 0
	// The discovered cluster was matched with a secured cluster.
	DiscoveredCluster_STATUS_SECURED DiscoveredCluster_Status = 1
	// The discovered cluster was not matched with a secured cluster.
	DiscoveredCluster_STATUS_UNSECURED DiscoveredCluster_Status = 2
)

var DiscoveredCluster_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_SECURED",
	2: "STATUS_UNSECURED",
}

var DiscoveredCluster_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_SECURED":     1,
	"STATUS_UNSECURED":   2,
}

func (x DiscoveredCluster_Status) String() string {
	return proto.EnumName(DiscoveredCluster_Status_name, int32(x))
}

func (DiscoveredCluster_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0, 0}
}

type DiscoveredCluster_Metadata_Type int32

const (
	DiscoveredCluster_Metadata_UNSPECIFIED DiscoveredCluster_Metadata_Type = 0
	DiscoveredCluster_Metadata_AKS         DiscoveredCluster_Metadata_Type = 1
	DiscoveredCluster_Metadata_ARO         DiscoveredCluster_Metadata_Type = 2
	DiscoveredCluster_Metadata_EKS         DiscoveredCluster_Metadata_Type = 3
	DiscoveredCluster_Metadata_GKE         DiscoveredCluster_Metadata_Type = 4
	DiscoveredCluster_Metadata_OCP         DiscoveredCluster_Metadata_Type = 5
	DiscoveredCluster_Metadata_OSD         DiscoveredCluster_Metadata_Type = 6
	DiscoveredCluster_Metadata_ROSA        DiscoveredCluster_Metadata_Type = 7
)

var DiscoveredCluster_Metadata_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "AKS",
	2: "ARO",
	3: "EKS",
	4: "GKE",
	5: "OCP",
	6: "OSD",
	7: "ROSA",
}

var DiscoveredCluster_Metadata_Type_value = map[string]int32{
	"UNSPECIFIED": 0,
	"AKS":         1,
	"ARO":         2,
	"EKS":         3,
	"GKE":         4,
	"OCP":         5,
	"OSD":         6,
	"ROSA":        7,
}

func (x DiscoveredCluster_Metadata_Type) String() string {
	return proto.EnumName(DiscoveredCluster_Metadata_Type_name, int32(x))
}

func (DiscoveredCluster_Metadata_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0, 0, 0}
}

type DiscoveredCluster_Metadata_ProviderType int32

const (
	DiscoveredCluster_Metadata_PROVIDER_TYPE_UNSPECIFIED DiscoveredCluster_Metadata_ProviderType = 0
	DiscoveredCluster_Metadata_PROVIDER_TYPE_AWS         DiscoveredCluster_Metadata_ProviderType = 1
	DiscoveredCluster_Metadata_PROVIDER_TYPE_GCP         DiscoveredCluster_Metadata_ProviderType = 2
	DiscoveredCluster_Metadata_PROVIDER_TYPE_AZURE       DiscoveredCluster_Metadata_ProviderType = 3
)

var DiscoveredCluster_Metadata_ProviderType_name = map[int32]string{
	0: "PROVIDER_TYPE_UNSPECIFIED",
	1: "PROVIDER_TYPE_AWS",
	2: "PROVIDER_TYPE_GCP",
	3: "PROVIDER_TYPE_AZURE",
}

var DiscoveredCluster_Metadata_ProviderType_value = map[string]int32{
	"PROVIDER_TYPE_UNSPECIFIED": 0,
	"PROVIDER_TYPE_AWS":         1,
	"PROVIDER_TYPE_GCP":         2,
	"PROVIDER_TYPE_AZURE":       3,
}

func (x DiscoveredCluster_Metadata_ProviderType) String() string {
	return proto.EnumName(DiscoveredCluster_Metadata_ProviderType_name, int32(x))
}

func (DiscoveredCluster_Metadata_ProviderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0, 0, 1}
}

// DiscoveredCluster represents a cluster discovered from a cloud source.
type DiscoveredCluster struct {
	// UUIDv5 generated deterministically from the tuple (metadata.id, metadata.type, source.id).
	Id       string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *DiscoveredCluster_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If an equivalent internal cluster exists, the discovered cluster is
	// considered secured. If an equivalent secured cluster does not exist, the
	// status of the discovered cluster is either unsecured or unknown, depending
	// on the provider details.
	Status DiscoveredCluster_Status `protobuf:"varint,3,opt,name=status,proto3,enum=v1.DiscoveredCluster_Status" json:"status,omitempty"`
	// The cloud source integration from which the cluster was discovered.
	Source               *DiscoveredCluster_CloudSource `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DiscoveredCluster) Reset()         { *m = DiscoveredCluster{} }
func (m *DiscoveredCluster) String() string { return proto.CompactTextString(m) }
func (*DiscoveredCluster) ProtoMessage()    {}
func (*DiscoveredCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0}
}
func (m *DiscoveredCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredCluster.Merge(m, src)
}
func (m *DiscoveredCluster) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredCluster.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredCluster proto.InternalMessageInfo

func (m *DiscoveredCluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveredCluster) GetMetadata() *DiscoveredCluster_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DiscoveredCluster) GetStatus() DiscoveredCluster_Status {
	if m != nil {
		return m.Status
	}
	return DiscoveredCluster_STATUS_UNSPECIFIED
}

func (m *DiscoveredCluster) GetSource() *DiscoveredCluster_CloudSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *DiscoveredCluster) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredCluster) Clone() *DiscoveredCluster {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredCluster)
	*cloned = *m

	cloned.Metadata = m.Metadata.Clone()
	cloned.Source = m.Source.Clone()
	return cloned
}

type DiscoveredCluster_Metadata struct {
	// Represents a unique ID under which the cluster is registered with the
	// cloud provider. Matches storage.ClusterMetadata.id for secured clusters.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Represents the name under which the cluster is registered with the
	// cloud provider. Matches storage.ClusterMetadata.name for secured clusters.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The cluster type. Matches storage.ClusterMetadata.type for secured clusters.
	Type DiscoveredCluster_Metadata_Type `protobuf:"varint,3,opt,name=type,proto3,enum=v1.DiscoveredCluster_Metadata_Type" json:"type,omitempty"`
	// The cloud provider type.
	ProviderType DiscoveredCluster_Metadata_ProviderType `protobuf:"varint,4,opt,name=provider_type,json=providerType,proto3,enum=v1.DiscoveredCluster_Metadata_ProviderType" json:"provider_type,omitempty"`
	// The region as reported by the cloud provider.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Timestamp at which the cluster was first discovered by the cloud source.
	FirstDiscoveredAt    *types.Timestamp `protobuf:"bytes,6,opt,name=first_discovered_at,json=firstDiscoveredAt,proto3" json:"first_discovered_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DiscoveredCluster_Metadata) Reset()         { *m = DiscoveredCluster_Metadata{} }
func (m *DiscoveredCluster_Metadata) String() string { return proto.CompactTextString(m) }
func (*DiscoveredCluster_Metadata) ProtoMessage()    {}
func (*DiscoveredCluster_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0, 0}
}
func (m *DiscoveredCluster_Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredCluster_Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredCluster_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredCluster_Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredCluster_Metadata.Merge(m, src)
}
func (m *DiscoveredCluster_Metadata) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredCluster_Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredCluster_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredCluster_Metadata proto.InternalMessageInfo

func (m *DiscoveredCluster_Metadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetType() DiscoveredCluster_Metadata_Type {
	if m != nil {
		return m.Type
	}
	return DiscoveredCluster_Metadata_UNSPECIFIED
}

func (m *DiscoveredCluster_Metadata) GetProviderType() DiscoveredCluster_Metadata_ProviderType {
	if m != nil {
		return m.ProviderType
	}
	return DiscoveredCluster_Metadata_PROVIDER_TYPE_UNSPECIFIED
}

func (m *DiscoveredCluster_Metadata) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DiscoveredCluster_Metadata) GetFirstDiscoveredAt() *types.Timestamp {
	if m != nil {
		return m.FirstDiscoveredAt
	}
	return nil
}

func (m *DiscoveredCluster_Metadata) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredCluster_Metadata) Clone() *DiscoveredCluster_Metadata {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredCluster_Metadata)
	*cloned = *m

	cloned.FirstDiscoveredAt = m.FirstDiscoveredAt.Clone()
	return cloned
}

type DiscoveredCluster_CloudSource struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveredCluster_CloudSource) Reset()         { *m = DiscoveredCluster_CloudSource{} }
func (m *DiscoveredCluster_CloudSource) String() string { return proto.CompactTextString(m) }
func (*DiscoveredCluster_CloudSource) ProtoMessage()    {}
func (*DiscoveredCluster_CloudSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{0, 1}
}
func (m *DiscoveredCluster_CloudSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredCluster_CloudSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredCluster_CloudSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredCluster_CloudSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredCluster_CloudSource.Merge(m, src)
}
func (m *DiscoveredCluster_CloudSource) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredCluster_CloudSource) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredCluster_CloudSource.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredCluster_CloudSource proto.InternalMessageInfo

func (m *DiscoveredCluster_CloudSource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveredCluster_CloudSource) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredCluster_CloudSource) Clone() *DiscoveredCluster_CloudSource {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredCluster_CloudSource)
	*cloned = *m

	return cloned
}

type DiscoveredClustersFilter struct {
	// Matches discovered clusters of specific names.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Matches discovered clusters of specific types.
	Types []DiscoveredCluster_Metadata_Type `protobuf:"varint,2,rep,packed,name=types,proto3,enum=v1.DiscoveredCluster_Metadata_Type" json:"types,omitempty"`
	// Matches discovered clusters of specific statuses.
	Statuses []DiscoveredCluster_Status `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=v1.DiscoveredCluster_Status" json:"statuses,omitempty"`
	// Matches discovered clusters of specific cloud source IDs.
	SourceIds            []string `protobuf:"bytes,4,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveredClustersFilter) Reset()         { *m = DiscoveredClustersFilter{} }
func (m *DiscoveredClustersFilter) String() string { return proto.CompactTextString(m) }
func (*DiscoveredClustersFilter) ProtoMessage()    {}
func (*DiscoveredClustersFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{1}
}
func (m *DiscoveredClustersFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredClustersFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredClustersFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredClustersFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredClustersFilter.Merge(m, src)
}
func (m *DiscoveredClustersFilter) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredClustersFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredClustersFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredClustersFilter proto.InternalMessageInfo

func (m *DiscoveredClustersFilter) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *DiscoveredClustersFilter) GetTypes() []DiscoveredCluster_Metadata_Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *DiscoveredClustersFilter) GetStatuses() []DiscoveredCluster_Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *DiscoveredClustersFilter) GetSourceIds() []string {
	if m != nil {
		return m.SourceIds
	}
	return nil
}

func (m *DiscoveredClustersFilter) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DiscoveredClustersFilter) Clone() *DiscoveredClustersFilter {
	if m == nil {
		return nil
	}
	cloned := new(DiscoveredClustersFilter)
	*cloned = *m

	if m.Names != nil {
		cloned.Names = make([]string, len(m.Names))
		copy(cloned.Names, m.Names)
	}
	if m.Types != nil {
		cloned.Types = make([]DiscoveredCluster_Metadata_Type, len(m.Types))
		copy(cloned.Types, m.Types)
	}
	if m.Statuses != nil {
		cloned.Statuses = make([]DiscoveredCluster_Status, len(m.Statuses))
		copy(cloned.Statuses, m.Statuses)
	}
	if m.SourceIds != nil {
		cloned.SourceIds = make([]string, len(m.SourceIds))
		copy(cloned.SourceIds, m.SourceIds)
	}
	return cloned
}

type CountDiscoveredClustersRequest struct {
	// Filters discovered clusters based on the requested fields.
	Filter               *DiscoveredClustersFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CountDiscoveredClustersRequest) Reset()         { *m = CountDiscoveredClustersRequest{} }
func (m *CountDiscoveredClustersRequest) String() string { return proto.CompactTextString(m) }
func (*CountDiscoveredClustersRequest) ProtoMessage()    {}
func (*CountDiscoveredClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{2}
}
func (m *CountDiscoveredClustersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountDiscoveredClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountDiscoveredClustersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountDiscoveredClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountDiscoveredClustersRequest.Merge(m, src)
}
func (m *CountDiscoveredClustersRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountDiscoveredClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountDiscoveredClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountDiscoveredClustersRequest proto.InternalMessageInfo

func (m *CountDiscoveredClustersRequest) GetFilter() *DiscoveredClustersFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CountDiscoveredClustersRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountDiscoveredClustersRequest) Clone() *CountDiscoveredClustersRequest {
	if m == nil {
		return nil
	}
	cloned := new(CountDiscoveredClustersRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

type CountDiscoveredClustersResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountDiscoveredClustersResponse) Reset()         { *m = CountDiscoveredClustersResponse{} }
func (m *CountDiscoveredClustersResponse) String() string { return proto.CompactTextString(m) }
func (*CountDiscoveredClustersResponse) ProtoMessage()    {}
func (*CountDiscoveredClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{3}
}
func (m *CountDiscoveredClustersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountDiscoveredClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountDiscoveredClustersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountDiscoveredClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountDiscoveredClustersResponse.Merge(m, src)
}
func (m *CountDiscoveredClustersResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountDiscoveredClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountDiscoveredClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountDiscoveredClustersResponse proto.InternalMessageInfo

func (m *CountDiscoveredClustersResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountDiscoveredClustersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountDiscoveredClustersResponse) Clone() *CountDiscoveredClustersResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountDiscoveredClustersResponse)
	*cloned = *m

	return cloned
}

type GetDiscoveredClusterRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDiscoveredClusterRequest) Reset()         { *m = GetDiscoveredClusterRequest{} }
func (m *GetDiscoveredClusterRequest) String() string { return proto.CompactTextString(m) }
func (*GetDiscoveredClusterRequest) ProtoMessage()    {}
func (*GetDiscoveredClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{4}
}
func (m *GetDiscoveredClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDiscoveredClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDiscoveredClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDiscoveredClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDiscoveredClusterRequest.Merge(m, src)
}
func (m *GetDiscoveredClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDiscoveredClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDiscoveredClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDiscoveredClusterRequest proto.InternalMessageInfo

func (m *GetDiscoveredClusterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetDiscoveredClusterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetDiscoveredClusterRequest) Clone() *GetDiscoveredClusterRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetDiscoveredClusterRequest)
	*cloned = *m

	return cloned
}

type GetDiscoveredClusterResponse struct {
	Cluster              *DiscoveredCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetDiscoveredClusterResponse) Reset()         { *m = GetDiscoveredClusterResponse{} }
func (m *GetDiscoveredClusterResponse) String() string { return proto.CompactTextString(m) }
func (*GetDiscoveredClusterResponse) ProtoMessage()    {}
func (*GetDiscoveredClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{5}
}
func (m *GetDiscoveredClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDiscoveredClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDiscoveredClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDiscoveredClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDiscoveredClusterResponse.Merge(m, src)
}
func (m *GetDiscoveredClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDiscoveredClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDiscoveredClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDiscoveredClusterResponse proto.InternalMessageInfo

func (m *GetDiscoveredClusterResponse) GetCluster() *DiscoveredCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *GetDiscoveredClusterResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetDiscoveredClusterResponse) Clone() *GetDiscoveredClusterResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetDiscoveredClusterResponse)
	*cloned = *m

	cloned.Cluster = m.Cluster.Clone()
	return cloned
}

type ListDiscoveredClustersRequest struct {
	// Divides the response into chunks.
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Filters cloud sources based on the requested fields.
	Filter               *DiscoveredClustersFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListDiscoveredClustersRequest) Reset()         { *m = ListDiscoveredClustersRequest{} }
func (m *ListDiscoveredClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListDiscoveredClustersRequest) ProtoMessage()    {}
func (*ListDiscoveredClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{6}
}
func (m *ListDiscoveredClustersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiscoveredClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiscoveredClustersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiscoveredClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiscoveredClustersRequest.Merge(m, src)
}
func (m *ListDiscoveredClustersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDiscoveredClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiscoveredClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiscoveredClustersRequest proto.InternalMessageInfo

func (m *ListDiscoveredClustersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListDiscoveredClustersRequest) GetFilter() *DiscoveredClustersFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDiscoveredClustersRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListDiscoveredClustersRequest) Clone() *ListDiscoveredClustersRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListDiscoveredClustersRequest)
	*cloned = *m

	cloned.Pagination = m.Pagination.Clone()
	cloned.Filter = m.Filter.Clone()
	return cloned
}

type ListDiscoveredClustersResponse struct {
	Clusters             []*DiscoveredCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListDiscoveredClustersResponse) Reset()         { *m = ListDiscoveredClustersResponse{} }
func (m *ListDiscoveredClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListDiscoveredClustersResponse) ProtoMessage()    {}
func (*ListDiscoveredClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe81e36624cd29b2, []int{7}
}
func (m *ListDiscoveredClustersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiscoveredClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiscoveredClustersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiscoveredClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiscoveredClustersResponse.Merge(m, src)
}
func (m *ListDiscoveredClustersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDiscoveredClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiscoveredClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiscoveredClustersResponse proto.InternalMessageInfo

func (m *ListDiscoveredClustersResponse) GetClusters() []*DiscoveredCluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListDiscoveredClustersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListDiscoveredClustersResponse) Clone() *ListDiscoveredClustersResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListDiscoveredClustersResponse)
	*cloned = *m

	if m.Clusters != nil {
		cloned.Clusters = make([]*DiscoveredCluster, len(m.Clusters))
		for idx, v := range m.Clusters {
			cloned.Clusters[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v1.DiscoveredCluster_Status", DiscoveredCluster_Status_name, DiscoveredCluster_Status_value)
	proto.RegisterEnum("v1.DiscoveredCluster_Metadata_Type", DiscoveredCluster_Metadata_Type_name, DiscoveredCluster_Metadata_Type_value)
	proto.RegisterEnum("v1.DiscoveredCluster_Metadata_ProviderType", DiscoveredCluster_Metadata_ProviderType_name, DiscoveredCluster_Metadata_ProviderType_value)
	proto.RegisterType((*DiscoveredCluster)(nil), "v1.DiscoveredCluster")
	proto.RegisterType((*DiscoveredCluster_Metadata)(nil), "v1.DiscoveredCluster.Metadata")
	proto.RegisterType((*DiscoveredCluster_CloudSource)(nil), "v1.DiscoveredCluster.CloudSource")
	proto.RegisterType((*DiscoveredClustersFilter)(nil), "v1.DiscoveredClustersFilter")
	proto.RegisterType((*CountDiscoveredClustersRequest)(nil), "v1.CountDiscoveredClustersRequest")
	proto.RegisterType((*CountDiscoveredClustersResponse)(nil), "v1.CountDiscoveredClustersResponse")
	proto.RegisterType((*GetDiscoveredClusterRequest)(nil), "v1.GetDiscoveredClusterRequest")
	proto.RegisterType((*GetDiscoveredClusterResponse)(nil), "v1.GetDiscoveredClusterResponse")
	proto.RegisterType((*ListDiscoveredClustersRequest)(nil), "v1.ListDiscoveredClustersRequest")
	proto.RegisterType((*ListDiscoveredClustersResponse)(nil), "v1.ListDiscoveredClustersResponse")
}

func init() {
	proto.RegisterFile("api/v1/discovered_cluster_service.proto", fileDescriptor_fe81e36624cd29b2)
}

var fileDescriptor_fe81e36624cd29b2 = []byte{
	// 885 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0xdb, 0x49, 0x9a, 0xbe, 0x2e, 0xc5, 0x9d, 0xed, 0xb6, 0x6e, 0x68, 0xfe, 0xe0, 0x05,
	0x51, 0x09, 0xad, 0xa3, 0x14, 0xa4, 0x65, 0xb9, 0x85, 0xc4, 0x5b, 0x75, 0x0b, 0xc4, 0x1a, 0xa7,
	0xbb, 0xb0, 0x97, 0xc8, 0x1b, 0x4f, 0xab, 0x11, 0xad, 0x6d, 0x3c, 0x13, 0x8b, 0x15, 0x42, 0x20,
	0x24, 0x0e, 0x9c, 0xb9, 0xf0, 0x19, 0xe0, 0x6b, 0x70, 0xe0, 0x88, 0xc4, 0x17, 0x40, 0x85, 0x23,
	0x1f, 0x02, 0xcd, 0x78, 0x92, 0xa6, 0xf9, 0xb7, 0xec, 0x6d, 0xe6, 0xbd, 0xdf, 0x7b, 0xef, 0xf7,
	0xfe, 0xcd, 0xc0, 0x3b, 0x41, 0x42, 0x9b, 0x59, 0xab, 0x19, 0x52, 0x36, 0x8c, 0x33, 0x92, 0x92,
	0x70, 0x30, 0xbc, 0x18, 0x31, 0x4e, 0xd2, 0x01, 0x23, 0x69, 0x46, 0x87, 0xc4, 0x49, 0xd2, 0x98,
	0xc7, 0x48, 0xcf, 0x5a, 0x95, 0x5d, 0x05, 0x4e, 0x82, 0x73, 0x1a, 0x05, 0x9c, 0xc6, 0x51, 0xae,
	0xac, 0xec, 0x9f, 0xc7, 0xf1, 0xf9, 0x05, 0x69, 0x0a, 0x7d, 0x10, 0x45, 0x31, 0x97, 0x4a, 0xa6,
	0xb4, 0x75, 0xa5, 0x95, 0xb7, 0xe7, 0xa3, 0xb3, 0x26, 0xa7, 0x97, 0x84, 0xf1, 0xe0, 0x32, 0xc9,
	0x01, 0xf6, 0x2f, 0x25, 0xd8, 0xea, 0x4e, 0x08, 0x74, 0xf2, 0xf8, 0x68, 0x13, 0x74, 0x1a, 0x5a,
	0x5a, 0x43, 0x3b, 0x58, 0xc7, 0x3a, 0x0d, 0xd1, 0x87, 0x50, 0xbe, 0x24, 0x3c, 0x08, 0x03, 0x1e,
	0x58, 0x7a, 0x43, 0x3b, 0xd8, 0x38, 0xac, 0x39, 0x59, 0xcb, 0x99, 0x33, 0x74, 0x3e, 0x51, 0x28,
	0x3c, 0xc1, 0xa3, 0xf7, 0xa1, 0xc4, 0x78, 0xc0, 0x47, 0xcc, 0x32, 0x1a, 0xda, 0xc1, 0xe6, 0xe1,
	0xfe, 0x62, 0x4b, 0x5f, 0x62, 0xb0, 0xc2, 0xa2, 0x87, 0x50, 0x62, 0xf1, 0x28, 0x1d, 0x12, 0xab,
	0x20, 0xe3, 0xbd, 0xb9, 0xd8, 0xaa, 0x73, 0x11, 0x8f, 0x42, 0x5f, 0x02, 0xb1, 0x32, 0xa8, 0xfc,
	0x6b, 0x40, 0x79, 0xcc, 0x63, 0x2e, 0x13, 0x04, 0x85, 0x28, 0xb8, 0x24, 0x32, 0x8b, 0x75, 0x2c,
	0xcf, 0xe8, 0x01, 0x14, 0xf8, 0x8b, 0x84, 0x28, 0x7e, 0xf7, 0x56, 0x67, 0xe6, 0xf4, 0x5f, 0x24,
	0x04, 0x4b, 0x03, 0xe4, 0xc1, 0x6b, 0x49, 0x1a, 0x67, 0x34, 0x24, 0xe9, 0x40, 0x7a, 0x28, 0x48,
	0x0f, 0xef, 0xbe, 0xc4, 0x83, 0xa7, 0x6c, 0xa4, 0xa7, 0xdb, 0xc9, 0xd4, 0x0d, 0xed, 0x40, 0x29,
	0x25, 0xe7, 0x34, 0x8e, 0xac, 0xa2, 0x24, 0xa8, 0x6e, 0xe8, 0x31, 0xdc, 0x39, 0xa3, 0x29, 0xe3,
	0x83, 0xa9, 0x61, 0x09, 0xb8, 0x55, 0x92, 0xb5, 0xa9, 0x38, 0x79, 0x97, 0x9d, 0x71, 0x97, 0x9d,
	0xfe, 0xb8, 0xcb, 0x78, 0x4b, 0x9a, 0x5d, 0x93, 0x69, 0x73, 0xfb, 0x29, 0x14, 0x64, 0xac, 0xd7,
	0x61, 0xe3, 0xf4, 0x53, 0xdf, 0x73, 0x3b, 0xc7, 0x8f, 0x8e, 0xdd, 0xae, 0x79, 0x0b, 0xad, 0x81,
	0xd1, 0x3e, 0xf1, 0x4d, 0x4d, 0x1e, 0x70, 0xcf, 0xd4, 0xc5, 0xc1, 0x3d, 0xf1, 0x4d, 0x43, 0x1c,
	0x8e, 0x4e, 0x5c, 0xb3, 0x20, 0x0e, 0xbd, 0x8e, 0x67, 0x16, 0xe5, 0xc1, 0xef, 0x9a, 0x25, 0x54,
	0x86, 0x02, 0xee, 0xf9, 0x6d, 0x73, 0xcd, 0xe6, 0x70, 0x7b, 0x3a, 0x35, 0x54, 0x85, 0x3d, 0x0f,
	0xf7, 0x9e, 0x1c, 0x77, 0x5d, 0x3c, 0xe8, 0x7f, 0xee, 0xb9, 0x83, 0x9b, 0xe1, 0xee, 0xc2, 0xd6,
	0x4d, 0x75, 0xfb, 0xa9, 0x08, 0x3e, 0x27, 0x3e, 0xea, 0x78, 0xa6, 0x8e, 0x76, 0xe1, 0xce, 0x0c,
	0xfa, 0xd9, 0x29, 0x76, 0x4d, 0xa3, 0x52, 0x85, 0x8d, 0xa9, 0x29, 0x98, 0x6d, 0xb8, 0xfd, 0x18,
	0x4a, 0xf9, 0x68, 0xa1, 0x1d, 0x40, 0x7e, 0xbf, 0xdd, 0x3f, 0xf5, 0x67, 0x78, 0x20, 0xd8, 0x54,
	0x72, 0xdf, 0xed, 0x9c, 0x62, 0xb7, 0x6b, 0x6a, 0x68, 0x1b, 0xcc, 0x6b, 0xac, 0x92, 0xea, 0xf6,
	0x6f, 0x1a, 0x58, 0x73, 0x7d, 0x65, 0x8f, 0xe8, 0x85, 0xd8, 0x99, 0x6d, 0x28, 0x8a, 0x69, 0x62,
	0x96, 0xd6, 0x30, 0x0e, 0xd6, 0x71, 0x7e, 0x41, 0x0f, 0xa1, 0x28, 0x26, 0x83, 0x59, 0x7a, 0xc3,
	0xf8, 0xbf, 0xc3, 0x95, 0x5b, 0xa0, 0x0f, 0xa0, 0x9c, 0x2f, 0x03, 0x11, 0xab, 0x63, 0xbc, 0x74,
	0x75, 0x26, 0x68, 0x54, 0x05, 0xc8, 0x77, 0x61, 0x40, 0x43, 0x66, 0x15, 0x24, 0x9f, 0xf5, 0x5c,
	0x72, 0x1c, 0x32, 0xfb, 0x09, 0xd4, 0x3a, 0xf1, 0x28, 0xe2, 0xf3, 0xa9, 0x60, 0xf2, 0xe5, 0x88,
	0x30, 0x2e, 0x76, 0xf6, 0x4c, 0x66, 0x25, 0x0b, 0xb9, 0xb1, 0x24, 0xb0, 0xca, 0x1c, 0x2b, 0xac,
	0xfd, 0x00, 0xea, 0x4b, 0xfd, 0xb2, 0x24, 0x8e, 0x18, 0x11, 0x45, 0x1a, 0x0a, 0x88, 0xf4, 0x5b,
	0xc4, 0xf9, 0xc5, 0xbe, 0x0f, 0x6f, 0x1c, 0x91, 0x79, 0xb3, 0x31, 0x9b, 0xd9, 0x96, 0xf6, 0x60,
	0x7f, 0x31, 0x5c, 0x05, 0x69, 0xc2, 0x9a, 0x7a, 0x48, 0x15, 0xfd, 0xbb, 0x0b, 0xe9, 0xe3, 0x31,
	0xca, 0xfe, 0x41, 0x83, 0xea, 0xc7, 0x94, 0xad, 0x28, 0x88, 0x03, 0x70, 0xfd, 0xf2, 0x2a, 0xaf,
	0x9b, 0xc2, 0xab, 0x37, 0x91, 0xe2, 0x29, 0xc4, 0x54, 0x01, 0xf5, 0x57, 0x28, 0xa0, 0x0f, 0xb5,
	0x65, 0x34, 0x54, 0x6a, 0x2d, 0x28, 0x2b, 0xd2, 0xf9, 0x9c, 0x2d, 0xcd, 0x6d, 0x02, 0x3b, 0xfc,
	0xd5, 0x80, 0xbd, 0x79, 0x8f, 0x7e, 0xfe, 0xc3, 0xa0, 0x1f, 0x35, 0xd8, 0x5d, 0xd2, 0x34, 0x64,
	0x0b, 0xd7, 0xab, 0x27, 0xa5, 0x72, 0x6f, 0x25, 0x26, 0x67, 0x6d, 0xbf, 0xfd, 0xfd, 0x9f, 0xff,
	0xfc, 0xa4, 0xd7, 0x51, 0x55, 0xfc, 0x60, 0xb2, 0xe5, 0x53, 0x9f, 0xde, 0xfd, 0x31, 0x53, 0xf4,
	0x2d, 0x6c, 0x2f, 0xea, 0x2b, 0xaa, 0x8b, 0x18, 0x2b, 0x06, 0xa4, 0xd2, 0x58, 0x0e, 0x50, 0x0c,
	0xde, 0x92, 0x0c, 0x6a, 0x68, 0xff, 0xe6, 0x87, 0x3b, 0x89, 0xdd, 0xfc, 0x9a, 0x86, 0xdf, 0xa0,
	0xef, 0x34, 0xd8, 0x59, 0xdc, 0x00, 0x24, 0xff, 0x9f, 0x95, 0x33, 0x52, 0xb1, 0x57, 0x41, 0x14,
	0x8f, 0xba, 0xe4, 0xb1, 0x87, 0x76, 0x97, 0xf0, 0xf8, 0xc8, 0xf9, 0xfd, 0xaa, 0xa6, 0xfd, 0x71,
	0x55, 0xd3, 0xfe, 0xba, 0xaa, 0x69, 0x3f, 0xff, 0x5d, 0xbb, 0x05, 0x16, 0x8d, 0x1d, 0xc6, 0x83,
	0xe1, 0x17, 0x69, 0xfc, 0x55, 0xfe, 0xc2, 0x3b, 0x41, 0x42, 0x9d, 0xac, 0xf5, 0x4c, 0xcf, 0x5a,
	0x9f, 0x69, 0xcf, 0x4b, 0x52, 0xf6, 0xde, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x2f, 0xe0,
	0xd6, 0x4f, 0x08, 0x00, 0x00,
}

func (m *DiscoveredCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredCluster_Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredCluster_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredCluster_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstDiscoveredAt != nil {
		{
			size, err := m.FirstDiscoveredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProviderType != 0 {
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(m.ProviderType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredCluster_CloudSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredCluster_CloudSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredCluster_CloudSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredClustersFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredClustersFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredClustersFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceIds) > 0 {
		for iNdEx := len(m.SourceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SourceIds[iNdEx])
			copy(dAtA[i:], m.SourceIds[iNdEx])
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.SourceIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Statuses) > 0 {
		dAtA5 := make([]byte, len(m.Statuses)*10)
		var j4 int
		for _, num := range m.Statuses {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Types) > 0 {
		dAtA7 := make([]byte, len(m.Types)*10)
		var j6 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountDiscoveredClustersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountDiscoveredClustersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountDiscoveredClustersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountDiscoveredClustersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountDiscoveredClustersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountDiscoveredClustersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDiscoveredClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDiscoveredClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDiscoveredClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDiscoveredClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDiscoveredClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDiscoveredClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDiscoveredClustersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiscoveredClustersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiscoveredClustersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDiscoveredClustersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiscoveredClustersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiscoveredClustersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscoveredClusterService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscoveredClusterService(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscoveredClusterService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscoveredCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDiscoveredClusterService(uint64(m.Status))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoveredCluster_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDiscoveredClusterService(uint64(m.Type))
	}
	if m.ProviderType != 0 {
		n += 1 + sovDiscoveredClusterService(uint64(m.ProviderType))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.FirstDiscoveredAt != nil {
		l = m.FirstDiscoveredAt.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoveredCluster_CloudSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoveredClustersFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovDiscoveredClusterService(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovDiscoveredClusterService(uint64(e))
		}
		n += 1 + sovDiscoveredClusterService(uint64(l)) + l
	}
	if len(m.Statuses) > 0 {
		l = 0
		for _, e := range m.Statuses {
			l += sovDiscoveredClusterService(uint64(e))
		}
		n += 1 + sovDiscoveredClusterService(uint64(l)) + l
	}
	if len(m.SourceIds) > 0 {
		for _, s := range m.SourceIds {
			l = len(s)
			n += 1 + l + sovDiscoveredClusterService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountDiscoveredClustersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountDiscoveredClustersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDiscoveredClusterService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDiscoveredClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDiscoveredClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDiscoveredClustersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovDiscoveredClusterService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDiscoveredClustersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovDiscoveredClusterService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDiscoveredClusterService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscoveredClusterService(x uint64) (n int) {
	return sovDiscoveredClusterService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiscoveredCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DiscoveredCluster_Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DiscoveredCluster_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &DiscoveredCluster_CloudSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredCluster_Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DiscoveredCluster_Metadata_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderType", wireType)
			}
			m.ProviderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderType |= DiscoveredCluster_Metadata_ProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDiscoveredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstDiscoveredAt == nil {
				m.FirstDiscoveredAt = &types.Timestamp{}
			}
			if err := m.FirstDiscoveredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredCluster_CloudSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredClustersFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredClustersFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredClustersFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v DiscoveredCluster_Metadata_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiscoveredClusterService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DiscoveredCluster_Metadata_Type(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiscoveredClusterService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDiscoveredClusterService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDiscoveredClusterService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]DiscoveredCluster_Metadata_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DiscoveredCluster_Metadata_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiscoveredClusterService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DiscoveredCluster_Metadata_Type(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 3:
			if wireType == 0 {
				var v DiscoveredCluster_Status
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiscoveredClusterService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DiscoveredCluster_Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Statuses = append(m.Statuses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiscoveredClusterService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDiscoveredClusterService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDiscoveredClusterService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Statuses) == 0 {
					m.Statuses = make([]DiscoveredCluster_Status, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DiscoveredCluster_Status
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiscoveredClusterService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DiscoveredCluster_Status(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Statuses = append(m.Statuses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceIds = append(m.SourceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountDiscoveredClustersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountDiscoveredClustersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountDiscoveredClustersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &DiscoveredClustersFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountDiscoveredClustersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountDiscoveredClustersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountDiscoveredClustersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDiscoveredClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDiscoveredClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDiscoveredClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDiscoveredClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDiscoveredClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDiscoveredClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &DiscoveredCluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiscoveredClustersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiscoveredClustersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiscoveredClustersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &DiscoveredClustersFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiscoveredClustersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiscoveredClustersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiscoveredClustersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &DiscoveredCluster{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveredClusterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiscoveredClusterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscoveredClusterService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscoveredClusterService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveredClusterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscoveredClusterService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiscoveredClusterService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiscoveredClusterService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiscoveredClusterService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscoveredClusterService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiscoveredClusterService = fmt.Errorf("proto: unexpected end of group")
)
