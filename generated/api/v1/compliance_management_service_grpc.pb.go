// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/compliance_management_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComplianceManagementService_GetRecentRuns_FullMethodName  = "/v1.ComplianceManagementService/GetRecentRuns"
	ComplianceManagementService_TriggerRuns_FullMethodName    = "/v1.ComplianceManagementService/TriggerRuns"
	ComplianceManagementService_GetRunStatuses_FullMethodName = "/v1.ComplianceManagementService/GetRunStatuses"
)

// ComplianceManagementServiceClient is the client API for ComplianceManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplianceManagementServiceClient interface {
	GetRecentRuns(ctx context.Context, in *GetRecentComplianceRunsRequest, opts ...grpc.CallOption) (*GetRecentComplianceRunsResponse, error)
	TriggerRuns(ctx context.Context, in *TriggerComplianceRunsRequest, opts ...grpc.CallOption) (*TriggerComplianceRunsResponse, error)
	GetRunStatuses(ctx context.Context, in *GetComplianceRunStatusesRequest, opts ...grpc.CallOption) (*GetComplianceRunStatusesResponse, error)
}

type complianceManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceManagementServiceClient(cc grpc.ClientConnInterface) ComplianceManagementServiceClient {
	return &complianceManagementServiceClient{cc}
}

func (c *complianceManagementServiceClient) GetRecentRuns(ctx context.Context, in *GetRecentComplianceRunsRequest, opts ...grpc.CallOption) (*GetRecentComplianceRunsResponse, error) {
	out := new(GetRecentComplianceRunsResponse)
	err := c.cc.Invoke(ctx, ComplianceManagementService_GetRecentRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceManagementServiceClient) TriggerRuns(ctx context.Context, in *TriggerComplianceRunsRequest, opts ...grpc.CallOption) (*TriggerComplianceRunsResponse, error) {
	out := new(TriggerComplianceRunsResponse)
	err := c.cc.Invoke(ctx, ComplianceManagementService_TriggerRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceManagementServiceClient) GetRunStatuses(ctx context.Context, in *GetComplianceRunStatusesRequest, opts ...grpc.CallOption) (*GetComplianceRunStatusesResponse, error) {
	out := new(GetComplianceRunStatusesResponse)
	err := c.cc.Invoke(ctx, ComplianceManagementService_GetRunStatuses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceManagementServiceServer is the server API for ComplianceManagementService service.
// All implementations should embed UnimplementedComplianceManagementServiceServer
// for forward compatibility
type ComplianceManagementServiceServer interface {
	GetRecentRuns(context.Context, *GetRecentComplianceRunsRequest) (*GetRecentComplianceRunsResponse, error)
	TriggerRuns(context.Context, *TriggerComplianceRunsRequest) (*TriggerComplianceRunsResponse, error)
	GetRunStatuses(context.Context, *GetComplianceRunStatusesRequest) (*GetComplianceRunStatusesResponse, error)
}

// UnimplementedComplianceManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedComplianceManagementServiceServer struct {
}

func (UnimplementedComplianceManagementServiceServer) GetRecentRuns(context.Context, *GetRecentComplianceRunsRequest) (*GetRecentComplianceRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentRuns not implemented")
}
func (UnimplementedComplianceManagementServiceServer) TriggerRuns(context.Context, *TriggerComplianceRunsRequest) (*TriggerComplianceRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRuns not implemented")
}
func (UnimplementedComplianceManagementServiceServer) GetRunStatuses(context.Context, *GetComplianceRunStatusesRequest) (*GetComplianceRunStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunStatuses not implemented")
}

// UnsafeComplianceManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceManagementServiceServer will
// result in compilation errors.
type UnsafeComplianceManagementServiceServer interface {
	mustEmbedUnimplementedComplianceManagementServiceServer()
}

func RegisterComplianceManagementServiceServer(s grpc.ServiceRegistrar, srv ComplianceManagementServiceServer) {
	s.RegisterService(&ComplianceManagementService_ServiceDesc, srv)
}

func _ComplianceManagementService_GetRecentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentComplianceRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceManagementServiceServer).GetRecentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceManagementService_GetRecentRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceManagementServiceServer).GetRecentRuns(ctx, req.(*GetRecentComplianceRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceManagementService_TriggerRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerComplianceRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceManagementServiceServer).TriggerRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceManagementService_TriggerRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceManagementServiceServer).TriggerRuns(ctx, req.(*TriggerComplianceRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceManagementService_GetRunStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceRunStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceManagementServiceServer).GetRunStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceManagementService_GetRunStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceManagementServiceServer).GetRunStatuses(ctx, req.(*GetComplianceRunStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceManagementService_ServiceDesc is the grpc.ServiceDesc for ComplianceManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ComplianceManagementService",
	HandlerType: (*ComplianceManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecentRuns",
			Handler:    _ComplianceManagementService_GetRecentRuns_Handler,
		},
		{
			MethodName: "TriggerRuns",
			Handler:    _ComplianceManagementService_TriggerRuns_Handler,
		},
		{
			MethodName: "GetRunStatuses",
			Handler:    _ComplianceManagementService_GetRunStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/compliance_management_service.proto",
}
