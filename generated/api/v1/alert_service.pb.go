// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/alert_service.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_CREATED Type = 0
	Type_REMOVED Type = 1
)

var Type_name = map[int32]string{
	0: "CREATED",
	1: "REMOVED",
}

var Type_value = map[string]int32{
	"CREATED": 0,
	"REMOVED": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{0}
}

type GetAlertsCountsRequest_RequestGroup int32

const (
	GetAlertsCountsRequest_UNSET    GetAlertsCountsRequest_RequestGroup = 0
	GetAlertsCountsRequest_CATEGORY GetAlertsCountsRequest_RequestGroup = 1
	GetAlertsCountsRequest_CLUSTER  GetAlertsCountsRequest_RequestGroup = 2
)

var GetAlertsCountsRequest_RequestGroup_name = map[int32]string{
	0: "UNSET",
	1: "CATEGORY",
	2: "CLUSTER",
}

var GetAlertsCountsRequest_RequestGroup_value = map[string]int32{
	"UNSET":    0,
	"CATEGORY": 1,
	"CLUSTER":  2,
}

func (x GetAlertsCountsRequest_RequestGroup) String() string {
	return proto.EnumName(GetAlertsCountsRequest_RequestGroup_name, int32(x))
}

func (GetAlertsCountsRequest_RequestGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{9, 0}
}

type CountAlertsResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountAlertsResponse) Reset()         { *m = CountAlertsResponse{} }
func (m *CountAlertsResponse) String() string { return proto.CompactTextString(m) }
func (*CountAlertsResponse) ProtoMessage()    {}
func (*CountAlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{0}
}
func (m *CountAlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountAlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountAlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountAlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountAlertsResponse.Merge(m, src)
}
func (m *CountAlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountAlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountAlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountAlertsResponse proto.InternalMessageInfo

func (m *CountAlertsResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountAlertsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountAlertsResponse) Clone() *CountAlertsResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountAlertsResponse)
	*cloned = *m

	return cloned
}

type ListAlertsRequest struct {
	Query                string      `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,11,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListAlertsRequest) Reset()         { *m = ListAlertsRequest{} }
func (m *ListAlertsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAlertsRequest) ProtoMessage()    {}
func (*ListAlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{1}
}
func (m *ListAlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertsRequest.Merge(m, src)
}
func (m *ListAlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertsRequest proto.InternalMessageInfo

func (m *ListAlertsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ListAlertsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListAlertsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListAlertsRequest) Clone() *ListAlertsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListAlertsRequest)
	*cloned = *m

	cloned.Pagination = m.Pagination.Clone()
	return cloned
}

type ResolveAlertRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Whitelist            bool     `protobuf:"varint,2,opt,name=whitelist,proto3" json:"whitelist,omitempty"` // Deprecated: Do not use.
	AddToBaseline        bool     `protobuf:"varint,3,opt,name=add_to_baseline,json=addToBaseline,proto3" json:"add_to_baseline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveAlertRequest) Reset()         { *m = ResolveAlertRequest{} }
func (m *ResolveAlertRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveAlertRequest) ProtoMessage()    {}
func (*ResolveAlertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{2}
}
func (m *ResolveAlertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveAlertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveAlertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveAlertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveAlertRequest.Merge(m, src)
}
func (m *ResolveAlertRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveAlertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveAlertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveAlertRequest proto.InternalMessageInfo

func (m *ResolveAlertRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Deprecated: Do not use.
func (m *ResolveAlertRequest) GetWhitelist() bool {
	if m != nil {
		return m.Whitelist
	}
	return false
}

func (m *ResolveAlertRequest) GetAddToBaseline() bool {
	if m != nil {
		return m.AddToBaseline
	}
	return false
}

func (m *ResolveAlertRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResolveAlertRequest) Clone() *ResolveAlertRequest {
	if m == nil {
		return nil
	}
	cloned := new(ResolveAlertRequest)
	*cloned = *m

	return cloned
}

type ResolveAlertsRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveAlertsRequest) Reset()         { *m = ResolveAlertsRequest{} }
func (m *ResolveAlertsRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveAlertsRequest) ProtoMessage()    {}
func (*ResolveAlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{3}
}
func (m *ResolveAlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveAlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveAlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveAlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveAlertsRequest.Merge(m, src)
}
func (m *ResolveAlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveAlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveAlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveAlertsRequest proto.InternalMessageInfo

func (m *ResolveAlertsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ResolveAlertsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ResolveAlertsRequest) Clone() *ResolveAlertsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ResolveAlertsRequest)
	*cloned = *m

	return cloned
}

type SnoozeAlertRequest struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SnoozeTill           *types.Timestamp `protobuf:"bytes,2,opt,name=snooze_till,json=snoozeTill,proto3" json:"snooze_till,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SnoozeAlertRequest) Reset()         { *m = SnoozeAlertRequest{} }
func (m *SnoozeAlertRequest) String() string { return proto.CompactTextString(m) }
func (*SnoozeAlertRequest) ProtoMessage()    {}
func (*SnoozeAlertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{4}
}
func (m *SnoozeAlertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnoozeAlertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnoozeAlertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnoozeAlertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnoozeAlertRequest.Merge(m, src)
}
func (m *SnoozeAlertRequest) XXX_Size() int {
	return m.Size()
}
func (m *SnoozeAlertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnoozeAlertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnoozeAlertRequest proto.InternalMessageInfo

func (m *SnoozeAlertRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SnoozeAlertRequest) GetSnoozeTill() *types.Timestamp {
	if m != nil {
		return m.SnoozeTill
	}
	return nil
}

func (m *SnoozeAlertRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SnoozeAlertRequest) Clone() *SnoozeAlertRequest {
	if m == nil {
		return nil
	}
	cloned := new(SnoozeAlertRequest)
	*cloned = *m

	cloned.SnoozeTill = m.SnoozeTill.Clone()
	return cloned
}

type ListAlertsResponse struct {
	Alerts               []*storage.ListAlert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListAlertsResponse) Reset()         { *m = ListAlertsResponse{} }
func (m *ListAlertsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAlertsResponse) ProtoMessage()    {}
func (*ListAlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{5}
}
func (m *ListAlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertsResponse.Merge(m, src)
}
func (m *ListAlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertsResponse proto.InternalMessageInfo

func (m *ListAlertsResponse) GetAlerts() []*storage.ListAlert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *ListAlertsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListAlertsResponse) Clone() *ListAlertsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListAlertsResponse)
	*cloned = *m

	if m.Alerts != nil {
		cloned.Alerts = make([]*storage.ListAlert, len(m.Alerts))
		for idx, v := range m.Alerts {
			cloned.Alerts[idx] = v.Clone()
		}
	}
	return cloned
}

type DeleteAlertsRequest struct {
	Query                *RawQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Confirm              bool      `protobuf:"varint,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteAlertsRequest) Reset()         { *m = DeleteAlertsRequest{} }
func (m *DeleteAlertsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAlertsRequest) ProtoMessage()    {}
func (*DeleteAlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{6}
}
func (m *DeleteAlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAlertsRequest.Merge(m, src)
}
func (m *DeleteAlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAlertsRequest proto.InternalMessageInfo

func (m *DeleteAlertsRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *DeleteAlertsRequest) GetConfirm() bool {
	if m != nil {
		return m.Confirm
	}
	return false
}

func (m *DeleteAlertsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteAlertsRequest) Clone() *DeleteAlertsRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteAlertsRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

type DeleteAlertsResponse struct {
	NumDeleted           uint32   `protobuf:"varint,1,opt,name=num_deleted,json=numDeleted,proto3" json:"num_deleted,omitempty"`
	DryRun               bool     `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAlertsResponse) Reset()         { *m = DeleteAlertsResponse{} }
func (m *DeleteAlertsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAlertsResponse) ProtoMessage()    {}
func (*DeleteAlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{7}
}
func (m *DeleteAlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAlertsResponse.Merge(m, src)
}
func (m *DeleteAlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAlertsResponse proto.InternalMessageInfo

func (m *DeleteAlertsResponse) GetNumDeleted() uint32 {
	if m != nil {
		return m.NumDeleted
	}
	return 0
}

func (m *DeleteAlertsResponse) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *DeleteAlertsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteAlertsResponse) Clone() *DeleteAlertsResponse {
	if m == nil {
		return nil
	}
	cloned := new(DeleteAlertsResponse)
	*cloned = *m

	return cloned
}

type GetAlertsGroupResponse struct {
	AlertsByPolicies     []*GetAlertsGroupResponse_PolicyGroup `protobuf:"bytes,1,rep,name=alerts_by_policies,json=alertsByPolicies,proto3" json:"alerts_by_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetAlertsGroupResponse) Reset()         { *m = GetAlertsGroupResponse{} }
func (m *GetAlertsGroupResponse) String() string { return proto.CompactTextString(m) }
func (*GetAlertsGroupResponse) ProtoMessage()    {}
func (*GetAlertsGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{8}
}
func (m *GetAlertsGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsGroupResponse.Merge(m, src)
}
func (m *GetAlertsGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsGroupResponse proto.InternalMessageInfo

func (m *GetAlertsGroupResponse) GetAlertsByPolicies() []*GetAlertsGroupResponse_PolicyGroup {
	if m != nil {
		return m.AlertsByPolicies
	}
	return nil
}

func (m *GetAlertsGroupResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsGroupResponse) Clone() *GetAlertsGroupResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsGroupResponse)
	*cloned = *m

	if m.AlertsByPolicies != nil {
		cloned.AlertsByPolicies = make([]*GetAlertsGroupResponse_PolicyGroup, len(m.AlertsByPolicies))
		for idx, v := range m.AlertsByPolicies {
			cloned.AlertsByPolicies[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAlertsGroupResponse_PolicyGroup struct {
	Policy               *storage.ListAlertPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	NumAlerts            int64                    `protobuf:"varint,2,opt,name=num_alerts,json=numAlerts,proto3" json:"num_alerts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetAlertsGroupResponse_PolicyGroup) Reset()         { *m = GetAlertsGroupResponse_PolicyGroup{} }
func (m *GetAlertsGroupResponse_PolicyGroup) String() string { return proto.CompactTextString(m) }
func (*GetAlertsGroupResponse_PolicyGroup) ProtoMessage()    {}
func (*GetAlertsGroupResponse_PolicyGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{8, 0}
}
func (m *GetAlertsGroupResponse_PolicyGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsGroupResponse_PolicyGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsGroupResponse_PolicyGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsGroupResponse_PolicyGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsGroupResponse_PolicyGroup.Merge(m, src)
}
func (m *GetAlertsGroupResponse_PolicyGroup) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsGroupResponse_PolicyGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsGroupResponse_PolicyGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsGroupResponse_PolicyGroup proto.InternalMessageInfo

func (m *GetAlertsGroupResponse_PolicyGroup) GetPolicy() *storage.ListAlertPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *GetAlertsGroupResponse_PolicyGroup) GetNumAlerts() int64 {
	if m != nil {
		return m.NumAlerts
	}
	return 0
}

func (m *GetAlertsGroupResponse_PolicyGroup) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsGroupResponse_PolicyGroup) Clone() *GetAlertsGroupResponse_PolicyGroup {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsGroupResponse_PolicyGroup)
	*cloned = *m

	cloned.Policy = m.Policy.Clone()
	return cloned
}

type GetAlertsCountsRequest struct {
	Request              *ListAlertsRequest                  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	GroupBy              GetAlertsCountsRequest_RequestGroup `protobuf:"varint,2,opt,name=group_by,json=groupBy,proto3,enum=v1.GetAlertsCountsRequest_RequestGroup" json:"group_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GetAlertsCountsRequest) Reset()         { *m = GetAlertsCountsRequest{} }
func (m *GetAlertsCountsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAlertsCountsRequest) ProtoMessage()    {}
func (*GetAlertsCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{9}
}
func (m *GetAlertsCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsCountsRequest.Merge(m, src)
}
func (m *GetAlertsCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsCountsRequest proto.InternalMessageInfo

func (m *GetAlertsCountsRequest) GetRequest() *ListAlertsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GetAlertsCountsRequest) GetGroupBy() GetAlertsCountsRequest_RequestGroup {
	if m != nil {
		return m.GroupBy
	}
	return GetAlertsCountsRequest_UNSET
}

func (m *GetAlertsCountsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsCountsRequest) Clone() *GetAlertsCountsRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsCountsRequest)
	*cloned = *m

	cloned.Request = m.Request.Clone()
	return cloned
}

type GetAlertsCountsResponse struct {
	Groups               []*GetAlertsCountsResponse_AlertGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GetAlertsCountsResponse) Reset()         { *m = GetAlertsCountsResponse{} }
func (m *GetAlertsCountsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAlertsCountsResponse) ProtoMessage()    {}
func (*GetAlertsCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{10}
}
func (m *GetAlertsCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsCountsResponse.Merge(m, src)
}
func (m *GetAlertsCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsCountsResponse proto.InternalMessageInfo

func (m *GetAlertsCountsResponse) GetGroups() []*GetAlertsCountsResponse_AlertGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GetAlertsCountsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsCountsResponse) Clone() *GetAlertsCountsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsCountsResponse)
	*cloned = *m

	if m.Groups != nil {
		cloned.Groups = make([]*GetAlertsCountsResponse_AlertGroup, len(m.Groups))
		for idx, v := range m.Groups {
			cloned.Groups[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAlertsCountsResponse_AlertGroup struct {
	Group                string                                            `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Counts               []*GetAlertsCountsResponse_AlertGroup_AlertCounts `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *GetAlertsCountsResponse_AlertGroup) Reset()         { *m = GetAlertsCountsResponse_AlertGroup{} }
func (m *GetAlertsCountsResponse_AlertGroup) String() string { return proto.CompactTextString(m) }
func (*GetAlertsCountsResponse_AlertGroup) ProtoMessage()    {}
func (*GetAlertsCountsResponse_AlertGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{10, 0}
}
func (m *GetAlertsCountsResponse_AlertGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsCountsResponse_AlertGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsCountsResponse_AlertGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsCountsResponse_AlertGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsCountsResponse_AlertGroup.Merge(m, src)
}
func (m *GetAlertsCountsResponse_AlertGroup) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsCountsResponse_AlertGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsCountsResponse_AlertGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsCountsResponse_AlertGroup proto.InternalMessageInfo

func (m *GetAlertsCountsResponse_AlertGroup) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GetAlertsCountsResponse_AlertGroup) GetCounts() []*GetAlertsCountsResponse_AlertGroup_AlertCounts {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *GetAlertsCountsResponse_AlertGroup) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsCountsResponse_AlertGroup) Clone() *GetAlertsCountsResponse_AlertGroup {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsCountsResponse_AlertGroup)
	*cloned = *m

	if m.Counts != nil {
		cloned.Counts = make([]*GetAlertsCountsResponse_AlertGroup_AlertCounts, len(m.Counts))
		for idx, v := range m.Counts {
			cloned.Counts[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAlertsCountsResponse_AlertGroup_AlertCounts struct {
	Severity             storage.Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=storage.Severity" json:"severity,omitempty"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) Reset() {
	*m = GetAlertsCountsResponse_AlertGroup_AlertCounts{}
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) String() string {
	return proto.CompactTextString(m)
}
func (*GetAlertsCountsResponse_AlertGroup_AlertCounts) ProtoMessage() {}
func (*GetAlertsCountsResponse_AlertGroup_AlertCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{10, 0, 0}
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertsCountsResponse_AlertGroup_AlertCounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertsCountsResponse_AlertGroup_AlertCounts.Merge(m, src)
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertsCountsResponse_AlertGroup_AlertCounts.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertsCountsResponse_AlertGroup_AlertCounts proto.InternalMessageInfo

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) GetSeverity() storage.Severity {
	if m != nil {
		return m.Severity
	}
	return storage.Severity_UNSET_SEVERITY
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) Clone() *GetAlertsCountsResponse_AlertGroup_AlertCounts {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertsCountsResponse_AlertGroup_AlertCounts)
	*cloned = *m

	return cloned
}

type AlertEvent struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Type                 Type     `protobuf:"varint,2,opt,name=type,proto3,enum=v1.Type" json:"type,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlertEvent) Reset()         { *m = AlertEvent{} }
func (m *AlertEvent) String() string { return proto.CompactTextString(m) }
func (*AlertEvent) ProtoMessage()    {}
func (*AlertEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{11}
}
func (m *AlertEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertEvent.Merge(m, src)
}
func (m *AlertEvent) XXX_Size() int {
	return m.Size()
}
func (m *AlertEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AlertEvent proto.InternalMessageInfo

func (m *AlertEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *AlertEvent) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_CREATED
}

func (m *AlertEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AlertEvent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AlertEvent) Clone() *AlertEvent {
	if m == nil {
		return nil
	}
	cloned := new(AlertEvent)
	*cloned = *m

	return cloned
}

type GetAlertTimeseriesResponse struct {
	Clusters             []*GetAlertTimeseriesResponse_ClusterAlerts `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *GetAlertTimeseriesResponse) Reset()         { *m = GetAlertTimeseriesResponse{} }
func (m *GetAlertTimeseriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAlertTimeseriesResponse) ProtoMessage()    {}
func (*GetAlertTimeseriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{12}
}
func (m *GetAlertTimeseriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertTimeseriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertTimeseriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertTimeseriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertTimeseriesResponse.Merge(m, src)
}
func (m *GetAlertTimeseriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertTimeseriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertTimeseriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertTimeseriesResponse proto.InternalMessageInfo

func (m *GetAlertTimeseriesResponse) GetClusters() []*GetAlertTimeseriesResponse_ClusterAlerts {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *GetAlertTimeseriesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertTimeseriesResponse) Clone() *GetAlertTimeseriesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertTimeseriesResponse)
	*cloned = *m

	if m.Clusters != nil {
		cloned.Clusters = make([]*GetAlertTimeseriesResponse_ClusterAlerts, len(m.Clusters))
		for idx, v := range m.Clusters {
			cloned.Clusters[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAlertTimeseriesResponse_ClusterAlerts struct {
	Cluster              string                                                  `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Severities           []*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents `protobuf:"bytes,2,rep,name=severities,proto3" json:"severities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) Reset() {
	*m = GetAlertTimeseriesResponse_ClusterAlerts{}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) String() string { return proto.CompactTextString(m) }
func (*GetAlertTimeseriesResponse_ClusterAlerts) ProtoMessage()    {}
func (*GetAlertTimeseriesResponse_ClusterAlerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{12, 0}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts.Merge(m, src)
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts proto.InternalMessageInfo

func (m *GetAlertTimeseriesResponse_ClusterAlerts) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) GetSeverities() []*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents {
	if m != nil {
		return m.Severities
	}
	return nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) Clone() *GetAlertTimeseriesResponse_ClusterAlerts {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertTimeseriesResponse_ClusterAlerts)
	*cloned = *m

	if m.Severities != nil {
		cloned.Severities = make([]*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents, len(m.Severities))
		for idx, v := range m.Severities {
			cloned.Severities[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents struct {
	Severity             storage.Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=storage.Severity" json:"severity,omitempty"`
	Events               []*AlertEvent    `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Reset() {
	*m = GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents{}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) String() string {
	return proto.CompactTextString(m)
}
func (*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) ProtoMessage() {}
func (*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_2056301d4364d89a, []int{12, 0, 0}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents.Merge(m, src)
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents proto.InternalMessageInfo

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) GetSeverity() storage.Severity {
	if m != nil {
		return m.Severity
	}
	return storage.Severity_UNSET_SEVERITY
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) GetEvents() []*AlertEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Clone() *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents {
	if m == nil {
		return nil
	}
	cloned := new(GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents)
	*cloned = *m

	if m.Events != nil {
		cloned.Events = make([]*AlertEvent, len(m.Events))
		for idx, v := range m.Events {
			cloned.Events[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v1.Type", Type_name, Type_value)
	proto.RegisterEnum("v1.GetAlertsCountsRequest_RequestGroup", GetAlertsCountsRequest_RequestGroup_name, GetAlertsCountsRequest_RequestGroup_value)
	proto.RegisterType((*CountAlertsResponse)(nil), "v1.CountAlertsResponse")
	proto.RegisterType((*ListAlertsRequest)(nil), "v1.ListAlertsRequest")
	proto.RegisterType((*ResolveAlertRequest)(nil), "v1.ResolveAlertRequest")
	proto.RegisterType((*ResolveAlertsRequest)(nil), "v1.ResolveAlertsRequest")
	proto.RegisterType((*SnoozeAlertRequest)(nil), "v1.SnoozeAlertRequest")
	proto.RegisterType((*ListAlertsResponse)(nil), "v1.ListAlertsResponse")
	proto.RegisterType((*DeleteAlertsRequest)(nil), "v1.DeleteAlertsRequest")
	proto.RegisterType((*DeleteAlertsResponse)(nil), "v1.DeleteAlertsResponse")
	proto.RegisterType((*GetAlertsGroupResponse)(nil), "v1.GetAlertsGroupResponse")
	proto.RegisterType((*GetAlertsGroupResponse_PolicyGroup)(nil), "v1.GetAlertsGroupResponse.PolicyGroup")
	proto.RegisterType((*GetAlertsCountsRequest)(nil), "v1.GetAlertsCountsRequest")
	proto.RegisterType((*GetAlertsCountsResponse)(nil), "v1.GetAlertsCountsResponse")
	proto.RegisterType((*GetAlertsCountsResponse_AlertGroup)(nil), "v1.GetAlertsCountsResponse.AlertGroup")
	proto.RegisterType((*GetAlertsCountsResponse_AlertGroup_AlertCounts)(nil), "v1.GetAlertsCountsResponse.AlertGroup.AlertCounts")
	proto.RegisterType((*AlertEvent)(nil), "v1.AlertEvent")
	proto.RegisterType((*GetAlertTimeseriesResponse)(nil), "v1.GetAlertTimeseriesResponse")
	proto.RegisterType((*GetAlertTimeseriesResponse_ClusterAlerts)(nil), "v1.GetAlertTimeseriesResponse.ClusterAlerts")
	proto.RegisterType((*GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents)(nil), "v1.GetAlertTimeseriesResponse.ClusterAlerts.AlertEvents")
}

func init() { proto.RegisterFile("api/v1/alert_service.proto", fileDescriptor_2056301d4364d89a) }

var fileDescriptor_2056301d4364d89a = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4b, 0x6f, 0xe3, 0x54,
	0x14, 0x1e, 0xa7, 0x6d, 0x1e, 0xc7, 0x69, 0x9a, 0xde, 0x96, 0xc6, 0xb8, 0xaf, 0x60, 0x89, 0x52,
	0x95, 0xc1, 0xa1, 0x81, 0x05, 0x02, 0x09, 0xd1, 0xb4, 0x51, 0x61, 0x34, 0x33, 0x2d, 0x37, 0xe9,
	0x68, 0x60, 0x41, 0xe4, 0xc6, 0xb7, 0x1d, 0x0b, 0x3f, 0x32, 0xbe, 0x76, 0x06, 0x83, 0xd8, 0xf0,
	0x17, 0xd8, 0xc0, 0x86, 0x1f, 0x03, 0x1b, 0x56, 0x08, 0xc1, 0x1f, 0x40, 0x85, 0x0d, 0xff, 0x02,
	0xdd, 0x87, 0x13, 0xe7, 0xd1, 0x8a, 0x59, 0x25, 0xf7, 0x9c, 0xef, 0x7e, 0xe7, 0x79, 0x8f, 0x0f,
	0xe8, 0xd6, 0xc0, 0x69, 0x0c, 0x0f, 0x1b, 0x96, 0x4b, 0xc2, 0xa8, 0x47, 0x49, 0x38, 0x74, 0xfa,
	0xc4, 0x1c, 0x84, 0x41, 0x14, 0xa0, 0xdc, 0xf0, 0x50, 0x5f, 0x93, 0xfa, 0x7e, 0xe0, 0x79, 0x81,
	0x2f, 0x14, 0x3a, 0x92, 0x42, 0xe2, 0x0d, 0xa2, 0x44, 0xca, 0x6a, 0x52, 0x36, 0xb0, 0xae, 0x1d,
	0xdf, 0x8a, 0x9c, 0x11, 0x78, 0x53, 0x2a, 0x28, 0xb1, 0xc2, 0xfe, 0xb3, 0x49, 0x13, 0xfa, 0xd6,
	0x75, 0x10, 0x5c, 0xbb, 0xa4, 0xc1, 0x30, 0x96, 0xef, 0x07, 0x11, 0xbf, 0x49, 0xa5, 0x76, 0x57,
	0x6a, 0xf9, 0xe9, 0x32, 0xbe, 0x6a, 0x44, 0x8e, 0x47, 0x68, 0x64, 0x79, 0x03, 0x09, 0x58, 0xa3,
	0x51, 0x10, 0x5a, 0xd7, 0x44, 0xb8, 0x2f, 0x85, 0xeb, 0xa9, 0x70, 0x10, 0xb8, 0x4e, 0x5f, 0xfa,
	0x67, 0xbc, 0x09, 0x6b, 0xc7, 0x41, 0xec, 0x47, 0x47, 0x0c, 0x49, 0x31, 0xa1, 0x83, 0xc0, 0xa7,
	0x04, 0xad, 0xc3, 0x52, 0x9f, 0x89, 0x35, 0xa5, 0xae, 0xec, 0x2f, 0x61, 0x71, 0x30, 0x7a, 0xb0,
	0xfa, 0xd0, 0xa1, 0x23, 0xec, 0xf3, 0x98, 0xd0, 0x88, 0x41, 0x9f, 0xc7, 0x24, 0x4c, 0x34, 0xa8,
	0x2b, 0xfb, 0x25, 0x2c, 0x0e, 0xc8, 0x04, 0x18, 0x87, 0xac, 0xa9, 0x75, 0x65, 0x5f, 0x6d, 0x56,
	0xcc, 0xe1, 0xa1, 0x79, 0x3e, 0x92, 0xe2, 0x0c, 0xe2, 0xc1, 0x62, 0x51, 0xa9, 0x82, 0x11, 0xc0,
	0x1a, 0x26, 0x34, 0x70, 0x87, 0x84, 0xdb, 0x48, 0x4d, 0x54, 0x20, 0xe7, 0xd8, 0xdc, 0x95, 0x12,
	0xce, 0x39, 0x36, 0xaa, 0x43, 0xe9, 0xc5, 0x33, 0x27, 0x22, 0xae, 0x43, 0x23, 0x2d, 0x57, 0x57,
	0xf6, 0x8b, 0xad, 0x9c, 0xa6, 0xe0, 0xb1, 0x10, 0xed, 0xc1, 0x8a, 0x65, 0xdb, 0xbd, 0x28, 0xe8,
	0x5d, 0x5a, 0x94, 0xb8, 0x8e, 0x4f, 0xb4, 0x05, 0x86, 0xc3, 0xcb, 0x96, 0x6d, 0x77, 0x83, 0x96,
	0x14, 0x1a, 0xf7, 0x61, 0x3d, 0x6b, 0x70, 0x36, 0x28, 0x25, 0x13, 0x94, 0x61, 0x01, 0xea, 0xf8,
	0x41, 0xf0, 0xf5, 0xdd, 0xde, 0x7d, 0x00, 0x2a, 0xe5, 0xa8, 0x5e, 0xe4, 0xb8, 0x2e, 0xf7, 0x4f,
	0x6d, 0xea, 0xa6, 0x28, 0x9a, 0x99, 0x16, 0xcd, 0xec, 0xa6, 0x45, 0xc3, 0x20, 0xe0, 0x5d, 0xc7,
	0x75, 0x8d, 0x8f, 0x00, 0x65, 0x53, 0x2c, 0xcb, 0x71, 0x00, 0x79, 0x5e, 0x4a, 0xaa, 0x29, 0xf5,
	0x85, 0x7d, 0xb5, 0x89, 0x4c, 0x59, 0x4c, 0x73, 0x04, 0xc6, 0x12, 0x61, 0x74, 0x60, 0xed, 0x84,
	0xb8, 0x24, 0x9a, 0x8a, 0xc8, 0xc8, 0x46, 0xa4, 0x36, 0xcb, 0xac, 0x16, 0xd8, 0x7a, 0xf1, 0x29,
	0x93, 0xa5, 0x45, 0xd3, 0xa0, 0xd0, 0x0f, 0xfc, 0x2b, 0x27, 0xf4, 0x44, 0x56, 0x71, 0x7a, 0x34,
	0xce, 0x61, 0x7d, 0x92, 0x54, 0x3a, 0xb6, 0x0b, 0xaa, 0x1f, 0x7b, 0x3d, 0x9b, 0xeb, 0x44, 0x12,
	0x96, 0x31, 0xf8, 0xb1, 0x27, 0xd0, 0x36, 0xaa, 0x41, 0xc1, 0x0e, 0x93, 0x5e, 0x18, 0xfb, 0x92,
	0x32, 0x6f, 0x87, 0x09, 0x8e, 0x7d, 0xe3, 0x37, 0x05, 0x36, 0x4e, 0x89, 0x0c, 0xf4, 0x34, 0x0c,
	0xe2, 0xc1, 0x88, 0xb4, 0x0b, 0x48, 0xc4, 0xd2, 0xbb, 0x4c, 0x7a, 0xbc, 0x5b, 0x1d, 0x92, 0x46,
	0xbe, 0xc7, 0xfc, 0x9e, 0x7f, 0xcf, 0x3c, 0xe7, 0x8d, 0x2d, 0x64, 0x55, 0xc1, 0xd0, 0x4a, 0xce,
	0xe5, 0x7d, 0xfd, 0x0b, 0x50, 0x33, 0x00, 0xf4, 0x36, 0xe4, 0xc5, 0x43, 0x90, 0x09, 0xd1, 0x66,
	0x53, 0x2a, 0xe0, 0x58, 0xe2, 0xd0, 0x36, 0xb0, 0xc0, 0x7a, 0xb2, 0x10, 0x2c, 0x9a, 0x05, 0x5c,
	0xf2, 0x63, 0x4f, 0xb8, 0x62, 0xfc, 0x92, 0x0d, 0x88, 0xbf, 0xa9, 0x51, 0xee, 0x1b, 0x50, 0x08,
	0xc5, 0x5f, 0x69, 0xec, 0x15, 0x16, 0xc5, 0xcc, 0x53, 0xc2, 0x29, 0x0a, 0xb5, 0xa0, 0x78, 0xcd,
	0xbc, 0xec, 0x5d, 0x26, 0xdc, 0x50, 0xa5, 0xf9, 0xc6, 0x44, 0xdc, 0x13, 0xf4, 0xa6, 0xfc, 0x15,
	0x81, 0x17, 0xf8, 0xc5, 0x56, 0x62, 0xbc, 0x0b, 0xe5, 0xac, 0x02, 0x95, 0x60, 0xe9, 0xe2, 0x71,
	0xa7, 0xdd, 0xad, 0xde, 0x43, 0x65, 0x28, 0x1e, 0x1f, 0x75, 0xdb, 0xa7, 0x67, 0xf8, 0xb3, 0xaa,
	0x82, 0x54, 0x28, 0x1c, 0x3f, 0xbc, 0xe8, 0x74, 0xdb, 0xb8, 0x9a, 0x33, 0x7e, 0xca, 0x41, 0x6d,
	0xc6, 0x8c, 0xac, 0xcb, 0x87, 0x90, 0xe7, 0xe4, 0xf3, 0x6b, 0x31, 0x09, 0x36, 0xb9, 0x50, 0xb8,
	0x24, 0x6f, 0xe9, 0x3f, 0x2b, 0x00, 0x63, 0x31, 0x7b, 0x63, 0x5c, 0x91, 0xbe, 0x31, 0x7e, 0x40,
	0x0f, 0x20, 0xcf, 0x87, 0x0d, 0xcb, 0x30, 0x33, 0xd2, 0xfc, 0x7f, 0x46, 0xc4, 0x5f, 0xa9, 0x96,
	0x0c, 0x3a, 0x06, 0x35, 0x23, 0x46, 0x6f, 0x41, 0x91, 0x92, 0x21, 0x09, 0x9d, 0x48, 0x14, 0xbd,
	0xd2, 0x5c, 0x1d, 0x15, 0xbd, 0x23, 0x15, 0x78, 0x04, 0x19, 0xcf, 0x40, 0x51, 0x6a, 0x39, 0x03,
	0x1f, 0xcb, 0x18, 0xda, 0x43, 0xe2, 0x47, 0x08, 0xc1, 0x22, 0x1b, 0xbe, 0x9c, 0x6e, 0x01, 0xf3,
	0xff, 0x68, 0x0b, 0x16, 0xa3, 0x64, 0x40, 0x64, 0xe1, 0x8a, 0xcc, 0xff, 0x6e, 0x32, 0x20, 0x98,
	0x4b, 0xe5, 0xb4, 0x58, 0x48, 0xa7, 0x85, 0xf1, 0x47, 0x0e, 0xf4, 0x34, 0x3c, 0x3e, 0x12, 0x48,
	0xe8, 0x90, 0x71, 0xce, 0x3f, 0x86, 0x62, 0xdf, 0x8d, 0x69, 0x44, 0xc2, 0x34, 0xeb, 0xf7, 0xb3,
	0x09, 0x99, 0xbd, 0x61, 0x1e, 0x0b, 0xb8, 0xec, 0xac, 0xd1, 0x6d, 0xfd, 0x5f, 0x05, 0x96, 0x27,
	0x74, 0xfc, 0xb9, 0x0b, 0x81, 0x2c, 0x41, 0x7a, 0x44, 0x4f, 0x01, 0x64, 0x1a, 0xd8, 0xcb, 0x13,
	0x85, 0x78, 0xef, 0x65, 0xec, 0x9a, 0xe3, 0x1c, 0x51, 0x9c, 0xe1, 0xd2, 0x6d, 0x59, 0x12, 0xa1,
	0x7a, 0xd9, 0x92, 0xec, 0x41, 0x9e, 0xf0, 0x8b, 0xd2, 0x27, 0xfe, 0x45, 0x19, 0xf3, 0x61, 0xa9,
	0x3d, 0xa8, 0xc3, 0x22, 0x4b, 0x39, 0x6f, 0x6d, 0xdc, 0x3e, 0xea, 0xb6, 0x4f, 0xaa, 0xf7, 0xd8,
	0x01, 0xb7, 0x1f, 0x9d, 0x3d, 0x69, 0x9f, 0x54, 0x95, 0xe6, 0x8f, 0x05, 0x28, 0xf3, 0x8b, 0x1d,
	0xf1, 0xe1, 0x45, 0x6d, 0x28, 0xa6, 0xc1, 0xa1, 0x2a, 0x1f, 0x8e, 0x84, 0x06, 0x71, 0xd8, 0x27,
	0xad, 0xe4, 0x93, 0x13, 0xbd, 0x32, 0xf2, 0x8a, 0x23, 0x8c, 0xda, 0x77, 0x7f, 0xfe, 0xf3, 0x7d,
	0x6e, 0x15, 0xad, 0x8c, 0x96, 0x04, 0xda, 0xf8, 0xc6, 0xb1, 0xbf, 0x45, 0x8f, 0x40, 0xcd, 0x7c,
	0x4f, 0xd1, 0xc4, 0x98, 0xd5, 0x6b, 0xec, 0x34, 0xe7, 0x73, 0x3b, 0x8f, 0x8e, 0x77, 0x1b, 0x3a,
	0x03, 0x18, 0x8f, 0x09, 0x34, 0x7f, 0x6c, 0xe8, 0x1b, 0xd3, 0x62, 0xc9, 0x8a, 0x38, 0x6b, 0x19,
	0xc1, 0x98, 0x15, 0x5d, 0x41, 0x65, 0x72, 0x7a, 0xde, 0x46, 0xaa, 0xdf, 0x3e, 0x68, 0x8d, 0xd7,
	0x38, 0xf1, 0x26, 0x7a, 0x35, 0x13, 0x3d, 0x8d, 0x3d, 0xcf, 0x0a, 0x93, 0x86, 0x78, 0xeb, 0xc8,
	0x83, 0x95, 0xa9, 0x47, 0x8b, 0xf4, 0xdb, 0x47, 0x98, 0xbe, 0x79, 0xc7, 0x2b, 0xbf, 0xd3, 0x9c,
	0x78, 0xe9, 0x28, 0x04, 0x34, 0xdb, 0x9a, 0xb7, 0x85, 0xb6, 0x73, 0x77, 0x27, 0x1b, 0xaf, 0x73,
	0x7b, 0xbb, 0x68, 0x7b, 0x8e, 0xbd, 0x68, 0xcc, 0xfe, 0x84, 0x0d, 0xd8, 0xf1, 0xee, 0x80, 0x6a,
	0x69, 0xd7, 0x4c, 0xad, 0x2f, 0x7a, 0x89, 0x29, 0xda, 0x6c, 0x29, 0x34, 0x0c, 0x4e, 0xbd, 0xd5,
	0xac, 0x4d, 0xf5, 0x4d, 0x23, 0x14, 0xf7, 0xde, 0x57, 0x0e, 0x50, 0x07, 0x96, 0x27, 0x76, 0x12,
	0xa4, 0x4d, 0x13, 0xd3, 0x39, 0xcc, 0xdb, 0x9c, 0xb9, 0xd6, 0x44, 0x19, 0xe6, 0x09, 0x52, 0x35,
	0xb3, 0xba, 0x20, 0xde, 0x32, 0xb3, 0xbb, 0x4c, 0x96, 0x50, 0x66, 0xbd, 0xb9, 0x31, 0xed, 0xaa,
	0xd8, 0x56, 0x18, 0xe9, 0x05, 0x94, 0xb3, 0x5b, 0x81, 0xc8, 0xc0, 0x9c, 0xe5, 0x43, 0xd7, 0x66,
	0x15, 0x93, 0x3d, 0x7a, 0x90, 0xe9, 0xd1, 0x96, 0xf9, 0xeb, 0xcd, 0x8e, 0xf2, 0xfb, 0xcd, 0x8e,
	0xf2, 0xd7, 0xcd, 0x8e, 0xf2, 0xc3, 0xdf, 0x3b, 0xf7, 0x40, 0x73, 0x02, 0x93, 0x46, 0x56, 0xff,
	0xcb, 0x30, 0xf8, 0x4a, 0x6c, 0x50, 0xa6, 0x35, 0x70, 0xcc, 0xe1, 0xe1, 0xe7, 0xb9, 0xe1, 0xe1,
	0xd3, 0xc5, 0xcb, 0x3c, 0x97, 0xbd, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x5e, 0x1c,
	0x7f, 0xb7, 0x0b, 0x00, 0x00,
}

func (m *CountAlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountAlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *ResolveAlertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveAlertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveAlertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddToBaseline {
		i--
		if m.AddToBaseline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Whitelist {
		i--
		if m.Whitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveAlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveAlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveAlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnoozeAlertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnoozeAlertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnoozeAlertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SnoozeTill != nil {
		{
			size, err := m.SnoozeTill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Confirm {
		i--
		if m.Confirm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NumDeleted != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.NumDeleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlertsByPolicies) > 0 {
		for iNdEx := len(m.AlertsByPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertsByPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsGroupResponse_PolicyGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsGroupResponse_PolicyGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsGroupResponse_PolicyGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumAlerts != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.NumAlerts))
		i--
		dAtA[i] = 0x10
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupBy != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.GroupBy))
		i--
		dAtA[i] = 0x10
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsCountsResponse_AlertGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsCountsResponse_AlertGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsCountsResponse_AlertGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Severity != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlertEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertTimeseriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertTimeseriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertTimeseriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Severities) > 0 {
		for iNdEx := len(m.Severities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Severities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintAlertService(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Severity != 0 {
		i = encodeVarintAlertService(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlertService(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlertService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CountAlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovAlertService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveAlertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.Whitelist {
		n += 2
	}
	if m.AddToBaseline {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveAlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnoozeAlertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.SnoozeTill != nil {
		l = m.SnoozeTill.Size()
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.Confirm {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumDeleted != 0 {
		n += 1 + sovAlertService(uint64(m.NumDeleted))
	}
	if m.DryRun {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlertsByPolicies) > 0 {
		for _, e := range m.AlertsByPolicies {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsGroupResponse_PolicyGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.NumAlerts != 0 {
		n += 1 + sovAlertService(uint64(m.NumAlerts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.GroupBy != 0 {
		n += 1 + sovAlertService(uint64(m.GroupBy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsCountsResponse_AlertGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Severity != 0 {
		n += 1 + sovAlertService(uint64(m.Severity))
	}
	if m.Count != 0 {
		n += 1 + sovAlertService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlertEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovAlertService(uint64(m.Time))
	}
	if m.Type != 0 {
		n += 1 + sovAlertService(uint64(m.Type))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertTimeseriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovAlertService(uint64(l))
	}
	if len(m.Severities) > 0 {
		for _, e := range m.Severities {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Severity != 0 {
		n += 1 + sovAlertService(uint64(m.Severity))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAlertService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlertService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlertService(x uint64) (n int) {
	return sovAlertService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CountAlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveAlertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveAlertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveAlertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Whitelist = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddToBaseline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddToBaseline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveAlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveAlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveAlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnoozeAlertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnoozeAlertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnoozeAlertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnoozeTill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnoozeTill == nil {
				m.SnoozeTill = &types.Timestamp{}
			}
			if err := m.SnoozeTill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, &storage.ListAlert{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirm = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleted", wireType)
			}
			m.NumDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlertsGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlertsGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertsByPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertsByPolicies = append(m.AlertsByPolicies, &GetAlertsGroupResponse_PolicyGroup{})
			if err := m.AlertsByPolicies[len(m.AlertsByPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsGroupResponse_PolicyGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &storage.ListAlertPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAlerts", wireType)
			}
			m.NumAlerts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAlerts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlertsCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlertsCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ListAlertsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			m.GroupBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupBy |= GetAlertsCountsRequest_RequestGroup(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlertsCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlertsCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GetAlertsCountsResponse_AlertGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsCountsResponse_AlertGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &GetAlertsCountsResponse_AlertGroup_AlertCounts{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertsCountsResponse_AlertGroup_AlertCounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertCounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertCounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= storage.Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertTimeseriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlertTimeseriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlertTimeseriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &GetAlertTimeseriesResponse_ClusterAlerts{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterAlerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterAlerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severities = append(m.Severities, &GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents{})
			if err := m.Severities[len(m.Severities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertTimeseriesResponse_ClusterAlerts_AlertEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= storage.Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AlertEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlertService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlertService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlertService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlertService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlertService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlertService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlertService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlertService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlertService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlertService = fmt.Errorf("proto: unexpected end of group")
)
