// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/cloud_source_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CloudSource_Type int32

const (
	CloudSource_UNSPECIFIED   CloudSource_Type = 0
	CloudSource_PALADIN_CLOUD CloudSource_Type = 1
	CloudSource_OCM           CloudSource_Type = 2
)

var CloudSource_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PALADIN_CLOUD",
	2: "OCM",
}

var CloudSource_Type_value = map[string]int32{
	"UNSPECIFIED":   0,
	"PALADIN_CLOUD": 1,
	"OCM":           2,
}

func (x CloudSource_Type) String() string {
	return proto.EnumName(CloudSource_Type_name, int32(x))
}

func (CloudSource_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{0, 0}
}

// CloudSource is an integration which provides a source for discovered
// clusters.
type CloudSource struct {
	Id                  string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                CloudSource_Type `protobuf:"varint,3,opt,name=type,proto3,enum=v1.CloudSource_Type" json:"type,omitempty"`
	SkipTestIntegration bool             `protobuf:"varint,4,opt,name=skip_test_integration,json=skipTestIntegration,proto3" json:"skip_test_integration,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*CloudSource_PaladinCloud
	//	*CloudSource_Ocm
	Config               isCloudSource_Config `protobuf_oneof:"Config"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CloudSource) Reset()         { *m = CloudSource{} }
func (m *CloudSource) String() string { return proto.CompactTextString(m) }
func (*CloudSource) ProtoMessage()    {}
func (*CloudSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{0}
}
func (m *CloudSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudSource.Merge(m, src)
}
func (m *CloudSource) XXX_Size() int {
	return m.Size()
}
func (m *CloudSource) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudSource.DiscardUnknown(m)
}

var xxx_messageInfo_CloudSource proto.InternalMessageInfo

type isCloudSource_Config interface {
	isCloudSource_Config()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isCloudSource_Config
}

type CloudSource_PaladinCloud struct {
	PaladinCloud *PaladinCloudConfig `protobuf:"bytes,5,opt,name=paladin_cloud,json=paladinCloud,proto3,oneof" json:"paladin_cloud,omitempty"`
}
type CloudSource_Ocm struct {
	Ocm *OCMConfig `protobuf:"bytes,6,opt,name=ocm,proto3,oneof" json:"ocm,omitempty"`
}

func (*CloudSource_PaladinCloud) isCloudSource_Config() {}
func (m *CloudSource_PaladinCloud) Clone() isCloudSource_Config {
	if m == nil {
		return nil
	}
	cloned := new(CloudSource_PaladinCloud)
	*cloned = *m

	cloned.PaladinCloud = m.PaladinCloud.Clone()
	return cloned
}
func (*CloudSource_Ocm) isCloudSource_Config() {}
func (m *CloudSource_Ocm) Clone() isCloudSource_Config {
	if m == nil {
		return nil
	}
	cloned := new(CloudSource_Ocm)
	*cloned = *m

	cloned.Ocm = m.Ocm.Clone()
	return cloned
}

func (m *CloudSource) GetConfig() isCloudSource_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CloudSource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloudSource) GetType() CloudSource_Type {
	if m != nil {
		return m.Type
	}
	return CloudSource_UNSPECIFIED
}

func (m *CloudSource) GetSkipTestIntegration() bool {
	if m != nil {
		return m.SkipTestIntegration
	}
	return false
}

func (m *CloudSource) GetPaladinCloud() *PaladinCloudConfig {
	if x, ok := m.GetConfig().(*CloudSource_PaladinCloud); ok {
		return x.PaladinCloud
	}
	return nil
}

func (m *CloudSource) GetOcm() *OCMConfig {
	if x, ok := m.GetConfig().(*CloudSource_Ocm); ok {
		return x.Ocm
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CloudSource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CloudSource_PaladinCloud)(nil),
		(*CloudSource_Ocm)(nil),
	}
}

func (m *CloudSource) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CloudSource) Clone() *CloudSource {
	if m == nil {
		return nil
	}
	cloned := new(CloudSource)
	*cloned = *m

	if m.Config != nil {
		cloned.Config = m.Config.Clone()
	}
	return cloned
}

// PaladinCloudConfig provides information required to fetch discovered
// clusters from Paladin Cloud.
type PaladinCloudConfig struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" scrub:"always"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaladinCloudConfig) Reset()         { *m = PaladinCloudConfig{} }
func (m *PaladinCloudConfig) String() string { return proto.CompactTextString(m) }
func (*PaladinCloudConfig) ProtoMessage()    {}
func (*PaladinCloudConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{1}
}
func (m *PaladinCloudConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaladinCloudConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaladinCloudConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaladinCloudConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaladinCloudConfig.Merge(m, src)
}
func (m *PaladinCloudConfig) XXX_Size() int {
	return m.Size()
}
func (m *PaladinCloudConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PaladinCloudConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PaladinCloudConfig proto.InternalMessageInfo

func (m *PaladinCloudConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PaladinCloudConfig) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PaladinCloudConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PaladinCloudConfig) Clone() *PaladinCloudConfig {
	if m == nil {
		return nil
	}
	cloned := new(PaladinCloudConfig)
	*cloned = *m

	return cloned
}

// OCMConfig provides information required to fetch discovered clusters from
// the OpenShift cluster manager.
type OCMConfig struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" scrub:"dependent" validate:"nolocalendpoint"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" scrub:"always"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OCMConfig) Reset()         { *m = OCMConfig{} }
func (m *OCMConfig) String() string { return proto.CompactTextString(m) }
func (*OCMConfig) ProtoMessage()    {}
func (*OCMConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{2}
}
func (m *OCMConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCMConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OCMConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OCMConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCMConfig.Merge(m, src)
}
func (m *OCMConfig) XXX_Size() int {
	return m.Size()
}
func (m *OCMConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OCMConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OCMConfig proto.InternalMessageInfo

func (m *OCMConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OCMConfig) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *OCMConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *OCMConfig) Clone() *OCMConfig {
	if m == nil {
		return nil
	}
	cloned := new(OCMConfig)
	*cloned = *m

	return cloned
}

type CloudSourcesFilter struct {
	// Matches cloud sources based on their type.
	Types                []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudSourcesFilter) Reset()         { *m = CloudSourcesFilter{} }
func (m *CloudSourcesFilter) String() string { return proto.CompactTextString(m) }
func (*CloudSourcesFilter) ProtoMessage()    {}
func (*CloudSourcesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{3}
}
func (m *CloudSourcesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudSourcesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudSourcesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudSourcesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudSourcesFilter.Merge(m, src)
}
func (m *CloudSourcesFilter) XXX_Size() int {
	return m.Size()
}
func (m *CloudSourcesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudSourcesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CloudSourcesFilter proto.InternalMessageInfo

func (m *CloudSourcesFilter) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *CloudSourcesFilter) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CloudSourcesFilter) Clone() *CloudSourcesFilter {
	if m == nil {
		return nil
	}
	cloned := new(CloudSourcesFilter)
	*cloned = *m

	if m.Types != nil {
		cloned.Types = make([]string, len(m.Types))
		copy(cloned.Types, m.Types)
	}
	return cloned
}

type CountCloudSourcesRequest struct {
	// Filters cloud sources based on the requested fields.
	Filter               *CloudSourcesFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CountCloudSourcesRequest) Reset()         { *m = CountCloudSourcesRequest{} }
func (m *CountCloudSourcesRequest) String() string { return proto.CompactTextString(m) }
func (*CountCloudSourcesRequest) ProtoMessage()    {}
func (*CountCloudSourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{4}
}
func (m *CountCloudSourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountCloudSourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountCloudSourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountCloudSourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountCloudSourcesRequest.Merge(m, src)
}
func (m *CountCloudSourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountCloudSourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountCloudSourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountCloudSourcesRequest proto.InternalMessageInfo

func (m *CountCloudSourcesRequest) GetFilter() *CloudSourcesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CountCloudSourcesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountCloudSourcesRequest) Clone() *CountCloudSourcesRequest {
	if m == nil {
		return nil
	}
	cloned := new(CountCloudSourcesRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

type CountCloudSourcesResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountCloudSourcesResponse) Reset()         { *m = CountCloudSourcesResponse{} }
func (m *CountCloudSourcesResponse) String() string { return proto.CompactTextString(m) }
func (*CountCloudSourcesResponse) ProtoMessage()    {}
func (*CountCloudSourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{5}
}
func (m *CountCloudSourcesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountCloudSourcesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountCloudSourcesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountCloudSourcesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountCloudSourcesResponse.Merge(m, src)
}
func (m *CountCloudSourcesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountCloudSourcesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountCloudSourcesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountCloudSourcesResponse proto.InternalMessageInfo

func (m *CountCloudSourcesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountCloudSourcesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountCloudSourcesResponse) Clone() *CountCloudSourcesResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountCloudSourcesResponse)
	*cloned = *m

	return cloned
}

type GetCloudSourceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCloudSourceRequest) Reset()         { *m = GetCloudSourceRequest{} }
func (m *GetCloudSourceRequest) String() string { return proto.CompactTextString(m) }
func (*GetCloudSourceRequest) ProtoMessage()    {}
func (*GetCloudSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{6}
}
func (m *GetCloudSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCloudSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCloudSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCloudSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCloudSourceRequest.Merge(m, src)
}
func (m *GetCloudSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCloudSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCloudSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCloudSourceRequest proto.InternalMessageInfo

func (m *GetCloudSourceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetCloudSourceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCloudSourceRequest) Clone() *GetCloudSourceRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetCloudSourceRequest)
	*cloned = *m

	return cloned
}

type GetCloudSourceResponse struct {
	CloudSource          *CloudSource `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource,proto3" json:"cloud_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetCloudSourceResponse) Reset()         { *m = GetCloudSourceResponse{} }
func (m *GetCloudSourceResponse) String() string { return proto.CompactTextString(m) }
func (*GetCloudSourceResponse) ProtoMessage()    {}
func (*GetCloudSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{7}
}
func (m *GetCloudSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCloudSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCloudSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCloudSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCloudSourceResponse.Merge(m, src)
}
func (m *GetCloudSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCloudSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCloudSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCloudSourceResponse proto.InternalMessageInfo

func (m *GetCloudSourceResponse) GetCloudSource() *CloudSource {
	if m != nil {
		return m.CloudSource
	}
	return nil
}

func (m *GetCloudSourceResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCloudSourceResponse) Clone() *GetCloudSourceResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetCloudSourceResponse)
	*cloned = *m

	cloned.CloudSource = m.CloudSource.Clone()
	return cloned
}

type ListCloudSourcesRequest struct {
	// Divides the response into chunks.
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Filters cloud sources based on the requested fields.
	Filter               *CloudSourcesFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListCloudSourcesRequest) Reset()         { *m = ListCloudSourcesRequest{} }
func (m *ListCloudSourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCloudSourcesRequest) ProtoMessage()    {}
func (*ListCloudSourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{8}
}
func (m *ListCloudSourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCloudSourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCloudSourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCloudSourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCloudSourcesRequest.Merge(m, src)
}
func (m *ListCloudSourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCloudSourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCloudSourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCloudSourcesRequest proto.InternalMessageInfo

func (m *ListCloudSourcesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCloudSourcesRequest) GetFilter() *CloudSourcesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListCloudSourcesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCloudSourcesRequest) Clone() *ListCloudSourcesRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListCloudSourcesRequest)
	*cloned = *m

	cloned.Pagination = m.Pagination.Clone()
	cloned.Filter = m.Filter.Clone()
	return cloned
}

type ListCloudSourcesResponse struct {
	CloudSources         []*CloudSource `protobuf:"bytes,1,rep,name=cloud_sources,json=cloudSources,proto3" json:"cloud_sources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListCloudSourcesResponse) Reset()         { *m = ListCloudSourcesResponse{} }
func (m *ListCloudSourcesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCloudSourcesResponse) ProtoMessage()    {}
func (*ListCloudSourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{9}
}
func (m *ListCloudSourcesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCloudSourcesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCloudSourcesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCloudSourcesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCloudSourcesResponse.Merge(m, src)
}
func (m *ListCloudSourcesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCloudSourcesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCloudSourcesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCloudSourcesResponse proto.InternalMessageInfo

func (m *ListCloudSourcesResponse) GetCloudSources() []*CloudSource {
	if m != nil {
		return m.CloudSources
	}
	return nil
}

func (m *ListCloudSourcesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCloudSourcesResponse) Clone() *ListCloudSourcesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListCloudSourcesResponse)
	*cloned = *m

	if m.CloudSources != nil {
		cloned.CloudSources = make([]*CloudSource, len(m.CloudSources))
		for idx, v := range m.CloudSources {
			cloned.CloudSources[idx] = v.Clone()
		}
	}
	return cloned
}

type PostCloudSourceRequest struct {
	CloudSource          *CloudSource `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource,proto3" json:"cloud_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PostCloudSourceRequest) Reset()         { *m = PostCloudSourceRequest{} }
func (m *PostCloudSourceRequest) String() string { return proto.CompactTextString(m) }
func (*PostCloudSourceRequest) ProtoMessage()    {}
func (*PostCloudSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{10}
}
func (m *PostCloudSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostCloudSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostCloudSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostCloudSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostCloudSourceRequest.Merge(m, src)
}
func (m *PostCloudSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostCloudSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostCloudSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostCloudSourceRequest proto.InternalMessageInfo

func (m *PostCloudSourceRequest) GetCloudSource() *CloudSource {
	if m != nil {
		return m.CloudSource
	}
	return nil
}

func (m *PostCloudSourceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostCloudSourceRequest) Clone() *PostCloudSourceRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostCloudSourceRequest)
	*cloned = *m

	cloned.CloudSource = m.CloudSource.Clone()
	return cloned
}

type PostCloudSourceResponse struct {
	CloudSource          *CloudSource `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource,proto3" json:"cloud_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PostCloudSourceResponse) Reset()         { *m = PostCloudSourceResponse{} }
func (m *PostCloudSourceResponse) String() string { return proto.CompactTextString(m) }
func (*PostCloudSourceResponse) ProtoMessage()    {}
func (*PostCloudSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{11}
}
func (m *PostCloudSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostCloudSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostCloudSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostCloudSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostCloudSourceResponse.Merge(m, src)
}
func (m *PostCloudSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *PostCloudSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PostCloudSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PostCloudSourceResponse proto.InternalMessageInfo

func (m *PostCloudSourceResponse) GetCloudSource() *CloudSource {
	if m != nil {
		return m.CloudSource
	}
	return nil
}

func (m *PostCloudSourceResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostCloudSourceResponse) Clone() *PostCloudSourceResponse {
	if m == nil {
		return nil
	}
	cloned := new(PostCloudSourceResponse)
	*cloned = *m

	cloned.CloudSource = m.CloudSource.Clone()
	return cloned
}

type PutCloudSourceRequest struct {
	CloudSource *CloudSource `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource,proto3" json:"cloud_source,omitempty"`
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials    bool     `protobuf:"varint,2,opt,name=update_credentials,json=updateCredentials,proto3" json:"update_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutCloudSourceRequest) Reset()         { *m = PutCloudSourceRequest{} }
func (m *PutCloudSourceRequest) String() string { return proto.CompactTextString(m) }
func (*PutCloudSourceRequest) ProtoMessage()    {}
func (*PutCloudSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{12}
}
func (m *PutCloudSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutCloudSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutCloudSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutCloudSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutCloudSourceRequest.Merge(m, src)
}
func (m *PutCloudSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutCloudSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutCloudSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutCloudSourceRequest proto.InternalMessageInfo

func (m *PutCloudSourceRequest) GetCloudSource() *CloudSource {
	if m != nil {
		return m.CloudSource
	}
	return nil
}

func (m *PutCloudSourceRequest) GetUpdateCredentials() bool {
	if m != nil {
		return m.UpdateCredentials
	}
	return false
}

func (m *PutCloudSourceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PutCloudSourceRequest) Clone() *PutCloudSourceRequest {
	if m == nil {
		return nil
	}
	cloned := new(PutCloudSourceRequest)
	*cloned = *m

	cloned.CloudSource = m.CloudSource.Clone()
	return cloned
}

type DeleteCloudSourceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCloudSourceRequest) Reset()         { *m = DeleteCloudSourceRequest{} }
func (m *DeleteCloudSourceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCloudSourceRequest) ProtoMessage()    {}
func (*DeleteCloudSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{13}
}
func (m *DeleteCloudSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCloudSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCloudSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCloudSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCloudSourceRequest.Merge(m, src)
}
func (m *DeleteCloudSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCloudSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCloudSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCloudSourceRequest proto.InternalMessageInfo

func (m *DeleteCloudSourceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteCloudSourceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteCloudSourceRequest) Clone() *DeleteCloudSourceRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteCloudSourceRequest)
	*cloned = *m

	return cloned
}

type TestCloudSourceRequest struct {
	CloudSource *CloudSource `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource,proto3" json:"cloud_source,omitempty"`
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials    bool     `protobuf:"varint,2,opt,name=update_credentials,json=updateCredentials,proto3" json:"update_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCloudSourceRequest) Reset()         { *m = TestCloudSourceRequest{} }
func (m *TestCloudSourceRequest) String() string { return proto.CompactTextString(m) }
func (*TestCloudSourceRequest) ProtoMessage()    {}
func (*TestCloudSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_757178d0a358325d, []int{14}
}
func (m *TestCloudSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCloudSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCloudSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCloudSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCloudSourceRequest.Merge(m, src)
}
func (m *TestCloudSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *TestCloudSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCloudSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestCloudSourceRequest proto.InternalMessageInfo

func (m *TestCloudSourceRequest) GetCloudSource() *CloudSource {
	if m != nil {
		return m.CloudSource
	}
	return nil
}

func (m *TestCloudSourceRequest) GetUpdateCredentials() bool {
	if m != nil {
		return m.UpdateCredentials
	}
	return false
}

func (m *TestCloudSourceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *TestCloudSourceRequest) Clone() *TestCloudSourceRequest {
	if m == nil {
		return nil
	}
	cloned := new(TestCloudSourceRequest)
	*cloned = *m

	cloned.CloudSource = m.CloudSource.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("v1.CloudSource_Type", CloudSource_Type_name, CloudSource_Type_value)
	proto.RegisterType((*CloudSource)(nil), "v1.CloudSource")
	proto.RegisterType((*PaladinCloudConfig)(nil), "v1.PaladinCloudConfig")
	proto.RegisterType((*OCMConfig)(nil), "v1.OCMConfig")
	proto.RegisterType((*CloudSourcesFilter)(nil), "v1.CloudSourcesFilter")
	proto.RegisterType((*CountCloudSourcesRequest)(nil), "v1.CountCloudSourcesRequest")
	proto.RegisterType((*CountCloudSourcesResponse)(nil), "v1.CountCloudSourcesResponse")
	proto.RegisterType((*GetCloudSourceRequest)(nil), "v1.GetCloudSourceRequest")
	proto.RegisterType((*GetCloudSourceResponse)(nil), "v1.GetCloudSourceResponse")
	proto.RegisterType((*ListCloudSourcesRequest)(nil), "v1.ListCloudSourcesRequest")
	proto.RegisterType((*ListCloudSourcesResponse)(nil), "v1.ListCloudSourcesResponse")
	proto.RegisterType((*PostCloudSourceRequest)(nil), "v1.PostCloudSourceRequest")
	proto.RegisterType((*PostCloudSourceResponse)(nil), "v1.PostCloudSourceResponse")
	proto.RegisterType((*PutCloudSourceRequest)(nil), "v1.PutCloudSourceRequest")
	proto.RegisterType((*DeleteCloudSourceRequest)(nil), "v1.DeleteCloudSourceRequest")
	proto.RegisterType((*TestCloudSourceRequest)(nil), "v1.TestCloudSourceRequest")
}

func init() { proto.RegisterFile("api/v1/cloud_source_service.proto", fileDescriptor_757178d0a358325d) }

var fileDescriptor_757178d0a358325d = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xc6, 0x86, 0x50, 0x78, 0x40, 0x20, 0x03, 0x04, 0x63, 0x68, 0x08, 0xd3, 0x43, 0xa3, 0xa8,
	0xeb, 0x34, 0xd9, 0x9e, 0x90, 0x7a, 0x58, 0x02, 0xdb, 0x52, 0x85, 0x25, 0x32, 0xbb, 0x52, 0xd5,
	0x56, 0x8a, 0xbc, 0xf6, 0x90, 0x1d, 0x61, 0x3c, 0xde, 0xcc, 0x24, 0x6d, 0xba, 0xda, 0x4b, 0x7b,
	0xed, 0xad, 0x97, 0xfe, 0x8c, 0xfe, 0x8c, 0x1e, 0x2b, 0xf5, 0xbe, 0xaa, 0x68, 0x0f, 0x3d, 0xef,
	0x2f, 0xa8, 0x66, 0xc6, 0x10, 0x6f, 0xe2, 0x48, 0xab, 0x76, 0x25, 0x6e, 0xf6, 0x7b, 0x6f, 0xbe,
	0xef, 0xcd, 0x9b, 0xef, 0xf3, 0x18, 0xf6, 0xbd, 0x98, 0xd6, 0x06, 0xf5, 0x9a, 0x1f, 0xb2, 0x7e,
	0xd0, 0xe1, 0xac, 0xdf, 0xf3, 0x49, 0x87, 0x93, 0xde, 0x80, 0xfa, 0xc4, 0x89, 0x7b, 0x4c, 0x30,
	0x64, 0x0e, 0xea, 0xf6, 0x6e, 0x97, 0xb1, 0x6e, 0x48, 0x6a, 0xb2, 0xda, 0x8b, 0x22, 0x26, 0x3c,
	0x41, 0x59, 0xc4, 0x75, 0x85, 0x8d, 0x12, 0x10, 0x72, 0x15, 0x8b, 0x61, 0x12, 0xdb, 0x4a, 0x62,
	0xb1, 0xd7, 0xa5, 0x91, 0xaa, 0x4e, 0x12, 0x1b, 0x5d, 0xd6, 0x65, 0xea, 0xb1, 0x26, 0x9f, 0x74,
	0x14, 0xff, 0x6a, 0xc2, 0x52, 0x53, 0xf6, 0x70, 0xae, 0x5a, 0x40, 0x79, 0x30, 0x69, 0x60, 0x19,
	0x65, 0xa3, 0xb2, 0xe8, 0x9a, 0x34, 0x40, 0x08, 0xe6, 0x22, 0xef, 0x8a, 0x58, 0xa6, 0x8a, 0xa8,
	0x67, 0x54, 0x81, 0x39, 0x31, 0x8c, 0x89, 0x35, 0x5b, 0x36, 0x2a, 0xf9, 0xc6, 0x86, 0x33, 0xa8,
	0x3b, 0x29, 0x08, 0xe7, 0xf1, 0x30, 0x26, 0xae, 0xaa, 0x40, 0x0d, 0xd8, 0xe4, 0x97, 0x34, 0xee,
	0x08, 0xc2, 0x45, 0x87, 0x46, 0x82, 0x74, 0x7b, 0xaa, 0x25, 0x6b, 0xae, 0x6c, 0x54, 0x16, 0xdc,
	0x75, 0x99, 0x7c, 0x4c, 0xb8, 0x38, 0x19, 0xa5, 0xd0, 0xa7, 0xb0, 0x12, 0x7b, 0xa1, 0x17, 0xd0,
	0xa8, 0xa3, 0x86, 0x63, 0xe5, 0xca, 0x46, 0x65, 0xa9, 0x51, 0x94, 0x34, 0x6d, 0x9d, 0x50, 0x6c,
	0x4d, 0x16, 0x5d, 0xd0, 0xee, 0xe7, 0x33, 0xee, 0x72, 0x9c, 0x8a, 0xa2, 0x7d, 0x98, 0x65, 0xfe,
	0x95, 0x35, 0xaf, 0x16, 0xad, 0xc8, 0x45, 0x67, 0xcd, 0xd3, 0xdb, 0x5a, 0x99, 0xc3, 0xf7, 0x61,
	0x4e, 0xf6, 0x88, 0x56, 0x61, 0xe9, 0xc9, 0xa3, 0xf3, 0xf6, 0x71, 0xf3, 0xe4, 0xe1, 0xc9, 0xf1,
	0xd1, 0xda, 0x0c, 0x2a, 0xc0, 0x4a, 0xfb, 0x41, 0xeb, 0xc1, 0xd1, 0xc9, 0xa3, 0x4e, 0xb3, 0x75,
	0xf6, 0xe4, 0x68, 0xcd, 0x40, 0xef, 0xc1, 0xec, 0x59, 0xf3, 0x74, 0xcd, 0x3c, 0x5c, 0x80, 0x79,
	0x8d, 0x82, 0x7f, 0x32, 0x00, 0x4d, 0x36, 0x82, 0x5a, 0xb0, 0x40, 0xa2, 0x20, 0x66, 0x34, 0x12,
	0x7a, 0x7e, 0x87, 0x1f, 0xbf, 0x7e, 0xb5, 0xf7, 0x11, 0xf7, 0x7b, 0xfd, 0xa7, 0x07, 0x38, 0x20,
	0x31, 0x89, 0x02, 0x12, 0x09, 0x5c, 0x1e, 0x78, 0x21, 0x0d, 0x3c, 0x41, 0x0e, 0x70, 0xc4, 0x42,
	0xe6, 0x7b, 0xe1, 0xcd, 0x32, 0xec, 0xde, 0x22, 0xa0, 0x0a, 0xe4, 0x04, 0xbb, 0x24, 0x91, 0x1e,
	0xfc, 0x21, 0x7a, 0xfd, 0x6a, 0x2f, 0x9f, 0x40, 0x79, 0xe1, 0xb7, 0xde, 0x90, 0x63, 0x57, 0x17,
	0xe0, 0x1f, 0x0d, 0x58, 0xbc, 0xdd, 0xe2, 0x9d, 0x75, 0x51, 0x05, 0x94, 0xd2, 0x00, 0x7f, 0x48,
	0x43, 0x41, 0x7a, 0x68, 0x03, 0x72, 0x52, 0x07, 0xdc, 0x32, 0xca, 0xb3, 0x95, 0x45, 0x57, 0xbf,
	0xe0, 0x2f, 0xc0, 0x6a, 0xb2, 0x7e, 0x24, 0xd2, 0x0b, 0x5c, 0xf2, 0xbc, 0x4f, 0xb8, 0x40, 0x0e,
	0xcc, 0x5f, 0xa8, 0xb5, 0xaa, 0xfb, 0xe4, 0xd8, 0x27, 0x91, 0xdd, 0xa4, 0x0a, 0xd7, 0x61, 0x3b,
	0x03, 0x8b, 0xc7, 0x2c, 0xe2, 0x44, 0xd2, 0xfb, 0x32, 0xa9, 0xb0, 0x72, 0xae, 0x7e, 0xc1, 0x1f,
	0xc2, 0xe6, 0x67, 0x24, 0xbd, 0xe0, 0x86, 0x7b, 0x4c, 0xfb, 0xb8, 0x05, 0xc5, 0xf1, 0xc2, 0x04,
	0xb8, 0x01, 0xcb, 0x69, 0xe3, 0x26, 0xbd, 0xae, 0x8e, 0xf5, 0xea, 0x2e, 0xf9, 0xa3, 0x17, 0x3c,
	0x84, 0xad, 0x16, 0xe5, 0x53, 0x36, 0x0d, 0x23, 0xbb, 0x26, 0x60, 0x79, 0xad, 0xf7, 0x9b, 0xa8,
	0x9b, 0xaa, 0x48, 0x0d, 0xc9, 0x7c, 0xab, 0x21, 0xb5, 0xc1, 0x9a, 0xa4, 0x4e, 0xb6, 0xf2, 0x09,
	0xac, 0xa4, 0xb7, 0xa2, 0x8f, 0x2a, 0x63, 0x2f, 0xcb, 0xa9, 0xbd, 0x70, 0x39, 0x9a, 0x36, 0xe3,
	0x59, 0x43, 0xfc, 0x2f, 0xa3, 0x39, 0x85, 0xad, 0x09, 0xb4, 0xff, 0x31, 0xe9, 0xef, 0x61, 0xb3,
	0xdd, 0x7f, 0x47, 0xbd, 0xa1, 0x7b, 0x80, 0xfa, 0xb1, 0x34, 0x4a, 0xc7, 0xef, 0x11, 0x69, 0x1d,
	0xea, 0x85, 0x5c, 0xcd, 0x7d, 0xc1, 0x2d, 0xe8, 0x4c, 0x73, 0x94, 0xc0, 0x55, 0xb0, 0x8e, 0x48,
	0x48, 0x04, 0x79, 0x0b, 0x7d, 0xbd, 0x80, 0xa2, 0xfc, 0xf8, 0xdd, 0x49, 0xa3, 0x8d, 0x7f, 0x72,
	0xb0, 0x9e, 0x16, 0xc4, 0xb9, 0xbe, 0x7b, 0xd0, 0x73, 0x28, 0x4c, 0x18, 0x0a, 0xed, 0x2a, 0xe6,
	0x29, 0x9e, 0xb5, 0xdf, 0x9f, 0x92, 0xd5, 0x47, 0x88, 0xf7, 0x7e, 0xf8, 0xe3, 0xef, 0x9f, 0xcd,
	0x6d, 0xb4, 0xa5, 0xee, 0x3b, 0x59, 0xa6, 0x6f, 0xbd, 0x7b, 0x89, 0xe2, 0x50, 0x17, 0xf2, 0x6f,
	0xfa, 0x0c, 0x6d, 0x4b, 0xc4, 0x4c, 0x93, 0xda, 0x76, 0x56, 0x2a, 0x61, 0x2a, 0x29, 0x26, 0x0b,
	0x15, 0x6f, 0x6f, 0xd6, 0x1b, 0x8e, 0xda, 0x0b, 0x1a, 0xbc, 0x44, 0xcf, 0x60, 0x6d, 0xdc, 0x07,
	0x68, 0x47, 0xe2, 0x4d, 0x31, 0xa6, 0xbd, 0x9b, 0x9d, 0x4c, 0xe8, 0xb6, 0x15, 0xdd, 0x3a, 0x2a,
	0x4c, 0xd0, 0xa1, 0x67, 0xb0, 0x3a, 0xa6, 0x68, 0xa4, 0x1a, 0xcf, 0x36, 0x8d, 0xbd, 0x93, 0x99,
	0x4b, 0x68, 0x76, 0x15, 0x4d, 0x11, 0x4f, 0xd2, 0x1c, 0x18, 0x55, 0x74, 0x01, 0xf9, 0x37, 0xc5,
	0xae, 0x87, 0x97, 0x69, 0x00, 0x7b, 0x51, 0xa6, 0x8e, 0xe5, 0xdf, 0x02, 0x76, 0x14, 0x6a, 0xc5,
	0xfe, 0x20, 0x63, 0x56, 0x69, 0xed, 0x39, 0x34, 0x78, 0x29, 0x79, 0xbe, 0x81, 0xc2, 0x84, 0xb0,
	0xb5, 0x2e, 0xa6, 0xe9, 0x3d, 0xcd, 0x96, 0x9c, 0x4c, 0x75, 0xda, 0xc9, 0x7c, 0x0d, 0xab, 0x63,
	0x56, 0xd0, 0xf3, 0xca, 0xf6, 0x47, 0x1a, 0x79, 0x5f, 0x21, 0xef, 0xe0, 0x0c, 0x64, 0xf9, 0xd7,
	0x71, 0x60, 0x54, 0x0f, 0x9d, 0xdf, 0xae, 0x4b, 0xc6, 0xef, 0xd7, 0x25, 0xe3, 0xcf, 0xeb, 0x92,
	0xf1, 0xcb, 0x5f, 0xa5, 0x19, 0xb0, 0x28, 0x73, 0xb8, 0xf0, 0xfc, 0xcb, 0x1e, 0xfb, 0x4e, 0xff,
	0x08, 0x39, 0x5e, 0x4c, 0x9d, 0x41, 0xfd, 0x2b, 0x73, 0x50, 0xff, 0x72, 0xe6, 0xe9, 0xbc, 0x8a,
	0xdd, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xe5, 0x73, 0xc9, 0xa6, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudSourcesServiceClient is the client API for CloudSourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type CloudSourcesServiceClient interface {
	// CountCloudSources returns the number of cloud sources after filtering by requested fields.
	CountCloudSources(ctx context.Context, in *CountCloudSourcesRequest, opts ...grpc.CallOption) (*CountCloudSourcesResponse, error)
	// GetCloudSource retrieves a cloud source by ID.
	GetCloudSource(ctx context.Context, in *GetCloudSourceRequest, opts ...grpc.CallOption) (*GetCloudSourceResponse, error)
	// ListCloudSources returns the list of cloud sources after filtered by requested fields.
	ListCloudSources(ctx context.Context, in *ListCloudSourcesRequest, opts ...grpc.CallOption) (*ListCloudSourcesResponse, error)
	// PostCloudSource creates a cloud source.
	PostCloudSource(ctx context.Context, in *PostCloudSourceRequest, opts ...grpc.CallOption) (*PostCloudSourceResponse, error)
	// PutCloudSource creates or replaces a cloud source.
	PutCloudSource(ctx context.Context, in *PutCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteCloudSource removes a cloud source.
	DeleteCloudSource(ctx context.Context, in *DeleteCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error)
	// TestCloudSource tests a cloud source.
	TestCloudSource(ctx context.Context, in *TestCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error)
}

type cloudSourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudSourcesServiceClient(cc grpc.ClientConnInterface) CloudSourcesServiceClient {
	return &cloudSourcesServiceClient{cc}
}

func (c *cloudSourcesServiceClient) CountCloudSources(ctx context.Context, in *CountCloudSourcesRequest, opts ...grpc.CallOption) (*CountCloudSourcesResponse, error) {
	out := new(CountCloudSourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/CountCloudSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) GetCloudSource(ctx context.Context, in *GetCloudSourceRequest, opts ...grpc.CallOption) (*GetCloudSourceResponse, error) {
	out := new(GetCloudSourceResponse)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/GetCloudSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) ListCloudSources(ctx context.Context, in *ListCloudSourcesRequest, opts ...grpc.CallOption) (*ListCloudSourcesResponse, error) {
	out := new(ListCloudSourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/ListCloudSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) PostCloudSource(ctx context.Context, in *PostCloudSourceRequest, opts ...grpc.CallOption) (*PostCloudSourceResponse, error) {
	out := new(PostCloudSourceResponse)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/PostCloudSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) PutCloudSource(ctx context.Context, in *PutCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/PutCloudSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) DeleteCloudSource(ctx context.Context, in *DeleteCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/DeleteCloudSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSourcesServiceClient) TestCloudSource(ctx context.Context, in *TestCloudSourceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CloudSourcesService/TestCloudSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudSourcesServiceServer is the server API for CloudSourcesService service.
type CloudSourcesServiceServer interface {
	// CountCloudSources returns the number of cloud sources after filtering by requested fields.
	CountCloudSources(context.Context, *CountCloudSourcesRequest) (*CountCloudSourcesResponse, error)
	// GetCloudSource retrieves a cloud source by ID.
	GetCloudSource(context.Context, *GetCloudSourceRequest) (*GetCloudSourceResponse, error)
	// ListCloudSources returns the list of cloud sources after filtered by requested fields.
	ListCloudSources(context.Context, *ListCloudSourcesRequest) (*ListCloudSourcesResponse, error)
	// PostCloudSource creates a cloud source.
	PostCloudSource(context.Context, *PostCloudSourceRequest) (*PostCloudSourceResponse, error)
	// PutCloudSource creates or replaces a cloud source.
	PutCloudSource(context.Context, *PutCloudSourceRequest) (*Empty, error)
	// DeleteCloudSource removes a cloud source.
	DeleteCloudSource(context.Context, *DeleteCloudSourceRequest) (*Empty, error)
	// TestCloudSource tests a cloud source.
	TestCloudSource(context.Context, *TestCloudSourceRequest) (*Empty, error)
}

// UnimplementedCloudSourcesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudSourcesServiceServer struct {
}

func (*UnimplementedCloudSourcesServiceServer) CountCloudSources(ctx context.Context, req *CountCloudSourcesRequest) (*CountCloudSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCloudSources not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) GetCloudSource(ctx context.Context, req *GetCloudSourceRequest) (*GetCloudSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudSource not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) ListCloudSources(ctx context.Context, req *ListCloudSourcesRequest) (*ListCloudSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudSources not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) PostCloudSource(ctx context.Context, req *PostCloudSourceRequest) (*PostCloudSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCloudSource not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) PutCloudSource(ctx context.Context, req *PutCloudSourceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCloudSource not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) DeleteCloudSource(ctx context.Context, req *DeleteCloudSourceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudSource not implemented")
}
func (*UnimplementedCloudSourcesServiceServer) TestCloudSource(ctx context.Context, req *TestCloudSourceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCloudSource not implemented")
}

func RegisterCloudSourcesServiceServer(s *grpc.Server, srv CloudSourcesServiceServer) {
	s.RegisterService(&_CloudSourcesService_serviceDesc, srv)
}

func _CloudSourcesService_CountCloudSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCloudSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).CountCloudSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/CountCloudSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).CountCloudSources(ctx, req.(*CountCloudSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_GetCloudSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).GetCloudSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/GetCloudSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).GetCloudSource(ctx, req.(*GetCloudSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_ListCloudSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).ListCloudSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/ListCloudSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).ListCloudSources(ctx, req.(*ListCloudSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_PostCloudSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCloudSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).PostCloudSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/PostCloudSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).PostCloudSource(ctx, req.(*PostCloudSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_PutCloudSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCloudSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).PutCloudSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/PutCloudSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).PutCloudSource(ctx, req.(*PutCloudSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_DeleteCloudSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).DeleteCloudSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/DeleteCloudSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).DeleteCloudSource(ctx, req.(*DeleteCloudSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSourcesService_TestCloudSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCloudSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSourcesServiceServer).TestCloudSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CloudSourcesService/TestCloudSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSourcesServiceServer).TestCloudSource(ctx, req.(*TestCloudSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudSourcesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CloudSourcesService",
	HandlerType: (*CloudSourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCloudSources",
			Handler:    _CloudSourcesService_CountCloudSources_Handler,
		},
		{
			MethodName: "GetCloudSource",
			Handler:    _CloudSourcesService_GetCloudSource_Handler,
		},
		{
			MethodName: "ListCloudSources",
			Handler:    _CloudSourcesService_ListCloudSources_Handler,
		},
		{
			MethodName: "PostCloudSource",
			Handler:    _CloudSourcesService_PostCloudSource_Handler,
		},
		{
			MethodName: "PutCloudSource",
			Handler:    _CloudSourcesService_PutCloudSource_Handler,
		},
		{
			MethodName: "DeleteCloudSource",
			Handler:    _CloudSourcesService_DeleteCloudSource_Handler,
		},
		{
			MethodName: "TestCloudSource",
			Handler:    _CloudSourcesService_TestCloudSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cloud_source_service.proto",
}

func (m *CloudSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SkipTestIntegration {
		i--
		if m.SkipTestIntegration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintCloudSourceService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudSource_PaladinCloud) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudSource_PaladinCloud) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PaladinCloud != nil {
		{
			size, err := m.PaladinCloud.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CloudSource_Ocm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudSource_Ocm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ocm != nil {
		{
			size, err := m.Ocm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PaladinCloudConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaladinCloudConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaladinCloudConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OCMConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCMConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCMConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudSourcesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudSourcesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudSourcesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountCloudSourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountCloudSourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountCloudSourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountCloudSourcesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountCloudSourcesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountCloudSourcesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCloudSourceService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCloudSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCloudSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCloudSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCloudSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCloudSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCloudSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CloudSource != nil {
		{
			size, err := m.CloudSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCloudSourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCloudSourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCloudSourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCloudSourcesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCloudSourcesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCloudSourcesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CloudSources) > 0 {
		for iNdEx := len(m.CloudSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostCloudSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCloudSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostCloudSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CloudSource != nil {
		{
			size, err := m.CloudSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostCloudSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCloudSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostCloudSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CloudSource != nil {
		{
			size, err := m.CloudSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutCloudSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutCloudSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutCloudSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateCredentials {
		i--
		if m.UpdateCredentials {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CloudSource != nil {
		{
			size, err := m.CloudSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCloudSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCloudSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCloudSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCloudSourceService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestCloudSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCloudSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCloudSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateCredentials {
		i--
		if m.UpdateCredentials {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CloudSource != nil {
		{
			size, err := m.CloudSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudSourceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCloudSourceService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCloudSourceService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCloudSourceService(uint64(m.Type))
	}
	if m.SkipTestIntegration {
		n += 2
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudSource_PaladinCloud) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaladinCloud != nil {
		l = m.PaladinCloud.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	return n
}
func (m *CloudSource_Ocm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ocm != nil {
		l = m.Ocm.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	return n
}
func (m *PaladinCloudConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OCMConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudSourcesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovCloudSourceService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountCloudSourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountCloudSourcesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCloudSourceService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCloudSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCloudSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudSource != nil {
		l = m.CloudSource.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCloudSourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCloudSourcesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CloudSources) > 0 {
		for _, e := range m.CloudSources {
			l = e.Size()
			n += 1 + l + sovCloudSourceService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostCloudSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudSource != nil {
		l = m.CloudSource.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostCloudSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudSource != nil {
		l = m.CloudSource.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutCloudSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudSource != nil {
		l = m.CloudSource.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.UpdateCredentials {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCloudSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestCloudSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudSource != nil {
		l = m.CloudSource.Size()
		n += 1 + l + sovCloudSourceService(uint64(l))
	}
	if m.UpdateCredentials {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCloudSourceService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCloudSourceService(x uint64) (n int) {
	return sovCloudSourceService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CloudSource_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipTestIntegration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipTestIntegration = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaladinCloud", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaladinCloudConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &CloudSource_PaladinCloud{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ocm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OCMConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &CloudSource_Ocm{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaladinCloudConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaladinCloudConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaladinCloudConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OCMConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCMConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCMConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudSourcesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudSourcesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudSourcesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountCloudSourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountCloudSourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountCloudSourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &CloudSourcesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountCloudSourcesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountCloudSourcesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountCloudSourcesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCloudSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCloudSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCloudSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCloudSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCloudSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCloudSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSource == nil {
				m.CloudSource = &CloudSource{}
			}
			if err := m.CloudSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCloudSourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCloudSourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCloudSourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &CloudSourcesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCloudSourcesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCloudSourcesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCloudSourcesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudSources = append(m.CloudSources, &CloudSource{})
			if err := m.CloudSources[len(m.CloudSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCloudSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCloudSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCloudSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSource == nil {
				m.CloudSource = &CloudSource{}
			}
			if err := m.CloudSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCloudSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCloudSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCloudSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSource == nil {
				m.CloudSource = &CloudSource{}
			}
			if err := m.CloudSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutCloudSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutCloudSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutCloudSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSource == nil {
				m.CloudSource = &CloudSource{}
			}
			if err := m.CloudSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCredentials", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCredentials = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCloudSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCloudSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCloudSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCloudSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCloudSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCloudSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudSource == nil {
				m.CloudSource = &CloudSource{}
			}
			if err := m.CloudSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCredentials", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCredentials = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudSourceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudSourceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudSourceService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudSourceService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudSourceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCloudSourceService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCloudSourceService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCloudSourceService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCloudSourceService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudSourceService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCloudSourceService = fmt.Errorf("proto: unexpected end of group")
)
