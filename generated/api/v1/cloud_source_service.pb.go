// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/v1/cloud_source_service.proto

//go:build !protoopaque

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudSource_Type int32

const (
	CloudSource_TYPE_UNSPECIFIED   CloudSource_Type = 0
	CloudSource_TYPE_PALADIN_CLOUD CloudSource_Type = 1
	CloudSource_TYPE_OCM           CloudSource_Type = 2
)

// Enum value maps for CloudSource_Type.
var (
	CloudSource_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_PALADIN_CLOUD",
		2: "TYPE_OCM",
	}
	CloudSource_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":   0,
		"TYPE_PALADIN_CLOUD": 1,
		"TYPE_OCM":           2,
	}
)

func (x CloudSource_Type) Enum() *CloudSource_Type {
	p := new(CloudSource_Type)
	*p = x
	return p
}

func (x CloudSource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudSource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_cloud_source_service_proto_enumTypes[0].Descriptor()
}

func (CloudSource_Type) Type() protoreflect.EnumType {
	return &file_api_v1_cloud_source_service_proto_enumTypes[0]
}

func (x CloudSource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// CloudSource is an integration which provides a source for discovered
// clusters.
type CloudSource struct {
	state               protoimpl.MessageState   `protogen:"hybrid.v1"`
	Id                  string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                CloudSource_Type         `protobuf:"varint,3,opt,name=type,enum=v1.CloudSource_Type" json:"type,omitempty"`
	Credentials         *CloudSource_Credentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	SkipTestIntegration bool                     `protobuf:"varint,5,opt,name=skip_test_integration,json=skipTestIntegration" json:"skip_test_integration,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*CloudSource_PaladinCloud
	//	*CloudSource_Ocm
	Config        isCloudSource_Config `protobuf_oneof:"Config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSource) Reset() {
	*x = CloudSource{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSource) ProtoMessage() {}

func (x *CloudSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloudSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudSource) GetType() CloudSource_Type {
	if x != nil {
		return x.Type
	}
	return CloudSource_TYPE_UNSPECIFIED
}

func (x *CloudSource) GetCredentials() *CloudSource_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CloudSource) GetSkipTestIntegration() bool {
	if x != nil {
		return x.SkipTestIntegration
	}
	return false
}

func (x *CloudSource) GetConfig() isCloudSource_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CloudSource) GetPaladinCloud() *PaladinCloudConfig {
	if x != nil {
		if x, ok := x.Config.(*CloudSource_PaladinCloud); ok {
			return x.PaladinCloud
		}
	}
	return nil
}

func (x *CloudSource) GetOcm() *OCMConfig {
	if x != nil {
		if x, ok := x.Config.(*CloudSource_Ocm); ok {
			return x.Ocm
		}
	}
	return nil
}

func (x *CloudSource) SetId(v string) {
	x.Id = v
}

func (x *CloudSource) SetName(v string) {
	x.Name = v
}

func (x *CloudSource) SetType(v CloudSource_Type) {
	x.Type = v
}

func (x *CloudSource) SetCredentials(v *CloudSource_Credentials) {
	x.Credentials = v
}

func (x *CloudSource) SetSkipTestIntegration(v bool) {
	x.SkipTestIntegration = v
}

func (x *CloudSource) SetPaladinCloud(v *PaladinCloudConfig) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &CloudSource_PaladinCloud{v}
}

func (x *CloudSource) SetOcm(v *OCMConfig) {
	if v == nil {
		x.Config = nil
		return
	}
	x.Config = &CloudSource_Ocm{v}
}

func (x *CloudSource) HasCredentials() bool {
	if x == nil {
		return false
	}
	return x.Credentials != nil
}

func (x *CloudSource) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *CloudSource) HasPaladinCloud() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*CloudSource_PaladinCloud)
	return ok
}

func (x *CloudSource) HasOcm() bool {
	if x == nil {
		return false
	}
	_, ok := x.Config.(*CloudSource_Ocm)
	return ok
}

func (x *CloudSource) ClearCredentials() {
	x.Credentials = nil
}

func (x *CloudSource) ClearConfig() {
	x.Config = nil
}

func (x *CloudSource) ClearPaladinCloud() {
	if _, ok := x.Config.(*CloudSource_PaladinCloud); ok {
		x.Config = nil
	}
}

func (x *CloudSource) ClearOcm() {
	if _, ok := x.Config.(*CloudSource_Ocm); ok {
		x.Config = nil
	}
}

const CloudSource_Config_not_set_case case_CloudSource_Config = 0
const CloudSource_PaladinCloud_case case_CloudSource_Config = 6
const CloudSource_Ocm_case case_CloudSource_Config = 7

func (x *CloudSource) WhichConfig() case_CloudSource_Config {
	if x == nil {
		return CloudSource_Config_not_set_case
	}
	switch x.Config.(type) {
	case *CloudSource_PaladinCloud:
		return CloudSource_PaladinCloud_case
	case *CloudSource_Ocm:
		return CloudSource_Ocm_case
	default:
		return CloudSource_Config_not_set_case
	}
}

type CloudSource_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                  string
	Name                string
	Type                CloudSource_Type
	Credentials         *CloudSource_Credentials
	SkipTestIntegration bool
	// Fields of oneof Config:
	PaladinCloud *PaladinCloudConfig
	Ocm          *OCMConfig
	// -- end of Config
}

func (b0 CloudSource_builder) Build() *CloudSource {
	m0 := &CloudSource{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.Type = b.Type
	x.Credentials = b.Credentials
	x.SkipTestIntegration = b.SkipTestIntegration
	if b.PaladinCloud != nil {
		x.Config = &CloudSource_PaladinCloud{b.PaladinCloud}
	}
	if b.Ocm != nil {
		x.Config = &CloudSource_Ocm{b.Ocm}
	}
	return m0
}

type case_CloudSource_Config protoreflect.FieldNumber

func (x case_CloudSource_Config) String() string {
	md := file_api_v1_cloud_source_service_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCloudSource_Config interface {
	isCloudSource_Config()
}

type CloudSource_PaladinCloud struct {
	PaladinCloud *PaladinCloudConfig `protobuf:"bytes,6,opt,name=paladin_cloud,json=paladinCloud,oneof"`
}

type CloudSource_Ocm struct {
	Ocm *OCMConfig `protobuf:"bytes,7,opt,name=ocm,oneof"`
}

func (*CloudSource_PaladinCloud) isCloudSource_Config() {}

func (*CloudSource_Ocm) isCloudSource_Config() {}

// PaladinCloudConfig provides information required to fetch discovered
// clusters from Paladin Cloud.
type PaladinCloudConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Endpoint to the Paladin Cloud API server. Https is assumed if no
	// protocol is specified. Example: https://apiqa.paladincloud.io
	Endpoint      string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaladinCloudConfig) Reset() {
	*x = PaladinCloudConfig{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaladinCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaladinCloudConfig) ProtoMessage() {}

func (x *PaladinCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PaladinCloudConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *PaladinCloudConfig) SetEndpoint(v string) {
	x.Endpoint = v
}

type PaladinCloudConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Endpoint to the Paladin Cloud API server. Https is assumed if no
	// protocol is specified. Example: https://apiqa.paladincloud.io
	Endpoint string
}

func (b0 PaladinCloudConfig_builder) Build() *PaladinCloudConfig {
	m0 := &PaladinCloudConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Endpoint = b.Endpoint
	return m0
}

// OCMConfig provides information required to fetch discovered clusters from
// the OpenShift cluster manager.
type OCMConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Endpoint to the OpenShift API server. Https is assumed if no
	// protocol is specified. Example: https://api.openshift.com
	Endpoint      string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OCMConfig) Reset() {
	*x = OCMConfig{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OCMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCMConfig) ProtoMessage() {}

func (x *OCMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OCMConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *OCMConfig) SetEndpoint(v string) {
	x.Endpoint = v
}

type OCMConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Endpoint to the OpenShift API server. Https is assumed if no
	// protocol is specified. Example: https://api.openshift.com
	Endpoint string
}

func (b0 OCMConfig_builder) Build() *OCMConfig {
	m0 := &OCMConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Endpoint = b.Endpoint
	return m0
}

type CloudSourcesFilter struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Matches cloud sources based on their name.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// Matches cloud sources based on their type.
	Types         []CloudSource_Type `protobuf:"varint,2,rep,packed,name=types,enum=v1.CloudSource_Type" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSourcesFilter) Reset() {
	*x = CloudSourcesFilter{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSourcesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSourcesFilter) ProtoMessage() {}

func (x *CloudSourcesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloudSourcesFilter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *CloudSourcesFilter) GetTypes() []CloudSource_Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CloudSourcesFilter) SetNames(v []string) {
	x.Names = v
}

func (x *CloudSourcesFilter) SetTypes(v []CloudSource_Type) {
	x.Types = v
}

type CloudSourcesFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Matches cloud sources based on their name.
	Names []string
	// Matches cloud sources based on their type.
	Types []CloudSource_Type
}

func (b0 CloudSourcesFilter_builder) Build() *CloudSourcesFilter {
	m0 := &CloudSourcesFilter{}
	b, x := &b0, m0
	_, _ = b, x
	x.Names = b.Names
	x.Types = b.Types
	return m0
}

type CountCloudSourcesRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Filters cloud sources based on the requested fields.
	Filter        *CloudSourcesFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountCloudSourcesRequest) Reset() {
	*x = CountCloudSourcesRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountCloudSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCloudSourcesRequest) ProtoMessage() {}

func (x *CountCloudSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CountCloudSourcesRequest) GetFilter() *CloudSourcesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CountCloudSourcesRequest) SetFilter(v *CloudSourcesFilter) {
	x.Filter = v
}

func (x *CountCloudSourcesRequest) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *CountCloudSourcesRequest) ClearFilter() {
	x.Filter = nil
}

type CountCloudSourcesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Filters cloud sources based on the requested fields.
	Filter *CloudSourcesFilter
}

func (b0 CountCloudSourcesRequest_builder) Build() *CountCloudSourcesRequest {
	m0 := &CountCloudSourcesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Filter = b.Filter
	return m0
}

type CountCloudSourcesResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountCloudSourcesResponse) Reset() {
	*x = CountCloudSourcesResponse{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountCloudSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCloudSourcesResponse) ProtoMessage() {}

func (x *CountCloudSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CountCloudSourcesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CountCloudSourcesResponse) SetCount(v int32) {
	x.Count = v
}

type CountCloudSourcesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Count int32
}

func (b0 CountCloudSourcesResponse_builder) Build() *CountCloudSourcesResponse {
	m0 := &CountCloudSourcesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Count = b.Count
	return m0
}

type GetCloudSourceRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCloudSourceRequest) Reset() {
	*x = GetCloudSourceRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudSourceRequest) ProtoMessage() {}

func (x *GetCloudSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCloudSourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCloudSourceRequest) SetId(v string) {
	x.Id = v
}

type GetCloudSourceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 GetCloudSourceRequest_builder) Build() *GetCloudSourceRequest {
	m0 := &GetCloudSourceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type GetCloudSourceResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSource   *CloudSource           `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource" json:"cloud_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCloudSourceResponse) Reset() {
	*x = GetCloudSourceResponse{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudSourceResponse) ProtoMessage() {}

func (x *GetCloudSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetCloudSourceResponse) GetCloudSource() *CloudSource {
	if x != nil {
		return x.CloudSource
	}
	return nil
}

func (x *GetCloudSourceResponse) SetCloudSource(v *CloudSource) {
	x.CloudSource = v
}

func (x *GetCloudSourceResponse) HasCloudSource() bool {
	if x == nil {
		return false
	}
	return x.CloudSource != nil
}

func (x *GetCloudSourceResponse) ClearCloudSource() {
	x.CloudSource = nil
}

type GetCloudSourceResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSource *CloudSource
}

func (b0 GetCloudSourceResponse_builder) Build() *GetCloudSourceResponse {
	m0 := &GetCloudSourceResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSource = b.CloudSource
	return m0
}

type ListCloudSourcesRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Divides the response into chunks.
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination" json:"pagination,omitempty"`
	// Filters cloud sources based on the requested fields.
	Filter        *CloudSourcesFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCloudSourcesRequest) Reset() {
	*x = ListCloudSourcesRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSourcesRequest) ProtoMessage() {}

func (x *ListCloudSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListCloudSourcesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCloudSourcesRequest) GetFilter() *CloudSourcesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListCloudSourcesRequest) SetPagination(v *Pagination) {
	x.Pagination = v
}

func (x *ListCloudSourcesRequest) SetFilter(v *CloudSourcesFilter) {
	x.Filter = v
}

func (x *ListCloudSourcesRequest) HasPagination() bool {
	if x == nil {
		return false
	}
	return x.Pagination != nil
}

func (x *ListCloudSourcesRequest) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *ListCloudSourcesRequest) ClearPagination() {
	x.Pagination = nil
}

func (x *ListCloudSourcesRequest) ClearFilter() {
	x.Filter = nil
}

type ListCloudSourcesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Divides the response into chunks.
	Pagination *Pagination
	// Filters cloud sources based on the requested fields.
	Filter *CloudSourcesFilter
}

func (b0 ListCloudSourcesRequest_builder) Build() *ListCloudSourcesRequest {
	m0 := &ListCloudSourcesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Pagination = b.Pagination
	x.Filter = b.Filter
	return m0
}

type ListCloudSourcesResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSources  []*CloudSource         `protobuf:"bytes,1,rep,name=cloud_sources,json=cloudSources" json:"cloud_sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCloudSourcesResponse) Reset() {
	*x = ListCloudSourcesResponse{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSourcesResponse) ProtoMessage() {}

func (x *ListCloudSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListCloudSourcesResponse) GetCloudSources() []*CloudSource {
	if x != nil {
		return x.CloudSources
	}
	return nil
}

func (x *ListCloudSourcesResponse) SetCloudSources(v []*CloudSource) {
	x.CloudSources = v
}

type ListCloudSourcesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSources []*CloudSource
}

func (b0 ListCloudSourcesResponse_builder) Build() *ListCloudSourcesResponse {
	m0 := &ListCloudSourcesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSources = b.CloudSources
	return m0
}

type CreateCloudSourceRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSource   *CloudSource           `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource" json:"cloud_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCloudSourceRequest) Reset() {
	*x = CreateCloudSourceRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudSourceRequest) ProtoMessage() {}

func (x *CreateCloudSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateCloudSourceRequest) GetCloudSource() *CloudSource {
	if x != nil {
		return x.CloudSource
	}
	return nil
}

func (x *CreateCloudSourceRequest) SetCloudSource(v *CloudSource) {
	x.CloudSource = v
}

func (x *CreateCloudSourceRequest) HasCloudSource() bool {
	if x == nil {
		return false
	}
	return x.CloudSource != nil
}

func (x *CreateCloudSourceRequest) ClearCloudSource() {
	x.CloudSource = nil
}

type CreateCloudSourceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSource *CloudSource
}

func (b0 CreateCloudSourceRequest_builder) Build() *CreateCloudSourceRequest {
	m0 := &CreateCloudSourceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSource = b.CloudSource
	return m0
}

type CreateCloudSourceResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSource   *CloudSource           `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource" json:"cloud_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCloudSourceResponse) Reset() {
	*x = CreateCloudSourceResponse{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudSourceResponse) ProtoMessage() {}

func (x *CreateCloudSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateCloudSourceResponse) GetCloudSource() *CloudSource {
	if x != nil {
		return x.CloudSource
	}
	return nil
}

func (x *CreateCloudSourceResponse) SetCloudSource(v *CloudSource) {
	x.CloudSource = v
}

func (x *CreateCloudSourceResponse) HasCloudSource() bool {
	if x == nil {
		return false
	}
	return x.CloudSource != nil
}

func (x *CreateCloudSourceResponse) ClearCloudSource() {
	x.CloudSource = nil
}

type CreateCloudSourceResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSource *CloudSource
}

func (b0 CreateCloudSourceResponse_builder) Build() *CreateCloudSourceResponse {
	m0 := &CreateCloudSourceResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSource = b.CloudSource
	return m0
}

type UpdateCloudSourceRequest struct {
	state       protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSource *CloudSource           `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource" json:"cloud_source,omitempty"`
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials bool `protobuf:"varint,2,opt,name=update_credentials,json=updateCredentials" json:"update_credentials,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateCloudSourceRequest) Reset() {
	*x = UpdateCloudSourceRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCloudSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudSourceRequest) ProtoMessage() {}

func (x *UpdateCloudSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateCloudSourceRequest) GetCloudSource() *CloudSource {
	if x != nil {
		return x.CloudSource
	}
	return nil
}

func (x *UpdateCloudSourceRequest) GetUpdateCredentials() bool {
	if x != nil {
		return x.UpdateCredentials
	}
	return false
}

func (x *UpdateCloudSourceRequest) SetCloudSource(v *CloudSource) {
	x.CloudSource = v
}

func (x *UpdateCloudSourceRequest) SetUpdateCredentials(v bool) {
	x.UpdateCredentials = v
}

func (x *UpdateCloudSourceRequest) HasCloudSource() bool {
	if x == nil {
		return false
	}
	return x.CloudSource != nil
}

func (x *UpdateCloudSourceRequest) ClearCloudSource() {
	x.CloudSource = nil
}

type UpdateCloudSourceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSource *CloudSource
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials bool
}

func (b0 UpdateCloudSourceRequest_builder) Build() *UpdateCloudSourceRequest {
	m0 := &UpdateCloudSourceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSource = b.CloudSource
	x.UpdateCredentials = b.UpdateCredentials
	return m0
}

type DeleteCloudSourceRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCloudSourceRequest) Reset() {
	*x = DeleteCloudSourceRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudSourceRequest) ProtoMessage() {}

func (x *DeleteCloudSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteCloudSourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCloudSourceRequest) SetId(v string) {
	x.Id = v
}

type DeleteCloudSourceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 DeleteCloudSourceRequest_builder) Build() *DeleteCloudSourceRequest {
	m0 := &DeleteCloudSourceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type TestCloudSourceRequest struct {
	state       protoimpl.MessageState `protogen:"hybrid.v1"`
	CloudSource *CloudSource           `protobuf:"bytes,1,opt,name=cloud_source,json=cloudSource" json:"cloud_source,omitempty"`
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials bool `protobuf:"varint,2,opt,name=update_credentials,json=updateCredentials" json:"update_credentials,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestCloudSourceRequest) Reset() {
	*x = TestCloudSourceRequest{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCloudSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCloudSourceRequest) ProtoMessage() {}

func (x *TestCloudSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestCloudSourceRequest) GetCloudSource() *CloudSource {
	if x != nil {
		return x.CloudSource
	}
	return nil
}

func (x *TestCloudSourceRequest) GetUpdateCredentials() bool {
	if x != nil {
		return x.UpdateCredentials
	}
	return false
}

func (x *TestCloudSourceRequest) SetCloudSource(v *CloudSource) {
	x.CloudSource = v
}

func (x *TestCloudSourceRequest) SetUpdateCredentials(v bool) {
	x.UpdateCredentials = v
}

func (x *TestCloudSourceRequest) HasCloudSource() bool {
	if x == nil {
		return false
	}
	return x.CloudSource != nil
}

func (x *TestCloudSourceRequest) ClearCloudSource() {
	x.CloudSource = nil
}

type TestCloudSourceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CloudSource *CloudSource
	// If true, cloud_source must include valid credentials.
	// If false, the resource must already exist and
	// credentials in cloud_source are ignored.
	UpdateCredentials bool
}

func (b0 TestCloudSourceRequest_builder) Build() *TestCloudSourceRequest {
	m0 := &TestCloudSourceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.CloudSource = b.CloudSource
	x.UpdateCredentials = b.UpdateCredentials
	return m0
}

type CloudSource_Credentials struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Used for single-valued authentication via long-lived tokens.
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	// Used for client authentication in combination with client_secret.
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty" scrub:"always"` // @gotags: scrub:"always"
	// Used for client authentication in combination with client_id.
	ClientSecret  string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret" json:"client_secret,omitempty" scrub:"always"` // @gotags: scrub:"always"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSource_Credentials) Reset() {
	*x = CloudSource_Credentials{}
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSource_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSource_Credentials) ProtoMessage() {}

func (x *CloudSource_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cloud_source_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloudSource_Credentials) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CloudSource_Credentials) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CloudSource_Credentials) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CloudSource_Credentials) SetSecret(v string) {
	x.Secret = v
}

func (x *CloudSource_Credentials) SetClientId(v string) {
	x.ClientId = v
}

func (x *CloudSource_Credentials) SetClientSecret(v string) {
	x.ClientSecret = v
}

type CloudSource_Credentials_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Used for single-valued authentication via long-lived tokens.
	Secret string
	// Used for client authentication in combination with client_secret.
	ClientId string
	// Used for client authentication in combination with client_id.
	ClientSecret string
}

func (b0 CloudSource_Credentials_builder) Build() *CloudSource_Credentials {
	m0 := &CloudSource_Credentials{}
	b, x := &b0, m0
	_, _ = b, x
	x.Secret = b.Secret
	x.ClientId = b.ClientId
	x.ClientSecret = b.ClientSecret
	return m0
}

var File_api_v1_cloud_source_service_proto protoreflect.FileDescriptor

const file_api_v1_cloud_source_service_proto_rawDesc = "" +
	"\n" +
	"!api/v1/cloud_source_service.proto\x12\x02v1\x1a\x12api/v1/empty.proto\x1a\x17api/v1/pagination.proto\x1a\x1cgoogle/api/annotations.proto\x1a!google/protobuf/go_features.proto\"\xf3\x03\n" +
	"\vCloudSource\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.v1.CloudSource.TypeR\x04type\x12A\n" +
	"\vcredentials\x18\x04 \x01(\v2\x1b.v1.CloudSource.CredentialsB\x02(\x01R\vcredentials\x122\n" +
	"\x15skip_test_integration\x18\x05 \x01(\bR\x13skipTestIntegration\x12A\n" +
	"\rpaladin_cloud\x18\x06 \x01(\v2\x16.v1.PaladinCloudConfigB\x02(\x01H\x00R\fpaladinCloud\x12%\n" +
	"\x03ocm\x18\a \x01(\v2\r.v1.OCMConfigB\x02(\x01H\x00R\x03ocm\x1ag\n" +
	"\vCredentials\x12\x16\n" +
	"\x06secret\x18\x01 \x01(\tR\x06secret\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x03 \x01(\tR\fclientSecret\"B\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TYPE_PALADIN_CLOUD\x10\x01\x12\f\n" +
	"\bTYPE_OCM\x10\x02B\b\n" +
	"\x06Config\"0\n" +
	"\x12PaladinCloudConfig\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\"'\n" +
	"\tOCMConfig\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\"V\n" +
	"\x12CloudSourcesFilter\x12\x14\n" +
	"\x05names\x18\x01 \x03(\tR\x05names\x12*\n" +
	"\x05types\x18\x02 \x03(\x0e2\x14.v1.CloudSource.TypeR\x05types\"N\n" +
	"\x18CountCloudSourcesRequest\x122\n" +
	"\x06filter\x18\x01 \x01(\v2\x16.v1.CloudSourcesFilterB\x02(\x01R\x06filter\"1\n" +
	"\x19CountCloudSourcesResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\"'\n" +
	"\x15GetCloudSourceRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"P\n" +
	"\x16GetCloudSourceResponse\x126\n" +
	"\fcloud_source\x18\x01 \x01(\v2\x0f.v1.CloudSourceB\x02(\x01R\vcloudSource\"\x81\x01\n" +
	"\x17ListCloudSourcesRequest\x122\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\x0e.v1.PaginationB\x02(\x01R\n" +
	"pagination\x122\n" +
	"\x06filter\x18\x02 \x01(\v2\x16.v1.CloudSourcesFilterB\x02(\x01R\x06filter\"T\n" +
	"\x18ListCloudSourcesResponse\x128\n" +
	"\rcloud_sources\x18\x01 \x03(\v2\x0f.v1.CloudSourceB\x02(\x01R\fcloudSources\"R\n" +
	"\x18CreateCloudSourceRequest\x126\n" +
	"\fcloud_source\x18\x01 \x01(\v2\x0f.v1.CloudSourceB\x02(\x01R\vcloudSource\"S\n" +
	"\x19CreateCloudSourceResponse\x126\n" +
	"\fcloud_source\x18\x01 \x01(\v2\x0f.v1.CloudSourceB\x02(\x01R\vcloudSource\"\x81\x01\n" +
	"\x18UpdateCloudSourceRequest\x126\n" +
	"\fcloud_source\x18\x01 \x01(\v2\x0f.v1.CloudSourceB\x02(\x01R\vcloudSource\x12-\n" +
	"\x12update_credentials\x18\x02 \x01(\bR\x11updateCredentials\"*\n" +
	"\x18DeleteCloudSourceRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x7f\n" +
	"\x16TestCloudSourceRequest\x126\n" +
	"\fcloud_source\x18\x01 \x01(\v2\x0f.v1.CloudSourceB\x02(\x01R\vcloudSource\x12-\n" +
	"\x12update_credentials\x18\x02 \x01(\bR\x11updateCredentials2\xf4\x05\n" +
	"\x13CloudSourcesService\x12q\n" +
	"\x11CountCloudSources\x12\x1c.v1.CountCloudSourcesRequest\x1a\x1d.v1.CountCloudSourcesResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/v1/count/cloud-sources\x12g\n" +
	"\x0eGetCloudSource\x12\x19.v1.GetCloudSourceRequest\x1a\x1a.v1.GetCloudSourceResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/v1/cloud-sources/{id}\x12h\n" +
	"\x10ListCloudSources\x12\x1b.v1.ListCloudSourcesRequest\x1a\x1c.v1.ListCloudSourcesResponse\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/v1/cloud-sources\x12n\n" +
	"\x11CreateCloudSource\x12\x1c.v1.CreateCloudSourceRequest\x1a\x1d.v1.CreateCloudSourceResponse\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/v1/cloud-sources\x12l\n" +
	"\x11UpdateCloudSource\x12\x1c.v1.UpdateCloudSourceRequest\x1a\t.v1.Empty\".\x82\xd3\xe4\x93\x02(:\x01*\x1a#/v1/cloud-sources/{cloud_source.id}\x12\\\n" +
	"\x11DeleteCloudSource\x12\x1c.v1.DeleteCloudSourceRequest\x1a\t.v1.Empty\"\x1e\x82\xd3\xe4\x93\x02\x18*\x16/v1/cloud-sources/{id}\x12[\n" +
	"\x0fTestCloudSource\x12\x1a.v1.TestCloudSourceRequest\x1a\t.v1.Empty\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/v1/cloud-sources/testB7\n" +
	"\x18io.stackrox.proto.api.v1Z\v./api/v1;v1\x92\x03\r\xd2>\x02\x10\x02\b\x02\x10\x01 \x020\x01X\x02b\beditionsp\xe8\a"

var file_api_v1_cloud_source_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_cloud_source_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_v1_cloud_source_service_proto_goTypes = []any{
	(CloudSource_Type)(0),             // 0: v1.CloudSource.Type
	(*CloudSource)(nil),               // 1: v1.CloudSource
	(*PaladinCloudConfig)(nil),        // 2: v1.PaladinCloudConfig
	(*OCMConfig)(nil),                 // 3: v1.OCMConfig
	(*CloudSourcesFilter)(nil),        // 4: v1.CloudSourcesFilter
	(*CountCloudSourcesRequest)(nil),  // 5: v1.CountCloudSourcesRequest
	(*CountCloudSourcesResponse)(nil), // 6: v1.CountCloudSourcesResponse
	(*GetCloudSourceRequest)(nil),     // 7: v1.GetCloudSourceRequest
	(*GetCloudSourceResponse)(nil),    // 8: v1.GetCloudSourceResponse
	(*ListCloudSourcesRequest)(nil),   // 9: v1.ListCloudSourcesRequest
	(*ListCloudSourcesResponse)(nil),  // 10: v1.ListCloudSourcesResponse
	(*CreateCloudSourceRequest)(nil),  // 11: v1.CreateCloudSourceRequest
	(*CreateCloudSourceResponse)(nil), // 12: v1.CreateCloudSourceResponse
	(*UpdateCloudSourceRequest)(nil),  // 13: v1.UpdateCloudSourceRequest
	(*DeleteCloudSourceRequest)(nil),  // 14: v1.DeleteCloudSourceRequest
	(*TestCloudSourceRequest)(nil),    // 15: v1.TestCloudSourceRequest
	(*CloudSource_Credentials)(nil),   // 16: v1.CloudSource.Credentials
	(*Pagination)(nil),                // 17: v1.Pagination
	(*Empty)(nil),                     // 18: v1.Empty
}
var file_api_v1_cloud_source_service_proto_depIdxs = []int32{
	0,  // 0: v1.CloudSource.type:type_name -> v1.CloudSource.Type
	16, // 1: v1.CloudSource.credentials:type_name -> v1.CloudSource.Credentials
	2,  // 2: v1.CloudSource.paladin_cloud:type_name -> v1.PaladinCloudConfig
	3,  // 3: v1.CloudSource.ocm:type_name -> v1.OCMConfig
	0,  // 4: v1.CloudSourcesFilter.types:type_name -> v1.CloudSource.Type
	4,  // 5: v1.CountCloudSourcesRequest.filter:type_name -> v1.CloudSourcesFilter
	1,  // 6: v1.GetCloudSourceResponse.cloud_source:type_name -> v1.CloudSource
	17, // 7: v1.ListCloudSourcesRequest.pagination:type_name -> v1.Pagination
	4,  // 8: v1.ListCloudSourcesRequest.filter:type_name -> v1.CloudSourcesFilter
	1,  // 9: v1.ListCloudSourcesResponse.cloud_sources:type_name -> v1.CloudSource
	1,  // 10: v1.CreateCloudSourceRequest.cloud_source:type_name -> v1.CloudSource
	1,  // 11: v1.CreateCloudSourceResponse.cloud_source:type_name -> v1.CloudSource
	1,  // 12: v1.UpdateCloudSourceRequest.cloud_source:type_name -> v1.CloudSource
	1,  // 13: v1.TestCloudSourceRequest.cloud_source:type_name -> v1.CloudSource
	5,  // 14: v1.CloudSourcesService.CountCloudSources:input_type -> v1.CountCloudSourcesRequest
	7,  // 15: v1.CloudSourcesService.GetCloudSource:input_type -> v1.GetCloudSourceRequest
	9,  // 16: v1.CloudSourcesService.ListCloudSources:input_type -> v1.ListCloudSourcesRequest
	11, // 17: v1.CloudSourcesService.CreateCloudSource:input_type -> v1.CreateCloudSourceRequest
	13, // 18: v1.CloudSourcesService.UpdateCloudSource:input_type -> v1.UpdateCloudSourceRequest
	14, // 19: v1.CloudSourcesService.DeleteCloudSource:input_type -> v1.DeleteCloudSourceRequest
	15, // 20: v1.CloudSourcesService.TestCloudSource:input_type -> v1.TestCloudSourceRequest
	6,  // 21: v1.CloudSourcesService.CountCloudSources:output_type -> v1.CountCloudSourcesResponse
	8,  // 22: v1.CloudSourcesService.GetCloudSource:output_type -> v1.GetCloudSourceResponse
	10, // 23: v1.CloudSourcesService.ListCloudSources:output_type -> v1.ListCloudSourcesResponse
	12, // 24: v1.CloudSourcesService.CreateCloudSource:output_type -> v1.CreateCloudSourceResponse
	18, // 25: v1.CloudSourcesService.UpdateCloudSource:output_type -> v1.Empty
	18, // 26: v1.CloudSourcesService.DeleteCloudSource:output_type -> v1.Empty
	18, // 27: v1.CloudSourcesService.TestCloudSource:output_type -> v1.Empty
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_v1_cloud_source_service_proto_init() }
func file_api_v1_cloud_source_service_proto_init() {
	if File_api_v1_cloud_source_service_proto != nil {
		return
	}
	file_api_v1_empty_proto_init()
	file_api_v1_pagination_proto_init()
	file_api_v1_cloud_source_service_proto_msgTypes[0].OneofWrappers = []any{
		(*CloudSource_PaladinCloud)(nil),
		(*CloudSource_Ocm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1_cloud_source_service_proto_rawDesc), len(file_api_v1_cloud_source_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_cloud_source_service_proto_goTypes,
		DependencyIndexes: file_api_v1_cloud_source_service_proto_depIdxs,
		EnumInfos:         file_api_v1_cloud_source_service_proto_enumTypes,
		MessageInfos:      file_api_v1_cloud_source_service_proto_msgTypes,
	}.Build()
	File_api_v1_cloud_source_service_proto = out.File
	file_api_v1_cloud_source_service_proto_goTypes = nil
	file_api_v1_cloud_source_service_proto_depIdxs = nil
}
