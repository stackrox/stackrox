// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/vuln_req_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName     = "/v1.VulnerabilityRequestService/GetVulnerabilityRequest"
	VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName   = "/v1.VulnerabilityRequestService/ListVulnerabilityRequests"
	VulnerabilityRequestService_DeferVulnerability_FullMethodName          = "/v1.VulnerabilityRequestService/DeferVulnerability"
	VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName  = "/v1.VulnerabilityRequestService/FalsePositiveVulnerability"
	VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName = "/v1.VulnerabilityRequestService/ApproveVulnerabilityRequest"
	VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName    = "/v1.VulnerabilityRequestService/DenyVulnerabilityRequest"
	VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName  = "/v1.VulnerabilityRequestService/UpdateVulnerabilityRequest"
	VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName    = "/v1.VulnerabilityRequestService/UndoVulnerabilityRequest"
	VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName  = "/v1.VulnerabilityRequestService/DeleteVulnerabilityRequest"
)

// VulnerabilityRequestServiceClient is the client API for VulnerabilityRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VulnerabilityRequestServiceClient interface {
	// GetVulnerabilityRequest returns the requested vulnerability request by ID.
	GetVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityRequestResponse, error)
	// ListVulnerabilityRequests returns the list of vulnerability requests.
	ListVulnerabilityRequests(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityRequestsResponse, error)
	// DeferVulnerability starts the deferral process for the specified vulnerability.
	DeferVulnerability(ctx context.Context, in *DeferVulnRequest, opts ...grpc.CallOption) (*DeferVulnResponse, error)
	// FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.
	FalsePositiveVulnerability(ctx context.Context, in *FalsePositiveVulnRequest, opts ...grpc.CallOption) (*FalsePositiveVulnResponse, error)
	// ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the
	// associated vulnerabilities are not watched in workflows such as policy detection, risk, etc.
	ApproveVulnerabilityRequest(ctx context.Context, in *ApproveVulnRequest, opts ...grpc.CallOption) (*ApproveVulnRequestResponse, error)
	// DenyVulnRequest denies a vulnerability request.
	DenyVulnerabilityRequest(ctx context.Context, in *DenyVulnRequest, opts ...grpc.CallOption) (*DenyVulnRequestResponse, error)
	// UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.
	UpdateVulnerabilityRequest(ctx context.Context, in *UpdateVulnRequest, opts ...grpc.CallOption) (*UpdateVulnRequestResponse, error)
	// UndoVulnerabilityRequest undoes a vulnerability request.
	UndoVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*UndoVulnRequestResponse, error)
	// DeleteVulnerabilityRequest deletes a vulnerability request.
	DeleteVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type vulnerabilityRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilityRequestServiceClient(cc grpc.ClientConnInterface) VulnerabilityRequestServiceClient {
	return &vulnerabilityRequestServiceClient{cc}
}

func (c *vulnerabilityRequestServiceClient) GetVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityRequestResponse, error) {
	out := new(GetVulnerabilityRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) ListVulnerabilityRequests(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityRequestsResponse, error) {
	out := new(ListVulnerabilityRequestsResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DeferVulnerability(ctx context.Context, in *DeferVulnRequest, opts ...grpc.CallOption) (*DeferVulnResponse, error) {
	out := new(DeferVulnResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DeferVulnerability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) FalsePositiveVulnerability(ctx context.Context, in *FalsePositiveVulnRequest, opts ...grpc.CallOption) (*FalsePositiveVulnResponse, error) {
	out := new(FalsePositiveVulnResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) ApproveVulnerabilityRequest(ctx context.Context, in *ApproveVulnRequest, opts ...grpc.CallOption) (*ApproveVulnRequestResponse, error) {
	out := new(ApproveVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DenyVulnerabilityRequest(ctx context.Context, in *DenyVulnRequest, opts ...grpc.CallOption) (*DenyVulnRequestResponse, error) {
	out := new(DenyVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) UpdateVulnerabilityRequest(ctx context.Context, in *UpdateVulnRequest, opts ...grpc.CallOption) (*UpdateVulnRequestResponse, error) {
	out := new(UpdateVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) UndoVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*UndoVulnRequestResponse, error) {
	out := new(UndoVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DeleteVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilityRequestServiceServer is the server API for VulnerabilityRequestService service.
// All implementations should embed UnimplementedVulnerabilityRequestServiceServer
// for forward compatibility
type VulnerabilityRequestServiceServer interface {
	// GetVulnerabilityRequest returns the requested vulnerability request by ID.
	GetVulnerabilityRequest(context.Context, *ResourceByID) (*GetVulnerabilityRequestResponse, error)
	// ListVulnerabilityRequests returns the list of vulnerability requests.
	ListVulnerabilityRequests(context.Context, *RawQuery) (*ListVulnerabilityRequestsResponse, error)
	// DeferVulnerability starts the deferral process for the specified vulnerability.
	DeferVulnerability(context.Context, *DeferVulnRequest) (*DeferVulnResponse, error)
	// FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.
	FalsePositiveVulnerability(context.Context, *FalsePositiveVulnRequest) (*FalsePositiveVulnResponse, error)
	// ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the
	// associated vulnerabilities are not watched in workflows such as policy detection, risk, etc.
	ApproveVulnerabilityRequest(context.Context, *ApproveVulnRequest) (*ApproveVulnRequestResponse, error)
	// DenyVulnRequest denies a vulnerability request.
	DenyVulnerabilityRequest(context.Context, *DenyVulnRequest) (*DenyVulnRequestResponse, error)
	// UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.
	UpdateVulnerabilityRequest(context.Context, *UpdateVulnRequest) (*UpdateVulnRequestResponse, error)
	// UndoVulnerabilityRequest undoes a vulnerability request.
	UndoVulnerabilityRequest(context.Context, *ResourceByID) (*UndoVulnRequestResponse, error)
	// DeleteVulnerabilityRequest deletes a vulnerability request.
	DeleteVulnerabilityRequest(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedVulnerabilityRequestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVulnerabilityRequestServiceServer struct {
}

func (UnimplementedVulnerabilityRequestServiceServer) GetVulnerabilityRequest(context.Context, *ResourceByID) (*GetVulnerabilityRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) ListVulnerabilityRequests(context.Context, *RawQuery) (*ListVulnerabilityRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilityRequests not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DeferVulnerability(context.Context, *DeferVulnRequest) (*DeferVulnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeferVulnerability not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) FalsePositiveVulnerability(context.Context, *FalsePositiveVulnRequest) (*FalsePositiveVulnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FalsePositiveVulnerability not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) ApproveVulnerabilityRequest(context.Context, *ApproveVulnRequest) (*ApproveVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DenyVulnerabilityRequest(context.Context, *DenyVulnRequest) (*DenyVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) UpdateVulnerabilityRequest(context.Context, *UpdateVulnRequest) (*UpdateVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) UndoVulnerabilityRequest(context.Context, *ResourceByID) (*UndoVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DeleteVulnerabilityRequest(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVulnerabilityRequest not implemented")
}

// UnsafeVulnerabilityRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnerabilityRequestServiceServer will
// result in compilation errors.
type UnsafeVulnerabilityRequestServiceServer interface {
	mustEmbedUnimplementedVulnerabilityRequestServiceServer()
}

func RegisterVulnerabilityRequestServiceServer(s grpc.ServiceRegistrar, srv VulnerabilityRequestServiceServer) {
	s.RegisterService(&VulnerabilityRequestService_ServiceDesc, srv)
}

func _VulnerabilityRequestService_GetVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).GetVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).GetVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_ListVulnerabilityRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).ListVulnerabilityRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).ListVulnerabilityRequests(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DeferVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DeferVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DeferVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DeferVulnerability(ctx, req.(*DeferVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_FalsePositiveVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FalsePositiveVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).FalsePositiveVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).FalsePositiveVulnerability(ctx, req.(*FalsePositiveVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_ApproveVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).ApproveVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).ApproveVulnerabilityRequest(ctx, req.(*ApproveVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DenyVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DenyVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DenyVulnerabilityRequest(ctx, req.(*DenyVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_UpdateVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).UpdateVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).UpdateVulnerabilityRequest(ctx, req.(*UpdateVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_UndoVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).UndoVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).UndoVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DeleteVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DeleteVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DeleteVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// VulnerabilityRequestService_ServiceDesc is the grpc.ServiceDesc for VulnerabilityRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VulnerabilityRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VulnerabilityRequestService",
	HandlerType: (*VulnerabilityRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_GetVulnerabilityRequest_Handler,
		},
		{
			MethodName: "ListVulnerabilityRequests",
			Handler:    _VulnerabilityRequestService_ListVulnerabilityRequests_Handler,
		},
		{
			MethodName: "DeferVulnerability",
			Handler:    _VulnerabilityRequestService_DeferVulnerability_Handler,
		},
		{
			MethodName: "FalsePositiveVulnerability",
			Handler:    _VulnerabilityRequestService_FalsePositiveVulnerability_Handler,
		},
		{
			MethodName: "ApproveVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_ApproveVulnerabilityRequest_Handler,
		},
		{
			MethodName: "DenyVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_DenyVulnerabilityRequest_Handler,
		},
		{
			MethodName: "UpdateVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_UpdateVulnerabilityRequest_Handler,
		},
		{
			MethodName: "UndoVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_UndoVulnerabilityRequest_Handler,
		},
		{
			MethodName: "DeleteVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_DeleteVulnerabilityRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vuln_req_service.proto",
}
