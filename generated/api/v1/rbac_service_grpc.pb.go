// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/rbac_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RbacService_GetRole_FullMethodName          = "/v1.RbacService/GetRole"
	RbacService_ListRoles_FullMethodName        = "/v1.RbacService/ListRoles"
	RbacService_GetRoleBinding_FullMethodName   = "/v1.RbacService/GetRoleBinding"
	RbacService_ListRoleBindings_FullMethodName = "/v1.RbacService/ListRoleBindings"
	RbacService_GetSubject_FullMethodName       = "/v1.RbacService/GetSubject"
	RbacService_ListSubjects_FullMethodName     = "/v1.RbacService/ListSubjects"
)

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetRoleResponse, error)
	ListRoles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListRolesResponse, error)
	GetRoleBinding(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetRoleBindingResponse, error)
	ListRoleBindings(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListRoleBindingsResponse, error)
	// Subjects served from this API are Groups and Users only.
	// Id in this case is the Name field, since for users and groups, that is unique, and subjects do not have IDs.
	GetSubject(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetSubjectResponse, error)
	ListSubjects(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListSubjectsResponse, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, RbacService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) ListRoles(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, RbacService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetRoleBinding(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetRoleBindingResponse, error) {
	out := new(GetRoleBindingResponse)
	err := c.cc.Invoke(ctx, RbacService_GetRoleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) ListRoleBindings(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListRoleBindingsResponse, error) {
	out := new(ListRoleBindingsResponse)
	err := c.cc.Invoke(ctx, RbacService_ListRoleBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetSubject(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetSubjectResponse, error) {
	out := new(GetSubjectResponse)
	err := c.cc.Invoke(ctx, RbacService_GetSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) ListSubjects(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListSubjectsResponse, error) {
	out := new(ListSubjectsResponse)
	err := c.cc.Invoke(ctx, RbacService_ListSubjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations should embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	GetRole(context.Context, *ResourceByID) (*GetRoleResponse, error)
	ListRoles(context.Context, *RawQuery) (*ListRolesResponse, error)
	GetRoleBinding(context.Context, *ResourceByID) (*GetRoleBindingResponse, error)
	ListRoleBindings(context.Context, *RawQuery) (*ListRoleBindingsResponse, error)
	// Subjects served from this API are Groups and Users only.
	// Id in this case is the Name field, since for users and groups, that is unique, and subjects do not have IDs.
	GetSubject(context.Context, *ResourceByID) (*GetSubjectResponse, error)
	ListSubjects(context.Context, *RawQuery) (*ListSubjectsResponse, error)
}

// UnimplementedRbacServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) GetRole(context.Context, *ResourceByID) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRbacServiceServer) ListRoles(context.Context, *RawQuery) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRbacServiceServer) GetRoleBinding(context.Context, *ResourceByID) (*GetRoleBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleBinding not implemented")
}
func (UnimplementedRbacServiceServer) ListRoleBindings(context.Context, *RawQuery) (*ListRoleBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleBindings not implemented")
}
func (UnimplementedRbacServiceServer) GetSubject(context.Context, *ResourceByID) (*GetSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedRbacServiceServer) ListSubjects(context.Context, *RawQuery) (*ListSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjects not implemented")
}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetRole(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).ListRoles(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_GetRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetRoleBinding(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_ListRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).ListRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_ListRoleBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).ListRoleBindings(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_GetSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetSubject(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_ListSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).ListSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_ListSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).ListSubjects(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _RbacService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RbacService_ListRoles_Handler,
		},
		{
			MethodName: "GetRoleBinding",
			Handler:    _RbacService_GetRoleBinding_Handler,
		},
		{
			MethodName: "ListRoleBindings",
			Handler:    _RbacService_ListRoleBindings_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _RbacService_GetSubject_Handler,
		},
		{
			MethodName: "ListSubjects",
			Handler:    _RbacService_ListSubjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/rbac_service.proto",
}
