// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/sensor_upgrade_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateSensorUpgradeConfigRequest struct {
	Config               *storage.SensorUpgradeConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UpdateSensorUpgradeConfigRequest) Reset()         { *m = UpdateSensorUpgradeConfigRequest{} }
func (m *UpdateSensorUpgradeConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSensorUpgradeConfigRequest) ProtoMessage()    {}
func (*UpdateSensorUpgradeConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35a4744ac589f88a, []int{0}
}
func (m *UpdateSensorUpgradeConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSensorUpgradeConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSensorUpgradeConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSensorUpgradeConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSensorUpgradeConfigRequest.Merge(m, src)
}
func (m *UpdateSensorUpgradeConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSensorUpgradeConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSensorUpgradeConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSensorUpgradeConfigRequest proto.InternalMessageInfo

func (m *UpdateSensorUpgradeConfigRequest) GetConfig() *storage.SensorUpgradeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateSensorUpgradeConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateSensorUpgradeConfigRequest) Clone() *UpdateSensorUpgradeConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateSensorUpgradeConfigRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type GetSensorUpgradeConfigResponse struct {
	Config               *storage.SensorUpgradeConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetSensorUpgradeConfigResponse) Reset()         { *m = GetSensorUpgradeConfigResponse{} }
func (m *GetSensorUpgradeConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetSensorUpgradeConfigResponse) ProtoMessage()    {}
func (*GetSensorUpgradeConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35a4744ac589f88a, []int{1}
}
func (m *GetSensorUpgradeConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSensorUpgradeConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSensorUpgradeConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSensorUpgradeConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSensorUpgradeConfigResponse.Merge(m, src)
}
func (m *GetSensorUpgradeConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSensorUpgradeConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSensorUpgradeConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSensorUpgradeConfigResponse proto.InternalMessageInfo

func (m *GetSensorUpgradeConfigResponse) GetConfig() *storage.SensorUpgradeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetSensorUpgradeConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetSensorUpgradeConfigResponse) Clone() *GetSensorUpgradeConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetSensorUpgradeConfigResponse)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*UpdateSensorUpgradeConfigRequest)(nil), "v1.UpdateSensorUpgradeConfigRequest")
	proto.RegisterType((*GetSensorUpgradeConfigResponse)(nil), "v1.GetSensorUpgradeConfigResponse")
}

func init() {
	proto.RegisterFile("api/v1/sensor_upgrade_service.proto", fileDescriptor_35a4744ac589f88a)
}

var fileDescriptor_35a4744ac589f88a = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6a, 0x1a, 0x41,
	0x18, 0xc7, 0x5d, 0x0b, 0x42, 0xa7, 0x97, 0x32, 0x95, 0xa2, 0x5b, 0xd9, 0xea, 0x54, 0x68, 0x91,
	0x32, 0xcb, 0xda, 0x9e, 0x7a, 0xd4, 0x96, 0xd2, 0xab, 0xd6, 0x20, 0x21, 0x20, 0x93, 0xf5, 0xcb,
	0x32, 0x89, 0xee, 0x6c, 0x66, 0x66, 0x97, 0x48, 0xc8, 0x25, 0xaf, 0x90, 0x4b, 0x9e, 0x27, 0xa7,
	0x1c, 0x03, 0x79, 0x81, 0x60, 0xf2, 0x20, 0x61, 0x77, 0x07, 0x8c, 0x61, 0x35, 0x90, 0x9b, 0xfc,
	0xbf, 0xcf, 0xdf, 0xef, 0xe3, 0xbf, 0x83, 0xbe, 0xb0, 0x88, 0xbb, 0x89, 0xe7, 0x2a, 0x08, 0x95,
	0x90, 0x93, 0x38, 0x0a, 0x24, 0x9b, 0xc2, 0x44, 0x81, 0x4c, 0xb8, 0x0f, 0x34, 0x92, 0x42, 0x0b,
	0x5c, 0x4e, 0x3c, 0xbb, 0x11, 0x08, 0x11, 0xcc, 0xc0, 0x4d, 0xf7, 0x59, 0x18, 0x0a, 0xcd, 0x34,
	0x17, 0xa1, 0xca, 0x37, 0x6c, 0x6c, 0x30, 0x30, 0x8f, 0xf4, 0xc2, 0x64, 0x1f, 0x4c, 0xe6, 0x8b,
	0xf9, 0x5c, 0x84, 0x26, 0x6c, 0x28, 0x2d, 0x24, 0x0b, 0xe0, 0x99, 0x30, 0x9f, 0x92, 0x31, 0x6a,
	0x8e, 0xa2, 0x29, 0xd3, 0x30, 0xcc, 0xa6, 0xa3, 0x7c, 0xd8, 0x17, 0xe1, 0x01, 0x0f, 0x06, 0x70,
	0x1c, 0x83, 0xd2, 0xf8, 0x27, 0xaa, 0xf8, 0x59, 0x50, 0xb3, 0x9a, 0xd6, 0xb7, 0x77, 0xdd, 0x06,
	0x35, 0x48, 0x5a, 0xf4, 0x27, 0xb3, 0x4b, 0x76, 0x90, 0xf3, 0x17, 0x74, 0x21, 0x56, 0x45, 0x22,
	0x54, 0xf0, 0x3a, 0x6e, 0xf7, 0xea, 0x0d, 0xaa, 0xae, 0xcd, 0x87, 0x79, 0x73, 0xf8, 0x10, 0x7d,
	0x2c, 0x16, 0xe2, 0xb7, 0x34, 0xf1, 0xe8, 0x9f, 0xb4, 0x28, 0x9b, 0xa4, 0x3f, 0xb7, 0xdf, 0x45,
	0x5a, 0xe7, 0xb7, 0x0f, 0x17, 0xe5, 0x4f, 0xb8, 0xbe, 0xfa, 0x4c, 0xa6, 0x34, 0xe5, 0xe6, 0x47,
	0x60, 0x89, 0xea, 0x1b, 0x6b, 0xc3, 0xed, 0xd4, 0xf1, 0x52, 0xab, 0xf6, 0xea, 0x28, 0xd2, 0xce,
	0x84, 0x0e, 0xd9, 0x2c, 0xfc, 0x65, 0x75, 0xf0, 0x1e, 0xaa, 0xfe, 0x97, 0x3c, 0x08, 0x40, 0xae,
	0x51, 0xf1, 0xfb, 0x14, 0x34, 0x00, 0x25, 0x62, 0xe9, 0x43, 0x6f, 0xf1, 0xef, 0xf7, 0x53, 0xf4,
	0xd7, 0x0c, 0xdd, 0x22, 0x9f, 0x8b, 0xd0, 0xb3, 0x58, 0x69, 0x90, 0xee, 0x29, 0x9f, 0x9e, 0xe1,
	0x19, 0xaa, 0xaf, 0xd1, 0xfb, 0x20, 0xf5, 0xc0, 0xbc, 0xb9, 0xed, 0x8a, 0x6e, 0xa6, 0xf8, 0x4e,
	0x3a, 0x05, 0x0a, 0x99, 0x12, 0xc0, 0x88, 0x7c, 0x90, 0x5a, 0x65, 0xb6, 0x1e, 0xbd, 0x5e, 0x3a,
	0xd6, 0xcd, 0xd2, 0xb1, 0xee, 0x96, 0x8e, 0x75, 0x79, 0xef, 0x94, 0x50, 0x8d, 0x0b, 0xaa, 0x34,
	0xf3, 0x8f, 0xa4, 0x38, 0xc9, 0xdf, 0x26, 0x65, 0x11, 0xa7, 0x89, 0xb7, 0x5b, 0x4e, 0xbc, 0x71,
	0x69, 0xbf, 0x92, 0x65, 0x3f, 0x1e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x45, 0xf5, 0x2b, 0x97, 0x3f,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorUpgradeServiceClient is the client API for SensorUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type SensorUpgradeServiceClient interface {
	GetSensorUpgradeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSensorUpgradeConfigResponse, error)
	UpdateSensorUpgradeConfig(ctx context.Context, in *UpdateSensorUpgradeConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	TriggerSensorUpgrade(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	TriggerSensorCertRotation(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type sensorUpgradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorUpgradeServiceClient(cc grpc.ClientConnInterface) SensorUpgradeServiceClient {
	return &sensorUpgradeServiceClient{cc}
}

func (c *sensorUpgradeServiceClient) GetSensorUpgradeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSensorUpgradeConfigResponse, error) {
	out := new(GetSensorUpgradeConfigResponse)
	err := c.cc.Invoke(ctx, "/v1.SensorUpgradeService/GetSensorUpgradeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) UpdateSensorUpgradeConfig(ctx context.Context, in *UpdateSensorUpgradeConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.SensorUpgradeService/UpdateSensorUpgradeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) TriggerSensorUpgrade(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.SensorUpgradeService/TriggerSensorUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) TriggerSensorCertRotation(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.SensorUpgradeService/TriggerSensorCertRotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorUpgradeServiceServer is the server API for SensorUpgradeService service.
type SensorUpgradeServiceServer interface {
	GetSensorUpgradeConfig(context.Context, *Empty) (*GetSensorUpgradeConfigResponse, error)
	UpdateSensorUpgradeConfig(context.Context, *UpdateSensorUpgradeConfigRequest) (*Empty, error)
	TriggerSensorUpgrade(context.Context, *ResourceByID) (*Empty, error)
	TriggerSensorCertRotation(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedSensorUpgradeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorUpgradeServiceServer struct {
}

func (*UnimplementedSensorUpgradeServiceServer) GetSensorUpgradeConfig(ctx context.Context, req *Empty) (*GetSensorUpgradeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorUpgradeConfig not implemented")
}
func (*UnimplementedSensorUpgradeServiceServer) UpdateSensorUpgradeConfig(ctx context.Context, req *UpdateSensorUpgradeConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensorUpgradeConfig not implemented")
}
func (*UnimplementedSensorUpgradeServiceServer) TriggerSensorUpgrade(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSensorUpgrade not implemented")
}
func (*UnimplementedSensorUpgradeServiceServer) TriggerSensorCertRotation(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSensorCertRotation not implemented")
}

func RegisterSensorUpgradeServiceServer(s *grpc.Server, srv SensorUpgradeServiceServer) {
	s.RegisterService(&_SensorUpgradeService_serviceDesc, srv)
}

func _SensorUpgradeService_GetSensorUpgradeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).GetSensorUpgradeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SensorUpgradeService/GetSensorUpgradeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).GetSensorUpgradeConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_UpdateSensorUpgradeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorUpgradeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).UpdateSensorUpgradeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SensorUpgradeService/UpdateSensorUpgradeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).UpdateSensorUpgradeConfig(ctx, req.(*UpdateSensorUpgradeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_TriggerSensorUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).TriggerSensorUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SensorUpgradeService/TriggerSensorUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).TriggerSensorUpgrade(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_TriggerSensorCertRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).TriggerSensorCertRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SensorUpgradeService/TriggerSensorCertRotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).TriggerSensorCertRotation(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorUpgradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SensorUpgradeService",
	HandlerType: (*SensorUpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorUpgradeConfig",
			Handler:    _SensorUpgradeService_GetSensorUpgradeConfig_Handler,
		},
		{
			MethodName: "UpdateSensorUpgradeConfig",
			Handler:    _SensorUpgradeService_UpdateSensorUpgradeConfig_Handler,
		},
		{
			MethodName: "TriggerSensorUpgrade",
			Handler:    _SensorUpgradeService_TriggerSensorUpgrade_Handler,
		},
		{
			MethodName: "TriggerSensorCertRotation",
			Handler:    _SensorUpgradeService_TriggerSensorCertRotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/sensor_upgrade_service.proto",
}

func (m *UpdateSensorUpgradeConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSensorUpgradeConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSensorUpgradeConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorUpgradeService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSensorUpgradeConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSensorUpgradeConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSensorUpgradeConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensorUpgradeService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensorUpgradeService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensorUpgradeService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateSensorUpgradeConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSensorUpgradeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSensorUpgradeConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSensorUpgradeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensorUpgradeService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensorUpgradeService(x uint64) (n int) {
	return sovSensorUpgradeService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateSensorUpgradeConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSensorUpgradeConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSensorUpgradeConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.SensorUpgradeConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSensorUpgradeConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensorUpgradeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSensorUpgradeConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSensorUpgradeConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensorUpgradeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.SensorUpgradeConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensorUpgradeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSensorUpgradeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensorUpgradeService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensorUpgradeService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgradeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensorUpgradeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensorUpgradeService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensorUpgradeService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensorUpgradeService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensorUpgradeService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensorUpgradeService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensorUpgradeService = fmt.Errorf("proto: unexpected end of group")
)
