{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/alert_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/alerts": {
      "get": {
        "summary": "List returns the slim list version of the alerts.",
        "operationId": "AlertService_ListAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      },
      "delete": {
        "operationId": "AlertService_DeleteAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "confirm",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/resolve": {
      "patch": {
        "summary": "ResolveAlertsByQuery marks alerts matching search query as resolved.",
        "operationId": "AlertService_ResolveAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResolveAlertsRequest"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/counts": {
      "get": {
        "summary": "GetAlertsCounts returns the number of alerts in the requested cluster or category.",
        "operationId": "AlertService_GetAlertsCounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertsCountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "request.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "request.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "request.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "CATEGORY",
              "CLUSTER"
            ],
            "default": "UNSET"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/groups": {
      "get": {
        "summary": "GetAlertsGroup returns alerts grouped by policy.",
        "operationId": "AlertService_GetAlertsGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertsGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/timeseries": {
      "get": {
        "summary": "GetAlertTimeseries returns the alerts sorted by time.",
        "operationId": "AlertService_GetAlertTimeseries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertTimeseriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}": {
      "get": {
        "summary": "GetAlert returns the alert given its id.",
        "operationId": "AlertService_GetAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAlert"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}/resolve": {
      "patch": {
        "summary": "ResolveAlert marks the given alert (by ID) as resolved.",
        "operationId": "AlertService_ResolveAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResolveAlertRequest"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}/snooze": {
      "patch": {
        "summary": "SnoozeAlert is deprecated.",
        "operationId": "AlertService_SnoozeAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SnoozeAlertRequest"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alertscount": {
      "get": {
        "summary": "CountAlerts counts how many alerts match the get request.",
        "operationId": "AlertService_CountAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CountAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    }
  },
  "definitions": {
    "AlertDeploymentContainer": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageContainerImage"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AlertEnforcement": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/storageEnforcementAction"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlertGroupAlertCounts": {
      "type": "object",
      "properties": {
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AlertProcessViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageProcessIndicator"
          }
        }
      }
    },
    "AlertResource": {
      "type": "object",
      "properties": {
        "resourceType": {
          "$ref": "#/definitions/AlertResourceResourceType"
        },
        "name": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        }
      },
      "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)"
    },
    "AlertResourceResourceType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SECRETS",
        "CONFIGMAPS"
      ],
      "default": "UNKNOWN"
    },
    "AlertViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "keyValueAttrs": {
          "$ref": "#/definitions/ViolationKeyValueAttrs"
        },
        "networkFlowInfo": {
          "$ref": "#/definitions/ViolationNetworkFlowInfo"
        },
        "type": {
          "$ref": "#/definitions/AlertViolationType",
          "description": "'type' is for internal use only."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates violation time. This field differs from top-level field 'time' which represents last time the alert\noccurred in case of multiple occurrences of the policy alert. As of 55.0, this field is set only for kubernetes\nevent violations, but may not be limited to it in future."
        }
      }
    },
    "AlertViolationType": {
      "type": "string",
      "enum": [
        "GENERIC",
        "K8S_EVENT",
        "NETWORK_FLOW"
      ],
      "default": "GENERIC"
    },
    "ClusterAlertsAlertEvents": {
      "type": "object",
      "properties": {
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AlertEvent"
          }
        }
      }
    },
    "EnvironmentConfigEnvVarSource": {
      "type": "string",
      "enum": [
        "UNSET",
        "RAW",
        "SECRET_KEY",
        "CONFIG_MAP_KEY",
        "FIELD",
        "RESOURCE_FIELD",
        "UNKNOWN"
      ],
      "default": "UNSET",
      "title": "For any update to EnvVarSource, please also update 'ui/src/messages/common.js'"
    },
    "GetAlertTimeseriesResponseClusterAlerts": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "severities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterAlertsAlertEvents"
          }
        }
      }
    },
    "GetAlertsCountsRequestRequestGroup": {
      "type": "string",
      "enum": [
        "UNSET",
        "CATEGORY",
        "CLUSTER"
      ],
      "default": "UNSET"
    },
    "GetAlertsCountsResponseAlertGroup": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertGroupAlertCounts"
          }
        }
      }
    },
    "KeyValueAttrsKeyValueAttr": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ListAlertCommonEntityInfo": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/storageListAlertResourceType"
        }
      },
      "description": "Fields common to all entities that an alert might belong to."
    },
    "ListAlertPolicyDevFields": {
      "type": "object",
      "properties": {
        "SORTName": {
          "type": "string"
        }
      }
    },
    "ListAlertResourceEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "NetworkFlowInfoEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/storageNetworkEntityInfoType"
        },
        "deploymentNamespace": {
          "type": "string"
        },
        "deploymentType": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PortConfigExposureLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "EXTERNAL",
        "NODE",
        "INTERNAL",
        "HOST",
        "ROUTE"
      ],
      "default": "UNSET"
    },
    "ProcessSignalLineageInfo": {
      "type": "object",
      "properties": {
        "parentUid": {
          "type": "integer",
          "format": "int64"
        },
        "parentExecFilePath": {
          "type": "string"
        }
      }
    },
    "ViolationKeyValueAttrs": {
      "type": "object",
      "properties": {
        "attrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValueAttrsKeyValueAttr"
          }
        }
      }
    },
    "ViolationNetworkFlowInfo": {
      "type": "object",
      "properties": {
        "protocol": {
          "$ref": "#/definitions/storageL4Protocol"
        },
        "source": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        },
        "destination": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "lifecycleStage": {
          "$ref": "#/definitions/storageLifecycleStage"
        },
        "clusterId": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageAlertDeployment",
          "title": "Represents an alert on a deployment\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "image": {
          "$ref": "#/definitions/storageContainerImage",
          "title": "Represents an alert on a container image.\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "resource": {
          "$ref": "#/definitions/AlertResource",
          "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "violations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertViolation"
          },
          "description": "For run-time phase alert, a maximum of 40 violations are retained."
        },
        "processViolation": {
          "$ref": "#/definitions/AlertProcessViolation"
        },
        "enforcement": {
          "$ref": "#/definitions/AlertEnforcement"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "firstOccurred": {
          "type": "string",
          "format": "date-time"
        },
        "resolvedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the alert was resolved. Only set if ViolationState is RESOLVED."
        },
        "state": {
          "$ref": "#/definitions/storageViolationState"
        },
        "snoozeTill": {
          "type": "string",
          "format": "date-time"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageAlertDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterId": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertDeploymentContainer"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inactive": {
          "type": "boolean"
        }
      }
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageComparator": {
      "type": "string",
      "enum": [
        "LESS_THAN",
        "LESS_THAN_OR_EQUALS",
        "EQUALS",
        "GREATER_THAN_OR_EQUALS",
        "GREATER_THAN"
      ],
      "default": "LESS_THAN"
    },
    "storageComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "storageContainerImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/storageImageName"
        },
        "notPullable": {
          "type": "boolean"
        },
        "isClusterLocal": {
          "type": "boolean"
        }
      },
      "title": "Next tag: 12"
    },
    "storageDockerfileLineRuleField": {
      "type": "object",
      "properties": {
        "instruction": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageScope"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "storageHostMountPolicy": {
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "storageImageName": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        }
      }
    },
    "storageImageNamePolicy": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "storageKeyValuePolicy": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "envVarSource": {
          "$ref": "#/definitions/EnvironmentConfigEnvVarSource"
        }
      }
    },
    "storageL4Protocol": {
      "type": "string",
      "enum": [
        "L4_PROTOCOL_UNKNOWN",
        "L4_PROTOCOL_TCP",
        "L4_PROTOCOL_UDP",
        "L4_PROTOCOL_ICMP",
        "L4_PROTOCOL_RAW",
        "L4_PROTOCOL_SCTP",
        "L4_PROTOCOL_ANY"
      ],
      "default": "L4_PROTOCOL_UNKNOWN"
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageListAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lifecycleStage": {
          "$ref": "#/definitions/storageLifecycleStage"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "policy": {
          "$ref": "#/definitions/storageListAlertPolicy"
        },
        "state": {
          "$ref": "#/definitions/storageViolationState"
        },
        "enforcementCount": {
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enforcementAction": {
          "$ref": "#/definitions/storageEnforcementAction"
        },
        "commonEntityInfo": {
          "$ref": "#/definitions/ListAlertCommonEntityInfo"
        },
        "deployment": {
          "$ref": "#/definitions/storageListAlertDeployment",
          "title": "Represents an alert on a deployment\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "resource": {
          "$ref": "#/definitions/ListAlertResourceEntity",
          "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        }
      }
    },
    "storageListAlertDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release."
        },
        "namespace": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release."
        },
        "clusterId": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release."
        },
        "inactive": {
          "type": "boolean"
        },
        "namespaceId": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release."
        }
      }
    },
    "storageListAlertPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "description": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "developerInternalFields": {
          "$ref": "#/definitions/ListAlertPolicyDevFields",
          "description": "For internal use only."
        }
      }
    },
    "storageListAlertResourceType": {
      "type": "string",
      "enum": [
        "DEPLOYMENT",
        "SECRETS",
        "CONFIGMAPS"
      ],
      "default": "DEPLOYMENT",
      "title": "A special ListAlert-only enumeration of all resource types. Unlike Alert.Resource.ResourceType this also includes deployment as a type\nThis must be kept in sync with Alert.Resource.ResourceType (excluding the deployment value)"
    },
    "storageNetworkEntityInfoType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "DEPLOYMENT",
        "INTERNET",
        "LISTEN_ENDPOINT",
        "EXTERNAL_SOURCE"
      ],
      "default": "UNKNOWN_TYPE"
    },
    "storageNumericalPolicy": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/storageComparator"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "storagePermissionLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "NONE",
        "DEFAULT",
        "ELEVATED_IN_NAMESPACE",
        "ELEVATED_CLUSTER_WIDE",
        "CLUSTER_ADMIN"
      ],
      "default": "UNSET",
      "title": "For any update to PermissionLevel, also update:\n- pkg/searchbasedpolicies/builders/k8s_rbac.go\n- ui/src/messages/common.js"
    },
    "storagePermissionPolicy": {
      "type": "object",
      "properties": {
        "permissionLevel": {
          "$ref": "#/definitions/storagePermissionLevel"
        }
      },
      "description": "K8S RBAC Permission level configuration."
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "$ref": "#/definitions/storagePolicyFields"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "whitelists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "exclusions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT\u0026CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "storagePolicyFields": {
      "type": "object",
      "properties": {
        "imageName": {
          "$ref": "#/definitions/storageImageNamePolicy"
        },
        "imageAgeDays": {
          "type": "string",
          "format": "int64"
        },
        "lineRule": {
          "$ref": "#/definitions/storageDockerfileLineRuleField"
        },
        "cvss": {
          "$ref": "#/definitions/storageNumericalPolicy",
          "title": "Scan Metadata"
        },
        "cve": {
          "type": "string"
        },
        "component": {
          "$ref": "#/definitions/storageComponent"
        },
        "scanAgeDays": {
          "type": "string",
          "format": "int64"
        },
        "noScanExists": {
          "type": "boolean"
        },
        "env": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "volumePolicy": {
          "$ref": "#/definitions/storageVolumePolicy"
        },
        "portPolicy": {
          "$ref": "#/definitions/storagePortPolicy"
        },
        "requiredLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "requiredAnnotation": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "disallowedAnnotation": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "privileged": {
          "type": "boolean"
        },
        "dropCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerResourcePolicy": {
          "$ref": "#/definitions/storageResourcePolicy"
        },
        "processPolicy": {
          "$ref": "#/definitions/storageProcessPolicy"
        },
        "readOnlyRootFs": {
          "type": "boolean"
        },
        "fixedBy": {
          "type": "string"
        },
        "portExposurePolicy": {
          "$ref": "#/definitions/storagePortExposurePolicy"
        },
        "permissionPolicy": {
          "$ref": "#/definitions/storagePermissionPolicy"
        },
        "hostMountPolicy": {
          "$ref": "#/definitions/storageHostMountPolicy"
        },
        "whitelistEnabled": {
          "type": "boolean"
        },
        "requiredImageLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "disallowedImageLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "imageSignatureVerifiedBy": {
          "type": "string"
        }
      },
      "title": "Next Available Tag: 29"
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator"
        },
        "negate": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicyValue"
          }
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string"
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicyGroup"
          }
        }
      }
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "storagePortExposurePolicy": {
      "type": "object",
      "properties": {
        "exposureLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortConfigExposureLevel"
          }
        }
      }
    },
    "storagePortPolicy": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "storageProcessIndicator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique uuid for the Indicator message"
        },
        "deploymentId": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "podId": {
          "type": "string",
          "title": "Pod name"
        },
        "podUid": {
          "type": "string"
        },
        "signal": {
          "$ref": "#/definitions/storageProcessSignal",
          "title": "A process signal message passed from Collector to Sensor"
        },
        "clusterId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "containerStartTime": {
          "type": "string",
          "format": "date-time"
        },
        "imageId": {
          "type": "string"
        }
      },
      "title": "Next available tag: 13"
    },
    "storageProcessPolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "args": {
          "type": "string"
        },
        "ancestor": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "storageProcessSignal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique UUID for identifying the message\nWe have this here instead of at the top level\nbecause we want to have each message to be\nself contained."
        },
        "containerId": {
          "type": "string",
          "title": "ID of container associated with this process"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "Process creation time"
        },
        "name": {
          "type": "string",
          "title": "Process name"
        },
        "args": {
          "type": "string",
          "title": "Process arguments"
        },
        "execFilePath": {
          "type": "string",
          "title": "Process executable file path"
        },
        "pid": {
          "type": "integer",
          "format": "int64",
          "title": "Host process ID"
        },
        "uid": {
          "type": "integer",
          "format": "int64",
          "title": "Real user ID"
        },
        "gid": {
          "type": "integer",
          "format": "int64",
          "title": "Real group ID"
        },
        "lineage": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Process Lineage"
        },
        "scraped": {
          "type": "boolean",
          "title": "Signal origin"
        },
        "lineageInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessSignalLineageInfo"
          },
          "title": "Process LineageInfo"
        }
      }
    },
    "storageResourcePolicy": {
      "type": "object",
      "properties": {
        "cpuResourceRequest": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "cpuResourceLimit": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "memoryResourceRequest": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "memoryResourceLimit": {
          "$ref": "#/definitions/storageNumericalPolicy"
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "storageViolationState": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "SNOOZED",
        "RESOLVED",
        "ATTEMPTED"
      ],
      "default": "ACTIVE"
    },
    "storageVolumePolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1AlertEvent": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/v1Type"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1CountAlertsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1DeleteAlertsResponse": {
      "type": "object",
      "properties": {
        "numDeleted": {
          "type": "integer",
          "format": "int64"
        },
        "dryRun": {
          "type": "boolean"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetAlertTimeseriesResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetAlertTimeseriesResponseClusterAlerts"
          }
        }
      }
    },
    "v1GetAlertsCountsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetAlertsCountsResponseAlertGroup"
          }
        }
      }
    },
    "v1GetAlertsGroupResponse": {
      "type": "object",
      "properties": {
        "alertsByPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GetAlertsGroupResponsePolicyGroup"
          }
        }
      }
    },
    "v1GetAlertsGroupResponsePolicyGroup": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storageListAlertPolicy"
        },
        "numAlerts": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListAlertsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      }
    },
    "v1ListAlertsResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageListAlert"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        }
      }
    },
    "v1RawQuery": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      },
      "description": "RawQuery represents the search query string.\nThe format of the query string is \"\u003cfield name\u003e:\u003cvalue,value,...\u003e+\u003cfield name\u003e:\u003cvalue, value,...\u003e+...\"\nFor example:\nTo search for deployments named \"central\" and \"sensor\" in the namespace \"stackrox\", the query string would be\n\"Deployment:central,sensor+Namespace:stackrox\"\nRawQuery is used in ListAPIs to search for a particular object."
    },
    "v1ResolveAlertRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "whitelist": {
          "type": "boolean"
        },
        "addToBaseline": {
          "type": "boolean"
        }
      }
    },
    "v1ResolveAlertsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      }
    },
    "v1SnoozeAlertRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "snoozeTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        }
      }
    },
    "v1Type": {
      "type": "string",
      "enum": [
        "CREATED",
        "REMOVED"
      ],
      "default": "CREATED"
    }
  }
}
