// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/authprovider_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAuthProviderRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAuthProviderRequest) Reset()         { *m = GetAuthProviderRequest{} }
func (m *GetAuthProviderRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuthProviderRequest) ProtoMessage()    {}
func (*GetAuthProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{0}
}
func (m *GetAuthProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthProviderRequest.Merge(m, src)
}
func (m *GetAuthProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthProviderRequest proto.InternalMessageInfo

func (m *GetAuthProviderRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetAuthProviderRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAuthProviderRequest) Clone() *GetAuthProviderRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetAuthProviderRequest)
	*cloned = *m

	return cloned
}

type GetAuthProvidersRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAuthProvidersRequest) Reset()         { *m = GetAuthProvidersRequest{} }
func (m *GetAuthProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuthProvidersRequest) ProtoMessage()    {}
func (*GetAuthProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{1}
}
func (m *GetAuthProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthProvidersRequest.Merge(m, src)
}
func (m *GetAuthProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthProvidersRequest proto.InternalMessageInfo

func (m *GetAuthProvidersRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetAuthProvidersRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetAuthProvidersRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAuthProvidersRequest) Clone() *GetAuthProvidersRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetAuthProvidersRequest)
	*cloned = *m

	return cloned
}

type GetLoginAuthProvidersResponse struct {
	AuthProviders        []*GetLoginAuthProvidersResponse_LoginAuthProvider `protobuf:"bytes,1,rep,name=auth_providers,json=authProviders,proto3" json:"auth_providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *GetLoginAuthProvidersResponse) Reset()         { *m = GetLoginAuthProvidersResponse{} }
func (m *GetLoginAuthProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*GetLoginAuthProvidersResponse) ProtoMessage()    {}
func (*GetLoginAuthProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{2}
}
func (m *GetLoginAuthProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginAuthProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginAuthProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginAuthProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginAuthProvidersResponse.Merge(m, src)
}
func (m *GetLoginAuthProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginAuthProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginAuthProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginAuthProvidersResponse proto.InternalMessageInfo

func (m *GetLoginAuthProvidersResponse) GetAuthProviders() []*GetLoginAuthProvidersResponse_LoginAuthProvider {
	if m != nil {
		return m.AuthProviders
	}
	return nil
}

func (m *GetLoginAuthProvidersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetLoginAuthProvidersResponse) Clone() *GetLoginAuthProvidersResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetLoginAuthProvidersResponse)
	*cloned = *m

	if m.AuthProviders != nil {
		cloned.AuthProviders = make([]*GetLoginAuthProvidersResponse_LoginAuthProvider, len(m.AuthProviders))
		for idx, v := range m.AuthProviders {
			cloned.AuthProviders[idx] = v.Clone()
		}
	}
	return cloned
}

type GetLoginAuthProvidersResponse_LoginAuthProvider struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	LoginUrl             string   `protobuf:"bytes,5,opt,name=login_url,json=loginUrl,proto3" json:"login_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) Reset() {
	*m = GetLoginAuthProvidersResponse_LoginAuthProvider{}
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) String() string {
	return proto.CompactTextString(m)
}
func (*GetLoginAuthProvidersResponse_LoginAuthProvider) ProtoMessage() {}
func (*GetLoginAuthProvidersResponse_LoginAuthProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{2, 0}
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginAuthProvidersResponse_LoginAuthProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginAuthProvidersResponse_LoginAuthProvider.Merge(m, src)
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginAuthProvidersResponse_LoginAuthProvider.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginAuthProvidersResponse_LoginAuthProvider proto.InternalMessageInfo

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) GetLoginUrl() string {
	if m != nil {
		return m.LoginUrl
	}
	return ""
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) Clone() *GetLoginAuthProvidersResponse_LoginAuthProvider {
	if m == nil {
		return nil
	}
	cloned := new(GetLoginAuthProvidersResponse_LoginAuthProvider)
	*cloned = *m

	return cloned
}

type GetAuthProvidersResponse struct {
	AuthProviders        []*storage.AuthProvider `protobuf:"bytes,1,rep,name=auth_providers,json=authProviders,proto3" json:"auth_providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetAuthProvidersResponse) Reset()         { *m = GetAuthProvidersResponse{} }
func (m *GetAuthProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuthProvidersResponse) ProtoMessage()    {}
func (*GetAuthProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{3}
}
func (m *GetAuthProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthProvidersResponse.Merge(m, src)
}
func (m *GetAuthProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthProvidersResponse proto.InternalMessageInfo

func (m *GetAuthProvidersResponse) GetAuthProviders() []*storage.AuthProvider {
	if m != nil {
		return m.AuthProviders
	}
	return nil
}

func (m *GetAuthProvidersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAuthProvidersResponse) Clone() *GetAuthProvidersResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAuthProvidersResponse)
	*cloned = *m

	if m.AuthProviders != nil {
		cloned.AuthProviders = make([]*storage.AuthProvider, len(m.AuthProviders))
		for idx, v := range m.AuthProviders {
			cloned.AuthProviders[idx] = v.Clone()
		}
	}
	return cloned
}

type PostAuthProviderRequest struct {
	Provider             *storage.AuthProvider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PostAuthProviderRequest) Reset()         { *m = PostAuthProviderRequest{} }
func (m *PostAuthProviderRequest) String() string { return proto.CompactTextString(m) }
func (*PostAuthProviderRequest) ProtoMessage()    {}
func (*PostAuthProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{4}
}
func (m *PostAuthProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostAuthProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostAuthProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostAuthProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostAuthProviderRequest.Merge(m, src)
}
func (m *PostAuthProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostAuthProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostAuthProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostAuthProviderRequest proto.InternalMessageInfo

func (m *PostAuthProviderRequest) GetProvider() *storage.AuthProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *PostAuthProviderRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostAuthProviderRequest) Clone() *PostAuthProviderRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostAuthProviderRequest)
	*cloned = *m

	cloned.Provider = m.Provider.Clone()
	return cloned
}

type UpdateAuthProviderRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to NameOpt:
	//	*UpdateAuthProviderRequest_Name
	NameOpt isUpdateAuthProviderRequest_NameOpt `protobuf_oneof:"name_opt"`
	// Types that are valid to be assigned to EnabledOpt:
	//	*UpdateAuthProviderRequest_Enabled
	EnabledOpt           isUpdateAuthProviderRequest_EnabledOpt `protobuf_oneof:"enabled_opt"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *UpdateAuthProviderRequest) Reset()         { *m = UpdateAuthProviderRequest{} }
func (m *UpdateAuthProviderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthProviderRequest) ProtoMessage()    {}
func (*UpdateAuthProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{5}
}
func (m *UpdateAuthProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthProviderRequest.Merge(m, src)
}
func (m *UpdateAuthProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthProviderRequest proto.InternalMessageInfo

type isUpdateAuthProviderRequest_NameOpt interface {
	isUpdateAuthProviderRequest_NameOpt()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isUpdateAuthProviderRequest_NameOpt
}
type isUpdateAuthProviderRequest_EnabledOpt interface {
	isUpdateAuthProviderRequest_EnabledOpt()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isUpdateAuthProviderRequest_EnabledOpt
}

type UpdateAuthProviderRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type UpdateAuthProviderRequest_Enabled struct {
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*UpdateAuthProviderRequest_Name) isUpdateAuthProviderRequest_NameOpt() {}
func (m *UpdateAuthProviderRequest_Name) Clone() isUpdateAuthProviderRequest_NameOpt {
	if m == nil {
		return nil
	}
	cloned := new(UpdateAuthProviderRequest_Name)
	*cloned = *m

	return cloned
}
func (*UpdateAuthProviderRequest_Enabled) isUpdateAuthProviderRequest_EnabledOpt() {}
func (m *UpdateAuthProviderRequest_Enabled) Clone() isUpdateAuthProviderRequest_EnabledOpt {
	if m == nil {
		return nil
	}
	cloned := new(UpdateAuthProviderRequest_Enabled)
	*cloned = *m

	return cloned
}

func (m *UpdateAuthProviderRequest) GetNameOpt() isUpdateAuthProviderRequest_NameOpt {
	if m != nil {
		return m.NameOpt
	}
	return nil
}
func (m *UpdateAuthProviderRequest) GetEnabledOpt() isUpdateAuthProviderRequest_EnabledOpt {
	if m != nil {
		return m.EnabledOpt
	}
	return nil
}

func (m *UpdateAuthProviderRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAuthProviderRequest) GetName() string {
	if x, ok := m.GetNameOpt().(*UpdateAuthProviderRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *UpdateAuthProviderRequest) GetEnabled() bool {
	if x, ok := m.GetEnabledOpt().(*UpdateAuthProviderRequest_Enabled); ok {
		return x.Enabled
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateAuthProviderRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateAuthProviderRequest_Name)(nil),
		(*UpdateAuthProviderRequest_Enabled)(nil),
	}
}

func (m *UpdateAuthProviderRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateAuthProviderRequest) Clone() *UpdateAuthProviderRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateAuthProviderRequest)
	*cloned = *m

	if m.NameOpt != nil {
		cloned.NameOpt = m.NameOpt.Clone()
	}
	if m.EnabledOpt != nil {
		cloned.EnabledOpt = m.EnabledOpt.Clone()
	}
	return cloned
}

type ExchangeTokenRequest struct {
	// The external authentication token. The server will mask the value of this credential in responses and logs.
	ExternalToken        string   `protobuf:"bytes,1,opt,name=external_token,json=externalToken,proto3" json:"external_token,omitempty" scrub:"always"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeTokenRequest) Reset()         { *m = ExchangeTokenRequest{} }
func (m *ExchangeTokenRequest) String() string { return proto.CompactTextString(m) }
func (*ExchangeTokenRequest) ProtoMessage()    {}
func (*ExchangeTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{6}
}
func (m *ExchangeTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeTokenRequest.Merge(m, src)
}
func (m *ExchangeTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeTokenRequest proto.InternalMessageInfo

func (m *ExchangeTokenRequest) GetExternalToken() string {
	if m != nil {
		return m.ExternalToken
	}
	return ""
}

func (m *ExchangeTokenRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExchangeTokenRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ExchangeTokenRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExchangeTokenRequest) Clone() *ExchangeTokenRequest {
	if m == nil {
		return nil
	}
	cloned := new(ExchangeTokenRequest)
	*cloned = *m

	return cloned
}

type ExchangeTokenResponse struct {
	Token                string      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ClientState          string      `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	Test                 bool        `protobuf:"varint,3,opt,name=test,proto3" json:"test,omitempty"`
	User                 *AuthStatus `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExchangeTokenResponse) Reset()         { *m = ExchangeTokenResponse{} }
func (m *ExchangeTokenResponse) String() string { return proto.CompactTextString(m) }
func (*ExchangeTokenResponse) ProtoMessage()    {}
func (*ExchangeTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{7}
}
func (m *ExchangeTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeTokenResponse.Merge(m, src)
}
func (m *ExchangeTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeTokenResponse proto.InternalMessageInfo

func (m *ExchangeTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ExchangeTokenResponse) GetClientState() string {
	if m != nil {
		return m.ClientState
	}
	return ""
}

func (m *ExchangeTokenResponse) GetTest() bool {
	if m != nil {
		return m.Test
	}
	return false
}

func (m *ExchangeTokenResponse) GetUser() *AuthStatus {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ExchangeTokenResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExchangeTokenResponse) Clone() *ExchangeTokenResponse {
	if m == nil {
		return nil
	}
	cloned := new(ExchangeTokenResponse)
	*cloned = *m

	cloned.User = m.User.Clone()
	return cloned
}

type AvailableProviderTypesResponse struct {
	AuthProviderTypes    []string `protobuf:"bytes,1,rep,name=auth_provider_types,json=authProviderTypes,proto3" json:"auth_provider_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableProviderTypesResponse) Reset()         { *m = AvailableProviderTypesResponse{} }
func (m *AvailableProviderTypesResponse) String() string { return proto.CompactTextString(m) }
func (*AvailableProviderTypesResponse) ProtoMessage()    {}
func (*AvailableProviderTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f38c1bdc0bfe3549, []int{8}
}
func (m *AvailableProviderTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailableProviderTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailableProviderTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvailableProviderTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableProviderTypesResponse.Merge(m, src)
}
func (m *AvailableProviderTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AvailableProviderTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableProviderTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableProviderTypesResponse proto.InternalMessageInfo

func (m *AvailableProviderTypesResponse) GetAuthProviderTypes() []string {
	if m != nil {
		return m.AuthProviderTypes
	}
	return nil
}

func (m *AvailableProviderTypesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AvailableProviderTypesResponse) Clone() *AvailableProviderTypesResponse {
	if m == nil {
		return nil
	}
	cloned := new(AvailableProviderTypesResponse)
	*cloned = *m

	if m.AuthProviderTypes != nil {
		cloned.AuthProviderTypes = make([]string, len(m.AuthProviderTypes))
		copy(cloned.AuthProviderTypes, m.AuthProviderTypes)
	}
	return cloned
}

func init() {
	proto.RegisterType((*GetAuthProviderRequest)(nil), "v1.GetAuthProviderRequest")
	proto.RegisterType((*GetAuthProvidersRequest)(nil), "v1.GetAuthProvidersRequest")
	proto.RegisterType((*GetLoginAuthProvidersResponse)(nil), "v1.GetLoginAuthProvidersResponse")
	proto.RegisterType((*GetLoginAuthProvidersResponse_LoginAuthProvider)(nil), "v1.GetLoginAuthProvidersResponse.LoginAuthProvider")
	proto.RegisterType((*GetAuthProvidersResponse)(nil), "v1.GetAuthProvidersResponse")
	proto.RegisterType((*PostAuthProviderRequest)(nil), "v1.PostAuthProviderRequest")
	proto.RegisterType((*UpdateAuthProviderRequest)(nil), "v1.UpdateAuthProviderRequest")
	proto.RegisterType((*ExchangeTokenRequest)(nil), "v1.ExchangeTokenRequest")
	proto.RegisterType((*ExchangeTokenResponse)(nil), "v1.ExchangeTokenResponse")
	proto.RegisterType((*AvailableProviderTypesResponse)(nil), "v1.AvailableProviderTypesResponse")
}

func init() { proto.RegisterFile("api/v1/authprovider_service.proto", fileDescriptor_f38c1bdc0bfe3549) }

var fileDescriptor_f38c1bdc0bfe3549 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x37, 0x15, 0xbb, 0xb1, 0x9f, 0x2b, 0xc5, 0x3e, 0xc9, 0x31, 0x45, 0xd9, 0x72, 0x74, 0xed,
	0x60, 0x68, 0xa0, 0x20, 0x67, 0xaa, 0xd0, 0xc5, 0x42, 0x82, 0xa4, 0x80, 0x07, 0x95, 0x49, 0x80,
	0x20, 0x8b, 0x70, 0x92, 0xae, 0x12, 0x61, 0x8a, 0xc7, 0xf2, 0x8e, 0xac, 0x84, 0xa0, 0x4b, 0xa7,
	0xee, 0x5d, 0xfa, 0x7d, 0xba, 0x74, 0x2c, 0xd0, 0xbd, 0x28, 0xdc, 0xf6, 0x0b, 0xf4, 0x13, 0x14,
	0x77, 0x24, 0x65, 0x8a, 0x22, 0xe5, 0x6e, 0xc7, 0xf7, 0xde, 0xbd, 0xdf, 0xfd, 0xde, 0x9f, 0x1f,
	0xa1, 0x45, 0x3c, 0xbb, 0x13, 0x76, 0x3b, 0x24, 0x10, 0x33, 0xcf, 0x67, 0xa1, 0x3d, 0xa1, 0xfe,
	0x90, 0x53, 0x3f, 0xb4, 0xc7, 0xd4, 0xf4, 0x7c, 0x26, 0x18, 0x2a, 0x85, 0x5d, 0xe3, 0x6c, 0xca,
	0xd8, 0xd4, 0xa1, 0x1d, 0x19, 0x4d, 0x5c, 0x97, 0x09, 0x22, 0x6c, 0xe6, 0xf2, 0x28, 0xc2, 0xa8,
	0x4d, 0xd9, 0x94, 0xa9, 0x63, 0x47, 0x9e, 0x62, 0x6b, 0x3d, 0x95, 0x7a, 0x3d, 0xa5, 0x51, 0x8d,
	0x5d, 0x63, 0x36, 0x9f, 0x33, 0x37, 0x36, 0xa2, 0xd8, 0x48, 0xe7, 0x9e, 0x58, 0xc6, 0xb6, 0x06,
	0x17, 0xcc, 0x27, 0x53, 0x1a, 0x25, 0x49, 0x1e, 0x18, 0x39, 0xf1, 0x25, 0x3c, 0x7d, 0x45, 0xc5,
	0x75, 0x20, 0x66, 0x83, 0xd8, 0x61, 0xd1, 0x6f, 0x03, 0xca, 0x05, 0xaa, 0x40, 0xc9, 0x9e, 0xe8,
	0xda, 0x33, 0xed, 0xf2, 0xc0, 0x2a, 0xd9, 0x13, 0x7c, 0x0d, 0xa7, 0x99, 0x48, 0x9e, 0x84, 0x22,
	0xd8, 0x75, 0xc9, 0x9c, 0xc6, 0xc1, 0xea, 0x2c, 0x6d, 0x62, 0xe9, 0x51, 0xbd, 0x14, 0xd9, 0xe4,
	0x19, 0xff, 0xa3, 0xc1, 0xf9, 0x2b, 0x2a, 0x6e, 0xd8, 0xd4, 0x76, 0x33, 0x89, 0xb8, 0xc7, 0x5c,
	0x4e, 0xd1, 0x07, 0xa8, 0xac, 0xbd, 0x92, 0xeb, 0xda, 0xb3, 0x47, 0x97, 0x87, 0x57, 0xcf, 0xcd,
	0xb0, 0x6b, 0x6e, 0xbd, 0x6a, 0x6e, 0xb8, 0xac, 0x32, 0x49, 0x07, 0x1a, 0x33, 0x38, 0xde, 0x88,
	0xc9, 0xb2, 0x5c, 0x51, 0x29, 0xe5, 0x50, 0x79, 0x74, 0x4f, 0x05, 0x35, 0xe0, 0xc0, 0x91, 0xc9,
	0x86, 0x81, 0xef, 0xe8, 0x7b, 0xca, 0xb1, 0xaf, 0x0c, 0xef, 0x7c, 0x07, 0xbf, 0x07, 0x7d, 0xb3,
	0x54, 0x31, 0xc3, 0x2f, 0x0b, 0x18, 0x9e, 0x98, 0x71, 0x9b, 0xcc, 0x2d, 0x1c, 0xf0, 0x0d, 0x9c,
	0x0e, 0x18, 0xcf, 0xed, 0x57, 0x17, 0xf6, 0x93, 0x9c, 0x8a, 0x4f, 0x61, 0xca, 0x55, 0x18, 0x5e,
	0x40, 0xfd, 0x9d, 0x37, 0x21, 0x82, 0xfe, 0x8f, 0xfe, 0xa3, 0x5a, 0xba, 0x32, 0xaf, 0x77, 0xe2,
	0xda, 0x18, 0xf0, 0x98, 0xba, 0x64, 0xe4, 0xd0, 0x89, 0x2a, 0xcf, 0xfe, 0x6b, 0xcd, 0x4a, 0x0c,
	0x7d, 0x80, 0x7d, 0x19, 0x33, 0x64, 0x9e, 0xe8, 0x97, 0xe1, 0x30, 0x36, 0xcb, 0x4f, 0xfc, 0x11,
	0x6a, 0x2f, 0x17, 0xe3, 0x19, 0x71, 0xa7, 0xf4, 0x2d, 0xbb, 0xa5, 0x6e, 0x02, 0xfa, 0x05, 0x54,
	0xe8, 0x42, 0x50, 0xdf, 0x25, 0xce, 0x50, 0x48, 0x47, 0xf4, 0x80, 0x3e, 0xfa, 0xf7, 0x8f, 0x8b,
	0x0a, 0x1f, 0xfb, 0xc1, 0xa8, 0x87, 0x89, 0xf3, 0x1d, 0x59, 0x72, 0x6c, 0x95, 0x93, 0x48, 0x95,
	0x21, 0x6f, 0xe0, 0x50, 0x0d, 0xf6, 0xb8, 0x20, 0x22, 0x69, 0x5d, 0xf4, 0x81, 0x7f, 0xd4, 0xe0,
	0x24, 0x83, 0x1e, 0x37, 0xa7, 0x06, 0x7b, 0x29, 0x54, 0x2b, 0xfa, 0x40, 0x2d, 0xf8, 0x74, 0xec,
	0xd8, 0xd4, 0x15, 0xc3, 0x28, 0x59, 0x84, 0x70, 0x18, 0xd9, 0xde, 0x48, 0x93, 0x02, 0xa7, 0x5c,
	0x44, 0x35, 0xb0, 0xd4, 0x19, 0x61, 0xd8, 0x0d, 0x38, 0xf5, 0xf5, 0x5d, 0xd5, 0x8c, 0x8a, 0x9c,
	0x60, 0x59, 0x67, 0x79, 0x21, 0xe0, 0x96, 0xf2, 0xe1, 0x01, 0x34, 0xaf, 0x43, 0x62, 0x3b, 0xb2,
	0x32, 0x49, 0x03, 0xde, 0x2e, 0x3d, 0x7a, 0x3f, 0x2f, 0x26, 0x54, 0xd7, 0xe6, 0x65, 0x28, 0x89,
	0x45, 0x43, 0x73, 0x60, 0x1d, 0xa7, 0xa7, 0x43, 0xdd, 0xbb, 0xfa, 0xe5, 0x31, 0x54, 0xd3, 0xed,
	0x7c, 0x13, 0x89, 0x06, 0x62, 0x60, 0xdc, 0xd8, 0x5c, 0xe4, 0xa3, 0xa1, 0x03, 0xf9, 0xba, 0x97,
	0x52, 0x34, 0x0c, 0xac, 0x1e, 0xba, 0xf5, 0x51, 0x18, 0xff, 0xf0, 0xfb, 0xdf, 0x3f, 0x95, 0xce,
	0x90, 0xa1, 0xb4, 0x29, 0x89, 0x5d, 0x1b, 0x78, 0x34, 0x81, 0x27, 0x99, 0x25, 0x40, 0x46, 0xbc,
	0xc5, 0x39, 0xe3, 0x66, 0xe4, 0x0f, 0x2b, 0x6e, 0x2a, 0x24, 0x1d, 0x3d, 0x4d, 0x54, 0x70, 0x05,
	0xd0, 0xf9, 0x68, 0x4f, 0xbe, 0x47, 0xdf, 0xc0, 0x49, 0xae, 0x2c, 0xa4, 0x19, 0xb5, 0x1e, 0x14,
	0x0f, 0x7c, 0xa1, 0x60, 0xea, 0xe8, 0x54, 0xc2, 0xa8, 0x3d, 0x5e, 0x53, 0x73, 0x8e, 0x66, 0x70,
	0x94, 0x5d, 0x69, 0xd4, 0xc8, 0xa1, 0x93, 0x68, 0xa2, 0x71, 0x96, 0xef, 0x8c, 0xf1, 0xea, 0x0a,
	0xaf, 0x8a, 0x8e, 0x37, 0x68, 0xa1, 0x5b, 0x38, 0xca, 0xae, 0x78, 0x84, 0x54, 0xb0, 0xf8, 0x45,
	0x95, 0xfb, 0x4c, 0x41, 0x9c, 0xe3, 0x4d, 0x88, 0xde, 0x4a, 0x01, 0xd0, 0x1c, 0xd0, 0xa6, 0x02,
	0xa0, 0x73, 0x09, 0x57, 0xa8, 0x0c, 0x45, 0x80, 0x2d, 0x05, 0xd8, 0xb8, 0x2a, 0x68, 0x55, 0x4f,
	0x6b, 0xa3, 0x11, 0x3c, 0x19, 0x04, 0xeb, 0xd4, 0xf2, 0x93, 0x3d, 0x80, 0x61, 0x6c, 0xc1, 0xf8,
	0x1a, 0xd0, 0x0b, 0xea, 0xd0, 0x0c, 0xa5, 0x23, 0x49, 0xc9, 0xa2, 0x9c, 0x05, 0xfe, 0x98, 0xf6,
	0x97, 0x5f, 0xbd, 0x30, 0xee, 0x07, 0x24, 0x19, 0xb2, 0x76, 0xd1, 0x90, 0x79, 0x50, 0x5e, 0xd3,
	0x0b, 0xa4, 0xab, 0xbb, 0x39, 0x02, 0x66, 0xd4, 0x73, 0x3c, 0x71, 0xcf, 0xdb, 0x0a, 0xe5, 0x73,
	0x7c, 0xb1, 0x89, 0x42, 0xd3, 0x17, 0x7a, 0x5a, 0xbb, 0x6f, 0xfe, 0x7a, 0xd7, 0xd4, 0x7e, 0xbb,
	0x6b, 0x6a, 0x7f, 0xde, 0x35, 0xb5, 0x9f, 0xff, 0x6a, 0xee, 0x80, 0x6e, 0x33, 0x93, 0x0b, 0x32,
	0xbe, 0xf5, 0xd9, 0x22, 0xfa, 0x77, 0x9b, 0xc4, 0xb3, 0xcd, 0xb0, 0xfb, 0xa1, 0x14, 0x76, 0xdf,
	0xef, 0x8c, 0x3e, 0x51, 0xb6, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x4b, 0x5f, 0xb8,
	0x8d, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthProviderServiceClient is the client API for AuthProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type AuthProviderServiceClient interface {
	ListAvailableProviderTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableProviderTypesResponse, error)
	GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	GetLoginAuthProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLoginAuthProvidersResponse, error)
	GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error)
	PostAuthProvider(ctx context.Context, in *PostAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	PutAuthProvider(ctx context.Context, in *storage.AuthProvider, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	DeleteAuthProvider(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error)
}

type authProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProviderServiceClient(cc grpc.ClientConnInterface) AuthProviderServiceClient {
	return &authProviderServiceClient{cc}
}

func (c *authProviderServiceClient) ListAvailableProviderTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableProviderTypesResponse, error) {
	out := new(AvailableProviderTypesResponse)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/ListAvailableProviderTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/GetAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetLoginAuthProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLoginAuthProvidersResponse, error) {
	out := new(GetLoginAuthProvidersResponse)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/GetLoginAuthProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error) {
	out := new(GetAuthProvidersResponse)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/GetAuthProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) PostAuthProvider(ctx context.Context, in *PostAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/PostAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/UpdateAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) PutAuthProvider(ctx context.Context, in *storage.AuthProvider, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/PutAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) DeleteAuthProvider(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/DeleteAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error) {
	out := new(ExchangeTokenResponse)
	err := c.cc.Invoke(ctx, "/v1.AuthProviderService/ExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProviderServiceServer is the server API for AuthProviderService service.
type AuthProviderServiceServer interface {
	ListAvailableProviderTypes(context.Context, *Empty) (*AvailableProviderTypesResponse, error)
	GetAuthProvider(context.Context, *GetAuthProviderRequest) (*storage.AuthProvider, error)
	GetLoginAuthProviders(context.Context, *Empty) (*GetLoginAuthProvidersResponse, error)
	GetAuthProviders(context.Context, *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error)
	PostAuthProvider(context.Context, *PostAuthProviderRequest) (*storage.AuthProvider, error)
	UpdateAuthProvider(context.Context, *UpdateAuthProviderRequest) (*storage.AuthProvider, error)
	PutAuthProvider(context.Context, *storage.AuthProvider) (*storage.AuthProvider, error)
	DeleteAuthProvider(context.Context, *ResourceByID) (*Empty, error)
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error)
}

// UnimplementedAuthProviderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthProviderServiceServer struct {
}

func (*UnimplementedAuthProviderServiceServer) ListAvailableProviderTypes(ctx context.Context, req *Empty) (*AvailableProviderTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableProviderTypes not implemented")
}
func (*UnimplementedAuthProviderServiceServer) GetAuthProvider(ctx context.Context, req *GetAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProvider not implemented")
}
func (*UnimplementedAuthProviderServiceServer) GetLoginAuthProviders(ctx context.Context, req *Empty) (*GetLoginAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginAuthProviders not implemented")
}
func (*UnimplementedAuthProviderServiceServer) GetAuthProviders(ctx context.Context, req *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProviders not implemented")
}
func (*UnimplementedAuthProviderServiceServer) PostAuthProvider(ctx context.Context, req *PostAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAuthProvider not implemented")
}
func (*UnimplementedAuthProviderServiceServer) UpdateAuthProvider(ctx context.Context, req *UpdateAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthProvider not implemented")
}
func (*UnimplementedAuthProviderServiceServer) PutAuthProvider(ctx context.Context, req *storage.AuthProvider) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAuthProvider not implemented")
}
func (*UnimplementedAuthProviderServiceServer) DeleteAuthProvider(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthProvider not implemented")
}
func (*UnimplementedAuthProviderServiceServer) ExchangeToken(ctx context.Context, req *ExchangeTokenRequest) (*ExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}

func RegisterAuthProviderServiceServer(s *grpc.Server, srv AuthProviderServiceServer) {
	s.RegisterService(&_AuthProviderService_serviceDesc, srv)
}

func _AuthProviderService_ListAvailableProviderTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ListAvailableProviderTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/ListAvailableProviderTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ListAvailableProviderTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/GetAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, req.(*GetAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetLoginAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetLoginAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/GetLoginAuthProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetLoginAuthProviders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/GetAuthProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetAuthProviders(ctx, req.(*GetAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_PostAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).PostAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/PostAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).PostAuthProvider(ctx, req.(*PostAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_UpdateAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/UpdateAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, req.(*UpdateAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_PutAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.AuthProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).PutAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/PutAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).PutAuthProvider(ctx, req.(*storage.AuthProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_DeleteAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/DeleteAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthProviderService/ExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthProviderService",
	HandlerType: (*AuthProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableProviderTypes",
			Handler:    _AuthProviderService_ListAvailableProviderTypes_Handler,
		},
		{
			MethodName: "GetAuthProvider",
			Handler:    _AuthProviderService_GetAuthProvider_Handler,
		},
		{
			MethodName: "GetLoginAuthProviders",
			Handler:    _AuthProviderService_GetLoginAuthProviders_Handler,
		},
		{
			MethodName: "GetAuthProviders",
			Handler:    _AuthProviderService_GetAuthProviders_Handler,
		},
		{
			MethodName: "PostAuthProvider",
			Handler:    _AuthProviderService_PostAuthProvider_Handler,
		},
		{
			MethodName: "UpdateAuthProvider",
			Handler:    _AuthProviderService_UpdateAuthProvider_Handler,
		},
		{
			MethodName: "PutAuthProvider",
			Handler:    _AuthProviderService_PutAuthProvider_Handler,
		},
		{
			MethodName: "DeleteAuthProvider",
			Handler:    _AuthProviderService_DeleteAuthProvider_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _AuthProviderService_ExchangeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/authprovider_service.proto",
}

func (m *GetAuthProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAuthProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginAuthProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginAuthProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginAuthProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthProviders) > 0 {
		for iNdEx := len(m.AuthProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthproviderService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LoginUrl) > 0 {
		i -= len(m.LoginUrl)
		copy(dAtA[i:], m.LoginUrl)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.LoginUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAuthProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthProviders) > 0 {
		for iNdEx := len(m.AuthProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthproviderService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostAuthProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostAuthProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostAuthProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Provider != nil {
		{
			size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthproviderService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnabledOpt != nil {
		{
			size := m.EnabledOpt.Size()
			i -= size
			if _, err := m.EnabledOpt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NameOpt != nil {
		{
			size := m.NameOpt.Size()
			i -= size
			if _, err := m.NameOpt.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthProviderRequest_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthProviderRequest_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpdateAuthProviderRequest_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthProviderRequest_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ExchangeTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalToken) > 0 {
		i -= len(m.ExternalToken)
		copy(dAtA[i:], m.ExternalToken)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.ExternalToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthproviderService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Test {
		i--
		if m.Test {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClientState) > 0 {
		i -= len(m.ClientState)
		copy(dAtA[i:], m.ClientState)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.ClientState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AvailableProviderTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailableProviderTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvailableProviderTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthProviderTypes) > 0 {
		for iNdEx := len(m.AuthProviderTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthProviderTypes[iNdEx])
			copy(dAtA[i:], m.AuthProviderTypes[iNdEx])
			i = encodeVarintAuthproviderService(dAtA, i, uint64(len(m.AuthProviderTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthproviderService(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthproviderService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAuthProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuthProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginAuthProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthProviders) > 0 {
		for _, e := range m.AuthProviders {
			l = e.Size()
			n += 1 + l + sovAuthproviderService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.LoginUrl)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuthProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthProviders) > 0 {
		for _, e := range m.AuthProviders {
			l = e.Size()
			n += 1 + l + sovAuthproviderService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostAuthProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAuthProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.NameOpt != nil {
		n += m.NameOpt.Size()
	}
	if m.EnabledOpt != nil {
		n += m.EnabledOpt.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAuthProviderRequest_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovAuthproviderService(uint64(l))
	return n
}
func (m *UpdateAuthProviderRequest_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ExchangeTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalToken)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	l = len(m.ClientState)
	if l > 0 {
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.Test {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAuthproviderService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AvailableProviderTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthProviderTypes) > 0 {
		for _, s := range m.AuthProviderTypes {
			l = len(s)
			n += 1 + l + sovAuthproviderService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAuthproviderService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthproviderService(x uint64) (n int) {
	return sovAuthproviderService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAuthProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginAuthProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginAuthProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginAuthProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviders = append(m.AuthProviders, &GetLoginAuthProvidersResponse_LoginAuthProvider{})
			if err := m.AuthProviders[len(m.AuthProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginAuthProvidersResponse_LoginAuthProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginAuthProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginAuthProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviders = append(m.AuthProviders, &storage.AuthProvider{})
			if err := m.AuthProviders[len(m.AuthProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostAuthProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostAuthProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostAuthProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &storage.AuthProvider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameOpt = &UpdateAuthProviderRequest_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnabledOpt = &UpdateAuthProviderRequest_Enabled{b}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Test = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &AuthStatus{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailableProviderTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailableProviderTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailableProviderTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProviderTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthProviderTypes = append(m.AuthProviderTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthproviderService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthproviderService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthproviderService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthproviderService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthproviderService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthproviderService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthproviderService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthproviderService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthproviderService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthproviderService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthproviderService = fmt.Errorf("proto: unexpected end of group")
)
