// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/config_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigService_GetPublicConfig_FullMethodName                    = "/v1.ConfigService/GetPublicConfig"
	ConfigService_GetPrivateConfig_FullMethodName                   = "/v1.ConfigService/GetPrivateConfig"
	ConfigService_GetVulnerabilityExceptionConfig_FullMethodName    = "/v1.ConfigService/GetVulnerabilityExceptionConfig"
	ConfigService_UpdateVulnerabilityExceptionConfig_FullMethodName = "/v1.ConfigService/UpdateVulnerabilityExceptionConfig"
	ConfigService_GetConfig_FullMethodName                          = "/v1.ConfigService/GetConfig"
	ConfigService_PutConfig_FullMethodName                          = "/v1.ConfigService/PutConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetPublicConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.PublicConfig, error)
	GetPrivateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.PrivateConfig, error)
	GetVulnerabilityExceptionConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetVulnerabilityExceptionConfigResponse, error)
	UpdateVulnerabilityExceptionConfig(ctx context.Context, in *UpdateVulnerabilityExceptionConfigRequest, opts ...grpc.CallOption) (*UpdateVulnerabilityExceptionConfigResponse, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.Config, error)
	PutConfig(ctx context.Context, in *PutConfigRequest, opts ...grpc.CallOption) (*storage.Config, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetPublicConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.PublicConfig, error) {
	out := new(storage.PublicConfig)
	err := c.cc.Invoke(ctx, ConfigService_GetPublicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetPrivateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.PrivateConfig, error) {
	out := new(storage.PrivateConfig)
	err := c.cc.Invoke(ctx, ConfigService_GetPrivateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetVulnerabilityExceptionConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetVulnerabilityExceptionConfigResponse, error) {
	out := new(GetVulnerabilityExceptionConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetVulnerabilityExceptionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateVulnerabilityExceptionConfig(ctx context.Context, in *UpdateVulnerabilityExceptionConfigRequest, opts ...grpc.CallOption) (*UpdateVulnerabilityExceptionConfigResponse, error) {
	out := new(UpdateVulnerabilityExceptionConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateVulnerabilityExceptionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*storage.Config, error) {
	out := new(storage.Config)
	err := c.cc.Invoke(ctx, ConfigService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) PutConfig(ctx context.Context, in *PutConfigRequest, opts ...grpc.CallOption) (*storage.Config, error) {
	out := new(storage.Config)
	err := c.cc.Invoke(ctx, ConfigService_PutConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	GetPublicConfig(context.Context, *Empty) (*storage.PublicConfig, error)
	GetPrivateConfig(context.Context, *Empty) (*storage.PrivateConfig, error)
	GetVulnerabilityExceptionConfig(context.Context, *Empty) (*GetVulnerabilityExceptionConfigResponse, error)
	UpdateVulnerabilityExceptionConfig(context.Context, *UpdateVulnerabilityExceptionConfigRequest) (*UpdateVulnerabilityExceptionConfigResponse, error)
	GetConfig(context.Context, *Empty) (*storage.Config, error)
	PutConfig(context.Context, *PutConfigRequest) (*storage.Config, error)
}

// UnimplementedConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetPublicConfig(context.Context, *Empty) (*storage.PublicConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetPrivateConfig(context.Context, *Empty) (*storage.PrivateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetVulnerabilityExceptionConfig(context.Context, *Empty) (*GetVulnerabilityExceptionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilityExceptionConfig not implemented")
}
func (UnimplementedConfigServiceServer) UpdateVulnerabilityExceptionConfig(context.Context, *UpdateVulnerabilityExceptionConfigRequest) (*UpdateVulnerabilityExceptionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVulnerabilityExceptionConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetConfig(context.Context, *Empty) (*storage.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServiceServer) PutConfig(context.Context, *PutConfigRequest) (*storage.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfig not implemented")
}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetPublicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetPublicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetPublicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetPublicConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetPrivateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetPrivateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetPrivateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetPrivateConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetVulnerabilityExceptionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetVulnerabilityExceptionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetVulnerabilityExceptionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetVulnerabilityExceptionConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateVulnerabilityExceptionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVulnerabilityExceptionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateVulnerabilityExceptionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateVulnerabilityExceptionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateVulnerabilityExceptionConfig(ctx, req.(*UpdateVulnerabilityExceptionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_PutConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).PutConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_PutConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).PutConfig(ctx, req.(*PutConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicConfig",
			Handler:    _ConfigService_GetPublicConfig_Handler,
		},
		{
			MethodName: "GetPrivateConfig",
			Handler:    _ConfigService_GetPrivateConfig_Handler,
		},
		{
			MethodName: "GetVulnerabilityExceptionConfig",
			Handler:    _ConfigService_GetVulnerabilityExceptionConfig_Handler,
		},
		{
			MethodName: "UpdateVulnerabilityExceptionConfig",
			Handler:    _ConfigService_UpdateVulnerabilityExceptionConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "PutConfig",
			Handler:    _ConfigService_PutConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/config_service.proto",
}
