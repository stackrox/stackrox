// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/process_listening_on_port_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ListeningEndpointsService_GetListeningEndpoints_FullMethodName = "/v1.ListeningEndpointsService/GetListeningEndpoints"
)

// ListeningEndpointsServiceClient is the client API for ListeningEndpointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListeningEndpointsServiceClient interface {
	// GetListeningEndpoints returns the listening endpoints and the processes that opened them for a given deployment
	GetListeningEndpoints(ctx context.Context, in *GetProcessesListeningOnPortsRequest, opts ...grpc.CallOption) (*GetProcessesListeningOnPortsResponse, error)
}

type listeningEndpointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListeningEndpointsServiceClient(cc grpc.ClientConnInterface) ListeningEndpointsServiceClient {
	return &listeningEndpointsServiceClient{cc}
}

func (c *listeningEndpointsServiceClient) GetListeningEndpoints(ctx context.Context, in *GetProcessesListeningOnPortsRequest, opts ...grpc.CallOption) (*GetProcessesListeningOnPortsResponse, error) {
	out := new(GetProcessesListeningOnPortsResponse)
	err := c.cc.Invoke(ctx, ListeningEndpointsService_GetListeningEndpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListeningEndpointsServiceServer is the server API for ListeningEndpointsService service.
// All implementations should embed UnimplementedListeningEndpointsServiceServer
// for forward compatibility
type ListeningEndpointsServiceServer interface {
	// GetListeningEndpoints returns the listening endpoints and the processes that opened them for a given deployment
	GetListeningEndpoints(context.Context, *GetProcessesListeningOnPortsRequest) (*GetProcessesListeningOnPortsResponse, error)
}

// UnimplementedListeningEndpointsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedListeningEndpointsServiceServer struct {
}

func (UnimplementedListeningEndpointsServiceServer) GetListeningEndpoints(context.Context, *GetProcessesListeningOnPortsRequest) (*GetProcessesListeningOnPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningEndpoints not implemented")
}

// UnsafeListeningEndpointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListeningEndpointsServiceServer will
// result in compilation errors.
type UnsafeListeningEndpointsServiceServer interface {
	mustEmbedUnimplementedListeningEndpointsServiceServer()
}

func RegisterListeningEndpointsServiceServer(s grpc.ServiceRegistrar, srv ListeningEndpointsServiceServer) {
	s.RegisterService(&ListeningEndpointsService_ServiceDesc, srv)
}

func _ListeningEndpointsService_GetListeningEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessesListeningOnPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListeningEndpointsServiceServer).GetListeningEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListeningEndpointsService_GetListeningEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListeningEndpointsServiceServer).GetListeningEndpoints(ctx, req.(*GetProcessesListeningOnPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListeningEndpointsService_ServiceDesc is the grpc.ServiceDesc for ListeningEndpointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListeningEndpointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ListeningEndpointsService",
	HandlerType: (*ListeningEndpointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListeningEndpoints",
			Handler:    _ListeningEndpointsService_GetListeningEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/process_listening_on_port_service.proto",
}
