// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/backup_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalBackupService_GetExternalBackup_FullMethodName         = "/v1.ExternalBackupService/GetExternalBackup"
	ExternalBackupService_GetExternalBackups_FullMethodName        = "/v1.ExternalBackupService/GetExternalBackups"
	ExternalBackupService_PostExternalBackup_FullMethodName        = "/v1.ExternalBackupService/PostExternalBackup"
	ExternalBackupService_PutExternalBackup_FullMethodName         = "/v1.ExternalBackupService/PutExternalBackup"
	ExternalBackupService_TestExternalBackup_FullMethodName        = "/v1.ExternalBackupService/TestExternalBackup"
	ExternalBackupService_DeleteExternalBackup_FullMethodName      = "/v1.ExternalBackupService/DeleteExternalBackup"
	ExternalBackupService_TriggerExternalBackup_FullMethodName     = "/v1.ExternalBackupService/TriggerExternalBackup"
	ExternalBackupService_UpdateExternalBackup_FullMethodName      = "/v1.ExternalBackupService/UpdateExternalBackup"
	ExternalBackupService_TestUpdatedExternalBackup_FullMethodName = "/v1.ExternalBackupService/TestUpdatedExternalBackup"
)

// ExternalBackupServiceClient is the client API for ExternalBackupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalBackupServiceClient interface {
	// GetExternalBackup returns the external backup configuration given its ID.
	GetExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.ExternalBackup, error)
	// GetExternalBackups returns all external backup configurations.
	GetExternalBackups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetExternalBackupsResponse, error)
	// PostExternalBackup creates an external backup configuration.
	PostExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*storage.ExternalBackup, error)
	// PutExternalBackup modifies a given external backup, without using stored credential reconciliation.
	PutExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*storage.ExternalBackup, error)
	// TestExternalBackup tests an external backup configuration.
	TestExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*Empty, error)
	// DeleteExternalBackup removes an external backup configuration given its ID.
	DeleteExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// TriggerExternalBackup initiates an external backup for the given configuration.
	TriggerExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// UpdateExternalBackup modifies a given external backup, with optional stored credential reconciliation.
	UpdateExternalBackup(ctx context.Context, in *UpdateExternalBackupRequest, opts ...grpc.CallOption) (*storage.ExternalBackup, error)
	// TestUpdatedExternalBackup checks if the given external backup is correctly configured, with optional stored credential reconciliation.
	TestUpdatedExternalBackup(ctx context.Context, in *UpdateExternalBackupRequest, opts ...grpc.CallOption) (*Empty, error)
}

type externalBackupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalBackupServiceClient(cc grpc.ClientConnInterface) ExternalBackupServiceClient {
	return &externalBackupServiceClient{cc}
}

func (c *externalBackupServiceClient) GetExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.ExternalBackup, error) {
	out := new(storage.ExternalBackup)
	err := c.cc.Invoke(ctx, ExternalBackupService_GetExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) GetExternalBackups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetExternalBackupsResponse, error) {
	out := new(GetExternalBackupsResponse)
	err := c.cc.Invoke(ctx, ExternalBackupService_GetExternalBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) PostExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*storage.ExternalBackup, error) {
	out := new(storage.ExternalBackup)
	err := c.cc.Invoke(ctx, ExternalBackupService_PostExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) PutExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*storage.ExternalBackup, error) {
	out := new(storage.ExternalBackup)
	err := c.cc.Invoke(ctx, ExternalBackupService_PutExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) TestExternalBackup(ctx context.Context, in *storage.ExternalBackup, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExternalBackupService_TestExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) DeleteExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExternalBackupService_DeleteExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) TriggerExternalBackup(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExternalBackupService_TriggerExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) UpdateExternalBackup(ctx context.Context, in *UpdateExternalBackupRequest, opts ...grpc.CallOption) (*storage.ExternalBackup, error) {
	out := new(storage.ExternalBackup)
	err := c.cc.Invoke(ctx, ExternalBackupService_UpdateExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalBackupServiceClient) TestUpdatedExternalBackup(ctx context.Context, in *UpdateExternalBackupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExternalBackupService_TestUpdatedExternalBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalBackupServiceServer is the server API for ExternalBackupService service.
// All implementations should embed UnimplementedExternalBackupServiceServer
// for forward compatibility
type ExternalBackupServiceServer interface {
	// GetExternalBackup returns the external backup configuration given its ID.
	GetExternalBackup(context.Context, *ResourceByID) (*storage.ExternalBackup, error)
	// GetExternalBackups returns all external backup configurations.
	GetExternalBackups(context.Context, *Empty) (*GetExternalBackupsResponse, error)
	// PostExternalBackup creates an external backup configuration.
	PostExternalBackup(context.Context, *storage.ExternalBackup) (*storage.ExternalBackup, error)
	// PutExternalBackup modifies a given external backup, without using stored credential reconciliation.
	PutExternalBackup(context.Context, *storage.ExternalBackup) (*storage.ExternalBackup, error)
	// TestExternalBackup tests an external backup configuration.
	TestExternalBackup(context.Context, *storage.ExternalBackup) (*Empty, error)
	// DeleteExternalBackup removes an external backup configuration given its ID.
	DeleteExternalBackup(context.Context, *ResourceByID) (*Empty, error)
	// TriggerExternalBackup initiates an external backup for the given configuration.
	TriggerExternalBackup(context.Context, *ResourceByID) (*Empty, error)
	// UpdateExternalBackup modifies a given external backup, with optional stored credential reconciliation.
	UpdateExternalBackup(context.Context, *UpdateExternalBackupRequest) (*storage.ExternalBackup, error)
	// TestUpdatedExternalBackup checks if the given external backup is correctly configured, with optional stored credential reconciliation.
	TestUpdatedExternalBackup(context.Context, *UpdateExternalBackupRequest) (*Empty, error)
}

// UnimplementedExternalBackupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExternalBackupServiceServer struct {
}

func (UnimplementedExternalBackupServiceServer) GetExternalBackup(context.Context, *ResourceByID) (*storage.ExternalBackup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) GetExternalBackups(context.Context, *Empty) (*GetExternalBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalBackups not implemented")
}
func (UnimplementedExternalBackupServiceServer) PostExternalBackup(context.Context, *storage.ExternalBackup) (*storage.ExternalBackup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) PutExternalBackup(context.Context, *storage.ExternalBackup) (*storage.ExternalBackup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) TestExternalBackup(context.Context, *storage.ExternalBackup) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) DeleteExternalBackup(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) TriggerExternalBackup(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) UpdateExternalBackup(context.Context, *UpdateExternalBackupRequest) (*storage.ExternalBackup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalBackup not implemented")
}
func (UnimplementedExternalBackupServiceServer) TestUpdatedExternalBackup(context.Context, *UpdateExternalBackupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUpdatedExternalBackup not implemented")
}

// UnsafeExternalBackupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalBackupServiceServer will
// result in compilation errors.
type UnsafeExternalBackupServiceServer interface {
	mustEmbedUnimplementedExternalBackupServiceServer()
}

func RegisterExternalBackupServiceServer(s grpc.ServiceRegistrar, srv ExternalBackupServiceServer) {
	s.RegisterService(&ExternalBackupService_ServiceDesc, srv)
}

func _ExternalBackupService_GetExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).GetExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_GetExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).GetExternalBackup(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_GetExternalBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).GetExternalBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_GetExternalBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).GetExternalBackups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_PostExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ExternalBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).PostExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_PostExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).PostExternalBackup(ctx, req.(*storage.ExternalBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_PutExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ExternalBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).PutExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_PutExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).PutExternalBackup(ctx, req.(*storage.ExternalBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_TestExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.ExternalBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).TestExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_TestExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).TestExternalBackup(ctx, req.(*storage.ExternalBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_DeleteExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).DeleteExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_DeleteExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).DeleteExternalBackup(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_TriggerExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).TriggerExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_TriggerExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).TriggerExternalBackup(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_UpdateExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).UpdateExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_UpdateExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).UpdateExternalBackup(ctx, req.(*UpdateExternalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalBackupService_TestUpdatedExternalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalBackupServiceServer).TestUpdatedExternalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalBackupService_TestUpdatedExternalBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalBackupServiceServer).TestUpdatedExternalBackup(ctx, req.(*UpdateExternalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalBackupService_ServiceDesc is the grpc.ServiceDesc for ExternalBackupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalBackupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ExternalBackupService",
	HandlerType: (*ExternalBackupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalBackup",
			Handler:    _ExternalBackupService_GetExternalBackup_Handler,
		},
		{
			MethodName: "GetExternalBackups",
			Handler:    _ExternalBackupService_GetExternalBackups_Handler,
		},
		{
			MethodName: "PostExternalBackup",
			Handler:    _ExternalBackupService_PostExternalBackup_Handler,
		},
		{
			MethodName: "PutExternalBackup",
			Handler:    _ExternalBackupService_PutExternalBackup_Handler,
		},
		{
			MethodName: "TestExternalBackup",
			Handler:    _ExternalBackupService_TestExternalBackup_Handler,
		},
		{
			MethodName: "DeleteExternalBackup",
			Handler:    _ExternalBackupService_DeleteExternalBackup_Handler,
		},
		{
			MethodName: "TriggerExternalBackup",
			Handler:    _ExternalBackupService_TriggerExternalBackup_Handler,
		},
		{
			MethodName: "UpdateExternalBackup",
			Handler:    _ExternalBackupService_UpdateExternalBackup_Handler,
		},
		{
			MethodName: "TestUpdatedExternalBackup",
			Handler:    _ExternalBackupService_TestUpdatedExternalBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/backup_service.proto",
}
