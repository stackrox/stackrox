// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/signal.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Signal message tracks process and network activity.
// Specifically, process launches and network connects/accepts.
type Signal struct {
	// Types that are valid to be assigned to Signal:
	//	*Signal_ProcessSignal
	Signal               isSignal_Signal `protobuf_oneof:"signal"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8621ed45343b7ffd, []int{0}
}
func (m *Signal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(m, src)
}
func (m *Signal) XXX_Size() int {
	return m.Size()
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

type isSignal_Signal interface {
	isSignal_Signal()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isSignal_Signal
}

type Signal_ProcessSignal struct {
	ProcessSignal *storage.ProcessSignal `protobuf:"bytes,1,opt,name=process_signal,json=processSignal,proto3,oneof" json:"process_signal,omitempty"`
}

func (*Signal_ProcessSignal) isSignal_Signal() {}
func (m *Signal_ProcessSignal) Clone() isSignal_Signal {
	if m == nil {
		return nil
	}
	cloned := new(Signal_ProcessSignal)
	*cloned = *m

	cloned.ProcessSignal = m.ProcessSignal.Clone()
	return cloned
}

func (m *Signal) GetSignal() isSignal_Signal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *Signal) GetProcessSignal() *storage.ProcessSignal {
	if x, ok := m.GetSignal().(*Signal_ProcessSignal); ok {
		return x.ProcessSignal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Signal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Signal_ProcessSignal)(nil),
	}
}

func (m *Signal) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Signal) Clone() *Signal {
	if m == nil {
		return nil
	}
	cloned := new(Signal)
	*cloned = *m

	if m.Signal != nil {
		cloned.Signal = m.Signal.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterType((*Signal)(nil), "v1.Signal")
}

func init() { proto.RegisterFile("api/v1/signal.proto", fileDescriptor_8621ed45343b7ffd) }

var fileDescriptor_8621ed45343b7ffd = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x2c, 0xc8, 0xd4,
	0x2f, 0x33, 0xd4, 0x2f, 0xce, 0x4c, 0xcf, 0x4b, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x33, 0x94, 0x92, 0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x2f, 0x28, 0xca,
	0x4f, 0x4e, 0x2d, 0x2e, 0x8e, 0xcf, 0xcc, 0x4b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0x2f, 0x82, 0x28,
	0x52, 0x0a, 0xe6, 0x62, 0x0b, 0x06, 0x6b, 0x12, 0xb2, 0xe7, 0xe2, 0x83, 0x29, 0x82, 0x18, 0x23,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa6, 0x07, 0x35, 0x43, 0x2f, 0x00, 0x22, 0x0d, 0x51,
	0xef, 0xc1, 0x10, 0xc4, 0x5b, 0x80, 0x2c, 0xe0, 0xc4, 0xc1, 0xc5, 0x06, 0xd1, 0xe8, 0x64, 0x75,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7,
	0xc0, 0x25, 0x91, 0x99, 0xaf, 0x57, 0x5c, 0x92, 0x98, 0x9c, 0x5d, 0x94, 0x5f, 0x01, 0xb1, 0x59,
	0x2f, 0xb1, 0x20, 0x53, 0xaf, 0xcc, 0x30, 0x8a, 0x5b, 0x4f, 0x1f, 0xe2, 0x78, 0xeb, 0x32, 0xc3,
	0x1f, 0x8c, 0x8c, 0x49, 0x6c, 0x60, 0x59, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x8f,
	0x5b, 0x85, 0xd3, 0x00, 0x00, 0x00,
}

func (m *Signal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signal != nil {
		{
			size := m.Signal.Size()
			i -= size
			if _, err := m.Signal.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Signal_ProcessSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signal_ProcessSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProcessSignal != nil {
		{
			size, err := m.ProcessSignal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSignal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintSignal(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signal != nil {
		n += m.Signal.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signal_ProcessSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessSignal != nil {
		l = m.ProcessSignal.Size()
		n += 1 + l + sovSignal(uint64(l))
	}
	return n
}

func sovSignal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignal(x uint64) (n int) {
	return sovSignal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessSignal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.ProcessSignal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Signal = &Signal_ProcessSignal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignal = fmt.Errorf("proto: unexpected end of group")
)
