// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/vuln_req_service.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetVulnerabilityRequestResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetVulnerabilityRequestResponse) Reset()         { *m = GetVulnerabilityRequestResponse{} }
func (m *GetVulnerabilityRequestResponse) String() string { return proto.CompactTextString(m) }
func (*GetVulnerabilityRequestResponse) ProtoMessage()    {}
func (*GetVulnerabilityRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{0}
}
func (m *GetVulnerabilityRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilityRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilityRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilityRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilityRequestResponse.Merge(m, src)
}
func (m *GetVulnerabilityRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilityRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilityRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilityRequestResponse proto.InternalMessageInfo

func (m *GetVulnerabilityRequestResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *GetVulnerabilityRequestResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetVulnerabilityRequestResponse) Clone() *GetVulnerabilityRequestResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetVulnerabilityRequestResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type ListVulnerabilityRequestsResponse struct {
	RequestInfos         []*storage.VulnerabilityRequest `protobuf:"bytes,1,rep,name=request_infos,json=requestInfos,proto3" json:"request_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ListVulnerabilityRequestsResponse) Reset()         { *m = ListVulnerabilityRequestsResponse{} }
func (m *ListVulnerabilityRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*ListVulnerabilityRequestsResponse) ProtoMessage()    {}
func (*ListVulnerabilityRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{1}
}
func (m *ListVulnerabilityRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVulnerabilityRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVulnerabilityRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVulnerabilityRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVulnerabilityRequestsResponse.Merge(m, src)
}
func (m *ListVulnerabilityRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListVulnerabilityRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVulnerabilityRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVulnerabilityRequestsResponse proto.InternalMessageInfo

func (m *ListVulnerabilityRequestsResponse) GetRequestInfos() []*storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfos
	}
	return nil
}

func (m *ListVulnerabilityRequestsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListVulnerabilityRequestsResponse) Clone() *ListVulnerabilityRequestsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListVulnerabilityRequestsResponse)
	*cloned = *m

	if m.RequestInfos != nil {
		cloned.RequestInfos = make([]*storage.VulnerabilityRequest, len(m.RequestInfos))
		for idx, v := range m.RequestInfos {
			cloned.RequestInfos[idx] = v.Clone()
		}
	}
	return cloned
}

// next available tag: 6
type DeferVulnRequest struct {
	// This field indicates the CVEs requested to be deferred.
	Cve     string                              `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	Comment string                              `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Scope   *storage.VulnerabilityRequest_Scope `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// Types that are valid to be assigned to Expiry:
	//	*DeferVulnRequest_ExpiresWhenFixed
	//	*DeferVulnRequest_ExpiresOn
	Expiry               isDeferVulnRequest_Expiry `protobuf_oneof:"expiry"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeferVulnRequest) Reset()         { *m = DeferVulnRequest{} }
func (m *DeferVulnRequest) String() string { return proto.CompactTextString(m) }
func (*DeferVulnRequest) ProtoMessage()    {}
func (*DeferVulnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{2}
}
func (m *DeferVulnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferVulnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferVulnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferVulnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferVulnRequest.Merge(m, src)
}
func (m *DeferVulnRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeferVulnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferVulnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeferVulnRequest proto.InternalMessageInfo

type isDeferVulnRequest_Expiry interface {
	isDeferVulnRequest_Expiry()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isDeferVulnRequest_Expiry
}

type DeferVulnRequest_ExpiresWhenFixed struct {
	ExpiresWhenFixed bool `protobuf:"varint,4,opt,name=expires_when_fixed,json=expiresWhenFixed,proto3,oneof" json:"expires_when_fixed,omitempty"`
}
type DeferVulnRequest_ExpiresOn struct {
	ExpiresOn *types.Timestamp `protobuf:"bytes,5,opt,name=expires_on,json=expiresOn,proto3,oneof" json:"expires_on,omitempty"`
}

func (*DeferVulnRequest_ExpiresWhenFixed) isDeferVulnRequest_Expiry() {}
func (m *DeferVulnRequest_ExpiresWhenFixed) Clone() isDeferVulnRequest_Expiry {
	if m == nil {
		return nil
	}
	cloned := new(DeferVulnRequest_ExpiresWhenFixed)
	*cloned = *m

	return cloned
}
func (*DeferVulnRequest_ExpiresOn) isDeferVulnRequest_Expiry() {}
func (m *DeferVulnRequest_ExpiresOn) Clone() isDeferVulnRequest_Expiry {
	if m == nil {
		return nil
	}
	cloned := new(DeferVulnRequest_ExpiresOn)
	*cloned = *m

	cloned.ExpiresOn = m.ExpiresOn.Clone()
	return cloned
}

func (m *DeferVulnRequest) GetExpiry() isDeferVulnRequest_Expiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *DeferVulnRequest) GetCve() string {
	if m != nil {
		return m.Cve
	}
	return ""
}

func (m *DeferVulnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *DeferVulnRequest) GetScope() *storage.VulnerabilityRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *DeferVulnRequest) GetExpiresWhenFixed() bool {
	if x, ok := m.GetExpiry().(*DeferVulnRequest_ExpiresWhenFixed); ok {
		return x.ExpiresWhenFixed
	}
	return false
}

func (m *DeferVulnRequest) GetExpiresOn() *types.Timestamp {
	if x, ok := m.GetExpiry().(*DeferVulnRequest_ExpiresOn); ok {
		return x.ExpiresOn
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeferVulnRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeferVulnRequest_ExpiresWhenFixed)(nil),
		(*DeferVulnRequest_ExpiresOn)(nil),
	}
}

func (m *DeferVulnRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferVulnRequest) Clone() *DeferVulnRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeferVulnRequest)
	*cloned = *m

	cloned.Scope = m.Scope.Clone()
	if m.Expiry != nil {
		cloned.Expiry = m.Expiry.Clone()
	}
	return cloned
}

type DeferVulnResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DeferVulnResponse) Reset()         { *m = DeferVulnResponse{} }
func (m *DeferVulnResponse) String() string { return proto.CompactTextString(m) }
func (*DeferVulnResponse) ProtoMessage()    {}
func (*DeferVulnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{3}
}
func (m *DeferVulnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeferVulnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeferVulnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeferVulnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeferVulnResponse.Merge(m, src)
}
func (m *DeferVulnResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeferVulnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeferVulnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeferVulnResponse proto.InternalMessageInfo

func (m *DeferVulnResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *DeferVulnResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeferVulnResponse) Clone() *DeferVulnResponse {
	if m == nil {
		return nil
	}
	cloned := new(DeferVulnResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type FalsePositiveVulnRequest struct {
	// This field indicates the CVE requested to be marked as false-positive.
	Cve                  string                              `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	Scope                *storage.VulnerabilityRequest_Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment              string                              `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *FalsePositiveVulnRequest) Reset()         { *m = FalsePositiveVulnRequest{} }
func (m *FalsePositiveVulnRequest) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveVulnRequest) ProtoMessage()    {}
func (*FalsePositiveVulnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{4}
}
func (m *FalsePositiveVulnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveVulnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveVulnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveVulnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveVulnRequest.Merge(m, src)
}
func (m *FalsePositiveVulnRequest) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveVulnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveVulnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveVulnRequest proto.InternalMessageInfo

func (m *FalsePositiveVulnRequest) GetCve() string {
	if m != nil {
		return m.Cve
	}
	return ""
}

func (m *FalsePositiveVulnRequest) GetScope() *storage.VulnerabilityRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *FalsePositiveVulnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *FalsePositiveVulnRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveVulnRequest) Clone() *FalsePositiveVulnRequest {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveVulnRequest)
	*cloned = *m

	cloned.Scope = m.Scope.Clone()
	return cloned
}

type FalsePositiveVulnResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *FalsePositiveVulnResponse) Reset()         { *m = FalsePositiveVulnResponse{} }
func (m *FalsePositiveVulnResponse) String() string { return proto.CompactTextString(m) }
func (*FalsePositiveVulnResponse) ProtoMessage()    {}
func (*FalsePositiveVulnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{5}
}
func (m *FalsePositiveVulnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FalsePositiveVulnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FalsePositiveVulnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FalsePositiveVulnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FalsePositiveVulnResponse.Merge(m, src)
}
func (m *FalsePositiveVulnResponse) XXX_Size() int {
	return m.Size()
}
func (m *FalsePositiveVulnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FalsePositiveVulnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FalsePositiveVulnResponse proto.InternalMessageInfo

func (m *FalsePositiveVulnResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *FalsePositiveVulnResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *FalsePositiveVulnResponse) Clone() *FalsePositiveVulnResponse {
	if m == nil {
		return nil
	}
	cloned := new(FalsePositiveVulnResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type ApproveVulnRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveVulnRequest) Reset()         { *m = ApproveVulnRequest{} }
func (m *ApproveVulnRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnRequest) ProtoMessage()    {}
func (*ApproveVulnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{6}
}
func (m *ApproveVulnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnRequest.Merge(m, src)
}
func (m *ApproveVulnRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnRequest proto.InternalMessageInfo

func (m *ApproveVulnRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApproveVulnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ApproveVulnRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnRequest) Clone() *ApproveVulnRequest {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnRequest)
	*cloned = *m

	return cloned
}

type ApproveVulnRequestResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ApproveVulnRequestResponse) Reset()         { *m = ApproveVulnRequestResponse{} }
func (m *ApproveVulnRequestResponse) String() string { return proto.CompactTextString(m) }
func (*ApproveVulnRequestResponse) ProtoMessage()    {}
func (*ApproveVulnRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{7}
}
func (m *ApproveVulnRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveVulnRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveVulnRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveVulnRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveVulnRequestResponse.Merge(m, src)
}
func (m *ApproveVulnRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApproveVulnRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveVulnRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveVulnRequestResponse proto.InternalMessageInfo

func (m *ApproveVulnRequestResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *ApproveVulnRequestResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ApproveVulnRequestResponse) Clone() *ApproveVulnRequestResponse {
	if m == nil {
		return nil
	}
	cloned := new(ApproveVulnRequestResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type DenyVulnRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenyVulnRequest) Reset()         { *m = DenyVulnRequest{} }
func (m *DenyVulnRequest) String() string { return proto.CompactTextString(m) }
func (*DenyVulnRequest) ProtoMessage()    {}
func (*DenyVulnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{8}
}
func (m *DenyVulnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnRequest.Merge(m, src)
}
func (m *DenyVulnRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnRequest proto.InternalMessageInfo

func (m *DenyVulnRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DenyVulnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *DenyVulnRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnRequest) Clone() *DenyVulnRequest {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnRequest)
	*cloned = *m

	return cloned
}

type DenyVulnRequestResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DenyVulnRequestResponse) Reset()         { *m = DenyVulnRequestResponse{} }
func (m *DenyVulnRequestResponse) String() string { return proto.CompactTextString(m) }
func (*DenyVulnRequestResponse) ProtoMessage()    {}
func (*DenyVulnRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{9}
}
func (m *DenyVulnRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyVulnRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenyVulnRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenyVulnRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyVulnRequestResponse.Merge(m, src)
}
func (m *DenyVulnRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenyVulnRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyVulnRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenyVulnRequestResponse proto.InternalMessageInfo

func (m *DenyVulnRequestResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *DenyVulnRequestResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DenyVulnRequestResponse) Clone() *DenyVulnRequestResponse {
	if m == nil {
		return nil
	}
	cloned := new(DenyVulnRequestResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type UpdateVulnRequest struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Expiry               *storage.RequestExpiry `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"` // Currently, only expiry can be updated
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateVulnRequest) Reset()         { *m = UpdateVulnRequest{} }
func (m *UpdateVulnRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnRequest) ProtoMessage()    {}
func (*UpdateVulnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{10}
}
func (m *UpdateVulnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnRequest.Merge(m, src)
}
func (m *UpdateVulnRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnRequest proto.InternalMessageInfo

func (m *UpdateVulnRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateVulnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *UpdateVulnRequest) GetExpiry() *storage.RequestExpiry {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *UpdateVulnRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnRequest) Clone() *UpdateVulnRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnRequest)
	*cloned = *m

	cloned.Expiry = m.Expiry.Clone()
	return cloned
}

type UpdateVulnRequestResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateVulnRequestResponse) Reset()         { *m = UpdateVulnRequestResponse{} }
func (m *UpdateVulnRequestResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateVulnRequestResponse) ProtoMessage()    {}
func (*UpdateVulnRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{11}
}
func (m *UpdateVulnRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnRequestResponse.Merge(m, src)
}
func (m *UpdateVulnRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnRequestResponse proto.InternalMessageInfo

func (m *UpdateVulnRequestResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *UpdateVulnRequestResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnRequestResponse) Clone() *UpdateVulnRequestResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnRequestResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

type UndoVulnRequestResponse struct {
	RequestInfo          *storage.VulnerabilityRequest `protobuf:"bytes,1,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UndoVulnRequestResponse) Reset()         { *m = UndoVulnRequestResponse{} }
func (m *UndoVulnRequestResponse) String() string { return proto.CompactTextString(m) }
func (*UndoVulnRequestResponse) ProtoMessage()    {}
func (*UndoVulnRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce3a30d0c9e6d0c8, []int{12}
}
func (m *UndoVulnRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndoVulnRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndoVulnRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndoVulnRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoVulnRequestResponse.Merge(m, src)
}
func (m *UndoVulnRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *UndoVulnRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoVulnRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndoVulnRequestResponse proto.InternalMessageInfo

func (m *UndoVulnRequestResponse) GetRequestInfo() *storage.VulnerabilityRequest {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *UndoVulnRequestResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UndoVulnRequestResponse) Clone() *UndoVulnRequestResponse {
	if m == nil {
		return nil
	}
	cloned := new(UndoVulnRequestResponse)
	*cloned = *m

	cloned.RequestInfo = m.RequestInfo.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetVulnerabilityRequestResponse)(nil), "v1.GetVulnerabilityRequestResponse")
	proto.RegisterType((*ListVulnerabilityRequestsResponse)(nil), "v1.ListVulnerabilityRequestsResponse")
	proto.RegisterType((*DeferVulnRequest)(nil), "v1.DeferVulnRequest")
	proto.RegisterType((*DeferVulnResponse)(nil), "v1.DeferVulnResponse")
	proto.RegisterType((*FalsePositiveVulnRequest)(nil), "v1.FalsePositiveVulnRequest")
	proto.RegisterType((*FalsePositiveVulnResponse)(nil), "v1.FalsePositiveVulnResponse")
	proto.RegisterType((*ApproveVulnRequest)(nil), "v1.ApproveVulnRequest")
	proto.RegisterType((*ApproveVulnRequestResponse)(nil), "v1.ApproveVulnRequestResponse")
	proto.RegisterType((*DenyVulnRequest)(nil), "v1.DenyVulnRequest")
	proto.RegisterType((*DenyVulnRequestResponse)(nil), "v1.DenyVulnRequestResponse")
	proto.RegisterType((*UpdateVulnRequest)(nil), "v1.UpdateVulnRequest")
	proto.RegisterType((*UpdateVulnRequestResponse)(nil), "v1.UpdateVulnRequestResponse")
	proto.RegisterType((*UndoVulnRequestResponse)(nil), "v1.UndoVulnRequestResponse")
}

func init() { proto.RegisterFile("api/v1/vuln_req_service.proto", fileDescriptor_ce3a30d0c9e6d0c8) }

var fileDescriptor_ce3a30d0c9e6d0c8 = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xef, 0x6e, 0xdc, 0x44,
	0x10, 0xc0, 0xe3, 0x3b, 0x5a, 0x92, 0x69, 0x80, 0xeb, 0x96, 0x26, 0x8e, 0x2f, 0x77, 0x49, 0xb6,
	0x54, 0x44, 0x91, 0xf0, 0xe9, 0xca, 0x27, 0xa8, 0x84, 0x20, 0x4a, 0x4b, 0x2b, 0x21, 0x01, 0x57,
	0x02, 0x15, 0x55, 0x39, 0x39, 0xf6, 0x5c, 0xb2, 0x70, 0xb7, 0x6b, 0xbc, 0xb6, 0x9b, 0x53, 0x85,
	0x10, 0x48, 0x3c, 0x01, 0x5f, 0x78, 0x00, 0x1e, 0x86, 0x8f, 0x48, 0xbc, 0x00, 0x0a, 0x3c, 0x00,
	0x8f, 0x80, 0x76, 0xbd, 0x76, 0x2f, 0xb1, 0xdd, 0x40, 0x74, 0xfd, 0x76, 0x3b, 0xff, 0x7e, 0x33,
	0x3b, 0x3b, 0x73, 0x86, 0x8e, 0x17, 0xb2, 0x5e, 0xda, 0xef, 0xa5, 0xc9, 0x98, 0x0f, 0x23, 0xfc,
	0x76, 0x28, 0x31, 0x4a, 0x99, 0x8f, 0x6e, 0x18, 0x89, 0x58, 0x90, 0x46, 0xda, 0x77, 0xae, 0x19,
	0x13, 0x5f, 0x4c, 0x26, 0x82, 0x67, 0x0a, 0x87, 0x18, 0x21, 0x4e, 0xc2, 0x78, 0x6a, 0x64, 0x6d,
	0x23, 0x93, 0xe8, 0x45, 0xfe, 0xd1, 0xe9, 0x48, 0xce, 0xfa, 0xa1, 0x10, 0x87, 0x63, 0xec, 0x29,
	0x1b, 0x8f, 0x73, 0x11, 0x7b, 0x31, 0x13, 0x5c, 0x1a, 0xed, 0x86, 0xd1, 0xea, 0xd3, 0x41, 0x32,
	0xea, 0xc5, 0x6c, 0x82, 0x32, 0xf6, 0x26, 0x61, 0x1e, 0x5b, 0xc6, 0x22, 0xf2, 0x0e, 0xb1, 0x48,
	0x34, 0x41, 0x19, 0x1b, 0x6f, 0xea, 0xc3, 0xc6, 0x87, 0x18, 0x7f, 0x9e, 0x8c, 0x39, 0x46, 0xde,
	0x01, 0x1b, 0xb3, 0x78, 0x3a, 0xc8, 0x2c, 0x06, 0x28, 0x43, 0xc1, 0x25, 0x92, 0xf7, 0x61, 0xd9,
	0x38, 0x0d, 0x19, 0x1f, 0x09, 0xdb, 0xda, 0xb4, 0xb6, 0xaf, 0xdc, 0xea, 0xb8, 0x26, 0xac, 0x5b,
	0xe9, 0x7c, 0xc5, 0xb8, 0xdc, 0xe7, 0x23, 0x41, 0x0f, 0x61, 0xeb, 0x23, 0x26, 0x2b, 0x29, 0xb2,
	0xc0, 0xec, 0xc2, 0x2b, 0xb3, 0x18, 0x69, 0x5b, 0x9b, 0xcd, 0xf3, 0x39, 0xcb, 0x33, 0x1c, 0x49,
	0xff, 0xb1, 0xa0, 0xb5, 0x87, 0x23, 0x8c, 0x94, 0xad, 0x31, 0x21, 0x2d, 0x68, 0xfa, 0x29, 0xea,
	0xb4, 0x97, 0x06, 0xea, 0x27, 0xb1, 0xe1, 0x65, 0xd5, 0x11, 0xe4, 0xb1, 0xdd, 0xd0, 0xd2, 0xfc,
	0x48, 0xde, 0x81, 0x4b, 0xd2, 0x17, 0x21, 0xda, 0x4d, 0x5d, 0xe4, 0x8d, 0xe7, 0xc2, 0xdd, 0x07,
	0xca, 0x74, 0x90, 0x79, 0x10, 0x17, 0x08, 0x1e, 0x87, 0x2c, 0x42, 0x39, 0x7c, 0x72, 0x84, 0x7c,
	0x38, 0x62, 0xc7, 0x18, 0xd8, 0x2f, 0x6d, 0x5a, 0xdb, 0x8b, 0xf7, 0x16, 0x06, 0x2d, 0xa3, 0xfb,
	0xe2, 0x08, 0xf9, 0x5d, 0xa5, 0x21, 0xb7, 0x01, 0x72, 0x7b, 0xc1, 0xed, 0x4b, 0x9a, 0xe7, 0xb8,
	0x59, 0x33, 0xdd, 0xbc, 0x99, 0xee, 0x67, 0x79, 0x33, 0xef, 0x2d, 0x0c, 0x96, 0x8c, 0xfd, 0xc7,
	0x7c, 0x77, 0x11, 0x2e, 0xeb, 0xc3, 0x94, 0xee, 0xc3, 0xd5, 0x99, 0x8a, 0xe7, 0xd6, 0xb2, 0x1f,
	0x2c, 0xb0, 0xef, 0x7a, 0x63, 0x89, 0x9f, 0x08, 0xc9, 0x62, 0x96, 0xe2, 0xf3, 0x6f, 0xb4, 0xb8,
	0xb7, 0xc6, 0xff, 0xbe, 0xb7, 0x99, 0x66, 0x34, 0x4f, 0x35, 0x83, 0x3e, 0x86, 0xb5, 0x8a, 0x14,
	0xe6, 0x56, 0xe2, 0x7b, 0x40, 0x3e, 0x08, 0xc3, 0x48, 0x9c, 0xae, 0xed, 0x55, 0x68, 0xb0, 0xc0,
	0x94, 0xd6, 0x60, 0x41, 0xfd, 0x5b, 0xa1, 0x5f, 0x81, 0x53, 0xf6, 0x9f, 0x63, 0x7e, 0xb7, 0xe1,
	0xb5, 0x3d, 0xe4, 0xd3, 0x8b, 0x25, 0xf7, 0x08, 0x56, 0xcf, 0x38, 0xcf, 0x31, 0xb3, 0x09, 0x5c,
	0xdd, 0x0f, 0x03, 0x2f, 0xbe, 0xd8, 0xc5, 0x11, 0x37, 0x7f, 0xbc, 0x66, 0xca, 0x56, 0x0a, 0xb4,
	0x89, 0x75, 0x47, 0x6b, 0x07, 0xf9, 0x13, 0x7f, 0x0c, 0x6b, 0x25, 0xdc, 0x1c, 0xab, 0x79, 0x04,
	0xab, 0xfb, 0x3c, 0x10, 0x2f, 0x24, 0xf8, 0xad, 0x5f, 0x17, 0xa1, 0x5d, 0x65, 0xf5, 0x20, 0xdb,
	0xf0, 0x44, 0xc0, 0x6a, 0xcd, 0xfe, 0x25, 0x2d, 0x37, 0xed, 0xbb, 0x03, 0x94, 0x22, 0x89, 0x7c,
	0xdc, 0x9d, 0xde, 0xdf, 0x73, 0x6e, 0x28, 0xc9, 0x39, 0xeb, 0x9a, 0x76, 0x7e, 0xfc, 0xe3, 0xef,
	0x9f, 0x1b, 0xab, 0xe4, 0xba, 0xfe, 0xe3, 0x49, 0xb1, 0x97, 0x6f, 0xfc, 0xde, 0x53, 0x16, 0x7c,
	0x47, 0xbe, 0x86, 0xb5, 0xda, 0x5d, 0x4c, 0x96, 0x35, 0xd2, 0x7b, 0xf2, 0x69, 0x82, 0xd1, 0xd4,
	0xb9, 0xa9, 0x4e, 0xe7, 0x2e, 0x6e, 0x6a, 0x6b, 0x20, 0x21, 0xad, 0xb3, 0x40, 0x12, 0x00, 0x29,
	0x76, 0x53, 0xe1, 0x4f, 0x5e, 0x57, 0x61, 0xcf, 0x6e, 0x69, 0xe7, 0xfa, 0x19, 0xa9, 0x09, 0xbe,
	0xa5, 0x83, 0xb7, 0xe9, 0x4a, 0xa9, 0x9a, 0x40, 0xd9, 0xbe, 0x6b, 0xed, 0x90, 0x9f, 0x2c, 0x70,
	0x4a, 0x7b, 0xe2, 0x19, 0x6e, 0x5d, 0x05, 0xae, 0x5b, 0x65, 0x4e, 0xa7, 0x46, 0x6b, 0xf0, 0x3b,
	0x1a, 0xff, 0x06, 0xdd, 0x28, 0xe1, 0x47, 0xca, 0xe7, 0xad, 0xd0, 0x38, 0xa9, 0x3c, 0xbe, 0x87,
	0xf6, 0xcc, 0x3e, 0x28, 0xb5, 0x73, 0x45, 0x91, 0xca, 0x0b, 0xc3, 0xe9, 0x56, 0xcb, 0x8b, 0x14,
	0xb6, 0x75, 0x0a, 0x94, 0x76, 0x2a, 0xfb, 0xd9, 0xf3, 0x32, 0x4f, 0x95, 0x80, 0x04, 0x3b, 0x9f,
	0xf9, 0x12, 0xfd, 0x5a, 0x76, 0xbd, 0xa7, 0x36, 0x82, 0xd3, 0xae, 0x10, 0x16, 0xdc, 0x9b, 0x9a,
	0xbb, 0x41, 0x9d, 0x6a, 0x6e, 0x80, 0x7c, 0xaa, 0xa0, 0x4f, 0xc1, 0x79, 0x36, 0x9c, 0x25, 0xac,
	0xee, 0x6a, 0x69, 0x78, 0xb3, 0x5b, 0xaf, 0x9d, 0x69, 0xfa, 0xa6, 0x46, 0x6f, 0xd1, 0xf5, 0x6a,
	0x74, 0xa2, 0x1d, 0x15, 0x7c, 0x02, 0x76, 0x3e, 0xba, 0xff, 0x61, 0x7c, 0x74, 0xb9, 0x35, 0xa3,
	0x4e, 0xa9, 0x66, 0xae, 0xd7, 0x95, 0x9b, 0xf0, 0x40, 0x90, 0x87, 0xe0, 0xec, 0xe1, 0x18, 0x6b,
	0x6a, 0x2d, 0x03, 0x97, 0x94, 0xe4, 0x8e, 0xfa, 0xcc, 0xcb, 0xa7, 0x72, 0xa7, 0x7a, 0x2a, 0x77,
	0xdd, 0xdf, 0x4e, 0xba, 0xd6, 0xef, 0x27, 0x5d, 0xeb, 0xcf, 0x93, 0xae, 0xf5, 0xcb, 0x5f, 0xdd,
	0x05, 0xb0, 0x99, 0x70, 0x65, 0xec, 0xf9, 0xdf, 0x44, 0xe2, 0x38, 0xfb, 0x1c, 0x70, 0xbd, 0x90,
	0xb9, 0x69, 0xff, 0xcb, 0x46, 0xda, 0x7f, 0xd8, 0x3c, 0xb8, 0xac, 0x65, 0x6f, 0xff, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x8b, 0x92, 0x40, 0x8d, 0x86, 0x0a, 0x00, 0x00,
}

func (m *GetVulnerabilityRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilityRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilityRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVulnerabilityRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVulnerabilityRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVulnerabilityRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestInfos) > 0 {
		for iNdEx := len(m.RequestInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVulnReqService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeferVulnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferVulnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferVulnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size := m.Expiry.Size()
			i -= size
			if _, err := m.Expiry.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cve) > 0 {
		i -= len(m.Cve)
		copy(dAtA[i:], m.Cve)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Cve)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeferVulnRequest_ExpiresWhenFixed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferVulnRequest_ExpiresWhenFixed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ExpiresWhenFixed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *DeferVulnRequest_ExpiresOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferVulnRequest_ExpiresOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpiresOn != nil {
		{
			size, err := m.ExpiresOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DeferVulnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeferVulnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeferVulnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveVulnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveVulnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveVulnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cve) > 0 {
		i -= len(m.Cve)
		copy(dAtA[i:], m.Cve)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Cve)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FalsePositiveVulnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FalsePositiveVulnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FalsePositiveVulnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveVulnRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveVulnRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveVulnRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenyVulnRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyVulnRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyVulnRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVulnReqService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndoVulnRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndoVulnRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndoVulnRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestInfo != nil {
		{
			size, err := m.RequestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVulnReqService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVulnReqService(dAtA []byte, offset int, v uint64) int {
	offset -= sovVulnReqService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetVulnerabilityRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVulnerabilityRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestInfos) > 0 {
		for _, e := range m.RequestInfos {
			l = e.Size()
			n += 1 + l + sovVulnReqService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferVulnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cve)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.Expiry != nil {
		n += m.Expiry.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeferVulnRequest_ExpiresWhenFixed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *DeferVulnRequest_ExpiresOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiresOn != nil {
		l = m.ExpiresOn.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	return n
}
func (m *DeferVulnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveVulnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cve)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FalsePositiveVulnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApproveVulnRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DenyVulnRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UndoVulnRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestInfo != nil {
		l = m.RequestInfo.Size()
		n += 1 + l + sovVulnReqService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVulnReqService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVulnReqService(x uint64) (n int) {
	return sovVulnReqService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetVulnerabilityRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilityRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilityRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVulnerabilityRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVulnerabilityRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVulnerabilityRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestInfos = append(m.RequestInfos, &storage.VulnerabilityRequest{})
			if err := m.RequestInfos[len(m.RequestInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferVulnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferVulnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferVulnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &storage.VulnerabilityRequest_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresWhenFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Expiry = &DeferVulnRequest_ExpiresWhenFixed{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiry = &DeferVulnRequest_ExpiresOn{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeferVulnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeferVulnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeferVulnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveVulnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveVulnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveVulnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &storage.VulnerabilityRequest_Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FalsePositiveVulnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FalsePositiveVulnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FalsePositiveVulnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveVulnRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveVulnRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveVulnRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyVulnRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyVulnRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyVulnRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &storage.RequestExpiry{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndoVulnRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndoVulnRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndoVulnRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVulnReqService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestInfo == nil {
				m.RequestInfo = &storage.VulnerabilityRequest{}
			}
			if err := m.RequestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVulnReqService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVulnReqService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVulnReqService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVulnReqService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVulnReqService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVulnReqService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVulnReqService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVulnReqService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVulnReqService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVulnReqService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVulnReqService = fmt.Errorf("proto: unexpected end of group")
)
