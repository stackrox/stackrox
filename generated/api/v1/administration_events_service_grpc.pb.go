// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/administration_events_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdministrationEventService_CountAdministrationEvents_FullMethodName = "/v1.AdministrationEventService/CountAdministrationEvents"
	AdministrationEventService_GetAdministrationEvent_FullMethodName    = "/v1.AdministrationEventService/GetAdministrationEvent"
	AdministrationEventService_ListAdministrationEvents_FullMethodName  = "/v1.AdministrationEventService/ListAdministrationEvents"
)

// AdministrationEventServiceClient is the client API for AdministrationEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministrationEventServiceClient interface {
	// CountAdministrationEvents returns the number of events after filtering by requested fields.
	CountAdministrationEvents(ctx context.Context, in *CountAdministrationEventsRequest, opts ...grpc.CallOption) (*CountAdministrationEventsResponse, error)
	// GetAdministrationEvent retrieves an event by ID.
	GetAdministrationEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAdministrationEventResponse, error)
	// ListAdministrationEvents returns the list of events after filtered by requested fields.
	ListAdministrationEvents(ctx context.Context, in *ListAdministrationEventsRequest, opts ...grpc.CallOption) (*ListAdministrationEventsResponse, error)
}

type administrationEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrationEventServiceClient(cc grpc.ClientConnInterface) AdministrationEventServiceClient {
	return &administrationEventServiceClient{cc}
}

func (c *administrationEventServiceClient) CountAdministrationEvents(ctx context.Context, in *CountAdministrationEventsRequest, opts ...grpc.CallOption) (*CountAdministrationEventsResponse, error) {
	out := new(CountAdministrationEventsResponse)
	err := c.cc.Invoke(ctx, AdministrationEventService_CountAdministrationEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationEventServiceClient) GetAdministrationEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAdministrationEventResponse, error) {
	out := new(GetAdministrationEventResponse)
	err := c.cc.Invoke(ctx, AdministrationEventService_GetAdministrationEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationEventServiceClient) ListAdministrationEvents(ctx context.Context, in *ListAdministrationEventsRequest, opts ...grpc.CallOption) (*ListAdministrationEventsResponse, error) {
	out := new(ListAdministrationEventsResponse)
	err := c.cc.Invoke(ctx, AdministrationEventService_ListAdministrationEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrationEventServiceServer is the server API for AdministrationEventService service.
// All implementations should embed UnimplementedAdministrationEventServiceServer
// for forward compatibility
type AdministrationEventServiceServer interface {
	// CountAdministrationEvents returns the number of events after filtering by requested fields.
	CountAdministrationEvents(context.Context, *CountAdministrationEventsRequest) (*CountAdministrationEventsResponse, error)
	// GetAdministrationEvent retrieves an event by ID.
	GetAdministrationEvent(context.Context, *ResourceByID) (*GetAdministrationEventResponse, error)
	// ListAdministrationEvents returns the list of events after filtered by requested fields.
	ListAdministrationEvents(context.Context, *ListAdministrationEventsRequest) (*ListAdministrationEventsResponse, error)
}

// UnimplementedAdministrationEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdministrationEventServiceServer struct {
}

func (UnimplementedAdministrationEventServiceServer) CountAdministrationEvents(context.Context, *CountAdministrationEventsRequest) (*CountAdministrationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAdministrationEvents not implemented")
}
func (UnimplementedAdministrationEventServiceServer) GetAdministrationEvent(context.Context, *ResourceByID) (*GetAdministrationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrationEvent not implemented")
}
func (UnimplementedAdministrationEventServiceServer) ListAdministrationEvents(context.Context, *ListAdministrationEventsRequest) (*ListAdministrationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdministrationEvents not implemented")
}

// UnsafeAdministrationEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministrationEventServiceServer will
// result in compilation errors.
type UnsafeAdministrationEventServiceServer interface {
	mustEmbedUnimplementedAdministrationEventServiceServer()
}

func RegisterAdministrationEventServiceServer(s grpc.ServiceRegistrar, srv AdministrationEventServiceServer) {
	s.RegisterService(&AdministrationEventService_ServiceDesc, srv)
}

func _AdministrationEventService_CountAdministrationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAdministrationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).CountAdministrationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministrationEventService_CountAdministrationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).CountAdministrationEvents(ctx, req.(*CountAdministrationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationEventService_GetAdministrationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).GetAdministrationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministrationEventService_GetAdministrationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).GetAdministrationEvent(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationEventService_ListAdministrationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdministrationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).ListAdministrationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministrationEventService_ListAdministrationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).ListAdministrationEvents(ctx, req.(*ListAdministrationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministrationEventService_ServiceDesc is the grpc.ServiceDesc for AdministrationEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministrationEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AdministrationEventService",
	HandlerType: (*AdministrationEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountAdministrationEvents",
			Handler:    _AdministrationEventService_CountAdministrationEvents_Handler,
		},
		{
			MethodName: "GetAdministrationEvent",
			Handler:    _AdministrationEventService_GetAdministrationEvent_Handler,
		},
		{
			MethodName: "ListAdministrationEvents",
			Handler:    _AdministrationEventService_ListAdministrationEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/administration_events_service.proto",
}
