// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/role_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleService_GetRoles_FullMethodName                              = "/v1.RoleService/GetRoles"
	RoleService_GetRole_FullMethodName                               = "/v1.RoleService/GetRole"
	RoleService_GetMyPermissions_FullMethodName                      = "/v1.RoleService/GetMyPermissions"
	RoleService_CreateRole_FullMethodName                            = "/v1.RoleService/CreateRole"
	RoleService_UpdateRole_FullMethodName                            = "/v1.RoleService/UpdateRole"
	RoleService_DeleteRole_FullMethodName                            = "/v1.RoleService/DeleteRole"
	RoleService_GetResources_FullMethodName                          = "/v1.RoleService/GetResources"
	RoleService_GetPermissionSet_FullMethodName                      = "/v1.RoleService/GetPermissionSet"
	RoleService_ListPermissionSets_FullMethodName                    = "/v1.RoleService/ListPermissionSets"
	RoleService_PostPermissionSet_FullMethodName                     = "/v1.RoleService/PostPermissionSet"
	RoleService_PutPermissionSet_FullMethodName                      = "/v1.RoleService/PutPermissionSet"
	RoleService_DeletePermissionSet_FullMethodName                   = "/v1.RoleService/DeletePermissionSet"
	RoleService_GetSimpleAccessScope_FullMethodName                  = "/v1.RoleService/GetSimpleAccessScope"
	RoleService_ListSimpleAccessScopes_FullMethodName                = "/v1.RoleService/ListSimpleAccessScopes"
	RoleService_PostSimpleAccessScope_FullMethodName                 = "/v1.RoleService/PostSimpleAccessScope"
	RoleService_PutSimpleAccessScope_FullMethodName                  = "/v1.RoleService/PutSimpleAccessScope"
	RoleService_DeleteSimpleAccessScope_FullMethodName               = "/v1.RoleService/DeleteSimpleAccessScope"
	RoleService_ComputeEffectiveAccessScope_FullMethodName           = "/v1.RoleService/ComputeEffectiveAccessScope"
	RoleService_GetClustersForPermissions_FullMethodName             = "/v1.RoleService/GetClustersForPermissions"
	RoleService_GetNamespacesForClusterAndPermissions_FullMethodName = "/v1.RoleService/GetNamespacesForClusterAndPermissions"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	GetRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Role, error)
	GetMyPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateRole(ctx context.Context, in *storage.Role, opts ...grpc.CallOption) (*Empty, error)
	DeleteRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	GetResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	GetPermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.PermissionSet, error)
	ListPermissionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionSetsResponse, error)
	// PostPermissionSet
	//
	// PermissionSet.id is disallowed in request and set in response.
	PostPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*storage.PermissionSet, error)
	PutPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*Empty, error)
	DeletePermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	GetSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error)
	ListSimpleAccessScopes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSimpleAccessScopesResponse, error)
	// PostSimpleAccessScope
	//
	// SimpleAccessScope.id is disallowed in request and set in response.
	PostSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error)
	PutSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*Empty, error)
	DeleteSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// ComputeEffectiveAccessScope
	//
	// Returns effective access scope based on the rules in the request. Does
	// not persist anything; not idempotent due to possible changes to clusters
	// and namespaces. POST is chosen due to potentially large payload.
	//
	// There are advantages in both keeping the response slim and detailed. If
	// only IDs of selected clusters and namespaces are included, response
	// latency and processing time are lower but the caller shall overlay the
	// response with its view of the world which is susceptible to consistency
	// issues. Listing all clusters and namespaces with related metadata is
	// convenient for the caller but bloat the message with secondary data.
	//
	// We let the caller decide what level of detail they would like to have:
	//
	//   - Minimal, when only roots of included subtrees are listed by their
	//     IDs. Clusters can be either INCLUDED (its namespaces are included but
	//     are not listed) or PARTIAL (at least one namespace is explicitly
	//     included). Namespaces can only be INCLUDED.
	//
	//   - Standard [default], when all known clusters and namespaces are listed
	//     with their IDs and names. Clusters can be INCLUDED (all its
	//     namespaces are explicitly listed as INCLUDED), PARTIAL (all its
	//     namespaces are explicitly listed, some as INCLUDED and some as
	//     EXCLUDED), and EXCLUDED (all its namespaces are explicitly listed as
	//     EXCLUDED). Namespaces can be either INCLUDED or EXCLUDED.
	//
	//   - High, when every cluster and namespace is augmented with metadata.
	ComputeEffectiveAccessScope(ctx context.Context, in *ComputeEffectiveAccessScopeRequest, opts ...grpc.CallOption) (*storage.EffectiveAccessScope, error)
	// GetClustersForPermissions
	//
	// Returns the list of cluster ID and cluster name pairs that have at least read allowed
	// by the scope of the requesting user for the list of requested permissions.
	// Effective access scopes are only considered for input permissions that have
	// cluster scope or narrower (i.e. global permissions from the input are ignored).
	//
	// If the input only contains permissions at global level, the output will be an empty list.
	//
	// If no permission is given in input, all clusters allowed by the requester scope for
	// any permission with cluster scope or narrower will be part of the response.
	GetClustersForPermissions(ctx context.Context, in *GetClustersForPermissionsRequest, opts ...grpc.CallOption) (*GetClustersForPermissionsResponse, error)
	// GetNamespacesForClusterAndPermissions
	//
	// Returns the list of namespace ID and namespace name pairs that belong to the requested
	// cluster and for which the user has at least read access granted for the list of
	// requested permissions that have namespace scope or narrower (i.e. global and cluster
	// permissions from the input are ignored).
	//
	// If the input only contains permissions at global or cluster level, the output will be
	// an empty list.
	//
	// If no permission is given in input, all namespaces allowed by the requester scope for
	// any permission with namespace scope or narrower will be part of the response.
	GetNamespacesForClusterAndPermissions(ctx context.Context, in *GetNamespaceForClusterAndPermissionsRequest, opts ...grpc.CallOption) (*GetNamespacesForClusterAndPermissionsResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, RoleService_GetRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Role, error) {
	out := new(storage.Role)
	err := c.cc.Invoke(ctx, RoleService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetMyPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, RoleService_GetMyPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *storage.Role, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, RoleService_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetPermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.PermissionSet, error) {
	out := new(storage.PermissionSet)
	err := c.cc.Invoke(ctx, RoleService_GetPermissionSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListPermissionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionSetsResponse, error) {
	out := new(ListPermissionSetsResponse)
	err := c.cc.Invoke(ctx, RoleService_ListPermissionSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PostPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*storage.PermissionSet, error) {
	out := new(storage.PermissionSet)
	err := c.cc.Invoke(ctx, RoleService_PostPermissionSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PutPermissionSet(ctx context.Context, in *storage.PermissionSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_PutPermissionSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeletePermissionSet(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_DeletePermissionSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error) {
	out := new(storage.SimpleAccessScope)
	err := c.cc.Invoke(ctx, RoleService_GetSimpleAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListSimpleAccessScopes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSimpleAccessScopesResponse, error) {
	out := new(ListSimpleAccessScopesResponse)
	err := c.cc.Invoke(ctx, RoleService_ListSimpleAccessScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PostSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*storage.SimpleAccessScope, error) {
	out := new(storage.SimpleAccessScope)
	err := c.cc.Invoke(ctx, RoleService_PostSimpleAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PutSimpleAccessScope(ctx context.Context, in *storage.SimpleAccessScope, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_PutSimpleAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteSimpleAccessScope(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleService_DeleteSimpleAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ComputeEffectiveAccessScope(ctx context.Context, in *ComputeEffectiveAccessScopeRequest, opts ...grpc.CallOption) (*storage.EffectiveAccessScope, error) {
	out := new(storage.EffectiveAccessScope)
	err := c.cc.Invoke(ctx, RoleService_ComputeEffectiveAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetClustersForPermissions(ctx context.Context, in *GetClustersForPermissionsRequest, opts ...grpc.CallOption) (*GetClustersForPermissionsResponse, error) {
	out := new(GetClustersForPermissionsResponse)
	err := c.cc.Invoke(ctx, RoleService_GetClustersForPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetNamespacesForClusterAndPermissions(ctx context.Context, in *GetNamespaceForClusterAndPermissionsRequest, opts ...grpc.CallOption) (*GetNamespacesForClusterAndPermissionsResponse, error) {
	out := new(GetNamespacesForClusterAndPermissionsResponse)
	err := c.cc.Invoke(ctx, RoleService_GetNamespacesForClusterAndPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations should embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	GetRoles(context.Context, *Empty) (*GetRolesResponse, error)
	GetRole(context.Context, *ResourceByID) (*storage.Role, error)
	GetMyPermissions(context.Context, *Empty) (*GetPermissionsResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*Empty, error)
	UpdateRole(context.Context, *storage.Role) (*Empty, error)
	DeleteRole(context.Context, *ResourceByID) (*Empty, error)
	GetResources(context.Context, *Empty) (*GetResourcesResponse, error)
	GetPermissionSet(context.Context, *ResourceByID) (*storage.PermissionSet, error)
	ListPermissionSets(context.Context, *Empty) (*ListPermissionSetsResponse, error)
	// PostPermissionSet
	//
	// PermissionSet.id is disallowed in request and set in response.
	PostPermissionSet(context.Context, *storage.PermissionSet) (*storage.PermissionSet, error)
	PutPermissionSet(context.Context, *storage.PermissionSet) (*Empty, error)
	DeletePermissionSet(context.Context, *ResourceByID) (*Empty, error)
	GetSimpleAccessScope(context.Context, *ResourceByID) (*storage.SimpleAccessScope, error)
	ListSimpleAccessScopes(context.Context, *Empty) (*ListSimpleAccessScopesResponse, error)
	// PostSimpleAccessScope
	//
	// SimpleAccessScope.id is disallowed in request and set in response.
	PostSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*storage.SimpleAccessScope, error)
	PutSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*Empty, error)
	DeleteSimpleAccessScope(context.Context, *ResourceByID) (*Empty, error)
	// ComputeEffectiveAccessScope
	//
	// Returns effective access scope based on the rules in the request. Does
	// not persist anything; not idempotent due to possible changes to clusters
	// and namespaces. POST is chosen due to potentially large payload.
	//
	// There are advantages in both keeping the response slim and detailed. If
	// only IDs of selected clusters and namespaces are included, response
	// latency and processing time are lower but the caller shall overlay the
	// response with its view of the world which is susceptible to consistency
	// issues. Listing all clusters and namespaces with related metadata is
	// convenient for the caller but bloat the message with secondary data.
	//
	// We let the caller decide what level of detail they would like to have:
	//
	//   - Minimal, when only roots of included subtrees are listed by their
	//     IDs. Clusters can be either INCLUDED (its namespaces are included but
	//     are not listed) or PARTIAL (at least one namespace is explicitly
	//     included). Namespaces can only be INCLUDED.
	//
	//   - Standard [default], when all known clusters and namespaces are listed
	//     with their IDs and names. Clusters can be INCLUDED (all its
	//     namespaces are explicitly listed as INCLUDED), PARTIAL (all its
	//     namespaces are explicitly listed, some as INCLUDED and some as
	//     EXCLUDED), and EXCLUDED (all its namespaces are explicitly listed as
	//     EXCLUDED). Namespaces can be either INCLUDED or EXCLUDED.
	//
	//   - High, when every cluster and namespace is augmented with metadata.
	ComputeEffectiveAccessScope(context.Context, *ComputeEffectiveAccessScopeRequest) (*storage.EffectiveAccessScope, error)
	// GetClustersForPermissions
	//
	// Returns the list of cluster ID and cluster name pairs that have at least read allowed
	// by the scope of the requesting user for the list of requested permissions.
	// Effective access scopes are only considered for input permissions that have
	// cluster scope or narrower (i.e. global permissions from the input are ignored).
	//
	// If the input only contains permissions at global level, the output will be an empty list.
	//
	// If no permission is given in input, all clusters allowed by the requester scope for
	// any permission with cluster scope or narrower will be part of the response.
	GetClustersForPermissions(context.Context, *GetClustersForPermissionsRequest) (*GetClustersForPermissionsResponse, error)
	// GetNamespacesForClusterAndPermissions
	//
	// Returns the list of namespace ID and namespace name pairs that belong to the requested
	// cluster and for which the user has at least read access granted for the list of
	// requested permissions that have namespace scope or narrower (i.e. global and cluster
	// permissions from the input are ignored).
	//
	// If the input only contains permissions at global or cluster level, the output will be
	// an empty list.
	//
	// If no permission is given in input, all namespaces allowed by the requester scope for
	// any permission with namespace scope or narrower will be part of the response.
	GetNamespacesForClusterAndPermissions(context.Context, *GetNamespaceForClusterAndPermissionsRequest) (*GetNamespacesForClusterAndPermissionsResponse, error)
}

// UnimplementedRoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) GetRoles(context.Context, *Empty) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedRoleServiceServer) GetRole(context.Context, *ResourceByID) (*storage.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServiceServer) GetMyPermissions(context.Context, *Empty) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPermissions not implemented")
}
func (UnimplementedRoleServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *storage.Role) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) GetResources(context.Context, *Empty) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedRoleServiceServer) GetPermissionSet(context.Context, *ResourceByID) (*storage.PermissionSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionSet not implemented")
}
func (UnimplementedRoleServiceServer) ListPermissionSets(context.Context, *Empty) (*ListPermissionSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionSets not implemented")
}
func (UnimplementedRoleServiceServer) PostPermissionSet(context.Context, *storage.PermissionSet) (*storage.PermissionSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPermissionSet not implemented")
}
func (UnimplementedRoleServiceServer) PutPermissionSet(context.Context, *storage.PermissionSet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPermissionSet not implemented")
}
func (UnimplementedRoleServiceServer) DeletePermissionSet(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionSet not implemented")
}
func (UnimplementedRoleServiceServer) GetSimpleAccessScope(context.Context, *ResourceByID) (*storage.SimpleAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleAccessScope not implemented")
}
func (UnimplementedRoleServiceServer) ListSimpleAccessScopes(context.Context, *Empty) (*ListSimpleAccessScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimpleAccessScopes not implemented")
}
func (UnimplementedRoleServiceServer) PostSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*storage.SimpleAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSimpleAccessScope not implemented")
}
func (UnimplementedRoleServiceServer) PutSimpleAccessScope(context.Context, *storage.SimpleAccessScope) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSimpleAccessScope not implemented")
}
func (UnimplementedRoleServiceServer) DeleteSimpleAccessScope(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSimpleAccessScope not implemented")
}
func (UnimplementedRoleServiceServer) ComputeEffectiveAccessScope(context.Context, *ComputeEffectiveAccessScopeRequest) (*storage.EffectiveAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeEffectiveAccessScope not implemented")
}
func (UnimplementedRoleServiceServer) GetClustersForPermissions(context.Context, *GetClustersForPermissionsRequest) (*GetClustersForPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersForPermissions not implemented")
}
func (UnimplementedRoleServiceServer) GetNamespacesForClusterAndPermissions(context.Context, *GetNamespaceForClusterAndPermissionsRequest) (*GetNamespacesForClusterAndPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacesForClusterAndPermissions not implemented")
}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetMyPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetMyPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetMyPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetMyPermissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*storage.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetResources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetPermissionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetPermissionSet(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListPermissionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListPermissionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ListPermissionSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListPermissionSets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PostPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.PermissionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PostPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_PostPermissionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PostPermissionSet(ctx, req.(*storage.PermissionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PutPermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.PermissionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PutPermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_PutPermissionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PutPermissionSet(ctx, req.(*storage.PermissionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeletePermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeletePermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeletePermissionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeletePermissionSet(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetSimpleAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetSimpleAccessScope(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListSimpleAccessScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListSimpleAccessScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ListSimpleAccessScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListSimpleAccessScopes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PostSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SimpleAccessScope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PostSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_PostSimpleAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PostSimpleAccessScope(ctx, req.(*storage.SimpleAccessScope))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PutSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SimpleAccessScope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PutSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_PutSimpleAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PutSimpleAccessScope(ctx, req.(*storage.SimpleAccessScope))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteSimpleAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteSimpleAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeleteSimpleAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteSimpleAccessScope(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ComputeEffectiveAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeEffectiveAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ComputeEffectiveAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ComputeEffectiveAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ComputeEffectiveAccessScope(ctx, req.(*ComputeEffectiveAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetClustersForPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersForPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetClustersForPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetClustersForPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetClustersForPermissions(ctx, req.(*GetClustersForPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetNamespacesForClusterAndPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceForClusterAndPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetNamespacesForClusterAndPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetNamespacesForClusterAndPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetNamespacesForClusterAndPermissions(ctx, req.(*GetNamespaceForClusterAndPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _RoleService_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "GetMyPermissions",
			Handler:    _RoleService_GetMyPermissions_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _RoleService_GetResources_Handler,
		},
		{
			MethodName: "GetPermissionSet",
			Handler:    _RoleService_GetPermissionSet_Handler,
		},
		{
			MethodName: "ListPermissionSets",
			Handler:    _RoleService_ListPermissionSets_Handler,
		},
		{
			MethodName: "PostPermissionSet",
			Handler:    _RoleService_PostPermissionSet_Handler,
		},
		{
			MethodName: "PutPermissionSet",
			Handler:    _RoleService_PutPermissionSet_Handler,
		},
		{
			MethodName: "DeletePermissionSet",
			Handler:    _RoleService_DeletePermissionSet_Handler,
		},
		{
			MethodName: "GetSimpleAccessScope",
			Handler:    _RoleService_GetSimpleAccessScope_Handler,
		},
		{
			MethodName: "ListSimpleAccessScopes",
			Handler:    _RoleService_ListSimpleAccessScopes_Handler,
		},
		{
			MethodName: "PostSimpleAccessScope",
			Handler:    _RoleService_PostSimpleAccessScope_Handler,
		},
		{
			MethodName: "PutSimpleAccessScope",
			Handler:    _RoleService_PutSimpleAccessScope_Handler,
		},
		{
			MethodName: "DeleteSimpleAccessScope",
			Handler:    _RoleService_DeleteSimpleAccessScope_Handler,
		},
		{
			MethodName: "ComputeEffectiveAccessScope",
			Handler:    _RoleService_ComputeEffectiveAccessScope_Handler,
		},
		{
			MethodName: "GetClustersForPermissions",
			Handler:    _RoleService_GetClustersForPermissions_Handler,
		},
		{
			MethodName: "GetNamespacesForClusterAndPermissions",
			Handler:    _RoleService_GetNamespacesForClusterAndPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/role_service.proto",
}
