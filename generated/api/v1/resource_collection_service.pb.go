// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/resource_collection_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListCollectionSelectorsResponse struct {
	Selectors            []string `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCollectionSelectorsResponse) Reset()         { *m = ListCollectionSelectorsResponse{} }
func (m *ListCollectionSelectorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCollectionSelectorsResponse) ProtoMessage()    {}
func (*ListCollectionSelectorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{0}
}
func (m *ListCollectionSelectorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCollectionSelectorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCollectionSelectorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCollectionSelectorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCollectionSelectorsResponse.Merge(m, src)
}
func (m *ListCollectionSelectorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCollectionSelectorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCollectionSelectorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCollectionSelectorsResponse proto.InternalMessageInfo

func (m *ListCollectionSelectorsResponse) GetSelectors() []string {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *ListCollectionSelectorsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCollectionSelectorsResponse) Clone() *ListCollectionSelectorsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListCollectionSelectorsResponse)
	*cloned = *m

	if m.Selectors != nil {
		cloned.Selectors = make([]string, len(m.Selectors))
		copy(cloned.Selectors, m.Selectors)
	}
	return cloned
}

type GetCollectionRequest struct {
	Id                   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options              *CollectionDeploymentMatchOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GetCollectionRequest) Reset()         { *m = GetCollectionRequest{} }
func (m *GetCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*GetCollectionRequest) ProtoMessage()    {}
func (*GetCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{1}
}
func (m *GetCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollectionRequest.Merge(m, src)
}
func (m *GetCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollectionRequest proto.InternalMessageInfo

func (m *GetCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetCollectionRequest) GetOptions() *CollectionDeploymentMatchOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *GetCollectionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCollectionRequest) Clone() *GetCollectionRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetCollectionRequest)
	*cloned = *m

	cloned.Options = m.Options.Clone()
	return cloned
}

type CollectionDeploymentMatchOptions struct {
	WithMatches          bool      `protobuf:"varint,1,opt,name=with_matches,json=withMatches,proto3" json:"with_matches,omitempty"`
	FilterQuery          *RawQuery `protobuf:"bytes,2,opt,name=filter_query,json=filterQuery,proto3" json:"filter_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CollectionDeploymentMatchOptions) Reset()         { *m = CollectionDeploymentMatchOptions{} }
func (m *CollectionDeploymentMatchOptions) String() string { return proto.CompactTextString(m) }
func (*CollectionDeploymentMatchOptions) ProtoMessage()    {}
func (*CollectionDeploymentMatchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{2}
}
func (m *CollectionDeploymentMatchOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionDeploymentMatchOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionDeploymentMatchOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionDeploymentMatchOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionDeploymentMatchOptions.Merge(m, src)
}
func (m *CollectionDeploymentMatchOptions) XXX_Size() int {
	return m.Size()
}
func (m *CollectionDeploymentMatchOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionDeploymentMatchOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionDeploymentMatchOptions proto.InternalMessageInfo

func (m *CollectionDeploymentMatchOptions) GetWithMatches() bool {
	if m != nil {
		return m.WithMatches
	}
	return false
}

func (m *CollectionDeploymentMatchOptions) GetFilterQuery() *RawQuery {
	if m != nil {
		return m.FilterQuery
	}
	return nil
}

func (m *CollectionDeploymentMatchOptions) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CollectionDeploymentMatchOptions) Clone() *CollectionDeploymentMatchOptions {
	if m == nil {
		return nil
	}
	cloned := new(CollectionDeploymentMatchOptions)
	*cloned = *m

	cloned.FilterQuery = m.FilterQuery.Clone()
	return cloned
}

type GetCollectionResponse struct {
	Collection           *storage.ResourceCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Deployments          []*storage.ListDeployment   `protobuf:"bytes,2,rep,name=deployments,proto3" json:"deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetCollectionResponse) Reset()         { *m = GetCollectionResponse{} }
func (m *GetCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*GetCollectionResponse) ProtoMessage()    {}
func (*GetCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{3}
}
func (m *GetCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollectionResponse.Merge(m, src)
}
func (m *GetCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollectionResponse proto.InternalMessageInfo

func (m *GetCollectionResponse) GetCollection() *storage.ResourceCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *GetCollectionResponse) GetDeployments() []*storage.ListDeployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *GetCollectionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCollectionResponse) Clone() *GetCollectionResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetCollectionResponse)
	*cloned = *m

	cloned.Collection = m.Collection.Clone()
	if m.Deployments != nil {
		cloned.Deployments = make([]*storage.ListDeployment, len(m.Deployments))
		for idx, v := range m.Deployments {
			cloned.Deployments[idx] = v.Clone()
		}
	}
	return cloned
}

type GetCollectionCountRequest struct {
	Query                *RawQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetCollectionCountRequest) Reset()         { *m = GetCollectionCountRequest{} }
func (m *GetCollectionCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCollectionCountRequest) ProtoMessage()    {}
func (*GetCollectionCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{4}
}
func (m *GetCollectionCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollectionCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollectionCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollectionCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollectionCountRequest.Merge(m, src)
}
func (m *GetCollectionCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCollectionCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollectionCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollectionCountRequest proto.InternalMessageInfo

func (m *GetCollectionCountRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetCollectionCountRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCollectionCountRequest) Clone() *GetCollectionCountRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetCollectionCountRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

type GetCollectionCountResponse struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCollectionCountResponse) Reset()         { *m = GetCollectionCountResponse{} }
func (m *GetCollectionCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCollectionCountResponse) ProtoMessage()    {}
func (*GetCollectionCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{5}
}
func (m *GetCollectionCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollectionCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollectionCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollectionCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollectionCountResponse.Merge(m, src)
}
func (m *GetCollectionCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCollectionCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollectionCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollectionCountResponse proto.InternalMessageInfo

func (m *GetCollectionCountResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetCollectionCountResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCollectionCountResponse) Clone() *GetCollectionCountResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetCollectionCountResponse)
	*cloned = *m

	return cloned
}

type CreateCollectionRequest struct {
	Name                  string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ResourceSelectors     []*storage.ResourceSelector `protobuf:"bytes,3,rep,name=resource_selectors,json=resourceSelectors,proto3" json:"resource_selectors,omitempty"`
	EmbeddedCollectionIds []string                    `protobuf:"bytes,4,rep,name=embedded_collection_ids,json=embeddedCollectionIds,proto3" json:"embedded_collection_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *CreateCollectionRequest) Reset()         { *m = CreateCollectionRequest{} }
func (m *CreateCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCollectionRequest) ProtoMessage()    {}
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{6}
}
func (m *CreateCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCollectionRequest.Merge(m, src)
}
func (m *CreateCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCollectionRequest proto.InternalMessageInfo

func (m *CreateCollectionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCollectionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateCollectionRequest) GetResourceSelectors() []*storage.ResourceSelector {
	if m != nil {
		return m.ResourceSelectors
	}
	return nil
}

func (m *CreateCollectionRequest) GetEmbeddedCollectionIds() []string {
	if m != nil {
		return m.EmbeddedCollectionIds
	}
	return nil
}

func (m *CreateCollectionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateCollectionRequest) Clone() *CreateCollectionRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateCollectionRequest)
	*cloned = *m

	if m.ResourceSelectors != nil {
		cloned.ResourceSelectors = make([]*storage.ResourceSelector, len(m.ResourceSelectors))
		for idx, v := range m.ResourceSelectors {
			cloned.ResourceSelectors[idx] = v.Clone()
		}
	}
	if m.EmbeddedCollectionIds != nil {
		cloned.EmbeddedCollectionIds = make([]string, len(m.EmbeddedCollectionIds))
		copy(cloned.EmbeddedCollectionIds, m.EmbeddedCollectionIds)
	}
	return cloned
}

type CreateCollectionResponse struct {
	Collection           *storage.ResourceCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateCollectionResponse) Reset()         { *m = CreateCollectionResponse{} }
func (m *CreateCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCollectionResponse) ProtoMessage()    {}
func (*CreateCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{7}
}
func (m *CreateCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCollectionResponse.Merge(m, src)
}
func (m *CreateCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCollectionResponse proto.InternalMessageInfo

func (m *CreateCollectionResponse) GetCollection() *storage.ResourceCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *CreateCollectionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateCollectionResponse) Clone() *CreateCollectionResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateCollectionResponse)
	*cloned = *m

	cloned.Collection = m.Collection.Clone()
	return cloned
}

type UpdateCollectionRequest struct {
	Id                    string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ResourceSelectors     []*storage.ResourceSelector `protobuf:"bytes,4,rep,name=resource_selectors,json=resourceSelectors,proto3" json:"resource_selectors,omitempty"`
	EmbeddedCollectionIds []string                    `protobuf:"bytes,5,rep,name=embedded_collection_ids,json=embeddedCollectionIds,proto3" json:"embedded_collection_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *UpdateCollectionRequest) Reset()         { *m = UpdateCollectionRequest{} }
func (m *UpdateCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCollectionRequest) ProtoMessage()    {}
func (*UpdateCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{8}
}
func (m *UpdateCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCollectionRequest.Merge(m, src)
}
func (m *UpdateCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCollectionRequest proto.InternalMessageInfo

func (m *UpdateCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateCollectionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCollectionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateCollectionRequest) GetResourceSelectors() []*storage.ResourceSelector {
	if m != nil {
		return m.ResourceSelectors
	}
	return nil
}

func (m *UpdateCollectionRequest) GetEmbeddedCollectionIds() []string {
	if m != nil {
		return m.EmbeddedCollectionIds
	}
	return nil
}

func (m *UpdateCollectionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateCollectionRequest) Clone() *UpdateCollectionRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateCollectionRequest)
	*cloned = *m

	if m.ResourceSelectors != nil {
		cloned.ResourceSelectors = make([]*storage.ResourceSelector, len(m.ResourceSelectors))
		for idx, v := range m.ResourceSelectors {
			cloned.ResourceSelectors[idx] = v.Clone()
		}
	}
	if m.EmbeddedCollectionIds != nil {
		cloned.EmbeddedCollectionIds = make([]string, len(m.EmbeddedCollectionIds))
		copy(cloned.EmbeddedCollectionIds, m.EmbeddedCollectionIds)
	}
	return cloned
}

type UpdateCollectionResponse struct {
	Collection           *storage.ResourceCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpdateCollectionResponse) Reset()         { *m = UpdateCollectionResponse{} }
func (m *UpdateCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCollectionResponse) ProtoMessage()    {}
func (*UpdateCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{9}
}
func (m *UpdateCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCollectionResponse.Merge(m, src)
}
func (m *UpdateCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCollectionResponse proto.InternalMessageInfo

func (m *UpdateCollectionResponse) GetCollection() *storage.ResourceCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *UpdateCollectionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateCollectionResponse) Clone() *UpdateCollectionResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateCollectionResponse)
	*cloned = *m

	cloned.Collection = m.Collection.Clone()
	return cloned
}

type DryRunCollectionRequest struct {
	Name                  string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                    string                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description           string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ResourceSelectors     []*storage.ResourceSelector       `protobuf:"bytes,4,rep,name=resource_selectors,json=resourceSelectors,proto3" json:"resource_selectors,omitempty"`
	EmbeddedCollectionIds []string                          `protobuf:"bytes,5,rep,name=embedded_collection_ids,json=embeddedCollectionIds,proto3" json:"embedded_collection_ids,omitempty"`
	Options               *CollectionDeploymentMatchOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                          `json:"-"`
	XXX_unrecognized      []byte                            `json:"-"`
	XXX_sizecache         int32                             `json:"-"`
}

func (m *DryRunCollectionRequest) Reset()         { *m = DryRunCollectionRequest{} }
func (m *DryRunCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*DryRunCollectionRequest) ProtoMessage()    {}
func (*DryRunCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{10}
}
func (m *DryRunCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DryRunCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DryRunCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DryRunCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DryRunCollectionRequest.Merge(m, src)
}
func (m *DryRunCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DryRunCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DryRunCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DryRunCollectionRequest proto.InternalMessageInfo

func (m *DryRunCollectionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DryRunCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DryRunCollectionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DryRunCollectionRequest) GetResourceSelectors() []*storage.ResourceSelector {
	if m != nil {
		return m.ResourceSelectors
	}
	return nil
}

func (m *DryRunCollectionRequest) GetEmbeddedCollectionIds() []string {
	if m != nil {
		return m.EmbeddedCollectionIds
	}
	return nil
}

func (m *DryRunCollectionRequest) GetOptions() *CollectionDeploymentMatchOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *DryRunCollectionRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DryRunCollectionRequest) Clone() *DryRunCollectionRequest {
	if m == nil {
		return nil
	}
	cloned := new(DryRunCollectionRequest)
	*cloned = *m

	if m.ResourceSelectors != nil {
		cloned.ResourceSelectors = make([]*storage.ResourceSelector, len(m.ResourceSelectors))
		for idx, v := range m.ResourceSelectors {
			cloned.ResourceSelectors[idx] = v.Clone()
		}
	}
	if m.EmbeddedCollectionIds != nil {
		cloned.EmbeddedCollectionIds = make([]string, len(m.EmbeddedCollectionIds))
		copy(cloned.EmbeddedCollectionIds, m.EmbeddedCollectionIds)
	}
	cloned.Options = m.Options.Clone()
	return cloned
}

type DryRunCollectionResponse struct {
	Deployments          []*storage.ListDeployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DryRunCollectionResponse) Reset()         { *m = DryRunCollectionResponse{} }
func (m *DryRunCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*DryRunCollectionResponse) ProtoMessage()    {}
func (*DryRunCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{11}
}
func (m *DryRunCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DryRunCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DryRunCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DryRunCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DryRunCollectionResponse.Merge(m, src)
}
func (m *DryRunCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DryRunCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DryRunCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DryRunCollectionResponse proto.InternalMessageInfo

func (m *DryRunCollectionResponse) GetDeployments() []*storage.ListDeployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *DryRunCollectionResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DryRunCollectionResponse) Clone() *DryRunCollectionResponse {
	if m == nil {
		return nil
	}
	cloned := new(DryRunCollectionResponse)
	*cloned = *m

	if m.Deployments != nil {
		cloned.Deployments = make([]*storage.ListDeployment, len(m.Deployments))
		for idx, v := range m.Deployments {
			cloned.Deployments[idx] = v.Clone()
		}
	}
	return cloned
}

type ListCollectionsRequest struct {
	Query                *RawQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCollectionsRequest) Reset()         { *m = ListCollectionsRequest{} }
func (m *ListCollectionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCollectionsRequest) ProtoMessage()    {}
func (*ListCollectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{12}
}
func (m *ListCollectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCollectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCollectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCollectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCollectionsRequest.Merge(m, src)
}
func (m *ListCollectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCollectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCollectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCollectionsRequest proto.InternalMessageInfo

func (m *ListCollectionsRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListCollectionsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCollectionsRequest) Clone() *ListCollectionsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListCollectionsRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

type ListCollectionsResponse struct {
	Collections          []*storage.ResourceCollection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListCollectionsResponse) Reset()         { *m = ListCollectionsResponse{} }
func (m *ListCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCollectionsResponse) ProtoMessage()    {}
func (*ListCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a4b2c7d805c182, []int{13}
}
func (m *ListCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCollectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCollectionsResponse.Merge(m, src)
}
func (m *ListCollectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCollectionsResponse proto.InternalMessageInfo

func (m *ListCollectionsResponse) GetCollections() []*storage.ResourceCollection {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *ListCollectionsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCollectionsResponse) Clone() *ListCollectionsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListCollectionsResponse)
	*cloned = *m

	if m.Collections != nil {
		cloned.Collections = make([]*storage.ResourceCollection, len(m.Collections))
		for idx, v := range m.Collections {
			cloned.Collections[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ListCollectionSelectorsResponse)(nil), "v1.ListCollectionSelectorsResponse")
	proto.RegisterType((*GetCollectionRequest)(nil), "v1.GetCollectionRequest")
	proto.RegisterType((*CollectionDeploymentMatchOptions)(nil), "v1.CollectionDeploymentMatchOptions")
	proto.RegisterType((*GetCollectionResponse)(nil), "v1.GetCollectionResponse")
	proto.RegisterType((*GetCollectionCountRequest)(nil), "v1.GetCollectionCountRequest")
	proto.RegisterType((*GetCollectionCountResponse)(nil), "v1.GetCollectionCountResponse")
	proto.RegisterType((*CreateCollectionRequest)(nil), "v1.CreateCollectionRequest")
	proto.RegisterType((*CreateCollectionResponse)(nil), "v1.CreateCollectionResponse")
	proto.RegisterType((*UpdateCollectionRequest)(nil), "v1.UpdateCollectionRequest")
	proto.RegisterType((*UpdateCollectionResponse)(nil), "v1.UpdateCollectionResponse")
	proto.RegisterType((*DryRunCollectionRequest)(nil), "v1.DryRunCollectionRequest")
	proto.RegisterType((*DryRunCollectionResponse)(nil), "v1.DryRunCollectionResponse")
	proto.RegisterType((*ListCollectionsRequest)(nil), "v1.ListCollectionsRequest")
	proto.RegisterType((*ListCollectionsResponse)(nil), "v1.ListCollectionsResponse")
}

func init() {
	proto.RegisterFile("api/v1/resource_collection_service.proto", fileDescriptor_21a4b2c7d805c182)
}

var fileDescriptor_21a4b2c7d805c182 = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0x7d, 0x76, 0x9a, 0x42, 0x6e, 0x0a, 0x2f, 0x1d, 0xf2, 0x1a, 0xc7, 0x09, 0x79, 0xa9, 0x61,
	0x11, 0x75, 0xe1, 0x28, 0x41, 0x42, 0xe2, 0xf1, 0x51, 0xa9, 0x0d, 0x82, 0x4a, 0x54, 0x08, 0xa3,
	0x8a, 0x8a, 0x4d, 0xe4, 0xda, 0xd3, 0xd6, 0x22, 0xf1, 0xb8, 0x33, 0x4e, 0x4a, 0x84, 0xd8, 0xf0,
	0x07, 0x58, 0xb0, 0x61, 0xcb, 0xbf, 0x61, 0x09, 0x62, 0xc5, 0x0e, 0x0a, 0x3f, 0x04, 0xcd, 0x78,
	0x1c, 0x3b, 0xb6, 0x43, 0x5a, 0xd4, 0x0d, 0x3b, 0xe7, 0xce, 0x9d, 0x39, 0xf7, 0x9e, 0x7b, 0xe6,
	0x4c, 0xa0, 0x67, 0x07, 0x5e, 0x7f, 0x3e, 0xe8, 0x53, 0xcc, 0xc8, 0x8c, 0x3a, 0x78, 0xec, 0x90,
	0xc9, 0x04, 0x3b, 0xa1, 0x47, 0xfc, 0x31, 0xc3, 0x74, 0xee, 0x39, 0xd8, 0x0c, 0x28, 0x09, 0x09,
	0x52, 0xe7, 0x03, 0xbd, 0x7d, 0x45, 0xc8, 0xd5, 0x04, 0xf7, 0xf9, 0x26, 0xdb, 0xf7, 0x49, 0x68,
	0xf3, 0x44, 0x16, 0x65, 0xe8, 0xaf, 0xc9, 0xb3, 0x1c, 0x32, 0x9d, 0x12, 0x5f, 0x06, 0x91, 0x0c,
	0xe2, 0x69, 0x10, 0x2e, 0x64, 0x6c, 0x9f, 0x85, 0x84, 0xda, 0x57, 0xb8, 0x08, 0x55, 0xa6, 0x68,
	0x71, 0x8a, 0x8b, 0x83, 0x09, 0x59, 0x4c, 0xb1, 0x1f, 0xca, 0x95, 0x96, 0x3c, 0x90, 0x61, 0x9b,
	0x3a, 0xd7, 0xab, 0x45, 0x1a, 0x87, 0xf0, 0xfc, 0x13, 0x8f, 0x85, 0xc7, 0xcb, 0xe3, 0x3e, 0xc7,
	0xfc, 0x83, 0x50, 0x66, 0x61, 0x16, 0x10, 0x9f, 0x61, 0xd4, 0x86, 0x0a, 0x8b, 0x83, 0x9a, 0xd2,
	0x2d, 0xf5, 0x2a, 0x56, 0x12, 0x30, 0x2e, 0xa1, 0xfe, 0x11, 0x4e, 0xed, 0xb7, 0xf0, 0xcd, 0x0c,
	0xb3, 0x10, 0xbd, 0x0a, 0xaa, 0xe7, 0x6a, 0x4a, 0x57, 0xe9, 0x55, 0x2c, 0xd5, 0x73, 0xd1, 0x07,
	0xf0, 0x12, 0x09, 0x44, 0xf3, 0x9a, 0xda, 0x55, 0x7a, 0xd5, 0xe1, 0x9b, 0xe6, 0x7c, 0x60, 0x26,
	0xfb, 0x46, 0xcb, 0xb2, 0x4f, 0xed, 0xd0, 0xb9, 0xfe, 0x34, 0xca, 0xb5, 0xe2, 0x4d, 0xc6, 0x1c,
	0xba, 0x9b, 0x92, 0xd1, 0x3e, 0xec, 0xdc, 0x7a, 0xe1, 0xf5, 0x78, 0xca, 0x83, 0x98, 0x09, 0xf4,
	0x97, 0xad, 0x2a, 0x8f, 0x9d, 0x46, 0x21, 0xd4, 0x87, 0x9d, 0x4b, 0x6f, 0x12, 0x62, 0x3a, 0xbe,
	0x99, 0x61, 0xba, 0x90, 0xb5, 0xec, 0xf0, 0x5a, 0x2c, 0xfb, 0xf6, 0x33, 0x1e, 0xb3, 0xaa, 0x51,
	0x86, 0xf8, 0x61, 0x7c, 0xaf, 0xc0, 0xb3, 0x4c, 0x83, 0x92, 0x97, 0x77, 0x01, 0x92, 0x29, 0x08,
	0xac, 0xea, 0xb0, 0x65, 0xca, 0x31, 0x98, 0x96, 0x9c, 0x54, 0x6a, 0x63, 0x2a, 0x1d, 0xbd, 0x03,
	0xd5, 0x64, 0x50, 0x9c, 0x92, 0x52, 0xaf, 0x3a, 0x6c, 0x2c, 0x77, 0xf3, 0x99, 0x24, 0x4d, 0x5a,
	0xe9, 0x5c, 0xe3, 0x10, 0x9a, 0x2b, 0x05, 0x1d, 0x93, 0x99, 0x1f, 0xc6, 0xb4, 0x1b, 0x50, 0x8e,
	0x1a, 0x53, 0x0a, 0x1a, 0x8b, 0x96, 0x8c, 0x21, 0xe8, 0x45, 0x07, 0xc8, 0xb6, 0xea, 0x50, 0x76,
	0x78, 0x40, 0x9c, 0x50, 0xb6, 0xa2, 0x1f, 0xc6, 0xaf, 0x0a, 0x34, 0x8e, 0x29, 0xb6, 0x43, 0x9c,
	0x1f, 0x35, 0x82, 0x2d, 0xdf, 0x9e, 0x62, 0x39, 0x6c, 0xf1, 0x8d, 0xba, 0xbc, 0x3f, 0xe6, 0x50,
	0x4f, 0x8c, 0x46, 0xd0, 0x5c, 0xb1, 0xd2, 0x21, 0xf4, 0x31, 0xa0, 0xa5, 0x9a, 0x13, 0x7d, 0x95,
	0x04, 0x11, 0xcd, 0x1c, 0x8d, 0xb1, 0x2c, 0xad, 0x5d, 0x9a, 0x89, 0x30, 0xf4, 0x36, 0x34, 0xf0,
	0xf4, 0x02, 0xbb, 0x2e, 0x76, 0xd3, 0xb7, 0xd1, 0x73, 0x99, 0xb6, 0x25, 0xe4, 0xfa, 0x2c, 0x5e,
	0x4e, 0x6a, 0x3f, 0x71, 0x99, 0xf1, 0x05, 0x68, 0xf9, 0x96, 0x1e, 0x61, 0xb8, 0xc6, 0x9f, 0x0a,
	0x34, 0xce, 0x02, 0xb7, 0x90, 0xac, 0xec, 0xbd, 0x88, 0xc9, 0x53, 0xd7, 0x93, 0x57, 0xba, 0x2f,
	0x79, 0x5b, 0x8f, 0x4b, 0x5e, 0x79, 0x03, 0x79, 0xf9, 0x16, 0x1f, 0x83, 0xbc, 0x9f, 0x54, 0x68,
	0x8c, 0xe8, 0xc2, 0x9a, 0xf9, 0xf7, 0x53, 0x5a, 0x44, 0xa8, 0xba, 0x24, 0xf4, 0x7f, 0x40, 0x5e,
	0xda, 0x0c, 0xb7, 0xff, 0x8b, 0x19, 0x9e, 0x81, 0x96, 0xa7, 0x48, 0x92, 0x9f, 0x71, 0x16, 0xe5,
	0x01, 0xce, 0xf2, 0x1e, 0xec, 0xad, 0x3e, 0x06, 0xec, 0x21, 0xb6, 0x72, 0x0e, 0x8d, 0xdc, 0x6e,
	0x59, 0xd3, 0xfb, 0x50, 0x4d, 0xe8, 0x89, 0x6b, 0xfa, 0x57, 0x45, 0xa4, 0xf3, 0x87, 0xbf, 0x6f,
	0xc3, 0x6e, 0xfa, 0x85, 0x12, 0x0f, 0x18, 0x9a, 0x64, 0xf1, 0x92, 0xb9, 0x54, 0x78, 0x7d, 0x1f,
	0xf2, 0x07, 0x54, 0x7f, 0x83, 0x7f, 0x6e, 0x78, 0xe2, 0x8c, 0xfd, 0xef, 0x7e, 0xfb, 0xfb, 0x07,
	0xb5, 0x85, 0x9a, 0xd1, 0x6b, 0xbc, 0x44, 0xee, 0x2f, 0xe5, 0x81, 0x2e, 0xe0, 0x95, 0x15, 0xd3,
	0x44, 0x1a, 0x3f, 0xb8, 0xe8, 0xe9, 0xd3, 0x9b, 0x05, 0x2b, 0x12, 0xa8, 0x2d, 0x80, 0xf6, 0x50,
	0x3d, 0x0b, 0xf4, 0x8d, 0xe7, 0x7e, 0x8b, 0x6e, 0x00, 0xe5, 0x8d, 0x19, 0xbd, 0x9e, 0x3b, 0x2e,
	0xed, 0xf8, 0x7a, 0x67, 0xdd, 0xf2, 0x06, 0x48, 0xe1, 0xeb, 0xc8, 0x83, 0x5a, 0xd6, 0x03, 0x51,
	0x4b, 0x88, 0xb1, 0xd8, 0xec, 0xf5, 0x76, 0xf1, 0xa2, 0x04, 0xd3, 0x05, 0x58, 0xdd, 0x78, 0x9a,
	0x01, 0x7b, 0xa1, 0x1c, 0x20, 0x1f, 0x6a, 0x59, 0xc7, 0x88, 0xa0, 0xd6, 0x58, 0x65, 0x04, 0xb5,
	0xce, 0x64, 0x8c, 0xe7, 0x02, 0xaa, 0x39, 0x2c, 0xa4, 0x92, 0xe3, 0x39, 0xf0, 0x34, 0xa3, 0x47,
	0xa4, 0xe7, 0xc5, 0x10, 0x4b, 0x5c, 0x6f, 0x15, 0xae, 0x49, 0xb0, 0x86, 0x00, 0xdb, 0x45, 0xd9,
	0xbe, 0xd0, 0x29, 0xd4, 0x46, 0x78, 0x82, 0x57, 0x9a, 0xaa, 0x89, 0xdb, 0x21, 0x35, 0x7d, 0xb4,
	0x38, 0x19, 0xe9, 0x89, 0x1e, 0xe3, 0x71, 0x1c, 0x14, 0x2b, 0x20, 0x80, 0x5a, 0xf6, 0x62, 0x47,
	0x1c, 0xad, 0x71, 0xc4, 0x88, 0xa3, 0x75, 0x5e, 0x10, 0xeb, 0xda, 0xd8, 0xcb, 0x82, 0xb9, 0x74,
	0x41, 0x67, 0xfe, 0x0b, 0xe5, 0xe0, 0xc8, 0xfc, 0xf9, 0xae, 0xa3, 0xfc, 0x72, 0xd7, 0x51, 0xfe,
	0xb8, 0xeb, 0x28, 0x3f, 0xfe, 0xd5, 0x79, 0x02, 0x9a, 0x47, 0x4c, 0x16, 0xda, 0xce, 0x57, 0x94,
	0x7c, 0x1d, 0xfd, 0x4b, 0x34, 0xed, 0xc0, 0x33, 0xe7, 0x83, 0x2f, 0xd5, 0xf9, 0xe0, 0xfc, 0xc9,
	0xc5, 0xb6, 0x88, 0xbd, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xe0, 0xb8, 0x3a, 0x0a,
	0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollectionServiceClient is the client API for CollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type CollectionServiceClient interface {
	ListCollectionSelectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCollectionSelectorsResponse, error)
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	GetCollectionCount(ctx context.Context, in *GetCollectionCountRequest, opts ...grpc.CallOption) (*GetCollectionCountResponse, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	DeleteCollection(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	DryRunCollection(ctx context.Context, in *DryRunCollectionRequest, opts ...grpc.CallOption) (*DryRunCollectionResponse, error)
}

type collectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionServiceClient(cc grpc.ClientConnInterface) CollectionServiceClient {
	return &collectionServiceClient{cc}
}

func (c *collectionServiceClient) ListCollectionSelectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCollectionSelectorsResponse, error) {
	out := new(ListCollectionSelectorsResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/ListCollectionSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollectionCount(ctx context.Context, in *GetCollectionCountRequest, opts ...grpc.CallOption) (*GetCollectionCountResponse, error) {
	out := new(GetCollectionCountResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/GetCollectionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error) {
	out := new(UpdateCollectionResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) DeleteCollection(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) DryRunCollection(ctx context.Context, in *DryRunCollectionRequest, opts ...grpc.CallOption) (*DryRunCollectionResponse, error) {
	out := new(DryRunCollectionResponse)
	err := c.cc.Invoke(ctx, "/v1.CollectionService/DryRunCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionServiceServer is the server API for CollectionService service.
type CollectionServiceServer interface {
	ListCollectionSelectors(context.Context, *Empty) (*ListCollectionSelectorsResponse, error)
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	GetCollectionCount(context.Context, *GetCollectionCountRequest) (*GetCollectionCountResponse, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionResponse, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	DeleteCollection(context.Context, *ResourceByID) (*Empty, error)
	DryRunCollection(context.Context, *DryRunCollectionRequest) (*DryRunCollectionResponse, error)
}

// UnimplementedCollectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCollectionServiceServer struct {
}

func (*UnimplementedCollectionServiceServer) ListCollectionSelectors(ctx context.Context, req *Empty) (*ListCollectionSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionSelectors not implemented")
}
func (*UnimplementedCollectionServiceServer) GetCollection(ctx context.Context, req *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (*UnimplementedCollectionServiceServer) GetCollectionCount(ctx context.Context, req *GetCollectionCountRequest) (*GetCollectionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionCount not implemented")
}
func (*UnimplementedCollectionServiceServer) CreateCollection(ctx context.Context, req *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedCollectionServiceServer) UpdateCollection(ctx context.Context, req *UpdateCollectionRequest) (*UpdateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (*UnimplementedCollectionServiceServer) ListCollections(ctx context.Context, req *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (*UnimplementedCollectionServiceServer) DeleteCollection(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (*UnimplementedCollectionServiceServer) DryRunCollection(ctx context.Context, req *DryRunCollectionRequest) (*DryRunCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRunCollection not implemented")
}

func RegisterCollectionServiceServer(s *grpc.Server, srv CollectionServiceServer) {
	s.RegisterService(&_CollectionService_serviceDesc, srv)
}

func _CollectionService_ListCollectionSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).ListCollectionSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/ListCollectionSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).ListCollectionSelectors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollectionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollectionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/GetCollectionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollectionCount(ctx, req.(*GetCollectionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_DryRunCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryRunCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).DryRunCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CollectionService/DryRunCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).DryRunCollection(ctx, req.(*DryRunCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CollectionService",
	HandlerType: (*CollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollectionSelectors",
			Handler:    _CollectionService_ListCollectionSelectors_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _CollectionService_GetCollection_Handler,
		},
		{
			MethodName: "GetCollectionCount",
			Handler:    _CollectionService_GetCollectionCount_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _CollectionService_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _CollectionService_UpdateCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _CollectionService_ListCollections_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _CollectionService_DeleteCollection_Handler,
		},
		{
			MethodName: "DryRunCollection",
			Handler:    _CollectionService_DryRunCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/resource_collection_service.proto",
}

func (m *ListCollectionSelectorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCollectionSelectorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCollectionSelectorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Selectors) > 0 {
		for iNdEx := len(m.Selectors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Selectors[iNdEx])
			copy(dAtA[i:], m.Selectors[iNdEx])
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Selectors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionDeploymentMatchOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionDeploymentMatchOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionDeploymentMatchOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FilterQuery != nil {
		{
			size, err := m.FilterQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WithMatches {
		i--
		if m.WithMatches {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollectionCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollectionCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollectionCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollectionCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollectionCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for iNdEx := len(m.EmbeddedCollectionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmbeddedCollectionIds[iNdEx])
			copy(dAtA[i:], m.EmbeddedCollectionIds[iNdEx])
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.EmbeddedCollectionIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResourceSelectors) > 0 {
		for iNdEx := len(m.ResourceSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for iNdEx := len(m.EmbeddedCollectionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmbeddedCollectionIds[iNdEx])
			copy(dAtA[i:], m.EmbeddedCollectionIds[iNdEx])
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.EmbeddedCollectionIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ResourceSelectors) > 0 {
		for iNdEx := len(m.ResourceSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DryRunCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryRunCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DryRunCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for iNdEx := len(m.EmbeddedCollectionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmbeddedCollectionIds[iNdEx])
			copy(dAtA[i:], m.EmbeddedCollectionIds[iNdEx])
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.EmbeddedCollectionIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ResourceSelectors) > 0 {
		for iNdEx := len(m.ResourceSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResourceCollectionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DryRunCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryRunCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DryRunCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCollectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCollectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCollectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCollectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCollectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCollectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Collections) > 0 {
		for iNdEx := len(m.Collections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceCollectionService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourceCollectionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourceCollectionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListCollectionSelectorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Selectors) > 0 {
		for _, s := range m.Selectors {
			l = len(s)
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionDeploymentMatchOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithMatches {
		n += 2
	}
	if m.FilterQuery != nil {
		l = m.FilterQuery.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCollectionCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCollectionCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovResourceCollectionService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if len(m.ResourceSelectors) > 0 {
		for _, e := range m.ResourceSelectors {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for _, s := range m.EmbeddedCollectionIds {
			l = len(s)
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if len(m.ResourceSelectors) > 0 {
		for _, e := range m.ResourceSelectors {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for _, s := range m.EmbeddedCollectionIds {
			l = len(s)
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DryRunCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if len(m.ResourceSelectors) > 0 {
		for _, e := range m.ResourceSelectors {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if len(m.EmbeddedCollectionIds) > 0 {
		for _, s := range m.EmbeddedCollectionIds {
			l = len(s)
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DryRunCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCollectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovResourceCollectionService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCollectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for _, e := range m.Collections {
			l = e.Size()
			n += 1 + l + sovResourceCollectionService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResourceCollectionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourceCollectionService(x uint64) (n int) {
	return sovResourceCollectionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListCollectionSelectorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCollectionSelectorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCollectionSelectorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &CollectionDeploymentMatchOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionDeploymentMatchOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionDeploymentMatchOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionDeploymentMatchOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMatches", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMatches = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilterQuery == nil {
				m.FilterQuery = &RawQuery{}
			}
			if err := m.FilterQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &storage.ResourceCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &storage.ListDeployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollectionCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollectionCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollectionCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceSelectors = append(m.ResourceSelectors, &storage.ResourceSelector{})
			if err := m.ResourceSelectors[len(m.ResourceSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedCollectionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddedCollectionIds = append(m.EmbeddedCollectionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &storage.ResourceCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceSelectors = append(m.ResourceSelectors, &storage.ResourceSelector{})
			if err := m.ResourceSelectors[len(m.ResourceSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedCollectionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddedCollectionIds = append(m.EmbeddedCollectionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &storage.ResourceCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryRunCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryRunCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryRunCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceSelectors = append(m.ResourceSelectors, &storage.ResourceSelector{})
			if err := m.ResourceSelectors[len(m.ResourceSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedCollectionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddedCollectionIds = append(m.EmbeddedCollectionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &CollectionDeploymentMatchOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryRunCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryRunCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryRunCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &storage.ListDeployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCollectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCollectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCollectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCollectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCollectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCollectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collections = append(m.Collections, &storage.ResourceCollection{})
			if err := m.Collections[len(m.Collections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceCollectionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceCollectionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceCollectionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceCollectionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceCollectionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourceCollectionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourceCollectionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourceCollectionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourceCollectionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceCollectionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourceCollectionService = fmt.Errorf("proto: unexpected end of group")
)
