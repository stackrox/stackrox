// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/process_whitelist_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: Do not use.
type GetProcessWhitelistRequest struct {
	Key                  *storage.ProcessBaselineKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetProcessWhitelistRequest) Reset()         { *m = GetProcessWhitelistRequest{} }
func (m *GetProcessWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*GetProcessWhitelistRequest) ProtoMessage()    {}
func (*GetProcessWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{0}
}
func (m *GetProcessWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProcessWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProcessWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProcessWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProcessWhitelistRequest.Merge(m, src)
}
func (m *GetProcessWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProcessWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProcessWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProcessWhitelistRequest proto.InternalMessageInfo

func (m *GetProcessWhitelistRequest) GetKey() *storage.ProcessBaselineKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetProcessWhitelistRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetProcessWhitelistRequest) Clone() *GetProcessWhitelistRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetProcessWhitelistRequest)
	*cloned = *m

	cloned.Key = m.Key.Clone()
	return cloned
}

// Deprecated: Do not use.
type UpdateProcessWhitelistsRequest struct {
	Keys                 []*storage.ProcessBaselineKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	AddElements          []*storage.BaselineItem       `protobuf:"bytes,2,rep,name=add_elements,json=addElements,proto3" json:"add_elements,omitempty"`
	RemoveElements       []*storage.BaselineItem       `protobuf:"bytes,3,rep,name=remove_elements,json=removeElements,proto3" json:"remove_elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateProcessWhitelistsRequest) Reset()         { *m = UpdateProcessWhitelistsRequest{} }
func (m *UpdateProcessWhitelistsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProcessWhitelistsRequest) ProtoMessage()    {}
func (*UpdateProcessWhitelistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{1}
}
func (m *UpdateProcessWhitelistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProcessWhitelistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProcessWhitelistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProcessWhitelistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProcessWhitelistsRequest.Merge(m, src)
}
func (m *UpdateProcessWhitelistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProcessWhitelistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProcessWhitelistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProcessWhitelistsRequest proto.InternalMessageInfo

func (m *UpdateProcessWhitelistsRequest) GetKeys() []*storage.ProcessBaselineKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *UpdateProcessWhitelistsRequest) GetAddElements() []*storage.BaselineItem {
	if m != nil {
		return m.AddElements
	}
	return nil
}

func (m *UpdateProcessWhitelistsRequest) GetRemoveElements() []*storage.BaselineItem {
	if m != nil {
		return m.RemoveElements
	}
	return nil
}

func (m *UpdateProcessWhitelistsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateProcessWhitelistsRequest) Clone() *UpdateProcessWhitelistsRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateProcessWhitelistsRequest)
	*cloned = *m

	if m.Keys != nil {
		cloned.Keys = make([]*storage.ProcessBaselineKey, len(m.Keys))
		for idx, v := range m.Keys {
			cloned.Keys[idx] = v.Clone()
		}
	}
	if m.AddElements != nil {
		cloned.AddElements = make([]*storage.BaselineItem, len(m.AddElements))
		for idx, v := range m.AddElements {
			cloned.AddElements[idx] = v.Clone()
		}
	}
	if m.RemoveElements != nil {
		cloned.RemoveElements = make([]*storage.BaselineItem, len(m.RemoveElements))
		for idx, v := range m.RemoveElements {
			cloned.RemoveElements[idx] = v.Clone()
		}
	}
	return cloned
}

// Deprecated: Do not use.
type ProcessWhitelistsResponse struct {
	Whitelists           []*storage.ProcessBaseline `protobuf:"bytes,1,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProcessWhitelistsResponse) Reset()         { *m = ProcessWhitelistsResponse{} }
func (m *ProcessWhitelistsResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessWhitelistsResponse) ProtoMessage()    {}
func (*ProcessWhitelistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{2}
}
func (m *ProcessWhitelistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessWhitelistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessWhitelistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessWhitelistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessWhitelistsResponse.Merge(m, src)
}
func (m *ProcessWhitelistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessWhitelistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessWhitelistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessWhitelistsResponse proto.InternalMessageInfo

func (m *ProcessWhitelistsResponse) GetWhitelists() []*storage.ProcessBaseline {
	if m != nil {
		return m.Whitelists
	}
	return nil
}

func (m *ProcessWhitelistsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessWhitelistsResponse) Clone() *ProcessWhitelistsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ProcessWhitelistsResponse)
	*cloned = *m

	if m.Whitelists != nil {
		cloned.Whitelists = make([]*storage.ProcessBaseline, len(m.Whitelists))
		for idx, v := range m.Whitelists {
			cloned.Whitelists[idx] = v.Clone()
		}
	}
	return cloned
}

// Deprecated: Do not use.
type ProcessWhitelistUpdateError struct {
	Error                string                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Key                  *storage.ProcessBaselineKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ProcessWhitelistUpdateError) Reset()         { *m = ProcessWhitelistUpdateError{} }
func (m *ProcessWhitelistUpdateError) String() string { return proto.CompactTextString(m) }
func (*ProcessWhitelistUpdateError) ProtoMessage()    {}
func (*ProcessWhitelistUpdateError) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{3}
}
func (m *ProcessWhitelistUpdateError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessWhitelistUpdateError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessWhitelistUpdateError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessWhitelistUpdateError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessWhitelistUpdateError.Merge(m, src)
}
func (m *ProcessWhitelistUpdateError) XXX_Size() int {
	return m.Size()
}
func (m *ProcessWhitelistUpdateError) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessWhitelistUpdateError.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessWhitelistUpdateError proto.InternalMessageInfo

func (m *ProcessWhitelistUpdateError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ProcessWhitelistUpdateError) GetKey() *storage.ProcessBaselineKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProcessWhitelistUpdateError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ProcessWhitelistUpdateError) Clone() *ProcessWhitelistUpdateError {
	if m == nil {
		return nil
	}
	cloned := new(ProcessWhitelistUpdateError)
	*cloned = *m

	cloned.Key = m.Key.Clone()
	return cloned
}

// Deprecated: Do not use.
type UpdateProcessWhitelistsResponse struct {
	Whitelists           []*storage.ProcessBaseline     `protobuf:"bytes,1,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
	Errors               []*ProcessWhitelistUpdateError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpdateProcessWhitelistsResponse) Reset()         { *m = UpdateProcessWhitelistsResponse{} }
func (m *UpdateProcessWhitelistsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProcessWhitelistsResponse) ProtoMessage()    {}
func (*UpdateProcessWhitelistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{4}
}
func (m *UpdateProcessWhitelistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProcessWhitelistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProcessWhitelistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProcessWhitelistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProcessWhitelistsResponse.Merge(m, src)
}
func (m *UpdateProcessWhitelistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProcessWhitelistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProcessWhitelistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProcessWhitelistsResponse proto.InternalMessageInfo

func (m *UpdateProcessWhitelistsResponse) GetWhitelists() []*storage.ProcessBaseline {
	if m != nil {
		return m.Whitelists
	}
	return nil
}

func (m *UpdateProcessWhitelistsResponse) GetErrors() []*ProcessWhitelistUpdateError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *UpdateProcessWhitelistsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateProcessWhitelistsResponse) Clone() *UpdateProcessWhitelistsResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateProcessWhitelistsResponse)
	*cloned = *m

	if m.Whitelists != nil {
		cloned.Whitelists = make([]*storage.ProcessBaseline, len(m.Whitelists))
		for idx, v := range m.Whitelists {
			cloned.Whitelists[idx] = v.Clone()
		}
	}
	if m.Errors != nil {
		cloned.Errors = make([]*ProcessWhitelistUpdateError, len(m.Errors))
		for idx, v := range m.Errors {
			cloned.Errors[idx] = v.Clone()
		}
	}
	return cloned
}

// Deprecated: Do not use.
type LockProcessWhitelistsRequest struct {
	Keys                 []*storage.ProcessBaselineKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Locked               bool                          `protobuf:"varint,2,opt,name=locked,proto3" json:"locked,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *LockProcessWhitelistsRequest) Reset()         { *m = LockProcessWhitelistsRequest{} }
func (m *LockProcessWhitelistsRequest) String() string { return proto.CompactTextString(m) }
func (*LockProcessWhitelistsRequest) ProtoMessage()    {}
func (*LockProcessWhitelistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{5}
}
func (m *LockProcessWhitelistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockProcessWhitelistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockProcessWhitelistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockProcessWhitelistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockProcessWhitelistsRequest.Merge(m, src)
}
func (m *LockProcessWhitelistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockProcessWhitelistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockProcessWhitelistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockProcessWhitelistsRequest proto.InternalMessageInfo

func (m *LockProcessWhitelistsRequest) GetKeys() []*storage.ProcessBaselineKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *LockProcessWhitelistsRequest) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *LockProcessWhitelistsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LockProcessWhitelistsRequest) Clone() *LockProcessWhitelistsRequest {
	if m == nil {
		return nil
	}
	cloned := new(LockProcessWhitelistsRequest)
	*cloned = *m

	if m.Keys != nil {
		cloned.Keys = make([]*storage.ProcessBaselineKey, len(m.Keys))
		for idx, v := range m.Keys {
			cloned.Keys[idx] = v.Clone()
		}
	}
	return cloned
}

// Deprecated: Do not use.
type DeleteProcessWhitelistsRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Confirm              bool     `protobuf:"varint,2,opt,name=confirm,proto3" json:"confirm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProcessWhitelistsRequest) Reset()         { *m = DeleteProcessWhitelistsRequest{} }
func (m *DeleteProcessWhitelistsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteProcessWhitelistsRequest) ProtoMessage()    {}
func (*DeleteProcessWhitelistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{6}
}
func (m *DeleteProcessWhitelistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteProcessWhitelistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteProcessWhitelistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteProcessWhitelistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProcessWhitelistsRequest.Merge(m, src)
}
func (m *DeleteProcessWhitelistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteProcessWhitelistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProcessWhitelistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProcessWhitelistsRequest proto.InternalMessageInfo

func (m *DeleteProcessWhitelistsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DeleteProcessWhitelistsRequest) GetConfirm() bool {
	if m != nil {
		return m.Confirm
	}
	return false
}

func (m *DeleteProcessWhitelistsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteProcessWhitelistsRequest) Clone() *DeleteProcessWhitelistsRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteProcessWhitelistsRequest)
	*cloned = *m

	return cloned
}

// Deprecated: Do not use.
type DeleteProcessWhitelistsResponse struct {
	NumDeleted           int32    `protobuf:"varint,1,opt,name=num_deleted,json=numDeleted,proto3" json:"num_deleted,omitempty"`
	DryRun               bool     `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProcessWhitelistsResponse) Reset()         { *m = DeleteProcessWhitelistsResponse{} }
func (m *DeleteProcessWhitelistsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteProcessWhitelistsResponse) ProtoMessage()    {}
func (*DeleteProcessWhitelistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b607dc2d47107e, []int{7}
}
func (m *DeleteProcessWhitelistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteProcessWhitelistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteProcessWhitelistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteProcessWhitelistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProcessWhitelistsResponse.Merge(m, src)
}
func (m *DeleteProcessWhitelistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteProcessWhitelistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProcessWhitelistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProcessWhitelistsResponse proto.InternalMessageInfo

func (m *DeleteProcessWhitelistsResponse) GetNumDeleted() int32 {
	if m != nil {
		return m.NumDeleted
	}
	return 0
}

func (m *DeleteProcessWhitelistsResponse) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *DeleteProcessWhitelistsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteProcessWhitelistsResponse) Clone() *DeleteProcessWhitelistsResponse {
	if m == nil {
		return nil
	}
	cloned := new(DeleteProcessWhitelistsResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*GetProcessWhitelistRequest)(nil), "v1.GetProcessWhitelistRequest")
	proto.RegisterType((*UpdateProcessWhitelistsRequest)(nil), "v1.UpdateProcessWhitelistsRequest")
	proto.RegisterType((*ProcessWhitelistsResponse)(nil), "v1.ProcessWhitelistsResponse")
	proto.RegisterType((*ProcessWhitelistUpdateError)(nil), "v1.ProcessWhitelistUpdateError")
	proto.RegisterType((*UpdateProcessWhitelistsResponse)(nil), "v1.UpdateProcessWhitelistsResponse")
	proto.RegisterType((*LockProcessWhitelistsRequest)(nil), "v1.LockProcessWhitelistsRequest")
	proto.RegisterType((*DeleteProcessWhitelistsRequest)(nil), "v1.DeleteProcessWhitelistsRequest")
	proto.RegisterType((*DeleteProcessWhitelistsResponse)(nil), "v1.DeleteProcessWhitelistsResponse")
}

func init() {
	proto.RegisterFile("api/v1/process_whitelist_service.proto", fileDescriptor_85b607dc2d47107e)
}

var fileDescriptor_85b607dc2d47107e = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5f, 0x6b, 0xd4, 0x4e,
	0x14, 0xed, 0xa4, 0xff, 0x7e, 0xbf, 0x5b, 0x51, 0x18, 0x5b, 0x37, 0x4d, 0x4b, 0x76, 0xd9, 0x8a,
	0x94, 0x82, 0x59, 0xb6, 0x3e, 0x58, 0xfa, 0xe0, 0x43, 0xb1, 0x88, 0x28, 0x28, 0x51, 0xf1, 0xcf,
	0xcb, 0x92, 0x6e, 0x6e, 0x6b, 0xc8, 0x9f, 0x49, 0x67, 0x26, 0xd1, 0xbc, 0x8a, 0x60, 0xdf, 0x7d,
	0xe9, 0x87, 0xf0, 0x83, 0xf8, 0xa6, 0xe0, 0x17, 0x90, 0xea, 0x07, 0x91, 0x4c, 0x92, 0xb6, 0x2c,
	0x49, 0xaa, 0xe8, 0xdb, 0xce, 0xe6, 0xdc, 0x73, 0xcf, 0xbd, 0xe7, 0xcc, 0xc0, 0x0d, 0x27, 0xf6,
	0x06, 0xe9, 0x70, 0x10, 0x73, 0x36, 0x46, 0x21, 0x46, 0x6f, 0x5e, 0x7b, 0x12, 0x03, 0x4f, 0xc8,
	0x91, 0x40, 0x9e, 0x7a, 0x63, 0xb4, 0x62, 0xce, 0x24, 0xa3, 0x5a, 0x3a, 0x34, 0x56, 0x0f, 0x18,
	0x3b, 0x08, 0x70, 0x90, 0x97, 0x38, 0x51, 0xc4, 0xa4, 0x23, 0x3d, 0x16, 0x89, 0x02, 0x61, 0x98,
	0x42, 0x32, 0xee, 0x1c, 0xe0, 0x29, 0xd5, 0x9e, 0x23, 0x30, 0xf0, 0xa2, 0x92, 0xa1, 0xff, 0x08,
	0x8c, 0x7b, 0x28, 0x1f, 0x17, 0x1f, 0x9f, 0x57, 0x6d, 0x6c, 0x3c, 0x4c, 0x50, 0x48, 0x7a, 0x13,
	0xa6, 0x7d, 0xcc, 0x74, 0xd2, 0x23, 0xeb, 0x0b, 0x9b, 0x2b, 0x56, 0xc9, 0x65, 0x95, 0xf0, 0x9d,
	0x92, 0xea, 0x01, 0x66, 0x76, 0x8e, 0xdb, 0xd6, 0x74, 0xd2, 0xff, 0x42, 0xc0, 0x7c, 0x16, 0xbb,
	0x8e, 0xc4, 0x49, 0x52, 0x51, 0xb1, 0x0e, 0x60, 0xc6, 0xc7, 0x4c, 0xe8, 0xa4, 0x37, 0x7d, 0x11,
	0xad, 0x02, 0xd2, 0x2d, 0xb8, 0xe4, 0xb8, 0xee, 0x08, 0x03, 0x0c, 0x31, 0x92, 0x42, 0xd7, 0x54,
	0xe1, 0xd2, 0x69, 0x61, 0x55, 0x71, 0x5f, 0x62, 0x68, 0x2f, 0x38, 0xae, 0xbb, 0x5b, 0x22, 0xe9,
	0x1d, 0xb8, 0xc2, 0x31, 0x64, 0x29, 0x9e, 0x15, 0x4f, 0xb7, 0x15, 0x5f, 0x2e, 0xd0, 0x55, 0xbd,
	0x9a, 0xe8, 0x25, 0x2c, 0xd7, 0x8c, 0x22, 0x62, 0x16, 0x09, 0xa4, 0x5b, 0x00, 0xa7, 0xe6, 0x54,
	0x13, 0xe9, 0x4d, 0x13, 0xd9, 0xe7, 0xb0, 0x8a, 0x7a, 0x1f, 0x56, 0x26, 0xa9, 0x8b, 0xdd, 0xed,
	0x72, 0xce, 0x38, 0x5d, 0x84, 0x59, 0xcc, 0x7f, 0x28, 0x03, 0xfe, 0xb7, 0x8b, 0x43, 0x65, 0x8a,
	0xf6, 0x07, 0xa6, 0x1c, 0x13, 0xe8, 0x36, 0x9a, 0xf2, 0xb7, 0x93, 0xd0, 0xdb, 0x30, 0xa7, 0x94,
	0x55, 0xc6, 0x74, 0xad, 0x74, 0x68, 0xb5, 0xcc, 0x65, 0x97, 0x70, 0x25, 0xcd, 0x87, 0xd5, 0x87,
	0x6c, 0xec, 0xff, 0xbb, 0xb0, 0x5c, 0x83, 0xb9, 0x80, 0x8d, 0x7d, 0x74, 0xd5, 0x86, 0xfe, 0xb3,
	0xcb, 0x93, 0x6a, 0xf6, 0x14, 0xcc, 0xbb, 0x18, 0x60, 0x4b, 0x36, 0x17, 0x61, 0xf6, 0x30, 0x41,
	0x9e, 0x55, 0x2b, 0x57, 0x07, 0xaa, 0xc3, 0xfc, 0x98, 0x45, 0xfb, 0x1e, 0x0f, 0x4b, 0xd2, 0xea,
	0xa8, 0x58, 0x47, 0xd0, 0x6d, 0x64, 0x2d, 0x97, 0xdb, 0x85, 0x85, 0x28, 0x09, 0x47, 0xae, 0x82,
	0xb9, 0x8a, 0x7c, 0xd6, 0x86, 0x28, 0x09, 0x8b, 0x42, 0x97, 0x76, 0x60, 0xde, 0xe5, 0xd9, 0x88,
	0x27, 0x51, 0x25, 0xdb, 0xe5, 0x99, 0x9d, 0x44, 0x79, 0x83, 0xcd, 0x4f, 0x33, 0xd0, 0x99, 0xe4,
	0x7e, 0x52, 0x3c, 0x04, 0x34, 0x81, 0xab, 0x35, 0x17, 0x98, 0x9a, 0xb9, 0x07, 0xcd, 0x37, 0xdb,
	0x68, 0x74, 0xb6, 0x7f, 0xfd, 0xdd, 0xb7, 0x9f, 0x1f, 0xb5, 0x15, 0xba, 0x7c, 0xee, 0x01, 0x3a,
	0x33, 0x7b, 0xe0, 0x63, 0x76, 0xa4, 0x11, 0xfa, 0x81, 0x40, 0xa7, 0x21, 0x51, 0xb4, 0x9f, 0xf7,
	0x6e, 0x7f, 0x03, 0x8c, 0xb5, 0x56, 0x4c, 0xb1, 0xb5, 0xfe, 0x9a, 0x92, 0x62, 0x18, 0x4b, 0xb5,
	0x52, 0xb6, 0xc9, 0x46, 0xae, 0xe4, 0x88, 0xc0, 0x52, 0x6d, 0x82, 0x68, 0x2f, 0xef, 0xd1, 0x16,
	0xae, 0xdf, 0x53, 0xb1, 0xae, 0x54, 0x74, 0x0d, 0xa3, 0x7e, 0x21, 0x79, 0xbc, 0x4a, 0x29, 0xef,
	0x09, 0x74, 0x1a, 0x92, 0x50, 0x2c, 0xa5, 0x3d, 0x7c, 0x85, 0x9c, 0x0b, 0xa2, 0xd4, 0xef, 0x29,
	0x39, 0x9d, 0x8d, 0xfa, 0xa5, 0x1c, 0x69, 0x64, 0xc7, 0xfa, 0x7c, 0x62, 0x92, 0xaf, 0x27, 0x26,
	0xf9, 0x7e, 0x62, 0x92, 0xe3, 0x1f, 0xe6, 0x14, 0xe8, 0x1e, 0xb3, 0x84, 0x74, 0xc6, 0x3e, 0x67,
	0x6f, 0x8b, 0x87, 0xdf, 0x72, 0x62, 0xcf, 0x4a, 0x87, 0xaf, 0xb4, 0x74, 0xf8, 0x62, 0x6a, 0x6f,
	0x4e, 0xfd, 0x77, 0xeb, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xeb, 0xe4, 0x27, 0x78, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcessWhitelistServiceClient is the client API for ProcessWhitelistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ProcessWhitelistServiceClient interface {
	// GetProcessWhitelistById returns the single process whitelist referenced by the given ID.
	GetProcessWhitelist(ctx context.Context, in *GetProcessWhitelistRequest, opts ...grpc.CallOption) (*storage.ProcessBaseline, error)
	// AddToProcessWhitelists adds a list of process names to each of a list of process baselines
	UpdateProcessWhitelists(ctx context.Context, in *UpdateProcessWhitelistsRequest, opts ...grpc.CallOption) (*UpdateProcessWhitelistsResponse, error)
	// LockProcessWhitelists accepts a list of baseline IDs, locks those baselines, and returns the updated baseline objects
	LockProcessWhitelists(ctx context.Context, in *LockProcessWhitelistsRequest, opts ...grpc.CallOption) (*UpdateProcessWhitelistsResponse, error)
	// DeleteProcessWhitelists deletes whitelists
	DeleteProcessWhitelists(ctx context.Context, in *DeleteProcessWhitelistsRequest, opts ...grpc.CallOption) (*DeleteProcessWhitelistsResponse, error)
}

type processWhitelistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessWhitelistServiceClient(cc grpc.ClientConnInterface) ProcessWhitelistServiceClient {
	return &processWhitelistServiceClient{cc}
}

// Deprecated: Do not use.
func (c *processWhitelistServiceClient) GetProcessWhitelist(ctx context.Context, in *GetProcessWhitelistRequest, opts ...grpc.CallOption) (*storage.ProcessBaseline, error) {
	out := new(storage.ProcessBaseline)
	err := c.cc.Invoke(ctx, "/v1.ProcessWhitelistService/GetProcessWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *processWhitelistServiceClient) UpdateProcessWhitelists(ctx context.Context, in *UpdateProcessWhitelistsRequest, opts ...grpc.CallOption) (*UpdateProcessWhitelistsResponse, error) {
	out := new(UpdateProcessWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcessWhitelistService/UpdateProcessWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *processWhitelistServiceClient) LockProcessWhitelists(ctx context.Context, in *LockProcessWhitelistsRequest, opts ...grpc.CallOption) (*UpdateProcessWhitelistsResponse, error) {
	out := new(UpdateProcessWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcessWhitelistService/LockProcessWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *processWhitelistServiceClient) DeleteProcessWhitelists(ctx context.Context, in *DeleteProcessWhitelistsRequest, opts ...grpc.CallOption) (*DeleteProcessWhitelistsResponse, error) {
	out := new(DeleteProcessWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcessWhitelistService/DeleteProcessWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessWhitelistServiceServer is the server API for ProcessWhitelistService service.
type ProcessWhitelistServiceServer interface {
	// GetProcessWhitelistById returns the single process whitelist referenced by the given ID.
	GetProcessWhitelist(context.Context, *GetProcessWhitelistRequest) (*storage.ProcessBaseline, error)
	// AddToProcessWhitelists adds a list of process names to each of a list of process baselines
	UpdateProcessWhitelists(context.Context, *UpdateProcessWhitelistsRequest) (*UpdateProcessWhitelistsResponse, error)
	// LockProcessWhitelists accepts a list of baseline IDs, locks those baselines, and returns the updated baseline objects
	LockProcessWhitelists(context.Context, *LockProcessWhitelistsRequest) (*UpdateProcessWhitelistsResponse, error)
	// DeleteProcessWhitelists deletes whitelists
	DeleteProcessWhitelists(context.Context, *DeleteProcessWhitelistsRequest) (*DeleteProcessWhitelistsResponse, error)
}

// UnimplementedProcessWhitelistServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProcessWhitelistServiceServer struct {
}

func (*UnimplementedProcessWhitelistServiceServer) GetProcessWhitelist(ctx context.Context, req *GetProcessWhitelistRequest) (*storage.ProcessBaseline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessWhitelist not implemented")
}
func (*UnimplementedProcessWhitelistServiceServer) UpdateProcessWhitelists(ctx context.Context, req *UpdateProcessWhitelistsRequest) (*UpdateProcessWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessWhitelists not implemented")
}
func (*UnimplementedProcessWhitelistServiceServer) LockProcessWhitelists(ctx context.Context, req *LockProcessWhitelistsRequest) (*UpdateProcessWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockProcessWhitelists not implemented")
}
func (*UnimplementedProcessWhitelistServiceServer) DeleteProcessWhitelists(ctx context.Context, req *DeleteProcessWhitelistsRequest) (*DeleteProcessWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcessWhitelists not implemented")
}

func RegisterProcessWhitelistServiceServer(s *grpc.Server, srv ProcessWhitelistServiceServer) {
	s.RegisterService(&_ProcessWhitelistService_serviceDesc, srv)
}

func _ProcessWhitelistService_GetProcessWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessWhitelistServiceServer).GetProcessWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcessWhitelistService/GetProcessWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessWhitelistServiceServer).GetProcessWhitelist(ctx, req.(*GetProcessWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessWhitelistService_UpdateProcessWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessWhitelistServiceServer).UpdateProcessWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcessWhitelistService/UpdateProcessWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessWhitelistServiceServer).UpdateProcessWhitelists(ctx, req.(*UpdateProcessWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessWhitelistService_LockProcessWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockProcessWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessWhitelistServiceServer).LockProcessWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcessWhitelistService/LockProcessWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessWhitelistServiceServer).LockProcessWhitelists(ctx, req.(*LockProcessWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessWhitelistService_DeleteProcessWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessWhitelistServiceServer).DeleteProcessWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcessWhitelistService/DeleteProcessWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessWhitelistServiceServer).DeleteProcessWhitelists(ctx, req.(*DeleteProcessWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessWhitelistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProcessWhitelistService",
	HandlerType: (*ProcessWhitelistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessWhitelist",
			Handler:    _ProcessWhitelistService_GetProcessWhitelist_Handler,
		},
		{
			MethodName: "UpdateProcessWhitelists",
			Handler:    _ProcessWhitelistService_UpdateProcessWhitelists_Handler,
		},
		{
			MethodName: "LockProcessWhitelists",
			Handler:    _ProcessWhitelistService_LockProcessWhitelists_Handler,
		},
		{
			MethodName: "DeleteProcessWhitelists",
			Handler:    _ProcessWhitelistService_DeleteProcessWhitelists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/process_whitelist_service.proto",
}

func (m *GetProcessWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProcessWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProcessWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProcessWhitelistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProcessWhitelistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProcessWhitelistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemoveElements) > 0 {
		for iNdEx := len(m.RemoveElements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveElements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddElements) > 0 {
		for iNdEx := len(m.AddElements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddElements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProcessWhitelistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessWhitelistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWhitelistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Whitelists) > 0 {
		for iNdEx := len(m.Whitelists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProcessWhitelistUpdateError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessWhitelistUpdateError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessWhitelistUpdateError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintProcessWhitelistService(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProcessWhitelistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProcessWhitelistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProcessWhitelistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Whitelists) > 0 {
		for iNdEx := len(m.Whitelists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockProcessWhitelistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockProcessWhitelistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockProcessWhitelistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessWhitelistService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteProcessWhitelistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteProcessWhitelistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteProcessWhitelistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Confirm {
		i--
		if m.Confirm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintProcessWhitelistService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteProcessWhitelistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteProcessWhitelistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteProcessWhitelistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NumDeleted != 0 {
		i = encodeVarintProcessWhitelistService(dAtA, i, uint64(m.NumDeleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessWhitelistService(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessWhitelistService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetProcessWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovProcessWhitelistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProcessWhitelistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if len(m.AddElements) > 0 {
		for _, e := range m.AddElements {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if len(m.RemoveElements) > 0 {
		for _, e := range m.RemoveElements {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessWhitelistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whitelists) > 0 {
		for _, e := range m.Whitelists {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessWhitelistUpdateError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProcessWhitelistService(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovProcessWhitelistService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateProcessWhitelistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whitelists) > 0 {
		for _, e := range m.Whitelists {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockProcessWhitelistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovProcessWhitelistService(uint64(l))
		}
	}
	if m.Locked {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteProcessWhitelistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovProcessWhitelistService(uint64(l))
	}
	if m.Confirm {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteProcessWhitelistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumDeleted != 0 {
		n += 1 + sovProcessWhitelistService(uint64(m.NumDeleted))
	}
	if m.DryRun {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProcessWhitelistService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessWhitelistService(x uint64) (n int) {
	return sovProcessWhitelistService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetProcessWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProcessWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProcessWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &storage.ProcessBaselineKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProcessWhitelistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProcessWhitelistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProcessWhitelistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &storage.ProcessBaselineKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddElements = append(m.AddElements, &storage.BaselineItem{})
			if err := m.AddElements[len(m.AddElements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveElements = append(m.RemoveElements, &storage.BaselineItem{})
			if err := m.RemoveElements[len(m.RemoveElements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessWhitelistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessWhitelistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessWhitelistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelists = append(m.Whitelists, &storage.ProcessBaseline{})
			if err := m.Whitelists[len(m.Whitelists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessWhitelistUpdateError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessWhitelistUpdateError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessWhitelistUpdateError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &storage.ProcessBaselineKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProcessWhitelistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProcessWhitelistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProcessWhitelistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelists = append(m.Whitelists, &storage.ProcessBaseline{})
			if err := m.Whitelists[len(m.Whitelists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &ProcessWhitelistUpdateError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockProcessWhitelistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockProcessWhitelistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockProcessWhitelistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &storage.ProcessBaselineKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProcessWhitelistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProcessWhitelistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProcessWhitelistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirm = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProcessWhitelistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProcessWhitelistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProcessWhitelistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleted", wireType)
			}
			m.NumDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProcessWhitelistService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessWhitelistService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessWhitelistService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessWhitelistService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessWhitelistService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessWhitelistService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessWhitelistService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessWhitelistService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessWhitelistService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessWhitelistService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessWhitelistService = fmt.Errorf("proto: unexpected end of group")
)
