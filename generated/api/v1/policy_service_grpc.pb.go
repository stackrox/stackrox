// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/policy_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PolicyService_GetPolicy_FullMethodName                       = "/v1.PolicyService/GetPolicy"
	PolicyService_GetPolicyMitreVectors_FullMethodName           = "/v1.PolicyService/GetPolicyMitreVectors"
	PolicyService_ListPolicies_FullMethodName                    = "/v1.PolicyService/ListPolicies"
	PolicyService_PostPolicy_FullMethodName                      = "/v1.PolicyService/PostPolicy"
	PolicyService_PutPolicy_FullMethodName                       = "/v1.PolicyService/PutPolicy"
	PolicyService_PatchPolicy_FullMethodName                     = "/v1.PolicyService/PatchPolicy"
	PolicyService_DeletePolicy_FullMethodName                    = "/v1.PolicyService/DeletePolicy"
	PolicyService_EnableDisablePolicyNotification_FullMethodName = "/v1.PolicyService/EnableDisablePolicyNotification"
	PolicyService_ReassessPolicies_FullMethodName                = "/v1.PolicyService/ReassessPolicies"
	PolicyService_DryRunPolicy_FullMethodName                    = "/v1.PolicyService/DryRunPolicy"
	PolicyService_SubmitDryRunPolicyJob_FullMethodName           = "/v1.PolicyService/SubmitDryRunPolicyJob"
	PolicyService_QueryDryRunJobStatus_FullMethodName            = "/v1.PolicyService/QueryDryRunJobStatus"
	PolicyService_CancelDryRunJob_FullMethodName                 = "/v1.PolicyService/CancelDryRunJob"
	PolicyService_GetPolicyCategories_FullMethodName             = "/v1.PolicyService/GetPolicyCategories"
	PolicyService_ExportPolicies_FullMethodName                  = "/v1.PolicyService/ExportPolicies"
	PolicyService_PolicyFromSearch_FullMethodName                = "/v1.PolicyService/PolicyFromSearch"
	PolicyService_ImportPolicies_FullMethodName                  = "/v1.PolicyService/ImportPolicies"
)

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyServiceClient interface {
	// GetPolicy returns the requested policy by ID.
	GetPolicy(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Policy, error)
	// GetMitreVectorsForPolicy returns the requested policy by ID.
	GetPolicyMitreVectors(ctx context.Context, in *GetPolicyMitreVectorsRequest, opts ...grpc.CallOption) (*GetPolicyMitreVectorsResponse, error)
	// ListPolicies returns the list of policies.
	ListPolicies(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// PostPolicy creates a new policy.
	PostPolicy(ctx context.Context, in *PostPolicyRequest, opts ...grpc.CallOption) (*storage.Policy, error)
	// PutPolicy modifies an existing policy.
	PutPolicy(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*Empty, error)
	// PatchPolicy edits an existing policy.
	PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeletePolicy removes a policy by ID.
	DeletePolicy(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// EnableDisablePolicyNotification enables or disables notifications for a policy by ID.
	EnableDisablePolicyNotification(ctx context.Context, in *EnableDisablePolicyNotificationRequest, opts ...grpc.CallOption) (*Empty, error)
	// ReassessPolicies reevaluates all the policies.
	ReassessPolicies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.
	DryRunPolicy(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*DryRunResponse, error)
	SubmitDryRunPolicyJob(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*JobId, error)
	QueryDryRunJobStatus(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*DryRunJobStatusResponse, error)
	CancelDryRunJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Empty, error)
	// GetPolicyCategories returns the policy categories.
	GetPolicyCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PolicyCategoriesResponse, error)
	// ExportPolicies takes a list of policy IDs and returns either the entire list of policies or an error message
	ExportPolicies(ctx context.Context, in *ExportPoliciesRequest, opts ...grpc.CallOption) (*storage.ExportPoliciesResponse, error)
	PolicyFromSearch(ctx context.Context, in *PolicyFromSearchRequest, opts ...grpc.CallOption) (*PolicyFromSearchResponse, error)
	// ImportPolicies accepts a list of Policies and returns a list of the policies which could not be imported
	ImportPolicies(ctx context.Context, in *ImportPoliciesRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) GetPolicy(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Policy, error) {
	out := new(storage.Policy)
	err := c.cc.Invoke(ctx, PolicyService_GetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) GetPolicyMitreVectors(ctx context.Context, in *GetPolicyMitreVectorsRequest, opts ...grpc.CallOption) (*GetPolicyMitreVectorsResponse, error) {
	out := new(GetPolicyMitreVectorsResponse)
	err := c.cc.Invoke(ctx, PolicyService_GetPolicyMitreVectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ListPolicies(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, PolicyService_ListPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PostPolicy(ctx context.Context, in *PostPolicyRequest, opts ...grpc.CallOption) (*storage.Policy, error) {
	out := new(storage.Policy)
	err := c.cc.Invoke(ctx, PolicyService_PostPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PutPolicy(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_PutPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_PatchPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) DeletePolicy(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) EnableDisablePolicyNotification(ctx context.Context, in *EnableDisablePolicyNotificationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_EnableDisablePolicyNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ReassessPolicies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_ReassessPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) DryRunPolicy(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*DryRunResponse, error) {
	out := new(DryRunResponse)
	err := c.cc.Invoke(ctx, PolicyService_DryRunPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) SubmitDryRunPolicyJob(ctx context.Context, in *storage.Policy, opts ...grpc.CallOption) (*JobId, error) {
	out := new(JobId)
	err := c.cc.Invoke(ctx, PolicyService_SubmitDryRunPolicyJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) QueryDryRunJobStatus(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*DryRunJobStatusResponse, error) {
	out := new(DryRunJobStatusResponse)
	err := c.cc.Invoke(ctx, PolicyService_QueryDryRunJobStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CancelDryRunJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PolicyService_CancelDryRunJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) GetPolicyCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PolicyCategoriesResponse, error) {
	out := new(PolicyCategoriesResponse)
	err := c.cc.Invoke(ctx, PolicyService_GetPolicyCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ExportPolicies(ctx context.Context, in *ExportPoliciesRequest, opts ...grpc.CallOption) (*storage.ExportPoliciesResponse, error) {
	out := new(storage.ExportPoliciesResponse)
	err := c.cc.Invoke(ctx, PolicyService_ExportPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PolicyFromSearch(ctx context.Context, in *PolicyFromSearchRequest, opts ...grpc.CallOption) (*PolicyFromSearchResponse, error) {
	out := new(PolicyFromSearchResponse)
	err := c.cc.Invoke(ctx, PolicyService_PolicyFromSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ImportPolicies(ctx context.Context, in *ImportPoliciesRequest, opts ...grpc.CallOption) (*ImportPoliciesResponse, error) {
	out := new(ImportPoliciesResponse)
	err := c.cc.Invoke(ctx, PolicyService_ImportPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
// All implementations should embed UnimplementedPolicyServiceServer
// for forward compatibility
type PolicyServiceServer interface {
	// GetPolicy returns the requested policy by ID.
	GetPolicy(context.Context, *ResourceByID) (*storage.Policy, error)
	// GetMitreVectorsForPolicy returns the requested policy by ID.
	GetPolicyMitreVectors(context.Context, *GetPolicyMitreVectorsRequest) (*GetPolicyMitreVectorsResponse, error)
	// ListPolicies returns the list of policies.
	ListPolicies(context.Context, *RawQuery) (*ListPoliciesResponse, error)
	// PostPolicy creates a new policy.
	PostPolicy(context.Context, *PostPolicyRequest) (*storage.Policy, error)
	// PutPolicy modifies an existing policy.
	PutPolicy(context.Context, *storage.Policy) (*Empty, error)
	// PatchPolicy edits an existing policy.
	PatchPolicy(context.Context, *PatchPolicyRequest) (*Empty, error)
	// DeletePolicy removes a policy by ID.
	DeletePolicy(context.Context, *ResourceByID) (*Empty, error)
	// EnableDisablePolicyNotification enables or disables notifications for a policy by ID.
	EnableDisablePolicyNotification(context.Context, *EnableDisablePolicyNotificationRequest) (*Empty, error)
	// ReassessPolicies reevaluates all the policies.
	ReassessPolicies(context.Context, *Empty) (*Empty, error)
	// DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.
	DryRunPolicy(context.Context, *storage.Policy) (*DryRunResponse, error)
	SubmitDryRunPolicyJob(context.Context, *storage.Policy) (*JobId, error)
	QueryDryRunJobStatus(context.Context, *JobId) (*DryRunJobStatusResponse, error)
	CancelDryRunJob(context.Context, *JobId) (*Empty, error)
	// GetPolicyCategories returns the policy categories.
	GetPolicyCategories(context.Context, *Empty) (*PolicyCategoriesResponse, error)
	// ExportPolicies takes a list of policy IDs and returns either the entire list of policies or an error message
	ExportPolicies(context.Context, *ExportPoliciesRequest) (*storage.ExportPoliciesResponse, error)
	PolicyFromSearch(context.Context, *PolicyFromSearchRequest) (*PolicyFromSearchResponse, error)
	// ImportPolicies accepts a list of Policies and returns a list of the policies which could not be imported
	ImportPolicies(context.Context, *ImportPoliciesRequest) (*ImportPoliciesResponse, error)
}

// UnimplementedPolicyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (UnimplementedPolicyServiceServer) GetPolicy(context.Context, *ResourceByID) (*storage.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) GetPolicyMitreVectors(context.Context, *GetPolicyMitreVectorsRequest) (*GetPolicyMitreVectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyMitreVectors not implemented")
}
func (UnimplementedPolicyServiceServer) ListPolicies(context.Context, *RawQuery) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPolicyServiceServer) PostPolicy(context.Context, *PostPolicyRequest) (*storage.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) PutPolicy(context.Context, *storage.Policy) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) PatchPolicy(context.Context, *PatchPolicyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) DeletePolicy(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPolicyServiceServer) EnableDisablePolicyNotification(context.Context, *EnableDisablePolicyNotificationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDisablePolicyNotification not implemented")
}
func (UnimplementedPolicyServiceServer) ReassessPolicies(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassessPolicies not implemented")
}
func (UnimplementedPolicyServiceServer) DryRunPolicy(context.Context, *storage.Policy) (*DryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRunPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) SubmitDryRunPolicyJob(context.Context, *storage.Policy) (*JobId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDryRunPolicyJob not implemented")
}
func (UnimplementedPolicyServiceServer) QueryDryRunJobStatus(context.Context, *JobId) (*DryRunJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDryRunJobStatus not implemented")
}
func (UnimplementedPolicyServiceServer) CancelDryRunJob(context.Context, *JobId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDryRunJob not implemented")
}
func (UnimplementedPolicyServiceServer) GetPolicyCategories(context.Context, *Empty) (*PolicyCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCategories not implemented")
}
func (UnimplementedPolicyServiceServer) ExportPolicies(context.Context, *ExportPoliciesRequest) (*storage.ExportPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPolicies not implemented")
}
func (UnimplementedPolicyServiceServer) PolicyFromSearch(context.Context, *PolicyFromSearchRequest) (*PolicyFromSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyFromSearch not implemented")
}
func (UnimplementedPolicyServiceServer) ImportPolicies(context.Context, *ImportPoliciesRequest) (*ImportPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPolicies not implemented")
}

// UnsafePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServiceServer will
// result in compilation errors.
type UnsafePolicyServiceServer interface {
	mustEmbedUnimplementedPolicyServiceServer()
}

func RegisterPolicyServiceServer(s grpc.ServiceRegistrar, srv PolicyServiceServer) {
	s.RegisterService(&PolicyService_ServiceDesc, srv)
}

func _PolicyService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GetPolicy(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_GetPolicyMitreVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyMitreVectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GetPolicyMitreVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_GetPolicyMitreVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GetPolicyMitreVectors(ctx, req.(*GetPolicyMitreVectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ListPolicies(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PostPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PostPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_PostPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PostPolicy(ctx, req.(*PostPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_PutPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PutPolicy(ctx, req.(*storage.Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_PatchPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PatchPolicy(ctx, req.(*PatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_EnableDisablePolicyNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDisablePolicyNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).EnableDisablePolicyNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_EnableDisablePolicyNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).EnableDisablePolicyNotification(ctx, req.(*EnableDisablePolicyNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ReassessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ReassessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_ReassessPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ReassessPolicies(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_DryRunPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).DryRunPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_DryRunPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).DryRunPolicy(ctx, req.(*storage.Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_SubmitDryRunPolicyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).SubmitDryRunPolicyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_SubmitDryRunPolicyJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).SubmitDryRunPolicyJob(ctx, req.(*storage.Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_QueryDryRunJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).QueryDryRunJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_QueryDryRunJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).QueryDryRunJobStatus(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CancelDryRunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CancelDryRunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_CancelDryRunJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CancelDryRunJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_GetPolicyCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GetPolicyCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_GetPolicyCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GetPolicyCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ExportPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ExportPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_ExportPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ExportPolicies(ctx, req.(*ExportPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PolicyFromSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyFromSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PolicyFromSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_PolicyFromSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PolicyFromSearch(ctx, req.(*PolicyFromSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ImportPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ImportPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_ImportPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ImportPolicies(ctx, req.(*ImportPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyService_ServiceDesc is the grpc.ServiceDesc for PolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _PolicyService_GetPolicy_Handler,
		},
		{
			MethodName: "GetPolicyMitreVectors",
			Handler:    _PolicyService_GetPolicyMitreVectors_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _PolicyService_ListPolicies_Handler,
		},
		{
			MethodName: "PostPolicy",
			Handler:    _PolicyService_PostPolicy_Handler,
		},
		{
			MethodName: "PutPolicy",
			Handler:    _PolicyService_PutPolicy_Handler,
		},
		{
			MethodName: "PatchPolicy",
			Handler:    _PolicyService_PatchPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PolicyService_DeletePolicy_Handler,
		},
		{
			MethodName: "EnableDisablePolicyNotification",
			Handler:    _PolicyService_EnableDisablePolicyNotification_Handler,
		},
		{
			MethodName: "ReassessPolicies",
			Handler:    _PolicyService_ReassessPolicies_Handler,
		},
		{
			MethodName: "DryRunPolicy",
			Handler:    _PolicyService_DryRunPolicy_Handler,
		},
		{
			MethodName: "SubmitDryRunPolicyJob",
			Handler:    _PolicyService_SubmitDryRunPolicyJob_Handler,
		},
		{
			MethodName: "QueryDryRunJobStatus",
			Handler:    _PolicyService_QueryDryRunJobStatus_Handler,
		},
		{
			MethodName: "CancelDryRunJob",
			Handler:    _PolicyService_CancelDryRunJob_Handler,
		},
		{
			MethodName: "GetPolicyCategories",
			Handler:    _PolicyService_GetPolicyCategories_Handler,
		},
		{
			MethodName: "ExportPolicies",
			Handler:    _PolicyService_ExportPolicies_Handler,
		},
		{
			MethodName: "PolicyFromSearch",
			Handler:    _PolicyService_PolicyFromSearch_Handler,
		},
		{
			MethodName: "ImportPolicies",
			Handler:    _PolicyService_ImportPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/policy_service.proto",
}
