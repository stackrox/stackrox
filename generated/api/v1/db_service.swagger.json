{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/db_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "DBService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/db/exportcaps": {
      "get": {
        "operationId": "DBService_GetExportCapabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDBExportCapabilitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DBService"
        ]
      }
    },
    "/v1/db/interruptrestore/{processId}/{attemptId}": {
      "post": {
        "operationId": "DBService_InterruptRestoreProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InterruptDBRestoreProcessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DBService"
        ]
      }
    },
    "/v1/db/restore": {
      "get": {
        "operationId": "DBService_GetActiveRestoreProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActiveDBRestoreProcessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DBService"
        ]
      }
    },
    "/v1/db/restore/{id}": {
      "delete": {
        "operationId": "DBService_CancelRestoreProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DBService"
        ]
      }
    }
  },
  "definitions": {
    "DBExportManifestEncodingType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "UNCOMPREESSED",
        "DEFLATED"
      ],
      "default": "UNKNOWN",
      "description": "The encoding of the file data in the restore body, usually for compression purposes."
    },
    "DBRestoreProcessStatusResumeInfo": {
      "type": "object",
      "properties": {
        "pos": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "DBRestoreRequestHeaderLocalFileInfo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The full path of the file."
        },
        "bytesSize": {
          "type": "string",
          "format": "int64",
          "description": "The size of the file, in bytes. 0 if unknown."
        }
      },
      "description": "LocalFileInfo provides information about the file on the local machine of the user initiating the restore\nprocess, in order to provide information to other users about ongoing restore processes."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "v1DBExportFormat": {
      "type": "object",
      "properties": {
        "formatName": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DBExportFormatFile"
          }
        }
      },
      "description": "DBExportFormat describes a format (= a collection of files) for the database export."
    },
    "v1DBExportFormatFile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      }
    },
    "v1DBExportManifest": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DBExportManifestFile"
          }
        }
      },
      "description": "A DB export manifest describes the file contents of a restore request. To prevent data loss, a manifest is always\ninterpreted as binding, i.e., the server must ensure that it will read and make use of every file listed in the\nmanifest, otherwise it must reject the request."
    },
    "v1DBExportManifestFile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the file. This may or may not be a (relative) file path and up to the server to interpret.\nFor databases exported as ZIP files, this is the path relative to the root of the archive."
        },
        "encoding": {
          "$ref": "#/definitions/DBExportManifestEncodingType"
        },
        "encodedSize": {
          "type": "string",
          "format": "int64"
        },
        "decodedSize": {
          "type": "string",
          "format": "int64"
        },
        "decodedCrc32": {
          "type": "integer",
          "format": "int64",
          "description": "The CRC32 (IEEE) checksum of the decoded(!) data."
        }
      },
      "description": "A single file in the restore body."
    },
    "v1DBRestoreProcessMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "An ID identifying the restore process. Auto-assigned."
        },
        "header": {
          "$ref": "#/definitions/v1DBRestoreRequestHeader",
          "description": "The header with which the restore was initiated."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the restore process was started."
        },
        "initiatingUserName": {
          "type": "string",
          "description": "The user who initiated the database restore process."
        }
      },
      "description": "The metadata of an ongoing or completed restore process. This is the *static* metadata, which will not change\n(i.e., it is not a status)."
    },
    "v1DBRestoreProcessStatus": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1DBRestoreProcessMetadata"
        },
        "attemptId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/v1DBRestoreProcessStatusState"
        },
        "resumeInfo": {
          "$ref": "#/definitions/DBRestoreProcessStatusResumeInfo",
          "title": "only populated if state is PAUSED"
        },
        "error": {
          "type": "string",
          "title": "only populated when state is COMPLETED"
        },
        "bytesRead": {
          "type": "string",
          "format": "int64",
          "title": "Payload bytes read so far (approximate)"
        },
        "filesProcessed": {
          "type": "string",
          "format": "int64",
          "title": "Files processed so far (approximate)"
        }
      }
    },
    "v1DBRestoreProcessStatusState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NOT_STARTED",
        "IN_PROGRESS",
        "PAUSED",
        "COMPLETED"
      ],
      "default": "UNKNOWN",
      "title": "- COMPLETED: successful if error is empty, unsuccessful otherwise"
    },
    "v1DBRestoreRequestHeader": {
      "type": "object",
      "properties": {
        "formatName": {
          "type": "string",
          "description": "The name of the database export format. Mandatory."
        },
        "manifest": {
          "$ref": "#/definitions/v1DBExportManifest",
          "description": "A manifest of all the files in the restore data. The remainder of a restore request body (without the header),\nindependent of the export format, is always a concatenation of all encoded file data, with no separators in\nbetween (determined purely by the order and sizes listed in the manifest)."
        },
        "localFile": {
          "$ref": "#/definitions/DBRestoreRequestHeaderLocalFileInfo",
          "description": "Information about the local file with which the restore was initiated. Optional."
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetActiveDBRestoreProcessResponse": {
      "type": "object",
      "properties": {
        "activeStatus": {
          "$ref": "#/definitions/v1DBRestoreProcessStatus"
        }
      }
    },
    "v1GetDBExportCapabilitiesResponse": {
      "type": "object",
      "properties": {
        "formats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DBExportFormat"
          }
        },
        "supportedEncodings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DBExportManifestEncodingType"
          }
        }
      }
    },
    "v1InterruptDBRestoreProcessResponse": {
      "type": "object",
      "properties": {
        "resumeInfo": {
          "$ref": "#/definitions/DBRestoreProcessStatusResumeInfo"
        }
      }
    }
  }
}
