// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/process_baseline_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessBaselineService_GetProcessBaseline_FullMethodName     = "/v1.ProcessBaselineService/GetProcessBaseline"
	ProcessBaselineService_UpdateProcessBaselines_FullMethodName = "/v1.ProcessBaselineService/UpdateProcessBaselines"
	ProcessBaselineService_LockProcessBaselines_FullMethodName   = "/v1.ProcessBaselineService/LockProcessBaselines"
	ProcessBaselineService_DeleteProcessBaselines_FullMethodName = "/v1.ProcessBaselineService/DeleteProcessBaselines"
)

// ProcessBaselineServiceClient is the client API for ProcessBaselineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessBaselineServiceClient interface {
	// `GetProcessBaselineById` returns the single
	// process baseline referenced by the given ID.
	GetProcessBaseline(ctx context.Context, in *GetProcessBaselineRequest, opts ...grpc.CallOption) (*storage.ProcessBaseline, error)
	// `AddToProcessBaselines` adds a list of process
	// names to each of a list of process baselines.
	UpdateProcessBaselines(ctx context.Context, in *UpdateProcessBaselinesRequest, opts ...grpc.CallOption) (*UpdateProcessBaselinesResponse, error)
	// `LockProcessBaselines` accepts a list of baseline IDs, locks
	// those baselines, and returns the updated baseline objects.
	LockProcessBaselines(ctx context.Context, in *LockProcessBaselinesRequest, opts ...grpc.CallOption) (*UpdateProcessBaselinesResponse, error)
	// `DeleteProcessBaselines` deletes baselines.
	DeleteProcessBaselines(ctx context.Context, in *DeleteProcessBaselinesRequest, opts ...grpc.CallOption) (*DeleteProcessBaselinesResponse, error)
}

type processBaselineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessBaselineServiceClient(cc grpc.ClientConnInterface) ProcessBaselineServiceClient {
	return &processBaselineServiceClient{cc}
}

func (c *processBaselineServiceClient) GetProcessBaseline(ctx context.Context, in *GetProcessBaselineRequest, opts ...grpc.CallOption) (*storage.ProcessBaseline, error) {
	out := new(storage.ProcessBaseline)
	err := c.cc.Invoke(ctx, ProcessBaselineService_GetProcessBaseline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processBaselineServiceClient) UpdateProcessBaselines(ctx context.Context, in *UpdateProcessBaselinesRequest, opts ...grpc.CallOption) (*UpdateProcessBaselinesResponse, error) {
	out := new(UpdateProcessBaselinesResponse)
	err := c.cc.Invoke(ctx, ProcessBaselineService_UpdateProcessBaselines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processBaselineServiceClient) LockProcessBaselines(ctx context.Context, in *LockProcessBaselinesRequest, opts ...grpc.CallOption) (*UpdateProcessBaselinesResponse, error) {
	out := new(UpdateProcessBaselinesResponse)
	err := c.cc.Invoke(ctx, ProcessBaselineService_LockProcessBaselines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processBaselineServiceClient) DeleteProcessBaselines(ctx context.Context, in *DeleteProcessBaselinesRequest, opts ...grpc.CallOption) (*DeleteProcessBaselinesResponse, error) {
	out := new(DeleteProcessBaselinesResponse)
	err := c.cc.Invoke(ctx, ProcessBaselineService_DeleteProcessBaselines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessBaselineServiceServer is the server API for ProcessBaselineService service.
// All implementations should embed UnimplementedProcessBaselineServiceServer
// for forward compatibility
type ProcessBaselineServiceServer interface {
	// `GetProcessBaselineById` returns the single
	// process baseline referenced by the given ID.
	GetProcessBaseline(context.Context, *GetProcessBaselineRequest) (*storage.ProcessBaseline, error)
	// `AddToProcessBaselines` adds a list of process
	// names to each of a list of process baselines.
	UpdateProcessBaselines(context.Context, *UpdateProcessBaselinesRequest) (*UpdateProcessBaselinesResponse, error)
	// `LockProcessBaselines` accepts a list of baseline IDs, locks
	// those baselines, and returns the updated baseline objects.
	LockProcessBaselines(context.Context, *LockProcessBaselinesRequest) (*UpdateProcessBaselinesResponse, error)
	// `DeleteProcessBaselines` deletes baselines.
	DeleteProcessBaselines(context.Context, *DeleteProcessBaselinesRequest) (*DeleteProcessBaselinesResponse, error)
}

// UnimplementedProcessBaselineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProcessBaselineServiceServer struct {
}

func (UnimplementedProcessBaselineServiceServer) GetProcessBaseline(context.Context, *GetProcessBaselineRequest) (*storage.ProcessBaseline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessBaseline not implemented")
}
func (UnimplementedProcessBaselineServiceServer) UpdateProcessBaselines(context.Context, *UpdateProcessBaselinesRequest) (*UpdateProcessBaselinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessBaselines not implemented")
}
func (UnimplementedProcessBaselineServiceServer) LockProcessBaselines(context.Context, *LockProcessBaselinesRequest) (*UpdateProcessBaselinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockProcessBaselines not implemented")
}
func (UnimplementedProcessBaselineServiceServer) DeleteProcessBaselines(context.Context, *DeleteProcessBaselinesRequest) (*DeleteProcessBaselinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcessBaselines not implemented")
}

// UnsafeProcessBaselineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessBaselineServiceServer will
// result in compilation errors.
type UnsafeProcessBaselineServiceServer interface {
	mustEmbedUnimplementedProcessBaselineServiceServer()
}

func RegisterProcessBaselineServiceServer(s grpc.ServiceRegistrar, srv ProcessBaselineServiceServer) {
	s.RegisterService(&ProcessBaselineService_ServiceDesc, srv)
}

func _ProcessBaselineService_GetProcessBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessBaselineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessBaselineServiceServer).GetProcessBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessBaselineService_GetProcessBaseline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessBaselineServiceServer).GetProcessBaseline(ctx, req.(*GetProcessBaselineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessBaselineService_UpdateProcessBaselines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessBaselinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessBaselineServiceServer).UpdateProcessBaselines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessBaselineService_UpdateProcessBaselines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessBaselineServiceServer).UpdateProcessBaselines(ctx, req.(*UpdateProcessBaselinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessBaselineService_LockProcessBaselines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockProcessBaselinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessBaselineServiceServer).LockProcessBaselines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessBaselineService_LockProcessBaselines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessBaselineServiceServer).LockProcessBaselines(ctx, req.(*LockProcessBaselinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessBaselineService_DeleteProcessBaselines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessBaselinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessBaselineServiceServer).DeleteProcessBaselines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessBaselineService_DeleteProcessBaselines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessBaselineServiceServer).DeleteProcessBaselines(ctx, req.(*DeleteProcessBaselinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessBaselineService_ServiceDesc is the grpc.ServiceDesc for ProcessBaselineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessBaselineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProcessBaselineService",
	HandlerType: (*ProcessBaselineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessBaseline",
			Handler:    _ProcessBaselineService_GetProcessBaseline_Handler,
		},
		{
			MethodName: "UpdateProcessBaselines",
			Handler:    _ProcessBaselineService_UpdateProcessBaselines_Handler,
		},
		{
			MethodName: "LockProcessBaselines",
			Handler:    _ProcessBaselineService_LockProcessBaselines_Handler,
		},
		{
			MethodName: "DeleteProcessBaselines",
			Handler:    _ProcessBaselineService_DeleteProcessBaselines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/process_baseline_service.proto",
}
