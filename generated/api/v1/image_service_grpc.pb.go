// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/image_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageService_GetImage_FullMethodName                        = "/v1.ImageService/GetImage"
	ImageService_CountImages_FullMethodName                     = "/v1.ImageService/CountImages"
	ImageService_ListImages_FullMethodName                      = "/v1.ImageService/ListImages"
	ImageService_ScanImage_FullMethodName                       = "/v1.ImageService/ScanImage"
	ImageService_ScanImageInternal_FullMethodName               = "/v1.ImageService/ScanImageInternal"
	ImageService_GetImageVulnerabilitiesInternal_FullMethodName = "/v1.ImageService/GetImageVulnerabilitiesInternal"
	ImageService_EnrichLocalImageInternal_FullMethodName        = "/v1.ImageService/EnrichLocalImageInternal"
	ImageService_UpdateLocalScanStatusInternal_FullMethodName   = "/v1.ImageService/UpdateLocalScanStatusInternal"
	ImageService_InvalidateScanAndRegistryCaches_FullMethodName = "/v1.ImageService/InvalidateScanAndRegistryCaches"
	ImageService_DeleteImages_FullMethodName                    = "/v1.ImageService/DeleteImages"
	ImageService_WatchImage_FullMethodName                      = "/v1.ImageService/WatchImage"
	ImageService_UnwatchImage_FullMethodName                    = "/v1.ImageService/UnwatchImage"
	ImageService_GetWatchedImages_FullMethodName                = "/v1.ImageService/GetWatchedImages"
	ImageService_ExportImages_FullMethodName                    = "/v1.ImageService/ExportImages"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	// GetImage returns the image given its ID.
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*storage.Image, error)
	// CountImages returns a count of images that match the input query.
	CountImages(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountImagesResponse, error)
	// ListImages returns all the images that match the input query.
	ListImages(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// ScanImage scans a single image and returns the result
	ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*storage.Image, error)
	// ScanImageInternal is used solely by the Sensor and Admission Controller to send scan requests
	ScanImageInternal(ctx context.Context, in *ScanImageInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error)
	// Deprecated: Do not use.
	// Deprecated: GetImageVulnerabilities is used solely by the Sensor to send vulnerability matching requests.
	GetImageVulnerabilitiesInternal(ctx context.Context, in *GetImageVulnerabilitiesInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error)
	// EnrichLocalImageInternal is used solely by the Sensor to send enrichment requests for local images. This
	// includes the image's vulnerabilities as well as the signature verification data.
	EnrichLocalImageInternal(ctx context.Context, in *EnrichLocalImageInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error)
	// UpdateLocalScanStatusInternal is used solely by Sensor to send delegated scanning errors to central that
	// prevent local enrichment from occurring (such as no scanner, throttled, etc.).
	UpdateLocalScanStatusInternal(ctx context.Context, in *UpdateLocalScanStatusInternalRequest, opts ...grpc.CallOption) (*Empty, error)
	// InvalidateScanAndRegistryCaches removes the image metadata cache.
	InvalidateScanAndRegistryCaches(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// DeleteImage removes the images based on a query
	DeleteImages(ctx context.Context, in *DeleteImagesRequest, opts ...grpc.CallOption) (*DeleteImagesResponse, error)
	// WatchImage marks an image name as to be watched.
	WatchImage(ctx context.Context, in *WatchImageRequest, opts ...grpc.CallOption) (*WatchImageResponse, error)
	// UnwatchImage marks an image name to no longer be watched.
	// It returns successfully if the image is no longer being watched
	// after the call, irrespective of whether the image was already being watched.
	UnwatchImage(ctx context.Context, in *UnwatchImageRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetWatchedImages returns the list of image names that are currently
	// being watched.
	GetWatchedImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetWatchedImagesResponse, error)
	ExportImages(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (ImageService_ExportImagesClient, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*storage.Image, error) {
	out := new(storage.Image)
	err := c.cc.Invoke(ctx, ImageService_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) CountImages(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountImagesResponse, error) {
	out := new(CountImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_CountImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ListImages(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_ListImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*storage.Image, error) {
	out := new(storage.Image)
	err := c.cc.Invoke(ctx, ImageService_ScanImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ScanImageInternal(ctx context.Context, in *ScanImageInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error) {
	out := new(ScanImageInternalResponse)
	err := c.cc.Invoke(ctx, ImageService_ScanImageInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *imageServiceClient) GetImageVulnerabilitiesInternal(ctx context.Context, in *GetImageVulnerabilitiesInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error) {
	out := new(ScanImageInternalResponse)
	err := c.cc.Invoke(ctx, ImageService_GetImageVulnerabilitiesInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) EnrichLocalImageInternal(ctx context.Context, in *EnrichLocalImageInternalRequest, opts ...grpc.CallOption) (*ScanImageInternalResponse, error) {
	out := new(ScanImageInternalResponse)
	err := c.cc.Invoke(ctx, ImageService_EnrichLocalImageInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) UpdateLocalScanStatusInternal(ctx context.Context, in *UpdateLocalScanStatusInternalRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ImageService_UpdateLocalScanStatusInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) InvalidateScanAndRegistryCaches(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ImageService_InvalidateScanAndRegistryCaches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) DeleteImages(ctx context.Context, in *DeleteImagesRequest, opts ...grpc.CallOption) (*DeleteImagesResponse, error) {
	out := new(DeleteImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_DeleteImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) WatchImage(ctx context.Context, in *WatchImageRequest, opts ...grpc.CallOption) (*WatchImageResponse, error) {
	out := new(WatchImageResponse)
	err := c.cc.Invoke(ctx, ImageService_WatchImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) UnwatchImage(ctx context.Context, in *UnwatchImageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ImageService_UnwatchImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetWatchedImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetWatchedImagesResponse, error) {
	out := new(GetWatchedImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_GetWatchedImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ExportImages(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (ImageService_ExportImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[0], ImageService_ExportImages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServiceExportImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageService_ExportImagesClient interface {
	Recv() (*ExportImageResponse, error)
	grpc.ClientStream
}

type imageServiceExportImagesClient struct {
	grpc.ClientStream
}

func (x *imageServiceExportImagesClient) Recv() (*ExportImageResponse, error) {
	m := new(ExportImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations should embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	// GetImage returns the image given its ID.
	GetImage(context.Context, *GetImageRequest) (*storage.Image, error)
	// CountImages returns a count of images that match the input query.
	CountImages(context.Context, *RawQuery) (*CountImagesResponse, error)
	// ListImages returns all the images that match the input query.
	ListImages(context.Context, *RawQuery) (*ListImagesResponse, error)
	// ScanImage scans a single image and returns the result
	ScanImage(context.Context, *ScanImageRequest) (*storage.Image, error)
	// ScanImageInternal is used solely by the Sensor and Admission Controller to send scan requests
	ScanImageInternal(context.Context, *ScanImageInternalRequest) (*ScanImageInternalResponse, error)
	// Deprecated: Do not use.
	// Deprecated: GetImageVulnerabilities is used solely by the Sensor to send vulnerability matching requests.
	GetImageVulnerabilitiesInternal(context.Context, *GetImageVulnerabilitiesInternalRequest) (*ScanImageInternalResponse, error)
	// EnrichLocalImageInternal is used solely by the Sensor to send enrichment requests for local images. This
	// includes the image's vulnerabilities as well as the signature verification data.
	EnrichLocalImageInternal(context.Context, *EnrichLocalImageInternalRequest) (*ScanImageInternalResponse, error)
	// UpdateLocalScanStatusInternal is used solely by Sensor to send delegated scanning errors to central that
	// prevent local enrichment from occurring (such as no scanner, throttled, etc.).
	UpdateLocalScanStatusInternal(context.Context, *UpdateLocalScanStatusInternalRequest) (*Empty, error)
	// InvalidateScanAndRegistryCaches removes the image metadata cache.
	InvalidateScanAndRegistryCaches(context.Context, *Empty) (*Empty, error)
	// DeleteImage removes the images based on a query
	DeleteImages(context.Context, *DeleteImagesRequest) (*DeleteImagesResponse, error)
	// WatchImage marks an image name as to be watched.
	WatchImage(context.Context, *WatchImageRequest) (*WatchImageResponse, error)
	// UnwatchImage marks an image name to no longer be watched.
	// It returns successfully if the image is no longer being watched
	// after the call, irrespective of whether the image was already being watched.
	UnwatchImage(context.Context, *UnwatchImageRequest) (*Empty, error)
	// GetWatchedImages returns the list of image names that are currently
	// being watched.
	GetWatchedImages(context.Context, *Empty) (*GetWatchedImagesResponse, error)
	ExportImages(*ExportImageRequest, ImageService_ExportImagesServer) error
}

// UnimplementedImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) GetImage(context.Context, *GetImageRequest) (*storage.Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedImageServiceServer) CountImages(context.Context, *RawQuery) (*CountImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImages not implemented")
}
func (UnimplementedImageServiceServer) ListImages(context.Context, *RawQuery) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedImageServiceServer) ScanImage(context.Context, *ScanImageRequest) (*storage.Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanImage not implemented")
}
func (UnimplementedImageServiceServer) ScanImageInternal(context.Context, *ScanImageInternalRequest) (*ScanImageInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanImageInternal not implemented")
}
func (UnimplementedImageServiceServer) GetImageVulnerabilitiesInternal(context.Context, *GetImageVulnerabilitiesInternalRequest) (*ScanImageInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageVulnerabilitiesInternal not implemented")
}
func (UnimplementedImageServiceServer) EnrichLocalImageInternal(context.Context, *EnrichLocalImageInternalRequest) (*ScanImageInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichLocalImageInternal not implemented")
}
func (UnimplementedImageServiceServer) UpdateLocalScanStatusInternal(context.Context, *UpdateLocalScanStatusInternalRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocalScanStatusInternal not implemented")
}
func (UnimplementedImageServiceServer) InvalidateScanAndRegistryCaches(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateScanAndRegistryCaches not implemented")
}
func (UnimplementedImageServiceServer) DeleteImages(context.Context, *DeleteImagesRequest) (*DeleteImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImages not implemented")
}
func (UnimplementedImageServiceServer) WatchImage(context.Context, *WatchImageRequest) (*WatchImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchImage not implemented")
}
func (UnimplementedImageServiceServer) UnwatchImage(context.Context, *UnwatchImageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchImage not implemented")
}
func (UnimplementedImageServiceServer) GetWatchedImages(context.Context, *Empty) (*GetWatchedImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchedImages not implemented")
}
func (UnimplementedImageServiceServer) ExportImages(*ExportImageRequest, ImageService_ExportImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportImages not implemented")
}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_CountImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).CountImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_CountImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).CountImages(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ListImages(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ScanImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ScanImage(ctx, req.(*ScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_ScanImageInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ScanImageInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ScanImageInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ScanImageInternal(ctx, req.(*ScanImageInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageVulnerabilitiesInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageVulnerabilitiesInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageVulnerabilitiesInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GetImageVulnerabilitiesInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageVulnerabilitiesInternal(ctx, req.(*GetImageVulnerabilitiesInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_EnrichLocalImageInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichLocalImageInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).EnrichLocalImageInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_EnrichLocalImageInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).EnrichLocalImageInternal(ctx, req.(*EnrichLocalImageInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_UpdateLocalScanStatusInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocalScanStatusInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UpdateLocalScanStatusInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_UpdateLocalScanStatusInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UpdateLocalScanStatusInternal(ctx, req.(*UpdateLocalScanStatusInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_InvalidateScanAndRegistryCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).InvalidateScanAndRegistryCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_InvalidateScanAndRegistryCaches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).InvalidateScanAndRegistryCaches(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_DeleteImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).DeleteImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_DeleteImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).DeleteImages(ctx, req.(*DeleteImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_WatchImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).WatchImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_WatchImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).WatchImage(ctx, req.(*WatchImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_UnwatchImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwatchImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UnwatchImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_UnwatchImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UnwatchImage(ctx, req.(*UnwatchImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetWatchedImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetWatchedImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GetWatchedImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetWatchedImages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_ExportImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).ExportImages(m, &imageServiceExportImagesServer{stream})
}

type ImageService_ExportImagesServer interface {
	Send(*ExportImageResponse) error
	grpc.ServerStream
}

type imageServiceExportImagesServer struct {
	grpc.ServerStream
}

func (x *imageServiceExportImagesServer) Send(m *ExportImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler:    _ImageService_GetImage_Handler,
		},
		{
			MethodName: "CountImages",
			Handler:    _ImageService_CountImages_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _ImageService_ListImages_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _ImageService_ScanImage_Handler,
		},
		{
			MethodName: "ScanImageInternal",
			Handler:    _ImageService_ScanImageInternal_Handler,
		},
		{
			MethodName: "GetImageVulnerabilitiesInternal",
			Handler:    _ImageService_GetImageVulnerabilitiesInternal_Handler,
		},
		{
			MethodName: "EnrichLocalImageInternal",
			Handler:    _ImageService_EnrichLocalImageInternal_Handler,
		},
		{
			MethodName: "UpdateLocalScanStatusInternal",
			Handler:    _ImageService_UpdateLocalScanStatusInternal_Handler,
		},
		{
			MethodName: "InvalidateScanAndRegistryCaches",
			Handler:    _ImageService_InvalidateScanAndRegistryCaches_Handler,
		},
		{
			MethodName: "DeleteImages",
			Handler:    _ImageService_DeleteImages_Handler,
		},
		{
			MethodName: "WatchImage",
			Handler:    _ImageService_WatchImage_Handler,
		},
		{
			MethodName: "UnwatchImage",
			Handler:    _ImageService_UnwatchImage_Handler,
		},
		{
			MethodName: "GetWatchedImages",
			Handler:    _ImageService_GetWatchedImages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportImages",
			Handler:       _ImageService_ExportImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/image_service.proto",
}
