// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/service_identity_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceIdentityService_GetServiceIdentities_FullMethodName  = "/v1.ServiceIdentityService/GetServiceIdentities"
	ServiceIdentityService_CreateServiceIdentity_FullMethodName = "/v1.ServiceIdentityService/CreateServiceIdentity"
	ServiceIdentityService_GetAuthorities_FullMethodName        = "/v1.ServiceIdentityService/GetAuthorities"
)

// ServiceIdentityServiceClient is the client API for ServiceIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceIdentityServiceClient interface {
	GetServiceIdentities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceIdentityResponse, error)
	// CreateServiceIdentity creates a new key pair and certificate.
	// The key and certificate are not retained and can never be retrieved again.
	CreateServiceIdentity(ctx context.Context, in *CreateServiceIdentityRequest, opts ...grpc.CallOption) (*CreateServiceIdentityResponse, error)
	// GetAuthorities returns the authorities currently in use.
	GetAuthorities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Authorities, error)
}

type serviceIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceIdentityServiceClient(cc grpc.ClientConnInterface) ServiceIdentityServiceClient {
	return &serviceIdentityServiceClient{cc}
}

func (c *serviceIdentityServiceClient) GetServiceIdentities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceIdentityResponse, error) {
	out := new(ServiceIdentityResponse)
	err := c.cc.Invoke(ctx, ServiceIdentityService_GetServiceIdentities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceIdentityServiceClient) CreateServiceIdentity(ctx context.Context, in *CreateServiceIdentityRequest, opts ...grpc.CallOption) (*CreateServiceIdentityResponse, error) {
	out := new(CreateServiceIdentityResponse)
	err := c.cc.Invoke(ctx, ServiceIdentityService_CreateServiceIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceIdentityServiceClient) GetAuthorities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Authorities, error) {
	out := new(Authorities)
	err := c.cc.Invoke(ctx, ServiceIdentityService_GetAuthorities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceIdentityServiceServer is the server API for ServiceIdentityService service.
// All implementations should embed UnimplementedServiceIdentityServiceServer
// for forward compatibility
type ServiceIdentityServiceServer interface {
	GetServiceIdentities(context.Context, *Empty) (*ServiceIdentityResponse, error)
	// CreateServiceIdentity creates a new key pair and certificate.
	// The key and certificate are not retained and can never be retrieved again.
	CreateServiceIdentity(context.Context, *CreateServiceIdentityRequest) (*CreateServiceIdentityResponse, error)
	// GetAuthorities returns the authorities currently in use.
	GetAuthorities(context.Context, *Empty) (*Authorities, error)
}

// UnimplementedServiceIdentityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceIdentityServiceServer struct {
}

func (UnimplementedServiceIdentityServiceServer) GetServiceIdentities(context.Context, *Empty) (*ServiceIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceIdentities not implemented")
}
func (UnimplementedServiceIdentityServiceServer) CreateServiceIdentity(context.Context, *CreateServiceIdentityRequest) (*CreateServiceIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceIdentity not implemented")
}
func (UnimplementedServiceIdentityServiceServer) GetAuthorities(context.Context, *Empty) (*Authorities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorities not implemented")
}

// UnsafeServiceIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceIdentityServiceServer will
// result in compilation errors.
type UnsafeServiceIdentityServiceServer interface {
	mustEmbedUnimplementedServiceIdentityServiceServer()
}

func RegisterServiceIdentityServiceServer(s grpc.ServiceRegistrar, srv ServiceIdentityServiceServer) {
	s.RegisterService(&ServiceIdentityService_ServiceDesc, srv)
}

func _ServiceIdentityService_GetServiceIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceIdentityServiceServer).GetServiceIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceIdentityService_GetServiceIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceIdentityServiceServer).GetServiceIdentities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceIdentityService_CreateServiceIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceIdentityServiceServer).CreateServiceIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceIdentityService_CreateServiceIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceIdentityServiceServer).CreateServiceIdentity(ctx, req.(*CreateServiceIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceIdentityService_GetAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceIdentityServiceServer).GetAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceIdentityService_GetAuthorities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceIdentityServiceServer).GetAuthorities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceIdentityService_ServiceDesc is the grpc.ServiceDesc for ServiceIdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceIdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ServiceIdentityService",
	HandlerType: (*ServiceIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceIdentities",
			Handler:    _ServiceIdentityService_GetServiceIdentities_Handler,
		},
		{
			MethodName: "CreateServiceIdentity",
			Handler:    _ServiceIdentityService_CreateServiceIdentity_Handler,
		},
		{
			MethodName: "GetAuthorities",
			Handler:    _ServiceIdentityService_GetAuthorities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service_identity_service.proto",
}
