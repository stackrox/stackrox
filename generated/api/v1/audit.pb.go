// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/audit.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Audit_RequestStatus int32

const (
	Audit_UNKNOWN_STATUS    Audit_RequestStatus = 0
	Audit_REQUEST_SUCCEEDED Audit_RequestStatus = 1
	Audit_AUTH_FAILED       Audit_RequestStatus = 2
	Audit_REQUEST_FAILED    Audit_RequestStatus = 3
)

var Audit_RequestStatus_name = map[int32]string{
	0: "UNKNOWN_STATUS",
	1: "REQUEST_SUCCEEDED",
	2: "AUTH_FAILED",
	3: "REQUEST_FAILED",
}

var Audit_RequestStatus_value = map[string]int32{
	"UNKNOWN_STATUS":    0,
	"REQUEST_SUCCEEDED": 1,
	"AUTH_FAILED":       2,
	"REQUEST_FAILED":    3,
}

func (x Audit_RequestStatus) String() string {
	return proto.EnumName(Audit_RequestStatus_name, int32(x))
}

func (Audit_RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 0}
}

type Audit_Interaction int32

const (
	Audit_UNKNOWN_INTERACTION Audit_Interaction = 0
	Audit_CREATE              Audit_Interaction = 1
	Audit_UPDATE              Audit_Interaction = 2
	Audit_DELETE              Audit_Interaction = 3
)

var Audit_Interaction_name = map[int32]string{
	0: "UNKNOWN_INTERACTION",
	1: "CREATE",
	2: "UPDATE",
	3: "DELETE",
}

var Audit_Interaction_value = map[string]int32{
	"UNKNOWN_INTERACTION": 0,
	"CREATE":              1,
	"UPDATE":              2,
	"DELETE":              3,
}

func (x Audit_Interaction) String() string {
	return proto.EnumName(Audit_Interaction_name, int32(x))
}

func (Audit_Interaction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 1}
}

type Audit_AccessMethod int32

const (
	Audit_UNKNOWN_METHOD Audit_AccessMethod = 0
	Audit_CLI            Audit_AccessMethod = 1
	Audit_UI             Audit_AccessMethod = 2
	Audit_API            Audit_AccessMethod = 3
)

var Audit_AccessMethod_name = map[int32]string{
	0: "UNKNOWN_METHOD",
	1: "CLI",
	2: "UI",
	3: "API",
}

var Audit_AccessMethod_value = map[string]int32{
	"UNKNOWN_METHOD": 0,
	"CLI":            1,
	"UI":             2,
	"API":            3,
}

func (x Audit_AccessMethod) String() string {
	return proto.EnumName(Audit_AccessMethod_name, int32(x))
}

func (Audit_AccessMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 2}
}

type Audit struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audit) Reset()         { *m = Audit{} }
func (m *Audit) String() string { return proto.CompactTextString(m) }
func (*Audit) ProtoMessage()    {}
func (*Audit) Descriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0}
}
func (m *Audit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audit.Merge(m, src)
}
func (m *Audit) XXX_Size() int {
	return m.Size()
}
func (m *Audit) XXX_DiscardUnknown() {
	xxx_messageInfo_Audit.DiscardUnknown(m)
}

var xxx_messageInfo_Audit proto.InternalMessageInfo

func (m *Audit) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Audit) Clone() *Audit {
	if m == nil {
		return nil
	}
	cloned := new(Audit)
	*cloned = *m

	return cloned
}

type Audit_Message struct {
	Time                 *types.Timestamp       `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Status               Audit_RequestStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=v1.Audit_RequestStatus" json:"status,omitempty"`
	StatusReason         string                 `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	User                 *storage.UserInfo      `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Request              *Audit_Message_Request `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	Method               Audit_AccessMethod     `protobuf:"varint,6,opt,name=method,proto3,enum=v1.Audit_AccessMethod" json:"method,omitempty"`
	Interaction          Audit_Interaction      `protobuf:"varint,7,opt,name=interaction,proto3,enum=v1.Audit_Interaction" json:"interaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Audit_Message) Reset()         { *m = Audit_Message{} }
func (m *Audit_Message) String() string { return proto.CompactTextString(m) }
func (*Audit_Message) ProtoMessage()    {}
func (*Audit_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 0}
}
func (m *Audit_Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audit_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audit_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audit_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audit_Message.Merge(m, src)
}
func (m *Audit_Message) XXX_Size() int {
	return m.Size()
}
func (m *Audit_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Audit_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Audit_Message proto.InternalMessageInfo

func (m *Audit_Message) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Audit_Message) GetStatus() Audit_RequestStatus {
	if m != nil {
		return m.Status
	}
	return Audit_UNKNOWN_STATUS
}

func (m *Audit_Message) GetStatusReason() string {
	if m != nil {
		return m.StatusReason
	}
	return ""
}

func (m *Audit_Message) GetUser() *storage.UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Audit_Message) GetRequest() *Audit_Message_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Audit_Message) GetMethod() Audit_AccessMethod {
	if m != nil {
		return m.Method
	}
	return Audit_UNKNOWN_METHOD
}

func (m *Audit_Message) GetInteraction() Audit_Interaction {
	if m != nil {
		return m.Interaction
	}
	return Audit_UNKNOWN_INTERACTION
}

func (m *Audit_Message) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Audit_Message) Clone() *Audit_Message {
	if m == nil {
		return nil
	}
	cloned := new(Audit_Message)
	*cloned = *m

	cloned.Time = m.Time.Clone()
	cloned.User = m.User.Clone()
	cloned.Request = m.Request.Clone()
	return cloned
}

type Audit_Message_Request struct {
	Endpoint      string                               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Method        string                               `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Payload       *types.Any                           `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	SourceHeaders *Audit_Message_Request_SourceHeaders `protobuf:"bytes,4,opt,name=source_headers,json=sourceHeaders,proto3" json:"source_headers,omitempty"`
	// The source IP of the request.
	// This is determined from the values found within the request's source.
	// The following priority is given:
	//  1. X-Forwarded-For
	//  2. Remote-Addr
	//  3. Request address
	//
	// Depending on how Central configured to be exposed, the source IP _may_ be a cluster internal IP.
	//
	// In case of exposure with a Kubernetes Load Balancer Service, follow this configuration instruction
	// to preserve the client IP: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
	//
	// In case of exposure with a Route, following types support preserving the client IP:
	// - edge
	// - re-encrypt
	// The tls-passthrough type does not support preserving the client IP, due to the router not being able
	// to decrypt the incoming HTTP request and adding additional headers (i.e. X-Forwarded-For) to the request.
	//
	// In case of exposure with a custom loadbalancer / ingress controller, if HTTPS is passed through to the
	// Central, it also might not preserve the client IP correctly.
	SourceIp             string   `protobuf:"bytes,5,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audit_Message_Request) Reset()         { *m = Audit_Message_Request{} }
func (m *Audit_Message_Request) String() string { return proto.CompactTextString(m) }
func (*Audit_Message_Request) ProtoMessage()    {}
func (*Audit_Message_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 0, 0}
}
func (m *Audit_Message_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audit_Message_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audit_Message_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audit_Message_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audit_Message_Request.Merge(m, src)
}
func (m *Audit_Message_Request) XXX_Size() int {
	return m.Size()
}
func (m *Audit_Message_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Audit_Message_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Audit_Message_Request proto.InternalMessageInfo

func (m *Audit_Message_Request) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Audit_Message_Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Audit_Message_Request) GetPayload() *types.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Audit_Message_Request) GetSourceHeaders() *Audit_Message_Request_SourceHeaders {
	if m != nil {
		return m.SourceHeaders
	}
	return nil
}

func (m *Audit_Message_Request) GetSourceIp() string {
	if m != nil {
		return m.SourceIp
	}
	return ""
}

func (m *Audit_Message_Request) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Audit_Message_Request) Clone() *Audit_Message_Request {
	if m == nil {
		return nil
	}
	cloned := new(Audit_Message_Request)
	*cloned = *m

	cloned.Payload = m.Payload.Clone()
	cloned.SourceHeaders = m.SourceHeaders.Clone()
	return cloned
}

// SourceHeaders holds information about the request's source.
type Audit_Message_Request_SourceHeaders struct {
	// The "X-Forwarded-For" header associated with the request, if it was present.
	XForwardedFor string `protobuf:"bytes,1,opt,name=x_forwarded_for,json=xForwardedFor,proto3" json:"x_forwarded_for,omitempty"`
	// The "Remote-Addr" header associated with the request, if it was present.
	RemoteAddr string `protobuf:"bytes,2,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	// The HTTP request's address. This will always be present, but may not preserve
	// the _actual_ client IP. See source_ip for a more detailed documentation.
	RequestAddr          string   `protobuf:"bytes,3,opt,name=request_addr,json=requestAddr,proto3" json:"request_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audit_Message_Request_SourceHeaders) Reset()         { *m = Audit_Message_Request_SourceHeaders{} }
func (m *Audit_Message_Request_SourceHeaders) String() string { return proto.CompactTextString(m) }
func (*Audit_Message_Request_SourceHeaders) ProtoMessage()    {}
func (*Audit_Message_Request_SourceHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_368902fc694e7fed, []int{0, 0, 0, 0}
}
func (m *Audit_Message_Request_SourceHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audit_Message_Request_SourceHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audit_Message_Request_SourceHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audit_Message_Request_SourceHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audit_Message_Request_SourceHeaders.Merge(m, src)
}
func (m *Audit_Message_Request_SourceHeaders) XXX_Size() int {
	return m.Size()
}
func (m *Audit_Message_Request_SourceHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_Audit_Message_Request_SourceHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_Audit_Message_Request_SourceHeaders proto.InternalMessageInfo

func (m *Audit_Message_Request_SourceHeaders) GetXForwardedFor() string {
	if m != nil {
		return m.XForwardedFor
	}
	return ""
}

func (m *Audit_Message_Request_SourceHeaders) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *Audit_Message_Request_SourceHeaders) GetRequestAddr() string {
	if m != nil {
		return m.RequestAddr
	}
	return ""
}

func (m *Audit_Message_Request_SourceHeaders) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Audit_Message_Request_SourceHeaders) Clone() *Audit_Message_Request_SourceHeaders {
	if m == nil {
		return nil
	}
	cloned := new(Audit_Message_Request_SourceHeaders)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("v1.Audit_RequestStatus", Audit_RequestStatus_name, Audit_RequestStatus_value)
	proto.RegisterEnum("v1.Audit_Interaction", Audit_Interaction_name, Audit_Interaction_value)
	proto.RegisterEnum("v1.Audit_AccessMethod", Audit_AccessMethod_name, Audit_AccessMethod_value)
	proto.RegisterType((*Audit)(nil), "v1.Audit")
	proto.RegisterType((*Audit_Message)(nil), "v1.Audit.Message")
	proto.RegisterType((*Audit_Message_Request)(nil), "v1.Audit.Message.Request")
	proto.RegisterType((*Audit_Message_Request_SourceHeaders)(nil), "v1.Audit.Message.Request.SourceHeaders")
}

func init() { proto.RegisterFile("api/v1/audit.proto", fileDescriptor_368902fc694e7fed) }

var fileDescriptor_368902fc694e7fed = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc7, 0x63, 0x07, 0x12, 0x72, 0x42, 0xc0, 0xcc, 0xbd, 0x80, 0xc9, 0x95, 0x02, 0x37, 0x55,
	0x5b, 0x56, 0x13, 0x05, 0x16, 0xdd, 0x74, 0xe3, 0x26, 0x46, 0xb8, 0x85, 0x40, 0x27, 0xb6, 0x2a,
	0x75, 0x63, 0x0d, 0xf1, 0x10, 0xac, 0x12, 0x8f, 0x3b, 0xe3, 0xa4, 0xa0, 0xbe, 0x48, 0xf7, 0xdd,
	0xf7, 0x39, 0xba, 0xec, 0xae, 0xdb, 0x8a, 0xbe, 0x48, 0xe5, 0xb1, 0x4d, 0x42, 0xab, 0xee, 0xce,
	0xfc, 0xcf, 0xef, 0x7c, 0xce, 0x01, 0x44, 0xe3, 0xb0, 0x33, 0xeb, 0x76, 0xe8, 0x34, 0x08, 0x13,
	0x1c, 0x0b, 0x9e, 0x70, 0xa4, 0xcf, 0xba, 0x4d, 0x24, 0x13, 0x2e, 0xe8, 0x98, 0x75, 0xa6, 0x92,
	0x89, 0x4c, 0x6f, 0xee, 0x8c, 0x39, 0x1f, 0x5f, 0xb3, 0x8e, 0x7a, 0x5d, 0x4c, 0x2f, 0x3b, 0x34,
	0xba, 0xcd, 0x5d, 0xbb, 0xbf, 0xbb, 0x92, 0x70, 0xc2, 0x64, 0x42, 0x27, 0x71, 0x06, 0xb4, 0x3f,
	0x57, 0x61, 0xd9, 0x4a, 0x6b, 0x34, 0xbf, 0x2c, 0x43, 0xf5, 0x94, 0x49, 0x49, 0xc7, 0x0c, 0x61,
	0x58, 0x4a, 0x41, 0x53, 0xdb, 0xd3, 0xf6, 0xeb, 0x07, 0x4d, 0x9c, 0x65, 0xc1, 0x45, 0x16, 0xec,
	0x16, 0x59, 0x88, 0xe2, 0x50, 0x07, 0x2a, 0x32, 0xa1, 0xc9, 0x54, 0x9a, 0xfa, 0x9e, 0xb6, 0xbf,
	0x76, 0xb0, 0x8d, 0x67, 0x5d, 0xac, 0xd2, 0x62, 0xc2, 0xde, 0x4f, 0x99, 0x4c, 0x86, 0xca, 0x4d,
	0x72, 0x0c, 0x3d, 0x82, 0x46, 0x66, 0xf9, 0x82, 0x51, 0xc9, 0x23, 0xb3, 0xbc, 0xa7, 0xed, 0xd7,
	0xc8, 0x6a, 0x26, 0x12, 0xa5, 0xa1, 0xc7, 0xb0, 0x94, 0x4e, 0x69, 0x2e, 0xa9, 0x2e, 0x36, 0x70,
	0x3e, 0x3a, 0xf6, 0x24, 0x13, 0x4e, 0x74, 0xc9, 0x89, 0x72, 0xa3, 0x43, 0xa8, 0x8a, 0xac, 0x88,
	0xb9, 0xac, 0xc8, 0x9d, 0x79, 0xf5, 0x7c, 0xa0, 0xa2, 0x0b, 0x52, 0x90, 0x08, 0x43, 0x65, 0xc2,
	0x92, 0x2b, 0x1e, 0x98, 0x15, 0xd5, 0xf1, 0xd6, 0x3c, 0xc6, 0x1a, 0x8d, 0x98, 0x94, 0xa7, 0xca,
	0x4b, 0x72, 0x0a, 0x3d, 0x83, 0x7a, 0x18, 0x25, 0x4c, 0xd0, 0x51, 0x12, 0xf2, 0xc8, 0xac, 0xaa,
	0xa0, 0xcd, 0x79, 0x90, 0x33, 0x77, 0x92, 0x45, 0xb2, 0xf9, 0x5d, 0x87, 0x6a, 0x5e, 0x1d, 0x35,
	0x61, 0x85, 0x45, 0x41, 0xcc, 0xc3, 0x28, 0x51, 0xab, 0xad, 0x91, 0xfb, 0x37, 0xda, 0xba, 0x6f,
	0x48, 0x57, 0x9e, 0xa2, 0x30, 0x86, 0x6a, 0x4c, 0x6f, 0xaf, 0x39, 0x0d, 0xd4, 0x8e, 0xea, 0x07,
	0xff, 0xfe, 0xf1, 0x1b, 0x56, 0x74, 0x4b, 0x0a, 0x08, 0x0d, 0x60, 0x4d, 0xf2, 0xa9, 0x18, 0x31,
	0xff, 0x8a, 0xd1, 0x80, 0x09, 0x99, 0xaf, 0xef, 0xe9, 0x5f, 0x97, 0x82, 0x87, 0x8a, 0x3f, 0xce,
	0x70, 0xd2, 0x90, 0x8b, 0x4f, 0xf4, 0x1f, 0xd4, 0xf2, 0x7c, 0x61, 0xac, 0xf6, 0x5b, 0x23, 0x2b,
	0x99, 0xe0, 0xc4, 0xcd, 0x8f, 0xd0, 0x78, 0x10, 0x8c, 0x9e, 0xc0, 0xfa, 0x8d, 0x7f, 0xc9, 0xc5,
	0x07, 0x2a, 0x02, 0x16, 0xa4, 0x56, 0x3e, 0x68, 0xe3, 0xe6, 0xa8, 0x50, 0x8f, 0xb8, 0x40, 0xbb,
	0x50, 0x17, 0x6c, 0xc2, 0x13, 0xe6, 0xd3, 0x20, 0x10, 0xf9, 0xc8, 0x90, 0x49, 0x56, 0x10, 0x08,
	0xf4, 0x3f, 0xac, 0xe6, 0x5f, 0x95, 0x11, 0xd9, 0x7d, 0xd4, 0x73, 0x2d, 0x45, 0xda, 0x3e, 0x34,
	0x1e, 0x1c, 0x17, 0x42, 0xb0, 0xe6, 0x0d, 0x5e, 0x0d, 0xce, 0xde, 0x0c, 0xfc, 0xa1, 0x6b, 0xb9,
	0xde, 0xd0, 0x28, 0xa1, 0x4d, 0xd8, 0x20, 0xf6, 0x6b, 0xcf, 0x1e, 0xba, 0xfe, 0xd0, 0xeb, 0xf5,
	0x6c, 0xbb, 0x6f, 0xf7, 0x0d, 0x0d, 0xad, 0x43, 0xdd, 0xf2, 0xdc, 0x63, 0xff, 0xc8, 0x72, 0x4e,
	0xec, 0xbe, 0xa1, 0xa7, 0xb1, 0x05, 0x97, 0x6b, 0xe5, 0xf6, 0x4b, 0xa8, 0x2f, 0x7c, 0x2b, 0xda,
	0x86, 0x7f, 0x8a, 0xf4, 0xce, 0xc0, 0xb5, 0x89, 0xd5, 0x73, 0x9d, 0xb3, 0x81, 0x51, 0x42, 0x00,
	0x95, 0x1e, 0xb1, 0x2d, 0xd7, 0x36, 0xb4, 0xd4, 0xf6, 0xce, 0xfb, 0xa9, 0xad, 0xa7, 0x76, 0xdf,
	0x3e, 0xb1, 0x5d, 0xdb, 0x28, 0xb7, 0x9f, 0xc3, 0xea, 0xe2, 0x5d, 0x2d, 0xf6, 0x7a, 0x6a, 0xbb,
	0xc7, 0x67, 0x7d, 0xa3, 0x84, 0xaa, 0x50, 0xee, 0x9d, 0x38, 0x86, 0x86, 0x2a, 0xa0, 0x7b, 0x8e,
	0xa1, 0xa7, 0x82, 0x75, 0xee, 0x18, 0xe5, 0x17, 0xf8, 0xeb, 0x5d, 0x4b, 0xfb, 0x76, 0xd7, 0xd2,
	0x7e, 0xdc, 0xb5, 0xb4, 0x4f, 0x3f, 0x5b, 0x25, 0x30, 0x43, 0x8e, 0x65, 0x42, 0x47, 0xef, 0x04,
	0xbf, 0xc9, 0x2e, 0x01, 0xd3, 0x38, 0xc4, 0xb3, 0xee, 0x5b, 0x7d, 0xd6, 0xbd, 0xa8, 0x28, 0xe5,
	0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x4b, 0x8c, 0x89, 0x46, 0x04, 0x00, 0x00,
}

func (m *Audit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Audit_Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audit_Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audit_Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interaction != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x38
	}
	if m.Method != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x30
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAudit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAudit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.StatusReason) > 0 {
		i -= len(m.StatusReason)
		copy(dAtA[i:], m.StatusReason)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.StatusReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAudit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Audit_Message_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audit_Message_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audit_Message_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceIp) > 0 {
		i -= len(m.SourceIp)
		copy(dAtA[i:], m.SourceIp)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.SourceIp)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SourceHeaders != nil {
		{
			size, err := m.SourceHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAudit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAudit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Audit_Message_Request_SourceHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audit_Message_Request_SourceHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audit_Message_Request_SourceHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestAddr) > 0 {
		i -= len(m.RequestAddr)
		copy(dAtA[i:], m.RequestAddr)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.RequestAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XForwardedFor) > 0 {
		i -= len(m.XForwardedFor)
		copy(dAtA[i:], m.XForwardedFor)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.XForwardedFor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Audit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Audit_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAudit(uint64(m.Status))
	}
	l = len(m.StatusReason)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovAudit(uint64(m.Method))
	}
	if m.Interaction != 0 {
		n += 1 + sovAudit(uint64(m.Interaction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Audit_Message_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.SourceHeaders != nil {
		l = m.SourceHeaders.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.SourceIp)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Audit_Message_Request_SourceHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XForwardedFor)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.RequestAddr)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAudit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Audit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audit_Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Audit_RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &storage.UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &Audit_Message_Request{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= Audit_AccessMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= Audit_Interaction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audit_Message_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &types.Any{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceHeaders == nil {
				m.SourceHeaders = &Audit_Message_Request_SourceHeaders{}
			}
			if err := m.SourceHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audit_Message_Request_SourceHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XForwardedFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XForwardedFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudit = fmt.Errorf("proto: unexpected end of group")
)
