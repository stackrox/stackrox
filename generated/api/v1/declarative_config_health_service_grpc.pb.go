// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/declarative_config_health_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeclarativeConfigHealthService_GetDeclarativeConfigHealths_FullMethodName = "/v1.DeclarativeConfigHealthService/GetDeclarativeConfigHealths"
)

// DeclarativeConfigHealthServiceClient is the client API for DeclarativeConfigHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeclarativeConfigHealthServiceClient interface {
	GetDeclarativeConfigHealths(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDeclarativeConfigHealthsResponse, error)
}

type declarativeConfigHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeclarativeConfigHealthServiceClient(cc grpc.ClientConnInterface) DeclarativeConfigHealthServiceClient {
	return &declarativeConfigHealthServiceClient{cc}
}

func (c *declarativeConfigHealthServiceClient) GetDeclarativeConfigHealths(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDeclarativeConfigHealthsResponse, error) {
	out := new(GetDeclarativeConfigHealthsResponse)
	err := c.cc.Invoke(ctx, DeclarativeConfigHealthService_GetDeclarativeConfigHealths_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeclarativeConfigHealthServiceServer is the server API for DeclarativeConfigHealthService service.
// All implementations should embed UnimplementedDeclarativeConfigHealthServiceServer
// for forward compatibility
type DeclarativeConfigHealthServiceServer interface {
	GetDeclarativeConfigHealths(context.Context, *Empty) (*GetDeclarativeConfigHealthsResponse, error)
}

// UnimplementedDeclarativeConfigHealthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeclarativeConfigHealthServiceServer struct {
}

func (UnimplementedDeclarativeConfigHealthServiceServer) GetDeclarativeConfigHealths(context.Context, *Empty) (*GetDeclarativeConfigHealthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeclarativeConfigHealths not implemented")
}

// UnsafeDeclarativeConfigHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeclarativeConfigHealthServiceServer will
// result in compilation errors.
type UnsafeDeclarativeConfigHealthServiceServer interface {
	mustEmbedUnimplementedDeclarativeConfigHealthServiceServer()
}

func RegisterDeclarativeConfigHealthServiceServer(s grpc.ServiceRegistrar, srv DeclarativeConfigHealthServiceServer) {
	s.RegisterService(&DeclarativeConfigHealthService_ServiceDesc, srv)
}

func _DeclarativeConfigHealthService_GetDeclarativeConfigHealths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeclarativeConfigHealthServiceServer).GetDeclarativeConfigHealths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeclarativeConfigHealthService_GetDeclarativeConfigHealths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeclarativeConfigHealthServiceServer).GetDeclarativeConfigHealths(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeclarativeConfigHealthService_ServiceDesc is the grpc.ServiceDesc for DeclarativeConfigHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeclarativeConfigHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DeclarativeConfigHealthService",
	HandlerType: (*DeclarativeConfigHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeclarativeConfigHealths",
			Handler:    _DeclarativeConfigHealthService_GetDeclarativeConfigHealths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/declarative_config_health_service.proto",
}
