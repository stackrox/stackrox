{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/cluster_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cluster-defaults": {
      "get": {
        "operationId": "ClustersService_GetClusterDefaultValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClusterDefaultsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters": {
      "get": {
        "operationId": "ClustersService_GetClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClustersList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "post": {
        "operationId": "ClustersService_PostCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCluster"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters-env/kernel-support-available": {
      "get": {
        "summary": "GetKernelSupportAvailable is deprecated in favor of GetClusterDefaultValues.",
        "operationId": "ClustersService_GetKernelSupportAvailable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KernelSupportAvailableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters/{id}": {
      "get": {
        "operationId": "ClustersService_GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "delete": {
        "operationId": "ClustersService_DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "put": {
        "operationId": "ClustersService_PutCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCluster"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    }
  },
  "definitions": {
    "ClusterHealthStatusHealthStatusLabel": {
      "type": "string",
      "enum": [
        "UNINITIALIZED",
        "UNAVAILABLE",
        "UNHEALTHY",
        "DEGRADED",
        "HEALTHY"
      ],
      "default": "UNINITIALIZED",
      "title": "- UNAVAILABLE: Only collector can have unavailable status"
    },
    "ClusterUpgradeStatusUpgradability": {
      "type": "string",
      "enum": [
        "UNSET",
        "UP_TO_DATE",
        "MANUAL_UPGRADE_REQUIRED",
        "AUTO_UPGRADE_POSSIBLE",
        "SENSOR_VERSION_HIGHER"
      ],
      "default": "UNSET",
      "description": " - SENSOR_VERSION_HIGHER: SENSOR_VERSION_HIGHER occurs when we detect that the sensor\nis running a newer version than this Central. This is unexpected,\nbut can occur depending on the patches a customer does.\nIn this case, we will NOT automatically \"upgrade\" the sensor,\nsince that would be a downgrade, even if the autoupgrade setting is\non. The user will be allowed to manually trigger the upgrade, but they are\nstrongly discouraged from doing so without upgrading Central first, since this\nis an unsupported configuration."
    },
    "ClusterUpgradeStatusUpgradeProcessStatus": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        },
        "upgraderImage": {
          "type": "string"
        },
        "initiatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "progress": {
          "$ref": "#/definitions/storageUpgradeProgress"
        },
        "type": {
          "$ref": "#/definitions/UpgradeProcessStatusUpgradeProcessType"
        }
      }
    },
    "UpgradeProcessStatusUpgradeProcessType": {
      "type": "string",
      "enum": [
        "UPGRADE",
        "CERT_ROTATION"
      ],
      "default": "UPGRADE",
      "description": " - UPGRADE: UPGRADE represents a sensor version upgrade.\n - CERT_ROTATION: CERT_ROTATION represents an upgrade process that only rotates the TLS certs\nused by the cluster, without changing anything else."
    },
    "UpgradeProgressUpgradeState": {
      "type": "string",
      "enum": [
        "UPGRADE_INITIALIZING",
        "UPGRADER_LAUNCHING",
        "UPGRADER_LAUNCHED",
        "PRE_FLIGHT_CHECKS_COMPLETE",
        "UPGRADE_OPERATIONS_DONE",
        "UPGRADE_COMPLETE",
        "UPGRADE_INITIALIZATION_ERROR",
        "PRE_FLIGHT_CHECKS_FAILED",
        "UPGRADE_ERROR_ROLLING_BACK",
        "UPGRADE_ERROR_ROLLED_BACK",
        "UPGRADE_ERROR_ROLLBACK_FAILED",
        "UPGRADE_ERROR_UNKNOWN",
        "UPGRADE_TIMED_OUT"
      ],
      "default": "UPGRADE_INITIALIZING",
      "description": " - UPGRADER_LAUNCHING: In-progress states.\n - UPGRADE_COMPLETE: The success state.\nPLEASE NUMBER ALL IN-PROGRESS STATES ABOVE THIS\nAND ALL ERROR STATES BELOW THIS.\n - UPGRADE_INITIALIZATION_ERROR: Error states."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageAWSProviderMetadata": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        }
      }
    },
    "storageAdmissionControlHealthInfo": {
      "type": "object",
      "properties": {
        "totalDesiredPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalReadyPods": {
          "type": "integer",
          "format": "int32"
        },
        "statusErrors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of errors that occurred while trying to obtain admission control health info."
        }
      },
      "description": "AdmissionControlHealthInfo carries data about admission control deployment but does not include admission control health status\nderived from this data.\nAggregated admission control health status is not included because it is derived in central and not in the component that\nfirst reports AdmissionControlHealthInfo (sensor)."
    },
    "storageAdmissionControllerConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "scanInline": {
          "type": "boolean"
        },
        "disableBypass": {
          "type": "boolean"
        },
        "enforceOnUpdates": {
          "type": "boolean"
        }
      }
    },
    "storageAuditLogFileState": {
      "type": "object",
      "properties": {
        "collectLogsSince": {
          "type": "string",
          "format": "date-time"
        },
        "lastAuditId": {
          "type": "string"
        }
      },
      "title": "AuditLogFileState tracks the last audit log event timestamp and ID that was collected by Compliance\nFor internal use only"
    },
    "storageAzureProviderMetadata": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "storageCluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/storageClusterType"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mainImage": {
          "type": "string"
        },
        "collectorImage": {
          "type": "string"
        },
        "centralApiEndpoint": {
          "type": "string"
        },
        "runtimeSupport": {
          "type": "boolean"
        },
        "collectionMethod": {
          "$ref": "#/definitions/storageCollectionMethod"
        },
        "admissionController": {
          "type": "boolean"
        },
        "admissionControllerUpdates": {
          "type": "boolean"
        },
        "admissionControllerEvents": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/storageClusterStatus"
        },
        "dynamicConfig": {
          "$ref": "#/definitions/storageDynamicClusterConfig"
        },
        "tolerationsConfig": {
          "$ref": "#/definitions/storageTolerationsConfig"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "healthStatus": {
          "$ref": "#/definitions/storageClusterHealthStatus"
        },
        "slimCollector": {
          "type": "boolean"
        },
        "helmConfig": {
          "$ref": "#/definitions/storageCompleteClusterConfig",
          "description": "The Helm configuration of a cluster is only present in case the cluster is Helm- or Operator-managed."
        },
        "mostRecentSensorId": {
          "$ref": "#/definitions/storageSensorDeploymentIdentification",
          "description": "most_recent_sensor_id is the current or most recent identification of a successfully connected sensor (if any)."
        },
        "auditLogState": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAuditLogFileState"
          },
          "description": "For internal use only."
        },
        "initBundleId": {
          "type": "string"
        },
        "managedBy": {
          "$ref": "#/definitions/storageManagerType"
        }
      }
    },
    "storageClusterCertExpiryStatus": {
      "type": "object",
      "properties": {
        "sensorCertExpiry": {
          "type": "string",
          "format": "date-time"
        },
        "sensorCertNotBefore": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageClusterHealthStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "collectorHealthInfo": {
          "$ref": "#/definitions/storageCollectorHealthInfo"
        },
        "admissionControlHealthInfo": {
          "$ref": "#/definitions/storageAdmissionControlHealthInfo"
        },
        "scannerHealthInfo": {
          "$ref": "#/definitions/storageScannerHealthInfo",
          "description": "scanner_health_info is filled when the scanner is deployed on a secured cluster (so called \"local scanner\").\nPlease do not confuse this with the default scanner deployment on a central cluster."
        },
        "sensorHealthStatus": {
          "$ref": "#/definitions/ClusterHealthStatusHealthStatusLabel",
          "description": "The following _health_status fields provide aggregated health status of the respective components and are assigned by central."
        },
        "collectorHealthStatus": {
          "$ref": "#/definitions/ClusterHealthStatusHealthStatusLabel"
        },
        "overallHealthStatus": {
          "$ref": "#/definitions/ClusterHealthStatusHealthStatusLabel"
        },
        "admissionControlHealthStatus": {
          "$ref": "#/definitions/ClusterHealthStatusHealthStatusLabel"
        },
        "scannerHealthStatus": {
          "$ref": "#/definitions/ClusterHealthStatusHealthStatusLabel"
        },
        "lastContact": {
          "type": "string",
          "format": "date-time",
          "title": "For sensors not having health capability, this will be filled with gRPC connection poll. Otherwise,\nthis timestamp will be updated by central pipeline when message is processed"
        },
        "healthInfoComplete": {
          "type": "boolean",
          "title": "To track cases such as when sensor is healthy, but collector status data is unavailable because the sensor is on an old version"
        }
      }
    },
    "storageClusterMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/storageClusterMetadataType"
        },
        "name": {
          "type": "string",
          "description": "Name represents the name under which the cluster is registered with the\ncloud provider. In case of self managed OpenShift it is the name chosen\nby the OpenShift installer."
        },
        "id": {
          "type": "string",
          "description": "Id represents a unique ID under which the cluster is registered with the\ncloud provider. Not all cluster types have an id. For all OpenShift\nclusters, this is the Red Hat `cluster_id` registered with OCM."
        }
      },
      "description": "ClusterMetadata contains metadata information about the cluster infrastructure."
    },
    "storageClusterMetadataType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AKS",
        "ARO",
        "EKS",
        "GKE",
        "OCP",
        "OSD",
        "ROSA"
      ],
      "default": "UNSPECIFIED"
    },
    "storageClusterStatus": {
      "type": "object",
      "properties": {
        "sensorVersion": {
          "type": "string"
        },
        "DEPRECATEDLastContact": {
          "type": "string",
          "format": "date-time",
          "description": "This field has been deprecated starting release 49.0. Use healthStatus.lastContact instead."
        },
        "providerMetadata": {
          "$ref": "#/definitions/storageProviderMetadata"
        },
        "orchestratorMetadata": {
          "$ref": "#/definitions/storageOrchestratorMetadata"
        },
        "upgradeStatus": {
          "$ref": "#/definitions/storageClusterUpgradeStatus"
        },
        "certExpiryStatus": {
          "$ref": "#/definitions/storageClusterCertExpiryStatus"
        }
      }
    },
    "storageClusterType": {
      "type": "string",
      "enum": [
        "GENERIC_CLUSTER",
        "KUBERNETES_CLUSTER",
        "OPENSHIFT_CLUSTER",
        "OPENSHIFT4_CLUSTER"
      ],
      "default": "GENERIC_CLUSTER"
    },
    "storageClusterUpgradeStatus": {
      "type": "object",
      "properties": {
        "upgradability": {
          "$ref": "#/definitions/ClusterUpgradeStatusUpgradability"
        },
        "upgradabilityStatusReason": {
          "type": "string"
        },
        "mostRecentProcess": {
          "$ref": "#/definitions/ClusterUpgradeStatusUpgradeProcessStatus",
          "description": "The progress of the current or most recent upgrade, if any,\nNote that we don't store any historical data -- the moment\na new upgrade attempt is triggered, we overwrite\ninformation from the previous attempt."
        }
      }
    },
    "storageCollectionMethod": {
      "type": "string",
      "enum": [
        "UNSET_COLLECTION",
        "NO_COLLECTION",
        "KERNEL_MODULE",
        "EBPF",
        "CORE_BPF"
      ],
      "default": "UNSET_COLLECTION"
    },
    "storageCollectorHealthInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "This is the version of the collector deamonset as returned by k8s API"
        },
        "totalDesiredPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalReadyPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalRegisteredNodes": {
          "type": "integer",
          "format": "int32"
        },
        "statusErrors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of errors that occurred while trying to obtain collector health info."
        }
      },
      "description": "CollectorHealthInfo carries data about collector deployment but does not include collector health status derived from this data.\nAggregated collector health status is not included because it is derived in central and not in the component that\nfirst reports CollectorHealthInfo (sensor)."
    },
    "storageCompleteClusterConfig": {
      "type": "object",
      "properties": {
        "dynamicConfig": {
          "$ref": "#/definitions/storageDynamicClusterConfig"
        },
        "staticConfig": {
          "$ref": "#/definitions/storageStaticClusterConfig"
        },
        "configFingerprint": {
          "type": "string"
        },
        "clusterLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Encodes a complete cluster configuration minus ID/Name identifiers\nincluding static and dynamic settings."
    },
    "storageDynamicClusterConfig": {
      "type": "object",
      "properties": {
        "admissionControllerConfig": {
          "$ref": "#/definitions/storageAdmissionControllerConfig"
        },
        "registryOverride": {
          "type": "string"
        },
        "disableAuditLogs": {
          "type": "boolean"
        }
      },
      "description": "The difference between Static and Dynamic cluster config is that Dynamic values are sent over the Central to Sensor gRPC connection. This has the benefit of allowing for \"hot reloading\" of values without restarting Secured cluster components."
    },
    "storageGoogleProviderMetadata": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "clusterName": {
          "type": "string",
          "description": "Deprecated in favor of providerMetadata.cluster.name."
        }
      }
    },
    "storageManagerType": {
      "type": "string",
      "enum": [
        "MANAGER_TYPE_UNKNOWN",
        "MANAGER_TYPE_MANUAL",
        "MANAGER_TYPE_HELM_CHART",
        "MANAGER_TYPE_KUBERNETES_OPERATOR"
      ],
      "default": "MANAGER_TYPE_UNKNOWN"
    },
    "storageOrchestratorMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "openshiftVersion": {
          "type": "string"
        },
        "buildDate": {
          "type": "string",
          "format": "date-time"
        },
        "apiVersions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageProviderMetadata": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "google": {
          "$ref": "#/definitions/storageGoogleProviderMetadata"
        },
        "aws": {
          "$ref": "#/definitions/storageAWSProviderMetadata"
        },
        "azure": {
          "$ref": "#/definitions/storageAzureProviderMetadata"
        },
        "verified": {
          "type": "boolean"
        },
        "cluster": {
          "$ref": "#/definitions/storageClusterMetadata"
        }
      }
    },
    "storageScannerHealthInfo": {
      "type": "object",
      "properties": {
        "totalDesiredAnalyzerPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalReadyAnalyzerPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalDesiredDbPods": {
          "type": "integer",
          "format": "int32"
        },
        "totalReadyDbPods": {
          "type": "integer",
          "format": "int32"
        },
        "statusErrors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of errors that occurred while trying to obtain scanner health info."
        }
      },
      "description": "ScannerHealthInfo represents health info of a scanner instance that is deployed on a secured cluster (so called \"local scanner\").\nWhen the scanner is deployed on a central cluster, the following message is NOT used.\nScannerHealthInfo carries data about scanner deployment but does not include scanner health status\nderived from this data.\nAggregated scanner health status is not included because it is derived in central and not in the component that\nfirst reports ScannerHealthInfo (sensor)."
    },
    "storageSensorDeploymentIdentification": {
      "type": "object",
      "properties": {
        "systemNamespaceId": {
          "type": "string"
        },
        "defaultNamespaceId": {
          "type": "string"
        },
        "appNamespace": {
          "type": "string"
        },
        "appNamespaceId": {
          "type": "string"
        },
        "appServiceaccountId": {
          "type": "string"
        },
        "k8sNodeName": {
          "type": "string"
        }
      },
      "description": "StackRoxDeploymentIdentification aims at uniquely identifying a StackRox Sensor deployment. It is used to determine\nwhether a sensor connection comes from a sensor pod that has restarted or was recreated (possibly after a network\npartition), or from a deployment in a different namespace or cluster."
    },
    "storageStaticClusterConfig": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/storageClusterType"
        },
        "mainImage": {
          "type": "string"
        },
        "centralApiEndpoint": {
          "type": "string"
        },
        "collectionMethod": {
          "$ref": "#/definitions/storageCollectionMethod"
        },
        "collectorImage": {
          "type": "string"
        },
        "admissionController": {
          "type": "boolean"
        },
        "admissionControllerUpdates": {
          "type": "boolean"
        },
        "tolerationsConfig": {
          "$ref": "#/definitions/storageTolerationsConfig"
        },
        "slimCollector": {
          "type": "boolean"
        },
        "admissionControllerEvents": {
          "type": "boolean"
        }
      },
      "description": "The difference between Static and Dynamic cluster config is that Static values are not sent over the Central to Sensor gRPC connection. They are used, for example, to generate manifests that can be used to set up the Secured Cluster's k8s components. They are *not* dynamically reloaded."
    },
    "storageTolerationsConfig": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "storageUpgradeProgress": {
      "type": "object",
      "properties": {
        "upgradeState": {
          "$ref": "#/definitions/UpgradeProgressUpgradeState"
        },
        "upgradeStatusDetail": {
          "type": "string"
        },
        "since": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ClusterDefaultsResponse": {
      "type": "object",
      "properties": {
        "mainImageRepository": {
          "type": "string"
        },
        "collectorImageRepository": {
          "type": "string"
        },
        "kernelSupportAvailable": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterResponse": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/storageCluster"
        },
        "clusterRetentionInfo": {
          "$ref": "#/definitions/v1DecommissionedClusterRetentionInfo"
        }
      }
    },
    "v1ClustersList": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageCluster"
          }
        },
        "clusterIdToRetentionInfo": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1DecommissionedClusterRetentionInfo"
          },
          "title": "Maps 'UNHEALTHY' clusters' IDs to their retention info"
        }
      }
    },
    "v1DecommissionedClusterRetentionInfo": {
      "type": "object",
      "properties": {
        "isExcluded": {
          "type": "boolean",
          "title": "indicates whether a cluster is protected from deletion"
        },
        "daysUntilDeletion": {
          "type": "integer",
          "format": "int32",
          "title": "days after which cluster will be deleted if sensor health remains UNHEALTHY"
        }
      },
      "title": "next available tag: 3"
    },
    "v1Empty": {
      "type": "object"
    },
    "v1KernelSupportAvailableResponse": {
      "type": "object",
      "properties": {
        "kernelSupportAvailable": {
          "type": "boolean"
        }
      }
    }
  }
}
