// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/notification_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Notification type exposes the different types of notifications.
// Currently, the notification type is either generic or contains a log message.
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_GENERIC     NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_LOG_MESSAGE NotificationType = 1
)

var NotificationType_name = map[int32]string{
	0: "NOTIFICATION_TYPE_GENERIC",
	1: "NOTIFICATION_TYPE_LOG_MESSAGE",
}

var NotificationType_value = map[string]int32{
	"NOTIFICATION_TYPE_GENERIC":     0,
	"NOTIFICATION_TYPE_LOG_MESSAGE": 1,
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}

func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a870580de356350, []int{0}
}

// Notification level exposes the different levels which a notification can have.
type NotificationLevel int32

const (
	NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN NotificationLevel = 0
	NotificationLevel_NOTIFICATION_LEVEL_INFO    NotificationLevel = 1
	NotificationLevel_NOTIFICATION_LEVEL_SUCCESS NotificationLevel = 2
	NotificationLevel_NOTIFICATION_LEVEL_WARN    NotificationLevel = 3
	NotificationLevel_NOTIFICATION_LEVEL_DANGER  NotificationLevel = 4
)

var NotificationLevel_name = map[int32]string{
	0: "NOTIFICATION_LEVEL_UNKNOWN",
	1: "NOTIFICATION_LEVEL_INFO",
	2: "NOTIFICATION_LEVEL_SUCCESS",
	3: "NOTIFICATION_LEVEL_WARN",
	4: "NOTIFICATION_LEVEL_DANGER",
}

var NotificationLevel_value = map[string]int32{
	"NOTIFICATION_LEVEL_UNKNOWN": 0,
	"NOTIFICATION_LEVEL_INFO":    1,
	"NOTIFICATION_LEVEL_SUCCESS": 2,
	"NOTIFICATION_LEVEL_WARN":    3,
	"NOTIFICATION_LEVEL_DANGER":  4,
}

func (x NotificationLevel) String() string {
	return proto.EnumName(NotificationLevel_name, int32(x))
}

func (NotificationLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a870580de356350, []int{1}
}

type NotificationsResponse struct {
	Notifications        []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Pagination           *Pagination     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotificationsResponse) Reset()         { *m = NotificationsResponse{} }
func (m *NotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*NotificationsResponse) ProtoMessage()    {}
func (*NotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a870580de356350, []int{0}
}
func (m *NotificationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationsResponse.Merge(m, src)
}
func (m *NotificationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotificationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationsResponse proto.InternalMessageInfo

func (m *NotificationsResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *NotificationsResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *NotificationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NotificationsResponse) Clone() *NotificationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(NotificationsResponse)
	*cloned = *m

	if m.Notifications != nil {
		cloned.Notifications = make([]*Notification, len(m.Notifications))
		for idx, v := range m.Notifications {
			cloned.Notifications[idx] = v.Clone()
		}
	}
	cloned.Pagination = m.Pagination.Clone()
	return cloned
}

type GetNotificationsRequest struct {
	// For filtering notifications starting from a specific timestamp, i.e. the lower boundary.
	From *types.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// For filtering notifications up until a specific timestamp, i.e. the upper boundary.
	Until *types.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	// For filtering notifications from a specific domain.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// For filtering notifications associated with a specific resource type.
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// For filtering notifications based on their type.
	NotificationType NotificationType `protobuf:"varint,5,opt,name=notification_type,json=notificationType,proto3,enum=v1.NotificationType" json:"notification_type,omitempty"`
	// For filtering notifications based on their level.
	Level                NotificationLevel `protobuf:"varint,6,opt,name=level,proto3,enum=v1.NotificationLevel" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetNotificationsRequest) Reset()         { *m = GetNotificationsRequest{} }
func (m *GetNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNotificationsRequest) ProtoMessage()    {}
func (*GetNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a870580de356350, []int{1}
}
func (m *GetNotificationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNotificationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNotificationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNotificationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNotificationsRequest.Merge(m, src)
}
func (m *GetNotificationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNotificationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNotificationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNotificationsRequest proto.InternalMessageInfo

func (m *GetNotificationsRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GetNotificationsRequest) GetUntil() *types.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

func (m *GetNotificationsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetNotificationsRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *GetNotificationsRequest) GetNotificationType() NotificationType {
	if m != nil {
		return m.NotificationType
	}
	return NotificationType_NOTIFICATION_TYPE_GENERIC
}

func (m *GetNotificationsRequest) GetLevel() NotificationLevel {
	if m != nil {
		return m.Level
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

func (m *GetNotificationsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNotificationsRequest) Clone() *GetNotificationsRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNotificationsRequest)
	*cloned = *m

	cloned.From = m.From.Clone()
	cloned.Until = m.Until.Clone()
	return cloned
}

// Notifications are emitted by Central. They are used to create transparency for users
// for asynchronous, background tasks.
// Currently, notifications only cover logs emitted by Central.
type Notification struct {
	// UUID of the notification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the notification.
	Type NotificationType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.NotificationType" json:"type,omitempty"`
	// Level associated with the notification. The level is categorized into danger, warn, info,
	// success.
	Level NotificationLevel `protobuf:"varint,3,opt,name=level,proto3,enum=v1.NotificationLevel" json:"level,omitempty"`
	// Message associated with the notification. The message may include detailed information
	// for this particular notification.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Hint associated with the notification. The hint may include different information based
	// on the type of notification. It can include instructions to resolve a notification, or
	// informational hints.
	Hint string `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	// Domain associated with the notification. A notification's domain outlines the feature domain where
	// the notification was created from. As an example, this might be "Image Scanning".
	// In case of notifications that cannot be tied to a specific domain, this will be "General".
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// Resource type associated with the notification. A notification may refer to an underlying resource
	// such as a particular image. In that case, the resource type will be filled here.
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Resource ID associated with the notification. If a notification refers to an underlying resource,
	// the resource ID identifies the underlying resource.
	ResourceId string `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Occurrences associated with the notification. Notifications may occur multiple times, the occurrences
	// will track the amount.
	Occurrences int64 `protobuf:"varint,9,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Specifies the time the notification has last occurred.
	LastOccurred *types.Timestamp `protobuf:"bytes,10,opt,name=last_occurred,json=lastOccurred,proto3" json:"last_occurred,omitempty"`
	// Specifies the time the notification has been created.
	CreatedAt            *types.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a870580de356350, []int{2}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetType() NotificationType {
	if m != nil {
		return m.Type
	}
	return NotificationType_NOTIFICATION_TYPE_GENERIC
}

func (m *Notification) GetLevel() NotificationLevel {
	if m != nil {
		return m.Level
	}
	return NotificationLevel_NOTIFICATION_LEVEL_UNKNOWN
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *Notification) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Notification) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *Notification) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *Notification) GetOccurrences() int64 {
	if m != nil {
		return m.Occurrences
	}
	return 0
}

func (m *Notification) GetLastOccurred() *types.Timestamp {
	if m != nil {
		return m.LastOccurred
	}
	return nil
}

func (m *Notification) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Notification) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Notification) Clone() *Notification {
	if m == nil {
		return nil
	}
	cloned := new(Notification)
	*cloned = *m

	cloned.LastOccurred = m.LastOccurred.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

func init() {
	proto.RegisterEnum("v1.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterEnum("v1.NotificationLevel", NotificationLevel_name, NotificationLevel_value)
	proto.RegisterType((*NotificationsResponse)(nil), "v1.NotificationsResponse")
	proto.RegisterType((*GetNotificationsRequest)(nil), "v1.GetNotificationsRequest")
	proto.RegisterType((*Notification)(nil), "v1.Notification")
}

func init() { proto.RegisterFile("api/v1/notification_service.proto", fileDescriptor_4a870580de356350) }

var fileDescriptor_4a870580de356350 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x63, 0x27, 0x4d, 0xc9, 0xa4, 0x2d, 0xee, 0x96, 0xb6, 0x6e, 0x4a, 0xd3, 0x34, 0x5c,
	0xa2, 0x22, 0x39, 0x24, 0x48, 0x48, 0x9c, 0x50, 0x9a, 0xba, 0x51, 0x44, 0x70, 0x2a, 0x27, 0xa5,
	0xc0, 0xc5, 0x72, 0xed, 0x6d, 0x58, 0x91, 0x78, 0x8d, 0xbd, 0x89, 0xa8, 0x10, 0x42, 0xe2, 0x15,
	0xb8, 0x70, 0xe3, 0xca, 0x81, 0x07, 0xe1, 0x88, 0xd4, 0x17, 0x40, 0x85, 0x07, 0x41, 0x59, 0x3b,
	0xad, 0xeb, 0xf4, 0xe3, 0xe6, 0x9d, 0xf9, 0xfd, 0x67, 0x67, 0xc6, 0xb3, 0x03, 0x5b, 0xa6, 0x4b,
	0xca, 0xa3, 0x4a, 0xd9, 0xa1, 0x8c, 0x1c, 0x13, 0xcb, 0x64, 0x84, 0x3a, 0x86, 0x8f, 0xbd, 0x11,
	0xb1, 0xb0, 0xe2, 0x7a, 0x94, 0x51, 0x24, 0x8e, 0x2a, 0xb9, 0xfb, 0x3d, 0x4a, 0x7b, 0x7d, 0x5c,
	0x1e, 0xd3, 0xa6, 0xe3, 0x50, 0xc6, 0x41, 0x3f, 0x20, 0x72, 0x4b, 0x61, 0x10, 0x8b, 0x0e, 0x06,
	0xd4, 0x09, 0x8d, 0xab, 0xa1, 0xd1, 0x35, 0x7b, 0xc4, 0xe1, 0x78, 0xe8, 0xd8, 0x0c, 0x63, 0xf1,
	0xd3, 0xd1, 0xf0, 0xb8, 0xcc, 0xc8, 0x00, 0xfb, 0xcc, 0x1c, 0xb8, 0x01, 0x50, 0xfc, 0x0c, 0xcb,
	0x5a, 0x24, 0x1d, 0x5f, 0xc7, 0xbe, 0x4b, 0x1d, 0x1f, 0xa3, 0x27, 0x30, 0x1f, 0xcd, 0xd3, 0x97,
	0x85, 0x42, 0xb2, 0x94, 0xad, 0x4a, 0xca, 0xa8, 0xa2, 0x44, 0x15, 0xfa, 0x65, 0x0c, 0x29, 0x00,
	0x17, 0x59, 0xc8, 0x62, 0x41, 0x28, 0x65, 0xab, 0x0b, 0x63, 0xd1, 0xfe, 0xb9, 0x55, 0x8f, 0x10,
	0xc5, 0x1f, 0x22, 0xac, 0x36, 0x30, 0x8b, 0x25, 0xf1, 0x7e, 0x88, 0x7d, 0x86, 0x14, 0x48, 0x1d,
	0x7b, 0x74, 0x20, 0x0b, 0x3c, 0x4a, 0x4e, 0x09, 0x8a, 0x51, 0x26, 0xc5, 0x28, 0xdd, 0x49, 0x31,
	0x3a, 0xe7, 0xd0, 0x23, 0x98, 0x19, 0x3a, 0x8c, 0xf4, 0xc3, 0x6b, 0x6f, 0x12, 0x04, 0x20, 0x5a,
	0x81, 0xb4, 0x4d, 0x07, 0x26, 0x71, 0xe4, 0x64, 0x41, 0x28, 0x65, 0xf4, 0xf0, 0x84, 0x1e, 0xc0,
	0xbc, 0x87, 0x7d, 0x3a, 0xf4, 0x2c, 0x6c, 0xb0, 0x13, 0x17, 0xcb, 0x29, 0xee, 0x9e, 0x9b, 0x18,
	0xbb, 0x27, 0x2e, 0x46, 0x35, 0x58, 0xbc, 0xf4, 0x2b, 0x39, 0x38, 0x53, 0x10, 0x4a, 0x0b, 0xd5,
	0x7b, 0xf1, 0x36, 0x8d, 0x05, 0xba, 0xe4, 0xc4, 0x2c, 0xe8, 0x21, 0xcc, 0xf4, 0xf1, 0x08, 0xf7,
	0xe5, 0x34, 0x97, 0x2d, 0xc7, 0x65, 0xad, 0xb1, 0x53, 0x0f, 0x98, 0xe2, 0xf7, 0x24, 0xcc, 0x45,
	0x9d, 0x68, 0x01, 0x44, 0x62, 0xf3, 0xee, 0x64, 0x74, 0x91, 0xd8, 0xa8, 0x04, 0x29, 0x9e, 0x83,
	0x78, 0x43, 0x0e, 0x9c, 0xb8, 0xb8, 0x37, 0x79, 0xfb, 0xbd, 0x48, 0x86, 0xd9, 0x01, 0xf6, 0x7d,
	0xb3, 0x37, 0x69, 0xc3, 0xe4, 0x88, 0x10, 0xa4, 0xde, 0x12, 0x87, 0xf1, 0xa2, 0x33, 0x3a, 0xff,
	0x8e, 0xb4, 0x34, 0x7d, 0x73, 0x4b, 0x67, 0xaf, 0x68, 0xe9, 0x26, 0x64, 0xcf, 0x21, 0x62, 0xcb,
	0x77, 0x38, 0x02, 0x13, 0x53, 0xd3, 0x46, 0x05, 0xc8, 0x52, 0xcb, 0x1a, 0x7a, 0x1e, 0x76, 0x2c,
	0xec, 0xcb, 0x99, 0x82, 0x50, 0x4a, 0xea, 0x51, 0x13, 0x7a, 0x06, 0xf3, 0x7d, 0xd3, 0x67, 0x46,
	0x68, 0xb3, 0x65, 0xb8, 0x75, 0x18, 0xe6, 0xc6, 0x82, 0x76, 0xc8, 0xa3, 0xa7, 0x00, 0x96, 0x87,
	0x4d, 0x86, 0x6d, 0xc3, 0x64, 0x72, 0xf6, 0x56, 0x75, 0x26, 0xa4, 0x6b, 0x6c, 0xbb, 0x0b, 0x52,
	0xbc, 0xe1, 0x68, 0x03, 0xd6, 0xb4, 0x76, 0xb7, 0xb9, 0xd7, 0xac, 0xd7, 0xba, 0xcd, 0xb6, 0x66,
	0x74, 0x5f, 0xef, 0xab, 0x46, 0x43, 0xd5, 0x54, 0xbd, 0x59, 0x97, 0x12, 0x68, 0x0b, 0x36, 0xa6,
	0xdd, 0xad, 0x76, 0xc3, 0x78, 0xa1, 0x76, 0x3a, 0xb5, 0x86, 0x2a, 0x09, 0xdb, 0x3f, 0x05, 0x58,
	0x9c, 0xfa, 0x39, 0x28, 0x0f, 0xb9, 0x4b, 0xc2, 0x96, 0xfa, 0x52, 0x6d, 0x19, 0x07, 0xda, 0x73,
	0xad, 0x7d, 0xa8, 0x49, 0x09, 0xb4, 0x0e, 0xab, 0x57, 0xf8, 0x9b, 0xda, 0x5e, 0x5b, 0x12, 0xae,
	0x11, 0x77, 0x0e, 0xea, 0x75, 0xb5, 0xd3, 0x91, 0xc4, 0x6b, 0xc4, 0x87, 0x35, 0x5d, 0x93, 0x92,
	0x53, 0x15, 0x05, 0xce, 0xdd, 0x9a, 0xd6, 0x50, 0x75, 0x29, 0x55, 0x3d, 0x15, 0x60, 0x29, 0x9a,
	0x6e, 0x27, 0xd8, 0x70, 0x08, 0x83, 0x14, 0x7f, 0xe8, 0x68, 0x7d, 0x3c, 0x78, 0xd7, 0x3c, 0xff,
	0xdc, 0x5a, 0x7c, 0x2a, 0xcf, 0xb7, 0x53, 0x71, 0xed, 0xcb, 0xe9, 0xbf, 0xaf, 0xe2, 0x12, 0x5a,
	0x8c, 0xef, 0x53, 0x1f, 0x1d, 0xc0, 0xdd, 0x58, 0x40, 0xc4, 0x97, 0x96, 0x1e, 0x0e, 0xd1, 0xce,
	0x49, 0x73, 0x37, 0x37, 0xb5, 0xc6, 0x8a, 0x79, 0x1e, 0x51, 0x46, 0x2b, 0x53, 0x11, 0xcb, 0x1f,
	0x89, 0xfd, 0x69, 0x47, 0xf9, 0x75, 0x96, 0x17, 0x7e, 0x9f, 0xe5, 0x85, 0x3f, 0x67, 0x79, 0xe1,
	0xdb, 0xdf, 0x7c, 0x02, 0x64, 0x42, 0x15, 0x9f, 0x99, 0xd6, 0x3b, 0x8f, 0x7e, 0x08, 0xe6, 0x42,
	0x31, 0x5d, 0xa2, 0x8c, 0x2a, 0x6f, 0xc4, 0x51, 0xe5, 0x55, 0xe2, 0x28, 0xcd, 0x6d, 0x8f, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc8, 0x55, 0x24, 0xf7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type NotificationServiceClient interface {
	// GetNotifications returns the list of notifications. The events may be filtered by
	// dedicated fields.
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
	// GetNotification retrieves a notification by ID.
	GetNotification(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Notification, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, "/v1.NotificationService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotification(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/v1.NotificationService/GetNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	// GetNotifications returns the list of notifications. The events may be filtered by
	// dedicated fields.
	GetNotifications(context.Context, *GetNotificationsRequest) (*NotificationsResponse, error)
	// GetNotification retrieves a notification by ID.
	GetNotification(context.Context, *ResourceByID) (*Notification, error)
}

// UnimplementedNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (*UnimplementedNotificationServiceServer) GetNotifications(ctx context.Context, req *GetNotificationsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (*UnimplementedNotificationServiceServer) GetNotification(ctx context.Context, req *ResourceByID) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NotificationService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NotificationService/GetNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotification(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationService_GetNotifications_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _NotificationService_GetNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/notification_service.proto",
}

func (m *NotificationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotificationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotificationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNotificationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotificationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNotificationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintNotificationService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if m.NotificationType != 0 {
		i = encodeVarintNotificationService(dAtA, i, uint64(m.NotificationType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Until != nil {
		{
			size, err := m.Until.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotificationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotificationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotificationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LastOccurred != nil {
		{
			size, err := m.LastOccurred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotificationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Occurrences != 0 {
		i = encodeVarintNotificationService(dAtA, i, uint64(m.Occurrences))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintNotificationService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintNotificationService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNotificationService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotificationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotificationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotificationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovNotificationService(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNotificationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.Until != nil {
		l = m.Until.Size()
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.NotificationType != 0 {
		n += 1 + sovNotificationService(uint64(m.NotificationType))
	}
	if m.Level != 0 {
		n += 1 + sovNotificationService(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNotificationService(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovNotificationService(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.Occurrences != 0 {
		n += 1 + sovNotificationService(uint64(m.Occurrences))
	}
	if m.LastOccurred != nil {
		l = m.LastOccurred.Size()
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovNotificationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotificationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotificationService(x uint64) (n int) {
	return sovNotificationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotificationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotificationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotificationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotificationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotificationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotificationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotificationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotificationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Until", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Until == nil {
				m.Until = &types.Timestamp{}
			}
			if err := m.Until.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationType", wireType)
			}
			m.NotificationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationType |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= NotificationLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotificationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotificationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotificationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= NotificationLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occurrences", wireType)
			}
			m.Occurrences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Occurrences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOccurred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastOccurred == nil {
				m.LastOccurred = &types.Timestamp{}
			}
			if err := m.LastOccurred.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotificationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotificationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotificationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotificationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotificationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotificationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotificationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotificationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotificationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotificationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotificationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotificationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotificationService = fmt.Errorf("proto: unexpected end of group")
)
