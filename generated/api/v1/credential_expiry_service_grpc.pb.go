// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/credential_expiry_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CredentialExpiryService_GetCertExpiry_FullMethodName = "/v1.CredentialExpiryService/GetCertExpiry"
)

// CredentialExpiryServiceClient is the client API for CredentialExpiryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialExpiryServiceClient interface {
	// GetCertExpiry returns information related to the expiry component mTLS certificate.
	GetCertExpiry(ctx context.Context, in *GetCertExpiry_Request, opts ...grpc.CallOption) (*GetCertExpiry_Response, error)
}

type credentialExpiryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialExpiryServiceClient(cc grpc.ClientConnInterface) CredentialExpiryServiceClient {
	return &credentialExpiryServiceClient{cc}
}

func (c *credentialExpiryServiceClient) GetCertExpiry(ctx context.Context, in *GetCertExpiry_Request, opts ...grpc.CallOption) (*GetCertExpiry_Response, error) {
	out := new(GetCertExpiry_Response)
	err := c.cc.Invoke(ctx, CredentialExpiryService_GetCertExpiry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialExpiryServiceServer is the server API for CredentialExpiryService service.
// All implementations should embed UnimplementedCredentialExpiryServiceServer
// for forward compatibility
type CredentialExpiryServiceServer interface {
	// GetCertExpiry returns information related to the expiry component mTLS certificate.
	GetCertExpiry(context.Context, *GetCertExpiry_Request) (*GetCertExpiry_Response, error)
}

// UnimplementedCredentialExpiryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCredentialExpiryServiceServer struct {
}

func (UnimplementedCredentialExpiryServiceServer) GetCertExpiry(context.Context, *GetCertExpiry_Request) (*GetCertExpiry_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertExpiry not implemented")
}

// UnsafeCredentialExpiryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialExpiryServiceServer will
// result in compilation errors.
type UnsafeCredentialExpiryServiceServer interface {
	mustEmbedUnimplementedCredentialExpiryServiceServer()
}

func RegisterCredentialExpiryServiceServer(s grpc.ServiceRegistrar, srv CredentialExpiryServiceServer) {
	s.RegisterService(&CredentialExpiryService_ServiceDesc, srv)
}

func _CredentialExpiryService_GetCertExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertExpiry_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialExpiryServiceServer).GetCertExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialExpiryService_GetCertExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialExpiryServiceServer).GetCertExpiry(ctx, req.(*GetCertExpiry_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialExpiryService_ServiceDesc is the grpc.ServiceDesc for CredentialExpiryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialExpiryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CredentialExpiryService",
	HandlerType: (*CredentialExpiryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertExpiry",
			Handler:    _CredentialExpiryService_GetCertExpiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/credential_expiry_service.proto",
}
