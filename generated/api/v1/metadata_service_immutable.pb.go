// Code generated by protoc-gen-go-immutable. DO NOT EDIT.

package v1

import (
	storage "github.com/stackrox/rox/generated/storage"
)

import (
	"iter"
)

// ImmutableMetadata is an immutable interface for Metadata
type ImmutableMetadata interface {
	GetVersion() string
	GetBuildFlavor() string
	GetReleaseBuild() bool
	// Do not use this field. It will always contain "VALID"
	GetLicenseStatus() Metadata_LicenseStatus
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *Metadata
}

// Verify that Metadata implements ImmutableMetadata
var _ ImmutableMetadata = (*Metadata)(nil)

// ImmutableTrustInfo is an immutable interface for TrustInfo
type ImmutableTrustInfo interface {
	// holds the certificate chain held by Central
	GetImmutableCertChain() iter.Seq[[]byte]
	// Sensor challenge string
	GetSensorChallenge() string
	// Central challenge string
	GetCentralChallenge() string
	// additional CA certs configured in Central in DER format
	GetImmutableAdditionalCas() iter.Seq[[]byte]
	// an optional certificate chain, if Central has a secondary CA
	GetImmutableSecondaryCertChain() iter.Seq[[]byte]
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TrustInfo
}

// GetImmutableCertChain implements ImmutableTrustInfo
func (m *TrustInfo) GetImmutableCertChain() iter.Seq[[]byte] {
	return func(yield func([]byte) bool) {
		if m == nil || m.CertChain == nil {
			return
		}
		for _, v := range m.CertChain {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableAdditionalCas implements ImmutableTrustInfo
func (m *TrustInfo) GetImmutableAdditionalCas() iter.Seq[[]byte] {
	return func(yield func([]byte) bool) {
		if m == nil || m.AdditionalCas == nil {
			return
		}
		for _, v := range m.AdditionalCas {
			if !yield(v) {
				return
			}
		}
	}
}

// GetImmutableSecondaryCertChain implements ImmutableTrustInfo
func (m *TrustInfo) GetImmutableSecondaryCertChain() iter.Seq[[]byte] {
	return func(yield func([]byte) bool) {
		if m == nil || m.SecondaryCertChain == nil {
			return
		}
		for _, v := range m.SecondaryCertChain {
			if !yield(v) {
				return
			}
		}
	}
}

// Verify that TrustInfo implements ImmutableTrustInfo
var _ ImmutableTrustInfo = (*TrustInfo)(nil)

// ImmutableTLSChallengeResponse is an immutable interface for TLSChallengeResponse
type ImmutableTLSChallengeResponse interface {
	// signed data which is returned to the caller, is validated against the signature
	GetTrustInfoSerialized() []byte
	// primary signature (by key from TrustInfo.cert_chain[0])
	GetSignature() []byte
	// optional signature by key from TrustInfo.secondary_cert_chain[0].
	GetSignatureSecondaryCa() []byte
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TLSChallengeResponse
}

// Verify that TLSChallengeResponse implements ImmutableTLSChallengeResponse
var _ ImmutableTLSChallengeResponse = (*TLSChallengeResponse)(nil)

// ImmutableTLSChallengeRequest is an immutable interface for TLSChallengeRequest
type ImmutableTLSChallengeRequest interface {
	// generated challenge token by the service asking for TLS certs
	GetChallengeToken() string
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *TLSChallengeRequest
}

// Verify that TLSChallengeRequest implements ImmutableTLSChallengeRequest
var _ ImmutableTLSChallengeRequest = (*TLSChallengeRequest)(nil)

// ImmutableDatabaseStatus is an immutable interface for DatabaseStatus
type ImmutableDatabaseStatus interface {
	// indicates whether or not central can communicate with the database
	GetDatabaseAvailable() bool
	// type of database serving central
	GetDatabaseType() DatabaseStatus_DatabaseType
	// version of the database
	GetDatabaseVersion() string
	GetDatabaseIsExternal() bool
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *DatabaseStatus
}

// Verify that DatabaseStatus implements ImmutableDatabaseStatus
var _ ImmutableDatabaseStatus = (*DatabaseStatus)(nil)

// ImmutableDatabaseBackupStatus is an immutable interface for DatabaseBackupStatus
type ImmutableDatabaseBackupStatus interface {
	GetBackupInfo() *storage.BackupInfo
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *DatabaseBackupStatus
}

// Verify that DatabaseBackupStatus implements ImmutableDatabaseBackupStatus
var _ ImmutableDatabaseBackupStatus = (*DatabaseBackupStatus)(nil)

// ImmutableCentralServicesCapabilities is an immutable interface for CentralServicesCapabilities
type ImmutableCentralServicesCapabilities interface {
	// Ability to use container IAM role for scanning images from Amazon ECR using Scanner deployed as part of Central
	// Services.
	// Note that CapabilityAvailable status does not mean that Scanner container actually has IAM role attached. Such
	// check isn't implemented at the moment and an attempt to use the corresponding setting may lead to errors when
	// the role is not actually there. It's user's responsibility to check the presence of role and integration status
	// when the corresponding setting is enabled.
	GetCentralScanningCanUseContainerIamRoleForEcr() CentralServicesCapabilities_CapabilityStatus
	// Ability to configure and perform Central backups to Amazon S3 or Google Cloud Storage.
	GetCentralCanUseCloudBackupIntegrations() CentralServicesCapabilities_CapabilityStatus
	// Ability to present health of declarative config resources (e.g. auth providers, roles, access scopes, permission
	// sets, notifiers) to the user.
	GetCentralCanDisplayDeclarativeConfigHealth() CentralServicesCapabilities_CapabilityStatus
	// Ability to trigger generation of new certificates
	GetCentralCanUpdateCert() CentralServicesCapabilities_CapabilityStatus
	// Ability to use integration of type acscsEmail
	GetCentralCanUseAcscsEmailIntegration() CentralServicesCapabilities_CapabilityStatus
	// VT proto functions
	SizeVT() int
	MarshalVT() ([]byte, error)
	CloneVT() *CentralServicesCapabilities
}

// Verify that CentralServicesCapabilities implements ImmutableCentralServicesCapabilities
var _ ImmutableCentralServicesCapabilities = (*CentralServicesCapabilities)(nil)
