{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/policy_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "PolicyService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/policies": {
      "get": {
        "summary": "ListPolicies returns the list of policies.",
        "operationId": "PolicyService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "post": {
        "summary": "PostPolicy creates a new security policy in the system.",
        "description": "This endpoint creates a new policy with comprehensive validation. The policy will be\nvalidated before creation and can be tested using the dry-run functionality.\n\n**Key Constraints:**\n- Policy ID must be empty (will be auto-generated)\n- Policy name must be unique across all policies\n- Policy name must be 5-128 characters with no newlines or dollar signs\n- Description must not exceed 800 characters and cannot contain dollar signs\n- At least one lifecycle stage must be specified\n- At least one category must be specified\n- Severity must be set (not UNSET_SEVERITY)\n- Policy sections must contain valid criteria for the specified lifecycle stages\n- Runtime policies must contain at least one runtime criterion\n- Audit log event policies require both KubeResource and KubeAPIVerb criteria\n- Enforcement actions must be compatible with lifecycle stages\n- Notifier IDs must reference existing notifiers\n- Scope and exclusion configurations must be valid\n\n**Validation Levels:**\n- Basic validation: Always performed (field requirements, syntax, etc.)\n- Strict validation: When enableStrictValidation=true, includes additional checks:\n  - Environment variable source restrictions (ROX-5208)\n  - Dockerfile FROM line restrictions\n  - Enhanced field validation\n\n**Lifecycle Stage Requirements:**\n- BUILD: Must contain image-related criteria only\n- DEPLOY: Cannot contain runtime criteria\n- RUNTIME: Must contain at least one runtime criterion (process, network, audit, k8s events)\n\n**Event Source Rules:**\n- Runtime policies with NOT_APPLICABLE event source are invalid\n- Build/Deploy policies with non-NOT_APPLICABLE event source are invalid\n- Audit log event policies cannot have enforcement actions\n- Audit log event policies cannot use label-based scopes or exclusions\n\nReturns the created policy with generated ID, timestamps, and metadata.",
        "operationId": "PolicyService_PostPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policy",
            "description": "The policy configuration to create. Must include all required fields and valid criteria.\n\n**Critical Constraints:**\n- id field MUST be empty (will be auto-generated)\n- name must be unique across all policies\n- policyVersion must be \"1.1\"\n- lifecycleStages must be compatible with policySections criteria\n- enforcement actions must be compatible with lifecycle stages\n- notifier IDs must reference existing notifiers\n- scope and exclusion configurations must be valid\n\n**Policy Section Requirements:**\n- Each section must have a unique sectionName\n- Each policy group must have a valid fieldName and at least one value\n- Field names must be valid for the specified lifecycle stages\n- Values must match the expected format for each field type\n- Boolean operators must be compatible with field requirements\n- Negation must be allowed for the field type\n\n**Runtime Policy Requirements:**\n- Must contain at least one runtime criterion (process, network, audit, k8s events)\n- Runtime criteria must be in separate sections\n- Audit log policies require both KubeResource and KubeAPIVerb criteria\n\n**Enforcement Action Compatibility:**\n- FAIL_BUILD_ENFORCEMENT: BUILD lifecycle only\n- SCALE_TO_ZERO_ENFORCEMENT: DEPLOY lifecycle only\n- UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT: DEPLOY lifecycle only\n- KILL_POD_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_KUBE_REQUEST_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: DEPLOY lifecycle only\n- FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: DEPLOY lifecycle only",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          {
            "name": "enableStrictValidation",
            "description": "When true, performs additional validation checks including:\n- Environment variable source restrictions (ROX-5208)\n  - Only UNSET, RAW, UNKNOWN sources allowed for value checking\n  - SECRET_KEY, CONFIG_MAP_KEY, FIELD, RESOURCE_FIELD sources restricted\n- Dockerfile FROM line restrictions\n- Enhanced field validation and cross-field consistency checks\n- Stricter regex validation for field values\n\n**Environment Variable Restrictions (when enabled):**\n- Valid: \"UNSET=key=value\", \"RAW=key=value\", \"UNKNOWN=key=value\"\n- Valid: \"SECRET_KEY=key=\", \"CONFIG_MAP_KEY=key=\" (empty value only)\n- Invalid: \"SECRET_KEY=key=value\", \"CONFIG_MAP_KEY=key=value\" (with value)\n\nRecommended for development/testing environments. Defaults to false in production.\nWhen enabled, provides detailed error messages for validation failures.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrun": {
      "post": {
        "summary": "DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.",
        "operationId": "PolicyService_DryRunPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob": {
      "post": {
        "operationId": "PolicyService_SubmitDryRunPolicyJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1JobId"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob/{jobId}": {
      "get": {
        "operationId": "PolicyService_QueryDryRunJobStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunJobStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "operationId": "PolicyService_CancelDryRunJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/export": {
      "post": {
        "summary": "ExportPolicies takes a list of policy IDs and returns either the entire list of policies or an error message",
        "operationId": "PolicyService_ExportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageExportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/from-search": {
      "post": {
        "operationId": "PolicyService_PolicyFromSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/import": {
      "post": {
        "summary": "ImportPolicies accepts a list of Policies and returns a list of the policies which could not be imported",
        "operationId": "PolicyService_ImportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/reassess": {
      "post": {
        "summary": "ReassessPolicies reevaluates all the policies.",
        "operationId": "PolicyService_ReassessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "summary": "GetPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "summary": "DeletePolicy removes a policy by ID.",
        "operationId": "PolicyService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "put": {
        "summary": "PutPolicy modifies an existing policy.",
        "operationId": "PolicyService_PutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier generated by the system. Must be empty for new policies.\nFormat: UUID v4, auto-generated during creation",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServicePutPolicyBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "patch": {
        "summary": "PatchPolicy edits an existing policy.",
        "operationId": "PolicyService_PatchPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServicePatchPolicyBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}/mitrevectors": {
      "get": {
        "summary": "GetMitreVectorsForPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicyMitreVectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyMitreVectorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.excludePolicy",
            "description": "If set to true, policy is excluded from the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{policyId}/notifiers": {
      "patch": {
        "summary": "EnableDisablePolicyNotification enables or disables notifications for a policy by ID.",
        "operationId": "PolicyService_EnableDisablePolicyNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServiceEnableDisablePolicyNotificationBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policyCategories": {
      "get": {
        "summary": "GetPolicyCategories returns the policy categories.",
        "operationId": "PolicyService_GetPolicyCategories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyCategoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    }
  },
  "definitions": {
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PolicyServiceEnableDisablePolicyNotificationBody": {
      "type": "object",
      "properties": {
        "notifierIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disable": {
          "type": "boolean"
        }
      }
    },
    "PolicyServicePatchPolicyBody": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "PolicyServicePutPolicyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the policy. Must be unique across all policies.\nValidation: 5-128 characters, no newlines or dollar signs\nPattern: ^[^\\n\\r\\$]{5,128}$"
        },
        "description": {
          "type": "string",
          "title": "Free-form text description of this policy.\nValidation: Max 800 characters, no dollar signs\nPattern: ^[^\\$]{0,800}$"
        },
        "rationale": {
          "type": "string",
          "description": "Business justification for why this policy exists.\nUsed for compliance and audit purposes."
        },
        "remediation": {
          "type": "string",
          "description": "Describes how to remediate a violation of this policy.\nShould be actionable and specific to the policy type."
        },
        "disabled": {
          "type": "boolean",
          "title": "Toggles whether or not this policy will be executing and actively firing alerts.\nDefault: false"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of categories that this policy falls under. Category names must already exist in Central.\nValidation: At least one category required, no duplicates"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          },
          "title": "Describes which policy lifecycle stages this policy applies to. Choices are DEPLOY, BUILD, and RUNTIME.\nValidation: At least one stage required\n- BUILD: Must contain image-related criteria only\n- DEPLOY: Cannot contain runtime criteria\n- RUNTIME: Must contain at least one runtime criterion"
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource",
          "title": "Describes which events should trigger execution of this policy\nValidation Rules:\n- Runtime policies: Cannot be NOT_APPLICABLE\n- Build/Deploy policies: Must be NOT_APPLICABLE\n- Audit log policies: No enforcement actions, no label scopes"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          },
          "title": "Define deployments or images that should be excluded from this policy.\nValidation:\n- Deployment exclusions: Only valid for DEPLOY and RUNTIME lifecycles\n- Image exclusions: Only valid for BUILD lifecycle\n- Must have at least one criteria (name, scope, or image)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          },
          "title": "Defines clusters, namespaces, and deployments that should be included in this policy.\nNo scopes defined includes everything.\nValidation: Must have at least one field populated (cluster, namespace, or label)"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity",
          "description": "Defines how severe a violation from this policy is.\nValidation: Must be set (not UNSET_SEVERITY)\nPossible values are UNSET_SEVERITY, LOW_SEVERITY, MEDIUM_SEVERITY, HIGH_SEVERITY, and CRITICAL_SEVERITY."
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "title": "Lists the enforcement actions to take when a violation from this policy is identified.\nValidation: Must be compatible with lifecycle stages\n- FAIL_BUILD_ENFORCEMENT: BUILD lifecycle only\n- SCALE_TO_ZERO_ENFORCEMENT: DEPLOY lifecycle only\n- UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT: DEPLOY lifecycle only\n- KILL_POD_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_KUBE_REQUEST_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: DEPLOY lifecycle only\n- FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: DEPLOY lifecycle only\n- Audit log policies: No enforcement actions allowed"
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of IDs of the notifiers that should be triggered when a violation from this policy is identified.\nIDs should be in the form of a UUID and are found through the Central API.\nValidation: All notifier IDs must reference existing notifiers"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the policy was last updated. Auto-generated during creation/update."
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string",
          "title": "Policy version. Must be \"1.1\" (current supported version).\nValidation: Only version 1.1 is supported"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          },
          "title": "PolicySections define the violation criteria for this policy.\nValidation Requirements:\n- Each section must have a unique sectionName\n- Each policy group must have a valid fieldName and at least one value\n- Field names must be valid for the specified lifecycle stages\n- Values must match the expected format for each field type\n- Boolean operators must be compatible with field requirements\n- Negation must be allowed for the field type\n- Runtime policies must contain at least one runtime criterion\n- Runtime criteria must be in separate sections\n- Audit log policies require both KubeResource and KubeAPIVerb criteria"
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          },
          "description": "MITRE ATT&CK framework mappings for this policy.\nUsed for threat intelligence and compliance reporting."
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        },
        "source": {
          "$ref": "#/definitions/storagePolicySource"
        }
      },
      "title": "Next tag: 28"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the exclusion. Used for identification and documentation."
        },
        "deployment": {
          "$ref": "#/definitions/storageExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "description": "Expiration timestamp for this exclusion.\nWhen expired, the exclusion is automatically removed."
        }
      }
    },
    "storageExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the deployment to exclude. Optional if scope is provided.\nValidation: Must be provided if scope is not specified"
        },
        "scope": {
          "$ref": "#/definitions/storageScope",
          "title": "Scope-based exclusion criteria. Optional if name is provided.\nValidation: Must be provided if name is not specified\n- Must have at least one field populated (cluster, namespace, or label)\n- For audit log policies: Labels are not permitted"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the image to exclude.\nValidation: Must be non-empty"
        }
      }
    },
    "storageExportPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicy"
          }
        }
      },
      "title": "ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.\nWe do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object"
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageListPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "disabled": {
          "type": "boolean"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "isDefault": {
          "type": "boolean"
        },
        "source": {
          "$ref": "#/definitions/storagePolicySource"
        }
      }
    },
    "storageMitreAttackVector": {
      "type": "object",
      "properties": {
        "tactic": {
          "$ref": "#/definitions/storageMitreTactic"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageMitreTechnique"
          }
        }
      }
    },
    "storageMitreTactic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storageMitreTechnique": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier generated by the system. Must be empty for new policies.\nFormat: UUID v4, auto-generated during creation"
        },
        "name": {
          "type": "string",
          "title": "Name of the policy. Must be unique across all policies.\nValidation: 5-128 characters, no newlines or dollar signs\nPattern: ^[^\\n\\r\\$]{5,128}$"
        },
        "description": {
          "type": "string",
          "title": "Free-form text description of this policy.\nValidation: Max 800 characters, no dollar signs\nPattern: ^[^\\$]{0,800}$"
        },
        "rationale": {
          "type": "string",
          "description": "Business justification for why this policy exists.\nUsed for compliance and audit purposes."
        },
        "remediation": {
          "type": "string",
          "description": "Describes how to remediate a violation of this policy.\nShould be actionable and specific to the policy type."
        },
        "disabled": {
          "type": "boolean",
          "title": "Toggles whether or not this policy will be executing and actively firing alerts.\nDefault: false"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of categories that this policy falls under. Category names must already exist in Central.\nValidation: At least one category required, no duplicates"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          },
          "title": "Describes which policy lifecycle stages this policy applies to. Choices are DEPLOY, BUILD, and RUNTIME.\nValidation: At least one stage required\n- BUILD: Must contain image-related criteria only\n- DEPLOY: Cannot contain runtime criteria\n- RUNTIME: Must contain at least one runtime criterion"
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource",
          "title": "Describes which events should trigger execution of this policy\nValidation Rules:\n- Runtime policies: Cannot be NOT_APPLICABLE\n- Build/Deploy policies: Must be NOT_APPLICABLE\n- Audit log policies: No enforcement actions, no label scopes"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          },
          "title": "Define deployments or images that should be excluded from this policy.\nValidation:\n- Deployment exclusions: Only valid for DEPLOY and RUNTIME lifecycles\n- Image exclusions: Only valid for BUILD lifecycle\n- Must have at least one criteria (name, scope, or image)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          },
          "title": "Defines clusters, namespaces, and deployments that should be included in this policy.\nNo scopes defined includes everything.\nValidation: Must have at least one field populated (cluster, namespace, or label)"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity",
          "description": "Defines how severe a violation from this policy is.\nValidation: Must be set (not UNSET_SEVERITY)\nPossible values are UNSET_SEVERITY, LOW_SEVERITY, MEDIUM_SEVERITY, HIGH_SEVERITY, and CRITICAL_SEVERITY."
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "title": "Lists the enforcement actions to take when a violation from this policy is identified.\nValidation: Must be compatible with lifecycle stages\n- FAIL_BUILD_ENFORCEMENT: BUILD lifecycle only\n- SCALE_TO_ZERO_ENFORCEMENT: DEPLOY lifecycle only\n- UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT: DEPLOY lifecycle only\n- KILL_POD_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_KUBE_REQUEST_ENFORCEMENT: RUNTIME lifecycle only\n- FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: DEPLOY lifecycle only\n- FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: DEPLOY lifecycle only\n- Audit log policies: No enforcement actions allowed"
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of IDs of the notifiers that should be triggered when a violation from this policy is identified.\nIDs should be in the form of a UUID and are found through the Central API.\nValidation: All notifier IDs must reference existing notifiers"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the policy was last updated. Auto-generated during creation/update."
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string",
          "title": "Policy version. Must be \"1.1\" (current supported version).\nValidation: Only version 1.1 is supported"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          },
          "title": "PolicySections define the violation criteria for this policy.\nValidation Requirements:\n- Each section must have a unique sectionName\n- Each policy group must have a valid fieldName and at least one value\n- Field names must be valid for the specified lifecycle stages\n- Values must match the expected format for each field type\n- Boolean operators must be compatible with field requirements\n- Negation must be allowed for the field type\n- Runtime policies must contain at least one runtime criterion\n- Runtime criteria must be in separate sections\n- Audit log policies require both KubeResource and KubeAPIVerb criteria"
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          },
          "description": "MITRE ATT&CK framework mappings for this policy.\nUsed for threat intelligence and compliance reporting."
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        },
        "source": {
          "$ref": "#/definitions/storagePolicySource"
        }
      },
      "title": "Next tag: 28"
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string",
          "title": "Defines which field on a deployment or image this PolicyGroup evaluates.\nSee https://docs.openshift.com/acs/operating/manage-security-policies.html#policy-criteria_manage-security-policies for a complete list of possible values.\nValidation Requirements:\n- Must be a valid field name for the specified lifecycle stages\n- Field must support the specified boolean operator\n- Field must allow negation if negate=true\n- Field must support multiple values if more than one value is provided\n- Some fields have special restrictions (e.g., ImageSignatureVerifiedBy cannot use AND operator)"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator",
          "title": "Determines if the values are combined with an OR or an AND. Defaults to OR.\nValidation: Must be compatible with the field type\n- Some fields only support OR (e.g., ImageSignatureVerifiedBy)\n- Some fields only support single values (operatorsForbidden=true)"
        },
        "negate": {
          "type": "boolean",
          "title": "Determines if the evaluation of this PolicyGroup is negated. Default to false.\nValidation: Must be allowed for the field type\n- Some fields cannot be negated (negationForbidden=true)"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyValue"
          },
          "title": "List of values for the specified field.\nValidation Requirements:\n- Must have at least one value\n- Values must match the expected regex pattern for the field type\n- Some fields only support single values\n- Values must be valid for the field's data type and constraints\n- Environment variable values have special format requirements\n- Dockerfile line values have special restrictions (e.g., no FROM with strict validation)"
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string",
          "description": "Name of the policy section. Must be unique within the policy.\nUsed for organizing policy criteria into logical groups."
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyGroup"
          },
          "title": "The set of policy groups that make up this section. Each group can be considered an individual criterion.\nValidation Requirements:\n- Each group must have a valid fieldName and at least one value\n- Field names must be valid for the specified lifecycle stages\n- Values must match the expected format for each field type\n- Boolean operators must be compatible with field requirements\n- Negation must be allowed for the field type\n- Runtime criteria must be in separate sections\n- Audit log policies require both KubeResource and KubeAPIVerb criteria"
        }
      }
    },
    "storagePolicySource": {
      "type": "string",
      "enum": [
        "IMPERATIVE",
        "DECLARATIVE"
      ],
      "default": "IMPERATIVE"
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "title": "The actual value for the policy criterion.\nValidation: Must match the expected format for the field type\nExamples:\n- CVE: \"CVE-2021-1234\"\n- Image Tag: \"latest\"\n- Environment Variable: \"UNSET=key=value\" or \"SECRET_KEY=key=\"\n- Dockerfile Line: \"ADD=.\" or \"RUN=apt-get update\"\n- Process Name: \"nginx\"\n- Network Flow: \"tcp:80\""
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1DryRunJobStatusResponse": {
      "type": "object",
      "properties": {
        "pending": {
          "type": "boolean"
        },
        "result": {
          "$ref": "#/definitions/v1DryRunResponse"
        }
      }
    },
    "v1DryRunResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DryRunResponseAlert"
          }
        }
      }
    },
    "v1DryRunResponseAlert": {
      "type": "object",
      "properties": {
        "deployment": {
          "type": "string"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1ExportPoliciesRequest": {
      "type": "object",
      "properties": {
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetPolicyMitreVectorsRequestOptions": {
      "type": "object",
      "properties": {
        "excludePolicy": {
          "type": "boolean",
          "description": "If set to true, policy is excluded from the response."
        }
      }
    },
    "v1GetPolicyMitreVectorsResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "vectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageMitreAttackVector"
          }
        }
      }
    },
    "v1ImportPoliciesMetadata": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPoliciesRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ImportPoliciesMetadata"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicy"
          }
        }
      }
    },
    "v1ImportPoliciesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportPolicyResponse"
          }
        },
        "allSucceeded": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPolicyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "duplicateName": {
          "type": "string"
        },
        "validationError": {
          "type": "string"
        }
      }
    },
    "v1ImportPolicyResponse": {
      "type": "object",
      "properties": {
        "succeeded": {
          "type": "boolean"
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportPolicyError"
          }
        }
      }
    },
    "v1JobId": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListPolicy"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1PolicyCategoriesResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyFromSearchRequest": {
      "type": "object",
      "properties": {
        "searchParams": {
          "type": "string"
        }
      }
    },
    "v1PolicyFromSearchResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "alteredSearchTerms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasNestedFields": {
          "type": "boolean"
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    }
  }
}
