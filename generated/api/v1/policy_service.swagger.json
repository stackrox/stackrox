{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/policy_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/policies": {
      "get": {
        "summary": "ListPolicies returns the list of policies.",
        "operationId": "PolicyService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "post": {
        "summary": "PostPolicy creates a new policy.",
        "operationId": "PolicyService_PostPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          {
            "name": "enableStrictValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrun": {
      "post": {
        "summary": "DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.",
        "operationId": "PolicyService_DryRunPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob": {
      "post": {
        "operationId": "PolicyService_SubmitDryRunPolicyJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1JobId"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob/{jobId}": {
      "get": {
        "operationId": "PolicyService_QueryDryRunJobStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunJobStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "operationId": "PolicyService_CancelDryRunJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/export": {
      "post": {
        "summary": "ExportPolicies takes a list of policy IDs and returns either the entire list of policies or an error message",
        "operationId": "PolicyService_ExportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageExportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/from-search": {
      "post": {
        "operationId": "PolicyService_PolicyFromSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/import": {
      "post": {
        "summary": "ImportPolicies accepts a list of Policies and returns a list of the policies which could not be imported",
        "operationId": "PolicyService_ImportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/reassess": {
      "post": {
        "summary": "ReassessPolicies reevaluates all the policies.",
        "operationId": "PolicyService_ReassessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "summary": "GetPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "summary": "DeletePolicy removes a policy by ID.",
        "operationId": "PolicyService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "put": {
        "summary": "PutPolicy modifies an existing policy.",
        "operationId": "PolicyService_PutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "patch": {
        "summary": "PatchPolicy edits an existing policy.",
        "operationId": "PolicyService_PatchPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PatchPolicyRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}/mitrevectors": {
      "get": {
        "summary": "GetMitreVectorsForPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicyMitreVectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyMitreVectorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.excludePolicy",
            "description": "If set to true, policy is excluded from the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{policyId}/notifiers": {
      "patch": {
        "summary": "EnableDisablePolicyNotification enables or disables notifications for a policy by ID.",
        "operationId": "PolicyService_EnableDisablePolicyNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EnableDisablePolicyNotificationRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policyCategories": {
      "get": {
        "summary": "GetPolicyCategories returns the policy categories.",
        "operationId": "PolicyService_GetPolicyCategories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyCategoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policyCategories/{category}": {
      "delete": {
        "summary": "DeletePolicyCategory removes the given policy category.",
        "operationId": "PolicyService_DeletePolicyCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policyCategories/{oldCategory}": {
      "put": {
        "summary": "RenamePolicyCategory renames the given policy category.",
        "operationId": "PolicyService_RenamePolicyCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "oldCategory",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RenamePolicyCategoryRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    }
  },
  "definitions": {
    "EnvironmentConfigEnvVarSource": {
      "type": "string",
      "enum": [
        "UNSET",
        "RAW",
        "SECRET_KEY",
        "CONFIG_MAP_KEY",
        "FIELD",
        "RESOURCE_FIELD",
        "UNKNOWN"
      ],
      "default": "UNSET",
      "title": "For any update to EnvVarSource, please also update 'ui/src/messages/common.js'"
    },
    "GetPolicyMitreVectorsRequestOptions": {
      "type": "object",
      "properties": {
        "excludePolicy": {
          "type": "boolean",
          "description": "If set to true, policy is excluded from the response."
        }
      }
    },
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PortConfigExposureLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "EXTERNAL",
        "NODE",
        "INTERNAL",
        "HOST",
        "ROUTE"
      ],
      "default": "UNSET"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageComparator": {
      "type": "string",
      "enum": [
        "LESS_THAN",
        "LESS_THAN_OR_EQUALS",
        "EQUALS",
        "GREATER_THAN_OR_EQUALS",
        "GREATER_THAN"
      ],
      "default": "LESS_THAN"
    },
    "storageComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "storageDockerfileLineRuleField": {
      "type": "object",
      "properties": {
        "instruction": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageScope"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "storageExportPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicy"
          }
        }
      },
      "title": "ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.\nWe do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object"
    },
    "storageHostMountPolicy": {
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "storageImageNamePolicy": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "storageKeyValuePolicy": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "envVarSource": {
          "$ref": "#/definitions/EnvironmentConfigEnvVarSource"
        }
      }
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageListPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "disabled": {
          "type": "boolean"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "storageMitreAttackVector": {
      "type": "object",
      "properties": {
        "tactic": {
          "$ref": "#/definitions/storageMitreTactic"
        },
        "techniques": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageMitreTechnique"
          }
        }
      }
    },
    "storageMitreTactic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storageMitreTechnique": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storageNumericalPolicy": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/storageComparator"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "storagePermissionLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "NONE",
        "DEFAULT",
        "ELEVATED_IN_NAMESPACE",
        "ELEVATED_CLUSTER_WIDE",
        "CLUSTER_ADMIN"
      ],
      "default": "UNSET",
      "title": "For any update to PermissionLevel, also update:\n- pkg/searchbasedpolicies/builders/k8s_rbac.go\n- ui/src/messages/common.js"
    },
    "storagePermissionPolicy": {
      "type": "object",
      "properties": {
        "permissionLevel": {
          "$ref": "#/definitions/storagePermissionLevel"
        }
      },
      "description": "K8S RBAC Permission level configuration."
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "$ref": "#/definitions/storagePolicyFields"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "whitelists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "exclusions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT\u0026CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "storagePolicyFields": {
      "type": "object",
      "properties": {
        "imageName": {
          "$ref": "#/definitions/storageImageNamePolicy"
        },
        "imageAgeDays": {
          "type": "string",
          "format": "int64"
        },
        "lineRule": {
          "$ref": "#/definitions/storageDockerfileLineRuleField"
        },
        "cvss": {
          "$ref": "#/definitions/storageNumericalPolicy",
          "title": "Scan Metadata"
        },
        "cve": {
          "type": "string"
        },
        "component": {
          "$ref": "#/definitions/storageComponent"
        },
        "scanAgeDays": {
          "type": "string",
          "format": "int64"
        },
        "noScanExists": {
          "type": "boolean"
        },
        "env": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "command": {
          "type": "string"
        },
        "args": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "volumePolicy": {
          "$ref": "#/definitions/storageVolumePolicy"
        },
        "portPolicy": {
          "$ref": "#/definitions/storagePortPolicy"
        },
        "requiredLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "requiredAnnotation": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "disallowedAnnotation": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "privileged": {
          "type": "boolean"
        },
        "dropCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerResourcePolicy": {
          "$ref": "#/definitions/storageResourcePolicy"
        },
        "processPolicy": {
          "$ref": "#/definitions/storageProcessPolicy"
        },
        "readOnlyRootFs": {
          "type": "boolean"
        },
        "fixedBy": {
          "type": "string"
        },
        "portExposurePolicy": {
          "$ref": "#/definitions/storagePortExposurePolicy"
        },
        "permissionPolicy": {
          "$ref": "#/definitions/storagePermissionPolicy"
        },
        "hostMountPolicy": {
          "$ref": "#/definitions/storageHostMountPolicy"
        },
        "whitelistEnabled": {
          "type": "boolean"
        },
        "requiredImageLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        },
        "disallowedImageLabel": {
          "$ref": "#/definitions/storageKeyValuePolicy"
        }
      },
      "title": "Next Available Tag: 29"
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator"
        },
        "negate": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicyValue"
          }
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string"
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicyGroup"
          }
        }
      }
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "storagePortExposurePolicy": {
      "type": "object",
      "properties": {
        "exposureLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortConfigExposureLevel"
          }
        }
      }
    },
    "storagePortPolicy": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "storageProcessPolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "args": {
          "type": "string"
        },
        "ancestor": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "storageResourcePolicy": {
      "type": "object",
      "properties": {
        "cpuResourceRequest": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "cpuResourceLimit": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "memoryResourceRequest": {
          "$ref": "#/definitions/storageNumericalPolicy"
        },
        "memoryResourceLimit": {
          "$ref": "#/definitions/storageNumericalPolicy"
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "storageVolumePolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1DryRunJobStatusResponse": {
      "type": "object",
      "properties": {
        "pending": {
          "type": "boolean"
        },
        "result": {
          "$ref": "#/definitions/v1DryRunResponse"
        }
      }
    },
    "v1DryRunResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DryRunResponseAlert"
          }
        }
      }
    },
    "v1DryRunResponseAlert": {
      "type": "object",
      "properties": {
        "deployment": {
          "type": "string"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1EnableDisablePolicyNotificationRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "notifierIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disable": {
          "type": "boolean"
        }
      }
    },
    "v1ExportPoliciesRequest": {
      "type": "object",
      "properties": {
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetPolicyMitreVectorsResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "vectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageMitreAttackVector"
          }
        }
      }
    },
    "v1ImportPoliciesMetadata": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPoliciesRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ImportPoliciesMetadata"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storagePolicy"
          }
        }
      }
    },
    "v1ImportPoliciesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ImportPolicyResponse"
          }
        },
        "allSucceeded": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPolicyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "duplicateName": {
          "type": "string"
        },
        "validationError": {
          "type": "string"
        }
      }
    },
    "v1ImportPolicyResponse": {
      "type": "object",
      "properties": {
        "succeeded": {
          "type": "boolean"
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ImportPolicyError"
          }
        }
      }
    },
    "v1JobId": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageListPolicy"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        }
      }
    },
    "v1PatchPolicyRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "v1PolicyCategoriesResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyFromSearchRequest": {
      "type": "object",
      "properties": {
        "searchParams": {
          "type": "string"
        }
      }
    },
    "v1PolicyFromSearchResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "alteredSearchTerms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasNestedFields": {
          "type": "boolean"
        }
      }
    },
    "v1RenamePolicyCategoryRequest": {
      "type": "object",
      "properties": {
        "oldCategory": {
          "type": "string"
        },
        "newCategory": {
          "type": "string"
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        }
      }
    }
  }
}
