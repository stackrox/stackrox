// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/v1/db_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBRestoreProcessStatus_State int32

const (
	DBRestoreProcessStatus_UNKNOWN     DBRestoreProcessStatus_State = 0
	DBRestoreProcessStatus_NOT_STARTED DBRestoreProcessStatus_State = 1
	DBRestoreProcessStatus_IN_PROGRESS DBRestoreProcessStatus_State = 2
	DBRestoreProcessStatus_PAUSED      DBRestoreProcessStatus_State = 3
	DBRestoreProcessStatus_COMPLETED   DBRestoreProcessStatus_State = 4 // successful if error is empty, unsuccessful otherwise
)

// Enum value maps for DBRestoreProcessStatus_State.
var (
	DBRestoreProcessStatus_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT_STARTED",
		2: "IN_PROGRESS",
		3: "PAUSED",
		4: "COMPLETED",
	}
	DBRestoreProcessStatus_State_value = map[string]int32{
		"UNKNOWN":     0,
		"NOT_STARTED": 1,
		"IN_PROGRESS": 2,
		"PAUSED":      3,
		"COMPLETED":   4,
	}
)

func (x DBRestoreProcessStatus_State) Enum() *DBRestoreProcessStatus_State {
	p := new(DBRestoreProcessStatus_State)
	*p = x
	return p
}

func (x DBRestoreProcessStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBRestoreProcessStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_db_service_proto_enumTypes[0].Descriptor()
}

func (DBRestoreProcessStatus_State) Type() protoreflect.EnumType {
	return &file_api_v1_db_service_proto_enumTypes[0]
}

func (x DBRestoreProcessStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// The encoding of the file data in the restore body, usually for compression purposes.
type DBExportManifest_EncodingType int32

const (
	DBExportManifest_UNKNOWN       DBExportManifest_EncodingType = 0
	DBExportManifest_UNCOMPREESSED DBExportManifest_EncodingType = 1
	DBExportManifest_DEFLATED      DBExportManifest_EncodingType = 2
)

// Enum value maps for DBExportManifest_EncodingType.
var (
	DBExportManifest_EncodingType_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNCOMPREESSED",
		2: "DEFLATED",
	}
	DBExportManifest_EncodingType_value = map[string]int32{
		"UNKNOWN":       0,
		"UNCOMPREESSED": 1,
		"DEFLATED":      2,
	}
)

func (x DBExportManifest_EncodingType) Enum() *DBExportManifest_EncodingType {
	p := new(DBExportManifest_EncodingType)
	*p = x
	return p
}

func (x DBExportManifest_EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBExportManifest_EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_db_service_proto_enumTypes[1].Descriptor()
}

func (DBExportManifest_EncodingType) Type() protoreflect.EnumType {
	return &file_api_v1_db_service_proto_enumTypes[1]
}

func (x DBExportManifest_EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type DBRestoreRequestHeader struct {
	state                 protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_FormatName *string                               `protobuf:"bytes,1,opt,name=format_name,json=formatName"`
	xxx_hidden_Manifest   *DBExportManifest                     `protobuf:"bytes,2,opt,name=manifest"`
	xxx_hidden_LocalFile  *DBRestoreRequestHeader_LocalFileInfo `protobuf:"bytes,3,opt,name=local_file,json=localFile"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBRestoreRequestHeader) Reset() {
	*x = DBRestoreRequestHeader{}
	mi := &file_api_v1_db_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBRestoreRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreRequestHeader) ProtoMessage() {}

func (x *DBRestoreRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBRestoreRequestHeader) GetFormatName() string {
	if x != nil {
		if x.xxx_hidden_FormatName != nil {
			return *x.xxx_hidden_FormatName
		}
		return ""
	}
	return ""
}

func (x *DBRestoreRequestHeader) GetManifest() *DBExportManifest {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Manifest) {
				protoimpl.X.UnmarshalField(x, 2)
			}
			var rv *DBExportManifest
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Manifest), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreRequestHeader) GetLocalFile() *DBRestoreRequestHeader_LocalFileInfo {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_LocalFile) {
				protoimpl.X.UnmarshalField(x, 3)
			}
			var rv *DBRestoreRequestHeader_LocalFileInfo
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_LocalFile), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreRequestHeader) SetFormatName(v string) {
	x.xxx_hidden_FormatName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *DBRestoreRequestHeader) SetManifest(v *DBExportManifest) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Manifest, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
	}
}

func (x *DBRestoreRequestHeader) SetLocalFile(v *DBRestoreRequestHeader_LocalFileInfo) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_LocalFile, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
	}
}

func (x *DBRestoreRequestHeader) HasFormatName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBRestoreRequestHeader) HasManifest() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBRestoreRequestHeader) HasLocalFile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DBRestoreRequestHeader) ClearFormatName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FormatName = nil
}

func (x *DBRestoreRequestHeader) ClearManifest() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Manifest, (*DBExportManifest)(nil))
}

func (x *DBRestoreRequestHeader) ClearLocalFile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_LocalFile, (*DBRestoreRequestHeader_LocalFileInfo)(nil))
}

type DBRestoreRequestHeader_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the database export format. Mandatory.
	FormatName *string
	// A manifest of all the files in the restore data. The remainder of a restore request body (without the header),
	// independent of the export format, is always a concatenation of all encoded file data, with no separators in
	// between (determined purely by the order and sizes listed in the manifest).
	Manifest *DBExportManifest
	// Information about the local file with which the restore was initiated. Optional.
	LocalFile *DBRestoreRequestHeader_LocalFileInfo
}

func (b0 DBRestoreRequestHeader_builder) Build() *DBRestoreRequestHeader {
	m0 := &DBRestoreRequestHeader{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FormatName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_FormatName = b.FormatName
	}
	if b.Manifest != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Manifest = b.Manifest
	}
	if b.LocalFile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_LocalFile = b.LocalFile
	}
	return m0
}

// The metadata of an ongoing or completed restore process. This is the *static* metadata, which will not change
// (i.e., it is not a status).
type DBRestoreProcessMetadata struct {
	state                         protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id                 *string                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Header             *DBRestoreRequestHeader `protobuf:"bytes,2,opt,name=header"`
	xxx_hidden_StartTime          *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=start_time,json=startTime"`
	xxx_hidden_InitiatingUserName *string                 `protobuf:"bytes,4,opt,name=initiating_user_name,json=initiatingUserName"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBRestoreProcessMetadata) Reset() {
	*x = DBRestoreProcessMetadata{}
	mi := &file_api_v1_db_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBRestoreProcessMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessMetadata) ProtoMessage() {}

func (x *DBRestoreProcessMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBRestoreProcessMetadata) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *DBRestoreProcessMetadata) GetHeader() *DBRestoreRequestHeader {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Header) {
				protoimpl.X.UnmarshalField(x, 2)
			}
			var rv *DBRestoreRequestHeader
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Header), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreProcessMetadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_StartTime) {
				protoimpl.X.UnmarshalField(x, 3)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_StartTime), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreProcessMetadata) GetInitiatingUserName() string {
	if x != nil {
		if x.xxx_hidden_InitiatingUserName != nil {
			return *x.xxx_hidden_InitiatingUserName
		}
		return ""
	}
	return ""
}

func (x *DBRestoreProcessMetadata) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *DBRestoreProcessMetadata) SetHeader(v *DBRestoreRequestHeader) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Header, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
	}
}

func (x *DBRestoreProcessMetadata) SetStartTime(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_StartTime, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
	}
}

func (x *DBRestoreProcessMetadata) SetInitiatingUserName(v string) {
	x.xxx_hidden_InitiatingUserName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *DBRestoreProcessMetadata) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBRestoreProcessMetadata) HasHeader() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBRestoreProcessMetadata) HasStartTime() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DBRestoreProcessMetadata) HasInitiatingUserName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DBRestoreProcessMetadata) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *DBRestoreProcessMetadata) ClearHeader() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Header, (*DBRestoreRequestHeader)(nil))
}

func (x *DBRestoreProcessMetadata) ClearStartTime() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_StartTime, (*timestamppb.Timestamp)(nil))
}

func (x *DBRestoreProcessMetadata) ClearInitiatingUserName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_InitiatingUserName = nil
}

type DBRestoreProcessMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An ID identifying the restore process. Auto-assigned.
	Id *string
	// The header with which the restore was initiated.
	Header *DBRestoreRequestHeader
	// The time at which the restore process was started.
	StartTime *timestamppb.Timestamp
	// The user who initiated the database restore process.
	InitiatingUserName *string
}

func (b0 DBRestoreProcessMetadata_builder) Build() *DBRestoreProcessMetadata {
	m0 := &DBRestoreProcessMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = b.Id
	}
	if b.Header != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Header = b.Header
	}
	if b.StartTime != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_StartTime = b.StartTime
	}
	if b.InitiatingUserName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_InitiatingUserName = b.InitiatingUserName
	}
	return m0
}

type DBRestoreProcessStatus struct {
	state                     protoimpl.MessageState             `protogen:"opaque.v1"`
	xxx_hidden_Metadata       *DBRestoreProcessMetadata          `protobuf:"bytes,1,opt,name=metadata"`
	xxx_hidden_AttemptId      *string                            `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId"`
	xxx_hidden_State          DBRestoreProcessStatus_State       `protobuf:"varint,3,opt,name=state,enum=v1.DBRestoreProcessStatus_State"`
	xxx_hidden_ResumeInfo     *DBRestoreProcessStatus_ResumeInfo `protobuf:"bytes,4,opt,name=resume_info,json=resumeInfo"`
	xxx_hidden_Error          *string                            `protobuf:"bytes,5,opt,name=error"`
	xxx_hidden_BytesRead      int64                              `protobuf:"varint,6,opt,name=bytes_read,json=bytesRead"`
	xxx_hidden_FilesProcessed int64                              `protobuf:"varint,7,opt,name=files_processed,json=filesProcessed"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBRestoreProcessStatus) Reset() {
	*x = DBRestoreProcessStatus{}
	mi := &file_api_v1_db_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBRestoreProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessStatus) ProtoMessage() {}

func (x *DBRestoreProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBRestoreProcessStatus) GetMetadata() *DBRestoreProcessMetadata {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Metadata) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *DBRestoreProcessMetadata
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreProcessStatus) GetAttemptId() string {
	if x != nil {
		if x.xxx_hidden_AttemptId != nil {
			return *x.xxx_hidden_AttemptId
		}
		return ""
	}
	return ""
}

func (x *DBRestoreProcessStatus) GetState() DBRestoreProcessStatus_State {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_State
		}
	}
	return DBRestoreProcessStatus_UNKNOWN
}

func (x *DBRestoreProcessStatus) GetResumeInfo() *DBRestoreProcessStatus_ResumeInfo {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_ResumeInfo) {
				protoimpl.X.UnmarshalField(x, 4)
			}
			var rv *DBRestoreProcessStatus_ResumeInfo
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ResumeInfo), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *DBRestoreProcessStatus) GetError() string {
	if x != nil {
		if x.xxx_hidden_Error != nil {
			return *x.xxx_hidden_Error
		}
		return ""
	}
	return ""
}

func (x *DBRestoreProcessStatus) GetBytesRead() int64 {
	if x != nil {
		return x.xxx_hidden_BytesRead
	}
	return 0
}

func (x *DBRestoreProcessStatus) GetFilesProcessed() int64 {
	if x != nil {
		return x.xxx_hidden_FilesProcessed
	}
	return 0
}

func (x *DBRestoreProcessStatus) SetMetadata(v *DBRestoreProcessMetadata) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Metadata, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
	}
}

func (x *DBRestoreProcessStatus) SetAttemptId(v string) {
	x.xxx_hidden_AttemptId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *DBRestoreProcessStatus) SetState(v DBRestoreProcessStatus_State) {
	x.xxx_hidden_State = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *DBRestoreProcessStatus) SetResumeInfo(v *DBRestoreProcessStatus_ResumeInfo) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ResumeInfo, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
	}
}

func (x *DBRestoreProcessStatus) SetError(v string) {
	x.xxx_hidden_Error = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *DBRestoreProcessStatus) SetBytesRead(v int64) {
	x.xxx_hidden_BytesRead = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *DBRestoreProcessStatus) SetFilesProcessed(v int64) {
	x.xxx_hidden_FilesProcessed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *DBRestoreProcessStatus) HasMetadata() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBRestoreProcessStatus) HasAttemptId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBRestoreProcessStatus) HasState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DBRestoreProcessStatus) HasResumeInfo() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DBRestoreProcessStatus) HasError() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *DBRestoreProcessStatus) HasBytesRead() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *DBRestoreProcessStatus) HasFilesProcessed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *DBRestoreProcessStatus) ClearMetadata() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Metadata, (*DBRestoreProcessMetadata)(nil))
}

func (x *DBRestoreProcessStatus) ClearAttemptId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AttemptId = nil
}

func (x *DBRestoreProcessStatus) ClearState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_State = DBRestoreProcessStatus_UNKNOWN
}

func (x *DBRestoreProcessStatus) ClearResumeInfo() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ResumeInfo, (*DBRestoreProcessStatus_ResumeInfo)(nil))
}

func (x *DBRestoreProcessStatus) ClearError() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Error = nil
}

func (x *DBRestoreProcessStatus) ClearBytesRead() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_BytesRead = 0
}

func (x *DBRestoreProcessStatus) ClearFilesProcessed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_FilesProcessed = 0
}

type DBRestoreProcessStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Metadata       *DBRestoreProcessMetadata
	AttemptId      *string
	State          *DBRestoreProcessStatus_State
	ResumeInfo     *DBRestoreProcessStatus_ResumeInfo
	Error          *string
	BytesRead      *int64
	FilesProcessed *int64
}

func (b0 DBRestoreProcessStatus_builder) Build() *DBRestoreProcessStatus {
	m0 := &DBRestoreProcessStatus{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Metadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Metadata = b.Metadata
	}
	if b.AttemptId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_AttemptId = b.AttemptId
	}
	if b.State != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_State = *b.State
	}
	if b.ResumeInfo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ResumeInfo = b.ResumeInfo
	}
	if b.Error != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Error = b.Error
	}
	if b.BytesRead != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_BytesRead = *b.BytesRead
	}
	if b.FilesProcessed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_FilesProcessed = *b.FilesProcessed
	}
	return m0
}

// A DB export manifest describes the file contents of a restore request. To prevent data loss, a manifest is always
// interpreted as binding, i.e., the server must ensure that it will read and make use of every file listed in the
// manifest, otherwise it must reject the request.
type DBExportManifest struct {
	state            protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Files *[]*DBExportManifest_File `protobuf:"bytes,1,rep,name=files"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBExportManifest) Reset() {
	*x = DBExportManifest{}
	mi := &file_api_v1_db_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBExportManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportManifest) ProtoMessage() {}

func (x *DBExportManifest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBExportManifest) GetFiles() []*DBExportManifest_File {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Files) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *[]*DBExportManifest_File
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *DBExportManifest) SetFiles(v []*DBExportManifest_File) {
	var sv *[]*DBExportManifest_File
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*DBExportManifest_File{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

type DBExportManifest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Files []*DBExportManifest_File
}

func (b0 DBExportManifest_builder) Build() *DBExportManifest {
	m0 := &DBExportManifest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Files != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Files = &b.Files
	}
	return m0
}

// DBExportFormat describes a format (= a collection of files) for the database export.
type DBExportFormat struct {
	state                 protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_FormatName *string                 `protobuf:"bytes,1,opt,name=format_name,json=formatName"`
	xxx_hidden_Files      *[]*DBExportFormat_File `protobuf:"bytes,2,rep,name=files"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBExportFormat) Reset() {
	*x = DBExportFormat{}
	mi := &file_api_v1_db_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBExportFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportFormat) ProtoMessage() {}

func (x *DBExportFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBExportFormat) GetFormatName() string {
	if x != nil {
		if x.xxx_hidden_FormatName != nil {
			return *x.xxx_hidden_FormatName
		}
		return ""
	}
	return ""
}

func (x *DBExportFormat) GetFiles() []*DBExportFormat_File {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Files) {
				protoimpl.X.UnmarshalField(x, 2)
			}
			var rv *[]*DBExportFormat_File
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *DBExportFormat) SetFormatName(v string) {
	x.xxx_hidden_FormatName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DBExportFormat) SetFiles(v []*DBExportFormat_File) {
	var sv *[]*DBExportFormat_File
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*DBExportFormat_File{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Files), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DBExportFormat) HasFormatName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBExportFormat) ClearFormatName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FormatName = nil
}

type DBExportFormat_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FormatName *string
	Files      []*DBExportFormat_File
}

func (b0 DBExportFormat_builder) Build() *DBExportFormat {
	m0 := &DBExportFormat{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FormatName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_FormatName = b.FormatName
	}
	if b.Files != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Files = &b.Files
	}
	return m0
}

type GetDBExportCapabilitiesResponse struct {
	state                         protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_Formats            *[]*DBExportFormat              `protobuf:"bytes,1,rep,name=formats"`
	xxx_hidden_SupportedEncodings []DBExportManifest_EncodingType `protobuf:"varint,2,rep,packed,name=supported_encodings,json=supportedEncodings,enum=v1.DBExportManifest_EncodingType"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetDBExportCapabilitiesResponse) Reset() {
	*x = GetDBExportCapabilitiesResponse{}
	mi := &file_api_v1_db_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDBExportCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBExportCapabilitiesResponse) ProtoMessage() {}

func (x *GetDBExportCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetDBExportCapabilitiesResponse) GetFormats() []*DBExportFormat {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Formats) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *[]*DBExportFormat
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Formats), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *GetDBExportCapabilitiesResponse) GetSupportedEncodings() []DBExportManifest_EncodingType {
	if x != nil {
		return x.xxx_hidden_SupportedEncodings
	}
	return nil
}

func (x *GetDBExportCapabilitiesResponse) SetFormats(v []*DBExportFormat) {
	var sv *[]*DBExportFormat
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Formats), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*DBExportFormat{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Formats), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *GetDBExportCapabilitiesResponse) SetSupportedEncodings(v []DBExportManifest_EncodingType) {
	x.xxx_hidden_SupportedEncodings = v
}

type GetDBExportCapabilitiesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Formats            []*DBExportFormat
	SupportedEncodings []DBExportManifest_EncodingType
}

func (b0 GetDBExportCapabilitiesResponse_builder) Build() *GetDBExportCapabilitiesResponse {
	m0 := &GetDBExportCapabilitiesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Formats != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Formats = &b.Formats
	}
	x.xxx_hidden_SupportedEncodings = b.SupportedEncodings
	return m0
}

type GetActiveDBRestoreProcessResponse struct {
	state                   protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_ActiveStatus *DBRestoreProcessStatus `protobuf:"bytes,1,opt,name=active_status,json=activeStatus"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetActiveDBRestoreProcessResponse) Reset() {
	*x = GetActiveDBRestoreProcessResponse{}
	mi := &file_api_v1_db_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDBRestoreProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDBRestoreProcessResponse) ProtoMessage() {}

func (x *GetActiveDBRestoreProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetActiveDBRestoreProcessResponse) GetActiveStatus() *DBRestoreProcessStatus {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_ActiveStatus) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *DBRestoreProcessStatus
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ActiveStatus), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *GetActiveDBRestoreProcessResponse) SetActiveStatus(v *DBRestoreProcessStatus) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ActiveStatus, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
	}
}

func (x *GetActiveDBRestoreProcessResponse) HasActiveStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetActiveDBRestoreProcessResponse) ClearActiveStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ActiveStatus, (*DBRestoreProcessStatus)(nil))
}

type GetActiveDBRestoreProcessResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ActiveStatus *DBRestoreProcessStatus
}

func (b0 GetActiveDBRestoreProcessResponse_builder) Build() *GetActiveDBRestoreProcessResponse {
	m0 := &GetActiveDBRestoreProcessResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ActiveStatus != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_ActiveStatus = b.ActiveStatus
	}
	return m0
}

type InterruptDBRestoreProcessRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ProcessId   *string                `protobuf:"bytes,1,opt,name=process_id,json=processId"`
	xxx_hidden_AttemptId   *string                `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InterruptDBRestoreProcessRequest) Reset() {
	*x = InterruptDBRestoreProcessRequest{}
	mi := &file_api_v1_db_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterruptDBRestoreProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDBRestoreProcessRequest) ProtoMessage() {}

func (x *InterruptDBRestoreProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InterruptDBRestoreProcessRequest) GetProcessId() string {
	if x != nil {
		if x.xxx_hidden_ProcessId != nil {
			return *x.xxx_hidden_ProcessId
		}
		return ""
	}
	return ""
}

func (x *InterruptDBRestoreProcessRequest) GetAttemptId() string {
	if x != nil {
		if x.xxx_hidden_AttemptId != nil {
			return *x.xxx_hidden_AttemptId
		}
		return ""
	}
	return ""
}

func (x *InterruptDBRestoreProcessRequest) SetProcessId(v string) {
	x.xxx_hidden_ProcessId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *InterruptDBRestoreProcessRequest) SetAttemptId(v string) {
	x.xxx_hidden_AttemptId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *InterruptDBRestoreProcessRequest) HasProcessId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *InterruptDBRestoreProcessRequest) HasAttemptId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *InterruptDBRestoreProcessRequest) ClearProcessId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ProcessId = nil
}

func (x *InterruptDBRestoreProcessRequest) ClearAttemptId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AttemptId = nil
}

type InterruptDBRestoreProcessRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProcessId *string
	AttemptId *string
}

func (b0 InterruptDBRestoreProcessRequest_builder) Build() *InterruptDBRestoreProcessRequest {
	m0 := &InterruptDBRestoreProcessRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ProcessId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_ProcessId = b.ProcessId
	}
	if b.AttemptId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_AttemptId = b.AttemptId
	}
	return m0
}

type InterruptDBRestoreProcessResponse struct {
	state                 protoimpl.MessageState             `protogen:"opaque.v1"`
	xxx_hidden_ResumeInfo *DBRestoreProcessStatus_ResumeInfo `protobuf:"bytes,1,opt,name=resume_info,json=resumeInfo"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InterruptDBRestoreProcessResponse) Reset() {
	*x = InterruptDBRestoreProcessResponse{}
	mi := &file_api_v1_db_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterruptDBRestoreProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDBRestoreProcessResponse) ProtoMessage() {}

func (x *InterruptDBRestoreProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InterruptDBRestoreProcessResponse) GetResumeInfo() *DBRestoreProcessStatus_ResumeInfo {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_ResumeInfo) {
				protoimpl.X.UnmarshalField(x, 1)
			}
			var rv *DBRestoreProcessStatus_ResumeInfo
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_ResumeInfo), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *InterruptDBRestoreProcessResponse) SetResumeInfo(v *DBRestoreProcessStatus_ResumeInfo) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ResumeInfo, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
	}
}

func (x *InterruptDBRestoreProcessResponse) HasResumeInfo() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *InterruptDBRestoreProcessResponse) ClearResumeInfo() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_ResumeInfo, (*DBRestoreProcessStatus_ResumeInfo)(nil))
}

type InterruptDBRestoreProcessResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ResumeInfo *DBRestoreProcessStatus_ResumeInfo
}

func (b0 InterruptDBRestoreProcessResponse_builder) Build() *InterruptDBRestoreProcessResponse {
	m0 := &InterruptDBRestoreProcessResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ResumeInfo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_ResumeInfo = b.ResumeInfo
	}
	return m0
}

// LocalFileInfo provides information about the file on the local machine of the user initiating the restore
// process, in order to provide information to other users about ongoing restore processes.
type DBRestoreRequestHeader_LocalFileInfo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path        *string                `protobuf:"bytes,1,opt,name=path"`
	xxx_hidden_BytesSize   int64                  `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBRestoreRequestHeader_LocalFileInfo) Reset() {
	*x = DBRestoreRequestHeader_LocalFileInfo{}
	mi := &file_api_v1_db_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreRequestHeader_LocalFileInfo) ProtoMessage() {}

func (x *DBRestoreRequestHeader_LocalFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) GetPath() string {
	if x != nil {
		if x.xxx_hidden_Path != nil {
			return *x.xxx_hidden_Path
		}
		return ""
	}
	return ""
}

func (x *DBRestoreRequestHeader_LocalFileInfo) GetBytesSize() int64 {
	if x != nil {
		return x.xxx_hidden_BytesSize
	}
	return 0
}

func (x *DBRestoreRequestHeader_LocalFileInfo) SetPath(v string) {
	x.xxx_hidden_Path = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) SetBytesSize(v int64) {
	x.xxx_hidden_BytesSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) HasPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) HasBytesSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBRestoreRequestHeader_LocalFileInfo) ClearPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Path = nil
}

func (x *DBRestoreRequestHeader_LocalFileInfo) ClearBytesSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_BytesSize = 0
}

type DBRestoreRequestHeader_LocalFileInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The full path of the file.
	Path *string
	// The size of the file, in bytes. 0 if unknown.
	BytesSize *int64
}

func (b0 DBRestoreRequestHeader_LocalFileInfo_builder) Build() *DBRestoreRequestHeader_LocalFileInfo {
	m0 := &DBRestoreRequestHeader_LocalFileInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Path != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Path = b.Path
	}
	if b.BytesSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_BytesSize = *b.BytesSize
	}
	return m0
}

type DBRestoreProcessStatus_ResumeInfo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pos         int64                  `protobuf:"varint,1,opt,name=pos"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBRestoreProcessStatus_ResumeInfo) Reset() {
	*x = DBRestoreProcessStatus_ResumeInfo{}
	mi := &file_api_v1_db_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBRestoreProcessStatus_ResumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessStatus_ResumeInfo) ProtoMessage() {}

func (x *DBRestoreProcessStatus_ResumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBRestoreProcessStatus_ResumeInfo) GetPos() int64 {
	if x != nil {
		return x.xxx_hidden_Pos
	}
	return 0
}

func (x *DBRestoreProcessStatus_ResumeInfo) SetPos(v int64) {
	x.xxx_hidden_Pos = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *DBRestoreProcessStatus_ResumeInfo) HasPos() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBRestoreProcessStatus_ResumeInfo) ClearPos() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Pos = 0
}

type DBRestoreProcessStatus_ResumeInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Pos *int64
}

func (b0 DBRestoreProcessStatus_ResumeInfo_builder) Build() *DBRestoreProcessStatus_ResumeInfo {
	m0 := &DBRestoreProcessStatus_ResumeInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Pos != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Pos = *b.Pos
	}
	return m0
}

// A single file in the restore body.
type DBExportManifest_File struct {
	state                   protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Name         *string                       `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Encoding     DBExportManifest_EncodingType `protobuf:"varint,2,opt,name=encoding,enum=v1.DBExportManifest_EncodingType"`
	xxx_hidden_EncodedSize  int64                         `protobuf:"varint,3,opt,name=encoded_size,json=encodedSize"`
	xxx_hidden_DecodedSize  int64                         `protobuf:"varint,4,opt,name=decoded_size,json=decodedSize"`
	xxx_hidden_DecodedCrc32 uint32                        `protobuf:"fixed32,5,opt,name=decoded_crc32,json=decodedCrc32"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DBExportManifest_File) Reset() {
	*x = DBExportManifest_File{}
	mi := &file_api_v1_db_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBExportManifest_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportManifest_File) ProtoMessage() {}

func (x *DBExportManifest_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBExportManifest_File) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *DBExportManifest_File) GetEncoding() DBExportManifest_EncodingType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Encoding
		}
	}
	return DBExportManifest_UNKNOWN
}

func (x *DBExportManifest_File) GetEncodedSize() int64 {
	if x != nil {
		return x.xxx_hidden_EncodedSize
	}
	return 0
}

func (x *DBExportManifest_File) GetDecodedSize() int64 {
	if x != nil {
		return x.xxx_hidden_DecodedSize
	}
	return 0
}

func (x *DBExportManifest_File) GetDecodedCrc32() uint32 {
	if x != nil {
		return x.xxx_hidden_DecodedCrc32
	}
	return 0
}

func (x *DBExportManifest_File) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *DBExportManifest_File) SetEncoding(v DBExportManifest_EncodingType) {
	x.xxx_hidden_Encoding = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *DBExportManifest_File) SetEncodedSize(v int64) {
	x.xxx_hidden_EncodedSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *DBExportManifest_File) SetDecodedSize(v int64) {
	x.xxx_hidden_DecodedSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *DBExportManifest_File) SetDecodedCrc32(v uint32) {
	x.xxx_hidden_DecodedCrc32 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *DBExportManifest_File) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBExportManifest_File) HasEncoding() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBExportManifest_File) HasEncodedSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DBExportManifest_File) HasDecodedSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DBExportManifest_File) HasDecodedCrc32() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *DBExportManifest_File) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *DBExportManifest_File) ClearEncoding() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Encoding = DBExportManifest_UNKNOWN
}

func (x *DBExportManifest_File) ClearEncodedSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_EncodedSize = 0
}

func (x *DBExportManifest_File) ClearDecodedSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_DecodedSize = 0
}

func (x *DBExportManifest_File) ClearDecodedCrc32() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_DecodedCrc32 = 0
}

type DBExportManifest_File_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The name of the file. This may or may not be a (relative) file path and up to the server to interpret.
	// For databases exported as ZIP files, this is the path relative to the root of the archive.
	Name        *string
	Encoding    *DBExportManifest_EncodingType
	EncodedSize *int64
	DecodedSize *int64
	// The CRC32 (IEEE) checksum of the decoded(!) data.
	DecodedCrc32 *uint32
}

func (b0 DBExportManifest_File_builder) Build() *DBExportManifest_File {
	m0 := &DBExportManifest_File{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.Encoding != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Encoding = *b.Encoding
	}
	if b.EncodedSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_EncodedSize = *b.EncodedSize
	}
	if b.DecodedSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_DecodedSize = *b.DecodedSize
	}
	if b.DecodedCrc32 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_DecodedCrc32 = *b.DecodedCrc32
	}
	return m0
}

type DBExportFormat_File struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Optional    bool                   `protobuf:"varint,2,opt,name=optional"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DBExportFormat_File) Reset() {
	*x = DBExportFormat_File{}
	mi := &file_api_v1_db_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBExportFormat_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportFormat_File) ProtoMessage() {}

func (x *DBExportFormat_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DBExportFormat_File) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *DBExportFormat_File) GetOptional() bool {
	if x != nil {
		return x.xxx_hidden_Optional
	}
	return false
}

func (x *DBExportFormat_File) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DBExportFormat_File) SetOptional(v bool) {
	x.xxx_hidden_Optional = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DBExportFormat_File) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DBExportFormat_File) HasOptional() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DBExportFormat_File) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *DBExportFormat_File) ClearOptional() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Optional = false
}

type DBExportFormat_File_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name     *string
	Optional *bool
}

func (b0 DBExportFormat_File_builder) Build() *DBExportFormat_File {
	m0 := &DBExportFormat_File{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	if b.Optional != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Optional = *b.Optional
	}
	return m0
}

var File_api_v1_db_service_proto protoreflect.FileDescriptor

const file_api_v1_db_service_proto_rawDesc = "" +
	"\n" +
	"\x17api/v1/db_service.proto\x12\x02v1\x1a\x13api/v1/common.proto\x1a\x12api/v1/empty.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!google/protobuf/go_features.proto\"\x80\x02\n" +
	"\x16DBRestoreRequestHeader\x12\x1f\n" +
	"\vformat_name\x18\x01 \x01(\tR\n" +
	"formatName\x124\n" +
	"\bmanifest\x18\x02 \x01(\v2\x14.v1.DBExportManifestB\x02(\x01R\bmanifest\x12K\n" +
	"\n" +
	"local_file\x18\x03 \x01(\v2(.v1.DBRestoreRequestHeader.LocalFileInfoB\x02(\x01R\tlocalFile\x1aB\n" +
	"\rLocalFileInfo\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"bytes_size\x18\x02 \x01(\x03R\tbytesSize\"\xd3\x01\n" +
	"\x18DBRestoreProcessMetadata\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x126\n" +
	"\x06header\x18\x02 \x01(\v2\x1a.v1.DBRestoreRequestHeaderB\x02(\x01R\x06header\x12=\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tstartTime\x120\n" +
	"\x14initiating_user_name\x18\x04 \x01(\tR\x12initiatingUserName\"\xca\x03\n" +
	"\x16DBRestoreProcessStatus\x12<\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1c.v1.DBRestoreProcessMetadataB\x02(\x01R\bmetadata\x12\x1d\n" +
	"\n" +
	"attempt_id\x18\x02 \x01(\tR\tattemptId\x126\n" +
	"\x05state\x18\x03 \x01(\x0e2 .v1.DBRestoreProcessStatus.StateR\x05state\x12J\n" +
	"\vresume_info\x18\x04 \x01(\v2%.v1.DBRestoreProcessStatus.ResumeInfoB\x02(\x01R\n" +
	"resumeInfo\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12\x1d\n" +
	"\n" +
	"bytes_read\x18\x06 \x01(\x03R\tbytesRead\x12'\n" +
	"\x0ffiles_processed\x18\a \x01(\x03R\x0efilesProcessed\x1a\x1e\n" +
	"\n" +
	"ResumeInfo\x12\x10\n" +
	"\x03pos\x18\x01 \x01(\x03R\x03pos\"Q\n" +
	"\x05State\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0f\n" +
	"\vNOT_STARTED\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x03\x12\r\n" +
	"\tCOMPLETED\x10\x04\"\xcc\x02\n" +
	"\x10DBExportManifest\x123\n" +
	"\x05files\x18\x01 \x03(\v2\x19.v1.DBExportManifest.FileB\x02(\x01R\x05files\x1a\xc4\x01\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12=\n" +
	"\bencoding\x18\x02 \x01(\x0e2!.v1.DBExportManifest.EncodingTypeR\bencoding\x12!\n" +
	"\fencoded_size\x18\x03 \x01(\x03R\vencodedSize\x12!\n" +
	"\fdecoded_size\x18\x04 \x01(\x03R\vdecodedSize\x12#\n" +
	"\rdecoded_crc32\x18\x05 \x01(\aR\fdecodedCrc32\"<\n" +
	"\fEncodingType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x11\n" +
	"\rUNCOMPREESSED\x10\x01\x12\f\n" +
	"\bDEFLATED\x10\x02\"\x9c\x01\n" +
	"\x0eDBExportFormat\x12\x1f\n" +
	"\vformat_name\x18\x01 \x01(\tR\n" +
	"formatName\x121\n" +
	"\x05files\x18\x02 \x03(\v2\x17.v1.DBExportFormat.FileB\x02(\x01R\x05files\x1a6\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\boptional\x18\x02 \x01(\bR\boptional\"\xa7\x01\n" +
	"\x1fGetDBExportCapabilitiesResponse\x120\n" +
	"\aformats\x18\x01 \x03(\v2\x12.v1.DBExportFormatB\x02(\x01R\aformats\x12R\n" +
	"\x13supported_encodings\x18\x02 \x03(\x0e2!.v1.DBExportManifest.EncodingTypeR\x12supportedEncodings\"h\n" +
	"!GetActiveDBRestoreProcessResponse\x12C\n" +
	"\ractive_status\x18\x01 \x01(\v2\x1a.v1.DBRestoreProcessStatusB\x02(\x01R\factiveStatus\"`\n" +
	" InterruptDBRestoreProcessRequest\x12\x1d\n" +
	"\n" +
	"process_id\x18\x01 \x01(\tR\tprocessId\x12\x1d\n" +
	"\n" +
	"attempt_id\x18\x02 \x01(\tR\tattemptId\"o\n" +
	"!InterruptDBRestoreProcessResponse\x12J\n" +
	"\vresume_info\x18\x01 \x01(\v2%.v1.DBRestoreProcessStatus.ResumeInfoB\x02(\x01R\n" +
	"resumeInfo2\xca\x03\n" +
	"\tDBService\x12b\n" +
	"\x15GetExportCapabilities\x12\t.v1.Empty\x1a#.v1.GetDBExportCapabilitiesResponse\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/v1/db/exportcaps\x12c\n" +
	"\x17GetActiveRestoreProcess\x12\t.v1.Empty\x1a%.v1.GetActiveDBRestoreProcessResponse\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/v1/db/restore\x12\xa1\x01\n" +
	"\x17InterruptRestoreProcess\x12$.v1.InterruptDBRestoreProcessRequest\x1a%.v1.InterruptDBRestoreProcessResponse\"9\x82\xd3\xe4\x93\x023\"1/v1/db/interruptrestore/{process_id}/{attempt_id}\x12P\n" +
	"\x14CancelRestoreProcess\x12\x10.v1.ResourceByID\x1a\t.v1.Empty\"\x1b\x82\xd3\xe4\x93\x02\x15*\x13/v1/db/restore/{id}B/\n" +
	"\x18io.stackrox.proto.api.v1Z\v./api/v1;v1\x92\x03\x05\xd2>\x02\x10\x03X\x02b\beditionsp\xe8\a"

var file_api_v1_db_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1_db_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_v1_db_service_proto_goTypes = []any{
	(DBRestoreProcessStatus_State)(0),            // 0: v1.DBRestoreProcessStatus.State
	(DBExportManifest_EncodingType)(0),           // 1: v1.DBExportManifest.EncodingType
	(*DBRestoreRequestHeader)(nil),               // 2: v1.DBRestoreRequestHeader
	(*DBRestoreProcessMetadata)(nil),             // 3: v1.DBRestoreProcessMetadata
	(*DBRestoreProcessStatus)(nil),               // 4: v1.DBRestoreProcessStatus
	(*DBExportManifest)(nil),                     // 5: v1.DBExportManifest
	(*DBExportFormat)(nil),                       // 6: v1.DBExportFormat
	(*GetDBExportCapabilitiesResponse)(nil),      // 7: v1.GetDBExportCapabilitiesResponse
	(*GetActiveDBRestoreProcessResponse)(nil),    // 8: v1.GetActiveDBRestoreProcessResponse
	(*InterruptDBRestoreProcessRequest)(nil),     // 9: v1.InterruptDBRestoreProcessRequest
	(*InterruptDBRestoreProcessResponse)(nil),    // 10: v1.InterruptDBRestoreProcessResponse
	(*DBRestoreRequestHeader_LocalFileInfo)(nil), // 11: v1.DBRestoreRequestHeader.LocalFileInfo
	(*DBRestoreProcessStatus_ResumeInfo)(nil),    // 12: v1.DBRestoreProcessStatus.ResumeInfo
	(*DBExportManifest_File)(nil),                // 13: v1.DBExportManifest.File
	(*DBExportFormat_File)(nil),                  // 14: v1.DBExportFormat.File
	(*timestamppb.Timestamp)(nil),                // 15: google.protobuf.Timestamp
	(*Empty)(nil),                                // 16: v1.Empty
	(*ResourceByID)(nil),                         // 17: v1.ResourceByID
}
var file_api_v1_db_service_proto_depIdxs = []int32{
	5,  // 0: v1.DBRestoreRequestHeader.manifest:type_name -> v1.DBExportManifest
	11, // 1: v1.DBRestoreRequestHeader.local_file:type_name -> v1.DBRestoreRequestHeader.LocalFileInfo
	2,  // 2: v1.DBRestoreProcessMetadata.header:type_name -> v1.DBRestoreRequestHeader
	15, // 3: v1.DBRestoreProcessMetadata.start_time:type_name -> google.protobuf.Timestamp
	3,  // 4: v1.DBRestoreProcessStatus.metadata:type_name -> v1.DBRestoreProcessMetadata
	0,  // 5: v1.DBRestoreProcessStatus.state:type_name -> v1.DBRestoreProcessStatus.State
	12, // 6: v1.DBRestoreProcessStatus.resume_info:type_name -> v1.DBRestoreProcessStatus.ResumeInfo
	13, // 7: v1.DBExportManifest.files:type_name -> v1.DBExportManifest.File
	14, // 8: v1.DBExportFormat.files:type_name -> v1.DBExportFormat.File
	6,  // 9: v1.GetDBExportCapabilitiesResponse.formats:type_name -> v1.DBExportFormat
	1,  // 10: v1.GetDBExportCapabilitiesResponse.supported_encodings:type_name -> v1.DBExportManifest.EncodingType
	4,  // 11: v1.GetActiveDBRestoreProcessResponse.active_status:type_name -> v1.DBRestoreProcessStatus
	12, // 12: v1.InterruptDBRestoreProcessResponse.resume_info:type_name -> v1.DBRestoreProcessStatus.ResumeInfo
	1,  // 13: v1.DBExportManifest.File.encoding:type_name -> v1.DBExportManifest.EncodingType
	16, // 14: v1.DBService.GetExportCapabilities:input_type -> v1.Empty
	16, // 15: v1.DBService.GetActiveRestoreProcess:input_type -> v1.Empty
	9,  // 16: v1.DBService.InterruptRestoreProcess:input_type -> v1.InterruptDBRestoreProcessRequest
	17, // 17: v1.DBService.CancelRestoreProcess:input_type -> v1.ResourceByID
	7,  // 18: v1.DBService.GetExportCapabilities:output_type -> v1.GetDBExportCapabilitiesResponse
	8,  // 19: v1.DBService.GetActiveRestoreProcess:output_type -> v1.GetActiveDBRestoreProcessResponse
	10, // 20: v1.DBService.InterruptRestoreProcess:output_type -> v1.InterruptDBRestoreProcessResponse
	16, // 21: v1.DBService.CancelRestoreProcess:output_type -> v1.Empty
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_v1_db_service_proto_init() }
func file_api_v1_db_service_proto_init() {
	if File_api_v1_db_service_proto != nil {
		return
	}
	file_api_v1_common_proto_init()
	file_api_v1_empty_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1_db_service_proto_rawDesc), len(file_api_v1_db_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_db_service_proto_goTypes,
		DependencyIndexes: file_api_v1_db_service_proto_depIdxs,
		EnumInfos:         file_api_v1_db_service_proto_enumTypes,
		MessageInfos:      file_api_v1_db_service_proto_msgTypes,
	}.Build()
	File_api_v1_db_service_proto = out.File
	file_api_v1_db_service_proto_goTypes = nil
	file_api_v1_db_service_proto_depIdxs = nil
}
