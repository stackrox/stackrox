// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: api/v1/db_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBRestoreProcessStatus_State int32

const (
	DBRestoreProcessStatus_UNKNOWN     DBRestoreProcessStatus_State = 0
	DBRestoreProcessStatus_NOT_STARTED DBRestoreProcessStatus_State = 1
	DBRestoreProcessStatus_IN_PROGRESS DBRestoreProcessStatus_State = 2
	DBRestoreProcessStatus_PAUSED      DBRestoreProcessStatus_State = 3
	DBRestoreProcessStatus_COMPLETED   DBRestoreProcessStatus_State = 4 // successful if error is empty, unsuccessful otherwise
)

// Enum value maps for DBRestoreProcessStatus_State.
var (
	DBRestoreProcessStatus_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT_STARTED",
		2: "IN_PROGRESS",
		3: "PAUSED",
		4: "COMPLETED",
	}
	DBRestoreProcessStatus_State_value = map[string]int32{
		"UNKNOWN":     0,
		"NOT_STARTED": 1,
		"IN_PROGRESS": 2,
		"PAUSED":      3,
		"COMPLETED":   4,
	}
)

func (x DBRestoreProcessStatus_State) Enum() *DBRestoreProcessStatus_State {
	p := new(DBRestoreProcessStatus_State)
	*p = x
	return p
}

func (x DBRestoreProcessStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBRestoreProcessStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_db_service_proto_enumTypes[0].Descriptor()
}

func (DBRestoreProcessStatus_State) Type() protoreflect.EnumType {
	return &file_api_v1_db_service_proto_enumTypes[0]
}

func (x DBRestoreProcessStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBRestoreProcessStatus_State.Descriptor instead.
func (DBRestoreProcessStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{2, 0}
}

// The encoding of the file data in the restore body, usually for compression purposes.
type DBExportManifest_EncodingType int32

const (
	DBExportManifest_UNKNOWN       DBExportManifest_EncodingType = 0
	DBExportManifest_UNCOMPREESSED DBExportManifest_EncodingType = 1
	DBExportManifest_DEFLATED      DBExportManifest_EncodingType = 2
)

// Enum value maps for DBExportManifest_EncodingType.
var (
	DBExportManifest_EncodingType_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNCOMPREESSED",
		2: "DEFLATED",
	}
	DBExportManifest_EncodingType_value = map[string]int32{
		"UNKNOWN":       0,
		"UNCOMPREESSED": 1,
		"DEFLATED":      2,
	}
)

func (x DBExportManifest_EncodingType) Enum() *DBExportManifest_EncodingType {
	p := new(DBExportManifest_EncodingType)
	*p = x
	return p
}

func (x DBExportManifest_EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBExportManifest_EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_db_service_proto_enumTypes[1].Descriptor()
}

func (DBExportManifest_EncodingType) Type() protoreflect.EnumType {
	return &file_api_v1_db_service_proto_enumTypes[1]
}

func (x DBExportManifest_EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBExportManifest_EncodingType.Descriptor instead.
func (DBExportManifest_EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{3, 0}
}

type DBRestoreRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the database export format. Mandatory.
	FormatName string `protobuf:"bytes,1,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	// A manifest of all the files in the restore data. The remainder of a restore request body (without the header),
	// independent of the export format, is always a concatenation of all encoded file data, with no separators in
	// between (determined purely by the order and sizes listed in the manifest).
	Manifest *DBExportManifest `protobuf:"bytes,2,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Information about the local file with which the restore was initiated. Optional.
	LocalFile *DBRestoreRequestHeader_LocalFileInfo `protobuf:"bytes,3,opt,name=local_file,json=localFile,proto3" json:"local_file,omitempty"`
}

func (x *DBRestoreRequestHeader) Reset() {
	*x = DBRestoreRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRestoreRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreRequestHeader) ProtoMessage() {}

func (x *DBRestoreRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRestoreRequestHeader.ProtoReflect.Descriptor instead.
func (*DBRestoreRequestHeader) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{0}
}

func (x *DBRestoreRequestHeader) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *DBRestoreRequestHeader) GetManifest() *DBExportManifest {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *DBRestoreRequestHeader) GetLocalFile() *DBRestoreRequestHeader_LocalFileInfo {
	if x != nil {
		return x.LocalFile
	}
	return nil
}

// The metadata of an ongoing or completed restore process. This is the *static* metadata, which will not change
// (i.e., it is not a status).
type DBRestoreProcessMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID identifying the restore process. Auto-assigned.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The header with which the restore was initiated.
	Header *DBRestoreRequestHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// The time at which the restore process was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The user who initiated the database restore process.
	InitiatingUserName string `protobuf:"bytes,4,opt,name=initiating_user_name,json=initiatingUserName,proto3" json:"initiating_user_name,omitempty"`
}

func (x *DBRestoreProcessMetadata) Reset() {
	*x = DBRestoreProcessMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRestoreProcessMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessMetadata) ProtoMessage() {}

func (x *DBRestoreProcessMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRestoreProcessMetadata.ProtoReflect.Descriptor instead.
func (*DBRestoreProcessMetadata) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{1}
}

func (x *DBRestoreProcessMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DBRestoreProcessMetadata) GetHeader() *DBRestoreRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DBRestoreProcessMetadata) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DBRestoreProcessMetadata) GetInitiatingUserName() string {
	if x != nil {
		return x.InitiatingUserName
	}
	return ""
}

type DBRestoreProcessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *DBRestoreProcessMetadata          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	AttemptId      string                             `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	State          DBRestoreProcessStatus_State       `protobuf:"varint,3,opt,name=state,proto3,enum=v1.DBRestoreProcessStatus_State" json:"state,omitempty"`
	ResumeInfo     *DBRestoreProcessStatus_ResumeInfo `protobuf:"bytes,4,opt,name=resume_info,json=resumeInfo,proto3" json:"resume_info,omitempty"`              // only populated if state is PAUSED
	Error          string                             `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                                          // only populated when state is COMPLETED
	BytesRead      int64                              `protobuf:"varint,6,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`                // Payload bytes read so far (approximate)
	FilesProcessed int64                              `protobuf:"varint,7,opt,name=files_processed,json=filesProcessed,proto3" json:"files_processed,omitempty"` // Files processed so far (approximate)
}

func (x *DBRestoreProcessStatus) Reset() {
	*x = DBRestoreProcessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRestoreProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessStatus) ProtoMessage() {}

func (x *DBRestoreProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRestoreProcessStatus.ProtoReflect.Descriptor instead.
func (*DBRestoreProcessStatus) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{2}
}

func (x *DBRestoreProcessStatus) GetMetadata() *DBRestoreProcessMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DBRestoreProcessStatus) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

func (x *DBRestoreProcessStatus) GetState() DBRestoreProcessStatus_State {
	if x != nil {
		return x.State
	}
	return DBRestoreProcessStatus_UNKNOWN
}

func (x *DBRestoreProcessStatus) GetResumeInfo() *DBRestoreProcessStatus_ResumeInfo {
	if x != nil {
		return x.ResumeInfo
	}
	return nil
}

func (x *DBRestoreProcessStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DBRestoreProcessStatus) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *DBRestoreProcessStatus) GetFilesProcessed() int64 {
	if x != nil {
		return x.FilesProcessed
	}
	return 0
}

// A DB export manifest describes the file contents of a restore request. To prevent data loss, a manifest is always
// interpreted as binding, i.e., the server must ensure that it will read and make use of every file listed in the
// manifest, otherwise it must reject the request.
type DBExportManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*DBExportManifest_File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *DBExportManifest) Reset() {
	*x = DBExportManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBExportManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportManifest) ProtoMessage() {}

func (x *DBExportManifest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBExportManifest.ProtoReflect.Descriptor instead.
func (*DBExportManifest) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{3}
}

func (x *DBExportManifest) GetFiles() []*DBExportManifest_File {
	if x != nil {
		return x.Files
	}
	return nil
}

// DBExportFormat describes a format (= a collection of files) for the database export.
type DBExportFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatName string                 `protobuf:"bytes,1,opt,name=format_name,json=formatName,proto3" json:"format_name,omitempty"`
	Files      []*DBExportFormat_File `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *DBExportFormat) Reset() {
	*x = DBExportFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBExportFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportFormat) ProtoMessage() {}

func (x *DBExportFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBExportFormat.ProtoReflect.Descriptor instead.
func (*DBExportFormat) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{4}
}

func (x *DBExportFormat) GetFormatName() string {
	if x != nil {
		return x.FormatName
	}
	return ""
}

func (x *DBExportFormat) GetFiles() []*DBExportFormat_File {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetDBExportCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formats            []*DBExportFormat               `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty"`
	SupportedEncodings []DBExportManifest_EncodingType `protobuf:"varint,2,rep,packed,name=supported_encodings,json=supportedEncodings,proto3,enum=v1.DBExportManifest_EncodingType" json:"supported_encodings,omitempty"`
}

func (x *GetDBExportCapabilitiesResponse) Reset() {
	*x = GetDBExportCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDBExportCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBExportCapabilitiesResponse) ProtoMessage() {}

func (x *GetDBExportCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDBExportCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetDBExportCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetDBExportCapabilitiesResponse) GetFormats() []*DBExportFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GetDBExportCapabilitiesResponse) GetSupportedEncodings() []DBExportManifest_EncodingType {
	if x != nil {
		return x.SupportedEncodings
	}
	return nil
}

type GetActiveDBRestoreProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveStatus *DBRestoreProcessStatus `protobuf:"bytes,1,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
}

func (x *GetActiveDBRestoreProcessResponse) Reset() {
	*x = GetActiveDBRestoreProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveDBRestoreProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDBRestoreProcessResponse) ProtoMessage() {}

func (x *GetActiveDBRestoreProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDBRestoreProcessResponse.ProtoReflect.Descriptor instead.
func (*GetActiveDBRestoreProcessResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetActiveDBRestoreProcessResponse) GetActiveStatus() *DBRestoreProcessStatus {
	if x != nil {
		return x.ActiveStatus
	}
	return nil
}

type InterruptDBRestoreProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId string `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	AttemptId string `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
}

func (x *InterruptDBRestoreProcessRequest) Reset() {
	*x = InterruptDBRestoreProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptDBRestoreProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDBRestoreProcessRequest) ProtoMessage() {}

func (x *InterruptDBRestoreProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptDBRestoreProcessRequest.ProtoReflect.Descriptor instead.
func (*InterruptDBRestoreProcessRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{7}
}

func (x *InterruptDBRestoreProcessRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *InterruptDBRestoreProcessRequest) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

type InterruptDBRestoreProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResumeInfo *DBRestoreProcessStatus_ResumeInfo `protobuf:"bytes,1,opt,name=resume_info,json=resumeInfo,proto3" json:"resume_info,omitempty"`
}

func (x *InterruptDBRestoreProcessResponse) Reset() {
	*x = InterruptDBRestoreProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterruptDBRestoreProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterruptDBRestoreProcessResponse) ProtoMessage() {}

func (x *InterruptDBRestoreProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterruptDBRestoreProcessResponse.ProtoReflect.Descriptor instead.
func (*InterruptDBRestoreProcessResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{8}
}

func (x *InterruptDBRestoreProcessResponse) GetResumeInfo() *DBRestoreProcessStatus_ResumeInfo {
	if x != nil {
		return x.ResumeInfo
	}
	return nil
}

// LocalFileInfo provides information about the file on the local machine of the user initiating the restore
// process, in order to provide information to other users about ongoing restore processes.
type DBRestoreRequestHeader_LocalFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path of the file.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The size of the file, in bytes. 0 if unknown.
	BytesSize int64 `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
}

func (x *DBRestoreRequestHeader_LocalFileInfo) Reset() {
	*x = DBRestoreRequestHeader_LocalFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRestoreRequestHeader_LocalFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreRequestHeader_LocalFileInfo) ProtoMessage() {}

func (x *DBRestoreRequestHeader_LocalFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRestoreRequestHeader_LocalFileInfo.ProtoReflect.Descriptor instead.
func (*DBRestoreRequestHeader_LocalFileInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DBRestoreRequestHeader_LocalFileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DBRestoreRequestHeader_LocalFileInfo) GetBytesSize() int64 {
	if x != nil {
		return x.BytesSize
	}
	return 0
}

type DBRestoreProcessStatus_ResumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos int64 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *DBRestoreProcessStatus_ResumeInfo) Reset() {
	*x = DBRestoreProcessStatus_ResumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRestoreProcessStatus_ResumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRestoreProcessStatus_ResumeInfo) ProtoMessage() {}

func (x *DBRestoreProcessStatus_ResumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRestoreProcessStatus_ResumeInfo.ProtoReflect.Descriptor instead.
func (*DBRestoreProcessStatus_ResumeInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DBRestoreProcessStatus_ResumeInfo) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

// A single file in the restore body.
type DBExportManifest_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the file. This may or may not be a (relative) file path and up to the server to interpret.
	// For databases exported as ZIP files, this is the path relative to the root of the archive.
	Name        string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Encoding    DBExportManifest_EncodingType `protobuf:"varint,2,opt,name=encoding,proto3,enum=v1.DBExportManifest_EncodingType" json:"encoding,omitempty"`
	EncodedSize int64                         `protobuf:"varint,3,opt,name=encoded_size,json=encodedSize,proto3" json:"encoded_size,omitempty"`
	DecodedSize int64                         `protobuf:"varint,4,opt,name=decoded_size,json=decodedSize,proto3" json:"decoded_size,omitempty"`
	// The CRC32 (IEEE) checksum of the decoded(!) data.
	DecodedCrc32 uint32 `protobuf:"fixed32,5,opt,name=decoded_crc32,json=decodedCrc32,proto3" json:"decoded_crc32,omitempty"`
}

func (x *DBExportManifest_File) Reset() {
	*x = DBExportManifest_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBExportManifest_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportManifest_File) ProtoMessage() {}

func (x *DBExportManifest_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBExportManifest_File.ProtoReflect.Descriptor instead.
func (*DBExportManifest_File) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DBExportManifest_File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DBExportManifest_File) GetEncoding() DBExportManifest_EncodingType {
	if x != nil {
		return x.Encoding
	}
	return DBExportManifest_UNKNOWN
}

func (x *DBExportManifest_File) GetEncodedSize() int64 {
	if x != nil {
		return x.EncodedSize
	}
	return 0
}

func (x *DBExportManifest_File) GetDecodedSize() int64 {
	if x != nil {
		return x.DecodedSize
	}
	return 0
}

func (x *DBExportManifest_File) GetDecodedCrc32() uint32 {
	if x != nil {
		return x.DecodedCrc32
	}
	return 0
}

type DBExportFormat_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Optional bool   `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *DBExportFormat_File) Reset() {
	*x = DBExportFormat_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_db_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBExportFormat_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBExportFormat_File) ProtoMessage() {}

func (x *DBExportFormat_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_db_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBExportFormat_File.ProtoReflect.Descriptor instead.
func (*DBExportFormat_File) Descriptor() ([]byte, []int) {
	return file_api_v1_db_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DBExportFormat_File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DBExportFormat_File) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

var File_api_v1_db_service_proto protoreflect.FileDescriptor

var file_api_v1_db_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x13, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x42, 0x0a, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x18, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2,
	0x03, 0x0a, 0x16, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x1a, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x22, 0x51, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x72, 0x63, 0x33, 0x32,
	0x22, 0x3c, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x98,
	0x01, 0x0a, 0x0e, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x1a, 0x36, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x64, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x42, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0xca, 0x03, 0x0a, 0x09, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x62, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x61, 0x70, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x42, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x42, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x44, 0x42, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x50, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x42, 0x27, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x5a, 0x0b, 0x2e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x58, 0x02, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_db_service_proto_rawDescOnce sync.Once
	file_api_v1_db_service_proto_rawDescData = file_api_v1_db_service_proto_rawDesc
)

func file_api_v1_db_service_proto_rawDescGZIP() []byte {
	file_api_v1_db_service_proto_rawDescOnce.Do(func() {
		file_api_v1_db_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_db_service_proto_rawDescData)
	})
	return file_api_v1_db_service_proto_rawDescData
}

var file_api_v1_db_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1_db_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_v1_db_service_proto_goTypes = []any{
	(DBRestoreProcessStatus_State)(0),            // 0: v1.DBRestoreProcessStatus.State
	(DBExportManifest_EncodingType)(0),           // 1: v1.DBExportManifest.EncodingType
	(*DBRestoreRequestHeader)(nil),               // 2: v1.DBRestoreRequestHeader
	(*DBRestoreProcessMetadata)(nil),             // 3: v1.DBRestoreProcessMetadata
	(*DBRestoreProcessStatus)(nil),               // 4: v1.DBRestoreProcessStatus
	(*DBExportManifest)(nil),                     // 5: v1.DBExportManifest
	(*DBExportFormat)(nil),                       // 6: v1.DBExportFormat
	(*GetDBExportCapabilitiesResponse)(nil),      // 7: v1.GetDBExportCapabilitiesResponse
	(*GetActiveDBRestoreProcessResponse)(nil),    // 8: v1.GetActiveDBRestoreProcessResponse
	(*InterruptDBRestoreProcessRequest)(nil),     // 9: v1.InterruptDBRestoreProcessRequest
	(*InterruptDBRestoreProcessResponse)(nil),    // 10: v1.InterruptDBRestoreProcessResponse
	(*DBRestoreRequestHeader_LocalFileInfo)(nil), // 11: v1.DBRestoreRequestHeader.LocalFileInfo
	(*DBRestoreProcessStatus_ResumeInfo)(nil),    // 12: v1.DBRestoreProcessStatus.ResumeInfo
	(*DBExportManifest_File)(nil),                // 13: v1.DBExportManifest.File
	(*DBExportFormat_File)(nil),                  // 14: v1.DBExportFormat.File
	(*timestamppb.Timestamp)(nil),                // 15: google.protobuf.Timestamp
	(*Empty)(nil),                                // 16: v1.Empty
	(*ResourceByID)(nil),                         // 17: v1.ResourceByID
}
var file_api_v1_db_service_proto_depIdxs = []int32{
	5,  // 0: v1.DBRestoreRequestHeader.manifest:type_name -> v1.DBExportManifest
	11, // 1: v1.DBRestoreRequestHeader.local_file:type_name -> v1.DBRestoreRequestHeader.LocalFileInfo
	2,  // 2: v1.DBRestoreProcessMetadata.header:type_name -> v1.DBRestoreRequestHeader
	15, // 3: v1.DBRestoreProcessMetadata.start_time:type_name -> google.protobuf.Timestamp
	3,  // 4: v1.DBRestoreProcessStatus.metadata:type_name -> v1.DBRestoreProcessMetadata
	0,  // 5: v1.DBRestoreProcessStatus.state:type_name -> v1.DBRestoreProcessStatus.State
	12, // 6: v1.DBRestoreProcessStatus.resume_info:type_name -> v1.DBRestoreProcessStatus.ResumeInfo
	13, // 7: v1.DBExportManifest.files:type_name -> v1.DBExportManifest.File
	14, // 8: v1.DBExportFormat.files:type_name -> v1.DBExportFormat.File
	6,  // 9: v1.GetDBExportCapabilitiesResponse.formats:type_name -> v1.DBExportFormat
	1,  // 10: v1.GetDBExportCapabilitiesResponse.supported_encodings:type_name -> v1.DBExportManifest.EncodingType
	4,  // 11: v1.GetActiveDBRestoreProcessResponse.active_status:type_name -> v1.DBRestoreProcessStatus
	12, // 12: v1.InterruptDBRestoreProcessResponse.resume_info:type_name -> v1.DBRestoreProcessStatus.ResumeInfo
	1,  // 13: v1.DBExportManifest.File.encoding:type_name -> v1.DBExportManifest.EncodingType
	16, // 14: v1.DBService.GetExportCapabilities:input_type -> v1.Empty
	16, // 15: v1.DBService.GetActiveRestoreProcess:input_type -> v1.Empty
	9,  // 16: v1.DBService.InterruptRestoreProcess:input_type -> v1.InterruptDBRestoreProcessRequest
	17, // 17: v1.DBService.CancelRestoreProcess:input_type -> v1.ResourceByID
	7,  // 18: v1.DBService.GetExportCapabilities:output_type -> v1.GetDBExportCapabilitiesResponse
	8,  // 19: v1.DBService.GetActiveRestoreProcess:output_type -> v1.GetActiveDBRestoreProcessResponse
	10, // 20: v1.DBService.InterruptRestoreProcess:output_type -> v1.InterruptDBRestoreProcessResponse
	16, // 21: v1.DBService.CancelRestoreProcess:output_type -> v1.Empty
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_v1_db_service_proto_init() }
func file_api_v1_db_service_proto_init() {
	if File_api_v1_db_service_proto != nil {
		return
	}
	file_api_v1_common_proto_init()
	file_api_v1_empty_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1_db_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DBRestoreRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DBRestoreProcessMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DBRestoreProcessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DBExportManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DBExportFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetDBExportCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetActiveDBRestoreProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*InterruptDBRestoreProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*InterruptDBRestoreProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DBRestoreRequestHeader_LocalFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DBRestoreProcessStatus_ResumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DBExportManifest_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_db_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DBExportFormat_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_db_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_db_service_proto_goTypes,
		DependencyIndexes: file_api_v1_db_service_proto_depIdxs,
		EnumInfos:         file_api_v1_db_service_proto_enumTypes,
		MessageInfos:      file_api_v1_db_service_proto_msgTypes,
	}.Build()
	File_api_v1_db_service_proto = out.File
	file_api_v1_db_service_proto_rawDesc = nil
	file_api_v1_db_service_proto_goTypes = nil
	file_api_v1_db_service_proto_depIdxs = nil
}
