// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/notifier_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotifierService_GetNotifier_FullMethodName         = "/v1.NotifierService/GetNotifier"
	NotifierService_GetNotifiers_FullMethodName        = "/v1.NotifierService/GetNotifiers"
	NotifierService_PutNotifier_FullMethodName         = "/v1.NotifierService/PutNotifier"
	NotifierService_PostNotifier_FullMethodName        = "/v1.NotifierService/PostNotifier"
	NotifierService_TestNotifier_FullMethodName        = "/v1.NotifierService/TestNotifier"
	NotifierService_DeleteNotifier_FullMethodName      = "/v1.NotifierService/DeleteNotifier"
	NotifierService_UpdateNotifier_FullMethodName      = "/v1.NotifierService/UpdateNotifier"
	NotifierService_TestUpdatedNotifier_FullMethodName = "/v1.NotifierService/TestUpdatedNotifier"
)

// NotifierServiceClient is the client API for NotifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierServiceClient interface {
	// GetNotifier returns the notifier configuration given its ID.
	GetNotifier(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Notifier, error)
	// GetNotifiers returns all notifier configurations.
	GetNotifiers(ctx context.Context, in *GetNotifiersRequest, opts ...grpc.CallOption) (*GetNotifiersResponse, error)
	// PutNotifier modifies a given notifier, without using stored credential reconciliation.
	PutNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*Empty, error)
	// PostNotifier creates a notifier configuration.
	PostNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*storage.Notifier, error)
	// TestNotifier checks if a notifier is correctly configured.
	TestNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*Empty, error)
	// DeleteNotifier removes a notifier configuration given its ID.
	DeleteNotifier(ctx context.Context, in *DeleteNotifierRequest, opts ...grpc.CallOption) (*Empty, error)
	// UpdateNotifier modifies a given notifier, with optional stored credential reconciliation.
	UpdateNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*Empty, error)
	// TestUpdatedNotifier checks if the given notifier is correctly configured, with optional stored credential reconciliation.
	TestUpdatedNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*Empty, error)
}

type notifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierServiceClient(cc grpc.ClientConnInterface) NotifierServiceClient {
	return &notifierServiceClient{cc}
}

func (c *notifierServiceClient) GetNotifier(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Notifier, error) {
	out := new(storage.Notifier)
	err := c.cc.Invoke(ctx, NotifierService_GetNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) GetNotifiers(ctx context.Context, in *GetNotifiersRequest, opts ...grpc.CallOption) (*GetNotifiersResponse, error) {
	out := new(GetNotifiersResponse)
	err := c.cc.Invoke(ctx, NotifierService_GetNotifiers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) PutNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifierService_PutNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) PostNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*storage.Notifier, error) {
	out := new(storage.Notifier)
	err := c.cc.Invoke(ctx, NotifierService_PostNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) TestNotifier(ctx context.Context, in *storage.Notifier, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifierService_TestNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) DeleteNotifier(ctx context.Context, in *DeleteNotifierRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifierService_DeleteNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) UpdateNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifierService_UpdateNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierServiceClient) TestUpdatedNotifier(ctx context.Context, in *UpdateNotifierRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifierService_TestUpdatedNotifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierServiceServer is the server API for NotifierService service.
// All implementations should embed UnimplementedNotifierServiceServer
// for forward compatibility
type NotifierServiceServer interface {
	// GetNotifier returns the notifier configuration given its ID.
	GetNotifier(context.Context, *ResourceByID) (*storage.Notifier, error)
	// GetNotifiers returns all notifier configurations.
	GetNotifiers(context.Context, *GetNotifiersRequest) (*GetNotifiersResponse, error)
	// PutNotifier modifies a given notifier, without using stored credential reconciliation.
	PutNotifier(context.Context, *storage.Notifier) (*Empty, error)
	// PostNotifier creates a notifier configuration.
	PostNotifier(context.Context, *storage.Notifier) (*storage.Notifier, error)
	// TestNotifier checks if a notifier is correctly configured.
	TestNotifier(context.Context, *storage.Notifier) (*Empty, error)
	// DeleteNotifier removes a notifier configuration given its ID.
	DeleteNotifier(context.Context, *DeleteNotifierRequest) (*Empty, error)
	// UpdateNotifier modifies a given notifier, with optional stored credential reconciliation.
	UpdateNotifier(context.Context, *UpdateNotifierRequest) (*Empty, error)
	// TestUpdatedNotifier checks if the given notifier is correctly configured, with optional stored credential reconciliation.
	TestUpdatedNotifier(context.Context, *UpdateNotifierRequest) (*Empty, error)
}

// UnimplementedNotifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotifierServiceServer struct {
}

func (UnimplementedNotifierServiceServer) GetNotifier(context.Context, *ResourceByID) (*storage.Notifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) GetNotifiers(context.Context, *GetNotifiersRequest) (*GetNotifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifiers not implemented")
}
func (UnimplementedNotifierServiceServer) PutNotifier(context.Context, *storage.Notifier) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) PostNotifier(context.Context, *storage.Notifier) (*storage.Notifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) TestNotifier(context.Context, *storage.Notifier) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) DeleteNotifier(context.Context, *DeleteNotifierRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) UpdateNotifier(context.Context, *UpdateNotifierRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifier not implemented")
}
func (UnimplementedNotifierServiceServer) TestUpdatedNotifier(context.Context, *UpdateNotifierRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUpdatedNotifier not implemented")
}

// UnsafeNotifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierServiceServer will
// result in compilation errors.
type UnsafeNotifierServiceServer interface {
	mustEmbedUnimplementedNotifierServiceServer()
}

func RegisterNotifierServiceServer(s grpc.ServiceRegistrar, srv NotifierServiceServer) {
	s.RegisterService(&NotifierService_ServiceDesc, srv)
}

func _NotifierService_GetNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).GetNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_GetNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).GetNotifier(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_GetNotifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).GetNotifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_GetNotifiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).GetNotifiers(ctx, req.(*GetNotifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_PutNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Notifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).PutNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_PutNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).PutNotifier(ctx, req.(*storage.Notifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_PostNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Notifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).PostNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_PostNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).PostNotifier(ctx, req.(*storage.Notifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_TestNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.Notifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).TestNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_TestNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).TestNotifier(ctx, req.(*storage.Notifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_DeleteNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).DeleteNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_DeleteNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).DeleteNotifier(ctx, req.(*DeleteNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_UpdateNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).UpdateNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_UpdateNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).UpdateNotifier(ctx, req.(*UpdateNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifierService_TestUpdatedNotifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServiceServer).TestUpdatedNotifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifierService_TestUpdatedNotifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServiceServer).TestUpdatedNotifier(ctx, req.(*UpdateNotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierService_ServiceDesc is the grpc.ServiceDesc for NotifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NotifierService",
	HandlerType: (*NotifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifier",
			Handler:    _NotifierService_GetNotifier_Handler,
		},
		{
			MethodName: "GetNotifiers",
			Handler:    _NotifierService_GetNotifiers_Handler,
		},
		{
			MethodName: "PutNotifier",
			Handler:    _NotifierService_PutNotifier_Handler,
		},
		{
			MethodName: "PostNotifier",
			Handler:    _NotifierService_PostNotifier_Handler,
		},
		{
			MethodName: "TestNotifier",
			Handler:    _NotifierService_TestNotifier_Handler,
		},
		{
			MethodName: "DeleteNotifier",
			Handler:    _NotifierService_DeleteNotifier_Handler,
		},
		{
			MethodName: "UpdateNotifier",
			Handler:    _NotifierService_UpdateNotifier_Handler,
		},
		{
			MethodName: "TestUpdatedNotifier",
			Handler:    _NotifierService_TestUpdatedNotifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/notifier_service.proto",
}
