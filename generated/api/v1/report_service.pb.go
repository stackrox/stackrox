// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/report_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/v1/report_service.proto", fileDescriptor_e7a746f03a51c2dc) }

var fileDescriptor_e7a746f03a51c2dc = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x2c, 0xc8, 0xd4,
	0x2f, 0x33, 0xd4, 0x2f, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x94, 0x12, 0x86, 0x2a, 0x48,
	0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x48, 0x48, 0x09, 0x41, 0x05, 0x53, 0x73, 0x0b, 0x4a, 0x2a,
	0xa1, 0x62, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x20, 0xa9, 0xc4, 0xbc, 0xbc, 0xfc,
	0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0xac, 0x51, 0x18, 0x17, 0x6f, 0x10, 0xd8, 0x8a,
	0x60, 0x88, 0x0d, 0x42, 0xae, 0x5c, 0x9c, 0x41, 0xa5, 0x79, 0x10, 0x31, 0x21, 0x01, 0xbd, 0x32,
	0x43, 0xbd, 0xa0, 0xd4, 0xe2, 0xfc, 0xd2, 0xa2, 0xe4, 0x54, 0xa7, 0x4a, 0x4f, 0x17, 0x29, 0x4e,
	0x90, 0x88, 0x2b, 0xc8, 0x78, 0x25, 0xe9, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x89, 0x2a, 0x09, 0x23,
	0xdc, 0xa9, 0x5f, 0x54, 0x9a, 0xa7, 0x5f, 0x9d, 0x99, 0x52, 0xeb, 0xa4, 0x77, 0xe2, 0x91, 0x1c,
	0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0xc0, 0x25, 0x91,
	0x99, 0xaf, 0x57, 0x5c, 0x92, 0x98, 0x9c, 0x5d, 0x94, 0x5f, 0x01, 0xb1, 0x5c, 0x2f, 0xb1, 0x20,
	0x53, 0xaf, 0xcc, 0x30, 0x8a, 0xa9, 0xcc, 0x30, 0x82, 0x29, 0x89, 0x0d, 0x2c, 0x66, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x60, 0x5e, 0xf9, 0x47, 0xfa, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ReportServiceClient interface {
	RunReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) RunReport(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.ReportService/RunReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	RunReport(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) RunReport(ctx context.Context, req *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ReportService/RunReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).RunReport(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunReport",
			Handler:    _ReportService_RunReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/report_service.proto",
}
