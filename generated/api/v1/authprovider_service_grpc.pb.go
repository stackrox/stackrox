// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/authprovider_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthProviderService_ListAvailableProviderTypes_FullMethodName = "/v1.AuthProviderService/ListAvailableProviderTypes"
	AuthProviderService_GetAuthProvider_FullMethodName            = "/v1.AuthProviderService/GetAuthProvider"
	AuthProviderService_GetLoginAuthProviders_FullMethodName      = "/v1.AuthProviderService/GetLoginAuthProviders"
	AuthProviderService_GetAuthProviders_FullMethodName           = "/v1.AuthProviderService/GetAuthProviders"
	AuthProviderService_PostAuthProvider_FullMethodName           = "/v1.AuthProviderService/PostAuthProvider"
	AuthProviderService_UpdateAuthProvider_FullMethodName         = "/v1.AuthProviderService/UpdateAuthProvider"
	AuthProviderService_PutAuthProvider_FullMethodName            = "/v1.AuthProviderService/PutAuthProvider"
	AuthProviderService_DeleteAuthProvider_FullMethodName         = "/v1.AuthProviderService/DeleteAuthProvider"
	AuthProviderService_ExchangeToken_FullMethodName              = "/v1.AuthProviderService/ExchangeToken"
)

// AuthProviderServiceClient is the client API for AuthProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthProviderServiceClient interface {
	ListAvailableProviderTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableProviderTypesResponse, error)
	GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	GetLoginAuthProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLoginAuthProvidersResponse, error)
	GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error)
	PostAuthProvider(ctx context.Context, in *PostAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	PutAuthProvider(ctx context.Context, in *storage.AuthProvider, opts ...grpc.CallOption) (*storage.AuthProvider, error)
	DeleteAuthProvider(ctx context.Context, in *DeleteByIDWithForce, opts ...grpc.CallOption) (*Empty, error)
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error)
}

type authProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProviderServiceClient(cc grpc.ClientConnInterface) AuthProviderServiceClient {
	return &authProviderServiceClient{cc}
}

func (c *authProviderServiceClient) ListAvailableProviderTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AvailableProviderTypesResponse, error) {
	out := new(AvailableProviderTypesResponse)
	err := c.cc.Invoke(ctx, AuthProviderService_ListAvailableProviderTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, AuthProviderService_GetAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetLoginAuthProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetLoginAuthProvidersResponse, error) {
	out := new(GetLoginAuthProvidersResponse)
	err := c.cc.Invoke(ctx, AuthProviderService_GetLoginAuthProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error) {
	out := new(GetAuthProvidersResponse)
	err := c.cc.Invoke(ctx, AuthProviderService_GetAuthProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) PostAuthProvider(ctx context.Context, in *PostAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, AuthProviderService_PostAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, AuthProviderService_UpdateAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) PutAuthProvider(ctx context.Context, in *storage.AuthProvider, opts ...grpc.CallOption) (*storage.AuthProvider, error) {
	out := new(storage.AuthProvider)
	err := c.cc.Invoke(ctx, AuthProviderService_PutAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) DeleteAuthProvider(ctx context.Context, in *DeleteByIDWithForce, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthProviderService_DeleteAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error) {
	out := new(ExchangeTokenResponse)
	err := c.cc.Invoke(ctx, AuthProviderService_ExchangeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProviderServiceServer is the server API for AuthProviderService service.
// All implementations should embed UnimplementedAuthProviderServiceServer
// for forward compatibility
type AuthProviderServiceServer interface {
	ListAvailableProviderTypes(context.Context, *Empty) (*AvailableProviderTypesResponse, error)
	GetAuthProvider(context.Context, *GetAuthProviderRequest) (*storage.AuthProvider, error)
	GetLoginAuthProviders(context.Context, *Empty) (*GetLoginAuthProvidersResponse, error)
	GetAuthProviders(context.Context, *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error)
	PostAuthProvider(context.Context, *PostAuthProviderRequest) (*storage.AuthProvider, error)
	UpdateAuthProvider(context.Context, *UpdateAuthProviderRequest) (*storage.AuthProvider, error)
	PutAuthProvider(context.Context, *storage.AuthProvider) (*storage.AuthProvider, error)
	DeleteAuthProvider(context.Context, *DeleteByIDWithForce) (*Empty, error)
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error)
}

// UnimplementedAuthProviderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthProviderServiceServer struct {
}

func (UnimplementedAuthProviderServiceServer) ListAvailableProviderTypes(context.Context, *Empty) (*AvailableProviderTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableProviderTypes not implemented")
}
func (UnimplementedAuthProviderServiceServer) GetAuthProvider(context.Context, *GetAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) GetLoginAuthProviders(context.Context, *Empty) (*GetLoginAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginAuthProviders not implemented")
}
func (UnimplementedAuthProviderServiceServer) GetAuthProviders(context.Context, *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProviders not implemented")
}
func (UnimplementedAuthProviderServiceServer) PostAuthProvider(context.Context, *PostAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) UpdateAuthProvider(context.Context, *UpdateAuthProviderRequest) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) PutAuthProvider(context.Context, *storage.AuthProvider) (*storage.AuthProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) DeleteAuthProvider(context.Context, *DeleteByIDWithForce) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}

// UnsafeAuthProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthProviderServiceServer will
// result in compilation errors.
type UnsafeAuthProviderServiceServer interface {
	mustEmbedUnimplementedAuthProviderServiceServer()
}

func RegisterAuthProviderServiceServer(s grpc.ServiceRegistrar, srv AuthProviderServiceServer) {
	s.RegisterService(&AuthProviderService_ServiceDesc, srv)
}

func _AuthProviderService_ListAvailableProviderTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ListAvailableProviderTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_ListAvailableProviderTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ListAvailableProviderTypes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_GetAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, req.(*GetAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetLoginAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetLoginAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_GetLoginAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetLoginAuthProviders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_GetAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetAuthProviders(ctx, req.(*GetAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_PostAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).PostAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_PostAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).PostAuthProvider(ctx, req.(*PostAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_UpdateAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_UpdateAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, req.(*UpdateAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_PutAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.AuthProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).PutAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_PutAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).PutAuthProvider(ctx, req.(*storage.AuthProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_DeleteAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDWithForce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_DeleteAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, req.(*DeleteByIDWithForce))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProviderService_ExchangeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthProviderService_ServiceDesc is the grpc.ServiceDesc for AuthProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthProviderService",
	HandlerType: (*AuthProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableProviderTypes",
			Handler:    _AuthProviderService_ListAvailableProviderTypes_Handler,
		},
		{
			MethodName: "GetAuthProvider",
			Handler:    _AuthProviderService_GetAuthProvider_Handler,
		},
		{
			MethodName: "GetLoginAuthProviders",
			Handler:    _AuthProviderService_GetLoginAuthProviders_Handler,
		},
		{
			MethodName: "GetAuthProviders",
			Handler:    _AuthProviderService_GetAuthProviders_Handler,
		},
		{
			MethodName: "PostAuthProvider",
			Handler:    _AuthProviderService_PostAuthProvider_Handler,
		},
		{
			MethodName: "UpdateAuthProvider",
			Handler:    _AuthProviderService_UpdateAuthProvider_Handler,
		},
		{
			MethodName: "PutAuthProvider",
			Handler:    _AuthProviderService_PutAuthProvider_Handler,
		},
		{
			MethodName: "DeleteAuthProvider",
			Handler:    _AuthProviderService_DeleteAuthProvider_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _AuthProviderService_ExchangeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/authprovider_service.proto",
}
