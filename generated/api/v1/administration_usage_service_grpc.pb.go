// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/administration_usage_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdministrationUsageService_GetCurrentSecuredUnitsUsage_FullMethodName = "/v1.AdministrationUsageService/GetCurrentSecuredUnitsUsage"
	AdministrationUsageService_GetMaxSecuredUnitsUsage_FullMethodName     = "/v1.AdministrationUsageService/GetMaxSecuredUnitsUsage"
)

// AdministrationUsageServiceClient is the client API for AdministrationUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministrationUsageServiceClient interface {
	// GetCurrentSecuredUnitsUsage returns the current secured units usage
	// metrics values.
	//
	// The secured units metrics are collected from all connected clusters every
	// 5 minutes, so the returned result includes data for the connected
	// clusters accurate to about these 5 minutes, and potentially some outdated
	// data for the disconnected clusters.
	GetCurrentSecuredUnitsUsage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SecuredUnitsUsageResponse, error)
	// GetMaxSecuredUnitsUsage returns the maximum, i.e. peak, secured units
	// usage observed during a given time range, together with the time when
	// this maximum was aggregated and stored.
	//
	// The usage metrics are continuously collected from all the connected
	// clusters. The maximum values are kept for some period of time in memory,
	// and then, periodically, are stored to the database.
	// The last data from disconnected clusters are taken into account.
	GetMaxSecuredUnitsUsage(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*MaxSecuredUnitsUsageResponse, error)
}

type administrationUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrationUsageServiceClient(cc grpc.ClientConnInterface) AdministrationUsageServiceClient {
	return &administrationUsageServiceClient{cc}
}

func (c *administrationUsageServiceClient) GetCurrentSecuredUnitsUsage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SecuredUnitsUsageResponse, error) {
	out := new(SecuredUnitsUsageResponse)
	err := c.cc.Invoke(ctx, AdministrationUsageService_GetCurrentSecuredUnitsUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationUsageServiceClient) GetMaxSecuredUnitsUsage(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*MaxSecuredUnitsUsageResponse, error) {
	out := new(MaxSecuredUnitsUsageResponse)
	err := c.cc.Invoke(ctx, AdministrationUsageService_GetMaxSecuredUnitsUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrationUsageServiceServer is the server API for AdministrationUsageService service.
// All implementations should embed UnimplementedAdministrationUsageServiceServer
// for forward compatibility
type AdministrationUsageServiceServer interface {
	// GetCurrentSecuredUnitsUsage returns the current secured units usage
	// metrics values.
	//
	// The secured units metrics are collected from all connected clusters every
	// 5 minutes, so the returned result includes data for the connected
	// clusters accurate to about these 5 minutes, and potentially some outdated
	// data for the disconnected clusters.
	GetCurrentSecuredUnitsUsage(context.Context, *Empty) (*SecuredUnitsUsageResponse, error)
	// GetMaxSecuredUnitsUsage returns the maximum, i.e. peak, secured units
	// usage observed during a given time range, together with the time when
	// this maximum was aggregated and stored.
	//
	// The usage metrics are continuously collected from all the connected
	// clusters. The maximum values are kept for some period of time in memory,
	// and then, periodically, are stored to the database.
	// The last data from disconnected clusters are taken into account.
	GetMaxSecuredUnitsUsage(context.Context, *TimeRange) (*MaxSecuredUnitsUsageResponse, error)
}

// UnimplementedAdministrationUsageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdministrationUsageServiceServer struct {
}

func (UnimplementedAdministrationUsageServiceServer) GetCurrentSecuredUnitsUsage(context.Context, *Empty) (*SecuredUnitsUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSecuredUnitsUsage not implemented")
}
func (UnimplementedAdministrationUsageServiceServer) GetMaxSecuredUnitsUsage(context.Context, *TimeRange) (*MaxSecuredUnitsUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxSecuredUnitsUsage not implemented")
}

// UnsafeAdministrationUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministrationUsageServiceServer will
// result in compilation errors.
type UnsafeAdministrationUsageServiceServer interface {
	mustEmbedUnimplementedAdministrationUsageServiceServer()
}

func RegisterAdministrationUsageServiceServer(s grpc.ServiceRegistrar, srv AdministrationUsageServiceServer) {
	s.RegisterService(&AdministrationUsageService_ServiceDesc, srv)
}

func _AdministrationUsageService_GetCurrentSecuredUnitsUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationUsageServiceServer).GetCurrentSecuredUnitsUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministrationUsageService_GetCurrentSecuredUnitsUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationUsageServiceServer).GetCurrentSecuredUnitsUsage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationUsageService_GetMaxSecuredUnitsUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationUsageServiceServer).GetMaxSecuredUnitsUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministrationUsageService_GetMaxSecuredUnitsUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationUsageServiceServer).GetMaxSecuredUnitsUsage(ctx, req.(*TimeRange))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministrationUsageService_ServiceDesc is the grpc.ServiceDesc for AdministrationUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministrationUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AdministrationUsageService",
	HandlerType: (*AdministrationUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentSecuredUnitsUsage",
			Handler:    _AdministrationUsageService_GetCurrentSecuredUnitsUsage_Handler,
		},
		{
			MethodName: "GetMaxSecuredUnitsUsage",
			Handler:    _AdministrationUsageService_GetMaxSecuredUnitsUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/administration_usage_service.proto",
}
