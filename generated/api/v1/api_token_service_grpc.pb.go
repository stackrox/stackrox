// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/api_token_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APITokenService_GetAPIToken_FullMethodName           = "/v1.APITokenService/GetAPIToken"
	APITokenService_GetAPITokens_FullMethodName          = "/v1.APITokenService/GetAPITokens"
	APITokenService_GenerateToken_FullMethodName         = "/v1.APITokenService/GenerateToken"
	APITokenService_RevokeToken_FullMethodName           = "/v1.APITokenService/RevokeToken"
	APITokenService_ListAllowedTokenRoles_FullMethodName = "/v1.APITokenService/ListAllowedTokenRoles"
)

// APITokenServiceClient is the client API for APITokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APITokenServiceClient interface {
	// GetAPIToken returns API token metadata for a given id.
	GetAPIToken(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.TokenMetadata, error)
	// GetAPITokens returns all the API tokens.
	GetAPITokens(ctx context.Context, in *GetAPITokensRequest, opts ...grpc.CallOption) (*GetAPITokensResponse, error)
	// GenerateToken generates API token for a given user and role.
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	// RevokeToken removes the API token for a given id.
	RevokeToken(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// GetAllowedTokenRoles return roles that user is allowed to request for API token.
	ListAllowedTokenRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllowedTokenRolesResponse, error)
}

type aPITokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPITokenServiceClient(cc grpc.ClientConnInterface) APITokenServiceClient {
	return &aPITokenServiceClient{cc}
}

func (c *aPITokenServiceClient) GetAPIToken(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.TokenMetadata, error) {
	out := new(storage.TokenMetadata)
	err := c.cc.Invoke(ctx, APITokenService_GetAPIToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokenServiceClient) GetAPITokens(ctx context.Context, in *GetAPITokensRequest, opts ...grpc.CallOption) (*GetAPITokensResponse, error) {
	out := new(GetAPITokensResponse)
	err := c.cc.Invoke(ctx, APITokenService_GetAPITokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokenServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, APITokenService_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokenServiceClient) RevokeToken(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, APITokenService_RevokeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokenServiceClient) ListAllowedTokenRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllowedTokenRolesResponse, error) {
	out := new(ListAllowedTokenRolesResponse)
	err := c.cc.Invoke(ctx, APITokenService_ListAllowedTokenRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APITokenServiceServer is the server API for APITokenService service.
// All implementations should embed UnimplementedAPITokenServiceServer
// for forward compatibility
type APITokenServiceServer interface {
	// GetAPIToken returns API token metadata for a given id.
	GetAPIToken(context.Context, *ResourceByID) (*storage.TokenMetadata, error)
	// GetAPITokens returns all the API tokens.
	GetAPITokens(context.Context, *GetAPITokensRequest) (*GetAPITokensResponse, error)
	// GenerateToken generates API token for a given user and role.
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	// RevokeToken removes the API token for a given id.
	RevokeToken(context.Context, *ResourceByID) (*Empty, error)
	// GetAllowedTokenRoles return roles that user is allowed to request for API token.
	ListAllowedTokenRoles(context.Context, *Empty) (*ListAllowedTokenRolesResponse, error)
}

// UnimplementedAPITokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAPITokenServiceServer struct {
}

func (UnimplementedAPITokenServiceServer) GetAPIToken(context.Context, *ResourceByID) (*storage.TokenMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIToken not implemented")
}
func (UnimplementedAPITokenServiceServer) GetAPITokens(context.Context, *GetAPITokensRequest) (*GetAPITokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPITokens not implemented")
}
func (UnimplementedAPITokenServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedAPITokenServiceServer) RevokeToken(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedAPITokenServiceServer) ListAllowedTokenRoles(context.Context, *Empty) (*ListAllowedTokenRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllowedTokenRoles not implemented")
}

// UnsafeAPITokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APITokenServiceServer will
// result in compilation errors.
type UnsafeAPITokenServiceServer interface {
	mustEmbedUnimplementedAPITokenServiceServer()
}

func RegisterAPITokenServiceServer(s grpc.ServiceRegistrar, srv APITokenServiceServer) {
	s.RegisterService(&APITokenService_ServiceDesc, srv)
}

func _APITokenService_GetAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokenServiceServer).GetAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokenService_GetAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokenServiceServer).GetAPIToken(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokenService_GetAPITokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPITokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokenServiceServer).GetAPITokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokenService_GetAPITokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokenServiceServer).GetAPITokens(ctx, req.(*GetAPITokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokenService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokenServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokenService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokenServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokenService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokenServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokenService_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokenServiceServer).RevokeToken(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokenService_ListAllowedTokenRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokenServiceServer).ListAllowedTokenRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokenService_ListAllowedTokenRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokenServiceServer).ListAllowedTokenRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// APITokenService_ServiceDesc is the grpc.ServiceDesc for APITokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APITokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.APITokenService",
	HandlerType: (*APITokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIToken",
			Handler:    _APITokenService_GetAPIToken_Handler,
		},
		{
			MethodName: "GetAPITokens",
			Handler:    _APITokenService_GetAPITokens_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _APITokenService_GenerateToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _APITokenService_RevokeToken_Handler,
		},
		{
			MethodName: "ListAllowedTokenRoles",
			Handler:    _APITokenService_ListAllowedTokenRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api_token_service.proto",
}
