// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/signature_integration_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignatureIntegrationService_ListSignatureIntegrations_FullMethodName  = "/v1.SignatureIntegrationService/ListSignatureIntegrations"
	SignatureIntegrationService_GetSignatureIntegration_FullMethodName    = "/v1.SignatureIntegrationService/GetSignatureIntegration"
	SignatureIntegrationService_PostSignatureIntegration_FullMethodName   = "/v1.SignatureIntegrationService/PostSignatureIntegration"
	SignatureIntegrationService_PutSignatureIntegration_FullMethodName    = "/v1.SignatureIntegrationService/PutSignatureIntegration"
	SignatureIntegrationService_DeleteSignatureIntegration_FullMethodName = "/v1.SignatureIntegrationService/DeleteSignatureIntegration"
)

// SignatureIntegrationServiceClient is the client API for SignatureIntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignatureIntegrationServiceClient interface {
	ListSignatureIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSignatureIntegrationsResponse, error)
	GetSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SignatureIntegration, error)
	// Integration id should not be set.
	// Returns signature integration with id filled.
	PostSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*storage.SignatureIntegration, error)
	PutSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*Empty, error)
	DeleteSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type signatureIntegrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureIntegrationServiceClient(cc grpc.ClientConnInterface) SignatureIntegrationServiceClient {
	return &signatureIntegrationServiceClient{cc}
}

func (c *signatureIntegrationServiceClient) ListSignatureIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSignatureIntegrationsResponse, error) {
	out := new(ListSignatureIntegrationsResponse)
	err := c.cc.Invoke(ctx, SignatureIntegrationService_ListSignatureIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) GetSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.SignatureIntegration, error) {
	out := new(storage.SignatureIntegration)
	err := c.cc.Invoke(ctx, SignatureIntegrationService_GetSignatureIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) PostSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*storage.SignatureIntegration, error) {
	out := new(storage.SignatureIntegration)
	err := c.cc.Invoke(ctx, SignatureIntegrationService_PostSignatureIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) PutSignatureIntegration(ctx context.Context, in *storage.SignatureIntegration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SignatureIntegrationService_PutSignatureIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureIntegrationServiceClient) DeleteSignatureIntegration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SignatureIntegrationService_DeleteSignatureIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignatureIntegrationServiceServer is the server API for SignatureIntegrationService service.
// All implementations should embed UnimplementedSignatureIntegrationServiceServer
// for forward compatibility
type SignatureIntegrationServiceServer interface {
	ListSignatureIntegrations(context.Context, *Empty) (*ListSignatureIntegrationsResponse, error)
	GetSignatureIntegration(context.Context, *ResourceByID) (*storage.SignatureIntegration, error)
	// Integration id should not be set.
	// Returns signature integration with id filled.
	PostSignatureIntegration(context.Context, *storage.SignatureIntegration) (*storage.SignatureIntegration, error)
	PutSignatureIntegration(context.Context, *storage.SignatureIntegration) (*Empty, error)
	DeleteSignatureIntegration(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedSignatureIntegrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSignatureIntegrationServiceServer struct {
}

func (UnimplementedSignatureIntegrationServiceServer) ListSignatureIntegrations(context.Context, *Empty) (*ListSignatureIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatureIntegrations not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) GetSignatureIntegration(context.Context, *ResourceByID) (*storage.SignatureIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) PostSignatureIntegration(context.Context, *storage.SignatureIntegration) (*storage.SignatureIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) PutSignatureIntegration(context.Context, *storage.SignatureIntegration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSignatureIntegration not implemented")
}
func (UnimplementedSignatureIntegrationServiceServer) DeleteSignatureIntegration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignatureIntegration not implemented")
}

// UnsafeSignatureIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureIntegrationServiceServer will
// result in compilation errors.
type UnsafeSignatureIntegrationServiceServer interface {
	mustEmbedUnimplementedSignatureIntegrationServiceServer()
}

func RegisterSignatureIntegrationServiceServer(s grpc.ServiceRegistrar, srv SignatureIntegrationServiceServer) {
	s.RegisterService(&SignatureIntegrationService_ServiceDesc, srv)
}

func _SignatureIntegrationService_ListSignatureIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).ListSignatureIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignatureIntegrationService_ListSignatureIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).ListSignatureIntegrations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_GetSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).GetSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignatureIntegrationService_GetSignatureIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).GetSignatureIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_PostSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SignatureIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).PostSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignatureIntegrationService_PostSignatureIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).PostSignatureIntegration(ctx, req.(*storage.SignatureIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_PutSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage.SignatureIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).PutSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignatureIntegrationService_PutSignatureIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).PutSignatureIntegration(ctx, req.(*storage.SignatureIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignatureIntegrationService_DeleteSignatureIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureIntegrationServiceServer).DeleteSignatureIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignatureIntegrationService_DeleteSignatureIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureIntegrationServiceServer).DeleteSignatureIntegration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// SignatureIntegrationService_ServiceDesc is the grpc.ServiceDesc for SignatureIntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignatureIntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SignatureIntegrationService",
	HandlerType: (*SignatureIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSignatureIntegrations",
			Handler:    _SignatureIntegrationService_ListSignatureIntegrations_Handler,
		},
		{
			MethodName: "GetSignatureIntegration",
			Handler:    _SignatureIntegrationService_GetSignatureIntegration_Handler,
		},
		{
			MethodName: "PostSignatureIntegration",
			Handler:    _SignatureIntegrationService_PostSignatureIntegration_Handler,
		},
		{
			MethodName: "PutSignatureIntegration",
			Handler:    _SignatureIntegrationService_PutSignatureIntegration_Handler,
		},
		{
			MethodName: "DeleteSignatureIntegration",
			Handler:    _SignatureIntegrationService_DeleteSignatureIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/signature_integration_service.proto",
}
