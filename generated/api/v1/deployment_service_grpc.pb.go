// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/deployment_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeploymentService_GetDeployment_FullMethodName                  = "/v1.DeploymentService/GetDeployment"
	DeploymentService_GetDeploymentWithRisk_FullMethodName          = "/v1.DeploymentService/GetDeploymentWithRisk"
	DeploymentService_CountDeployments_FullMethodName               = "/v1.DeploymentService/CountDeployments"
	DeploymentService_ListDeployments_FullMethodName                = "/v1.DeploymentService/ListDeployments"
	DeploymentService_ListDeploymentsWithProcessInfo_FullMethodName = "/v1.DeploymentService/ListDeploymentsWithProcessInfo"
	DeploymentService_GetLabels_FullMethodName                      = "/v1.DeploymentService/GetLabels"
	DeploymentService_ExportDeployments_FullMethodName              = "/v1.DeploymentService/ExportDeployments"
)

// DeploymentServiceClient is the client API for DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentServiceClient interface {
	// GetDeployment returns a deployment given its ID.
	GetDeployment(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Deployment, error)
	// GetDeploymentWithRisk returns a deployment and its risk given its ID.
	GetDeploymentWithRisk(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetDeploymentWithRiskResponse, error)
	// CountDeployments returns the number of deployments.
	CountDeployments(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountDeploymentsResponse, error)
	// ListDeployments returns the list of deployments.
	ListDeployments(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// ListDeploymentsWithProcessInfo returns the list of deployments with process information.
	ListDeploymentsWithProcessInfo(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListDeploymentsWithProcessInfoResponse, error)
	// GetLabels returns the labels used by deployments.
	GetLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeploymentLabelsResponse, error)
	ExportDeployments(ctx context.Context, in *ExportDeploymentRequest, opts ...grpc.CallOption) (DeploymentService_ExportDeploymentsClient, error)
}

type deploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentServiceClient(cc grpc.ClientConnInterface) DeploymentServiceClient {
	return &deploymentServiceClient{cc}
}

func (c *deploymentServiceClient) GetDeployment(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.Deployment, error) {
	out := new(storage.Deployment)
	err := c.cc.Invoke(ctx, DeploymentService_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetDeploymentWithRisk(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetDeploymentWithRiskResponse, error) {
	out := new(GetDeploymentWithRiskResponse)
	err := c.cc.Invoke(ctx, DeploymentService_GetDeploymentWithRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) CountDeployments(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountDeploymentsResponse, error) {
	out := new(CountDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentService_CountDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) ListDeployments(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentService_ListDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) ListDeploymentsWithProcessInfo(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListDeploymentsWithProcessInfoResponse, error) {
	out := new(ListDeploymentsWithProcessInfoResponse)
	err := c.cc.Invoke(ctx, DeploymentService_ListDeploymentsWithProcessInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeploymentLabelsResponse, error) {
	out := new(DeploymentLabelsResponse)
	err := c.cc.Invoke(ctx, DeploymentService_GetLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) ExportDeployments(ctx context.Context, in *ExportDeploymentRequest, opts ...grpc.CallOption) (DeploymentService_ExportDeploymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeploymentService_ServiceDesc.Streams[0], DeploymentService_ExportDeployments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentServiceExportDeploymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeploymentService_ExportDeploymentsClient interface {
	Recv() (*ExportDeploymentResponse, error)
	grpc.ClientStream
}

type deploymentServiceExportDeploymentsClient struct {
	grpc.ClientStream
}

func (x *deploymentServiceExportDeploymentsClient) Recv() (*ExportDeploymentResponse, error) {
	m := new(ExportDeploymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeploymentServiceServer is the server API for DeploymentService service.
// All implementations should embed UnimplementedDeploymentServiceServer
// for forward compatibility
type DeploymentServiceServer interface {
	// GetDeployment returns a deployment given its ID.
	GetDeployment(context.Context, *ResourceByID) (*storage.Deployment, error)
	// GetDeploymentWithRisk returns a deployment and its risk given its ID.
	GetDeploymentWithRisk(context.Context, *ResourceByID) (*GetDeploymentWithRiskResponse, error)
	// CountDeployments returns the number of deployments.
	CountDeployments(context.Context, *RawQuery) (*CountDeploymentsResponse, error)
	// ListDeployments returns the list of deployments.
	ListDeployments(context.Context, *RawQuery) (*ListDeploymentsResponse, error)
	// ListDeploymentsWithProcessInfo returns the list of deployments with process information.
	ListDeploymentsWithProcessInfo(context.Context, *RawQuery) (*ListDeploymentsWithProcessInfoResponse, error)
	// GetLabels returns the labels used by deployments.
	GetLabels(context.Context, *Empty) (*DeploymentLabelsResponse, error)
	ExportDeployments(*ExportDeploymentRequest, DeploymentService_ExportDeploymentsServer) error
}

// UnimplementedDeploymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeploymentServiceServer struct {
}

func (UnimplementedDeploymentServiceServer) GetDeployment(context.Context, *ResourceByID) (*storage.Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) GetDeploymentWithRisk(context.Context, *ResourceByID) (*GetDeploymentWithRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentWithRisk not implemented")
}
func (UnimplementedDeploymentServiceServer) CountDeployments(context.Context, *RawQuery) (*CountDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDeployments not implemented")
}
func (UnimplementedDeploymentServiceServer) ListDeployments(context.Context, *RawQuery) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDeploymentServiceServer) ListDeploymentsWithProcessInfo(context.Context, *RawQuery) (*ListDeploymentsWithProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentsWithProcessInfo not implemented")
}
func (UnimplementedDeploymentServiceServer) GetLabels(context.Context, *Empty) (*DeploymentLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedDeploymentServiceServer) ExportDeployments(*ExportDeploymentRequest, DeploymentService_ExportDeploymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportDeployments not implemented")
}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func RegisterDeploymentServiceServer(s grpc.ServiceRegistrar, srv DeploymentServiceServer) {
	s.RegisterService(&DeploymentService_ServiceDesc, srv)
}

func _DeploymentService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetDeploymentWithRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetDeploymentWithRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetDeploymentWithRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetDeploymentWithRisk(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_CountDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).CountDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_CountDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).CountDeployments(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ListDeployments(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_ListDeploymentsWithProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ListDeploymentsWithProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_ListDeploymentsWithProcessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ListDeploymentsWithProcessInfo(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_GetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetLabels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_ExportDeployments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportDeploymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServiceServer).ExportDeployments(m, &deploymentServiceExportDeploymentsServer{stream})
}

type DeploymentService_ExportDeploymentsServer interface {
	Send(*ExportDeploymentResponse) error
	grpc.ServerStream
}

type deploymentServiceExportDeploymentsServer struct {
	grpc.ServerStream
}

func (x *deploymentServiceExportDeploymentsServer) Send(m *ExportDeploymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeploymentService_ServiceDesc is the grpc.ServiceDesc for DeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DeploymentService",
	HandlerType: (*DeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentService_GetDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentWithRisk",
			Handler:    _DeploymentService_GetDeploymentWithRisk_Handler,
		},
		{
			MethodName: "CountDeployments",
			Handler:    _DeploymentService_CountDeployments_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _DeploymentService_ListDeployments_Handler,
		},
		{
			MethodName: "ListDeploymentsWithProcessInfo",
			Handler:    _DeploymentService_ListDeploymentsWithProcessInfo_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _DeploymentService_GetLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportDeployments",
			Handler:       _DeploymentService_ExportDeployments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/deployment_service.proto",
}
