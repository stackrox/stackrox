// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/v1/vuln_mgmt_req_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName     = "/v1.VulnerabilityRequestService/GetVulnerabilityRequest"
	VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName   = "/v1.VulnerabilityRequestService/ListVulnerabilityRequests"
	VulnerabilityRequestService_DeferVulnerability_FullMethodName          = "/v1.VulnerabilityRequestService/DeferVulnerability"
	VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName  = "/v1.VulnerabilityRequestService/FalsePositiveVulnerability"
	VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName = "/v1.VulnerabilityRequestService/ApproveVulnerabilityRequest"
	VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName    = "/v1.VulnerabilityRequestService/DenyVulnerabilityRequest"
	VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName  = "/v1.VulnerabilityRequestService/UpdateVulnerabilityRequest"
	VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName    = "/v1.VulnerabilityRequestService/UndoVulnerabilityRequest"
	VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName  = "/v1.VulnerabilityRequestService/DeleteVulnerabilityRequest"
)

// VulnerabilityRequestServiceClient is the client API for VulnerabilityRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VulnerabilityRequestService provides comprehensive vulnerability request management capabilities.
//
// **⚠️ DEPRECATION NOTICE:**
// This service is deprecated when UnifiedCVEDeferral feature is enabled.
// Use /v2/vulnerability-exceptions/* APIs instead for new implementations.
//
// **Key Features:**
// - Create deferral requests for temporary vulnerability suppression
// - Create false-positive requests for permanent vulnerability suppression
// - Approve/deny vulnerability requests with required comments
// - Update request expiry configurations
// - Undo approved requests to re-enable vulnerability detection
// - Delete pending requests
//
// **Access Control:**
// - View operations: VulnerabilityManagementRequests or VulnerabilityManagementApprovals View permissions
// - Create operations: VulnerabilityManagementRequests Modify permissions
// - Approval operations: VulnerabilityManagementApprovals Modify permissions
// - Update/Undo operations: Either VulnerabilityManagementRequests or VulnerabilityManagementApprovals Modify permissions
//
// **Request Lifecycle:**
// - PENDING: New request awaiting approval/denial
// - APPROVED: Request approved and enforced
// - DENIED: Request denied and closed
// - APPROVED_PENDING_UPDATE: Approved request with pending update
//
// **Validation Rules:**
// - CVE format must be valid (e.g., "CVE-2021-1234")
// - Scope must be valid (image scope with registry/remote/tag or global scope)
// - Comments are required for all actions
// - Cannot create duplicate requests for same CVE-scope combination
// - Deferral requests must specify expiry (when fixed or timestamp)
// - False-positive requests are permanent (no expiry)
//
// **Performance Considerations:**
// - Maximum 1000 requests returned per list request
// - Requests are processed sequentially to prevent race conditions
// - Duplicate prevention checks are performed during creation
type VulnerabilityRequestServiceClient interface {
	// GetVulnerabilityRequest returns the requested vulnerability request by ID.
	//
	// **Error Cases:**
	// - 404: Request with specified ID does not exist
	// - 403: Insufficient permissions to view the request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	GetVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityRequestResponse, error)
	// ListVulnerabilityRequests returns the list of vulnerability requests.
	//
	// **Query Behavior:**
	// - Supports StackRox search syntax for filtering
	// - Default pagination limit: 1000 requests
	// - Maximum limit: 1000 requests per request
	//
	// **Search Examples:**
	// - "CVE:CVE-2021-1234" - Requests for specific CVE
	// - "Request Status:PENDING" - Pending requests only
	// - "Requested Vulnerability State:DEFERRED" - Deferral requests only
	//
	// **Error Cases:**
	// - 400: Invalid search query
	// - 403: Insufficient permissions to view requests
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	ListVulnerabilityRequests(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityRequestsResponse, error)
	// DeferVulnerability starts the deferral process for the specified vulnerability.
	//
	// **Deferral Request Rules:**
	// - CVE must be in valid format (e.g., "CVE-2021-1234")
	// - Scope must be valid (image scope or global scope)
	// - Expiry must be specified (either expires_when_fixed or expires_on)
	// - Comment is required for request creation
	// - Cannot create request for CVEs already covered by approved requests
	// - Only one request can exist per CVE-scope combination
	//
	// **Expiry Options:**
	// - expires_when_fixed: Request expires when CVE is fixed
	// - expires_on: Request expires at specific timestamp
	// - Cannot specify both expiry options
	//
	// **Error Cases:**
	// - 400: Invalid CVE format, missing comment, invalid scope, or duplicate request
	// - 403: Insufficient permissions to create requests
	// - 409: CVE already covered by existing approved request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DeferVulnerability(ctx context.Context, in *DeferVulnRequest, opts ...grpc.CallOption) (*DeferVulnResponse, error)
	// FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.
	//
	// **False-Positive Request Rules:**
	// - CVE must be in valid format (e.g., "CVE-2021-1234")
	// - Scope must be valid (image scope or global scope)
	// - Comment is required for request creation
	// - Cannot create request for CVEs already covered by approved requests
	// - Only one request can exist per CVE-scope combination
	// - False-positive requests do not have expiry (permanent)
	//
	// **Error Cases:**
	// - 400: Invalid CVE format, missing comment, or invalid scope
	// - 403: Insufficient permissions to create requests
	// - 409: CVE already covered by existing approved request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	FalsePositiveVulnerability(ctx context.Context, in *FalsePositiveVulnRequest, opts ...grpc.CallOption) (*FalsePositiveVulnResponse, error)
	// ApproveVulnRequest approves a vulnerability request.
	//
	// **Approval Behavior:**
	// - Request is approved and immediately enforced
	// - Vulnerabilities are suppressed in policy detection and risk evaluation
	// - Conflicting pending requests are automatically denied
	// - Comment is required for approval
	//
	// **Approval Rules:**
	// - Only pending requests can be approved
	// - Comment is required for approval
	// - Approval automatically denies conflicting pending requests
	// - Approved requests are enforced immediately
	//
	// **Error Cases:**
	// - 400: Missing comment or request not in pending state
	// - 403: Insufficient permissions to approve requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	ApproveVulnerabilityRequest(ctx context.Context, in *ApproveVulnRequest, opts ...grpc.CallOption) (*ApproveVulnRequestResponse, error)
	// DenyVulnRequest denies a vulnerability request.
	//
	// **Denial Behavior:**
	// - Request is denied and permanently closed
	// - No impact on vulnerability detection
	// - Comment is required for denial
	//
	// **Denial Rules:**
	// - Only pending requests can be denied
	// - Comment is required for denial
	// - Denied requests are permanently closed
	//
	// **Error Cases:**
	// - 400: Missing comment or request not in pending state
	// - 403: Insufficient permissions to deny requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DenyVulnerabilityRequest(ctx context.Context, in *DenyVulnRequest, opts ...grpc.CallOption) (*DenyVulnRequestResponse, error)
	// UpdateVulnerabilityRequest updates an existing vulnerability request.
	//
	// **Update Limitations:**
	// - Currently, only expiry can be updated
	// - Comment is required for update
	// - Only pending requests can be updated
	// - Update creates a new pending update request
	//
	// **Update Behavior:**
	// - Creates a new pending update request
	// - Original request remains in effect until update is approved
	// - Only expiry configuration can be modified
	//
	// **Error Cases:**
	// - 400: Missing comment, invalid expiry, or request not in pending state
	// - 403: Insufficient permissions to update requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	UpdateVulnerabilityRequest(ctx context.Context, in *UpdateVulnRequest, opts ...grpc.CallOption) (*UpdateVulnRequestResponse, error)
	// UndoVulnerabilityRequest undoes a vulnerability request.
	//
	// **Undo Behavior:**
	// - Request is marked as inactive
	// - Vulnerabilities are re-enabled for detection
	// - May not re-enable if other active requests cover same CVEs
	//
	// **Undo Rules:**
	// - Only approved requests can be undone
	// - Undo may not re-enable vulnerabilities if other active requests exist
	// - Request is permanently marked as inactive
	//
	// **Error Cases:**
	// - 403: Insufficient permissions to undo requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	UndoVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*UndoVulnRequestResponse, error)
	// DeleteVulnerabilityRequest deletes a vulnerability request.
	//
	// **Delete Rules:**
	// - Only pending requests can be deleted
	// - Approved or denied requests cannot be deleted
	// - Deletion is permanent and cannot be undone
	//
	// **Error Cases:**
	// - 400: Request not in pending state
	// - 403: Insufficient permissions to delete requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DeleteVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type vulnerabilityRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilityRequestServiceClient(cc grpc.ClientConnInterface) VulnerabilityRequestServiceClient {
	return &vulnerabilityRequestServiceClient{cc}
}

func (c *vulnerabilityRequestServiceClient) GetVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetVulnerabilityRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVulnerabilityRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) ListVulnerabilityRequests(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*ListVulnerabilityRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVulnerabilityRequestsResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DeferVulnerability(ctx context.Context, in *DeferVulnRequest, opts ...grpc.CallOption) (*DeferVulnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeferVulnResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DeferVulnerability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) FalsePositiveVulnerability(ctx context.Context, in *FalsePositiveVulnRequest, opts ...grpc.CallOption) (*FalsePositiveVulnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FalsePositiveVulnResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) ApproveVulnerabilityRequest(ctx context.Context, in *ApproveVulnRequest, opts ...grpc.CallOption) (*ApproveVulnRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DenyVulnerabilityRequest(ctx context.Context, in *DenyVulnRequest, opts ...grpc.CallOption) (*DenyVulnRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DenyVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) UpdateVulnerabilityRequest(ctx context.Context, in *UpdateVulnRequest, opts ...grpc.CallOption) (*UpdateVulnRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) UndoVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*UndoVulnRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndoVulnRequestResponse)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilityRequestServiceClient) DeleteVulnerabilityRequest(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilityRequestServiceServer is the server API for VulnerabilityRequestService service.
// All implementations should embed UnimplementedVulnerabilityRequestServiceServer
// for forward compatibility.
//
// VulnerabilityRequestService provides comprehensive vulnerability request management capabilities.
//
// **⚠️ DEPRECATION NOTICE:**
// This service is deprecated when UnifiedCVEDeferral feature is enabled.
// Use /v2/vulnerability-exceptions/* APIs instead for new implementations.
//
// **Key Features:**
// - Create deferral requests for temporary vulnerability suppression
// - Create false-positive requests for permanent vulnerability suppression
// - Approve/deny vulnerability requests with required comments
// - Update request expiry configurations
// - Undo approved requests to re-enable vulnerability detection
// - Delete pending requests
//
// **Access Control:**
// - View operations: VulnerabilityManagementRequests or VulnerabilityManagementApprovals View permissions
// - Create operations: VulnerabilityManagementRequests Modify permissions
// - Approval operations: VulnerabilityManagementApprovals Modify permissions
// - Update/Undo operations: Either VulnerabilityManagementRequests or VulnerabilityManagementApprovals Modify permissions
//
// **Request Lifecycle:**
// - PENDING: New request awaiting approval/denial
// - APPROVED: Request approved and enforced
// - DENIED: Request denied and closed
// - APPROVED_PENDING_UPDATE: Approved request with pending update
//
// **Validation Rules:**
// - CVE format must be valid (e.g., "CVE-2021-1234")
// - Scope must be valid (image scope with registry/remote/tag or global scope)
// - Comments are required for all actions
// - Cannot create duplicate requests for same CVE-scope combination
// - Deferral requests must specify expiry (when fixed or timestamp)
// - False-positive requests are permanent (no expiry)
//
// **Performance Considerations:**
// - Maximum 1000 requests returned per list request
// - Requests are processed sequentially to prevent race conditions
// - Duplicate prevention checks are performed during creation
type VulnerabilityRequestServiceServer interface {
	// GetVulnerabilityRequest returns the requested vulnerability request by ID.
	//
	// **Error Cases:**
	// - 404: Request with specified ID does not exist
	// - 403: Insufficient permissions to view the request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	GetVulnerabilityRequest(context.Context, *ResourceByID) (*GetVulnerabilityRequestResponse, error)
	// ListVulnerabilityRequests returns the list of vulnerability requests.
	//
	// **Query Behavior:**
	// - Supports StackRox search syntax for filtering
	// - Default pagination limit: 1000 requests
	// - Maximum limit: 1000 requests per request
	//
	// **Search Examples:**
	// - "CVE:CVE-2021-1234" - Requests for specific CVE
	// - "Request Status:PENDING" - Pending requests only
	// - "Requested Vulnerability State:DEFERRED" - Deferral requests only
	//
	// **Error Cases:**
	// - 400: Invalid search query
	// - 403: Insufficient permissions to view requests
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	ListVulnerabilityRequests(context.Context, *RawQuery) (*ListVulnerabilityRequestsResponse, error)
	// DeferVulnerability starts the deferral process for the specified vulnerability.
	//
	// **Deferral Request Rules:**
	// - CVE must be in valid format (e.g., "CVE-2021-1234")
	// - Scope must be valid (image scope or global scope)
	// - Expiry must be specified (either expires_when_fixed or expires_on)
	// - Comment is required for request creation
	// - Cannot create request for CVEs already covered by approved requests
	// - Only one request can exist per CVE-scope combination
	//
	// **Expiry Options:**
	// - expires_when_fixed: Request expires when CVE is fixed
	// - expires_on: Request expires at specific timestamp
	// - Cannot specify both expiry options
	//
	// **Error Cases:**
	// - 400: Invalid CVE format, missing comment, invalid scope, or duplicate request
	// - 403: Insufficient permissions to create requests
	// - 409: CVE already covered by existing approved request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DeferVulnerability(context.Context, *DeferVulnRequest) (*DeferVulnResponse, error)
	// FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.
	//
	// **False-Positive Request Rules:**
	// - CVE must be in valid format (e.g., "CVE-2021-1234")
	// - Scope must be valid (image scope or global scope)
	// - Comment is required for request creation
	// - Cannot create request for CVEs already covered by approved requests
	// - Only one request can exist per CVE-scope combination
	// - False-positive requests do not have expiry (permanent)
	//
	// **Error Cases:**
	// - 400: Invalid CVE format, missing comment, or invalid scope
	// - 403: Insufficient permissions to create requests
	// - 409: CVE already covered by existing approved request
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	FalsePositiveVulnerability(context.Context, *FalsePositiveVulnRequest) (*FalsePositiveVulnResponse, error)
	// ApproveVulnRequest approves a vulnerability request.
	//
	// **Approval Behavior:**
	// - Request is approved and immediately enforced
	// - Vulnerabilities are suppressed in policy detection and risk evaluation
	// - Conflicting pending requests are automatically denied
	// - Comment is required for approval
	//
	// **Approval Rules:**
	// - Only pending requests can be approved
	// - Comment is required for approval
	// - Approval automatically denies conflicting pending requests
	// - Approved requests are enforced immediately
	//
	// **Error Cases:**
	// - 400: Missing comment or request not in pending state
	// - 403: Insufficient permissions to approve requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	ApproveVulnerabilityRequest(context.Context, *ApproveVulnRequest) (*ApproveVulnRequestResponse, error)
	// DenyVulnRequest denies a vulnerability request.
	//
	// **Denial Behavior:**
	// - Request is denied and permanently closed
	// - No impact on vulnerability detection
	// - Comment is required for denial
	//
	// **Denial Rules:**
	// - Only pending requests can be denied
	// - Comment is required for denial
	// - Denied requests are permanently closed
	//
	// **Error Cases:**
	// - 400: Missing comment or request not in pending state
	// - 403: Insufficient permissions to deny requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DenyVulnerabilityRequest(context.Context, *DenyVulnRequest) (*DenyVulnRequestResponse, error)
	// UpdateVulnerabilityRequest updates an existing vulnerability request.
	//
	// **Update Limitations:**
	// - Currently, only expiry can be updated
	// - Comment is required for update
	// - Only pending requests can be updated
	// - Update creates a new pending update request
	//
	// **Update Behavior:**
	// - Creates a new pending update request
	// - Original request remains in effect until update is approved
	// - Only expiry configuration can be modified
	//
	// **Error Cases:**
	// - 400: Missing comment, invalid expiry, or request not in pending state
	// - 403: Insufficient permissions to update requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	UpdateVulnerabilityRequest(context.Context, *UpdateVulnRequest) (*UpdateVulnRequestResponse, error)
	// UndoVulnerabilityRequest undoes a vulnerability request.
	//
	// **Undo Behavior:**
	// - Request is marked as inactive
	// - Vulnerabilities are re-enabled for detection
	// - May not re-enable if other active requests cover same CVEs
	//
	// **Undo Rules:**
	// - Only approved requests can be undone
	// - Undo may not re-enable vulnerabilities if other active requests exist
	// - Request is permanently marked as inactive
	//
	// **Error Cases:**
	// - 403: Insufficient permissions to undo requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	UndoVulnerabilityRequest(context.Context, *ResourceByID) (*UndoVulnRequestResponse, error)
	// DeleteVulnerabilityRequest deletes a vulnerability request.
	//
	// **Delete Rules:**
	// - Only pending requests can be deleted
	// - Approved or denied requests cannot be deleted
	// - Deletion is permanent and cannot be undone
	//
	// **Error Cases:**
	// - 400: Request not in pending state
	// - 403: Insufficient permissions to delete requests
	// - 404: Request with specified ID does not exist
	// - 410: Service deprecated (when UnifiedCVEDeferral feature is enabled)
	DeleteVulnerabilityRequest(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedVulnerabilityRequestServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVulnerabilityRequestServiceServer struct{}

func (UnimplementedVulnerabilityRequestServiceServer) GetVulnerabilityRequest(context.Context, *ResourceByID) (*GetVulnerabilityRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) ListVulnerabilityRequests(context.Context, *RawQuery) (*ListVulnerabilityRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilityRequests not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DeferVulnerability(context.Context, *DeferVulnRequest) (*DeferVulnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeferVulnerability not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) FalsePositiveVulnerability(context.Context, *FalsePositiveVulnRequest) (*FalsePositiveVulnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FalsePositiveVulnerability not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) ApproveVulnerabilityRequest(context.Context, *ApproveVulnRequest) (*ApproveVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DenyVulnerabilityRequest(context.Context, *DenyVulnRequest) (*DenyVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) UpdateVulnerabilityRequest(context.Context, *UpdateVulnRequest) (*UpdateVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) UndoVulnerabilityRequest(context.Context, *ResourceByID) (*UndoVulnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) DeleteVulnerabilityRequest(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVulnerabilityRequest not implemented")
}
func (UnimplementedVulnerabilityRequestServiceServer) testEmbeddedByValue() {}

// UnsafeVulnerabilityRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnerabilityRequestServiceServer will
// result in compilation errors.
type UnsafeVulnerabilityRequestServiceServer interface {
	mustEmbedUnimplementedVulnerabilityRequestServiceServer()
}

func RegisterVulnerabilityRequestServiceServer(s grpc.ServiceRegistrar, srv VulnerabilityRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedVulnerabilityRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VulnerabilityRequestService_ServiceDesc, srv)
}

func _VulnerabilityRequestService_GetVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).GetVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_GetVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).GetVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_ListVulnerabilityRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).ListVulnerabilityRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_ListVulnerabilityRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).ListVulnerabilityRequests(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DeferVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DeferVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DeferVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DeferVulnerability(ctx, req.(*DeferVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_FalsePositiveVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FalsePositiveVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).FalsePositiveVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_FalsePositiveVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).FalsePositiveVulnerability(ctx, req.(*FalsePositiveVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_ApproveVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).ApproveVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_ApproveVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).ApproveVulnerabilityRequest(ctx, req.(*ApproveVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DenyVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DenyVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DenyVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DenyVulnerabilityRequest(ctx, req.(*DenyVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_UpdateVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVulnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).UpdateVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_UpdateVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).UpdateVulnerabilityRequest(ctx, req.(*UpdateVulnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_UndoVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).UndoVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_UndoVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).UndoVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnerabilityRequestService_DeleteVulnerabilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityRequestServiceServer).DeleteVulnerabilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnerabilityRequestService_DeleteVulnerabilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityRequestServiceServer).DeleteVulnerabilityRequest(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// VulnerabilityRequestService_ServiceDesc is the grpc.ServiceDesc for VulnerabilityRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VulnerabilityRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VulnerabilityRequestService",
	HandlerType: (*VulnerabilityRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_GetVulnerabilityRequest_Handler,
		},
		{
			MethodName: "ListVulnerabilityRequests",
			Handler:    _VulnerabilityRequestService_ListVulnerabilityRequests_Handler,
		},
		{
			MethodName: "DeferVulnerability",
			Handler:    _VulnerabilityRequestService_DeferVulnerability_Handler,
		},
		{
			MethodName: "FalsePositiveVulnerability",
			Handler:    _VulnerabilityRequestService_FalsePositiveVulnerability_Handler,
		},
		{
			MethodName: "ApproveVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_ApproveVulnerabilityRequest_Handler,
		},
		{
			MethodName: "DenyVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_DenyVulnerabilityRequest_Handler,
		},
		{
			MethodName: "UpdateVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_UpdateVulnerabilityRequest_Handler,
		},
		{
			MethodName: "UndoVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_UndoVulnerabilityRequest_Handler,
		},
		{
			MethodName: "DeleteVulnerabilityRequest",
			Handler:    _VulnerabilityRequestService_DeleteVulnerabilityRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vuln_mgmt_req_service.proto",
}
