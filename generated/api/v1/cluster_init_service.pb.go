// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/cluster_init_service.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InitBundleMeta struct {
	Id                   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImpactedClusters     []*InitBundleMeta_ImpactedCluster `protobuf:"bytes,6,rep,name=impacted_clusters,json=impactedClusters,proto3" json:"impacted_clusters,omitempty"`
	CreatedAt            *types.Timestamp                  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *storage.User                     `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ExpiresAt            *types.Timestamp                  `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *InitBundleMeta) Reset()         { *m = InitBundleMeta{} }
func (m *InitBundleMeta) String() string { return proto.CompactTextString(m) }
func (*InitBundleMeta) ProtoMessage()    {}
func (*InitBundleMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{0}
}
func (m *InitBundleMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleMeta.Merge(m, src)
}
func (m *InitBundleMeta) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleMeta.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleMeta proto.InternalMessageInfo

func (m *InitBundleMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InitBundleMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitBundleMeta) GetImpactedClusters() []*InitBundleMeta_ImpactedCluster {
	if m != nil {
		return m.ImpactedClusters
	}
	return nil
}

func (m *InitBundleMeta) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *InitBundleMeta) GetCreatedBy() *storage.User {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *InitBundleMeta) GetExpiresAt() *types.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *InitBundleMeta) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleMeta) Clone() *InitBundleMeta {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleMeta)
	*cloned = *m

	if m.ImpactedClusters != nil {
		cloned.ImpactedClusters = make([]*InitBundleMeta_ImpactedCluster, len(m.ImpactedClusters))
		for idx, v := range m.ImpactedClusters {
			cloned.ImpactedClusters[idx] = v.Clone()
		}
	}
	cloned.CreatedAt = m.CreatedAt.Clone()
	cloned.CreatedBy = m.CreatedBy.Clone()
	cloned.ExpiresAt = m.ExpiresAt.Clone()
	return cloned
}

type InitBundleMeta_ImpactedCluster struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitBundleMeta_ImpactedCluster) Reset()         { *m = InitBundleMeta_ImpactedCluster{} }
func (m *InitBundleMeta_ImpactedCluster) String() string { return proto.CompactTextString(m) }
func (*InitBundleMeta_ImpactedCluster) ProtoMessage()    {}
func (*InitBundleMeta_ImpactedCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{0, 0}
}
func (m *InitBundleMeta_ImpactedCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleMeta_ImpactedCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleMeta_ImpactedCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleMeta_ImpactedCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleMeta_ImpactedCluster.Merge(m, src)
}
func (m *InitBundleMeta_ImpactedCluster) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleMeta_ImpactedCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleMeta_ImpactedCluster.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleMeta_ImpactedCluster proto.InternalMessageInfo

func (m *InitBundleMeta_ImpactedCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitBundleMeta_ImpactedCluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InitBundleMeta_ImpactedCluster) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleMeta_ImpactedCluster) Clone() *InitBundleMeta_ImpactedCluster {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleMeta_ImpactedCluster)
	*cloned = *m

	return cloned
}

type InitBundleGenResponse struct {
	Meta                 *InitBundleMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	HelmValuesBundle     []byte          `protobuf:"bytes,2,opt,name=helm_values_bundle,json=helmValuesBundle,proto3" json:"helm_values_bundle,omitempty"`
	KubectlBundle        []byte          `protobuf:"bytes,3,opt,name=kubectl_bundle,json=kubectlBundle,proto3" json:"kubectl_bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InitBundleGenResponse) Reset()         { *m = InitBundleGenResponse{} }
func (m *InitBundleGenResponse) String() string { return proto.CompactTextString(m) }
func (*InitBundleGenResponse) ProtoMessage()    {}
func (*InitBundleGenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{1}
}
func (m *InitBundleGenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleGenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleGenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleGenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleGenResponse.Merge(m, src)
}
func (m *InitBundleGenResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleGenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleGenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleGenResponse proto.InternalMessageInfo

func (m *InitBundleGenResponse) GetMeta() *InitBundleMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InitBundleGenResponse) GetHelmValuesBundle() []byte {
	if m != nil {
		return m.HelmValuesBundle
	}
	return nil
}

func (m *InitBundleGenResponse) GetKubectlBundle() []byte {
	if m != nil {
		return m.KubectlBundle
	}
	return nil
}

func (m *InitBundleGenResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleGenResponse) Clone() *InitBundleGenResponse {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleGenResponse)
	*cloned = *m

	cloned.Meta = m.Meta.Clone()
	if m.HelmValuesBundle != nil {
		cloned.HelmValuesBundle = make([]byte, len(m.HelmValuesBundle))
		copy(cloned.HelmValuesBundle, m.HelmValuesBundle)
	}
	if m.KubectlBundle != nil {
		cloned.KubectlBundle = make([]byte, len(m.KubectlBundle))
		copy(cloned.KubectlBundle, m.KubectlBundle)
	}
	return cloned
}

type GetCAConfigResponse struct {
	HelmValuesBundle     []byte   `protobuf:"bytes,1,opt,name=helm_values_bundle,json=helmValuesBundle,proto3" json:"helm_values_bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCAConfigResponse) Reset()         { *m = GetCAConfigResponse{} }
func (m *GetCAConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetCAConfigResponse) ProtoMessage()    {}
func (*GetCAConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{2}
}
func (m *GetCAConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCAConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCAConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCAConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCAConfigResponse.Merge(m, src)
}
func (m *GetCAConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCAConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCAConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCAConfigResponse proto.InternalMessageInfo

func (m *GetCAConfigResponse) GetHelmValuesBundle() []byte {
	if m != nil {
		return m.HelmValuesBundle
	}
	return nil
}

func (m *GetCAConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCAConfigResponse) Clone() *GetCAConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetCAConfigResponse)
	*cloned = *m

	if m.HelmValuesBundle != nil {
		cloned.HelmValuesBundle = make([]byte, len(m.HelmValuesBundle))
		copy(cloned.HelmValuesBundle, m.HelmValuesBundle)
	}
	return cloned
}

type InitBundleMetasResponse struct {
	Items                []*InitBundleMeta `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InitBundleMetasResponse) Reset()         { *m = InitBundleMetasResponse{} }
func (m *InitBundleMetasResponse) String() string { return proto.CompactTextString(m) }
func (*InitBundleMetasResponse) ProtoMessage()    {}
func (*InitBundleMetasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{3}
}
func (m *InitBundleMetasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleMetasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleMetasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleMetasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleMetasResponse.Merge(m, src)
}
func (m *InitBundleMetasResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleMetasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleMetasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleMetasResponse proto.InternalMessageInfo

func (m *InitBundleMetasResponse) GetItems() []*InitBundleMeta {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *InitBundleMetasResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleMetasResponse) Clone() *InitBundleMetasResponse {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleMetasResponse)
	*cloned = *m

	if m.Items != nil {
		cloned.Items = make([]*InitBundleMeta, len(m.Items))
		for idx, v := range m.Items {
			cloned.Items[idx] = v.Clone()
		}
	}
	return cloned
}

type InitBundleGenRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitBundleGenRequest) Reset()         { *m = InitBundleGenRequest{} }
func (m *InitBundleGenRequest) String() string { return proto.CompactTextString(m) }
func (*InitBundleGenRequest) ProtoMessage()    {}
func (*InitBundleGenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{4}
}
func (m *InitBundleGenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleGenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleGenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleGenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleGenRequest.Merge(m, src)
}
func (m *InitBundleGenRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleGenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleGenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleGenRequest proto.InternalMessageInfo

func (m *InitBundleGenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitBundleGenRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleGenRequest) Clone() *InitBundleGenRequest {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleGenRequest)
	*cloned = *m

	return cloned
}

type InitBundleRevokeRequest struct {
	Ids                        []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	ConfirmImpactedClustersIds []string `protobuf:"bytes,2,rep,name=confirm_impacted_clusters_ids,json=confirmImpactedClustersIds,proto3" json:"confirm_impacted_clusters_ids,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *InitBundleRevokeRequest) Reset()         { *m = InitBundleRevokeRequest{} }
func (m *InitBundleRevokeRequest) String() string { return proto.CompactTextString(m) }
func (*InitBundleRevokeRequest) ProtoMessage()    {}
func (*InitBundleRevokeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{5}
}
func (m *InitBundleRevokeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleRevokeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleRevokeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleRevokeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleRevokeRequest.Merge(m, src)
}
func (m *InitBundleRevokeRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleRevokeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleRevokeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleRevokeRequest proto.InternalMessageInfo

func (m *InitBundleRevokeRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *InitBundleRevokeRequest) GetConfirmImpactedClustersIds() []string {
	if m != nil {
		return m.ConfirmImpactedClustersIds
	}
	return nil
}

func (m *InitBundleRevokeRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleRevokeRequest) Clone() *InitBundleRevokeRequest {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleRevokeRequest)
	*cloned = *m

	if m.Ids != nil {
		cloned.Ids = make([]string, len(m.Ids))
		copy(cloned.Ids, m.Ids)
	}
	if m.ConfirmImpactedClustersIds != nil {
		cloned.ConfirmImpactedClustersIds = make([]string, len(m.ConfirmImpactedClustersIds))
		copy(cloned.ConfirmImpactedClustersIds, m.ConfirmImpactedClustersIds)
	}
	return cloned
}

type InitBundleRevokeResponse struct {
	InitBundleRevocationErrors []*InitBundleRevokeResponse_InitBundleRevocationError `protobuf:"bytes,2,rep,name=init_bundle_revocation_errors,json=initBundleRevocationErrors,proto3" json:"init_bundle_revocation_errors,omitempty"`
	InitBundleRevokedIds       []string                                              `protobuf:"bytes,3,rep,name=init_bundle_revoked_ids,json=initBundleRevokedIds,proto3" json:"init_bundle_revoked_ids,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                              `json:"-"`
	XXX_unrecognized           []byte                                                `json:"-"`
	XXX_sizecache              int32                                                 `json:"-"`
}

func (m *InitBundleRevokeResponse) Reset()         { *m = InitBundleRevokeResponse{} }
func (m *InitBundleRevokeResponse) String() string { return proto.CompactTextString(m) }
func (*InitBundleRevokeResponse) ProtoMessage()    {}
func (*InitBundleRevokeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{6}
}
func (m *InitBundleRevokeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleRevokeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleRevokeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleRevokeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleRevokeResponse.Merge(m, src)
}
func (m *InitBundleRevokeResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleRevokeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleRevokeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleRevokeResponse proto.InternalMessageInfo

func (m *InitBundleRevokeResponse) GetInitBundleRevocationErrors() []*InitBundleRevokeResponse_InitBundleRevocationError {
	if m != nil {
		return m.InitBundleRevocationErrors
	}
	return nil
}

func (m *InitBundleRevokeResponse) GetInitBundleRevokedIds() []string {
	if m != nil {
		return m.InitBundleRevokedIds
	}
	return nil
}

func (m *InitBundleRevokeResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleRevokeResponse) Clone() *InitBundleRevokeResponse {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleRevokeResponse)
	*cloned = *m

	if m.InitBundleRevocationErrors != nil {
		cloned.InitBundleRevocationErrors = make([]*InitBundleRevokeResponse_InitBundleRevocationError, len(m.InitBundleRevocationErrors))
		for idx, v := range m.InitBundleRevocationErrors {
			cloned.InitBundleRevocationErrors[idx] = v.Clone()
		}
	}
	if m.InitBundleRevokedIds != nil {
		cloned.InitBundleRevokedIds = make([]string, len(m.InitBundleRevokedIds))
		copy(cloned.InitBundleRevokedIds, m.InitBundleRevokedIds)
	}
	return cloned
}

type InitBundleRevokeResponse_InitBundleRevocationError struct {
	Id                   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error                string                            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ImpactedClusters     []*InitBundleMeta_ImpactedCluster `protobuf:"bytes,3,rep,name=impacted_clusters,json=impactedClusters,proto3" json:"impacted_clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) Reset() {
	*m = InitBundleRevokeResponse_InitBundleRevocationError{}
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) String() string {
	return proto.CompactTextString(m)
}
func (*InitBundleRevokeResponse_InitBundleRevocationError) ProtoMessage() {}
func (*InitBundleRevokeResponse_InitBundleRevocationError) Descriptor() ([]byte, []int) {
	return fileDescriptor_72d12c1400ba6fdb, []int{6, 0}
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBundleRevokeResponse_InitBundleRevocationError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBundleRevokeResponse_InitBundleRevocationError.Merge(m, src)
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) XXX_Size() int {
	return m.Size()
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBundleRevokeResponse_InitBundleRevocationError.DiscardUnknown(m)
}

var xxx_messageInfo_InitBundleRevokeResponse_InitBundleRevocationError proto.InternalMessageInfo

func (m *InitBundleRevokeResponse_InitBundleRevocationError) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) GetImpactedClusters() []*InitBundleMeta_ImpactedCluster {
	if m != nil {
		return m.ImpactedClusters
	}
	return nil
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) MessageClone() proto.Message {
	return m.Clone()
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) Clone() *InitBundleRevokeResponse_InitBundleRevocationError {
	if m == nil {
		return nil
	}
	cloned := new(InitBundleRevokeResponse_InitBundleRevocationError)
	*cloned = *m

	if m.ImpactedClusters != nil {
		cloned.ImpactedClusters = make([]*InitBundleMeta_ImpactedCluster, len(m.ImpactedClusters))
		for idx, v := range m.ImpactedClusters {
			cloned.ImpactedClusters[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*InitBundleMeta)(nil), "v1.InitBundleMeta")
	proto.RegisterType((*InitBundleMeta_ImpactedCluster)(nil), "v1.InitBundleMeta.ImpactedCluster")
	proto.RegisterType((*InitBundleGenResponse)(nil), "v1.InitBundleGenResponse")
	proto.RegisterType((*GetCAConfigResponse)(nil), "v1.GetCAConfigResponse")
	proto.RegisterType((*InitBundleMetasResponse)(nil), "v1.InitBundleMetasResponse")
	proto.RegisterType((*InitBundleGenRequest)(nil), "v1.InitBundleGenRequest")
	proto.RegisterType((*InitBundleRevokeRequest)(nil), "v1.InitBundleRevokeRequest")
	proto.RegisterType((*InitBundleRevokeResponse)(nil), "v1.InitBundleRevokeResponse")
	proto.RegisterType((*InitBundleRevokeResponse_InitBundleRevocationError)(nil), "v1.InitBundleRevokeResponse.InitBundleRevocationError")
}

func init() { proto.RegisterFile("api/v1/cluster_init_service.proto", fileDescriptor_72d12c1400ba6fdb) }

var fileDescriptor_72d12c1400ba6fdb = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0x5e, 0x3b, 0x80, 0x94, 0xc9, 0x92, 0xcd, 0xce, 0xb2, 0xc2, 0x18, 0x08, 0xac, 0xb5, 0xac,
	0xb2, 0x08, 0x6c, 0x25, 0x2b, 0xb6, 0x2a, 0x3d, 0x85, 0x08, 0x45, 0x39, 0x54, 0x95, 0xdc, 0x52,
	0x55, 0xbd, 0x58, 0x13, 0xfb, 0x25, 0x1d, 0x25, 0xfe, 0xa8, 0x67, 0x62, 0x91, 0x4b, 0x0f, 0xfd,
	0x09, 0x6d, 0x0f, 0xfd, 0x3b, 0xbd, 0xf5, 0x58, 0xa9, 0x7f, 0x80, 0xd2, 0xfe, 0x90, 0xca, 0x33,
	0xce, 0xb7, 0xa1, 0x52, 0x2f, 0xc8, 0x33, 0xef, 0xf3, 0x3e, 0xcf, 0x3c, 0x0f, 0xf3, 0x4e, 0xd0,
	0x5f, 0x24, 0xa2, 0x56, 0x52, 0xb7, 0xdc, 0xc1, 0x90, 0x71, 0x88, 0x1d, 0x1a, 0x50, 0xee, 0x30,
	0x88, 0x13, 0xea, 0x82, 0x19, 0xc5, 0x21, 0x0f, 0xb1, 0x9a, 0xd4, 0x75, 0x9c, 0xc1, 0xc0, 0x8f,
	0xf8, 0x48, 0xee, 0xeb, 0x3b, 0xbd, 0x30, 0xec, 0x0d, 0xc0, 0x4a, 0x4b, 0x24, 0x08, 0x42, 0x4e,
	0x38, 0x0d, 0x03, 0x96, 0x55, 0xf7, 0xb2, 0xaa, 0x58, 0x75, 0x87, 0x97, 0x16, 0xa7, 0x3e, 0x30,
	0x4e, 0xfc, 0x28, 0x03, 0x60, 0xc6, 0xc3, 0x98, 0xf4, 0xc0, 0x1a, 0x32, 0x88, 0xe5, 0x9e, 0x71,
	0xad, 0xa2, 0x72, 0x27, 0xa0, 0xfc, 0x6c, 0x18, 0x78, 0x03, 0x78, 0x08, 0x9c, 0xe0, 0x32, 0x52,
	0xa9, 0xa7, 0x29, 0xfb, 0x4a, 0xad, 0x68, 0xab, 0xd4, 0xc3, 0x18, 0xad, 0x04, 0xc4, 0x07, 0x4d,
	0x15, 0x3b, 0xe2, 0x1b, 0x3f, 0x42, 0xbf, 0x53, 0x3f, 0x22, 0x2e, 0x07, 0xcf, 0xc9, 0x8c, 0x30,
	0x6d, 0x6d, 0xbf, 0x50, 0x2b, 0x35, 0x0c, 0x33, 0xa9, 0x9b, 0xf3, 0x94, 0x66, 0x27, 0xc3, 0xb6,
	0x24, 0xd4, 0xae, 0xd0, 0xf9, 0x0d, 0x86, 0xef, 0x23, 0xe4, 0xc6, 0x40, 0x52, 0x3e, 0xc2, 0xb5,
	0xc2, 0xbe, 0x52, 0x2b, 0x35, 0x74, 0x53, 0x3a, 0x32, 0xc7, 0x8e, 0xcc, 0x27, 0x63, 0x47, 0x76,
	0x31, 0x43, 0x37, 0x39, 0x3e, 0x9a, 0xb6, 0x76, 0x47, 0xda, 0x8a, 0x68, 0x5d, 0x37, 0x33, 0xaf,
	0xe6, 0x05, 0x83, 0x78, 0x82, 0x3e, 0x1b, 0xa5, 0x42, 0x70, 0x15, 0xd1, 0x18, 0x58, 0x2a, 0xb4,
	0xfa, 0x63, 0xa1, 0x0c, 0xdd, 0xe4, 0xfa, 0x09, 0xfa, 0x6d, 0xc1, 0xc8, 0x24, 0x1b, 0x65, 0x26,
	0x1b, 0x99, 0x9f, 0x3a, 0xce, 0xcf, 0x78, 0xa7, 0xa0, 0x3f, 0xa7, 0x79, 0xb4, 0x21, 0xb0, 0x81,
	0x45, 0x61, 0xc0, 0x00, 0xff, 0x83, 0x56, 0x7c, 0xe0, 0x44, 0x74, 0x97, 0x1a, 0x78, 0x39, 0x38,
	0x5b, 0xd4, 0xf1, 0x11, 0xc2, 0x2f, 0x60, 0xe0, 0x3b, 0x09, 0x19, 0x0c, 0x81, 0x39, 0x5d, 0x51,
	0x17, 0x0a, 0xbf, 0xda, 0x95, 0xb4, 0xf2, 0x54, 0x14, 0x64, 0x1f, 0x3e, 0x40, 0xe5, 0xfe, 0xb0,
	0x0b, 0x2e, 0x1f, 0x8c, 0x91, 0x05, 0x81, 0x5c, 0xcf, 0x76, 0x25, 0xcc, 0x68, 0xa1, 0x3f, 0xda,
	0xc0, 0x5b, 0xcd, 0x56, 0x18, 0x5c, 0xd2, 0xde, 0xe4, 0x4c, 0xf9, 0x5a, 0x4a, 0xbe, 0x96, 0xd1,
	0x42, 0x9b, 0xf3, 0x27, 0x66, 0x13, 0xa2, 0x1a, 0x5a, 0xa5, 0x1c, 0x7c, 0xa6, 0x29, 0xe2, 0x5a,
	0xe4, 0xb9, 0x93, 0x00, 0xe3, 0x10, 0x6d, 0x2c, 0xe4, 0xf3, 0x72, 0x08, 0x8c, 0xe7, 0x85, 0x6b,
	0x04, 0xb3, 0x82, 0x36, 0x24, 0x61, 0x1f, 0xc6, 0xf0, 0x0a, 0x2a, 0x50, 0x4f, 0xca, 0x15, 0xed,
	0xf4, 0x13, 0x37, 0xd1, 0xae, 0x9b, 0xba, 0x8b, 0x7d, 0x67, 0xe9, 0xb6, 0x3a, 0x29, 0x56, 0x15,
	0x58, 0x3d, 0x03, 0x2d, 0xfc, 0x73, 0x59, 0xc7, 0x63, 0xc6, 0x17, 0x15, 0x69, 0xcb, 0x82, 0x99,
	0xc5, 0x11, 0xda, 0x15, 0xd3, 0x2b, 0x43, 0x72, 0x62, 0x48, 0x42, 0x57, 0x8c, 0xa4, 0x03, 0x71,
	0x1c, 0xc6, 0x92, 0xbf, 0xd4, 0xf8, 0x7f, 0xde, 0xfa, 0x3c, 0xc9, 0x42, 0x41, 0xf6, 0x9f, 0xa7,
	0xed, 0xb6, 0x4e, 0x6f, 0x2b, 0x31, 0x7c, 0x82, 0x36, 0x17, 0xa5, 0xfb, 0xe0, 0x09, 0x53, 0x05,
	0x61, 0x6a, 0x83, 0x2e, 0x08, 0x7a, 0x1d, 0x8f, 0xe9, 0x6f, 0x14, 0xb4, 0x75, 0xab, 0xe0, 0xd2,
	0xe4, 0x6f, 0xa0, 0x55, 0x61, 0x24, 0xbb, 0xcc, 0x72, 0x91, 0x3f, 0xfb, 0x85, 0x9f, 0x9f, 0xfd,
	0xc6, 0x87, 0x02, 0xc2, 0xd9, 0x22, 0xed, 0x7d, 0x2c, 0xdf, 0x42, 0xfc, 0x0a, 0x55, 0xe4, 0xc9,
	0xa7, 0x84, 0x78, 0x3b, 0x3f, 0x4a, 0x71, 0x01, 0xf4, 0x9d, 0xbb, 0x72, 0x36, 0xac, 0xd7, 0x9f,
	0xbf, 0xbd, 0x55, 0xff, 0x6d, 0xfc, 0x3d, 0xf3, 0xf8, 0x1e, 0xa7, 0x21, 0x59, 0xe9, 0x9f, 0x63,
	0x19, 0x24, 0xb3, 0x64, 0x92, 0xa7, 0xca, 0x21, 0xbe, 0x40, 0xa5, 0x99, 0x01, 0xc1, 0xc5, 0x94,
	0xfd, 0x3c, 0x7d, 0x8d, 0xf5, 0xcd, 0xf4, 0x33, 0x67, 0x78, 0x0c, 0x43, 0x68, 0xec, 0x60, 0x7d,
	0x49, 0xc3, 0x25, 0xc7, 0xae, 0xe4, 0x71, 0x50, 0xb9, 0x0d, 0x7c, 0x7a, 0x4c, 0x36, 0xcb, 0xbc,
	0xbd, 0x1c, 0xe0, 0x64, 0xa2, 0x8c, 0x03, 0xc1, 0xbe, 0x87, 0x77, 0xef, 0x74, 0x80, 0x19, 0xc2,
	0x6d, 0x08, 0x20, 0x26, 0x7c, 0x36, 0x39, 0x6d, 0x9e, 0x79, 0x3a, 0x66, 0xfa, 0x56, 0x4e, 0x25,
	0x53, 0xac, 0x09, 0x45, 0xc3, 0xb8, 0x5b, 0xf1, 0x54, 0x39, 0x3c, 0xbb, 0xf7, 0xf1, 0xa6, 0xaa,
	0x7c, 0xba, 0xa9, 0x2a, 0xd7, 0x37, 0x55, 0xe5, 0xfd, 0xd7, 0xea, 0x2f, 0x48, 0xa3, 0xa1, 0xc9,
	0x38, 0x71, 0xfb, 0x71, 0x78, 0x25, 0x1f, 0x56, 0x93, 0x44, 0xd4, 0x4c, 0xea, 0xcf, 0x4b, 0xa6,
	0x25, 0x7f, 0xdc, 0x1e, 0x24, 0xf5, 0x67, 0x4a, 0x77, 0x4d, 0x14, 0xff, 0xfb, 0x1e, 0x00, 0x00,
	0xff, 0xff, 0x62, 0x2a, 0xb3, 0xbd, 0x19, 0x07, 0x00, 0x00,
}

func (m *InitBundleMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImpactedClusters) > 0 {
		for iNdEx := len(m.ImpactedClusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImpactedClusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClusterInitService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ExpiresAt != nil {
		{
			size, err := m.ExpiresAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterInitService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedBy != nil {
		{
			size, err := m.CreatedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterInitService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterInitService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleMeta_ImpactedCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleMeta_ImpactedCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleMeta_ImpactedCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleGenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleGenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleGenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KubectlBundle) > 0 {
		i -= len(m.KubectlBundle)
		copy(dAtA[i:], m.KubectlBundle)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.KubectlBundle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HelmValuesBundle) > 0 {
		i -= len(m.HelmValuesBundle)
		copy(dAtA[i:], m.HelmValuesBundle)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.HelmValuesBundle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterInitService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCAConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCAConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCAConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HelmValuesBundle) > 0 {
		i -= len(m.HelmValuesBundle)
		copy(dAtA[i:], m.HelmValuesBundle)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.HelmValuesBundle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleMetasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleMetasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleMetasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClusterInitService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleGenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleGenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleGenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleRevokeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleRevokeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleRevokeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfirmImpactedClustersIds) > 0 {
		for iNdEx := len(m.ConfirmImpactedClustersIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConfirmImpactedClustersIds[iNdEx])
			copy(dAtA[i:], m.ConfirmImpactedClustersIds[iNdEx])
			i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.ConfirmImpactedClustersIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleRevokeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleRevokeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleRevokeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InitBundleRevokedIds) > 0 {
		for iNdEx := len(m.InitBundleRevokedIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitBundleRevokedIds[iNdEx])
			copy(dAtA[i:], m.InitBundleRevokedIds[iNdEx])
			i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.InitBundleRevokedIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InitBundleRevocationErrors) > 0 {
		for iNdEx := len(m.InitBundleRevocationErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitBundleRevocationErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClusterInitService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImpactedClusters) > 0 {
		for iNdEx := len(m.ImpactedClusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImpactedClusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClusterInitService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClusterInitService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClusterInitService(dAtA []byte, offset int, v uint64) int {
	offset -= sovClusterInitService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitBundleMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.CreatedBy != nil {
		l = m.CreatedBy.Size()
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = m.ExpiresAt.Size()
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if len(m.ImpactedClusters) > 0 {
		for _, e := range m.ImpactedClusters {
			l = e.Size()
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleMeta_ImpactedCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleGenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	l = len(m.HelmValuesBundle)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	l = len(m.KubectlBundle)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCAConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HelmValuesBundle)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleMetasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleGenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleRevokeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if len(m.ConfirmImpactedClustersIds) > 0 {
		for _, s := range m.ConfirmImpactedClustersIds {
			l = len(s)
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleRevokeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InitBundleRevocationErrors) > 0 {
		for _, e := range m.InitBundleRevocationErrors {
			l = e.Size()
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if len(m.InitBundleRevokedIds) > 0 {
		for _, s := range m.InitBundleRevokedIds {
			l = len(s)
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitBundleRevokeResponse_InitBundleRevocationError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovClusterInitService(uint64(l))
	}
	if len(m.ImpactedClusters) > 0 {
		for _, e := range m.ImpactedClusters {
			l = e.Size()
			n += 1 + l + sovClusterInitService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClusterInitService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClusterInitService(x uint64) (n int) {
	return sovClusterInitService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitBundleMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBy == nil {
				m.CreatedBy = &storage.User{}
			}
			if err := m.CreatedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = &types.Timestamp{}
			}
			if err := m.ExpiresAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpactedClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImpactedClusters = append(m.ImpactedClusters, &InitBundleMeta_ImpactedCluster{})
			if err := m.ImpactedClusters[len(m.ImpactedClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleMeta_ImpactedCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpactedCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpactedCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleGenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleGenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleGenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &InitBundleMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmValuesBundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelmValuesBundle = append(m.HelmValuesBundle[:0], dAtA[iNdEx:postIndex]...)
			if m.HelmValuesBundle == nil {
				m.HelmValuesBundle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubectlBundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubectlBundle = append(m.KubectlBundle[:0], dAtA[iNdEx:postIndex]...)
			if m.KubectlBundle == nil {
				m.KubectlBundle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCAConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCAConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCAConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmValuesBundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelmValuesBundle = append(m.HelmValuesBundle[:0], dAtA[iNdEx:postIndex]...)
			if m.HelmValuesBundle == nil {
				m.HelmValuesBundle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleMetasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleMetasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleMetasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InitBundleMeta{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleGenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleGenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleGenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleRevokeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleRevokeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleRevokeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmImpactedClustersIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmImpactedClustersIds = append(m.ConfirmImpactedClustersIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleRevokeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleRevokeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleRevokeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitBundleRevocationErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitBundleRevocationErrors = append(m.InitBundleRevocationErrors, &InitBundleRevokeResponse_InitBundleRevocationError{})
			if err := m.InitBundleRevocationErrors[len(m.InitBundleRevocationErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitBundleRevokedIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitBundleRevokedIds = append(m.InitBundleRevokedIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBundleRevokeResponse_InitBundleRevocationError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBundleRevocationError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBundleRevocationError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpactedClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterInitService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImpactedClusters = append(m.ImpactedClusters, &InitBundleMeta_ImpactedCluster{})
			if err := m.ImpactedClusters[len(m.ImpactedClusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterInitService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterInitService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterInitService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterInitService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterInitService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClusterInitService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClusterInitService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClusterInitService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClusterInitService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterInitService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClusterInitService = fmt.Errorf("proto: unexpected end of group")
)
