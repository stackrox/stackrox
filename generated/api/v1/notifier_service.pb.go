// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/notifier_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNotifiersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNotifiersRequest) Reset()         { *m = GetNotifiersRequest{} }
func (m *GetNotifiersRequest) String() string { return proto.CompactTextString(m) }
func (*GetNotifiersRequest) ProtoMessage()    {}
func (*GetNotifiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d701d52c602e61b, []int{0}
}
func (m *GetNotifiersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNotifiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNotifiersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNotifiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNotifiersRequest.Merge(m, src)
}
func (m *GetNotifiersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNotifiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNotifiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNotifiersRequest proto.InternalMessageInfo

func (m *GetNotifiersRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNotifiersRequest) Clone() *GetNotifiersRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNotifiersRequest)
	*cloned = *m

	return cloned
}

type GetNotifiersResponse struct {
	Notifiers            []*storage.Notifier `protobuf:"bytes,1,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetNotifiersResponse) Reset()         { *m = GetNotifiersResponse{} }
func (m *GetNotifiersResponse) String() string { return proto.CompactTextString(m) }
func (*GetNotifiersResponse) ProtoMessage()    {}
func (*GetNotifiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d701d52c602e61b, []int{1}
}
func (m *GetNotifiersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNotifiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNotifiersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNotifiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNotifiersResponse.Merge(m, src)
}
func (m *GetNotifiersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNotifiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNotifiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNotifiersResponse proto.InternalMessageInfo

func (m *GetNotifiersResponse) GetNotifiers() []*storage.Notifier {
	if m != nil {
		return m.Notifiers
	}
	return nil
}

func (m *GetNotifiersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNotifiersResponse) Clone() *GetNotifiersResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetNotifiersResponse)
	*cloned = *m

	if m.Notifiers != nil {
		cloned.Notifiers = make([]*storage.Notifier, len(m.Notifiers))
		for idx, v := range m.Notifiers {
			cloned.Notifiers[idx] = v.Clone()
		}
	}
	return cloned
}

type DeleteNotifierRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNotifierRequest) Reset()         { *m = DeleteNotifierRequest{} }
func (m *DeleteNotifierRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNotifierRequest) ProtoMessage()    {}
func (*DeleteNotifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d701d52c602e61b, []int{2}
}
func (m *DeleteNotifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNotifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNotifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNotifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNotifierRequest.Merge(m, src)
}
func (m *DeleteNotifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNotifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNotifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNotifierRequest proto.InternalMessageInfo

func (m *DeleteNotifierRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteNotifierRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *DeleteNotifierRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteNotifierRequest) Clone() *DeleteNotifierRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteNotifierRequest)
	*cloned = *m

	return cloned
}

type UpdateNotifierRequest struct {
	Notifier *storage.Notifier `protobuf:"bytes,1,opt,name=notifier,proto3" json:"notifier,omitempty"`
	// When false, use the stored credentials of an existing notifier configuration given its ID.
	UpdatePassword       bool     `protobuf:"varint,2,opt,name=update_password,json=updatePassword,proto3" json:"update_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateNotifierRequest) Reset()         { *m = UpdateNotifierRequest{} }
func (m *UpdateNotifierRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifierRequest) ProtoMessage()    {}
func (*UpdateNotifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d701d52c602e61b, []int{3}
}
func (m *UpdateNotifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotifierRequest.Merge(m, src)
}
func (m *UpdateNotifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotifierRequest proto.InternalMessageInfo

func (m *UpdateNotifierRequest) GetNotifier() *storage.Notifier {
	if m != nil {
		return m.Notifier
	}
	return nil
}

func (m *UpdateNotifierRequest) GetUpdatePassword() bool {
	if m != nil {
		return m.UpdatePassword
	}
	return false
}

func (m *UpdateNotifierRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateNotifierRequest) Clone() *UpdateNotifierRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateNotifierRequest)
	*cloned = *m

	cloned.Notifier = m.Notifier.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetNotifiersRequest)(nil), "v1.GetNotifiersRequest")
	proto.RegisterType((*GetNotifiersResponse)(nil), "v1.GetNotifiersResponse")
	proto.RegisterType((*DeleteNotifierRequest)(nil), "v1.DeleteNotifierRequest")
	proto.RegisterType((*UpdateNotifierRequest)(nil), "v1.UpdateNotifierRequest")
}

func init() { proto.RegisterFile("api/v1/notifier_service.proto", fileDescriptor_2d701d52c602e61b) }

var fileDescriptor_2d701d52c602e61b = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xd1, 0x6a, 0x13, 0x4f,
	0x14, 0xc6, 0xff, 0xb3, 0xfd, 0x57, 0x92, 0x93, 0x98, 0xd4, 0x49, 0x62, 0xd7, 0xad, 0x8d, 0x61,
	0x40, 0x0d, 0x01, 0x77, 0x49, 0xbc, 0x2b, 0x78, 0x53, 0x2a, 0xc5, 0x0a, 0x21, 0xac, 0x0a, 0xc5,
	0x0b, 0xcb, 0x36, 0x3b, 0x0d, 0x83, 0xcd, 0xce, 0xba, 0x33, 0x59, 0x2d, 0xe2, 0x8d, 0xaf, 0xe0,
	0x8d, 0x0f, 0xe3, 0x03, 0x78, 0x29, 0xf8, 0x02, 0x12, 0x7d, 0x10, 0xd9, 0x9d, 0x49, 0xba, 0xdb,
	0x5d, 0x84, 0x5e, 0xe6, 0x3b, 0x67, 0x7e, 0xdf, 0x97, 0x73, 0xce, 0xc2, 0xae, 0x17, 0x32, 0x27,
	0x1e, 0x3a, 0x01, 0x97, 0xec, 0x8c, 0xd1, 0xe8, 0x44, 0xd0, 0x28, 0x66, 0x53, 0x6a, 0x87, 0x11,
	0x97, 0x1c, 0x1b, 0xf1, 0xd0, 0x6a, 0xe9, 0x96, 0x29, 0x9f, 0xcf, 0x79, 0xa0, 0x0a, 0x16, 0xd6,
	0x22, 0x9d, 0x87, 0xf2, 0x42, 0x6b, 0x77, 0x67, 0x9c, 0xcf, 0xce, 0xa9, 0x93, 0x94, 0xbc, 0x20,
	0xe0, 0xd2, 0x93, 0x8c, 0x07, 0x42, 0x57, 0x6f, 0x0b, 0xc9, 0x23, 0x6f, 0x46, 0xd7, 0x56, 0x4a,
	0x27, 0x3b, 0xd0, 0x3a, 0xa4, 0x72, 0xac, 0x45, 0xe1, 0xd2, 0x77, 0x0b, 0x2a, 0xe4, 0xd1, 0xff,
	0x15, 0xb4, 0xb5, 0x41, 0x0e, 0xa1, 0x9d, 0x2f, 0x8a, 0x90, 0x07, 0x82, 0x62, 0x07, 0xaa, 0x2b,
	0x8c, 0x30, 0x51, 0x6f, 0xa3, 0x5f, 0x1b, 0xdd, 0xb2, 0xb5, 0x81, 0xbd, 0x6a, 0x77, 0x2f, 0x7b,
	0xc8, 0x13, 0xe8, 0x1c, 0xd0, 0x73, 0x2a, 0xe9, 0xba, 0xa8, 0x7c, 0x70, 0x03, 0x0c, 0xe6, 0x9b,
	0xa8, 0x87, 0xfa, 0x55, 0xd7, 0x60, 0x3e, 0x6e, 0xc3, 0xe6, 0x19, 0x8f, 0xa6, 0xd4, 0x34, 0x7a,
	0xa8, 0x5f, 0x71, 0xd5, 0x0f, 0xc2, 0xa1, 0xf3, 0x2a, 0xf4, 0xbd, 0xe2, 0xf3, 0x47, 0x50, 0x59,
	0x99, 0xa4, 0x90, 0xd2, 0x1c, 0xeb, 0x16, 0xfc, 0x10, 0x9a, 0x8b, 0x94, 0x73, 0x12, 0x7a, 0x42,
	0xbc, 0xe7, 0x91, 0xaf, 0x7d, 0x1a, 0x4a, 0x9e, 0x68, 0x75, 0xf4, 0x6d, 0x13, 0x9a, 0xab, 0xf7,
	0x2f, 0xd4, 0x4a, 0xf0, 0x18, 0x6a, 0x99, 0x61, 0xe0, 0x2d, 0x3b, 0x1e, 0xda, 0x2e, 0x15, 0x7c,
	0x11, 0x4d, 0xe9, 0xfe, 0xc5, 0xb3, 0x03, 0xab, 0x68, 0x4d, 0xac, 0xcf, 0x3f, 0xff, 0x7c, 0x31,
	0xda, 0x18, 0x67, 0x97, 0x2c, 0x9c, 0x8f, 0xcc, 0xff, 0x84, 0x8f, 0xa1, 0x9e, 0x1d, 0x2e, 0xde,
	0x4e, 0x80, 0x25, 0xbb, 0xb0, 0xcc, 0x62, 0x41, 0xed, 0x81, 0x74, 0x52, 0x7c, 0x13, 0xdf, 0xcc,
	0xe1, 0xf1, 0x11, 0xd4, 0x26, 0x8b, 0xcb, 0xa4, 0xc5, 0x5c, 0x56, 0x35, 0x41, 0x3e, 0x4d, 0x8e,
	0x87, 0xec, 0xa6, 0x8c, 0x6d, 0xab, 0x24, 0xe2, 0x1e, 0x1a, 0xe0, 0x31, 0xd4, 0x27, 0x5c, 0xfc,
	0x13, 0x56, 0xf2, 0xbf, 0xcd, 0x14, 0x8a, 0x49, 0x3e, 0x58, 0xc2, 0x7b, 0x0e, 0xf5, 0x97, 0x54,
	0x5c, 0x33, 0x1c, 0xb9, 0x12, 0x4e, 0x52, 0x21, 0x13, 0x98, 0x0b, 0x8d, 0xfc, 0x59, 0xe1, 0x3b,
	0xc9, 0xdb, 0xd2, 0x53, 0xcb, 0x62, 0xf5, 0x5a, 0x06, 0x65, 0x6b, 0x79, 0x03, 0x8d, 0xfc, 0xad,
	0x29, 0x66, 0xe9, 0xfd, 0x65, 0x99, 0x0f, 0x52, 0x66, 0x6f, 0xb4, 0x73, 0x85, 0xb9, 0xfe, 0xde,
	0xf4, 0x40, 0x4f, 0xa1, 0x95, 0x0c, 0x40, 0xf1, 0xfc, 0x6b, 0x9a, 0xdc, 0x4f, 0x4d, 0xee, 0x11,
	0xab, 0x38, 0x0f, 0x47, 0x9d, 0xb0, 0xbf, 0x87, 0x06, 0xfb, 0xf6, 0xf7, 0x65, 0x17, 0xfd, 0x58,
	0x76, 0xd1, 0xaf, 0x65, 0x17, 0x7d, 0xfd, 0xdd, 0xfd, 0x0f, 0x4c, 0xc6, 0x6d, 0x21, 0xbd, 0xe9,
	0xdb, 0x88, 0x7f, 0x50, 0x5f, 0xbe, 0xed, 0x85, 0xcc, 0x8e, 0x87, 0xaf, 0x8d, 0x78, 0x78, 0x6c,
	0x9c, 0xde, 0x48, 0xb5, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x87, 0xa8, 0xdd, 0x98, 0x91,
	0x04, 0x00, 0x00,
}

func (m *GetNotifiersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifiersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNotifiersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetNotifiersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNotifiersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNotifiersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notifiers) > 0 {
		for iNdEx := len(m.Notifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotifierService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNotifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNotifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNotifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNotifierService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatePassword {
		i--
		if m.UpdatePassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Notifier != nil {
		{
			size, err := m.Notifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotifierService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotifierService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotifierService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNotifiersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNotifiersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifiers) > 0 {
		for _, e := range m.Notifiers {
			l = e.Size()
			n += 1 + l + sovNotifierService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteNotifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNotifierService(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateNotifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notifier != nil {
		l = m.Notifier.Size()
		n += 1 + l + sovNotifierService(uint64(l))
	}
	if m.UpdatePassword {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotifierService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotifierService(x uint64) (n int) {
	return sovNotifierService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNotifiersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifierService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifiersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifiersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotifierService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotifierService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNotifiersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifierService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNotifiersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNotifiersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotifierService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotifierService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifiers = append(m.Notifiers, &storage.Notifier{})
			if err := m.Notifiers[len(m.Notifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifierService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotifierService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNotifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifierService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNotifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNotifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifierService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotifierService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNotifierService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotifierService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifierService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotifierService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotifierService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notifier == nil {
				m.Notifier = &storage.Notifier{}
			}
			if err := m.Notifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePassword = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNotifierService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotifierService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotifierService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotifierService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifierService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotifierService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotifierService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotifierService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotifierService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotifierService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotifierService = fmt.Errorf("proto: unexpected end of group")
)
