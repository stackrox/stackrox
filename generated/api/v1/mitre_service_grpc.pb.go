// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/mitre_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MitreAttackService_ListMitreAttackVectors_FullMethodName = "/v1.MitreAttackService/ListMitreAttackVectors"
	MitreAttackService_GetMitreAttackVector_FullMethodName   = "/v1.MitreAttackService/GetMitreAttackVector"
)

// MitreAttackServiceClient is the client API for MitreAttackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MitreAttackServiceClient interface {
	// ListMitreAttackVectors returns all MITRE ATT&CK vectors.
	ListMitreAttackVectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMitreAttackVectorsResponse, error)
	// GetMitreAttackVector returns the full MITRE ATT&CK vector for a tactic with all its techniques.
	GetMitreAttackVector(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetMitreVectorResponse, error)
}

type mitreAttackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMitreAttackServiceClient(cc grpc.ClientConnInterface) MitreAttackServiceClient {
	return &mitreAttackServiceClient{cc}
}

func (c *mitreAttackServiceClient) ListMitreAttackVectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMitreAttackVectorsResponse, error) {
	out := new(ListMitreAttackVectorsResponse)
	err := c.cc.Invoke(ctx, MitreAttackService_ListMitreAttackVectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitreAttackServiceClient) GetMitreAttackVector(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetMitreVectorResponse, error) {
	out := new(GetMitreVectorResponse)
	err := c.cc.Invoke(ctx, MitreAttackService_GetMitreAttackVector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MitreAttackServiceServer is the server API for MitreAttackService service.
// All implementations should embed UnimplementedMitreAttackServiceServer
// for forward compatibility
type MitreAttackServiceServer interface {
	// ListMitreAttackVectors returns all MITRE ATT&CK vectors.
	ListMitreAttackVectors(context.Context, *Empty) (*ListMitreAttackVectorsResponse, error)
	// GetMitreAttackVector returns the full MITRE ATT&CK vector for a tactic with all its techniques.
	GetMitreAttackVector(context.Context, *ResourceByID) (*GetMitreVectorResponse, error)
}

// UnimplementedMitreAttackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMitreAttackServiceServer struct {
}

func (UnimplementedMitreAttackServiceServer) ListMitreAttackVectors(context.Context, *Empty) (*ListMitreAttackVectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMitreAttackVectors not implemented")
}
func (UnimplementedMitreAttackServiceServer) GetMitreAttackVector(context.Context, *ResourceByID) (*GetMitreVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMitreAttackVector not implemented")
}

// UnsafeMitreAttackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MitreAttackServiceServer will
// result in compilation errors.
type UnsafeMitreAttackServiceServer interface {
	mustEmbedUnimplementedMitreAttackServiceServer()
}

func RegisterMitreAttackServiceServer(s grpc.ServiceRegistrar, srv MitreAttackServiceServer) {
	s.RegisterService(&MitreAttackService_ServiceDesc, srv)
}

func _MitreAttackService_ListMitreAttackVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitreAttackServiceServer).ListMitreAttackVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitreAttackService_ListMitreAttackVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitreAttackServiceServer).ListMitreAttackVectors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitreAttackService_GetMitreAttackVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitreAttackServiceServer).GetMitreAttackVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitreAttackService_GetMitreAttackVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitreAttackServiceServer).GetMitreAttackVector(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// MitreAttackService_ServiceDesc is the grpc.ServiceDesc for MitreAttackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MitreAttackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MitreAttackService",
	HandlerType: (*MitreAttackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMitreAttackVectors",
			Handler:    _MitreAttackService_ListMitreAttackVectors_Handler,
		},
		{
			MethodName: "GetMitreAttackVector",
			Handler:    _MitreAttackService_GetMitreAttackVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/mitre_service.proto",
}
