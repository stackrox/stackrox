{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/notification_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/notifications": {
      "get": {
        "summary": "GetNotifications returns the list of notifications. The events may be filtered by\ndedicated fields.",
        "operationId": "NotificationService_GetNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "description": "For filtering notifications starting from a specific timestamp, i.e. the lower boundary.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "until",
            "description": "For filtering notifications up until a specific timestamp, i.e. the upper boundary.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "domain",
            "description": "For filtering notifications from a specific domain.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceType",
            "description": "For filtering notifications associated with a specific resource type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationType",
            "description": "For filtering notifications based on their type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NOTIFICATION_TYPE_GENERIC",
              "NOTIFICATION_TYPE_LOG_MESSAGE"
            ],
            "default": "NOTIFICATION_TYPE_GENERIC"
          },
          {
            "name": "level",
            "description": "For filtering notifications based on their level.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NOTIFICATION_LEVEL_UNKNOWN",
              "NOTIFICATION_LEVEL_INFO",
              "NOTIFICATION_LEVEL_SUCCESS",
              "NOTIFICATION_LEVEL_WARN",
              "NOTIFICATION_LEVEL_DANGER"
            ],
            "default": "NOTIFICATION_LEVEL_UNKNOWN"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/v1/notifications/{id}": {
      "get": {
        "summary": "GetNotification retrieves a notification by ID.",
        "operationId": "NotificationService_GetNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Notification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID of the notification."
        },
        "type": {
          "$ref": "#/definitions/v1NotificationType",
          "description": "Type of the notification."
        },
        "level": {
          "$ref": "#/definitions/v1NotificationLevel",
          "description": "Level associated with the notification. The level is categorized into danger, warn, info,\nsuccess."
        },
        "message": {
          "type": "string",
          "description": "Message associated with the notification. The message may include detailed information\nfor this particular notification."
        },
        "hint": {
          "type": "string",
          "description": "Hint associated with the notification. The hint may include different information based\non the type of notification. It can include instructions to resolve a notification, or\ninformational hints."
        },
        "domain": {
          "type": "string",
          "description": "Domain associated with the notification. A notification's domain outlines the feature domain where\nthe notification was created from. As an example, this might be \"Image Scanning\".\nIn case of notifications that cannot be tied to a specific domain, this will be \"General\"."
        },
        "resourceType": {
          "type": "string",
          "description": "Resource type associated with the notification. A notification may refer to an underlying resource\nsuch as a particular image. In that case, the resource type will be filled here."
        },
        "resourceId": {
          "type": "string",
          "description": "Resource ID associated with the notification. If a notification refers to an underlying resource,\nthe resource ID identifies the underlying resource."
        },
        "occurrences": {
          "type": "string",
          "format": "int64",
          "description": "Occurrences associated with the notification. Notifications may occur multiple times, the occurrences\nwill track the amount."
        },
        "lastOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "Specifies the time the notification has last occurred."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Specifies the time the notification has been created."
        }
      },
      "description": "Notifications are emitted by Central. They are used to create transparency for users\nfor asynchronous, background tasks.\nCurrently, notifications only cover logs emitted by Central."
    },
    "v1NotificationLevel": {
      "type": "string",
      "enum": [
        "NOTIFICATION_LEVEL_UNKNOWN",
        "NOTIFICATION_LEVEL_INFO",
        "NOTIFICATION_LEVEL_SUCCESS",
        "NOTIFICATION_LEVEL_WARN",
        "NOTIFICATION_LEVEL_DANGER"
      ],
      "default": "NOTIFICATION_LEVEL_UNKNOWN",
      "description": "Notification level exposes the different levels which a notification can have."
    },
    "v1NotificationType": {
      "type": "string",
      "enum": [
        "NOTIFICATION_TYPE_GENERIC",
        "NOTIFICATION_TYPE_LOG_MESSAGE"
      ],
      "default": "NOTIFICATION_TYPE_GENERIC",
      "description": "Notification type exposes the different types of notifications.\nCurrently, the notification type is either generic or contains a log message."
    },
    "v1NotificationsResponse": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Notification"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    }
  }
}
