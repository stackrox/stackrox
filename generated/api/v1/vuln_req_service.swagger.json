{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/vuln_req_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cve/requests": {
      "get": {
        "summary": "ListVulnerabilityRequests returns the list of vulnerability requests.",
        "operationId": "VulnerabilityRequestService_ListVulnerabilityRequests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListVulnerabilityRequestsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/defer": {
      "post": {
        "summary": "DeferVulnerability starts the deferral process for the specified vulnerability.",
        "operationId": "VulnerabilityRequestService_DeferVulnerability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeferVulnResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeferVulnRequest"
            }
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/false-positive": {
      "post": {
        "summary": "FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.",
        "operationId": "VulnerabilityRequestService_FalsePositiveVulnerability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FalsePositiveVulnResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1FalsePositiveVulnRequest"
            }
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/{id}": {
      "get": {
        "summary": "GetVulnerabilityRequest returns the requested vulnerability request by ID.",
        "operationId": "VulnerabilityRequestService_GetVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVulnerabilityRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      },
      "delete": {
        "summary": "DeleteVulnerabilityRequest deletes a vulnerability request.",
        "operationId": "VulnerabilityRequestService_DeleteVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/{id}/approve": {
      "post": {
        "summary": "ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the\nassociated vulnerabilities are not watched in workflows such as policy detection, risk, etc.",
        "operationId": "VulnerabilityRequestService_ApproveVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ApproveVulnRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ApproveVulnRequest"
            }
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/{id}/deny": {
      "post": {
        "summary": "DenyVulnRequest denies a vulnerability request.",
        "operationId": "VulnerabilityRequestService_DenyVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DenyVulnRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DenyVulnRequest"
            }
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/{id}/undo": {
      "post": {
        "summary": "UndoVulnerabilityRequest undoes a vulnerability request.",
        "operationId": "VulnerabilityRequestService_UndoVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UndoVulnRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    },
    "/v1/cve/requests/{id}/update": {
      "post": {
        "summary": "UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.",
        "operationId": "VulnerabilityRequestService_UpdateVulnerabilityRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateVulnRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateVulnRequest"
            }
          }
        ],
        "tags": [
          "VulnerabilityRequestService"
        ]
      }
    }
  },
  "definitions": {
    "RequestExpiryExpiryType": {
      "type": "string",
      "enum": [
        "TIME",
        "ALL_CVE_FIXABLE",
        "ANY_CVE_FIXABLE"
      ],
      "default": "TIME"
    },
    "ScopeGlobal": {
      "type": "object"
    },
    "VulnerabilityRequestCVEs": {
      "type": "object",
      "properties": {
        "cves": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These are (NVD) vulnerability identifiers, `cve` field of `storage.CVE`, and *not* the `id` field.\nFor example, CVE-2021-44832."
        }
      }
    },
    "VulnerabilityRequestScopeImage": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageApprover": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "storageDeferralRequest": {
      "type": "object",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/storageRequestExpiry"
        }
      }
    },
    "storageDeferralUpdate": {
      "type": "object",
      "properties": {
        "CVEs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expiry": {
          "$ref": "#/definitions/storageRequestExpiry"
        }
      }
    },
    "storageFalsePositiveRequest": {
      "type": "object"
    },
    "storageFalsePositiveUpdate": {
      "type": "object",
      "properties": {
        "CVEs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageRequestComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/storageSlimUser"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageRequestExpiry": {
      "type": "object",
      "properties": {
        "expiresWhenFixed": {
          "type": "boolean",
          "description": "Indicates that this request expires when the associated vulnerability is fixed."
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates the timestamp when this request expires."
        },
        "expiryType": {
          "$ref": "#/definitions/RequestExpiryExpiryType",
          "description": "This field is under development, DO NOT USE FOR NON-DEVELOPMENT PURPOSES.\nThis field can be used only for deferral requests.\nThis field indicates the type of expiry set for the request.\n`TIME` indicates that the request has a fixed expiry time. If used, `expires_on` must be set.\n`ALL_CVE_FIXABLE` indicates the request expires if all CVEs in the request is fixable.\n`ANY_CVE_FIXABLE` indicates the request expires if any CVE in the request is fixable."
        }
      }
    },
    "storageRequestStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "APPROVED",
        "DENIED",
        "APPROVED_PENDING_UPDATE"
      ],
      "default": "PENDING",
      "description": "Indicates the status of a request. Requests canceled by the user before they are acted upon by the approver\nare not tracked/persisted (with the exception of audit logs if it is turned on).\n\n - PENDING: Default request state. It indicates that the request has not been fulfilled and that an action (approve/deny) is required.\n - APPROVED: Indicates that the request has been approved by the approver.\n - DENIED: Indicates that the request has been denied by the approver.\n - APPROVED_PENDING_UPDATE: Indicates that the original request was approved, but an update is still pending an approval or denial."
    },
    "storageRequester": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "storageSlimUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "storageVulnerabilityRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "targetState": {
          "$ref": "#/definitions/storageVulnerabilityState",
          "description": "Indicates the state the vulnerabilities will move to once the request is complete."
        },
        "status": {
          "$ref": "#/definitions/storageRequestStatus",
          "description": "Indicates the status of a request."
        },
        "expired": {
          "type": "boolean",
          "description": "Indicates if this request is a historical request that is no longer in effect\ndue to deferral expiry, cancellation, or restarting cve observation."
        },
        "requestor": {
          "$ref": "#/definitions/storageSlimUser"
        },
        "approvers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageSlimUser"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageRequestComment"
          }
        },
        "scope": {
          "$ref": "#/definitions/storageVulnerabilityRequestScope"
        },
        "requesterV2": {
          "$ref": "#/definitions/storageRequester"
        },
        "approversV2": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageApprover"
          }
        },
        "deferralReq": {
          "$ref": "#/definitions/storageDeferralRequest"
        },
        "fpRequest": {
          "$ref": "#/definitions/storageFalsePositiveRequest"
        },
        "cves": {
          "$ref": "#/definitions/VulnerabilityRequestCVEs"
        },
        "updatedDeferralReq": {
          "$ref": "#/definitions/storageDeferralRequest"
        },
        "deferralUpdate": {
          "$ref": "#/definitions/storageDeferralUpdate"
        },
        "falsePositiveUpdate": {
          "$ref": "#/definitions/storageFalsePositiveUpdate"
        }
      },
      "description": "Next available tag: 30\nVulnerabilityRequest encapsulates a request such as deferral request and false-positive request."
    },
    "storageVulnerabilityRequestScope": {
      "type": "object",
      "properties": {
        "imageScope": {
          "$ref": "#/definitions/VulnerabilityRequestScopeImage",
          "description": "This field can be used to apply the request to selected images."
        },
        "globalScope": {
          "$ref": "#/definitions/ScopeGlobal",
          "description": "If set, the scope of this request is system-wide."
        }
      }
    },
    "storageVulnerabilityState": {
      "type": "string",
      "enum": [
        "OBSERVED",
        "DEFERRED",
        "FALSE_POSITIVE"
      ],
      "default": "OBSERVED",
      "description": "VulnerabilityState indicates if vulnerability is being observed or deferred(/suppressed). By default, it vulnerabilities are observed."
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1ApproveVulnRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "v1ApproveVulnRequestResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1DeferVulnRequest": {
      "type": "object",
      "properties": {
        "cve": {
          "type": "string",
          "description": "This field indicates the CVEs requested to be deferred."
        },
        "comment": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageVulnerabilityRequestScope"
        },
        "expiresWhenFixed": {
          "type": "boolean"
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "next available tag: 6"
    },
    "v1DeferVulnResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1DenyVulnRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "v1DenyVulnRequestResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1FalsePositiveVulnRequest": {
      "type": "object",
      "properties": {
        "cve": {
          "type": "string",
          "description": "This field indicates the CVE requested to be marked as false-positive."
        },
        "scope": {
          "$ref": "#/definitions/storageVulnerabilityRequestScope"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "v1FalsePositiveVulnResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1GetVulnerabilityRequestResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1ListVulnerabilityRequestsResponse": {
      "type": "object",
      "properties": {
        "requestInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageVulnerabilityRequest"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1UndoVulnRequestResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    },
    "v1UpdateVulnRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/storageRequestExpiry"
        }
      }
    },
    "v1UpdateVulnRequestResponse": {
      "type": "object",
      "properties": {
        "requestInfo": {
          "$ref": "#/definitions/storageVulnerabilityRequest"
        }
      }
    }
  }
}
