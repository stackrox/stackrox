// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/namespace_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Namespace struct {
	Metadata             *storage.NamespaceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NumDeployments       int32                      `protobuf:"varint,2,opt,name=num_deployments,json=numDeployments,proto3" json:"num_deployments,omitempty"`
	NumSecrets           int32                      `protobuf:"varint,3,opt,name=num_secrets,json=numSecrets,proto3" json:"num_secrets,omitempty"`
	NumNetworkPolicies   int32                      `protobuf:"varint,4,opt,name=num_network_policies,json=numNetworkPolicies,proto3" json:"num_network_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_a595f584f52ae852, []int{0}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetMetadata() *storage.NamespaceMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Namespace) GetNumDeployments() int32 {
	if m != nil {
		return m.NumDeployments
	}
	return 0
}

func (m *Namespace) GetNumSecrets() int32 {
	if m != nil {
		return m.NumSecrets
	}
	return 0
}

func (m *Namespace) GetNumNetworkPolicies() int32 {
	if m != nil {
		return m.NumNetworkPolicies
	}
	return 0
}

func (m *Namespace) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Namespace) Clone() *Namespace {
	if m == nil {
		return nil
	}
	cloned := new(Namespace)
	*cloned = *m

	cloned.Metadata = m.Metadata.Clone()
	return cloned
}

type GetNamespacesResponse struct {
	Namespaces           []*Namespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetNamespacesResponse) Reset()         { *m = GetNamespacesResponse{} }
func (m *GetNamespacesResponse) String() string { return proto.CompactTextString(m) }
func (*GetNamespacesResponse) ProtoMessage()    {}
func (*GetNamespacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a595f584f52ae852, []int{1}
}
func (m *GetNamespacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespacesResponse.Merge(m, src)
}
func (m *GetNamespacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespacesResponse proto.InternalMessageInfo

func (m *GetNamespacesResponse) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *GetNamespacesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNamespacesResponse) Clone() *GetNamespacesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetNamespacesResponse)
	*cloned = *m

	if m.Namespaces != nil {
		cloned.Namespaces = make([]*Namespace, len(m.Namespaces))
		for idx, v := range m.Namespaces {
			cloned.Namespaces[idx] = v.Clone()
		}
	}
	return cloned
}

type GetNamespaceRequest struct {
	Query                *RawQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetNamespaceRequest) Reset()         { *m = GetNamespaceRequest{} }
func (m *GetNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*GetNamespaceRequest) ProtoMessage()    {}
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a595f584f52ae852, []int{2}
}
func (m *GetNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespaceRequest.Merge(m, src)
}
func (m *GetNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespaceRequest proto.InternalMessageInfo

func (m *GetNamespaceRequest) GetQuery() *RawQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetNamespaceRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNamespaceRequest) Clone() *GetNamespaceRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNamespaceRequest)
	*cloned = *m

	cloned.Query = m.Query.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*Namespace)(nil), "v1.Namespace")
	proto.RegisterType((*GetNamespacesResponse)(nil), "v1.GetNamespacesResponse")
	proto.RegisterType((*GetNamespaceRequest)(nil), "v1.GetNamespaceRequest")
}

func init() { proto.RegisterFile("api/v1/namespace_service.proto", fileDescriptor_a595f584f52ae852) }

var fileDescriptor_a595f584f52ae852 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x59, 0x97, 0x22, 0xd8, 0xb4, 0x25, 0xda, 0x50, 0x30, 0x2e, 0x32, 0x91, 0x2f, 0xe4,
	0x82, 0x83, 0x83, 0x84, 0xc4, 0xb5, 0xaa, 0x40, 0x48, 0x50, 0x81, 0x7b, 0x41, 0x70, 0x88, 0x16,
	0x67, 0x14, 0xac, 0x66, 0x77, 0xdc, 0x9d, 0xb5, 0x4b, 0x84, 0xb8, 0xf0, 0x0a, 0x5c, 0x78, 0x19,
	0xc4, 0x95, 0x23, 0x12, 0x2f, 0x80, 0x02, 0x0f, 0x82, 0xfc, 0xa7, 0x6e, 0x8c, 0x7a, 0xfd, 0xbe,
	0xdf, 0x7c, 0x3b, 0x9f, 0x3d, 0xdc, 0x97, 0x59, 0x3a, 0x2e, 0xa2, 0xb1, 0x96, 0x0a, 0x28, 0x93,
	0x09, 0x4c, 0x09, 0x4c, 0x91, 0x26, 0x10, 0x66, 0x06, 0x2d, 0x0a, 0xa7, 0x88, 0xbc, 0x41, 0xc3,
	0x24, 0xa8, 0x14, 0xea, 0xda, 0xf0, 0xf6, 0x1a, 0x91, 0x40, 0x9a, 0xe4, 0x7d, 0x77, 0xca, 0xbb,
	0x33, 0x47, 0x9c, 0x2f, 0x60, 0x5c, 0x32, 0x52, 0x6b, 0xb4, 0xd2, 0xa6, 0xa8, 0xa9, 0x71, 0x87,
	0x64, 0xd1, 0xc8, 0x39, 0xac, 0x3d, 0xaa, 0xc0, 0xca, 0x99, 0xb4, 0xb2, 0x26, 0x82, 0xef, 0x8c,
	0x5f, 0x3b, 0x3c, 0x33, 0xc5, 0x23, 0x7e, 0xf5, 0xcc, 0x77, 0xd9, 0x90, 0x8d, 0x7a, 0x13, 0x2f,
	0x6c, 0x22, 0xc2, 0x96, 0x7a, 0xd1, 0x10, 0x71, 0xcb, 0x8a, 0x7b, 0xfc, 0xba, 0xce, 0xd5, 0x74,
	0x06, 0xd9, 0x02, 0x97, 0x0a, 0xb4, 0x25, 0xd7, 0x19, 0xb2, 0xd1, 0x66, 0xbc, 0xa3, 0x73, 0x75,
	0x70, 0xae, 0x8a, 0xbb, 0xbc, 0x57, 0x82, 0x04, 0x89, 0x01, 0x4b, 0xee, 0x46, 0x05, 0x71, 0x9d,
	0xab, 0xa3, 0x5a, 0x11, 0x0f, 0xf8, 0x8d, 0x12, 0xd0, 0x60, 0x4f, 0xd1, 0x1c, 0x4f, 0x33, 0x5c,
	0xa4, 0x49, 0x0a, 0xe4, 0x5e, 0xae, 0x48, 0xa1, 0x73, 0x75, 0x58, 0x5b, 0x2f, 0x1b, 0x27, 0x78,
	0xc2, 0x77, 0x9f, 0x82, 0x6d, 0xb7, 0xa3, 0x18, 0x28, 0x43, 0x4d, 0x20, 0xee, 0x73, 0xde, 0xd6,
	0x26, 0x97, 0x0d, 0x37, 0x46, 0xbd, 0xc9, 0x76, 0x58, 0x44, 0xe7, 0x4d, 0xe2, 0x35, 0x20, 0x78,
	0xcc, 0x07, 0xeb, 0x39, 0x31, 0x9c, 0xe4, 0x40, 0x56, 0x04, 0x7c, 0xf3, 0x24, 0x07, 0xb3, 0x6c,
	0xbe, 0xc7, 0x56, 0x19, 0x10, 0xcb, 0xd3, 0x57, 0xa5, 0x16, 0xd7, 0xd6, 0xe4, 0x1b, 0xe3, 0xfd,
	0x76, 0xf0, 0xa8, 0xfe, 0x3f, 0xe2, 0x2d, 0xdf, 0xee, 0xec, 0x25, 0x6e, 0x95, 0xa3, 0x17, 0x3c,
	0xe1, 0xdd, 0xfe, 0xdf, 0x68, 0x3b, 0x04, 0x37, 0x3f, 0xff, 0xfa, 0xfb, 0xc5, 0xe9, 0x8b, 0x9d,
	0xce, 0xe5, 0x90, 0x78, 0xce, 0xb7, 0xd6, 0x07, 0x44, 0xbf, 0x5a, 0x0b, 0x08, 0x73, 0x93, 0xc0,
	0xfe, 0xf2, 0xd9, 0x81, 0xd7, 0x6d, 0x1a, 0xec, 0x55, 0x41, 0xbb, 0x62, 0xd0, 0x0d, 0x1a, 0x7f,
	0x4c, 0x67, 0x9f, 0xf6, 0xc3, 0x1f, 0x2b, 0x9f, 0xfd, 0x5c, 0xf9, 0xec, 0xf7, 0xca, 0x67, 0x5f,
	0xff, 0xf8, 0x97, 0xb8, 0x9b, 0x62, 0x48, 0x56, 0x26, 0xc7, 0x06, 0x3f, 0xd4, 0x97, 0x12, 0xca,
	0x2c, 0x0d, 0x8b, 0xe8, 0x8d, 0x53, 0x44, 0xaf, 0x9d, 0x77, 0x57, 0x2a, 0xed, 0xe1, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x85, 0xa5, 0x5a, 0x31, 0xd5, 0x02, 0x00, 0x00,
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumNetworkPolicies != 0 {
		i = encodeVarintNamespaceService(dAtA, i, uint64(m.NumNetworkPolicies))
		i--
		dAtA[i] = 0x20
	}
	if m.NumSecrets != 0 {
		i = encodeVarintNamespaceService(dAtA, i, uint64(m.NumSecrets))
		i--
		dAtA[i] = 0x18
	}
	if m.NumDeployments != 0 {
		i = encodeVarintNamespaceService(dAtA, i, uint64(m.NumDeployments))
		i--
		dAtA[i] = 0x10
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namespaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNamespaceService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNamespaceService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNamespaceService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovNamespaceService(uint64(l))
	}
	if m.NumDeployments != 0 {
		n += 1 + sovNamespaceService(uint64(m.NumDeployments))
	}
	if m.NumSecrets != 0 {
		n += 1 + sovNamespaceService(uint64(m.NumSecrets))
	}
	if m.NumNetworkPolicies != 0 {
		n += 1 + sovNamespaceService(uint64(m.NumNetworkPolicies))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNamespacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovNamespaceService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovNamespaceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNamespaceService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNamespaceService(x uint64) (n int) {
	return sovNamespaceService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespaceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &storage.NamespaceMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeployments", wireType)
			}
			m.NumDeployments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeployments |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSecrets", wireType)
			}
			m.NumSecrets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSecrets |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNetworkPolicies", wireType)
			}
			m.NumNetworkPolicies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNetworkPolicies |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespaceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespaceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &Namespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespaceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespaceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &RawQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespaceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespaceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespaceService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespaceService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespaceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNamespaceService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNamespaceService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNamespaceService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNamespaceService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespaceService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNamespaceService = fmt.Errorf("proto: unexpected end of group")
)
