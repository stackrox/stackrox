// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/config_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PutConfigRequest struct {
	Config               *storage.Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PutConfigRequest) Reset()         { *m = PutConfigRequest{} }
func (m *PutConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PutConfigRequest) ProtoMessage()    {}
func (*PutConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{0}
}
func (m *PutConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutConfigRequest.Merge(m, src)
}
func (m *PutConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutConfigRequest proto.InternalMessageInfo

func (m *PutConfigRequest) GetConfig() *storage.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PutConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PutConfigRequest) Clone() *PutConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(PutConfigRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type DayOption struct {
	NumDays              uint32   `protobuf:"varint,1,opt,name=num_days,json=numDays,proto3" json:"num_days,omitempty"`
	Enabled              bool     `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DayOption) Reset()         { *m = DayOption{} }
func (m *DayOption) String() string { return proto.CompactTextString(m) }
func (*DayOption) ProtoMessage()    {}
func (*DayOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{1}
}
func (m *DayOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DayOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DayOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DayOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DayOption.Merge(m, src)
}
func (m *DayOption) XXX_Size() int {
	return m.Size()
}
func (m *DayOption) XXX_DiscardUnknown() {
	xxx_messageInfo_DayOption.DiscardUnknown(m)
}

var xxx_messageInfo_DayOption proto.InternalMessageInfo

func (m *DayOption) GetNumDays() uint32 {
	if m != nil {
		return m.NumDays
	}
	return 0
}

func (m *DayOption) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DayOption) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DayOption) Clone() *DayOption {
	if m == nil {
		return nil
	}
	cloned := new(DayOption)
	*cloned = *m

	return cloned
}

type VulnerabilityExceptionConfig struct {
	ExpiryOptions        *VulnerabilityExceptionConfig_ExpiryOptions `protobuf:"bytes,1,opt,name=expiry_options,json=expiryOptions,proto3" json:"expiry_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *VulnerabilityExceptionConfig) Reset()         { *m = VulnerabilityExceptionConfig{} }
func (m *VulnerabilityExceptionConfig) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityExceptionConfig) ProtoMessage()    {}
func (*VulnerabilityExceptionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{2}
}
func (m *VulnerabilityExceptionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityExceptionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityExceptionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityExceptionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityExceptionConfig.Merge(m, src)
}
func (m *VulnerabilityExceptionConfig) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityExceptionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityExceptionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityExceptionConfig proto.InternalMessageInfo

func (m *VulnerabilityExceptionConfig) GetExpiryOptions() *VulnerabilityExceptionConfig_ExpiryOptions {
	if m != nil {
		return m.ExpiryOptions
	}
	return nil
}

func (m *VulnerabilityExceptionConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityExceptionConfig) Clone() *VulnerabilityExceptionConfig {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityExceptionConfig)
	*cloned = *m

	cloned.ExpiryOptions = m.ExpiryOptions.Clone()
	return cloned
}

type VulnerabilityExceptionConfig_FixableCVEOptions struct {
	// This options allows users to expire the vulnerability deferral request if and only if **all** vulnerabilities
	// in the requests become fixable.
	AllFixable bool `protobuf:"varint,1,opt,name=all_fixable,json=allFixable,proto3" json:"all_fixable,omitempty"`
	// This options allows users to expire the vulnerability deferral request if **any** vulnerability
	// in the requests become fixable.
	AnyFixable           bool     `protobuf:"varint,2,opt,name=any_fixable,json=anyFixable,proto3" json:"any_fixable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) Reset() {
	*m = VulnerabilityExceptionConfig_FixableCVEOptions{}
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) String() string {
	return proto.CompactTextString(m)
}
func (*VulnerabilityExceptionConfig_FixableCVEOptions) ProtoMessage() {}
func (*VulnerabilityExceptionConfig_FixableCVEOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{2, 0}
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityExceptionConfig_FixableCVEOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityExceptionConfig_FixableCVEOptions.Merge(m, src)
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityExceptionConfig_FixableCVEOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityExceptionConfig_FixableCVEOptions proto.InternalMessageInfo

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) GetAllFixable() bool {
	if m != nil {
		return m.AllFixable
	}
	return false
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) GetAnyFixable() bool {
	if m != nil {
		return m.AnyFixable
	}
	return false
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) Clone() *VulnerabilityExceptionConfig_FixableCVEOptions {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityExceptionConfig_FixableCVEOptions)
	*cloned = *m

	return cloned
}

type VulnerabilityExceptionConfig_ExpiryOptions struct {
	// This allows users to set expiry interval based on number of days.
	DayOptions []*DayOption `protobuf:"bytes,1,rep,name=day_options,json=dayOptions,proto3" json:"day_options,omitempty"`
	// This allows users to set vulnerability request expiry based on the CVEs.
	FixableCveOptions *VulnerabilityExceptionConfig_FixableCVEOptions `protobuf:"bytes,2,opt,name=fixable_cve_options,json=fixableCveOptions,proto3" json:"fixable_cve_options,omitempty"`
	// This option, if true, allows UI to show a custom date picker for setting expiry date.
	CustomDate           bool     `protobuf:"varint,3,opt,name=custom_date,json=customDate,proto3" json:"custom_date,omitempty"`
	Indefinite           bool     `protobuf:"varint,4,opt,name=indefinite,proto3" json:"indefinite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) Reset() {
	*m = VulnerabilityExceptionConfig_ExpiryOptions{}
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) String() string {
	return proto.CompactTextString(m)
}
func (*VulnerabilityExceptionConfig_ExpiryOptions) ProtoMessage() {}
func (*VulnerabilityExceptionConfig_ExpiryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{2, 1}
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnerabilityExceptionConfig_ExpiryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityExceptionConfig_ExpiryOptions.Merge(m, src)
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) XXX_Size() int {
	return m.Size()
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityExceptionConfig_ExpiryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityExceptionConfig_ExpiryOptions proto.InternalMessageInfo

func (m *VulnerabilityExceptionConfig_ExpiryOptions) GetDayOptions() []*DayOption {
	if m != nil {
		return m.DayOptions
	}
	return nil
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) GetFixableCveOptions() *VulnerabilityExceptionConfig_FixableCVEOptions {
	if m != nil {
		return m.FixableCveOptions
	}
	return nil
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) GetCustomDate() bool {
	if m != nil {
		return m.CustomDate
	}
	return false
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) GetIndefinite() bool {
	if m != nil {
		return m.Indefinite
	}
	return false
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) MessageClone() proto.Message {
	return m.Clone()
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) Clone() *VulnerabilityExceptionConfig_ExpiryOptions {
	if m == nil {
		return nil
	}
	cloned := new(VulnerabilityExceptionConfig_ExpiryOptions)
	*cloned = *m

	if m.DayOptions != nil {
		cloned.DayOptions = make([]*DayOption, len(m.DayOptions))
		for idx, v := range m.DayOptions {
			cloned.DayOptions[idx] = v.Clone()
		}
	}
	cloned.FixableCveOptions = m.FixableCveOptions.Clone()
	return cloned
}

type GetVulnerabilityExceptionConfigResponse struct {
	Config               *VulnerabilityExceptionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetVulnerabilityExceptionConfigResponse) Reset() {
	*m = GetVulnerabilityExceptionConfigResponse{}
}
func (m *GetVulnerabilityExceptionConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetVulnerabilityExceptionConfigResponse) ProtoMessage()    {}
func (*GetVulnerabilityExceptionConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{3}
}
func (m *GetVulnerabilityExceptionConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilityExceptionConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilityExceptionConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilityExceptionConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilityExceptionConfigResponse.Merge(m, src)
}
func (m *GetVulnerabilityExceptionConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilityExceptionConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilityExceptionConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilityExceptionConfigResponse proto.InternalMessageInfo

func (m *GetVulnerabilityExceptionConfigResponse) GetConfig() *VulnerabilityExceptionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetVulnerabilityExceptionConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetVulnerabilityExceptionConfigResponse) Clone() *GetVulnerabilityExceptionConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetVulnerabilityExceptionConfigResponse)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type UpdateVulnerabilityExceptionConfigRequest struct {
	Config               *VulnerabilityExceptionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateVulnerabilityExceptionConfigRequest) Reset() {
	*m = UpdateVulnerabilityExceptionConfigRequest{}
}
func (m *UpdateVulnerabilityExceptionConfigRequest) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateVulnerabilityExceptionConfigRequest) ProtoMessage() {}
func (*UpdateVulnerabilityExceptionConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{4}
}
func (m *UpdateVulnerabilityExceptionConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionConfigRequest.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionConfigRequest proto.InternalMessageInfo

func (m *UpdateVulnerabilityExceptionConfigRequest) GetConfig() *VulnerabilityExceptionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionConfigRequest) Clone() *UpdateVulnerabilityExceptionConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionConfigRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type UpdateVulnerabilityExceptionConfigResponse struct {
	Config               *VulnerabilityExceptionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateVulnerabilityExceptionConfigResponse) Reset() {
	*m = UpdateVulnerabilityExceptionConfigResponse{}
}
func (m *UpdateVulnerabilityExceptionConfigResponse) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateVulnerabilityExceptionConfigResponse) ProtoMessage() {}
func (*UpdateVulnerabilityExceptionConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_266c60d3cc05a407, []int{5}
}
func (m *UpdateVulnerabilityExceptionConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVulnerabilityExceptionConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVulnerabilityExceptionConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVulnerabilityExceptionConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVulnerabilityExceptionConfigResponse.Merge(m, src)
}
func (m *UpdateVulnerabilityExceptionConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVulnerabilityExceptionConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVulnerabilityExceptionConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVulnerabilityExceptionConfigResponse proto.InternalMessageInfo

func (m *UpdateVulnerabilityExceptionConfigResponse) GetConfig() *VulnerabilityExceptionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateVulnerabilityExceptionConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateVulnerabilityExceptionConfigResponse) Clone() *UpdateVulnerabilityExceptionConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(UpdateVulnerabilityExceptionConfigResponse)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*PutConfigRequest)(nil), "v1.PutConfigRequest")
	proto.RegisterType((*DayOption)(nil), "v1.DayOption")
	proto.RegisterType((*VulnerabilityExceptionConfig)(nil), "v1.VulnerabilityExceptionConfig")
	proto.RegisterType((*VulnerabilityExceptionConfig_FixableCVEOptions)(nil), "v1.VulnerabilityExceptionConfig.FixableCVEOptions")
	proto.RegisterType((*VulnerabilityExceptionConfig_ExpiryOptions)(nil), "v1.VulnerabilityExceptionConfig.ExpiryOptions")
	proto.RegisterType((*GetVulnerabilityExceptionConfigResponse)(nil), "v1.GetVulnerabilityExceptionConfigResponse")
	proto.RegisterType((*UpdateVulnerabilityExceptionConfigRequest)(nil), "v1.UpdateVulnerabilityExceptionConfigRequest")
	proto.RegisterType((*UpdateVulnerabilityExceptionConfigResponse)(nil), "v1.UpdateVulnerabilityExceptionConfigResponse")
}

func init() { proto.RegisterFile("api/v1/config_service.proto", fileDescriptor_266c60d3cc05a407) }

var fileDescriptor_266c60d3cc05a407 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x7d, 0x4e, 0xdf, 0x6b, 0x9b, 0x9b, 0x17, 0xda, 0x4e, 0x5b, 0x94, 0x9a, 0x2a, 0xad, 0xbc,
	0x69, 0x29, 0x30, 0x51, 0x02, 0x12, 0xa8, 0xdd, 0x20, 0xda, 0x50, 0xb1, 0x81, 0x62, 0xd4, 0x0a,
	0xb1, 0x89, 0x26, 0xce, 0x4d, 0x34, 0xc2, 0xb5, 0x8d, 0x3d, 0xb6, 0xe2, 0x2d, 0x5b, 0x16, 0x2c,
	0xd8, 0xf0, 0x1f, 0x6c, 0xf9, 0x00, 0x96, 0x48, 0xfc, 0x00, 0x2a, 0xfd, 0x10, 0xe4, 0x99, 0xa9,
	0x63, 0x1a, 0xa9, 0x09, 0xb0, 0x8b, 0xcf, 0x3d, 0xf7, 0x9c, 0x73, 0xed, 0x3b, 0x13, 0xb8, 0xc1,
	0x02, 0xde, 0x48, 0x9a, 0x0d, 0xc7, 0xf7, 0xfa, 0x7c, 0xd0, 0x89, 0x30, 0x4c, 0xb8, 0x83, 0x34,
	0x08, 0x7d, 0xe1, 0x93, 0x52, 0xd2, 0x34, 0x89, 0x26, 0xe0, 0x69, 0x20, 0x52, 0x85, 0x9b, 0xeb,
	0x03, 0xdf, 0x1f, 0xb8, 0xd8, 0xc8, 0x4a, 0xcc, 0xf3, 0x7c, 0xc1, 0x04, 0xf7, 0xbd, 0x48, 0x57,
	0x57, 0x22, 0xe1, 0x87, 0x6c, 0x80, 0x5a, 0x53, 0xa1, 0xd6, 0x1e, 0x2c, 0x1e, 0xc5, 0x62, 0x5f,
	0x42, 0x36, 0xbe, 0x89, 0x31, 0x12, 0x64, 0x0b, 0x66, 0x15, 0xa7, 0x66, 0x6c, 0x1a, 0xdb, 0x95,
	0xd6, 0x02, 0xd5, 0xad, 0x54, 0xf3, 0x74, 0xd9, 0x7a, 0x08, 0xe5, 0x03, 0x96, 0x3e, 0x0b, 0x32,
	0x1b, 0xb2, 0x06, 0xf3, 0x5e, 0x7c, 0xda, 0xe9, 0xb1, 0x34, 0x92, 0x7d, 0x55, 0x7b, 0xce, 0x8b,
	0x4f, 0x0f, 0x58, 0x1a, 0x91, 0x1a, 0xcc, 0xa1, 0xc7, 0xba, 0x2e, 0xf6, 0x6a, 0xa5, 0x4d, 0x63,
	0x7b, 0xde, 0xbe, 0x78, 0xb4, 0x3e, 0xcd, 0xc0, 0xfa, 0x49, 0xec, 0x7a, 0x18, 0xb2, 0x2e, 0x77,
	0xb9, 0x48, 0xdb, 0x43, 0x07, 0xa5, 0x9e, 0xb2, 0x22, 0xc7, 0x70, 0x0d, 0x87, 0x01, 0x0f, 0xd3,
	0x8e, 0x2f, 0xe1, 0x48, 0x67, 0xa2, 0x34, 0x69, 0xd2, 0xab, 0x3a, 0x69, 0x5b, 0xb6, 0xa9, 0x70,
	0x91, 0x5d, 0xc5, 0xe2, 0xa3, 0x79, 0x0c, 0x4b, 0x8f, 0xf9, 0x30, 0xcb, 0xb0, 0x7f, 0xd2, 0xd6,
	0x20, 0xd9, 0x80, 0x0a, 0x73, 0xdd, 0x4e, 0x5f, 0x15, 0xa4, 0xd1, 0xbc, 0x0d, 0xcc, 0x75, 0x35,
	0x55, 0x12, 0xbc, 0x34, 0x27, 0x94, 0x34, 0xc1, 0x4b, 0x35, 0xc1, 0x3c, 0x37, 0xa0, 0xfa, 0x8b,
	0x2f, 0xa1, 0x50, 0xe9, 0xb1, 0x62, 0xf8, 0x99, 0xed, 0x4a, 0xab, 0x9a, 0x85, 0xcf, 0xdf, 0x9c,
	0x0d, 0x3d, 0x96, 0xf3, 0xbb, 0xb0, 0xac, 0xe5, 0x3b, 0x4e, 0x82, 0x79, 0x5f, 0x49, 0x0e, 0xdd,
	0x9a, 0x38, 0xf4, 0xd8, 0x50, 0xf6, 0x92, 0x96, 0xdb, 0x4f, 0xb0, 0x30, 0xa7, 0x13, 0x47, 0xc2,
	0xcf, 0x3e, 0x96, 0xc0, 0xda, 0x8c, 0x1a, 0x43, 0x41, 0x07, 0x4c, 0x20, 0xa9, 0x03, 0x70, 0xaf,
	0x87, 0x7d, 0xee, 0x71, 0x81, 0xb5, 0x7f, 0x55, 0x7d, 0x84, 0x58, 0x0e, 0x6c, 0x1d, 0xa2, 0xb8,
	0x2a, 0x88, 0x8d, 0x51, 0xe0, 0x7b, 0x11, 0x92, 0x07, 0x97, 0x76, 0x69, 0x73, 0xd2, 0x08, 0xf9,
	0x72, 0x21, 0xdc, 0x3c, 0x0e, 0xb2, 0x80, 0x57, 0xfb, 0xa8, 0x95, 0xfd, 0x73, 0x9b, 0x3e, 0xec,
	0x4c, 0x63, 0xf3, 0xb7, 0xe3, 0xb4, 0xde, 0xfd, 0x07, 0x55, 0x05, 0xbd, 0x50, 0x87, 0x99, 0x3c,
	0x85, 0x85, 0x43, 0x14, 0x47, 0x71, 0xd7, 0xe5, 0x8e, 0xde, 0xf6, 0x72, 0x26, 0xd7, 0xce, 0x8e,
	0xb4, 0xb9, 0x9a, 0x1f, 0xba, 0x22, 0xc3, 0x5a, 0x7b, 0xfb, 0xed, 0xfc, 0x43, 0x69, 0x99, 0x2c,
	0x8d, 0x6e, 0x87, 0x46, 0x20, 0x09, 0xe4, 0x39, 0x2c, 0x66, 0x7a, 0x21, 0x4f, 0x98, 0xc0, 0x71,
	0xc1, 0xeb, 0x23, 0xc1, 0x22, 0xc5, 0x32, 0xa5, 0xe2, 0x0a, 0x21, 0x45, 0x45, 0xc5, 0x20, 0xef,
	0x0d, 0xd8, 0x98, 0xf0, 0xa5, 0x8b, 0x16, 0xb7, 0xb2, 0x9f, 0x53, 0x6e, 0x86, 0x75, 0x4f, 0xfa,
	0x52, 0x72, 0x7b, 0xdc, 0xb7, 0x81, 0x17, 0x3d, 0x8d, 0xa4, 0x20, 0xc5, 0x31, 0x22, 0x9f, 0x0d,
	0xb0, 0x26, 0x7f, 0x2f, 0x72, 0x27, 0x4b, 0x32, 0xf5, 0xfa, 0x98, 0x74, 0x5a, 0xba, 0xce, 0x7e,
	0x5f, 0x66, 0x6f, 0x9a, 0xbf, 0x95, 0x7d, 0xd7, 0xd8, 0x21, 0x7b, 0x50, 0x3e, 0x44, 0x31, 0xfe,
	0xe6, 0x2e, 0x5f, 0xb1, 0x16, 0x91, 0x0e, 0xff, 0x13, 0x18, 0x39, 0x90, 0x27, 0x50, 0xce, 0xef,
	0x6a, 0xb2, 0x92, 0x35, 0x5f, 0xbe, 0xba, 0xc7, 0x75, 0x56, 0xa5, 0xce, 0x82, 0x59, 0xd0, 0xd9,
	0x35, 0x76, 0x1e, 0xd1, 0x2f, 0x67, 0x75, 0xe3, 0xeb, 0x59, 0xdd, 0xf8, 0x7e, 0x56, 0x37, 0x3e,
	0xfe, 0xa8, 0xff, 0x03, 0x35, 0xee, 0xd3, 0x48, 0x30, 0xe7, 0x75, 0xe8, 0x0f, 0xd5, 0x7f, 0x03,
	0x65, 0x01, 0xa7, 0x49, 0xf3, 0x55, 0x29, 0x69, 0xbe, 0x34, 0xba, 0xb3, 0x12, 0xbb, 0xfb, 0x33,
	0x00, 0x00, 0xff, 0xff, 0x47, 0xa3, 0x47, 0x53, 0x9a, 0x06, 0x00, 0x00,
}

func (m *PutConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DayOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DayOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NumDays != 0 {
		i = encodeVarintConfigService(dAtA, i, uint64(m.NumDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityExceptionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityExceptionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityExceptionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiryOptions != nil {
		{
			size, err := m.ExpiryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AnyFixable {
		i--
		if m.AnyFixable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AllFixable {
		i--
		if m.AllFixable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Indefinite {
		i--
		if m.Indefinite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CustomDate {
		i--
		if m.CustomDate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FixableCveOptions != nil {
		{
			size, err := m.FixableCveOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DayOptions) > 0 {
		for iNdEx := len(m.DayOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DayOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfigService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilityExceptionConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilityExceptionConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilityExceptionConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVulnerabilityExceptionConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVulnerabilityExceptionConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVulnerabilityExceptionConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfigService(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfigService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PutConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DayOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumDays != 0 {
		n += 1 + sovConfigService(uint64(m.NumDays))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityExceptionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryOptions != nil {
		l = m.ExpiryOptions.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityExceptionConfig_FixableCVEOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllFixable {
		n += 2
	}
	if m.AnyFixable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VulnerabilityExceptionConfig_ExpiryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DayOptions) > 0 {
		for _, e := range m.DayOptions {
			l = e.Size()
			n += 1 + l + sovConfigService(uint64(l))
		}
	}
	if m.FixableCveOptions != nil {
		l = m.FixableCveOptions.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.CustomDate {
		n += 2
	}
	if m.Indefinite {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVulnerabilityExceptionConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVulnerabilityExceptionConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovConfigService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfigService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfigService(x uint64) (n int) {
	return sovConfigService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PutConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DayOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DayOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDays", wireType)
			}
			m.NumDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityExceptionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnerabilityExceptionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnerabilityExceptionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryOptions == nil {
				m.ExpiryOptions = &VulnerabilityExceptionConfig_ExpiryOptions{}
			}
			if err := m.ExpiryOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityExceptionConfig_FixableCVEOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixableCVEOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixableCVEOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllFixable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllFixable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyFixable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnyFixable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnerabilityExceptionConfig_ExpiryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpiryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpiryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayOptions = append(m.DayOptions, &DayOption{})
			if err := m.DayOptions[len(m.DayOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixableCveOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FixableCveOptions == nil {
				m.FixableCveOptions = &VulnerabilityExceptionConfig_FixableCVEOptions{}
			}
			if err := m.FixableCveOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CustomDate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indefinite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Indefinite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVulnerabilityExceptionConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilityExceptionConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VulnerabilityExceptionConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VulnerabilityExceptionConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVulnerabilityExceptionConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVulnerabilityExceptionConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VulnerabilityExceptionConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfigService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfigService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfigService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfigService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfigService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfigService = fmt.Errorf("proto: unexpected end of group")
)
