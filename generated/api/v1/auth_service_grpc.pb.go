// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/auth_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_GetAuthStatus_FullMethodName                     = "/v1.AuthService/GetAuthStatus"
	AuthService_ListAuthMachineToMachineConfigs_FullMethodName   = "/v1.AuthService/ListAuthMachineToMachineConfigs"
	AuthService_GetAuthMachineToMachineConfig_FullMethodName     = "/v1.AuthService/GetAuthMachineToMachineConfig"
	AuthService_AddAuthMachineToMachineConfig_FullMethodName     = "/v1.AuthService/AddAuthMachineToMachineConfig"
	AuthService_UpdateAuthMachineToMachineConfig_FullMethodName  = "/v1.AuthService/UpdateAuthMachineToMachineConfig"
	AuthService_DeleteAuthMachineToMachineConfig_FullMethodName  = "/v1.AuthService/DeleteAuthMachineToMachineConfig"
	AuthService_ExchangeAuthMachineToMachineToken_FullMethodName = "/v1.AuthService/ExchangeAuthMachineToMachineToken"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// GetAuthStatus returns the status for the current client.
	GetAuthStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthStatus, error)
	// ListAuthMachineToMachineConfigs lists the available auth machine to machine configs.
	ListAuthMachineToMachineConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAuthMachineToMachineConfigResponse, error)
	// GetAuthMachineToMachineConfig retrieves the specific auth machine to machine config.
	GetAuthMachineToMachineConfig(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAuthMachineToMachineConfigResponse, error)
	// AddAuthMachineToMachineConfig creates a new auth machine to machine config.
	AddAuthMachineToMachineConfig(ctx context.Context, in *AddAuthMachineToMachineConfigRequest, opts ...grpc.CallOption) (*AddAuthMachineToMachineConfigResponse, error)
	// UpdateAuthMachineToMachineConfig updates an existing auth machine to machine config.
	// In case the auth machine to machine config does not exist, a new one will be created.
	UpdateAuthMachineToMachineConfig(ctx context.Context, in *UpdateAuthMachineToMachineConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteAuthMachineToMachineConfig deletes the specific auth machine to machine config.
	// In case a specified auth machine to machine config does not exist is deleted, no error will be returned.
	DeleteAuthMachineToMachineConfig(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// ExchangeAuthMachineToMachineToken exchanges a given identity token for a Central access token based on
	// configured auth machine to machine configs.
	ExchangeAuthMachineToMachineToken(ctx context.Context, in *ExchangeAuthMachineToMachineTokenRequest, opts ...grpc.CallOption) (*ExchangeAuthMachineToMachineTokenResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetAuthStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, AuthService_GetAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListAuthMachineToMachineConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAuthMachineToMachineConfigResponse, error) {
	out := new(ListAuthMachineToMachineConfigResponse)
	err := c.cc.Invoke(ctx, AuthService_ListAuthMachineToMachineConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAuthMachineToMachineConfig(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAuthMachineToMachineConfigResponse, error) {
	out := new(GetAuthMachineToMachineConfigResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAuthMachineToMachineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddAuthMachineToMachineConfig(ctx context.Context, in *AddAuthMachineToMachineConfigRequest, opts ...grpc.CallOption) (*AddAuthMachineToMachineConfigResponse, error) {
	out := new(AddAuthMachineToMachineConfigResponse)
	err := c.cc.Invoke(ctx, AuthService_AddAuthMachineToMachineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAuthMachineToMachineConfig(ctx context.Context, in *UpdateAuthMachineToMachineConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateAuthMachineToMachineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAuthMachineToMachineConfig(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAuthMachineToMachineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExchangeAuthMachineToMachineToken(ctx context.Context, in *ExchangeAuthMachineToMachineTokenRequest, opts ...grpc.CallOption) (*ExchangeAuthMachineToMachineTokenResponse, error) {
	out := new(ExchangeAuthMachineToMachineTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_ExchangeAuthMachineToMachineToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// GetAuthStatus returns the status for the current client.
	GetAuthStatus(context.Context, *Empty) (*AuthStatus, error)
	// ListAuthMachineToMachineConfigs lists the available auth machine to machine configs.
	ListAuthMachineToMachineConfigs(context.Context, *Empty) (*ListAuthMachineToMachineConfigResponse, error)
	// GetAuthMachineToMachineConfig retrieves the specific auth machine to machine config.
	GetAuthMachineToMachineConfig(context.Context, *ResourceByID) (*GetAuthMachineToMachineConfigResponse, error)
	// AddAuthMachineToMachineConfig creates a new auth machine to machine config.
	AddAuthMachineToMachineConfig(context.Context, *AddAuthMachineToMachineConfigRequest) (*AddAuthMachineToMachineConfigResponse, error)
	// UpdateAuthMachineToMachineConfig updates an existing auth machine to machine config.
	// In case the auth machine to machine config does not exist, a new one will be created.
	UpdateAuthMachineToMachineConfig(context.Context, *UpdateAuthMachineToMachineConfigRequest) (*Empty, error)
	// DeleteAuthMachineToMachineConfig deletes the specific auth machine to machine config.
	// In case a specified auth machine to machine config does not exist is deleted, no error will be returned.
	DeleteAuthMachineToMachineConfig(context.Context, *ResourceByID) (*Empty, error)
	// ExchangeAuthMachineToMachineToken exchanges a given identity token for a Central access token based on
	// configured auth machine to machine configs.
	ExchangeAuthMachineToMachineToken(context.Context, *ExchangeAuthMachineToMachineTokenRequest) (*ExchangeAuthMachineToMachineTokenResponse, error)
}

// UnimplementedAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetAuthStatus(context.Context, *Empty) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthStatus not implemented")
}
func (UnimplementedAuthServiceServer) ListAuthMachineToMachineConfigs(context.Context, *Empty) (*ListAuthMachineToMachineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthMachineToMachineConfigs not implemented")
}
func (UnimplementedAuthServiceServer) GetAuthMachineToMachineConfig(context.Context, *ResourceByID) (*GetAuthMachineToMachineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthMachineToMachineConfig not implemented")
}
func (UnimplementedAuthServiceServer) AddAuthMachineToMachineConfig(context.Context, *AddAuthMachineToMachineConfigRequest) (*AddAuthMachineToMachineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthMachineToMachineConfig not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAuthMachineToMachineConfig(context.Context, *UpdateAuthMachineToMachineConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthMachineToMachineConfig not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAuthMachineToMachineConfig(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthMachineToMachineConfig not implemented")
}
func (UnimplementedAuthServiceServer) ExchangeAuthMachineToMachineToken(context.Context, *ExchangeAuthMachineToMachineTokenRequest) (*ExchangeAuthMachineToMachineTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAuthMachineToMachineToken not implemented")
}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListAuthMachineToMachineConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListAuthMachineToMachineConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListAuthMachineToMachineConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListAuthMachineToMachineConfigs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAuthMachineToMachineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthMachineToMachineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthMachineToMachineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthMachineToMachineConfig(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddAuthMachineToMachineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthMachineToMachineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddAuthMachineToMachineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AddAuthMachineToMachineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddAuthMachineToMachineConfig(ctx, req.(*AddAuthMachineToMachineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAuthMachineToMachineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthMachineToMachineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAuthMachineToMachineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateAuthMachineToMachineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAuthMachineToMachineConfig(ctx, req.(*UpdateAuthMachineToMachineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAuthMachineToMachineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAuthMachineToMachineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAuthMachineToMachineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAuthMachineToMachineConfig(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExchangeAuthMachineToMachineToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeAuthMachineToMachineTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExchangeAuthMachineToMachineToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExchangeAuthMachineToMachineToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExchangeAuthMachineToMachineToken(ctx, req.(*ExchangeAuthMachineToMachineTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthStatus",
			Handler:    _AuthService_GetAuthStatus_Handler,
		},
		{
			MethodName: "ListAuthMachineToMachineConfigs",
			Handler:    _AuthService_ListAuthMachineToMachineConfigs_Handler,
		},
		{
			MethodName: "GetAuthMachineToMachineConfig",
			Handler:    _AuthService_GetAuthMachineToMachineConfig_Handler,
		},
		{
			MethodName: "AddAuthMachineToMachineConfig",
			Handler:    _AuthService_AddAuthMachineToMachineConfig_Handler,
		},
		{
			MethodName: "UpdateAuthMachineToMachineConfig",
			Handler:    _AuthService_UpdateAuthMachineToMachineConfig_Handler,
		},
		{
			MethodName: "DeleteAuthMachineToMachineConfig",
			Handler:    _AuthService_DeleteAuthMachineToMachineConfig_Handler,
		},
		{
			MethodName: "ExchangeAuthMachineToMachineToken",
			Handler:    _AuthService_ExchangeAuthMachineToMachineToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/auth_service.proto",
}
