// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/report_configuration_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportConfigurationService_GetReportConfigurations_FullMethodName   = "/v1.ReportConfigurationService/GetReportConfigurations"
	ReportConfigurationService_GetReportConfiguration_FullMethodName    = "/v1.ReportConfigurationService/GetReportConfiguration"
	ReportConfigurationService_PostReportConfiguration_FullMethodName   = "/v1.ReportConfigurationService/PostReportConfiguration"
	ReportConfigurationService_UpdateReportConfiguration_FullMethodName = "/v1.ReportConfigurationService/UpdateReportConfiguration"
	ReportConfigurationService_DeleteReportConfiguration_FullMethodName = "/v1.ReportConfigurationService/DeleteReportConfiguration"
	ReportConfigurationService_CountReportConfigurations_FullMethodName = "/v1.ReportConfigurationService/CountReportConfigurations"
)

// ReportConfigurationServiceClient is the client API for ReportConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportConfigurationServiceClient interface {
	GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error)
	GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetReportConfigurationResponse, error)
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(ctx context.Context, in *PostReportConfigurationRequest, opts ...grpc.CallOption) (*PostReportConfigurationResponse, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(ctx context.Context, in *UpdateReportConfigurationRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteReportConfiguration removes a report configuration given its id
	DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error)
}

type reportConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportConfigurationServiceClient(cc grpc.ClientConnInterface) ReportConfigurationServiceClient {
	return &reportConfigurationServiceClient{cc}
}

func (c *reportConfigurationServiceClient) GetReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetReportConfigurationsResponse, error) {
	out := new(GetReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, ReportConfigurationService_GetReportConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) GetReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetReportConfigurationResponse, error) {
	out := new(GetReportConfigurationResponse)
	err := c.cc.Invoke(ctx, ReportConfigurationService_GetReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) PostReportConfiguration(ctx context.Context, in *PostReportConfigurationRequest, opts ...grpc.CallOption) (*PostReportConfigurationResponse, error) {
	out := new(PostReportConfigurationResponse)
	err := c.cc.Invoke(ctx, ReportConfigurationService_PostReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) UpdateReportConfiguration(ctx context.Context, in *UpdateReportConfigurationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportConfigurationService_UpdateReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) DeleteReportConfiguration(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportConfigurationService_DeleteReportConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportConfigurationServiceClient) CountReportConfigurations(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*CountReportConfigurationsResponse, error) {
	out := new(CountReportConfigurationsResponse)
	err := c.cc.Invoke(ctx, ReportConfigurationService_CountReportConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportConfigurationServiceServer is the server API for ReportConfigurationService service.
// All implementations should embed UnimplementedReportConfigurationServiceServer
// for forward compatibility
type ReportConfigurationServiceServer interface {
	GetReportConfigurations(context.Context, *RawQuery) (*GetReportConfigurationsResponse, error)
	GetReportConfiguration(context.Context, *ResourceByID) (*GetReportConfigurationResponse, error)
	// PostReportConfiguration creates a report configuration
	PostReportConfiguration(context.Context, *PostReportConfigurationRequest) (*PostReportConfigurationResponse, error)
	// UpdateReportConfiguration updates a report configuration
	UpdateReportConfiguration(context.Context, *UpdateReportConfigurationRequest) (*Empty, error)
	// DeleteReportConfiguration removes a report configuration given its id
	DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error)
	// CountReportConfigurations returns the number of report configurations.
	CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error)
}

// UnimplementedReportConfigurationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReportConfigurationServiceServer struct {
}

func (UnimplementedReportConfigurationServiceServer) GetReportConfigurations(context.Context, *RawQuery) (*GetReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfigurations not implemented")
}
func (UnimplementedReportConfigurationServiceServer) GetReportConfiguration(context.Context, *ResourceByID) (*GetReportConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) PostReportConfiguration(context.Context, *PostReportConfigurationRequest) (*PostReportConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) UpdateReportConfiguration(context.Context, *UpdateReportConfigurationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) DeleteReportConfiguration(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportConfiguration not implemented")
}
func (UnimplementedReportConfigurationServiceServer) CountReportConfigurations(context.Context, *RawQuery) (*CountReportConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReportConfigurations not implemented")
}

// UnsafeReportConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportConfigurationServiceServer will
// result in compilation errors.
type UnsafeReportConfigurationServiceServer interface {
	mustEmbedUnimplementedReportConfigurationServiceServer()
}

func RegisterReportConfigurationServiceServer(s grpc.ServiceRegistrar, srv ReportConfigurationServiceServer) {
	s.RegisterService(&ReportConfigurationService_ServiceDesc, srv)
}

func _ReportConfigurationService_GetReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_GetReportConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_GetReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_GetReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).GetReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_PostReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReportConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_PostReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).PostReportConfiguration(ctx, req.(*PostReportConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_UpdateReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_UpdateReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).UpdateReportConfiguration(ctx, req.(*UpdateReportConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_DeleteReportConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_DeleteReportConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).DeleteReportConfiguration(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportConfigurationService_CountReportConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportConfigurationService_CountReportConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportConfigurationServiceServer).CountReportConfigurations(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportConfigurationService_ServiceDesc is the grpc.ServiceDesc for ReportConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ReportConfigurationService",
	HandlerType: (*ReportConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReportConfigurations",
			Handler:    _ReportConfigurationService_GetReportConfigurations_Handler,
		},
		{
			MethodName: "GetReportConfiguration",
			Handler:    _ReportConfigurationService_GetReportConfiguration_Handler,
		},
		{
			MethodName: "PostReportConfiguration",
			Handler:    _ReportConfigurationService_PostReportConfiguration_Handler,
		},
		{
			MethodName: "UpdateReportConfiguration",
			Handler:    _ReportConfigurationService_UpdateReportConfiguration_Handler,
		},
		{
			MethodName: "DeleteReportConfiguration",
			Handler:    _ReportConfigurationService_DeleteReportConfiguration_Handler,
		},
		{
			MethodName: "CountReportConfigurations",
			Handler:    _ReportConfigurationService_CountReportConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/report_configuration_service.proto",
}
