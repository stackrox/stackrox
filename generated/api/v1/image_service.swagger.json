{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/image_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ImageService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/export/images": {
      "get": {
        "operationId": "ImageService_ExportImages",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1ExportImageResponse"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1ExportImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/images": {
      "get": {
        "summary": "ListImages returns all the images that match the input query.",
        "operationId": "ImageService_ListImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ImageService"
        ]
      },
      "delete": {
        "summary": "DeleteImage removes the images based on a query",
        "operationId": "ImageService_DeleteImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "confirm",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/images/cache/invalidate": {
      "get": {
        "summary": "InvalidateScanAndRegistryCaches removes the image metadata cache.",
        "operationId": "ImageService_InvalidateScanAndRegistryCaches",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/images/scan": {
      "post": {
        "summary": "ScanImage scans a single image and returns the result",
        "operationId": "ImageService_ScanImage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ScanImageRequest"
            }
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/images/{id}": {
      "get": {
        "summary": "GetImage returns the image given its ID.",
        "operationId": "ImageService_GetImage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeSnoozed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "stripDescription",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/imagescount": {
      "get": {
        "summary": "CountImages returns a count of images that match the input query.",
        "operationId": "ImageService_CountImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CountImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    },
    "/v1/watchedimages": {
      "get": {
        "summary": "GetWatchedImages returns the list of image names that are currently\nbeing watched.",
        "operationId": "ImageService_GetWatchedImages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWatchedImagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ImageService"
        ]
      },
      "delete": {
        "summary": "UnwatchImage marks an image name to no longer be watched.\nIt returns successfully if the image is no longer being watched\nafter the call, irrespective of whether the image was already being watched.",
        "operationId": "ImageService_UnwatchImage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the image to unwatch.\nShould match the name of a previously watched image.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ImageService"
        ]
      },
      "post": {
        "summary": "WatchImage marks an image name as to be watched.",
        "operationId": "ImageService_WatchImage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WatchImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WatchImageRequest"
            }
          }
        ],
        "tags": [
          "ImageService"
        ]
      }
    }
  },
  "definitions": {
    "CVSSV2AccessComplexity": {
      "type": "string",
      "enum": [
        "ACCESS_HIGH",
        "ACCESS_MEDIUM",
        "ACCESS_LOW"
      ],
      "default": "ACCESS_HIGH"
    },
    "CVSSV2Authentication": {
      "type": "string",
      "enum": [
        "AUTH_MULTIPLE",
        "AUTH_SINGLE",
        "AUTH_NONE"
      ],
      "default": "AUTH_MULTIPLE"
    },
    "CVSSV3Complexity": {
      "type": "string",
      "enum": [
        "COMPLEXITY_LOW",
        "COMPLEXITY_HIGH"
      ],
      "default": "COMPLEXITY_LOW"
    },
    "CVSSV3Privileges": {
      "type": "string",
      "enum": [
        "PRIVILEGE_NONE",
        "PRIVILEGE_LOW",
        "PRIVILEGE_HIGH"
      ],
      "default": "PRIVILEGE_NONE"
    },
    "CVSSV3UserInteraction": {
      "type": "string",
      "enum": [
        "UI_NONE",
        "UI_REQUIRED"
      ],
      "default": "UI_NONE"
    },
    "EmbeddedVulnerabilityVulnerabilityType": {
      "type": "string",
      "enum": [
        "UNKNOWN_VULNERABILITY",
        "IMAGE_VULNERABILITY",
        "K8S_VULNERABILITY",
        "ISTIO_VULNERABILITY",
        "NODE_VULNERABILITY",
        "OPENSHIFT_VULNERABILITY"
      ],
      "default": "UNKNOWN_VULNERABILITY"
    },
    "EnvironmentList": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v4Environment"
          }
        }
      }
    },
    "WatchImageResponseErrorType": {
      "type": "string",
      "enum": [
        "NO_ERROR",
        "INVALID_IMAGE_NAME",
        "NO_VALID_INTEGRATION",
        "SCAN_FAILED"
      ],
      "default": "NO_ERROR"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "scannerV1Components": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "osComponents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1OSComponent"
          }
        },
        "rhelComponents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1RHELComponent"
          }
        },
        "languageComponents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1LanguageComponent"
          }
        },
        "rhelContentSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "scannerV1Executable": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1FeatureNameVersion"
          }
        }
      }
    },
    "scannerV1FeatureNameVersion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "scannerV1JavaComponent": {
      "type": "object",
      "properties": {
        "implementationVersion": {
          "type": "string"
        },
        "mavenVersion": {
          "type": "string"
        },
        "origins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "specificationVersion": {
          "type": "string"
        },
        "bundleName": {
          "type": "string"
        }
      }
    },
    "scannerV1LanguageComponent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/scannerV1SourceType"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "java": {
          "$ref": "#/definitions/scannerV1JavaComponent"
        },
        "python": {
          "$ref": "#/definitions/scannerV1PythonComponent"
        },
        "addedBy": {
          "type": "string"
        }
      }
    },
    "scannerV1Note": {
      "type": "string",
      "enum": [
        "OS_CVES_UNAVAILABLE",
        "OS_CVES_STALE",
        "LANGUAGE_CVES_UNAVAILABLE",
        "CERTIFIED_RHEL_SCAN_UNAVAILABLE"
      ],
      "default": "OS_CVES_UNAVAILABLE"
    },
    "scannerV1OSComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "addedBy": {
          "type": "string"
        },
        "executables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1Executable"
          }
        }
      }
    },
    "scannerV1PythonComponent": {
      "type": "object",
      "properties": {
        "homepage": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "downloadUrl": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "scannerV1RHELComponent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "cpes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addedBy": {
          "type": "string"
        },
        "executables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/scannerV1Executable"
          }
        }
      }
    },
    "scannerV1SourceType": {
      "type": "string",
      "enum": [
        "UNSET_SOURCE_TYPE",
        "JAVA",
        "PYTHON",
        "NPM",
        "GEM",
        "DOTNETCORERUNTIME"
      ],
      "default": "UNSET_SOURCE_TYPE"
    },
    "storageCVSSScore": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/storageSource"
        },
        "url": {
          "type": "string"
        },
        "cvssv2": {
          "$ref": "#/definitions/storageCVSSV2"
        },
        "cvssv3": {
          "$ref": "#/definitions/storageCVSSV3"
        }
      }
    },
    "storageCVSSV2": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "string"
        },
        "attackVector": {
          "$ref": "#/definitions/storageCVSSV2AttackVector"
        },
        "accessComplexity": {
          "$ref": "#/definitions/CVSSV2AccessComplexity"
        },
        "authentication": {
          "$ref": "#/definitions/CVSSV2Authentication"
        },
        "confidentiality": {
          "$ref": "#/definitions/storageCVSSV2Impact"
        },
        "integrity": {
          "$ref": "#/definitions/storageCVSSV2Impact"
        },
        "availability": {
          "$ref": "#/definitions/storageCVSSV2Impact"
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "impactScore": {
          "type": "number",
          "format": "float"
        },
        "score": {
          "type": "number",
          "format": "float"
        },
        "severity": {
          "$ref": "#/definitions/storageCVSSV2Severity"
        }
      }
    },
    "storageCVSSV2AttackVector": {
      "type": "string",
      "enum": [
        "ATTACK_LOCAL",
        "ATTACK_ADJACENT",
        "ATTACK_NETWORK"
      ],
      "default": "ATTACK_LOCAL"
    },
    "storageCVSSV2Impact": {
      "type": "string",
      "enum": [
        "IMPACT_NONE",
        "IMPACT_PARTIAL",
        "IMPACT_COMPLETE"
      ],
      "default": "IMPACT_NONE"
    },
    "storageCVSSV2Severity": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "default": "UNKNOWN"
    },
    "storageCVSSV3": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "string"
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "impactScore": {
          "type": "number",
          "format": "float"
        },
        "attackVector": {
          "$ref": "#/definitions/storageCVSSV3AttackVector"
        },
        "attackComplexity": {
          "$ref": "#/definitions/CVSSV3Complexity"
        },
        "privilegesRequired": {
          "$ref": "#/definitions/CVSSV3Privileges"
        },
        "userInteraction": {
          "$ref": "#/definitions/CVSSV3UserInteraction"
        },
        "scope": {
          "$ref": "#/definitions/storageCVSSV3Scope"
        },
        "confidentiality": {
          "$ref": "#/definitions/storageCVSSV3Impact"
        },
        "integrity": {
          "$ref": "#/definitions/storageCVSSV3Impact"
        },
        "availability": {
          "$ref": "#/definitions/storageCVSSV3Impact"
        },
        "score": {
          "type": "number",
          "format": "float"
        },
        "severity": {
          "$ref": "#/definitions/storageCVSSV3Severity"
        }
      }
    },
    "storageCVSSV3AttackVector": {
      "type": "string",
      "enum": [
        "ATTACK_LOCAL",
        "ATTACK_ADJACENT",
        "ATTACK_NETWORK",
        "ATTACK_PHYSICAL"
      ],
      "default": "ATTACK_LOCAL"
    },
    "storageCVSSV3Impact": {
      "type": "string",
      "enum": [
        "IMPACT_NONE",
        "IMPACT_LOW",
        "IMPACT_HIGH"
      ],
      "default": "IMPACT_NONE"
    },
    "storageCVSSV3Scope": {
      "type": "string",
      "enum": [
        "UNCHANGED",
        "CHANGED"
      ],
      "default": "UNCHANGED"
    },
    "storageCVSSV3Severity": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NONE",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "default": "UNKNOWN"
    },
    "storageContainerImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/storageImageName"
        },
        "notPullable": {
          "type": "boolean"
        },
        "isClusterLocal": {
          "type": "boolean"
        }
      },
      "title": "Next tag: 12"
    },
    "storageCosignSignature": {
      "type": "object",
      "properties": {
        "rawSignature": {
          "type": "string",
          "format": "byte"
        },
        "signaturePayload": {
          "type": "string",
          "format": "byte"
        },
        "certPem": {
          "type": "string",
          "format": "byte"
        },
        "certChainPem": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "storageDataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "mirror": {
          "type": "string"
        }
      }
    },
    "storageEmbeddedImageScanComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "license": {
          "$ref": "#/definitions/storageLicense"
        },
        "vulns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEmbeddedVulnerability"
          }
        },
        "layerIndex": {
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "source": {
          "$ref": "#/definitions/storageSourceType"
        },
        "location": {
          "type": "string"
        },
        "topCvss": {
          "type": "number",
          "format": "float"
        },
        "riskScore": {
          "type": "number",
          "format": "float"
        },
        "fixedBy": {
          "type": "string",
          "description": "Component version that fixes all the fixable vulnerabilities in this component."
        },
        "executables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEmbeddedImageScanComponentExecutable"
          },
          "title": "Values are cleared after moving to cache, remove them from the grpc return as well"
        }
      },
      "title": "Next Tag: 13"
    },
    "storageEmbeddedImageScanComponentExecutable": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageEmbeddedVulnerability": {
      "type": "object",
      "properties": {
        "cve": {
          "type": "string"
        },
        "cvss": {
          "type": "number",
          "format": "float"
        },
        "summary": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "fixedBy": {
          "type": "string"
        },
        "scoreVersion": {
          "$ref": "#/definitions/storageEmbeddedVulnerabilityScoreVersion"
        },
        "cvssV2": {
          "$ref": "#/definitions/storageCVSSV2",
          "title": "CVSSV2 CVSSV3 can be deprecated ROX-26066"
        },
        "cvssV3": {
          "$ref": "#/definitions/storageCVSSV3"
        },
        "publishedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "vulnerabilityType": {
          "$ref": "#/definitions/EmbeddedVulnerabilityVulnerabilityType",
          "description": "For internal purposes only."
        },
        "vulnerabilityTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmbeddedVulnerabilityVulnerabilityType"
          }
        },
        "suppressed": {
          "type": "boolean"
        },
        "suppressActivation": {
          "type": "string",
          "format": "date-time"
        },
        "suppressExpiry": {
          "type": "string",
          "format": "date-time"
        },
        "firstSystemOccurrence": {
          "type": "string",
          "format": "date-time"
        },
        "firstImageOccurrence": {
          "type": "string",
          "format": "date-time"
        },
        "severity": {
          "$ref": "#/definitions/storageVulnerabilitySeverity"
        },
        "state": {
          "$ref": "#/definitions/storageVulnerabilityState"
        },
        "cvssMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageCVSSScore"
          },
          "title": "cvss_metrics stores list of cvss scores from different sources like nvd, Redhat etc"
        }
      },
      "title": "Next Tag: 22"
    },
    "storageEmbeddedVulnerabilityScoreVersion": {
      "type": "string",
      "enum": [
        "V2",
        "V3"
      ],
      "default": "V2",
      "description": "- V2: No unset for automatic backwards compatibility",
      "title": "ScoreVersion can be deprecated ROX-26066"
    },
    "storageImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/storageImageName"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageImageName"
          }
        },
        "metadata": {
          "$ref": "#/definitions/storageImageMetadata"
        },
        "scan": {
          "$ref": "#/definitions/storageImageScan"
        },
        "signatureVerificationData": {
          "$ref": "#/definitions/storageImageSignatureVerificationData"
        },
        "signature": {
          "$ref": "#/definitions/storageImageSignature"
        },
        "components": {
          "type": "integer",
          "format": "int32"
        },
        "cves": {
          "type": "integer",
          "format": "int32"
        },
        "fixableCves": {
          "type": "integer",
          "format": "int32"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "notPullable": {
          "type": "boolean"
        },
        "isClusterLocal": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "riskScore": {
          "type": "number",
          "format": "float"
        },
        "topCvss": {
          "type": "number",
          "format": "float"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageImageNote"
          }
        }
      },
      "title": "Next Tag: 19"
    },
    "storageImageLayer": {
      "type": "object",
      "properties": {
        "instruction": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "storageImageMetadata": {
      "type": "object",
      "properties": {
        "v1": {
          "$ref": "#/definitions/storageV1Metadata",
          "title": "V1Metadata contains all of the V1 docker data. In the normal case we will get this because the image is a\nV1 image OR because the v2 manifest has a link to it in it's config.\nSee https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions\nThe only time we will not get it is in the rare caseof a strictly V2 image schema"
        },
        "v2": {
          "$ref": "#/definitions/storageV2Metadata",
          "title": "We should always get V2 metadata unless the registry is old or the image is strictly V1"
        },
        "layerShas": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "We never need both sets of layers so consolidate them. They will be ordered by oldest->newest"
        },
        "dataSource": {
          "$ref": "#/definitions/storageDataSource",
          "title": "DataSource contains information about which integration was used to pull the metadata"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Version is used to determine if the metadata needs to be re-pulled"
        }
      },
      "title": "If any fields of ImageMetadata are modified including subfields, please check pkg/images/enricher/metadata.go\nto ensure that those changes will be automatically picked up\nNext Tag: 6"
    },
    "storageImageName": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        }
      }
    },
    "storageImageNote": {
      "type": "string",
      "enum": [
        "MISSING_METADATA",
        "MISSING_SCAN_DATA",
        "MISSING_SIGNATURE",
        "MISSING_SIGNATURE_VERIFICATION_DATA"
      ],
      "default": "MISSING_METADATA"
    },
    "storageImageScan": {
      "type": "object",
      "properties": {
        "scannerVersion": {
          "type": "string"
        },
        "scanTime": {
          "type": "string",
          "format": "date-time"
        },
        "components": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEmbeddedImageScanComponent"
          }
        },
        "operatingSystem": {
          "type": "string"
        },
        "dataSource": {
          "$ref": "#/definitions/storageDataSource",
          "title": "DataSource contains information about which integration was used to scan the image"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageImageScanNote"
          }
        },
        "hash": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "Next tag: 8"
    },
    "storageImageScanNote": {
      "type": "string",
      "enum": [
        "UNSET",
        "OS_UNAVAILABLE",
        "PARTIAL_SCAN_DATA",
        "OS_CVES_UNAVAILABLE",
        "OS_CVES_STALE",
        "LANGUAGE_CVES_UNAVAILABLE",
        "CERTIFIED_RHEL_SCAN_UNAVAILABLE"
      ],
      "default": "UNSET"
    },
    "storageImageSignature": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSignature"
          }
        },
        "fetched": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageImageSignatureVerificationData": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageImageSignatureVerificationResult"
          }
        }
      }
    },
    "storageImageSignatureVerificationResult": {
      "type": "object",
      "properties": {
        "verificationTime": {
          "type": "string",
          "format": "date-time"
        },
        "verifierId": {
          "type": "string",
          "description": "verifier_id correlates to the ID of the signature integration used to verify the signature."
        },
        "status": {
          "$ref": "#/definitions/storageImageSignatureVerificationResultStatus"
        },
        "description": {
          "type": "string",
          "description": "description is set in the case of an error with the specific error's message. Otherwise, this will not be set."
        },
        "verifiedImageReferences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The full image names that are verified by this specific signature integration ID."
        }
      },
      "title": "Next Tag: 6"
    },
    "storageImageSignatureVerificationResultStatus": {
      "type": "string",
      "enum": [
        "UNSET",
        "VERIFIED",
        "FAILED_VERIFICATION",
        "INVALID_SIGNATURE_ALGO",
        "CORRUPTED_SIGNATURE",
        "GENERIC_ERROR"
      ],
      "default": "UNSET",
      "description": "Status represents the status of the result.\n\n - VERIFIED: VERIFIED is set when the signature's verification was successful.\n - FAILED_VERIFICATION: FAILED_VERIFICATION is set when the signature's verification failed.\n - INVALID_SIGNATURE_ALGO: INVALID_SIGNATURE_ALGO is set when the signature's algorithm is invalid and unsupported.\n - CORRUPTED_SIGNATURE: CORRUPTED_SIGNATURE is set when the raw signature is corrupted, i.e. wrong base64 encoding.\n - GENERIC_ERROR: GENERIC_ERROR is set when an error occurred during verification that cannot be associated with a specific\nstatus."
    },
    "storageLicense": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "storageListImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "components": {
          "type": "integer",
          "format": "int32"
        },
        "cves": {
          "type": "integer",
          "format": "int32"
        },
        "fixableCves": {
          "type": "integer",
          "format": "int32"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageSignature": {
      "type": "object",
      "properties": {
        "cosign": {
          "$ref": "#/definitions/storageCosignSignature"
        }
      }
    },
    "storageSource": {
      "type": "string",
      "enum": [
        "SOURCE_UNKNOWN",
        "SOURCE_RED_HAT",
        "SOURCE_OSV",
        "SOURCE_NVD"
      ],
      "default": "SOURCE_UNKNOWN"
    },
    "storageSourceType": {
      "type": "string",
      "enum": [
        "OS",
        "PYTHON",
        "JAVA",
        "RUBY",
        "NODEJS",
        "GO",
        "DOTNETCORERUNTIME",
        "INFRASTRUCTURE"
      ],
      "default": "OS"
    },
    "storageV1Metadata": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "type": "string"
        },
        "layers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageImageLayer"
          }
        },
        "user": {
          "type": "string"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "storageV2Metadata": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string"
        }
      }
    },
    "storageVulnerabilitySeverity": {
      "type": "string",
      "enum": [
        "UNKNOWN_VULNERABILITY_SEVERITY",
        "LOW_VULNERABILITY_SEVERITY",
        "MODERATE_VULNERABILITY_SEVERITY",
        "IMPORTANT_VULNERABILITY_SEVERITY",
        "CRITICAL_VULNERABILITY_SEVERITY"
      ],
      "default": "UNKNOWN_VULNERABILITY_SEVERITY"
    },
    "storageVulnerabilityState": {
      "type": "string",
      "enum": [
        "OBSERVED",
        "DEFERRED",
        "FALSE_POSITIVE"
      ],
      "default": "OBSERVED",
      "description": "VulnerabilityState indicates if vulnerability is being observed or deferred(/suppressed). By default, it vulnerabilities are observed.\n\n - OBSERVED: [Default state]"
    },
    "storageWatchedImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1CountImagesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1DeleteImagesResponse": {
      "type": "object",
      "properties": {
        "numDeleted": {
          "type": "integer",
          "format": "int64"
        },
        "dryRun": {
          "type": "boolean"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1ExportImageResponse": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageImage"
        }
      }
    },
    "v1GetWatchedImagesResponse": {
      "type": "object",
      "properties": {
        "watchedImages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageWatchedImage"
          }
        }
      }
    },
    "v1ListImagesResponse": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListImage"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1RawQuery": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      },
      "description": "RawQuery represents the search query string.\nThe format of the query string is \"<field name>:<value,value,...>+<field name>:<value, value,...>+...\"\nFor example:\nTo search for deployments named \"central\" and \"sensor\" in the namespace \"stackrox\", the query string would be\n\"Deployment:central,sensor+Namespace:stackrox\"\nRawQuery is used in ListAPIs to search for a particular object."
    },
    "v1ScanImageInternalRequestSource": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ScanImageInternalResponse": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageImage"
        }
      }
    },
    "v1ScanImageRequest": {
      "type": "object",
      "properties": {
        "imageName": {
          "type": "string"
        },
        "force": {
          "type": "boolean"
        },
        "includeSnoozed": {
          "type": "boolean"
        },
        "cluster": {
          "type": "string",
          "description": "Cluster to delegate scan to, may be the cluster's name or ID."
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1WatchImageRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the image.\nThis must be fully qualified, including a tag,\nbut must NOT include a SHA."
        }
      }
    },
    "v1WatchImageResponse": {
      "type": "object",
      "properties": {
        "normalizedName": {
          "type": "string",
          "title": "If the image was scanned successfully, this returns the normalized name of the image.\nThis depends on what we get from the registry.\nFor example, \"docker.io/wordpress:latest\" -> \"docker.io/library/wordpress:latest\""
        },
        "errorType": {
          "$ref": "#/definitions/WatchImageResponseErrorType"
        },
        "errorMessage": {
          "type": "string",
          "description": "Only set if error_type is NOT equal to \"NO_ERROR\"."
        }
      }
    },
    "v4Contents": {
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v4Package"
          }
        },
        "distributions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v4Distribution"
          }
        },
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v4Repository"
          }
        },
        "environments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EnvironmentList"
          }
        }
      }
    },
    "v4Distribution": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "did": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "versionCodeName": {
          "type": "string"
        },
        "versionId": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "cpe": {
          "type": "string"
        },
        "prettyName": {
          "type": "string"
        }
      }
    },
    "v4Environment": {
      "type": "object",
      "properties": {
        "packageDb": {
          "type": "string"
        },
        "introducedIn": {
          "type": "string"
        },
        "distributionId": {
          "type": "string"
        },
        "repositoryIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Environment describes the surrounding environment a package was\ndiscovered in."
    },
    "v4NormalizedVersion": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "v": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "v4Package": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "normalizedVersion": {
          "$ref": "#/definitions/v4NormalizedVersion"
        },
        "fixedInVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v4Package"
        },
        "packageDb": {
          "type": "string"
        },
        "repositoryHint": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "cpe": {
          "type": "string"
        }
      }
    },
    "v4Repository": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "cpe": {
          "type": "string"
        }
      }
    }
  }
}
