// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/administration_events_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AdministrationEventType exposes the different types of events.
type AdministrationEventType int32

const (
	AdministrationEventType_ADMINISTRATION_EVENT_TYPE_UNKNOWN     AdministrationEventType = 0
	AdministrationEventType_ADMINISTRATION_EVENT_TYPE_GENERIC     AdministrationEventType = 1
	AdministrationEventType_ADMINISTRATION_EVENT_TYPE_LOG_MESSAGE AdministrationEventType = 2
)

var AdministrationEventType_name = map[int32]string{
	0: "ADMINISTRATION_EVENT_TYPE_UNKNOWN",
	1: "ADMINISTRATION_EVENT_TYPE_GENERIC",
	2: "ADMINISTRATION_EVENT_TYPE_LOG_MESSAGE",
}

var AdministrationEventType_value = map[string]int32{
	"ADMINISTRATION_EVENT_TYPE_UNKNOWN":     0,
	"ADMINISTRATION_EVENT_TYPE_GENERIC":     1,
	"ADMINISTRATION_EVENT_TYPE_LOG_MESSAGE": 2,
}

func (x AdministrationEventType) String() string {
	return proto.EnumName(AdministrationEventType_name, int32(x))
}

func (AdministrationEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{0}
}

// AdministrationEventLevel exposes the different levels of events.
type AdministrationEventLevel int32

const (
	AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_UNKNOWN AdministrationEventLevel = 0
	AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_INFO    AdministrationEventLevel = 1
	AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_SUCCESS AdministrationEventLevel = 2
	AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_WARNING AdministrationEventLevel = 3
	AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_ERROR   AdministrationEventLevel = 4
)

var AdministrationEventLevel_name = map[int32]string{
	0: "ADMINISTRATION_EVENT_LEVEL_UNKNOWN",
	1: "ADMINISTRATION_EVENT_LEVEL_INFO",
	2: "ADMINISTRATION_EVENT_LEVEL_SUCCESS",
	3: "ADMINISTRATION_EVENT_LEVEL_WARNING",
	4: "ADMINISTRATION_EVENT_LEVEL_ERROR",
}

var AdministrationEventLevel_value = map[string]int32{
	"ADMINISTRATION_EVENT_LEVEL_UNKNOWN": 0,
	"ADMINISTRATION_EVENT_LEVEL_INFO":    1,
	"ADMINISTRATION_EVENT_LEVEL_SUCCESS": 2,
	"ADMINISTRATION_EVENT_LEVEL_WARNING": 3,
	"ADMINISTRATION_EVENT_LEVEL_ERROR":   4,
}

func (x AdministrationEventLevel) String() string {
	return proto.EnumName(AdministrationEventLevel_name, int32(x))
}

func (AdministrationEventLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{1}
}

// AdministrationEvents are administrative events emitted by Central. They are used to create
// transparency for users for asynchronous, background tasks. Events are part of Central's
// system health view.
type AdministrationEvent struct {
	// UUID of the event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the event.
	Type AdministrationEventType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.AdministrationEventType" json:"type,omitempty"`
	// Level associated with the event. The level is categorized into danger, warn, info,
	// success.
	Level AdministrationEventLevel `protobuf:"varint,3,opt,name=level,proto3,enum=v1.AdministrationEventLevel" json:"level,omitempty"`
	// Message associated with the event. The message may include detailed information
	// for this particular event.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Hint associated with the event. The hint may include different information based
	// on the type of event. It can include instructions to resolve an event, or
	// informational hints.
	Hint string `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	// Domain associated with the event. An event's domain outlines the feature domain where
	// the event was created from. As an example, this might be "Image Scanning".
	// In case of events that cannot be tied to a specific domain, this will be "General".
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// Resource type associated with the event. An event may refer to an underlying resource
	// such as a particular image. In that case, the resource type will be filled here.
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Resource ID associated with the event. If an event refers to an underlying resource,
	// the resource ID identifies the underlying resource. The resource ID is not guaranteed
	// to uniquely identify the object. For example, a resource name is a valid resource ID.
	ResourceId string `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Occurrences associated with the event. When events may occur multiple times, the
	// occurrences track the amount.
	NumOccurrences int64 `protobuf:"varint,9,opt,name=num_occurrences,json=numOccurrences,proto3" json:"num_occurrences,omitempty"`
	// Specifies the time when the event has last occurred.
	LastOccurredAt *types.Timestamp `protobuf:"bytes,10,opt,name=last_occurred_at,json=lastOccurredAt,proto3" json:"last_occurred_at,omitempty"`
	// Specifies the time when the event has been created.
	CreatedAt            *types.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AdministrationEvent) Reset()         { *m = AdministrationEvent{} }
func (m *AdministrationEvent) String() string { return proto.CompactTextString(m) }
func (*AdministrationEvent) ProtoMessage()    {}
func (*AdministrationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{0}
}
func (m *AdministrationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdministrationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdministrationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdministrationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdministrationEvent.Merge(m, src)
}
func (m *AdministrationEvent) XXX_Size() int {
	return m.Size()
}
func (m *AdministrationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AdministrationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AdministrationEvent proto.InternalMessageInfo

func (m *AdministrationEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AdministrationEvent) GetType() AdministrationEventType {
	if m != nil {
		return m.Type
	}
	return AdministrationEventType_ADMINISTRATION_EVENT_TYPE_UNKNOWN
}

func (m *AdministrationEvent) GetLevel() AdministrationEventLevel {
	if m != nil {
		return m.Level
	}
	return AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_UNKNOWN
}

func (m *AdministrationEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AdministrationEvent) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *AdministrationEvent) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AdministrationEvent) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *AdministrationEvent) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *AdministrationEvent) GetNumOccurrences() int64 {
	if m != nil {
		return m.NumOccurrences
	}
	return 0
}

func (m *AdministrationEvent) GetLastOccurredAt() *types.Timestamp {
	if m != nil {
		return m.LastOccurredAt
	}
	return nil
}

func (m *AdministrationEvent) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *AdministrationEvent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AdministrationEvent) Clone() *AdministrationEvent {
	if m == nil {
		return nil
	}
	cloned := new(AdministrationEvent)
	*cloned = *m

	cloned.LastOccurredAt = m.LastOccurredAt.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

type AdministrationEventsFilter struct {
	// Matches events with last_occurred_at after a specific timestamp, i.e. the lower boundary.
	From *types.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Matches events with last_occurred_at before a specific timestamp, i.e. the upper boundary.
	Until *types.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	// Matches events from a specific domain.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Matches events associated with a specific resource type.
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Matches events based on their type.
	Type AdministrationEventType `protobuf:"varint,5,opt,name=type,proto3,enum=v1.AdministrationEventType" json:"type,omitempty"`
	// Matches events based on their level.
	Level                AdministrationEventLevel `protobuf:"varint,6,opt,name=level,proto3,enum=v1.AdministrationEventLevel" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AdministrationEventsFilter) Reset()         { *m = AdministrationEventsFilter{} }
func (m *AdministrationEventsFilter) String() string { return proto.CompactTextString(m) }
func (*AdministrationEventsFilter) ProtoMessage()    {}
func (*AdministrationEventsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{1}
}
func (m *AdministrationEventsFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdministrationEventsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdministrationEventsFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdministrationEventsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdministrationEventsFilter.Merge(m, src)
}
func (m *AdministrationEventsFilter) XXX_Size() int {
	return m.Size()
}
func (m *AdministrationEventsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AdministrationEventsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AdministrationEventsFilter proto.InternalMessageInfo

func (m *AdministrationEventsFilter) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *AdministrationEventsFilter) GetUntil() *types.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

func (m *AdministrationEventsFilter) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AdministrationEventsFilter) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *AdministrationEventsFilter) GetType() AdministrationEventType {
	if m != nil {
		return m.Type
	}
	return AdministrationEventType_ADMINISTRATION_EVENT_TYPE_UNKNOWN
}

func (m *AdministrationEventsFilter) GetLevel() AdministrationEventLevel {
	if m != nil {
		return m.Level
	}
	return AdministrationEventLevel_ADMINISTRATION_EVENT_LEVEL_UNKNOWN
}

func (m *AdministrationEventsFilter) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AdministrationEventsFilter) Clone() *AdministrationEventsFilter {
	if m == nil {
		return nil
	}
	cloned := new(AdministrationEventsFilter)
	*cloned = *m

	cloned.From = m.From.Clone()
	cloned.Until = m.Until.Clone()
	return cloned
}

type CountAdministrationEventsRequest struct {
	// For filtering the events based on the requested fields.
	Filter               *AdministrationEventsFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CountAdministrationEventsRequest) Reset()         { *m = CountAdministrationEventsRequest{} }
func (m *CountAdministrationEventsRequest) String() string { return proto.CompactTextString(m) }
func (*CountAdministrationEventsRequest) ProtoMessage()    {}
func (*CountAdministrationEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{2}
}
func (m *CountAdministrationEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountAdministrationEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountAdministrationEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountAdministrationEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountAdministrationEventsRequest.Merge(m, src)
}
func (m *CountAdministrationEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountAdministrationEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountAdministrationEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountAdministrationEventsRequest proto.InternalMessageInfo

func (m *CountAdministrationEventsRequest) GetFilter() *AdministrationEventsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CountAdministrationEventsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountAdministrationEventsRequest) Clone() *CountAdministrationEventsRequest {
	if m == nil {
		return nil
	}
	cloned := new(CountAdministrationEventsRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

type CountAdministrationEventsResponse struct {
	// The total number of events after filtering and deduplication.
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountAdministrationEventsResponse) Reset()         { *m = CountAdministrationEventsResponse{} }
func (m *CountAdministrationEventsResponse) String() string { return proto.CompactTextString(m) }
func (*CountAdministrationEventsResponse) ProtoMessage()    {}
func (*CountAdministrationEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{3}
}
func (m *CountAdministrationEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountAdministrationEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountAdministrationEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountAdministrationEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountAdministrationEventsResponse.Merge(m, src)
}
func (m *CountAdministrationEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountAdministrationEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountAdministrationEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountAdministrationEventsResponse proto.InternalMessageInfo

func (m *CountAdministrationEventsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountAdministrationEventsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountAdministrationEventsResponse) Clone() *CountAdministrationEventsResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountAdministrationEventsResponse)
	*cloned = *m

	return cloned
}

type GetAdministrationEventResponse struct {
	Event                *AdministrationEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetAdministrationEventResponse) Reset()         { *m = GetAdministrationEventResponse{} }
func (m *GetAdministrationEventResponse) String() string { return proto.CompactTextString(m) }
func (*GetAdministrationEventResponse) ProtoMessage()    {}
func (*GetAdministrationEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{4}
}
func (m *GetAdministrationEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdministrationEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdministrationEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAdministrationEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdministrationEventResponse.Merge(m, src)
}
func (m *GetAdministrationEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAdministrationEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdministrationEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdministrationEventResponse proto.InternalMessageInfo

func (m *GetAdministrationEventResponse) GetEvent() *AdministrationEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *GetAdministrationEventResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAdministrationEventResponse) Clone() *GetAdministrationEventResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAdministrationEventResponse)
	*cloned = *m

	cloned.Event = m.Event.Clone()
	return cloned
}

type ListAdministrationEventsRequest struct {
	// For dividing the events response into chunks.
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// For filtering the events based on the requested fields.
	Filter               *AdministrationEventsFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListAdministrationEventsRequest) Reset()         { *m = ListAdministrationEventsRequest{} }
func (m *ListAdministrationEventsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAdministrationEventsRequest) ProtoMessage()    {}
func (*ListAdministrationEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{5}
}
func (m *ListAdministrationEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAdministrationEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAdministrationEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAdministrationEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAdministrationEventsRequest.Merge(m, src)
}
func (m *ListAdministrationEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAdministrationEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAdministrationEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAdministrationEventsRequest proto.InternalMessageInfo

func (m *ListAdministrationEventsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListAdministrationEventsRequest) GetFilter() *AdministrationEventsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAdministrationEventsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListAdministrationEventsRequest) Clone() *ListAdministrationEventsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListAdministrationEventsRequest)
	*cloned = *m

	cloned.Pagination = m.Pagination.Clone()
	cloned.Filter = m.Filter.Clone()
	return cloned
}

type ListAdministrationEventsResponse struct {
	Events               []*AdministrationEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListAdministrationEventsResponse) Reset()         { *m = ListAdministrationEventsResponse{} }
func (m *ListAdministrationEventsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAdministrationEventsResponse) ProtoMessage()    {}
func (*ListAdministrationEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ed8038492412f4, []int{6}
}
func (m *ListAdministrationEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAdministrationEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAdministrationEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAdministrationEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAdministrationEventsResponse.Merge(m, src)
}
func (m *ListAdministrationEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAdministrationEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAdministrationEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAdministrationEventsResponse proto.InternalMessageInfo

func (m *ListAdministrationEventsResponse) GetEvents() []*AdministrationEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ListAdministrationEventsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListAdministrationEventsResponse) Clone() *ListAdministrationEventsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListAdministrationEventsResponse)
	*cloned = *m

	if m.Events != nil {
		cloned.Events = make([]*AdministrationEvent, len(m.Events))
		for idx, v := range m.Events {
			cloned.Events[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v1.AdministrationEventType", AdministrationEventType_name, AdministrationEventType_value)
	proto.RegisterEnum("v1.AdministrationEventLevel", AdministrationEventLevel_name, AdministrationEventLevel_value)
	proto.RegisterType((*AdministrationEvent)(nil), "v1.AdministrationEvent")
	proto.RegisterType((*AdministrationEventsFilter)(nil), "v1.AdministrationEventsFilter")
	proto.RegisterType((*CountAdministrationEventsRequest)(nil), "v1.CountAdministrationEventsRequest")
	proto.RegisterType((*CountAdministrationEventsResponse)(nil), "v1.CountAdministrationEventsResponse")
	proto.RegisterType((*GetAdministrationEventResponse)(nil), "v1.GetAdministrationEventResponse")
	proto.RegisterType((*ListAdministrationEventsRequest)(nil), "v1.ListAdministrationEventsRequest")
	proto.RegisterType((*ListAdministrationEventsResponse)(nil), "v1.ListAdministrationEventsResponse")
}

func init() {
	proto.RegisterFile("api/v1/administration_events_service.proto", fileDescriptor_91ed8038492412f4)
}

var fileDescriptor_91ed8038492412f4 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x63, 0xef, 0x8f, 0x92, 0x17, 0x58, 0xac, 0x29, 0x6a, 0xdc, 0x6d, 0xb5, 0xeb, 0x38,
	0x49, 0x1b, 0x22, 0xe1, 0x65, 0x83, 0x84, 0xd4, 0xe3, 0x36, 0x71, 0x57, 0x2b, 0xb6, 0xde, 0x6a,
	0x76, 0xdb, 0x42, 0x2f, 0x96, 0x6b, 0x4f, 0xc2, 0x88, 0xb5, 0xbd, 0x78, 0xc6, 0x16, 0x11, 0xe2,
	0xc2, 0x09, 0x8e, 0xc0, 0x85, 0x23, 0xff, 0x03, 0xff, 0x00, 0x47, 0x8e, 0x48, 0x9c, 0x91, 0x50,
	0xe0, 0x0f, 0x41, 0x1e, 0xcf, 0xa6, 0x01, 0xd6, 0xde, 0xe6, 0xe6, 0x79, 0xfe, 0xbc, 0x37, 0xdf,
	0x79, 0xef, 0xcd, 0x1b, 0x38, 0xf4, 0x16, 0xb4, 0x97, 0xf5, 0x7b, 0x5e, 0x10, 0xd2, 0x88, 0x32,
	0x9e, 0x78, 0x9c, 0xc6, 0x91, 0x4b, 0x32, 0x12, 0x71, 0xe6, 0x32, 0x92, 0x64, 0xd4, 0x27, 0xd6,
	0x22, 0x89, 0x79, 0x8c, 0xd4, 0xac, 0xdf, 0xbe, 0x7b, 0x16, 0xc7, 0x67, 0x73, 0xd2, 0xcb, 0xdd,
	0xbc, 0x28, 0x8a, 0xb9, 0xe0, 0x59, 0x41, 0xb4, 0x6f, 0xca, 0x68, 0x7e, 0x1c, 0x86, 0x71, 0x24,
	0x8d, 0xdb, 0xd2, 0xb8, 0xf0, 0xce, 0x68, 0x24, 0x70, 0xf9, 0xa3, 0x2b, 0x63, 0x89, 0xd5, 0xcb,
	0xf4, 0xb4, 0xc7, 0x69, 0x48, 0x18, 0xf7, 0xc2, 0x45, 0x01, 0x98, 0xbf, 0xd4, 0xe0, 0xe6, 0xe0,
	0x5f, 0xc2, 0xec, 0x5c, 0x17, 0x6a, 0x81, 0x4a, 0x03, 0x5d, 0x31, 0x94, 0x83, 0x4d, 0xac, 0xd2,
	0x00, 0xf5, 0xa0, 0xce, 0xcf, 0x17, 0x44, 0x57, 0x0d, 0xe5, 0xa0, 0x75, 0x74, 0xc7, 0xca, 0xfa,
	0xd6, 0x0a, 0xb7, 0xd9, 0xf9, 0x82, 0x60, 0x01, 0xa2, 0x23, 0x68, 0xcc, 0x49, 0x46, 0xe6, 0x7a,
	0x4d, 0x78, 0xdc, 0x2d, 0xf1, 0x18, 0xe7, 0x0c, 0x2e, 0x50, 0xa4, 0xc3, 0x8d, 0x90, 0x30, 0xe6,
	0x9d, 0x11, 0xbd, 0x2e, 0x76, 0x5e, 0x2e, 0x11, 0x82, 0xfa, 0xa7, 0x34, 0xe2, 0x7a, 0x43, 0x98,
	0xc5, 0x37, 0xba, 0x05, 0xcd, 0x20, 0x0e, 0x3d, 0x1a, 0xe9, 0x4d, 0x61, 0x95, 0x2b, 0xb4, 0x0b,
	0x6f, 0x25, 0x84, 0xc5, 0x69, 0xe2, 0x13, 0x57, 0x68, 0xbe, 0x21, 0x7e, 0xbf, 0xb9, 0x34, 0xe6,
	0x22, 0x51, 0x17, 0xb6, 0x2e, 0x21, 0x1a, 0xe8, 0x6f, 0x08, 0x04, 0x96, 0xa6, 0x51, 0x80, 0xee,
	0xc3, 0xdb, 0x51, 0x1a, 0xba, 0xb1, 0xef, 0xa7, 0x49, 0x42, 0x22, 0x9f, 0x30, 0x7d, 0xd3, 0x50,
	0x0e, 0x6a, 0xb8, 0x15, 0xa5, 0xe1, 0xe4, 0x95, 0x15, 0x9d, 0x80, 0x36, 0xf7, 0x18, 0x5f, 0x92,
	0x81, 0xeb, 0x71, 0x1d, 0x0c, 0xe5, 0x60, 0xeb, 0xa8, 0x6d, 0x15, 0xd9, 0xb7, 0x96, 0xd9, 0xb7,
	0x66, 0xcb, 0xec, 0xe3, 0x56, 0xee, 0x23, 0xc3, 0x04, 0x03, 0x8e, 0x1e, 0x00, 0xf8, 0x09, 0xf1,
	0x78, 0xe1, 0xbf, 0xb5, 0xd6, 0x7f, 0x53, 0xd2, 0x03, 0x6e, 0xfe, 0xa4, 0x42, 0x7b, 0x45, 0x66,
	0xd9, 0x23, 0x3a, 0xe7, 0x24, 0x41, 0x16, 0xd4, 0x4f, 0x93, 0x38, 0x14, 0xb5, 0xac, 0x8e, 0x29,
	0x38, 0xf4, 0x3e, 0x34, 0xd2, 0x88, 0xd3, 0xb9, 0x28, 0x75, 0xb5, 0x43, 0x01, 0x5e, 0x29, 0x44,
	0xad, 0xba, 0x10, 0xf5, 0x15, 0x85, 0x58, 0x36, 0x56, 0xe3, 0xda, 0x8d, 0xd5, 0x7c, 0xed, 0xc6,
	0x32, 0x5f, 0x80, 0x71, 0x1c, 0xa7, 0x11, 0x5f, 0x95, 0x26, 0x4c, 0x3e, 0x4f, 0x09, 0xe3, 0xe8,
	0x43, 0x68, 0x9e, 0x8a, 0x8c, 0xc9, 0x4c, 0x75, 0x4a, 0x02, 0xcb, 0xbc, 0x62, 0x49, 0x9b, 0x0f,
	0x60, 0xa7, 0x22, 0x36, 0x5b, 0xc4, 0x11, 0x23, 0xe8, 0x1d, 0x68, 0xf8, 0x39, 0x24, 0x62, 0xd7,
	0x70, 0xb1, 0x30, 0x27, 0xd0, 0x19, 0x92, 0x55, 0x8e, 0x97, 0x7e, 0xef, 0x41, 0x43, 0xcc, 0x09,
	0xa9, 0x69, 0xbb, 0x44, 0x13, 0x2e, 0x28, 0xf3, 0x5b, 0x05, 0xba, 0x63, 0xca, 0x2a, 0xcf, 0x69,
	0x01, 0xbc, 0x1a, 0x13, 0x32, 0x6e, 0x2b, 0x8f, 0xfb, 0xe4, 0xd2, 0x8a, 0xaf, 0x10, 0x57, 0xf2,
	0xa2, 0x5e, 0x2b, 0x2f, 0x53, 0x30, 0xca, 0xa5, 0xc8, 0xe3, 0xf5, 0xa0, 0x59, 0x8c, 0x41, 0x5d,
	0x31, 0x6a, 0x55, 0xe7, 0x93, 0xd8, 0xe1, 0xf7, 0x0a, 0x6c, 0x97, 0xb4, 0x07, 0xda, 0x87, 0x9d,
	0xc1, 0xc9, 0xe3, 0x91, 0x33, 0x9a, 0xce, 0xf0, 0x60, 0x36, 0x9a, 0x38, 0xae, 0xfd, 0xcc, 0x76,
	0x66, 0xee, 0xec, 0x93, 0x27, 0xb6, 0xfb, 0xd4, 0xf9, 0xc8, 0x99, 0x3c, 0x77, 0xb4, 0x8d, 0x6a,
	0x6c, 0x68, 0x3b, 0x36, 0x1e, 0x1d, 0x6b, 0x0a, 0x7a, 0x17, 0xf6, 0xcb, 0xb1, 0xf1, 0x64, 0xe8,
	0x3e, 0xb6, 0xa7, 0xd3, 0xc1, 0xd0, 0xd6, 0xd4, 0xc3, 0x3f, 0x14, 0xd0, 0xcb, 0x3a, 0x10, 0xdd,
	0x03, 0x73, 0x65, 0x9c, 0xb1, 0xfd, 0xcc, 0x1e, 0x5f, 0x91, 0xb5, 0x0b, 0xdd, 0x0a, 0x6e, 0xe4,
	0x3c, 0x9a, 0x68, 0xca, 0x9a, 0x60, 0xd3, 0xa7, 0xc7, 0xc7, 0xf6, 0x74, 0xaa, 0xa9, 0x6b, 0xb8,
	0xe7, 0x03, 0xec, 0x8c, 0x9c, 0xa1, 0x56, 0x43, 0x7b, 0x60, 0x54, 0x70, 0x36, 0xc6, 0x13, 0xac,
	0xd5, 0x8f, 0x7e, 0xae, 0xad, 0x1c, 0x30, 0xd3, 0xe2, 0xe5, 0x42, 0xdf, 0x29, 0x70, 0xbb, 0xf4,
	0x06, 0xa0, 0xbd, 0xbc, 0xa4, 0xeb, 0x2e, 0x5f, 0x7b, 0x7f, 0x0d, 0x55, 0xf4, 0x8b, 0x79, 0xff,
	0xeb, 0xdf, 0xff, 0xfe, 0x41, 0xdd, 0x41, 0xdd, 0xe2, 0x05, 0x4c, 0x23, 0xfe, 0x9f, 0x57, 0xb5,
	0x57, 0xf4, 0x09, 0xca, 0xe0, 0xd6, 0xea, 0x9b, 0x85, 0xb4, 0x7c, 0x27, 0x2c, 0x27, 0xd0, 0xc3,
	0xf3, 0xd1, 0x49, 0xdb, 0xcc, 0x2d, 0xd5, 0xf7, 0xd0, 0xbc, 0x27, 0x36, 0x36, 0x50, 0xe7, 0xff,
	0x0f, 0xb9, 0xdc, 0xb2, 0xf7, 0x25, 0x0d, 0xbe, 0x42, 0xdf, 0x28, 0xa0, 0x97, 0x75, 0x3d, 0xda,
	0xcd, 0x37, 0x5a, 0x73, 0x3d, 0xdb, 0x7b, 0xd5, 0x90, 0xd4, 0xb3, 0x23, 0xf4, 0xdc, 0x41, 0xb7,
	0x4b, 0xf5, 0x3c, 0xb4, 0x7e, 0xbd, 0xe8, 0x28, 0xbf, 0x5d, 0x74, 0x94, 0x3f, 0x2f, 0x3a, 0xca,
	0x8f, 0x7f, 0x75, 0x36, 0x40, 0xa7, 0xb1, 0xc5, 0xb8, 0xe7, 0x7f, 0x96, 0xc4, 0x5f, 0x14, 0xe3,
	0xdc, 0xf2, 0x16, 0xd4, 0xca, 0xfa, 0x2f, 0xd4, 0xac, 0xff, 0xf1, 0xc6, 0xcb, 0xa6, 0xb0, 0x7d,
	0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xe2, 0xab, 0xdf, 0xb1, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdministrationEventServiceClient is the client API for AdministrationEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type AdministrationEventServiceClient interface {
	// CountAdministrationEvents returns the number of events after filtering by requested fields.
	CountAdministrationEvents(ctx context.Context, in *CountAdministrationEventsRequest, opts ...grpc.CallOption) (*CountAdministrationEventsResponse, error)
	// GetAdministrationEvent retrieves an event by ID.
	GetAdministrationEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAdministrationEventResponse, error)
	// ListAdministrationEvents returns the list of events after filtered by requested fields.
	ListAdministrationEvents(ctx context.Context, in *ListAdministrationEventsRequest, opts ...grpc.CallOption) (*ListAdministrationEventsResponse, error)
}

type administrationEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrationEventServiceClient(cc grpc.ClientConnInterface) AdministrationEventServiceClient {
	return &administrationEventServiceClient{cc}
}

func (c *administrationEventServiceClient) CountAdministrationEvents(ctx context.Context, in *CountAdministrationEventsRequest, opts ...grpc.CallOption) (*CountAdministrationEventsResponse, error) {
	out := new(CountAdministrationEventsResponse)
	err := c.cc.Invoke(ctx, "/v1.AdministrationEventService/CountAdministrationEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationEventServiceClient) GetAdministrationEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetAdministrationEventResponse, error) {
	out := new(GetAdministrationEventResponse)
	err := c.cc.Invoke(ctx, "/v1.AdministrationEventService/GetAdministrationEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationEventServiceClient) ListAdministrationEvents(ctx context.Context, in *ListAdministrationEventsRequest, opts ...grpc.CallOption) (*ListAdministrationEventsResponse, error) {
	out := new(ListAdministrationEventsResponse)
	err := c.cc.Invoke(ctx, "/v1.AdministrationEventService/ListAdministrationEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrationEventServiceServer is the server API for AdministrationEventService service.
type AdministrationEventServiceServer interface {
	// CountAdministrationEvents returns the number of events after filtering by requested fields.
	CountAdministrationEvents(context.Context, *CountAdministrationEventsRequest) (*CountAdministrationEventsResponse, error)
	// GetAdministrationEvent retrieves an event by ID.
	GetAdministrationEvent(context.Context, *ResourceByID) (*GetAdministrationEventResponse, error)
	// ListAdministrationEvents returns the list of events after filtered by requested fields.
	ListAdministrationEvents(context.Context, *ListAdministrationEventsRequest) (*ListAdministrationEventsResponse, error)
}

// UnimplementedAdministrationEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdministrationEventServiceServer struct {
}

func (*UnimplementedAdministrationEventServiceServer) CountAdministrationEvents(ctx context.Context, req *CountAdministrationEventsRequest) (*CountAdministrationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAdministrationEvents not implemented")
}
func (*UnimplementedAdministrationEventServiceServer) GetAdministrationEvent(ctx context.Context, req *ResourceByID) (*GetAdministrationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrationEvent not implemented")
}
func (*UnimplementedAdministrationEventServiceServer) ListAdministrationEvents(ctx context.Context, req *ListAdministrationEventsRequest) (*ListAdministrationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdministrationEvents not implemented")
}

func RegisterAdministrationEventServiceServer(s *grpc.Server, srv AdministrationEventServiceServer) {
	s.RegisterService(&_AdministrationEventService_serviceDesc, srv)
}

func _AdministrationEventService_CountAdministrationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAdministrationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).CountAdministrationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AdministrationEventService/CountAdministrationEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).CountAdministrationEvents(ctx, req.(*CountAdministrationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationEventService_GetAdministrationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).GetAdministrationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AdministrationEventService/GetAdministrationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).GetAdministrationEvent(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrationEventService_ListAdministrationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdministrationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationEventServiceServer).ListAdministrationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AdministrationEventService/ListAdministrationEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationEventServiceServer).ListAdministrationEvents(ctx, req.(*ListAdministrationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdministrationEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AdministrationEventService",
	HandlerType: (*AdministrationEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountAdministrationEvents",
			Handler:    _AdministrationEventService_CountAdministrationEvents_Handler,
		},
		{
			MethodName: "GetAdministrationEvent",
			Handler:    _AdministrationEventService_GetAdministrationEvent_Handler,
		},
		{
			MethodName: "ListAdministrationEvents",
			Handler:    _AdministrationEventService_ListAdministrationEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/administration_events_service.proto",
}

func (m *AdministrationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdministrationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdministrationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LastOccurredAt != nil {
		{
			size, err := m.LastOccurredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NumOccurrences != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.NumOccurrences))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdministrationEventsFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdministrationEventsFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdministrationEventsFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Until != nil {
		{
			size, err := m.Until.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountAdministrationEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAdministrationEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountAdministrationEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountAdministrationEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAdministrationEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountAdministrationEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintAdministrationEventsService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAdministrationEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdministrationEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAdministrationEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAdministrationEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAdministrationEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAdministrationEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAdministrationEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAdministrationEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAdministrationEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdministrationEventsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdministrationEventsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdministrationEventsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdministrationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.NumOccurrences != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.NumOccurrences))
	}
	if m.LastOccurredAt != nil {
		l = m.LastOccurredAt.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdministrationEventsFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.Until != nil {
		l = m.Until.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountAdministrationEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountAdministrationEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovAdministrationEventsService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAdministrationEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAdministrationEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAdministrationEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAdministrationEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAdministrationEventsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdministrationEventsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdministrationEventsService(x uint64) (n int) {
	return sovAdministrationEventsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdministrationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdministrationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdministrationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AdministrationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= AdministrationEventLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOccurrences", wireType)
			}
			m.NumOccurrences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOccurrences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOccurredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastOccurredAt == nil {
				m.LastOccurredAt = &types.Timestamp{}
			}
			if err := m.LastOccurredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdministrationEventsFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdministrationEventsFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdministrationEventsFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Until", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Until == nil {
				m.Until = &types.Timestamp{}
			}
			if err := m.Until.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AdministrationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= AdministrationEventLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAdministrationEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAdministrationEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAdministrationEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &AdministrationEventsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAdministrationEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAdministrationEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAdministrationEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdministrationEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdministrationEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdministrationEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &AdministrationEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAdministrationEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAdministrationEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAdministrationEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &AdministrationEventsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAdministrationEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAdministrationEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAdministrationEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AdministrationEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdministrationEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdministrationEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdministrationEventsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdministrationEventsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdministrationEventsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdministrationEventsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdministrationEventsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdministrationEventsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdministrationEventsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdministrationEventsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdministrationEventsService = fmt.Errorf("proto: unexpected end of group")
)
