// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: api/v1/search_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next available tag: 72
type SearchCategory int32

const (
	SearchCategory_SEARCH_UNSET                     SearchCategory = 0
	SearchCategory_ALERTS                           SearchCategory = 1
	SearchCategory_IMAGES                           SearchCategory = 2
	SearchCategory_IMAGE_COMPONENTS                 SearchCategory = 20
	SearchCategory_IMAGE_VULN_EDGE                  SearchCategory = 27
	SearchCategory_IMAGE_COMPONENT_EDGE             SearchCategory = 23
	SearchCategory_POLICIES                         SearchCategory = 3
	SearchCategory_DEPLOYMENTS                      SearchCategory = 4
	SearchCategory_ACTIVE_COMPONENT                 SearchCategory = 30
	SearchCategory_PODS                             SearchCategory = 25
	SearchCategory_SECRETS                          SearchCategory = 5
	SearchCategory_PROCESS_INDICATORS               SearchCategory = 6
	SearchCategory_COMPLIANCE                       SearchCategory = 7
	SearchCategory_CLUSTERS                         SearchCategory = 8
	SearchCategory_NAMESPACES                       SearchCategory = 9
	SearchCategory_NODES                            SearchCategory = 10
	SearchCategory_NODE_COMPONENTS                  SearchCategory = 38
	SearchCategory_NODE_VULN_EDGE                   SearchCategory = 28
	SearchCategory_NODE_COMPONENT_EDGE              SearchCategory = 29
	SearchCategory_NODE_COMPONENT_CVE_EDGE          SearchCategory = 33
	SearchCategory_COMPLIANCE_STANDARD              SearchCategory = 11
	SearchCategory_COMPLIANCE_CONTROL_GROUP         SearchCategory = 12
	SearchCategory_COMPLIANCE_CONTROL               SearchCategory = 13
	SearchCategory_SERVICE_ACCOUNTS                 SearchCategory = 14
	SearchCategory_ROLES                            SearchCategory = 15
	SearchCategory_ROLEBINDINGS                     SearchCategory = 16
	SearchCategory_REPORT_CONFIGURATIONS            SearchCategory = 37
	SearchCategory_PROCESS_BASELINES                SearchCategory = 17
	SearchCategory_SUBJECTS                         SearchCategory = 18
	SearchCategory_RISKS                            SearchCategory = 19
	SearchCategory_VULNERABILITIES                  SearchCategory = 21
	SearchCategory_CLUSTER_VULNERABILITIES          SearchCategory = 34
	SearchCategory_IMAGE_VULNERABILITIES            SearchCategory = 35
	SearchCategory_NODE_VULNERABILITIES             SearchCategory = 36
	SearchCategory_COMPONENT_VULN_EDGE              SearchCategory = 22
	SearchCategory_CLUSTER_VULN_EDGE                SearchCategory = 24
	SearchCategory_NETWORK_ENTITY                   SearchCategory = 26
	SearchCategory_VULN_REQUEST                     SearchCategory = 32
	SearchCategory_NETWORK_BASELINE                 SearchCategory = 39
	SearchCategory_NETWORK_POLICIES                 SearchCategory = 40
	SearchCategory_PROCESS_BASELINE_RESULTS         SearchCategory = 41
	SearchCategory_COMPLIANCE_METADATA              SearchCategory = 42
	SearchCategory_COMPLIANCE_RESULTS               SearchCategory = 43
	SearchCategory_COMPLIANCE_DOMAIN                SearchCategory = 44
	SearchCategory_CLUSTER_HEALTH                   SearchCategory = 45
	SearchCategory_POLICY_CATEGORIES                SearchCategory = 46
	SearchCategory_IMAGE_INTEGRATIONS               SearchCategory = 47
	SearchCategory_COLLECTIONS                      SearchCategory = 48
	SearchCategory_POLICY_CATEGORY_EDGE             SearchCategory = 49
	SearchCategory_PROCESS_LISTENING_ON_PORT        SearchCategory = 50
	SearchCategory_API_TOKEN                        SearchCategory = 51
	SearchCategory_REPORT_METADATA                  SearchCategory = 52
	SearchCategory_REPORT_SNAPSHOT                  SearchCategory = 53
	SearchCategory_COMPLIANCE_INTEGRATIONS          SearchCategory = 54
	SearchCategory_COMPLIANCE_SCAN_CONFIG           SearchCategory = 55
	SearchCategory_COMPLIANCE_SCAN                  SearchCategory = 56
	SearchCategory_COMPLIANCE_CHECK_RESULTS         SearchCategory = 57
	SearchCategory_BLOB                             SearchCategory = 58
	SearchCategory_ADMINISTRATION_EVENTS            SearchCategory = 60
	SearchCategory_COMPLIANCE_SCAN_CONFIG_STATUS    SearchCategory = 61
	SearchCategory_ADMINISTRATION_USAGE             SearchCategory = 62
	SearchCategory_COMPLIANCE_PROFILES              SearchCategory = 63
	SearchCategory_COMPLIANCE_RULES                 SearchCategory = 65
	SearchCategory_COMPLIANCE_SCAN_SETTING_BINDINGS SearchCategory = 66
	SearchCategory_COMPLIANCE_SUITES                SearchCategory = 67
	SearchCategory_CLOUD_SOURCES                    SearchCategory = 68
	SearchCategory_DISCOVERED_CLUSTERS              SearchCategory = 69
	SearchCategory_COMPLIANCE_REMEDIATIONS          SearchCategory = 70
	SearchCategory_COMPLIANCE_BENCHMARKS            SearchCategory = 71
)

// Enum value maps for SearchCategory.
var (
	SearchCategory_name = map[int32]string{
		0:  "SEARCH_UNSET",
		1:  "ALERTS",
		2:  "IMAGES",
		20: "IMAGE_COMPONENTS",
		27: "IMAGE_VULN_EDGE",
		23: "IMAGE_COMPONENT_EDGE",
		3:  "POLICIES",
		4:  "DEPLOYMENTS",
		30: "ACTIVE_COMPONENT",
		25: "PODS",
		5:  "SECRETS",
		6:  "PROCESS_INDICATORS",
		7:  "COMPLIANCE",
		8:  "CLUSTERS",
		9:  "NAMESPACES",
		10: "NODES",
		38: "NODE_COMPONENTS",
		28: "NODE_VULN_EDGE",
		29: "NODE_COMPONENT_EDGE",
		33: "NODE_COMPONENT_CVE_EDGE",
		11: "COMPLIANCE_STANDARD",
		12: "COMPLIANCE_CONTROL_GROUP",
		13: "COMPLIANCE_CONTROL",
		14: "SERVICE_ACCOUNTS",
		15: "ROLES",
		16: "ROLEBINDINGS",
		37: "REPORT_CONFIGURATIONS",
		17: "PROCESS_BASELINES",
		18: "SUBJECTS",
		19: "RISKS",
		21: "VULNERABILITIES",
		34: "CLUSTER_VULNERABILITIES",
		35: "IMAGE_VULNERABILITIES",
		36: "NODE_VULNERABILITIES",
		22: "COMPONENT_VULN_EDGE",
		24: "CLUSTER_VULN_EDGE",
		26: "NETWORK_ENTITY",
		32: "VULN_REQUEST",
		39: "NETWORK_BASELINE",
		40: "NETWORK_POLICIES",
		41: "PROCESS_BASELINE_RESULTS",
		42: "COMPLIANCE_METADATA",
		43: "COMPLIANCE_RESULTS",
		44: "COMPLIANCE_DOMAIN",
		45: "CLUSTER_HEALTH",
		46: "POLICY_CATEGORIES",
		47: "IMAGE_INTEGRATIONS",
		48: "COLLECTIONS",
		49: "POLICY_CATEGORY_EDGE",
		50: "PROCESS_LISTENING_ON_PORT",
		51: "API_TOKEN",
		52: "REPORT_METADATA",
		53: "REPORT_SNAPSHOT",
		54: "COMPLIANCE_INTEGRATIONS",
		55: "COMPLIANCE_SCAN_CONFIG",
		56: "COMPLIANCE_SCAN",
		57: "COMPLIANCE_CHECK_RESULTS",
		58: "BLOB",
		60: "ADMINISTRATION_EVENTS",
		61: "COMPLIANCE_SCAN_CONFIG_STATUS",
		62: "ADMINISTRATION_USAGE",
		63: "COMPLIANCE_PROFILES",
		65: "COMPLIANCE_RULES",
		66: "COMPLIANCE_SCAN_SETTING_BINDINGS",
		67: "COMPLIANCE_SUITES",
		68: "CLOUD_SOURCES",
		69: "DISCOVERED_CLUSTERS",
		70: "COMPLIANCE_REMEDIATIONS",
		71: "COMPLIANCE_BENCHMARKS",
	}
	SearchCategory_value = map[string]int32{
		"SEARCH_UNSET":                     0,
		"ALERTS":                           1,
		"IMAGES":                           2,
		"IMAGE_COMPONENTS":                 20,
		"IMAGE_VULN_EDGE":                  27,
		"IMAGE_COMPONENT_EDGE":             23,
		"POLICIES":                         3,
		"DEPLOYMENTS":                      4,
		"ACTIVE_COMPONENT":                 30,
		"PODS":                             25,
		"SECRETS":                          5,
		"PROCESS_INDICATORS":               6,
		"COMPLIANCE":                       7,
		"CLUSTERS":                         8,
		"NAMESPACES":                       9,
		"NODES":                            10,
		"NODE_COMPONENTS":                  38,
		"NODE_VULN_EDGE":                   28,
		"NODE_COMPONENT_EDGE":              29,
		"NODE_COMPONENT_CVE_EDGE":          33,
		"COMPLIANCE_STANDARD":              11,
		"COMPLIANCE_CONTROL_GROUP":         12,
		"COMPLIANCE_CONTROL":               13,
		"SERVICE_ACCOUNTS":                 14,
		"ROLES":                            15,
		"ROLEBINDINGS":                     16,
		"REPORT_CONFIGURATIONS":            37,
		"PROCESS_BASELINES":                17,
		"SUBJECTS":                         18,
		"RISKS":                            19,
		"VULNERABILITIES":                  21,
		"CLUSTER_VULNERABILITIES":          34,
		"IMAGE_VULNERABILITIES":            35,
		"NODE_VULNERABILITIES":             36,
		"COMPONENT_VULN_EDGE":              22,
		"CLUSTER_VULN_EDGE":                24,
		"NETWORK_ENTITY":                   26,
		"VULN_REQUEST":                     32,
		"NETWORK_BASELINE":                 39,
		"NETWORK_POLICIES":                 40,
		"PROCESS_BASELINE_RESULTS":         41,
		"COMPLIANCE_METADATA":              42,
		"COMPLIANCE_RESULTS":               43,
		"COMPLIANCE_DOMAIN":                44,
		"CLUSTER_HEALTH":                   45,
		"POLICY_CATEGORIES":                46,
		"IMAGE_INTEGRATIONS":               47,
		"COLLECTIONS":                      48,
		"POLICY_CATEGORY_EDGE":             49,
		"PROCESS_LISTENING_ON_PORT":        50,
		"API_TOKEN":                        51,
		"REPORT_METADATA":                  52,
		"REPORT_SNAPSHOT":                  53,
		"COMPLIANCE_INTEGRATIONS":          54,
		"COMPLIANCE_SCAN_CONFIG":           55,
		"COMPLIANCE_SCAN":                  56,
		"COMPLIANCE_CHECK_RESULTS":         57,
		"BLOB":                             58,
		"ADMINISTRATION_EVENTS":            60,
		"COMPLIANCE_SCAN_CONFIG_STATUS":    61,
		"ADMINISTRATION_USAGE":             62,
		"COMPLIANCE_PROFILES":              63,
		"COMPLIANCE_RULES":                 65,
		"COMPLIANCE_SCAN_SETTING_BINDINGS": 66,
		"COMPLIANCE_SUITES":                67,
		"CLOUD_SOURCES":                    68,
		"DISCOVERED_CLUSTERS":              69,
		"COMPLIANCE_REMEDIATIONS":          70,
		"COMPLIANCE_BENCHMARKS":            71,
	}
)

func (x SearchCategory) Enum() *SearchCategory {
	p := new(SearchCategory)
	*p = x
	return p
}

func (x SearchCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_search_service_proto_enumTypes[0].Descriptor()
}

func (SearchCategory) Type() protoreflect.EnumType {
	return &file_api_v1_search_service_proto_enumTypes[0]
}

func (x SearchCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchCategory.Descriptor instead.
func (SearchCategory) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{0}
}

type SearchDataType int32

const (
	SearchDataType_SEARCH_BOOL     SearchDataType = 0
	SearchDataType_SEARCH_NUMERIC  SearchDataType = 1
	SearchDataType_SEARCH_STRING   SearchDataType = 2
	SearchDataType_SEARCH_DATETIME SearchDataType = 3
	SearchDataType_SEARCH_MAP      SearchDataType = 4
	SearchDataType_SEARCH_ENUM     SearchDataType = 5
)

// Enum value maps for SearchDataType.
var (
	SearchDataType_name = map[int32]string{
		0: "SEARCH_BOOL",
		1: "SEARCH_NUMERIC",
		2: "SEARCH_STRING",
		3: "SEARCH_DATETIME",
		4: "SEARCH_MAP",
		5: "SEARCH_ENUM",
	}
	SearchDataType_value = map[string]int32{
		"SEARCH_BOOL":     0,
		"SEARCH_NUMERIC":  1,
		"SEARCH_STRING":   2,
		"SEARCH_DATETIME": 3,
		"SEARCH_MAP":      4,
		"SEARCH_ENUM":     5,
	}
)

func (x SearchDataType) Enum() *SearchDataType {
	p := new(SearchDataType)
	*p = x
	return p
}

func (x SearchDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_search_service_proto_enumTypes[1].Descriptor()
}

func (SearchDataType) Type() protoreflect.EnumType {
	return &file_api_v1_search_service_proto_enumTypes[1]
}

func (x SearchDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchDataType.Descriptor instead.
func (SearchDataType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{1}
}

// RawQuery represents the search query string.
// The format of the query string is "<field name>:<value,value,...>+<field name>:<value, value,...>+..."
// For example:
// To search for deployments named "central" and "sensor" in the namespace "stackrox", the query string would be
// "Deployment:central,sensor+Namespace:stackrox"
// RawQuery is used in ListAPIs to search for a particular object.
type RawQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      string      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *RawQuery) Reset() {
	*x = RawQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQuery) ProtoMessage() {}

func (x *RawQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQuery.ProtoReflect.Descriptor instead.
func (*RawQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{0}
}

func (x *RawQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RawQuery) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// RawSearchRequest is used to scope a given search in a specific category.
// The search categories could be deployments, policies, images etc.
type RawSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      string           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Categories []SearchCategory `protobuf:"varint,2,rep,packed,name=categories,proto3,enum=v1.SearchCategory" json:"categories,omitempty"`
}

func (x *RawSearchRequest) Reset() {
	*x = RawSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSearchRequest) ProtoMessage() {}

func (x *RawSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSearchRequest.ProtoReflect.Descriptor instead.
func (*RawSearchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{1}
}

func (x *RawSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RawSearchRequest) GetCategories() []SearchCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type QuerySortOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Reversed bool   `protobuf:"varint,2,opt,name=reversed,proto3" json:"reversed,omitempty"`
	// Types that are assignable to SearchAfterOpt:
	//
	//	*QuerySortOption_SearchAfter
	SearchAfterOpt isQuerySortOption_SearchAfterOpt `protobuf_oneof:"search_after_opt"`
	AggregateBy    *AggregateBy                     `protobuf:"bytes,4,opt,name=aggregate_by,json=aggregateBy,proto3" json:"aggregate_by,omitempty"`
}

func (x *QuerySortOption) Reset() {
	*x = QuerySortOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySortOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySortOption) ProtoMessage() {}

func (x *QuerySortOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySortOption.ProtoReflect.Descriptor instead.
func (*QuerySortOption) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{2}
}

func (x *QuerySortOption) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *QuerySortOption) GetReversed() bool {
	if x != nil {
		return x.Reversed
	}
	return false
}

func (m *QuerySortOption) GetSearchAfterOpt() isQuerySortOption_SearchAfterOpt {
	if m != nil {
		return m.SearchAfterOpt
	}
	return nil
}

func (x *QuerySortOption) GetSearchAfter() string {
	if x, ok := x.GetSearchAfterOpt().(*QuerySortOption_SearchAfter); ok {
		return x.SearchAfter
	}
	return ""
}

func (x *QuerySortOption) GetAggregateBy() *AggregateBy {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

type isQuerySortOption_SearchAfterOpt interface {
	isQuerySortOption_SearchAfterOpt()
}

type QuerySortOption_SearchAfter struct {
	// search_after is alternative to offset for pagination.
	// Each value in search_after corresponds to a field. Only results following a record specified by a combination
	// of field+search_after values in specified sorting order will be returned.
	SearchAfter string `protobuf:"bytes,3,opt,name=search_after,json=searchAfter,proto3,oneof"`
}

func (*QuerySortOption_SearchAfter) isQuerySortOption_SearchAfterOpt() {}

type QueryField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AggregateFunc string `protobuf:"bytes,2,opt,name=aggregate_func,json=aggregateFunc,proto3" json:"aggregate_func,omitempty"`
	Distinct      bool   `protobuf:"varint,3,opt,name=distinct,proto3" json:"distinct,omitempty"`
}

func (x *QueryField) Reset() {
	*x = QueryField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryField) ProtoMessage() {}

func (x *QueryField) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryField.ProtoReflect.Descriptor instead.
func (*QueryField) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryField) GetAggregateFunc() string {
	if x != nil {
		return x.AggregateFunc
	}
	return ""
}

func (x *QueryField) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

type QuerySelectFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QuerySelectFilter) Reset() {
	*x = QuerySelectFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySelectFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySelectFilter) ProtoMessage() {}

func (x *QuerySelectFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySelectFilter.ProtoReflect.Descriptor instead.
func (*QuerySelectFilter) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{4}
}

func (x *QuerySelectFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySelectFilter) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type QuerySelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  *QueryField        `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Filter *QuerySelectFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *QuerySelect) Reset() {
	*x = QuerySelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySelect) ProtoMessage() {}

func (x *QuerySelect) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySelect.ProtoReflect.Descriptor instead.
func (*QuerySelect) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{5}
}

func (x *QuerySelect) GetField() *QueryField {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *QuerySelect) GetFilter() *QuerySelectFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryGroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *QueryGroupBy) Reset() {
	*x = QueryGroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupBy) ProtoMessage() {}

func (x *QueryGroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupBy.ProtoReflect.Descriptor instead.
func (*QueryGroupBy) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{6}
}

func (x *QueryGroupBy) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type QueryPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int32              `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	SortOptions []*QuerySortOption `protobuf:"bytes,3,rep,name=sort_options,json=sortOptions,proto3" json:"sort_options,omitempty"`
}

func (x *QueryPagination) Reset() {
	*x = QueryPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagination) ProtoMessage() {}

func (x *QueryPagination) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagination.ProtoReflect.Descriptor instead.
func (*QueryPagination) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{7}
}

func (x *QueryPagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryPagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryPagination) GetSortOptions() []*QuerySortOption {
	if x != nil {
		return x.SortOptions
	}
	return nil
}

type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Must    *ConjunctionQuery `protobuf:"bytes,1,opt,name=must,proto3" json:"must,omitempty"`
	MustNot *DisjunctionQuery `protobuf:"bytes,2,opt,name=must_not,json=mustNot,proto3" json:"must_not,omitempty"`
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{8}
}

func (x *BooleanQuery) GetMust() *ConjunctionQuery {
	if x != nil {
		return x.Must
	}
	return nil
}

func (x *BooleanQuery) GetMustNot() *DisjunctionQuery {
	if x != nil {
		return x.MustNot
	}
	return nil
}

// next tag: 9
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*Query_Conjunction
	//	*Query_Disjunction
	//	*Query_BaseQuery
	//	*Query_BooleanQuery
	Query      isQuery_Query    `protobuf_oneof:"query"`
	Selects    []*QuerySelect   `protobuf:"bytes,8,rep,name=selects,proto3" json:"selects,omitempty"`
	GroupBy    *QueryGroupBy    `protobuf:"bytes,7,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Pagination *QueryPagination `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{9}
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetConjunction() *ConjunctionQuery {
	if x, ok := x.GetQuery().(*Query_Conjunction); ok {
		return x.Conjunction
	}
	return nil
}

func (x *Query) GetDisjunction() *DisjunctionQuery {
	if x, ok := x.GetQuery().(*Query_Disjunction); ok {
		return x.Disjunction
	}
	return nil
}

func (x *Query) GetBaseQuery() *BaseQuery {
	if x, ok := x.GetQuery().(*Query_BaseQuery); ok {
		return x.BaseQuery
	}
	return nil
}

func (x *Query) GetBooleanQuery() *BooleanQuery {
	if x, ok := x.GetQuery().(*Query_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (x *Query) GetSelects() []*QuerySelect {
	if x != nil {
		return x.Selects
	}
	return nil
}

func (x *Query) GetGroupBy() *QueryGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Query) GetPagination() *QueryPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_Conjunction struct {
	Conjunction *ConjunctionQuery `protobuf:"bytes,1,opt,name=conjunction,proto3,oneof"`
}

type Query_Disjunction struct {
	Disjunction *DisjunctionQuery `protobuf:"bytes,2,opt,name=disjunction,proto3,oneof"`
}

type Query_BaseQuery struct {
	BaseQuery *BaseQuery `protobuf:"bytes,3,opt,name=base_query,json=baseQuery,proto3,oneof"`
}

type Query_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,6,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

func (*Query_Conjunction) isQuery_Query() {}

func (*Query_Disjunction) isQuery_Query() {}

func (*Query_BaseQuery) isQuery_Query() {}

func (*Query_BooleanQuery) isQuery_Query() {}

// StringQuery represents a query that matches documents that contain the
// query text in _any_ of their fields.
type StringQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *StringQuery) Reset() {
	*x = StringQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringQuery) ProtoMessage() {}

func (x *StringQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringQuery.ProtoReflect.Descriptor instead.
func (*StringQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{10}
}

func (x *StringQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// MatchFieldQuery represents a query that matches documents containing the
// query text in the provided field.
type MatchFieldQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Highlight bool   `protobuf:"varint,3,opt,name=highlight,proto3" json:"highlight,omitempty"`
}

func (x *MatchFieldQuery) Reset() {
	*x = MatchFieldQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFieldQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFieldQuery) ProtoMessage() {}

func (x *MatchFieldQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFieldQuery.ProtoReflect.Descriptor instead.
func (*MatchFieldQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{11}
}

func (x *MatchFieldQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchFieldQuery) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MatchFieldQuery) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

// MatchLinkedFieldsQuery represents a query that matches documents which have matches for all the provided
// field values, in corresponding locations.
type MatchLinkedFieldsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query []*MatchFieldQuery `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *MatchLinkedFieldsQuery) Reset() {
	*x = MatchLinkedFieldsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLinkedFieldsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLinkedFieldsQuery) ProtoMessage() {}

func (x *MatchLinkedFieldsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLinkedFieldsQuery.ProtoReflect.Descriptor instead.
func (*MatchLinkedFieldsQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{12}
}

func (x *MatchLinkedFieldsQuery) GetQuery() []*MatchFieldQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// DocIDQuery represents a query that matches documents with the provided ids.
type DocIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DocIDQuery) Reset() {
	*x = DocIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocIDQuery) ProtoMessage() {}

func (x *DocIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocIDQuery.ProtoReflect.Descriptor instead.
func (*DocIDQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{13}
}

func (x *DocIDQuery) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BaseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*BaseQuery_MatchFieldQuery
	//	*BaseQuery_MatchLinkedFieldsQuery
	//	*BaseQuery_DocIdQuery
	//	*BaseQuery_MatchNoneQuery
	Query isBaseQuery_Query `protobuf_oneof:"query"`
}

func (x *BaseQuery) Reset() {
	*x = BaseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseQuery) ProtoMessage() {}

func (x *BaseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseQuery.ProtoReflect.Descriptor instead.
func (*BaseQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{14}
}

func (m *BaseQuery) GetQuery() isBaseQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *BaseQuery) GetMatchFieldQuery() *MatchFieldQuery {
	if x, ok := x.GetQuery().(*BaseQuery_MatchFieldQuery); ok {
		return x.MatchFieldQuery
	}
	return nil
}

func (x *BaseQuery) GetMatchLinkedFieldsQuery() *MatchLinkedFieldsQuery {
	if x, ok := x.GetQuery().(*BaseQuery_MatchLinkedFieldsQuery); ok {
		return x.MatchLinkedFieldsQuery
	}
	return nil
}

func (x *BaseQuery) GetDocIdQuery() *DocIDQuery {
	if x, ok := x.GetQuery().(*BaseQuery_DocIdQuery); ok {
		return x.DocIdQuery
	}
	return nil
}

func (x *BaseQuery) GetMatchNoneQuery() *MatchNoneQuery {
	if x, ok := x.GetQuery().(*BaseQuery_MatchNoneQuery); ok {
		return x.MatchNoneQuery
	}
	return nil
}

type isBaseQuery_Query interface {
	isBaseQuery_Query()
}

type BaseQuery_MatchFieldQuery struct {
	MatchFieldQuery *MatchFieldQuery `protobuf:"bytes,2,opt,name=match_field_query,json=matchFieldQuery,proto3,oneof"`
}

type BaseQuery_MatchLinkedFieldsQuery struct {
	MatchLinkedFieldsQuery *MatchLinkedFieldsQuery `protobuf:"bytes,3,opt,name=match_linked_fields_query,json=matchLinkedFieldsQuery,proto3,oneof"`
}

type BaseQuery_DocIdQuery struct {
	DocIdQuery *DocIDQuery `protobuf:"bytes,4,opt,name=doc_id_query,json=docIdQuery,proto3,oneof"`
}

type BaseQuery_MatchNoneQuery struct {
	MatchNoneQuery *MatchNoneQuery `protobuf:"bytes,5,opt,name=match_none_query,json=matchNoneQuery,proto3,oneof"`
}

func (*BaseQuery_MatchFieldQuery) isBaseQuery_Query() {}

func (*BaseQuery_MatchLinkedFieldsQuery) isBaseQuery_Query() {}

func (*BaseQuery_DocIdQuery) isBaseQuery_Query() {}

func (*BaseQuery_MatchNoneQuery) isBaseQuery_Query() {}

type ConjunctionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ConjunctionQuery) Reset() {
	*x = ConjunctionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConjunctionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConjunctionQuery) ProtoMessage() {}

func (x *ConjunctionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConjunctionQuery.ProtoReflect.Descriptor instead.
func (*ConjunctionQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{15}
}

func (x *ConjunctionQuery) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type DisjunctionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *DisjunctionQuery) Reset() {
	*x = DisjunctionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisjunctionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisjunctionQuery) ProtoMessage() {}

func (x *DisjunctionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisjunctionQuery.ProtoReflect.Descriptor instead.
func (*DisjunctionQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{16}
}

func (x *DisjunctionQuery) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type MatchNoneQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchNoneQuery) Reset() {
	*x = MatchNoneQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchNoneQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNoneQuery) ProtoMessage() {}

func (x *MatchNoneQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNoneQuery.ProtoReflect.Descriptor instead.
func (*MatchNoneQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{17}
}

type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category       SearchCategory                   `protobuf:"varint,3,opt,name=category,proto3,enum=v1.SearchCategory" json:"category,omitempty"`
	FieldToMatches map[string]*SearchResult_Matches `protobuf:"bytes,4,rep,name=field_to_matches,json=fieldToMatches,proto3" json:"field_to_matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Score          float64                          `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	// Location is intended to be a unique, yet human readable,
	// identifier for the result. For example, for a deployment,
	// the location will be "$cluster_name/$namespace/$deployment_name.
	// It is displayed in the UI in the global search results, underneath
	// the name for each result.
	Location string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{18}
}

func (x *SearchResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchResult) GetCategory() SearchCategory {
	if x != nil {
		return x.Category
	}
	return SearchCategory_SEARCH_UNSET
}

func (x *SearchResult) GetFieldToMatches() map[string]*SearchResult_Matches {
	if x != nil {
		return x.FieldToMatches
	}
	return nil
}

func (x *SearchResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SearchResult) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SearchResult         `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Counts  []*SearchResponse_Count `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{19}
}

func (x *SearchResponse) GetResults() []*SearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetCounts() []*SearchResponse_Count {
	if x != nil {
		return x.Counts
	}
	return nil
}

type SearchOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []SearchCategory `protobuf:"varint,1,rep,packed,name=categories,proto3,enum=v1.SearchCategory" json:"categories,omitempty"`
}

func (x *SearchOptionsRequest) Reset() {
	*x = SearchOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptionsRequest) ProtoMessage() {}

func (x *SearchOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptionsRequest.ProtoReflect.Descriptor instead.
func (*SearchOptionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{20}
}

func (x *SearchOptionsRequest) GetCategories() []SearchCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type SearchOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *SearchOptionsResponse) Reset() {
	*x = SearchOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptionsResponse) ProtoMessage() {}

func (x *SearchOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptionsResponse.ProtoReflect.Descriptor instead.
func (*SearchOptionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{21}
}

func (x *SearchOptionsResponse) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type AutocompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AutocompleteResponse) Reset() {
	*x = AutocompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutocompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutocompleteResponse) ProtoMessage() {}

func (x *AutocompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutocompleteResponse.ProtoReflect.Descriptor instead.
func (*AutocompleteResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{22}
}

func (x *AutocompleteResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchResult_Matches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SearchResult_Matches) Reset() {
	*x = SearchResult_Matches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult_Matches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult_Matches) ProtoMessage() {}

func (x *SearchResult_Matches) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult_Matches.ProtoReflect.Descriptor instead.
func (*SearchResult_Matches) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *SearchResult_Matches) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchResponse_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category SearchCategory `protobuf:"varint,1,opt,name=category,proto3,enum=v1.SearchCategory" json:"category,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SearchResponse_Count) Reset() {
	*x = SearchResponse_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_search_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Count) ProtoMessage() {}

func (x *SearchResponse_Count) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_search_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Count.ProtoReflect.Descriptor instead.
func (*SearchResponse_Count) Descriptor() ([]byte, []int) {
	return file_api_v1_search_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *SearchResponse_Count) GetCategory() SearchCategory {
	if x != nil {
		return x.Category
	}
	return SearchCategory_SEARCH_UNSET
}

func (x *SearchResponse_Count) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_api_v1_search_service_proto protoreflect.FileDescriptor

var file_api_v1_search_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76,
	0x31, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x10, 0x52, 0x61,
	0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0x63, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x22, 0x48, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x62, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x26,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x69, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x75, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x75, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x23, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x5b, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x43, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x49, 0x44, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x44, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x6e, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x10, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0xe4, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x13, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x4d, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x87, 0x0c, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4f, 0x44, 0x53, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54,
	0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x53, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x44,
	0x45, 0x53, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x44, 0x47, 0x45, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x56, 0x45, 0x5f, 0x45, 0x44, 0x47,
	0x45, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x4c, 0x45,
	0x53, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x25,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x53, 0x4b, 0x53, 0x10, 0x13,
	0x12, 0x13, 0x0a, 0x0f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e,
	0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x23, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x55, 0x4c, 0x4e,
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x55, 0x4c, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x20, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x49, 0x45, 0x53, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x2a,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x2c, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x31, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x50, 0x49, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x34,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x35, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x37, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x41,
	0x4e, 0x10, 0x38, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10,
	0x39, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x3c, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x3e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x3f, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53,
	0x10, 0x41, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x42, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x53, 0x10, 0x43, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x10, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x53, 0x10, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x46, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b,
	0x53, 0x10, 0x47, 0x22, 0x04, 0x08, 0x3b, 0x10, 0x3b, 0x22, 0x04, 0x08, 0x40, 0x10, 0x40, 0x2a,
	0x7e, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x32,
	0x9d, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x63, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x27, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x5a, 0x0b, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x58, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_v1_search_service_proto_rawDescOnce sync.Once
	file_api_v1_search_service_proto_rawDescData = file_api_v1_search_service_proto_rawDesc
)

func file_api_v1_search_service_proto_rawDescGZIP() []byte {
	file_api_v1_search_service_proto_rawDescOnce.Do(func() {
		file_api_v1_search_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_search_service_proto_rawDescData)
	})
	return file_api_v1_search_service_proto_rawDescData
}

var file_api_v1_search_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1_search_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_v1_search_service_proto_goTypes = []any{
	(SearchCategory)(0),            // 0: v1.SearchCategory
	(SearchDataType)(0),            // 1: v1.SearchDataType
	(*RawQuery)(nil),               // 2: v1.RawQuery
	(*RawSearchRequest)(nil),       // 3: v1.RawSearchRequest
	(*QuerySortOption)(nil),        // 4: v1.QuerySortOption
	(*QueryField)(nil),             // 5: v1.QueryField
	(*QuerySelectFilter)(nil),      // 6: v1.QuerySelectFilter
	(*QuerySelect)(nil),            // 7: v1.QuerySelect
	(*QueryGroupBy)(nil),           // 8: v1.QueryGroupBy
	(*QueryPagination)(nil),        // 9: v1.QueryPagination
	(*BooleanQuery)(nil),           // 10: v1.BooleanQuery
	(*Query)(nil),                  // 11: v1.Query
	(*StringQuery)(nil),            // 12: v1.StringQuery
	(*MatchFieldQuery)(nil),        // 13: v1.MatchFieldQuery
	(*MatchLinkedFieldsQuery)(nil), // 14: v1.MatchLinkedFieldsQuery
	(*DocIDQuery)(nil),             // 15: v1.DocIDQuery
	(*BaseQuery)(nil),              // 16: v1.BaseQuery
	(*ConjunctionQuery)(nil),       // 17: v1.ConjunctionQuery
	(*DisjunctionQuery)(nil),       // 18: v1.DisjunctionQuery
	(*MatchNoneQuery)(nil),         // 19: v1.MatchNoneQuery
	(*SearchResult)(nil),           // 20: v1.SearchResult
	(*SearchResponse)(nil),         // 21: v1.SearchResponse
	(*SearchOptionsRequest)(nil),   // 22: v1.SearchOptionsRequest
	(*SearchOptionsResponse)(nil),  // 23: v1.SearchOptionsResponse
	(*AutocompleteResponse)(nil),   // 24: v1.AutocompleteResponse
	(*SearchResult_Matches)(nil),   // 25: v1.SearchResult.Matches
	nil,                            // 26: v1.SearchResult.FieldToMatchesEntry
	(*SearchResponse_Count)(nil),   // 27: v1.SearchResponse.Count
	(*Pagination)(nil),             // 28: v1.Pagination
	(*AggregateBy)(nil),            // 29: v1.AggregateBy
}
var file_api_v1_search_service_proto_depIdxs = []int32{
	28, // 0: v1.RawQuery.pagination:type_name -> v1.Pagination
	0,  // 1: v1.RawSearchRequest.categories:type_name -> v1.SearchCategory
	29, // 2: v1.QuerySortOption.aggregate_by:type_name -> v1.AggregateBy
	11, // 3: v1.QuerySelectFilter.query:type_name -> v1.Query
	5,  // 4: v1.QuerySelect.field:type_name -> v1.QueryField
	6,  // 5: v1.QuerySelect.filter:type_name -> v1.QuerySelectFilter
	4,  // 6: v1.QueryPagination.sort_options:type_name -> v1.QuerySortOption
	17, // 7: v1.BooleanQuery.must:type_name -> v1.ConjunctionQuery
	18, // 8: v1.BooleanQuery.must_not:type_name -> v1.DisjunctionQuery
	17, // 9: v1.Query.conjunction:type_name -> v1.ConjunctionQuery
	18, // 10: v1.Query.disjunction:type_name -> v1.DisjunctionQuery
	16, // 11: v1.Query.base_query:type_name -> v1.BaseQuery
	10, // 12: v1.Query.boolean_query:type_name -> v1.BooleanQuery
	7,  // 13: v1.Query.selects:type_name -> v1.QuerySelect
	8,  // 14: v1.Query.group_by:type_name -> v1.QueryGroupBy
	9,  // 15: v1.Query.pagination:type_name -> v1.QueryPagination
	13, // 16: v1.MatchLinkedFieldsQuery.query:type_name -> v1.MatchFieldQuery
	13, // 17: v1.BaseQuery.match_field_query:type_name -> v1.MatchFieldQuery
	14, // 18: v1.BaseQuery.match_linked_fields_query:type_name -> v1.MatchLinkedFieldsQuery
	15, // 19: v1.BaseQuery.doc_id_query:type_name -> v1.DocIDQuery
	19, // 20: v1.BaseQuery.match_none_query:type_name -> v1.MatchNoneQuery
	11, // 21: v1.ConjunctionQuery.queries:type_name -> v1.Query
	11, // 22: v1.DisjunctionQuery.queries:type_name -> v1.Query
	0,  // 23: v1.SearchResult.category:type_name -> v1.SearchCategory
	26, // 24: v1.SearchResult.field_to_matches:type_name -> v1.SearchResult.FieldToMatchesEntry
	20, // 25: v1.SearchResponse.results:type_name -> v1.SearchResult
	27, // 26: v1.SearchResponse.counts:type_name -> v1.SearchResponse.Count
	0,  // 27: v1.SearchOptionsRequest.categories:type_name -> v1.SearchCategory
	25, // 28: v1.SearchResult.FieldToMatchesEntry.value:type_name -> v1.SearchResult.Matches
	0,  // 29: v1.SearchResponse.Count.category:type_name -> v1.SearchCategory
	3,  // 30: v1.SearchService.Search:input_type -> v1.RawSearchRequest
	22, // 31: v1.SearchService.Options:input_type -> v1.SearchOptionsRequest
	3,  // 32: v1.SearchService.Autocomplete:input_type -> v1.RawSearchRequest
	21, // 33: v1.SearchService.Search:output_type -> v1.SearchResponse
	23, // 34: v1.SearchService.Options:output_type -> v1.SearchOptionsResponse
	24, // 35: v1.SearchService.Autocomplete:output_type -> v1.AutocompleteResponse
	33, // [33:36] is the sub-list for method output_type
	30, // [30:33] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_v1_search_service_proto_init() }
func file_api_v1_search_service_proto_init() {
	if File_api_v1_search_service_proto != nil {
		return
	}
	file_api_v1_pagination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1_search_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RawQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RawSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySortOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*QueryField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySelectFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*QuerySelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*QueryGroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StringQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MatchFieldQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MatchLinkedFieldsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DocIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BaseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ConjunctionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DisjunctionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MatchNoneQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SearchOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AutocompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResult_Matches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_search_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResponse_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_search_service_proto_msgTypes[2].OneofWrappers = []any{
		(*QuerySortOption_SearchAfter)(nil),
	}
	file_api_v1_search_service_proto_msgTypes[9].OneofWrappers = []any{
		(*Query_Conjunction)(nil),
		(*Query_Disjunction)(nil),
		(*Query_BaseQuery)(nil),
		(*Query_BooleanQuery)(nil),
	}
	file_api_v1_search_service_proto_msgTypes[14].OneofWrappers = []any{
		(*BaseQuery_MatchFieldQuery)(nil),
		(*BaseQuery_MatchLinkedFieldsQuery)(nil),
		(*BaseQuery_DocIdQuery)(nil),
		(*BaseQuery_MatchNoneQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_search_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_search_service_proto_goTypes,
		DependencyIndexes: file_api_v1_search_service_proto_depIdxs,
		EnumInfos:         file_api_v1_search_service_proto_enumTypes,
		MessageInfos:      file_api_v1_search_service_proto_msgTypes,
	}.Build()
	File_api_v1_search_service_proto = out.File
	file_api_v1_search_service_proto_rawDesc = nil
	file_api_v1_search_service_proto_goTypes = nil
	file_api_v1_search_service_proto_depIdxs = nil
}
