// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/sensor_upgrade_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SensorUpgradeService_GetSensorUpgradeConfig_FullMethodName    = "/v1.SensorUpgradeService/GetSensorUpgradeConfig"
	SensorUpgradeService_UpdateSensorUpgradeConfig_FullMethodName = "/v1.SensorUpgradeService/UpdateSensorUpgradeConfig"
	SensorUpgradeService_TriggerSensorUpgrade_FullMethodName      = "/v1.SensorUpgradeService/TriggerSensorUpgrade"
	SensorUpgradeService_TriggerSensorCertRotation_FullMethodName = "/v1.SensorUpgradeService/TriggerSensorCertRotation"
)

// SensorUpgradeServiceClient is the client API for SensorUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorUpgradeServiceClient interface {
	GetSensorUpgradeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSensorUpgradeConfigResponse, error)
	UpdateSensorUpgradeConfig(ctx context.Context, in *UpdateSensorUpgradeConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	TriggerSensorUpgrade(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	TriggerSensorCertRotation(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type sensorUpgradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorUpgradeServiceClient(cc grpc.ClientConnInterface) SensorUpgradeServiceClient {
	return &sensorUpgradeServiceClient{cc}
}

func (c *sensorUpgradeServiceClient) GetSensorUpgradeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSensorUpgradeConfigResponse, error) {
	out := new(GetSensorUpgradeConfigResponse)
	err := c.cc.Invoke(ctx, SensorUpgradeService_GetSensorUpgradeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) UpdateSensorUpgradeConfig(ctx context.Context, in *UpdateSensorUpgradeConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SensorUpgradeService_UpdateSensorUpgradeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) TriggerSensorUpgrade(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SensorUpgradeService_TriggerSensorUpgrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorUpgradeServiceClient) TriggerSensorCertRotation(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SensorUpgradeService_TriggerSensorCertRotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorUpgradeServiceServer is the server API for SensorUpgradeService service.
// All implementations should embed UnimplementedSensorUpgradeServiceServer
// for forward compatibility
type SensorUpgradeServiceServer interface {
	GetSensorUpgradeConfig(context.Context, *Empty) (*GetSensorUpgradeConfigResponse, error)
	UpdateSensorUpgradeConfig(context.Context, *UpdateSensorUpgradeConfigRequest) (*Empty, error)
	TriggerSensorUpgrade(context.Context, *ResourceByID) (*Empty, error)
	TriggerSensorCertRotation(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedSensorUpgradeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSensorUpgradeServiceServer struct {
}

func (UnimplementedSensorUpgradeServiceServer) GetSensorUpgradeConfig(context.Context, *Empty) (*GetSensorUpgradeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorUpgradeConfig not implemented")
}
func (UnimplementedSensorUpgradeServiceServer) UpdateSensorUpgradeConfig(context.Context, *UpdateSensorUpgradeConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensorUpgradeConfig not implemented")
}
func (UnimplementedSensorUpgradeServiceServer) TriggerSensorUpgrade(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSensorUpgrade not implemented")
}
func (UnimplementedSensorUpgradeServiceServer) TriggerSensorCertRotation(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSensorCertRotation not implemented")
}

// UnsafeSensorUpgradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorUpgradeServiceServer will
// result in compilation errors.
type UnsafeSensorUpgradeServiceServer interface {
	mustEmbedUnimplementedSensorUpgradeServiceServer()
}

func RegisterSensorUpgradeServiceServer(s grpc.ServiceRegistrar, srv SensorUpgradeServiceServer) {
	s.RegisterService(&SensorUpgradeService_ServiceDesc, srv)
}

func _SensorUpgradeService_GetSensorUpgradeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).GetSensorUpgradeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeService_GetSensorUpgradeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).GetSensorUpgradeConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_UpdateSensorUpgradeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorUpgradeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).UpdateSensorUpgradeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeService_UpdateSensorUpgradeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).UpdateSensorUpgradeConfig(ctx, req.(*UpdateSensorUpgradeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_TriggerSensorUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).TriggerSensorUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeService_TriggerSensorUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).TriggerSensorUpgrade(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorUpgradeService_TriggerSensorCertRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorUpgradeServiceServer).TriggerSensorCertRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorUpgradeService_TriggerSensorCertRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorUpgradeServiceServer).TriggerSensorCertRotation(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorUpgradeService_ServiceDesc is the grpc.ServiceDesc for SensorUpgradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorUpgradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SensorUpgradeService",
	HandlerType: (*SensorUpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorUpgradeConfig",
			Handler:    _SensorUpgradeService_GetSensorUpgradeConfig_Handler,
		},
		{
			MethodName: "UpdateSensorUpgradeConfig",
			Handler:    _SensorUpgradeService_UpdateSensorUpgradeConfig_Handler,
		},
		{
			MethodName: "TriggerSensorUpgrade",
			Handler:    _SensorUpgradeService_TriggerSensorUpgrade_Handler,
		},
		{
			MethodName: "TriggerSensorCertRotation",
			Handler:    _SensorUpgradeService_TriggerSensorCertRotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/sensor_upgrade_service.proto",
}
