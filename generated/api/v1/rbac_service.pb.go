// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/rbac_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A list of k8s roles (free of scoped information)
// Next Tag: 2
type ListRolesResponse struct {
	Roles                []*storage.K8SRole `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListRolesResponse) Reset()         { *m = ListRolesResponse{} }
func (m *ListRolesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRolesResponse) ProtoMessage()    {}
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{0}
}
func (m *ListRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRolesResponse.Merge(m, src)
}
func (m *ListRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRolesResponse proto.InternalMessageInfo

func (m *ListRolesResponse) GetRoles() []*storage.K8SRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *ListRolesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListRolesResponse) Clone() *ListRolesResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListRolesResponse)
	*cloned = *m

	if m.Roles != nil {
		cloned.Roles = make([]*storage.K8SRole, len(m.Roles))
		for idx, v := range m.Roles {
			cloned.Roles[idx] = v.Clone()
		}
	}
	return cloned
}

type GetRoleResponse struct {
	Role                 *storage.K8SRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetRoleResponse) Reset()         { *m = GetRoleResponse{} }
func (m *GetRoleResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoleResponse) ProtoMessage()    {}
func (*GetRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{1}
}
func (m *GetRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoleResponse.Merge(m, src)
}
func (m *GetRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoleResponse proto.InternalMessageInfo

func (m *GetRoleResponse) GetRole() *storage.K8SRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *GetRoleResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetRoleResponse) Clone() *GetRoleResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetRoleResponse)
	*cloned = *m

	cloned.Role = m.Role.Clone()
	return cloned
}

// A list of k8s role bindings (free of scoped information)
// Next Tag: 2
type ListRoleBindingsResponse struct {
	Bindings             []*storage.K8SRoleBinding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListRoleBindingsResponse) Reset()         { *m = ListRoleBindingsResponse{} }
func (m *ListRoleBindingsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRoleBindingsResponse) ProtoMessage()    {}
func (*ListRoleBindingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{2}
}
func (m *ListRoleBindingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoleBindingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoleBindingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoleBindingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoleBindingsResponse.Merge(m, src)
}
func (m *ListRoleBindingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoleBindingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoleBindingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoleBindingsResponse proto.InternalMessageInfo

func (m *ListRoleBindingsResponse) GetBindings() []*storage.K8SRoleBinding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (m *ListRoleBindingsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListRoleBindingsResponse) Clone() *ListRoleBindingsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListRoleBindingsResponse)
	*cloned = *m

	if m.Bindings != nil {
		cloned.Bindings = make([]*storage.K8SRoleBinding, len(m.Bindings))
		for idx, v := range m.Bindings {
			cloned.Bindings[idx] = v.Clone()
		}
	}
	return cloned
}

type GetRoleBindingResponse struct {
	Binding              *storage.K8SRoleBinding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetRoleBindingResponse) Reset()         { *m = GetRoleBindingResponse{} }
func (m *GetRoleBindingResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoleBindingResponse) ProtoMessage()    {}
func (*GetRoleBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{3}
}
func (m *GetRoleBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoleBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoleBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoleBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoleBindingResponse.Merge(m, src)
}
func (m *GetRoleBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoleBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoleBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoleBindingResponse proto.InternalMessageInfo

func (m *GetRoleBindingResponse) GetBinding() *storage.K8SRoleBinding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (m *GetRoleBindingResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetRoleBindingResponse) Clone() *GetRoleBindingResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetRoleBindingResponse)
	*cloned = *m

	cloned.Binding = m.Binding.Clone()
	return cloned
}

// A list of k8s subjects (users and groups only, for service accounts, try the service account service)
// Next Tag: 2
type ListSubjectsResponse struct {
	SubjectAndRoles      []*SubjectAndRoles `protobuf:"bytes,1,rep,name=subject_and_roles,json=subjectAndRoles,proto3" json:"subject_and_roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSubjectsResponse) Reset()         { *m = ListSubjectsResponse{} }
func (m *ListSubjectsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubjectsResponse) ProtoMessage()    {}
func (*ListSubjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{4}
}
func (m *ListSubjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubjectsResponse.Merge(m, src)
}
func (m *ListSubjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSubjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubjectsResponse proto.InternalMessageInfo

func (m *ListSubjectsResponse) GetSubjectAndRoles() []*SubjectAndRoles {
	if m != nil {
		return m.SubjectAndRoles
	}
	return nil
}

func (m *ListSubjectsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListSubjectsResponse) Clone() *ListSubjectsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListSubjectsResponse)
	*cloned = *m

	if m.SubjectAndRoles != nil {
		cloned.SubjectAndRoles = make([]*SubjectAndRoles, len(m.SubjectAndRoles))
		for idx, v := range m.SubjectAndRoles {
			cloned.SubjectAndRoles[idx] = v.Clone()
		}
	}
	return cloned
}

type SubjectAndRoles struct {
	Subject              *storage.Subject   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Roles                []*storage.K8SRole `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SubjectAndRoles) Reset()         { *m = SubjectAndRoles{} }
func (m *SubjectAndRoles) String() string { return proto.CompactTextString(m) }
func (*SubjectAndRoles) ProtoMessage()    {}
func (*SubjectAndRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{5}
}
func (m *SubjectAndRoles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectAndRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectAndRoles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectAndRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectAndRoles.Merge(m, src)
}
func (m *SubjectAndRoles) XXX_Size() int {
	return m.Size()
}
func (m *SubjectAndRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectAndRoles.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectAndRoles proto.InternalMessageInfo

func (m *SubjectAndRoles) GetSubject() *storage.Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *SubjectAndRoles) GetRoles() []*storage.K8SRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *SubjectAndRoles) MessageClone() proto.Message {
	return m.Clone()
}
func (m *SubjectAndRoles) Clone() *SubjectAndRoles {
	if m == nil {
		return nil
	}
	cloned := new(SubjectAndRoles)
	*cloned = *m

	cloned.Subject = m.Subject.Clone()
	if m.Roles != nil {
		cloned.Roles = make([]*storage.K8SRole, len(m.Roles))
		for idx, v := range m.Roles {
			cloned.Roles[idx] = v.Clone()
		}
	}
	return cloned
}

type GetSubjectResponse struct {
	Subject              *storage.Subject   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	ClusterRoles         []*storage.K8SRole `protobuf:"bytes,2,rep,name=cluster_roles,json=clusterRoles,proto3" json:"cluster_roles,omitempty"`
	ScopedRoles          []*ScopedRoles     `protobuf:"bytes,3,rep,name=scoped_roles,json=scopedRoles,proto3" json:"scoped_roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetSubjectResponse) Reset()         { *m = GetSubjectResponse{} }
func (m *GetSubjectResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubjectResponse) ProtoMessage()    {}
func (*GetSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{6}
}
func (m *GetSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubjectResponse.Merge(m, src)
}
func (m *GetSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubjectResponse proto.InternalMessageInfo

func (m *GetSubjectResponse) GetSubject() *storage.Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *GetSubjectResponse) GetClusterRoles() []*storage.K8SRole {
	if m != nil {
		return m.ClusterRoles
	}
	return nil
}

func (m *GetSubjectResponse) GetScopedRoles() []*ScopedRoles {
	if m != nil {
		return m.ScopedRoles
	}
	return nil
}

func (m *GetSubjectResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetSubjectResponse) Clone() *GetSubjectResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetSubjectResponse)
	*cloned = *m

	cloned.Subject = m.Subject.Clone()
	if m.ClusterRoles != nil {
		cloned.ClusterRoles = make([]*storage.K8SRole, len(m.ClusterRoles))
		for idx, v := range m.ClusterRoles {
			cloned.ClusterRoles[idx] = v.Clone()
		}
	}
	if m.ScopedRoles != nil {
		cloned.ScopedRoles = make([]*ScopedRoles, len(m.ScopedRoles))
		for idx, v := range m.ScopedRoles {
			cloned.ScopedRoles[idx] = v.Clone()
		}
	}
	return cloned
}

type ScopedRoles struct {
	Namespace            string             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Roles                []*storage.K8SRole `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ScopedRoles) Reset()         { *m = ScopedRoles{} }
func (m *ScopedRoles) String() string { return proto.CompactTextString(m) }
func (*ScopedRoles) ProtoMessage()    {}
func (*ScopedRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3524f4bea3cf307, []int{7}
}
func (m *ScopedRoles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopedRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopedRoles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopedRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopedRoles.Merge(m, src)
}
func (m *ScopedRoles) XXX_Size() int {
	return m.Size()
}
func (m *ScopedRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopedRoles.DiscardUnknown(m)
}

var xxx_messageInfo_ScopedRoles proto.InternalMessageInfo

func (m *ScopedRoles) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScopedRoles) GetRoles() []*storage.K8SRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *ScopedRoles) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ScopedRoles) Clone() *ScopedRoles {
	if m == nil {
		return nil
	}
	cloned := new(ScopedRoles)
	*cloned = *m

	if m.Roles != nil {
		cloned.Roles = make([]*storage.K8SRole, len(m.Roles))
		for idx, v := range m.Roles {
			cloned.Roles[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ListRolesResponse)(nil), "v1.ListRolesResponse")
	proto.RegisterType((*GetRoleResponse)(nil), "v1.GetRoleResponse")
	proto.RegisterType((*ListRoleBindingsResponse)(nil), "v1.ListRoleBindingsResponse")
	proto.RegisterType((*GetRoleBindingResponse)(nil), "v1.GetRoleBindingResponse")
	proto.RegisterType((*ListSubjectsResponse)(nil), "v1.ListSubjectsResponse")
	proto.RegisterType((*SubjectAndRoles)(nil), "v1.SubjectAndRoles")
	proto.RegisterType((*GetSubjectResponse)(nil), "v1.GetSubjectResponse")
	proto.RegisterType((*ScopedRoles)(nil), "v1.ScopedRoles")
}

func init() { proto.RegisterFile("api/v1/rbac_service.proto", fileDescriptor_c3524f4bea3cf307) }

var fileDescriptor_c3524f4bea3cf307 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x8e, 0xd2, 0x4e,
	0x14, 0xc7, 0x7f, 0x65, 0xf7, 0x27, 0x72, 0xc0, 0x05, 0x06, 0x61, 0xbb, 0x5d, 0x24, 0x9b, 0x89,
	0x31, 0xc6, 0x8b, 0x92, 0xb2, 0x31, 0x9a, 0x78, 0x61, 0x24, 0x26, 0xab, 0x59, 0x8d, 0xd9, 0x12,
	0xe3, 0x9f, 0x0b, 0xc9, 0x50, 0x26, 0x58, 0x85, 0x4e, 0xd3, 0x29, 0xd5, 0x8d, 0xf1, 0xc6, 0x5b,
	0x2f, 0xbd, 0xf1, 0x1d, 0x7c, 0x11, 0x2f, 0x4d, 0x7c, 0x01, 0x83, 0x3e, 0x88, 0xe9, 0xcc, 0xb4,
	0x85, 0x82, 0x1b, 0xbd, 0xec, 0x39, 0xdf, 0xf3, 0x3d, 0x1f, 0xce, 0x9c, 0x03, 0xec, 0x11, 0xdf,
	0xed, 0x46, 0x56, 0x37, 0x18, 0x11, 0x67, 0xc8, 0x69, 0x10, 0xb9, 0x0e, 0x35, 0xfd, 0x80, 0x85,
	0x0c, 0x15, 0x22, 0xcb, 0x68, 0xa8, 0xb4, 0xc3, 0x66, 0x33, 0xe6, 0xc9, 0x84, 0xb1, 0xaf, 0x82,
	0x9c, 0x92, 0xc0, 0x79, 0xb9, 0x5a, 0x65, 0xb4, 0x27, 0x8c, 0x4d, 0xa6, 0xb4, 0x1b, 0x6b, 0x88,
	0xe7, 0xb1, 0x90, 0x84, 0x2e, 0xf3, 0xb8, 0xca, 0x22, 0x1e, 0xb2, 0x80, 0x4c, 0xa8, 0xe8, 0x27,
	0x63, 0xf8, 0x16, 0xd4, 0x1f, 0xb8, 0x3c, 0xb4, 0xd9, 0x94, 0x72, 0x9b, 0x72, 0x9f, 0x79, 0x9c,
	0xa2, 0x2b, 0xf0, 0x7f, 0x10, 0x07, 0x74, 0xed, 0x60, 0xeb, 0x6a, 0xb9, 0x57, 0x33, 0x55, 0xa1,
	0x79, 0x7c, 0x93, 0xc7, 0x4a, 0x5b, 0xa6, 0xf1, 0x0d, 0xa8, 0x1e, 0x51, 0x51, 0x9b, 0x96, 0x5e,
	0x86, 0xed, 0x38, 0xa7, 0x6b, 0x07, 0xda, 0xc6, 0x4a, 0x91, 0xc5, 0x8f, 0x40, 0x4f, 0xba, 0xf6,
	0x5d, 0x6f, 0xec, 0x7a, 0x93, 0xac, 0xf9, 0x21, 0x9c, 0x1f, 0xa9, 0x98, 0xea, 0xbf, 0x9b, 0x77,
	0x51, 0x35, 0x76, 0x2a, 0xc4, 0xc7, 0xd0, 0x52, 0x24, 0x49, 0x2e, 0xb1, 0xb3, 0xa0, 0xa8, 0x54,
	0x8a, 0xe9, 0x8f, 0x6e, 0x89, 0x0e, 0x3f, 0x81, 0x8b, 0x31, 0xdd, 0x60, 0x3e, 0x7a, 0x45, 0x9d,
	0x30, 0x23, 0xbb, 0x0d, 0x75, 0x2e, 0x63, 0x43, 0xe2, 0x8d, 0x87, 0xcb, 0x23, 0x6a, 0x98, 0x91,
	0x65, 0xaa, 0x82, 0x3b, 0xde, 0x58, 0x8e, 0xb3, 0xca, 0x57, 0x03, 0x98, 0x42, 0x35, 0xa7, 0x41,
	0xd7, 0xa0, 0xa8, 0x54, 0x6b, 0x23, 0x53, 0x52, 0x3b, 0x11, 0x64, 0xcf, 0x52, 0x38, 0xfb, 0x59,
	0xbe, 0x68, 0x80, 0x8e, 0x68, 0xc2, 0x9f, 0xe2, 0xff, 0x4b, 0xab, 0xeb, 0x70, 0xc1, 0x99, 0xce,
	0x79, 0x48, 0x83, 0xe1, 0xd9, 0x2d, 0x2b, 0x4a, 0x26, 0x7f, 0x4d, 0x0f, 0x2a, 0xdc, 0x61, 0x3e,
	0x4d, 0x86, 0xb3, 0x25, 0xaa, 0xaa, 0x62, 0x38, 0x22, 0x2e, 0x07, 0x53, 0xe6, 0xd9, 0x07, 0x1e,
	0x40, 0x79, 0x29, 0x87, 0xda, 0x50, 0xf2, 0xc8, 0x8c, 0x72, 0x9f, 0x38, 0x72, 0x8b, 0x4a, 0x76,
	0x16, 0xf8, 0xdb, 0x11, 0xf4, 0x3e, 0x6e, 0x43, 0xd9, 0x1e, 0x11, 0x67, 0x20, 0xcf, 0x03, 0x3d,
	0x84, 0xa2, 0xda, 0x0f, 0x54, 0x8b, 0x69, 0x6c, 0xca, 0xd9, 0x3c, 0x70, 0x68, 0xff, 0xf4, 0xfe,
	0x5d, 0x43, 0x3c, 0x5e, 0x6e, 0x91, 0xf1, 0xfe, 0x87, 0xef, 0xbf, 0x3e, 0x15, 0x9a, 0xa8, 0x91,
	0x1c, 0x68, 0x57, 0x38, 0x77, 0xdf, 0xb9, 0xe3, 0xf7, 0xe8, 0x1e, 0x94, 0xd2, 0xab, 0x41, 0x15,
	0x61, 0x48, 0xde, 0x9c, 0xcc, 0x69, 0x70, 0x6a, 0x34, 0xe3, 0xaf, 0xb5, 0x93, 0xc2, 0x2d, 0x61,
	0x57, 0x43, 0x3b, 0xab, 0x76, 0xe8, 0x05, 0xec, 0xac, 0x2e, 0xee, 0x06, 0x3e, 0x63, 0x89, 0x2f,
	0xb7, 0xde, 0xb8, 0x23, 0x7c, 0x75, 0xd4, 0x4a, 0x7d, 0x93, 0x9b, 0x90, 0xa4, 0xcf, 0xa0, 0x96,
	0xbf, 0xb4, 0x1c, 0x70, 0x7b, 0x19, 0x38, 0x7f, 0x8d, 0x78, 0x4f, 0xf8, 0x37, 0x50, 0x7d, 0xcd,
	0x1f, 0x3d, 0x06, 0xc8, 0xb6, 0x6c, 0x03, 0x76, 0x4b, 0x61, 0xe7, 0xf6, 0x10, 0x5f, 0x12, 0x96,
	0xbb, 0xa8, 0x99, 0x5a, 0xaa, 0xad, 0x93, 0xc4, 0x27, 0x50, 0x59, 0xbe, 0xbe, 0x1c, 0xad, 0x9e,
	0xd0, 0xe6, 0xaf, 0x73, 0x03, 0xa9, 0xb2, 0xe5, 0x7d, 0xf3, 0xeb, 0xa2, 0xa3, 0x7d, 0x5b, 0x74,
	0xb4, 0x1f, 0x8b, 0x8e, 0xf6, 0xf9, 0x67, 0xe7, 0x3f, 0xd0, 0x5d, 0x66, 0xf2, 0x90, 0x38, 0xaf,
	0x03, 0xf6, 0x56, 0xfe, 0x13, 0x9a, 0xc4, 0x77, 0xcd, 0xc8, 0x7a, 0x5e, 0x88, 0xac, 0xa7, 0x85,
	0xd1, 0x39, 0x11, 0x3b, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x47, 0x37, 0x40, 0xcb, 0xa2, 0x05,
	0x00, 0x00,
}

func (m *ListRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbacService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoleBindingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoleBindingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoleBindingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bindings) > 0 {
		for iNdEx := len(m.Bindings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bindings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRoleBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoleBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Binding != nil {
		{
			size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbacService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubjectAndRoles) > 0 {
		for iNdEx := len(m.SubjectAndRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubjectAndRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubjectAndRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectAndRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectAndRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbacService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScopedRoles) > 0 {
		for iNdEx := len(m.ScopedRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScopedRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClusterRoles) > 0 {
		for iNdEx := len(m.ClusterRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbacService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopedRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopedRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopedRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbacService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRbacService(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRbacService(dAtA []byte, offset int, v uint64) int {
	offset -= sovRbacService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovRbacService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRoleBindingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoleBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovRbacService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSubjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubjectAndRoles) > 0 {
		for _, e := range m.SubjectAndRoles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubjectAndRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovRbacService(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovRbacService(uint64(l))
	}
	if len(m.ClusterRoles) > 0 {
		for _, e := range m.ClusterRoles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if len(m.ScopedRoles) > 0 {
		for _, e := range m.ScopedRoles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScopedRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRbacService(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovRbacService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRbacService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRbacService(x uint64) (n int) {
	return sovRbacService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &storage.K8SRole{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &storage.K8SRole{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoleBindingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoleBindingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoleBindingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &storage.K8SRoleBinding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &storage.K8SRoleBinding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectAndRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectAndRoles = append(m.SubjectAndRoles, &SubjectAndRoles{})
			if err := m.SubjectAndRoles[len(m.SubjectAndRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectAndRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectAndRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectAndRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &storage.Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &storage.K8SRole{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &storage.Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRoles = append(m.ClusterRoles, &storage.K8SRole{})
			if err := m.ClusterRoles[len(m.ClusterRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopedRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopedRoles = append(m.ScopedRoles, &ScopedRoles{})
			if err := m.ScopedRoles[len(m.ScopedRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopedRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopedRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopedRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbacService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbacService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &storage.K8SRole{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbacService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbacService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbacService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbacService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbacService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRbacService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRbacService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRbacService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRbacService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbacService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRbacService = fmt.Errorf("proto: unexpected end of group")
)
