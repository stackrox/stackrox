// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/pod_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PodService_GetPods_FullMethodName    = "/v1.PodService/GetPods"
	PodService_ExportPods_FullMethodName = "/v1.PodService/ExportPods"
)

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodServiceClient interface {
	// GetPods returns the pods.
	GetPods(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*PodsResponse, error)
	ExportPods(ctx context.Context, in *ExportPodRequest, opts ...grpc.CallOption) (PodService_ExportPodsClient, error)
}

type podServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) GetPods(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*PodsResponse, error) {
	out := new(PodsResponse)
	err := c.cc.Invoke(ctx, PodService_GetPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) ExportPods(ctx context.Context, in *ExportPodRequest, opts ...grpc.CallOption) (PodService_ExportPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PodService_ServiceDesc.Streams[0], PodService_ExportPods_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &podServiceExportPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PodService_ExportPodsClient interface {
	Recv() (*ExportPodResponse, error)
	grpc.ClientStream
}

type podServiceExportPodsClient struct {
	grpc.ClientStream
}

func (x *podServiceExportPodsClient) Recv() (*ExportPodResponse, error) {
	m := new(ExportPodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PodServiceServer is the server API for PodService service.
// All implementations should embed UnimplementedPodServiceServer
// for forward compatibility
type PodServiceServer interface {
	// GetPods returns the pods.
	GetPods(context.Context, *RawQuery) (*PodsResponse, error)
	ExportPods(*ExportPodRequest, PodService_ExportPodsServer) error
}

// UnimplementedPodServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPodServiceServer struct {
}

func (UnimplementedPodServiceServer) GetPods(context.Context, *RawQuery) (*PodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedPodServiceServer) ExportPods(*ExportPodRequest, PodService_ExportPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportPods not implemented")
}

// UnsafePodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServiceServer will
// result in compilation errors.
type UnsafePodServiceServer interface {
	mustEmbedUnimplementedPodServiceServer()
}

func RegisterPodServiceServer(s grpc.ServiceRegistrar, srv PodServiceServer) {
	s.RegisterService(&PodService_ServiceDesc, srv)
}

func _PodService_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_GetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).GetPods(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_ExportPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportPodRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodServiceServer).ExportPods(m, &podServiceExportPodsServer{stream})
}

type PodService_ExportPodsServer interface {
	Send(*ExportPodResponse) error
	grpc.ServerStream
}

type podServiceExportPodsServer struct {
	grpc.ServerStream
}

func (x *podServiceExportPodsServer) Send(m *ExportPodResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PodService_ServiceDesc is the grpc.ServiceDesc for PodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPods",
			Handler:    _PodService_GetPods_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportPods",
			Handler:       _PodService_ExportPods_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/pod_service.proto",
}
