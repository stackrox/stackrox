// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/image_integration_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetImageIntegrationsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImageIntegrationsRequest) Reset()         { *m = GetImageIntegrationsRequest{} }
func (m *GetImageIntegrationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetImageIntegrationsRequest) ProtoMessage()    {}
func (*GetImageIntegrationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_263887791ba1d8ff, []int{0}
}
func (m *GetImageIntegrationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImageIntegrationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImageIntegrationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImageIntegrationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageIntegrationsRequest.Merge(m, src)
}
func (m *GetImageIntegrationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetImageIntegrationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageIntegrationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageIntegrationsRequest proto.InternalMessageInfo

func (m *GetImageIntegrationsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetImageIntegrationsRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *GetImageIntegrationsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetImageIntegrationsRequest) Clone() *GetImageIntegrationsRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetImageIntegrationsRequest)
	*cloned = *m

	return cloned
}

type GetImageIntegrationsResponse struct {
	Integrations         []*storage.ImageIntegration `protobuf:"bytes,1,rep,name=integrations,proto3" json:"integrations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetImageIntegrationsResponse) Reset()         { *m = GetImageIntegrationsResponse{} }
func (m *GetImageIntegrationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetImageIntegrationsResponse) ProtoMessage()    {}
func (*GetImageIntegrationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_263887791ba1d8ff, []int{1}
}
func (m *GetImageIntegrationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImageIntegrationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImageIntegrationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImageIntegrationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageIntegrationsResponse.Merge(m, src)
}
func (m *GetImageIntegrationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetImageIntegrationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageIntegrationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageIntegrationsResponse proto.InternalMessageInfo

func (m *GetImageIntegrationsResponse) GetIntegrations() []*storage.ImageIntegration {
	if m != nil {
		return m.Integrations
	}
	return nil
}

func (m *GetImageIntegrationsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetImageIntegrationsResponse) Clone() *GetImageIntegrationsResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetImageIntegrationsResponse)
	*cloned = *m

	if m.Integrations != nil {
		cloned.Integrations = make([]*storage.ImageIntegration, len(m.Integrations))
		for idx, v := range m.Integrations {
			cloned.Integrations[idx] = v.Clone()
		}
	}
	return cloned
}

type UpdateImageIntegrationRequest struct {
	Config *storage.ImageIntegration `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// When false, use the stored credentials of an existing image integration given its ID.
	UpdatePassword       bool     `protobuf:"varint,2,opt,name=updatePassword,proto3" json:"updatePassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateImageIntegrationRequest) Reset()         { *m = UpdateImageIntegrationRequest{} }
func (m *UpdateImageIntegrationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateImageIntegrationRequest) ProtoMessage()    {}
func (*UpdateImageIntegrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_263887791ba1d8ff, []int{2}
}
func (m *UpdateImageIntegrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateImageIntegrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateImageIntegrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateImageIntegrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateImageIntegrationRequest.Merge(m, src)
}
func (m *UpdateImageIntegrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateImageIntegrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateImageIntegrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateImageIntegrationRequest proto.InternalMessageInfo

func (m *UpdateImageIntegrationRequest) GetConfig() *storage.ImageIntegration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateImageIntegrationRequest) GetUpdatePassword() bool {
	if m != nil {
		return m.UpdatePassword
	}
	return false
}

func (m *UpdateImageIntegrationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateImageIntegrationRequest) Clone() *UpdateImageIntegrationRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateImageIntegrationRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetImageIntegrationsRequest)(nil), "v1.GetImageIntegrationsRequest")
	proto.RegisterType((*GetImageIntegrationsResponse)(nil), "v1.GetImageIntegrationsResponse")
	proto.RegisterType((*UpdateImageIntegrationRequest)(nil), "v1.UpdateImageIntegrationRequest")
}

func init() {
	proto.RegisterFile("api/v1/image_integration_service.proto", fileDescriptor_263887791ba1d8ff)
}

var fileDescriptor_263887791ba1d8ff = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x51, 0x6b, 0xd3, 0x50,
	0x14, 0xc7, 0x4d, 0x95, 0xcd, 0x9d, 0x89, 0xc8, 0x6d, 0xdd, 0x6a, 0xd6, 0xb5, 0xdd, 0x05, 0xeb,
	0x28, 0x7a, 0x43, 0xea, 0x83, 0x30, 0xf1, 0x65, 0x4c, 0xa4, 0xf8, 0x52, 0xaa, 0x82, 0x0a, 0x32,
	0xee, 0xd2, 0xb3, 0x10, 0x6c, 0x72, 0x63, 0xee, 0x4d, 0xdc, 0x26, 0x3e, 0xe8, 0x57, 0xf0, 0xc5,
	0x8f, 0xe4, 0xa3, 0xe0, 0x17, 0x90, 0xea, 0x07, 0x91, 0xdc, 0x44, 0xad, 0x6d, 0x12, 0x90, 0xbd,
	0xb5, 0xf7, 0x9c, 0xfc, 0x7f, 0xe7, 0x7f, 0xee, 0x39, 0x17, 0x7a, 0x3c, 0xf4, 0xac, 0xc4, 0xb6,
	0x3c, 0x9f, 0xbb, 0x78, 0xe8, 0x05, 0x0a, 0xdd, 0x88, 0x2b, 0x4f, 0x04, 0x87, 0x12, 0xa3, 0xc4,
	0x73, 0x90, 0x85, 0x91, 0x50, 0x82, 0xd4, 0x12, 0xdb, 0xac, 0xe7, 0xb9, 0x8e, 0xf0, 0x7d, 0x11,
	0x64, 0x01, 0x93, 0xe4, 0x87, 0xe8, 0x87, 0xea, 0x34, 0x3f, 0x6b, 0xb9, 0x42, 0xb8, 0x53, 0xb4,
	0xd2, 0x10, 0x0f, 0x02, 0xa1, 0xb4, 0xa2, 0xcc, 0xa3, 0x1d, 0xa9, 0x44, 0xc4, 0x5d, 0x5c, 0x66,
	0x66, 0x09, 0xf4, 0x31, 0x6c, 0x3d, 0x42, 0x35, 0x4c, 0xa3, 0xc3, 0xbf, 0x41, 0x39, 0xc6, 0x37,
	0x31, 0x4a, 0x45, 0x08, 0x5c, 0x0a, 0xb8, 0x8f, 0x4d, 0xa3, 0x6b, 0xec, 0xae, 0x8d, 0xf5, 0x6f,
	0xd2, 0x84, 0x55, 0x67, 0x1a, 0x4b, 0x85, 0x51, 0xb3, 0xa6, 0x8f, 0x7f, 0xff, 0xa5, 0xaf, 0xa0,
	0x55, 0x2c, 0x26, 0x43, 0x11, 0x48, 0x24, 0x0f, 0xe0, 0xca, 0x5c, 0x05, 0xb2, 0x69, 0x74, 0x2f,
	0xee, 0xae, 0x0f, 0x6e, 0xb0, 0xbc, 0x48, 0xb6, 0xf8, 0xe5, 0xf8, 0x9f, 0x74, 0x7a, 0x06, 0xdb,
	0xcf, 0xc2, 0x09, 0x57, 0xb8, 0x94, 0x97, 0x57, 0x6b, 0xc3, 0x8a, 0x23, 0x82, 0x63, 0xcf, 0xd5,
	0xf5, 0x56, 0x2a, 0xe7, 0x89, 0xa4, 0x07, 0x57, 0x63, 0xad, 0x39, 0xe2, 0x52, 0xbe, 0x15, 0xd1,
	0x44, 0x7b, 0xba, 0x3c, 0x5e, 0x38, 0x1d, 0x7c, 0x58, 0x85, 0xcd, 0x45, 0x91, 0x27, 0xd9, 0xad,
	0x91, 0x63, 0xa8, 0x17, 0xd8, 0x26, 0xd7, 0x58, 0x62, 0xb3, 0x31, 0x4a, 0x11, 0x47, 0x0e, 0xee,
	0x9f, 0x0e, 0x0f, 0xcc, 0xf2, 0x7a, 0x28, 0xfd, 0xf8, 0xed, 0xe7, 0xa7, 0x5a, 0x8b, 0x98, 0x7f,
	0x06, 0x64, 0xde, 0xba, 0xf5, 0xce, 0x9b, 0xbc, 0x27, 0x27, 0xd0, 0x28, 0x6a, 0x2f, 0xe9, 0xa4,
	0xa0, 0x8a, 0x5b, 0x34, 0xbb, 0xe5, 0x09, 0xd9, 0xcd, 0xd0, 0x6d, 0x8d, 0xdf, 0x24, 0xd7, 0x0b,
	0xf1, 0x24, 0x80, 0xc6, 0x48, 0xc8, 0x65, 0x8b, 0xe5, 0x86, 0xaa, 0xbc, 0x76, 0x35, 0xcc, 0xa4,
	0xc5, 0xb0, 0x3d, 0xa3, 0x4f, 0x8e, 0xa0, 0x3e, 0x8a, 0xff, 0x0b, 0xb7, 0x96, 0x5a, 0x7c, 0x98,
	0xee, 0x05, 0xbd, 0xa9, 0xe5, 0x3b, 0x66, 0x45, 0x2b, 0x53, 0x86, 0x03, 0x8d, 0xa7, 0x28, 0xcf,
	0x09, 0xa1, 0x25, 0x10, 0x85, 0x52, 0xa5, 0x90, 0x17, 0xb0, 0x71, 0x80, 0x53, 0x5c, 0x1e, 0xd9,
	0x82, 0xe9, 0x98, 0x53, 0xcf, 0xa7, 0xa1, 0x5f, 0x35, 0x0d, 0x0a, 0x36, 0x8a, 0xb7, 0x81, 0xec,
	0xa4, 0x42, 0x95, 0x9b, 0x32, 0xcf, 0xba, 0xad, 0x59, 0xbd, 0xc1, 0x4e, 0x09, 0x2b, 0x5b, 0x14,
	0x96, 0x77, 0xed, 0x0c, 0xb6, 0xd2, 0xae, 0x65, 0xea, 0x93, 0x73, 0xa2, 0xef, 0x68, 0xf4, 0x2d,
	0x4a, 0xcb, 0x9b, 0x68, 0x65, 0x7b, 0x38, 0xd9, 0x33, 0xfa, 0xfb, 0xf7, 0xbe, 0xcc, 0xda, 0xc6,
	0xd7, 0x59, 0xdb, 0xf8, 0x3e, 0x6b, 0x1b, 0x9f, 0x7f, 0xb4, 0x2f, 0x40, 0xd3, 0x13, 0x4c, 0x2a,
	0xee, 0xbc, 0x8e, 0xc4, 0x49, 0xf6, 0xa0, 0x31, 0x1e, 0x7a, 0x2c, 0xb1, 0x5f, 0xae, 0x33, 0x2b,
	0x7b, 0x2c, 0xef, 0x27, 0xf6, 0xf3, 0xda, 0xd1, 0x8a, 0x0e, 0xde, 0xfd, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xa8, 0xf6, 0x2b, 0x74, 0x83, 0x05, 0x00, 0x00,
}

func (m *GetImageIntegrationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageIntegrationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImageIntegrationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintImageIntegrationService(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImageIntegrationService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetImageIntegrationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageIntegrationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImageIntegrationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Integrations) > 0 {
		for iNdEx := len(m.Integrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Integrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImageIntegrationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateImageIntegrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateImageIntegrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateImageIntegrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatePassword {
		i--
		if m.UpdatePassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImageIntegrationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImageIntegrationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovImageIntegrationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetImageIntegrationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImageIntegrationService(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovImageIntegrationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetImageIntegrationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Integrations) > 0 {
		for _, e := range m.Integrations {
			l = e.Size()
			n += 1 + l + sovImageIntegrationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateImageIntegrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovImageIntegrationService(uint64(l))
	}
	if m.UpdatePassword {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImageIntegrationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImageIntegrationService(x uint64) (n int) {
	return sovImageIntegrationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetImageIntegrationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageIntegrationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageIntegrationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImageIntegrationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageIntegrationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageIntegrationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Integrations = append(m.Integrations, &storage.ImageIntegration{})
			if err := m.Integrations[len(m.Integrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateImageIntegrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageIntegrationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateImageIntegrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateImageIntegrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &storage.ImageIntegration{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePassword = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImageIntegrationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageIntegrationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageIntegrationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageIntegrationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageIntegrationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImageIntegrationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImageIntegrationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImageIntegrationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImageIntegrationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageIntegrationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImageIntegrationService = fmt.Errorf("proto: unexpected end of group")
)
