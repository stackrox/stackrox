// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/db_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DBService_GetExportCapabilities_FullMethodName   = "/v1.DBService/GetExportCapabilities"
	DBService_GetActiveRestoreProcess_FullMethodName = "/v1.DBService/GetActiveRestoreProcess"
	DBService_InterruptRestoreProcess_FullMethodName = "/v1.DBService/InterruptRestoreProcess"
	DBService_CancelRestoreProcess_FullMethodName    = "/v1.DBService/CancelRestoreProcess"
)

// DBServiceClient is the client API for DBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBServiceClient interface {
	GetExportCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDBExportCapabilitiesResponse, error)
	GetActiveRestoreProcess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetActiveDBRestoreProcessResponse, error)
	InterruptRestoreProcess(ctx context.Context, in *InterruptDBRestoreProcessRequest, opts ...grpc.CallOption) (*InterruptDBRestoreProcessResponse, error)
	CancelRestoreProcess(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type dBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBServiceClient(cc grpc.ClientConnInterface) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) GetExportCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDBExportCapabilitiesResponse, error) {
	out := new(GetDBExportCapabilitiesResponse)
	err := c.cc.Invoke(ctx, DBService_GetExportCapabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetActiveRestoreProcess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetActiveDBRestoreProcessResponse, error) {
	out := new(GetActiveDBRestoreProcessResponse)
	err := c.cc.Invoke(ctx, DBService_GetActiveRestoreProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) InterruptRestoreProcess(ctx context.Context, in *InterruptDBRestoreProcessRequest, opts ...grpc.CallOption) (*InterruptDBRestoreProcessResponse, error) {
	out := new(InterruptDBRestoreProcessResponse)
	err := c.cc.Invoke(ctx, DBService_InterruptRestoreProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CancelRestoreProcess(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DBService_CancelRestoreProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServiceServer is the server API for DBService service.
// All implementations should embed UnimplementedDBServiceServer
// for forward compatibility
type DBServiceServer interface {
	GetExportCapabilities(context.Context, *Empty) (*GetDBExportCapabilitiesResponse, error)
	GetActiveRestoreProcess(context.Context, *Empty) (*GetActiveDBRestoreProcessResponse, error)
	InterruptRestoreProcess(context.Context, *InterruptDBRestoreProcessRequest) (*InterruptDBRestoreProcessResponse, error)
	CancelRestoreProcess(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedDBServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDBServiceServer struct {
}

func (UnimplementedDBServiceServer) GetExportCapabilities(context.Context, *Empty) (*GetDBExportCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportCapabilities not implemented")
}
func (UnimplementedDBServiceServer) GetActiveRestoreProcess(context.Context, *Empty) (*GetActiveDBRestoreProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveRestoreProcess not implemented")
}
func (UnimplementedDBServiceServer) InterruptRestoreProcess(context.Context, *InterruptDBRestoreProcessRequest) (*InterruptDBRestoreProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterruptRestoreProcess not implemented")
}
func (UnimplementedDBServiceServer) CancelRestoreProcess(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRestoreProcess not implemented")
}

// UnsafeDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServiceServer will
// result in compilation errors.
type UnsafeDBServiceServer interface {
	mustEmbedUnimplementedDBServiceServer()
}

func RegisterDBServiceServer(s grpc.ServiceRegistrar, srv DBServiceServer) {
	s.RegisterService(&DBService_ServiceDesc, srv)
}

func _DBService_GetExportCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetExportCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetExportCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetExportCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetActiveRestoreProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetActiveRestoreProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetActiveRestoreProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetActiveRestoreProcess(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_InterruptRestoreProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterruptDBRestoreProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).InterruptRestoreProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_InterruptRestoreProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).InterruptRestoreProcess(ctx, req.(*InterruptDBRestoreProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CancelRestoreProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CancelRestoreProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CancelRestoreProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CancelRestoreProcess(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// DBService_ServiceDesc is the grpc.ServiceDesc for DBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExportCapabilities",
			Handler:    _DBService_GetExportCapabilities_Handler,
		},
		{
			MethodName: "GetActiveRestoreProcess",
			Handler:    _DBService_GetActiveRestoreProcess_Handler,
		},
		{
			MethodName: "InterruptRestoreProcess",
			Handler:    _DBService_InterruptRestoreProcess_Handler,
		},
		{
			MethodName: "CancelRestoreProcess",
			Handler:    _DBService_CancelRestoreProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/db_service.proto",
}
