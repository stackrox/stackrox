// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/service_identity_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceIdentityResponse struct {
	Identities           []*storage.ServiceIdentity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ServiceIdentityResponse) Reset()         { *m = ServiceIdentityResponse{} }
func (m *ServiceIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceIdentityResponse) ProtoMessage()    {}
func (*ServiceIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c074a5de4b4a386, []int{0}
}
func (m *ServiceIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceIdentityResponse.Merge(m, src)
}
func (m *ServiceIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceIdentityResponse proto.InternalMessageInfo

func (m *ServiceIdentityResponse) GetIdentities() []*storage.ServiceIdentity {
	if m != nil {
		return m.Identities
	}
	return nil
}

func (m *ServiceIdentityResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ServiceIdentityResponse) Clone() *ServiceIdentityResponse {
	if m == nil {
		return nil
	}
	cloned := new(ServiceIdentityResponse)
	*cloned = *m

	if m.Identities != nil {
		cloned.Identities = make([]*storage.ServiceIdentity, len(m.Identities))
		for idx, v := range m.Identities {
			cloned.Identities[idx] = v.Clone()
		}
	}
	return cloned
}

type CreateServiceIdentityRequest struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 storage.ServiceType `protobuf:"varint,2,opt,name=type,proto3,enum=storage.ServiceType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CreateServiceIdentityRequest) Reset()         { *m = CreateServiceIdentityRequest{} }
func (m *CreateServiceIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*CreateServiceIdentityRequest) ProtoMessage()    {}
func (*CreateServiceIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c074a5de4b4a386, []int{1}
}
func (m *CreateServiceIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceIdentityRequest.Merge(m, src)
}
func (m *CreateServiceIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateServiceIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceIdentityRequest proto.InternalMessageInfo

func (m *CreateServiceIdentityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateServiceIdentityRequest) GetType() storage.ServiceType {
	if m != nil {
		return m.Type
	}
	return storage.ServiceType_UNKNOWN_SERVICE
}

func (m *CreateServiceIdentityRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateServiceIdentityRequest) Clone() *CreateServiceIdentityRequest {
	if m == nil {
		return nil
	}
	cloned := new(CreateServiceIdentityRequest)
	*cloned = *m

	return cloned
}

type CreateServiceIdentityResponse struct {
	Identity             *storage.ServiceIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	CertificatePem       []byte                   `protobuf:"bytes,2,opt,name=certificate_pem,json=certificatePem,proto3" json:"certificate_pem,omitempty"`
	PrivateKeyPem        []byte                   `protobuf:"bytes,3,opt,name=private_key_pem,json=privateKeyPem,proto3" json:"private_key_pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CreateServiceIdentityResponse) Reset()         { *m = CreateServiceIdentityResponse{} }
func (m *CreateServiceIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*CreateServiceIdentityResponse) ProtoMessage()    {}
func (*CreateServiceIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c074a5de4b4a386, []int{2}
}
func (m *CreateServiceIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceIdentityResponse.Merge(m, src)
}
func (m *CreateServiceIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateServiceIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceIdentityResponse proto.InternalMessageInfo

func (m *CreateServiceIdentityResponse) GetIdentity() *storage.ServiceIdentity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *CreateServiceIdentityResponse) GetCertificatePem() []byte {
	if m != nil {
		return m.CertificatePem
	}
	return nil
}

func (m *CreateServiceIdentityResponse) GetPrivateKeyPem() []byte {
	if m != nil {
		return m.PrivateKeyPem
	}
	return nil
}

func (m *CreateServiceIdentityResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CreateServiceIdentityResponse) Clone() *CreateServiceIdentityResponse {
	if m == nil {
		return nil
	}
	cloned := new(CreateServiceIdentityResponse)
	*cloned = *m

	cloned.Identity = m.Identity.Clone()
	if m.CertificatePem != nil {
		cloned.CertificatePem = make([]byte, len(m.CertificatePem))
		copy(cloned.CertificatePem, m.CertificatePem)
	}
	if m.PrivateKeyPem != nil {
		cloned.PrivateKeyPem = make([]byte, len(m.PrivateKeyPem))
		copy(cloned.PrivateKeyPem, m.PrivateKeyPem)
	}
	return cloned
}

type Authority struct {
	CertificatePem       []byte   `protobuf:"bytes,1,opt,name=certificate_pem,json=certificatePem,proto3" json:"certificate_pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Authority) Reset()         { *m = Authority{} }
func (m *Authority) String() string { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()    {}
func (*Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c074a5de4b4a386, []int{3}
}
func (m *Authority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority.Merge(m, src)
}
func (m *Authority) XXX_Size() int {
	return m.Size()
}
func (m *Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_Authority proto.InternalMessageInfo

func (m *Authority) GetCertificatePem() []byte {
	if m != nil {
		return m.CertificatePem
	}
	return nil
}

func (m *Authority) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Authority) Clone() *Authority {
	if m == nil {
		return nil
	}
	cloned := new(Authority)
	*cloned = *m

	if m.CertificatePem != nil {
		cloned.CertificatePem = make([]byte, len(m.CertificatePem))
		copy(cloned.CertificatePem, m.CertificatePem)
	}
	return cloned
}

type Authorities struct {
	Authorities          []*Authority `protobuf:"bytes,1,rep,name=authorities,proto3" json:"authorities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Authorities) Reset()         { *m = Authorities{} }
func (m *Authorities) String() string { return proto.CompactTextString(m) }
func (*Authorities) ProtoMessage()    {}
func (*Authorities) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c074a5de4b4a386, []int{4}
}
func (m *Authorities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authorities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authorities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Authorities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorities.Merge(m, src)
}
func (m *Authorities) XXX_Size() int {
	return m.Size()
}
func (m *Authorities) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorities.DiscardUnknown(m)
}

var xxx_messageInfo_Authorities proto.InternalMessageInfo

func (m *Authorities) GetAuthorities() []*Authority {
	if m != nil {
		return m.Authorities
	}
	return nil
}

func (m *Authorities) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Authorities) Clone() *Authorities {
	if m == nil {
		return nil
	}
	cloned := new(Authorities)
	*cloned = *m

	if m.Authorities != nil {
		cloned.Authorities = make([]*Authority, len(m.Authorities))
		for idx, v := range m.Authorities {
			cloned.Authorities[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ServiceIdentityResponse)(nil), "v1.ServiceIdentityResponse")
	proto.RegisterType((*CreateServiceIdentityRequest)(nil), "v1.CreateServiceIdentityRequest")
	proto.RegisterType((*CreateServiceIdentityResponse)(nil), "v1.CreateServiceIdentityResponse")
	proto.RegisterType((*Authority)(nil), "v1.Authority")
	proto.RegisterType((*Authorities)(nil), "v1.Authorities")
}

func init() {
	proto.RegisterFile("api/v1/service_identity_service.proto", fileDescriptor_5c074a5de4b4a386)
}

var fileDescriptor_5c074a5de4b4a386 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x71, 0x86, 0x10, 0xfd, 0xca, 0x5a, 0x61, 0x6d, 0xb4, 0x0a, 0x5b, 0x14, 0x22, 0x01,
	0x15, 0x07, 0x57, 0x29, 0x3b, 0x20, 0x0e, 0x48, 0x80, 0xa6, 0x09, 0x71, 0x99, 0x32, 0x0e, 0x13,
	0x12, 0xaa, 0x4c, 0xfb, 0x51, 0xac, 0xd1, 0xd8, 0xc4, 0x5e, 0x44, 0x2e, 0x1c, 0x78, 0x05, 0x2e,
	0x3c, 0x01, 0x8f, 0xc1, 0x99, 0x23, 0x12, 0x2f, 0x80, 0x0a, 0x0f, 0x82, 0x9c, 0x7a, 0xc3, 0x74,
	0x6d, 0x6f, 0xf1, 0xf7, 0xff, 0xfb, 0xf7, 0xb7, 0x3f, 0x7f, 0x81, 0xdb, 0x5c, 0x89, 0x7e, 0x99,
	0xf6, 0x35, 0x16, 0xa5, 0x18, 0xe1, 0x50, 0x8c, 0x31, 0x37, 0xc2, 0x54, 0x43, 0x57, 0x60, 0xaa,
	0x90, 0x46, 0xd2, 0xa0, 0x4c, 0x43, 0xea, 0xac, 0x38, 0x55, 0xa6, 0x9a, 0xd7, 0xc3, 0x9d, 0x89,
	0x94, 0x93, 0x77, 0xd8, 0xb7, 0x12, 0xcf, 0x73, 0x69, 0xb8, 0x11, 0x32, 0xd7, 0x4e, 0x8d, 0xb4,
	0x91, 0x05, 0x9f, 0xe0, 0x05, 0xfa, 0x5c, 0x4f, 0x8e, 0xa0, 0x73, 0x34, 0x57, 0x9e, 0x39, 0x21,
	0x43, 0xad, 0x64, 0xae, 0x91, 0x3e, 0x00, 0x70, 0x66, 0x81, 0xba, 0x4b, 0xe2, 0x8d, 0x5e, 0x73,
	0xd0, 0x65, 0x8e, 0xc7, 0x16, 0x77, 0x79, 0xde, 0xe4, 0x18, 0x76, 0x9e, 0x16, 0xc8, 0x0d, 0x5e,
	0x40, 0xbf, 0x3f, 0x45, 0x6d, 0x68, 0x0b, 0x02, 0x31, 0xee, 0x92, 0x98, 0xf4, 0x1a, 0x59, 0x20,
	0xc6, 0xb4, 0x07, 0x97, 0x4d, 0xa5, 0xb0, 0x1b, 0xc4, 0xa4, 0xd7, 0x1a, 0x6c, 0x2d, 0x66, 0xbc,
	0xa8, 0x14, 0x66, 0xb5, 0x23, 0xf9, 0x4a, 0x60, 0x77, 0x05, 0xda, 0x9d, 0x7a, 0x0f, 0xae, 0x9e,
	0x5d, 0xb1, 0x4e, 0x58, 0x77, 0xe6, 0x73, 0x27, 0xbd, 0x0b, 0xed, 0x11, 0x16, 0x46, 0xbc, 0x11,
	0x23, 0x6e, 0x70, 0xa8, 0x70, 0x5a, 0x1f, 0xe6, 0x5a, 0xd6, 0xf2, 0xca, 0x87, 0x38, 0xa5, 0x77,
	0xa0, 0xad, 0x0a, 0x51, 0x5a, 0xd3, 0x09, 0x56, 0xb5, 0x71, 0xa3, 0x36, 0x6e, 0xba, 0xf2, 0x73,
	0xac, 0x0e, 0x71, 0x9a, 0xec, 0x41, 0xe3, 0xf1, 0xa9, 0x79, 0x2b, 0x8b, 0x15, 0x74, 0xb2, 0x8c,
	0x9e, 0x3c, 0x82, 0xe6, 0xd9, 0x2e, 0x81, 0x9a, 0xf6, 0xa1, 0xc9, 0xff, 0x2d, 0xdd, 0x13, 0x6c,
	0xb2, 0x32, 0x65, 0xe7, 0xec, 0xcc, 0x77, 0x0c, 0xbe, 0x05, 0x70, 0x63, 0xe1, 0x92, 0x6e, 0x49,
	0x5f, 0xc1, 0xd6, 0x01, 0x9a, 0xff, 0x45, 0x9b, 0xd1, 0xb0, 0xb8, 0x7d, 0x3b, 0x4f, 0xe1, 0x4d,
	0xfb, 0xb9, 0xa2, 0xaf, 0xc9, 0xee, 0xa7, 0x9f, 0x7f, 0x3e, 0x07, 0x1d, 0xba, 0xed, 0x8d, 0xaa,
	0x87, 0xf9, 0x08, 0xdb, 0x4b, 0xdf, 0x85, 0xc6, 0x16, 0xba, 0x6e, 0x1a, 0xc2, 0x5b, 0x6b, 0x1c,
	0x2e, 0x3c, 0xae, 0xc3, 0xc3, 0x64, 0x79, 0xf8, 0x43, 0x72, 0x8f, 0xee, 0x43, 0xeb, 0x00, 0x8d,
	0xdf, 0x3c, 0xef, 0x62, 0x6d, 0xbf, 0x65, 0x76, 0x40, 0x3b, 0x35, 0xef, 0x3a, 0x6d, 0x5b, 0x9e,
	0xd7, 0xc0, 0x27, 0xec, 0xfb, 0x2c, 0x22, 0x3f, 0x66, 0x11, 0xf9, 0x35, 0x8b, 0xc8, 0x97, 0xdf,
	0xd1, 0x25, 0xe8, 0x0a, 0xc9, 0xb4, 0xe1, 0xa3, 0x93, 0x42, 0x7e, 0x98, 0xff, 0x33, 0x8c, 0x2b,
	0xc1, 0xca, 0xf4, 0x65, 0x50, 0xa6, 0xc7, 0xe4, 0xf5, 0x95, 0xba, 0x76, 0xff, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0xe8, 0x11, 0x6b, 0xc6, 0x03, 0x00, 0x00,
}

func (m *ServiceIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identities) > 0 {
		for iNdEx := len(m.Identities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Identities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceIdentityService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintServiceIdentityService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintServiceIdentityService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateKeyPem) > 0 {
		i -= len(m.PrivateKeyPem)
		copy(dAtA[i:], m.PrivateKeyPem)
		i = encodeVarintServiceIdentityService(dAtA, i, uint64(len(m.PrivateKeyPem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertificatePem) > 0 {
		i -= len(m.CertificatePem)
		copy(dAtA[i:], m.CertificatePem)
		i = encodeVarintServiceIdentityService(dAtA, i, uint64(len(m.CertificatePem)))
		i--
		dAtA[i] = 0x12
	}
	if m.Identity != nil {
		{
			size, err := m.Identity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceIdentityService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Authority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CertificatePem) > 0 {
		i -= len(m.CertificatePem)
		copy(dAtA[i:], m.CertificatePem)
		i = encodeVarintServiceIdentityService(dAtA, i, uint64(len(m.CertificatePem)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Authorities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authorities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authorities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authorities) > 0 {
		for iNdEx := len(m.Authorities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Authorities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceIdentityService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceIdentityService(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceIdentityService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identities) > 0 {
		for _, e := range m.Identities {
			l = e.Size()
			n += 1 + l + sovServiceIdentityService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateServiceIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovServiceIdentityService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovServiceIdentityService(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateServiceIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identity != nil {
		l = m.Identity.Size()
		n += 1 + l + sovServiceIdentityService(uint64(l))
	}
	l = len(m.CertificatePem)
	if l > 0 {
		n += 1 + l + sovServiceIdentityService(uint64(l))
	}
	l = len(m.PrivateKeyPem)
	if l > 0 {
		n += 1 + l + sovServiceIdentityService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificatePem)
	if l > 0 {
		n += 1 + l + sovServiceIdentityService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authorities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Authorities) > 0 {
		for _, e := range m.Authorities {
			l = e.Size()
			n += 1 + l + sovServiceIdentityService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServiceIdentityService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceIdentityService(x uint64) (n int) {
	return sovServiceIdentityService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identities = append(m.Identities, &storage.ServiceIdentity{})
			if err := m.Identities[len(m.Identities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceIdentityService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= storage.ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServiceIdentityService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identity == nil {
				m.Identity = &storage.ServiceIdentity{}
			}
			if err := m.Identity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificatePem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificatePem = append(m.CertificatePem[:0], dAtA[iNdEx:postIndex]...)
			if m.CertificatePem == nil {
				m.CertificatePem = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyPem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyPem = append(m.PrivateKeyPem[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKeyPem == nil {
				m.PrivateKeyPem = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceIdentityService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificatePem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificatePem = append(m.CertificatePem[:0], dAtA[iNdEx:postIndex]...)
			if m.CertificatePem == nil {
				m.CertificatePem = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceIdentityService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authorities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authorities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authorities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorities = append(m.Authorities, &Authority{})
			if err := m.Authorities[len(m.Authorities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceIdentityService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceIdentityService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceIdentityService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceIdentityService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceIdentityService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceIdentityService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceIdentityService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceIdentityService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceIdentityService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceIdentityService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceIdentityService = fmt.Errorf("proto: unexpected end of group")
)
