// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/policy_category_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicyCategory struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsDefault            bool     `protobuf:"varint,3,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyCategory) Reset()         { *m = PolicyCategory{} }
func (m *PolicyCategory) String() string { return proto.CompactTextString(m) }
func (*PolicyCategory) ProtoMessage()    {}
func (*PolicyCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{0}
}
func (m *PolicyCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCategory.Merge(m, src)
}
func (m *PolicyCategory) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCategory.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCategory proto.InternalMessageInfo

func (m *PolicyCategory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyCategory) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *PolicyCategory) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyCategory) Clone() *PolicyCategory {
	if m == nil {
		return nil
	}
	cloned := new(PolicyCategory)
	*cloned = *m

	return cloned
}

type PostPolicyCategoryRequest struct {
	PolicyCategory       *PolicyCategory `protobuf:"bytes,1,opt,name=policyCategory,proto3" json:"policyCategory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PostPolicyCategoryRequest) Reset()         { *m = PostPolicyCategoryRequest{} }
func (m *PostPolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*PostPolicyCategoryRequest) ProtoMessage()    {}
func (*PostPolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{1}
}
func (m *PostPolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPolicyCategoryRequest.Merge(m, src)
}
func (m *PostPolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPolicyCategoryRequest proto.InternalMessageInfo

func (m *PostPolicyCategoryRequest) GetPolicyCategory() *PolicyCategory {
	if m != nil {
		return m.PolicyCategory
	}
	return nil
}

func (m *PostPolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostPolicyCategoryRequest) Clone() *PostPolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostPolicyCategoryRequest)
	*cloned = *m

	cloned.PolicyCategory = m.PolicyCategory.Clone()
	return cloned
}

type GetPolicyCategoriesResponse struct {
	Categories           []*PolicyCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPolicyCategoriesResponse) Reset()         { *m = GetPolicyCategoriesResponse{} }
func (m *GetPolicyCategoriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyCategoriesResponse) ProtoMessage()    {}
func (*GetPolicyCategoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{2}
}
func (m *GetPolicyCategoriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyCategoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyCategoriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyCategoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyCategoriesResponse.Merge(m, src)
}
func (m *GetPolicyCategoriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyCategoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyCategoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyCategoriesResponse proto.InternalMessageInfo

func (m *GetPolicyCategoriesResponse) GetCategories() []*PolicyCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *GetPolicyCategoriesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicyCategoriesResponse) Clone() *GetPolicyCategoriesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicyCategoriesResponse)
	*cloned = *m

	if m.Categories != nil {
		cloned.Categories = make([]*PolicyCategory, len(m.Categories))
		for idx, v := range m.Categories {
			cloned.Categories[idx] = v.Clone()
		}
	}
	return cloned
}

type RenamePolicyCategoryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewCategoryName      string   `protobuf:"bytes,2,opt,name=new_category_name,json=newCategoryName,proto3" json:"new_category_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenamePolicyCategoryRequest) Reset()         { *m = RenamePolicyCategoryRequest{} }
func (m *RenamePolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*RenamePolicyCategoryRequest) ProtoMessage()    {}
func (*RenamePolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{3}
}
func (m *RenamePolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenamePolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenamePolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenamePolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenamePolicyCategoryRequest.Merge(m, src)
}
func (m *RenamePolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenamePolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenamePolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenamePolicyCategoryRequest proto.InternalMessageInfo

func (m *RenamePolicyCategoryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RenamePolicyCategoryRequest) GetNewCategoryName() string {
	if m != nil {
		return m.NewCategoryName
	}
	return ""
}

func (m *RenamePolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RenamePolicyCategoryRequest) Clone() *RenamePolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(RenamePolicyCategoryRequest)
	*cloned = *m

	return cloned
}

type DeletePolicyCategoryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePolicyCategoryRequest) Reset()         { *m = DeletePolicyCategoryRequest{} }
func (m *DeletePolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePolicyCategoryRequest) ProtoMessage()    {}
func (*DeletePolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{4}
}
func (m *DeletePolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePolicyCategoryRequest.Merge(m, src)
}
func (m *DeletePolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePolicyCategoryRequest proto.InternalMessageInfo

func (m *DeletePolicyCategoryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeletePolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeletePolicyCategoryRequest) Clone() *DeletePolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeletePolicyCategoryRequest)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*PolicyCategory)(nil), "v1.PolicyCategory")
	proto.RegisterType((*PostPolicyCategoryRequest)(nil), "v1.PostPolicyCategoryRequest")
	proto.RegisterType((*GetPolicyCategoriesResponse)(nil), "v1.GetPolicyCategoriesResponse")
	proto.RegisterType((*RenamePolicyCategoryRequest)(nil), "v1.RenamePolicyCategoryRequest")
	proto.RegisterType((*DeletePolicyCategoryRequest)(nil), "v1.DeletePolicyCategoryRequest")
}

func init() {
	proto.RegisterFile("api/v1/policy_category_service.proto", fileDescriptor_d74a5357d66d2c1c)
}

var fileDescriptor_d74a5357d66d2c1c = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0x39, 0xa9, 0x7e, 0x22, 0x53, 0x14, 0xe8, 0x34, 0xa0, 0xc4, 0x09, 0x49, 0xb0, 0x10,
	0xaa, 0x22, 0x70, 0x94, 0x70, 0x40, 0x2a, 0xb7, 0x12, 0x84, 0xb8, 0xa0, 0xd6, 0x1c, 0xf8, 0x23,
	0xa4, 0x6a, 0xeb, 0x0c, 0x61, 0x45, 0xe2, 0x35, 0xde, 0xb5, 0x83, 0x85, 0xb8, 0xf0, 0x0a, 0x5c,
	0x78, 0x01, 0xde, 0x85, 0x23, 0x12, 0x2f, 0x80, 0x02, 0x0f, 0x82, 0xfc, 0xa7, 0xa4, 0x36, 0x9b,
	0x8a, 0x9b, 0x3d, 0x33, 0xfb, 0x7d, 0xf3, 0xcd, 0x37, 0xbb, 0x70, 0x83, 0xf9, 0x7c, 0x18, 0x8d,
	0x86, 0xbe, 0x98, 0x73, 0x37, 0x3e, 0x76, 0x99, 0xa2, 0x99, 0x08, 0xe2, 0x63, 0x49, 0x41, 0xc4,
	0x5d, 0xb2, 0xfd, 0x40, 0x28, 0x81, 0x95, 0x68, 0x64, 0xee, 0xe6, 0x95, 0xae, 0x58, 0x2c, 0x84,
	0x97, 0x25, 0x4c, 0xcc, 0x83, 0xb4, 0xf0, 0x55, 0x9c, 0xc7, 0xda, 0x79, 0x4c, 0x12, 0x0b, 0xdc,
	0xd7, 0x45, 0x24, 0xb3, 0x33, 0x13, 0x62, 0x36, 0xa7, 0x61, 0x52, 0xc3, 0x3c, 0x4f, 0x28, 0xa6,
	0xb8, 0xf0, 0x64, 0x96, 0xb5, 0x1c, 0xa8, 0x1f, 0xa6, 0x8d, 0xdc, 0xcf, 0xfb, 0xc0, 0x3a, 0x54,
	0xf8, 0xb4, 0x69, 0xf4, 0x8d, 0xbd, 0x9a, 0x53, 0xe1, 0x53, 0x44, 0xd8, 0xf2, 0xd8, 0x82, 0x9a,
	0x95, 0x34, 0x92, 0x7e, 0x63, 0x07, 0x6a, 0x5c, 0x4e, 0xe8, 0x15, 0x0b, 0xe7, 0xaa, 0x59, 0xed,
	0x1b, 0x7b, 0x17, 0x9c, 0x75, 0xc0, 0x7a, 0x0a, 0xad, 0x43, 0x21, 0x55, 0x11, 0xd7, 0xa1, 0xb7,
	0x21, 0x49, 0x85, 0xfb, 0x50, 0xf7, 0x0b, 0x89, 0x94, 0x6a, 0x7b, 0x8c, 0x76, 0x34, 0xb2, 0x4b,
	0x47, 0x4a, 0x95, 0xd6, 0x11, 0xb4, 0x1f, 0x52, 0x11, 0x97, 0x93, 0x74, 0x48, 0xfa, 0xc2, 0x93,
	0x84, 0x63, 0x00, 0xf7, 0x4f, 0xb4, 0x69, 0xf4, 0xab, 0x1b, 0x60, 0xcf, 0x54, 0x59, 0xcf, 0xa1,
	0xed, 0x50, 0xa2, 0x49, 0xdf, 0x6d, 0x79, 0x18, 0x03, 0xd8, 0xf1, 0x68, 0xb9, 0x36, 0xed, 0xcc,
	0x64, 0x2e, 0x79, 0xb4, 0x3c, 0x3d, 0xfe, 0x98, 0x2d, 0xc8, 0xba, 0x0d, 0xed, 0x09, 0xcd, 0x49,
	0xfd, 0x1b, 0xf4, 0xf8, 0xcb, 0x16, 0x5c, 0x29, 0x56, 0x3e, 0xc9, 0x7c, 0xc4, 0x97, 0xb0, 0x53,
	0x96, 0x1d, 0xe3, 0xe5, 0x44, 0x98, 0x43, 0x52, 0x84, 0x81, 0x4b, 0x07, 0xf1, 0xa3, 0x89, 0xa9,
	0x91, 0x6a, 0x5d, 0xff, 0xf8, 0xfd, 0xd7, 0xa7, 0x4a, 0x1b, 0x5b, 0xeb, 0x8d, 0x5b, 0x8b, 0x1f,
	0xbe, 0xe7, 0xd3, 0x0f, 0x78, 0x02, 0xbb, 0x9a, 0xa1, 0xe2, 0xc5, 0x14, 0x9f, 0x2d, 0x8f, 0x42,
	0x0a, 0x62, 0xb3, 0x97, 0xfc, 0x9d, 0x33, 0x7b, 0xab, 0x93, 0x12, 0x5d, 0xc5, 0x86, 0x8e, 0x08,
	0x43, 0xc0, 0xbf, 0x37, 0x02, 0xaf, 0x65, 0x0d, 0x6f, 0xd8, 0x14, 0xad, 0x9e, 0x5b, 0x29, 0xcd,
	0x4d, 0x4b, 0x4b, 0xb3, 0x5f, 0xda, 0x17, 0x9c, 0x43, 0x43, 0x67, 0x2e, 0xf6, 0xb2, 0xd9, 0x6d,
	0xb4, 0x5d, 0x4b, 0xdd, 0x4b, 0xa9, 0x5b, 0xa6, 0x9e, 0xda, 0x18, 0x20, 0x41, 0x43, 0xe7, 0x77,
	0xc6, 0x76, 0xce, 0x26, 0x98, 0xb5, 0xa4, 0xe0, 0x41, 0x72, 0x9f, 0x4f, 0xfd, 0x1a, 0x6c, 0xf6,
	0xeb, 0xe0, 0xee, 0xd7, 0x55, 0xd7, 0xf8, 0xb6, 0xea, 0x1a, 0x3f, 0x56, 0x5d, 0xe3, 0xf3, 0xcf,
	0xee, 0x7f, 0xd0, 0xe4, 0xc2, 0x96, 0x8a, 0xb9, 0x6f, 0x02, 0xf1, 0x2e, 0xbb, 0xd6, 0x36, 0xf3,
	0xb9, 0x1d, 0x8d, 0x5e, 0x6c, 0xdb, 0xc3, 0xec, 0x69, 0xb8, 0x17, 0x8d, 0x9e, 0x55, 0x4f, 0xfe,
	0x4f, 0x93, 0x77, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x57, 0x8e, 0x09, 0xa9, 0x83, 0x04, 0x00,
	0x00,
}

func (m *PolicyCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostPolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyCategory != nil {
		{
			size, err := m.PolicyCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCategoryService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyCategoriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyCategoriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyCategoriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Categories) > 0 {
		for iNdEx := len(m.Categories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Categories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyCategoryService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RenamePolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenamePolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenamePolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewCategoryName) > 0 {
		i -= len(m.NewCategoryName)
		copy(dAtA[i:], m.NewCategoryName)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.NewCategoryName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicyCategoryService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyCategoryService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.IsDefault {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyCategory != nil {
		l = m.PolicyCategory.Size()
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicyCategoriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovPolicyCategoryService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenamePolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	l = len(m.NewCategoryName)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPolicyCategoryService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyCategoryService(x uint64) (n int) {
	return sovPolicyCategoryService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyCategory == nil {
				m.PolicyCategory = &PolicyCategory{}
			}
			if err := m.PolicyCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyCategoriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &PolicyCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenamePolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenamePolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenamePolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyCategoryService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyCategoryService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyCategoryService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyCategoryService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyCategoryService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyCategoryService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyCategoryService = fmt.Errorf("proto: unexpected end of group")
)
