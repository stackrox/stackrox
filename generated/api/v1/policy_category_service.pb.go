// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/policy_category_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PolicyCategory struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsDefault            bool     `protobuf:"varint,3,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyCategory) Reset()         { *m = PolicyCategory{} }
func (m *PolicyCategory) String() string { return proto.CompactTextString(m) }
func (*PolicyCategory) ProtoMessage()    {}
func (*PolicyCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{0}
}
func (m *PolicyCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCategory.Merge(m, src)
}
func (m *PolicyCategory) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCategory.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCategory proto.InternalMessageInfo

func (m *PolicyCategory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyCategory) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *PolicyCategory) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PolicyCategory) Clone() *PolicyCategory {
	if m == nil {
		return nil
	}
	cloned := new(PolicyCategory)
	*cloned = *m

	return cloned
}

type PostPolicyCategoryRequest struct {
	PolicyCategory       *PolicyCategory `protobuf:"bytes,1,opt,name=policyCategory,proto3" json:"policyCategory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PostPolicyCategoryRequest) Reset()         { *m = PostPolicyCategoryRequest{} }
func (m *PostPolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*PostPolicyCategoryRequest) ProtoMessage()    {}
func (*PostPolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{1}
}
func (m *PostPolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPolicyCategoryRequest.Merge(m, src)
}
func (m *PostPolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPolicyCategoryRequest proto.InternalMessageInfo

func (m *PostPolicyCategoryRequest) GetPolicyCategory() *PolicyCategory {
	if m != nil {
		return m.PolicyCategory
	}
	return nil
}

func (m *PostPolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostPolicyCategoryRequest) Clone() *PostPolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostPolicyCategoryRequest)
	*cloned = *m

	cloned.PolicyCategory = m.PolicyCategory.Clone()
	return cloned
}

type GetPolicyCategoriesResponse struct {
	Categories           []*PolicyCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPolicyCategoriesResponse) Reset()         { *m = GetPolicyCategoriesResponse{} }
func (m *GetPolicyCategoriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyCategoriesResponse) ProtoMessage()    {}
func (*GetPolicyCategoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{2}
}
func (m *GetPolicyCategoriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyCategoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyCategoriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyCategoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyCategoriesResponse.Merge(m, src)
}
func (m *GetPolicyCategoriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyCategoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyCategoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyCategoriesResponse proto.InternalMessageInfo

func (m *GetPolicyCategoriesResponse) GetCategories() []*PolicyCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *GetPolicyCategoriesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetPolicyCategoriesResponse) Clone() *GetPolicyCategoriesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetPolicyCategoriesResponse)
	*cloned = *m

	if m.Categories != nil {
		cloned.Categories = make([]*PolicyCategory, len(m.Categories))
		for idx, v := range m.Categories {
			cloned.Categories[idx] = v.Clone()
		}
	}
	return cloned
}

// Note: Needed to rename these messages, since we cannot deprecate the existing category messages in policy_service.proto until 72
// In 72, once older messages are deprecated, these messages will be renamed.
type NewRenamePolicyCategoryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewCategoryName      string   `protobuf:"bytes,2,opt,name=new_category_name,json=newCategoryName,proto3" json:"new_category_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewRenamePolicyCategoryRequest) Reset()         { *m = NewRenamePolicyCategoryRequest{} }
func (m *NewRenamePolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*NewRenamePolicyCategoryRequest) ProtoMessage()    {}
func (*NewRenamePolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{3}
}
func (m *NewRenamePolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRenamePolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRenamePolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRenamePolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRenamePolicyCategoryRequest.Merge(m, src)
}
func (m *NewRenamePolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewRenamePolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRenamePolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewRenamePolicyCategoryRequest proto.InternalMessageInfo

func (m *NewRenamePolicyCategoryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewRenamePolicyCategoryRequest) GetNewCategoryName() string {
	if m != nil {
		return m.NewCategoryName
	}
	return ""
}

func (m *NewRenamePolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NewRenamePolicyCategoryRequest) Clone() *NewRenamePolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(NewRenamePolicyCategoryRequest)
	*cloned = *m

	return cloned
}

type NewDeletePolicyCategoryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDeletePolicyCategoryRequest) Reset()         { *m = NewDeletePolicyCategoryRequest{} }
func (m *NewDeletePolicyCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*NewDeletePolicyCategoryRequest) ProtoMessage()    {}
func (*NewDeletePolicyCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74a5357d66d2c1c, []int{4}
}
func (m *NewDeletePolicyCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewDeletePolicyCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewDeletePolicyCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewDeletePolicyCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDeletePolicyCategoryRequest.Merge(m, src)
}
func (m *NewDeletePolicyCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewDeletePolicyCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDeletePolicyCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewDeletePolicyCategoryRequest proto.InternalMessageInfo

func (m *NewDeletePolicyCategoryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewDeletePolicyCategoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NewDeletePolicyCategoryRequest) Clone() *NewDeletePolicyCategoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(NewDeletePolicyCategoryRequest)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*PolicyCategory)(nil), "v1.PolicyCategory")
	proto.RegisterType((*PostPolicyCategoryRequest)(nil), "v1.PostPolicyCategoryRequest")
	proto.RegisterType((*GetPolicyCategoriesResponse)(nil), "v1.GetPolicyCategoriesResponse")
	proto.RegisterType((*NewRenamePolicyCategoryRequest)(nil), "v1.NewRenamePolicyCategoryRequest")
	proto.RegisterType((*NewDeletePolicyCategoryRequest)(nil), "v1.NewDeletePolicyCategoryRequest")
}

func init() {
	proto.RegisterFile("api/v1/policy_category_service.proto", fileDescriptor_d74a5357d66d2c1c)
}

var fileDescriptor_d74a5357d66d2c1c = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xdd, 0x0a, 0x91, 0x05, 0x05, 0x3a, 0x0d, 0x28, 0x71, 0x42, 0x1a, 0x2c, 0x84, 0xaa,
	0x08, 0x39, 0x38, 0xdc, 0x7a, 0x2c, 0x41, 0x88, 0x4b, 0xd5, 0x9a, 0x03, 0x08, 0x55, 0xaa, 0xb6,
	0xce, 0x90, 0xae, 0x88, 0xbd, 0xc6, 0xbb, 0x76, 0xb0, 0x10, 0x17, 0x7e, 0x81, 0x0b, 0xff, 0xc0,
	0x8f, 0x70, 0x44, 0xe2, 0x07, 0x50, 0xe0, 0x43, 0x90, 0x37, 0x6e, 0x53, 0x9b, 0x4d, 0xc4, 0x2d,
	0x79, 0x9e, 0x79, 0x6f, 0x66, 0xde, 0x5b, 0xf2, 0x80, 0x46, 0x6c, 0x90, 0xba, 0x83, 0x88, 0x4f,
	0x99, 0x9f, 0x9d, 0xfa, 0x54, 0xe2, 0x84, 0xc7, 0xd9, 0xa9, 0xc0, 0x38, 0x65, 0x3e, 0x3a, 0x51,
	0xcc, 0x25, 0x07, 0x33, 0x75, 0xad, 0xce, 0x84, 0xf3, 0xc9, 0x14, 0x07, 0x79, 0x03, 0x0d, 0x43,
	0x2e, 0xa9, 0x64, 0x3c, 0x14, 0x8b, 0x0a, 0x6b, 0xa7, 0xe0, 0xf1, 0x79, 0x10, 0xf0, 0xb0, 0x00,
	0xa1, 0x00, 0x31, 0x88, 0x64, 0x56, 0x60, 0xed, 0x02, 0x13, 0x48, 0x63, 0xff, 0xbc, 0xac, 0x63,
	0x7b, 0xa4, 0x7e, 0xa4, 0x06, 0x79, 0x5a, 0xcc, 0x01, 0x75, 0x62, 0xb2, 0x71, 0xd3, 0xe8, 0x19,
	0x7b, 0x35, 0xcf, 0x64, 0x63, 0x00, 0xb2, 0x15, 0xd2, 0x00, 0x9b, 0xa6, 0x42, 0xd4, 0x6f, 0xe8,
	0x90, 0x1a, 0x13, 0x23, 0x7c, 0x4b, 0x93, 0xa9, 0x6c, 0x6e, 0xf6, 0x8c, 0xbd, 0xeb, 0xde, 0x12,
	0xb0, 0x5f, 0x91, 0xd6, 0x11, 0x17, 0xb2, 0xcc, 0xeb, 0xe1, 0xfb, 0x04, 0x85, 0x84, 0x7d, 0x52,
	0x8f, 0x4a, 0x1f, 0x94, 0xd4, 0x8d, 0x21, 0x38, 0xa9, 0xeb, 0x54, 0x5a, 0x2a, 0x95, 0xf6, 0x31,
	0x69, 0x3f, 0xc7, 0x32, 0x2f, 0x43, 0xe1, 0xa1, 0x88, 0x78, 0x28, 0x10, 0x86, 0x84, 0xf8, 0x97,
	0x68, 0xd3, 0xe8, 0x6d, 0xae, 0xa0, 0xbd, 0x52, 0x65, 0x9f, 0x90, 0xee, 0x21, 0xce, 0x3c, 0xcc,
	0xd7, 0xd2, 0x0f, 0x5c, 0xbd, 0x47, 0x9f, 0x6c, 0x87, 0x38, 0x5b, 0xfa, 0x76, 0xe5, 0x38, 0xb7,
	0x42, 0x9c, 0x5d, 0xb4, 0x1f, 0xd2, 0x00, 0xed, 0xc7, 0x8a, 0x7d, 0x84, 0x53, 0x94, 0xff, 0xc7,
	0x3e, 0xfc, 0xb6, 0x45, 0xee, 0x94, 0x2b, 0x5f, 0x2e, 0xfc, 0x82, 0x13, 0xb2, 0x5d, 0x5d, 0x3e,
	0x83, 0xdb, 0xf9, 0x7a, 0x1e, 0x0a, 0x9e, 0xc4, 0x3e, 0x1e, 0x64, 0x2f, 0x46, 0x96, 0x66, 0x61,
	0xfb, 0xfe, 0xe7, 0x9f, 0x7f, 0xbe, 0x98, 0x6d, 0x68, 0x2d, 0x73, 0xb7, 0x3c, 0xc1, 0xe0, 0x23,
	0x1b, 0x7f, 0x82, 0x33, 0xb2, 0xa3, 0x39, 0x2d, 0xdc, 0x54, 0xfc, 0x74, 0x76, 0x9c, 0x60, 0x9c,
	0x59, 0xbb, 0xf9, 0xbf, 0x35, 0x0e, 0xd8, 0x1d, 0x25, 0x74, 0x17, 0x1a, 0x3a, 0x21, 0x48, 0x08,
	0xfc, 0x9b, 0x0b, 0xb8, 0xb7, 0x18, 0x78, 0x45, 0x5e, 0xb4, 0xfb, 0x3c, 0x52, 0x32, 0x0f, 0x6d,
	0xad, 0xcc, 0x7e, 0x25, 0x35, 0xc0, 0x49, 0x43, 0xe7, 0x2f, 0xd8, 0x39, 0xf3, 0x7a, 0xf3, 0xb5,
	0xea, 0xbb, 0x4a, 0xbd, 0x65, 0xe9, 0xd5, 0x8d, 0x3e, 0x9c, 0x93, 0x86, 0xce, 0xf2, 0x4b, 0xc1,
	0x35, 0x79, 0xb0, 0x6a, 0x79, 0xcd, 0xb3, 0xfc, 0xf5, 0x5e, 0xb8, 0xd6, 0x5f, 0xed, 0xda, 0x81,
	0xf3, 0x7d, 0xde, 0x35, 0x7e, 0xcc, 0xbb, 0xc6, 0xaf, 0x79, 0xd7, 0xf8, 0xfa, 0xbb, 0xbb, 0x41,
	0x9a, 0x8c, 0x3b, 0x42, 0x52, 0xff, 0x5d, 0xcc, 0x3f, 0x2c, 0x9e, 0xb8, 0x43, 0x23, 0xe6, 0xa4,
	0xee, 0x1b, 0x33, 0x75, 0x5f, 0x6f, 0x9c, 0x5d, 0x53, 0xd8, 0x93, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0xfc, 0xa1, 0x9b, 0x86, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicyCategoryServiceClient is the client API for PolicyCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type PolicyCategoryServiceClient interface {
	// GetPolicyCategory returns the requested policy category by ID.
	GetPolicyCategory(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*PolicyCategory, error)
	// GetPolicyCategories returns the list of policy categories
	GetPolicyCategories(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetPolicyCategoriesResponse, error)
	// PostPolicyCategory creates a new policy category
	PostPolicyCategory(ctx context.Context, in *PostPolicyCategoryRequest, opts ...grpc.CallOption) (*PolicyCategory, error)
	// RenamePolicyCategory renames the given policy category.
	RenamePolicyCategory(ctx context.Context, in *NewRenamePolicyCategoryRequest, opts ...grpc.CallOption) (*PolicyCategory, error)
	// DeletePolicyCategory removes the given policy category.
	DeletePolicyCategory(ctx context.Context, in *NewDeletePolicyCategoryRequest, opts ...grpc.CallOption) (*Empty, error)
}

type policyCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyCategoryServiceClient(cc grpc.ClientConnInterface) PolicyCategoryServiceClient {
	return &policyCategoryServiceClient{cc}
}

func (c *policyCategoryServiceClient) GetPolicyCategory(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*PolicyCategory, error) {
	out := new(PolicyCategory)
	err := c.cc.Invoke(ctx, "/v1.PolicyCategoryService/GetPolicyCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCategoryServiceClient) GetPolicyCategories(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*GetPolicyCategoriesResponse, error) {
	out := new(GetPolicyCategoriesResponse)
	err := c.cc.Invoke(ctx, "/v1.PolicyCategoryService/GetPolicyCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCategoryServiceClient) PostPolicyCategory(ctx context.Context, in *PostPolicyCategoryRequest, opts ...grpc.CallOption) (*PolicyCategory, error) {
	out := new(PolicyCategory)
	err := c.cc.Invoke(ctx, "/v1.PolicyCategoryService/PostPolicyCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCategoryServiceClient) RenamePolicyCategory(ctx context.Context, in *NewRenamePolicyCategoryRequest, opts ...grpc.CallOption) (*PolicyCategory, error) {
	out := new(PolicyCategory)
	err := c.cc.Invoke(ctx, "/v1.PolicyCategoryService/RenamePolicyCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyCategoryServiceClient) DeletePolicyCategory(ctx context.Context, in *NewDeletePolicyCategoryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.PolicyCategoryService/DeletePolicyCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyCategoryServiceServer is the server API for PolicyCategoryService service.
type PolicyCategoryServiceServer interface {
	// GetPolicyCategory returns the requested policy category by ID.
	GetPolicyCategory(context.Context, *ResourceByID) (*PolicyCategory, error)
	// GetPolicyCategories returns the list of policy categories
	GetPolicyCategories(context.Context, *RawQuery) (*GetPolicyCategoriesResponse, error)
	// PostPolicyCategory creates a new policy category
	PostPolicyCategory(context.Context, *PostPolicyCategoryRequest) (*PolicyCategory, error)
	// RenamePolicyCategory renames the given policy category.
	RenamePolicyCategory(context.Context, *NewRenamePolicyCategoryRequest) (*PolicyCategory, error)
	// DeletePolicyCategory removes the given policy category.
	DeletePolicyCategory(context.Context, *NewDeletePolicyCategoryRequest) (*Empty, error)
}

// UnimplementedPolicyCategoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyCategoryServiceServer struct {
}

func (*UnimplementedPolicyCategoryServiceServer) GetPolicyCategory(ctx context.Context, req *ResourceByID) (*PolicyCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCategory not implemented")
}
func (*UnimplementedPolicyCategoryServiceServer) GetPolicyCategories(ctx context.Context, req *RawQuery) (*GetPolicyCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCategories not implemented")
}
func (*UnimplementedPolicyCategoryServiceServer) PostPolicyCategory(ctx context.Context, req *PostPolicyCategoryRequest) (*PolicyCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPolicyCategory not implemented")
}
func (*UnimplementedPolicyCategoryServiceServer) RenamePolicyCategory(ctx context.Context, req *NewRenamePolicyCategoryRequest) (*PolicyCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenamePolicyCategory not implemented")
}
func (*UnimplementedPolicyCategoryServiceServer) DeletePolicyCategory(ctx context.Context, req *NewDeletePolicyCategoryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicyCategory not implemented")
}

func RegisterPolicyCategoryServiceServer(s *grpc.Server, srv PolicyCategoryServiceServer) {
	s.RegisterService(&_PolicyCategoryService_serviceDesc, srv)
}

func _PolicyCategoryService_GetPolicyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCategoryServiceServer).GetPolicyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicyCategoryService/GetPolicyCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCategoryServiceServer).GetPolicyCategory(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCategoryService_GetPolicyCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCategoryServiceServer).GetPolicyCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicyCategoryService/GetPolicyCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCategoryServiceServer).GetPolicyCategories(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCategoryService_PostPolicyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPolicyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCategoryServiceServer).PostPolicyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicyCategoryService/PostPolicyCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCategoryServiceServer).PostPolicyCategory(ctx, req.(*PostPolicyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCategoryService_RenamePolicyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRenamePolicyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCategoryServiceServer).RenamePolicyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicyCategoryService/RenamePolicyCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCategoryServiceServer).RenamePolicyCategory(ctx, req.(*NewRenamePolicyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyCategoryService_DeletePolicyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDeletePolicyCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyCategoryServiceServer).DeletePolicyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PolicyCategoryService/DeletePolicyCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyCategoryServiceServer).DeletePolicyCategory(ctx, req.(*NewDeletePolicyCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyCategoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PolicyCategoryService",
	HandlerType: (*PolicyCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicyCategory",
			Handler:    _PolicyCategoryService_GetPolicyCategory_Handler,
		},
		{
			MethodName: "GetPolicyCategories",
			Handler:    _PolicyCategoryService_GetPolicyCategories_Handler,
		},
		{
			MethodName: "PostPolicyCategory",
			Handler:    _PolicyCategoryService_PostPolicyCategory_Handler,
		},
		{
			MethodName: "RenamePolicyCategory",
			Handler:    _PolicyCategoryService_RenamePolicyCategory_Handler,
		},
		{
			MethodName: "DeletePolicyCategory",
			Handler:    _PolicyCategoryService_DeletePolicyCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/policy_category_service.proto",
}

func (m *PolicyCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostPolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyCategory != nil {
		{
			size, err := m.PolicyCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCategoryService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyCategoriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyCategoriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyCategoriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Categories) > 0 {
		for iNdEx := len(m.Categories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Categories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPolicyCategoryService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewRenamePolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRenamePolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewRenamePolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewCategoryName) > 0 {
		i -= len(m.NewCategoryName)
		copy(dAtA[i:], m.NewCategoryName)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.NewCategoryName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewDeletePolicyCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDeletePolicyCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewDeletePolicyCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicyCategoryService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicyCategoryService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyCategoryService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.IsDefault {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyCategory != nil {
		l = m.PolicyCategory.Size()
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPolicyCategoriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovPolicyCategoryService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewRenamePolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	l = len(m.NewCategoryName)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewDeletePolicyCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicyCategoryService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPolicyCategoryService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyCategoryService(x uint64) (n int) {
	return sovPolicyCategoryService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyCategory == nil {
				m.PolicyCategory = &PolicyCategory{}
			}
			if err := m.PolicyCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyCategoriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &PolicyCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRenamePolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRenamePolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRenamePolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDeletePolicyCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDeletePolicyCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDeletePolicyCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCategoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCategoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyCategoryService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyCategoryService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCategoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyCategoryService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyCategoryService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyCategoryService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyCategoryService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyCategoryService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyCategoryService = fmt.Errorf("proto: unexpected end of group")
)
