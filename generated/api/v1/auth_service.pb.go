// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/auth_service.proto

package v1

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of the auth machine to machine config.
// Currently supports GitHub actions or any other generic OIDC provider to use for verifying and
// exchanging the token.
type AuthMachineToMachineConfig_Type int32

const (
	AuthMachineToMachineConfig_GENERIC        AuthMachineToMachineConfig_Type = 0
	AuthMachineToMachineConfig_GITHUB_ACTIONS AuthMachineToMachineConfig_Type = 1
)

var AuthMachineToMachineConfig_Type_name = map[int32]string{
	0: "GENERIC",
	1: "GITHUB_ACTIONS",
}

var AuthMachineToMachineConfig_Type_value = map[string]int32{
	"GENERIC":        0,
	"GITHUB_ACTIONS": 1,
}

func (x AuthMachineToMachineConfig_Type) String() string {
	return proto.EnumName(AuthMachineToMachineConfig_Type_name, int32(x))
}

func (AuthMachineToMachineConfig_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{2, 0}
}

type UserAttribute struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAttribute) Reset()         { *m = UserAttribute{} }
func (m *UserAttribute) String() string { return proto.CompactTextString(m) }
func (*UserAttribute) ProtoMessage()    {}
func (*UserAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{0}
}
func (m *UserAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAttribute.Merge(m, src)
}
func (m *UserAttribute) XXX_Size() int {
	return m.Size()
}
func (m *UserAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_UserAttribute proto.InternalMessageInfo

func (m *UserAttribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserAttribute) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *UserAttribute) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UserAttribute) Clone() *UserAttribute {
	if m == nil {
		return nil
	}
	cloned := new(UserAttribute)
	*cloned = *m

	if m.Values != nil {
		cloned.Values = make([]string, len(m.Values))
		copy(cloned.Values, m.Values)
	}
	return cloned
}

type AuthStatus struct {
	// Types that are valid to be assigned to Id:
	//	*AuthStatus_UserId
	//	*AuthStatus_ServiceId
	Id             isAuthStatus_Id       `protobuf_oneof:"id"`
	Expires        *types.Timestamp      `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	RefreshUrl     string                `protobuf:"bytes,4,opt,name=refresh_url,json=refreshUrl,proto3" json:"refresh_url,omitempty"`
	AuthProvider   *storage.AuthProvider `protobuf:"bytes,5,opt,name=auth_provider,json=authProvider,proto3" json:"auth_provider,omitempty"`
	UserInfo       *storage.UserInfo     `protobuf:"bytes,6,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	UserAttributes []*UserAttribute      `protobuf:"bytes,7,rep,name=user_attributes,json=userAttributes,proto3" json:"user_attributes,omitempty"`
	// Token returned to ACS by the underlying identity provider. This field is set only in a few,
	// specific contexts. Do not rely on this field being present in the response.
	IdpToken             string   `protobuf:"bytes,8,opt,name=idp_token,json=idpToken,proto3" json:"idp_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthStatus) Reset()         { *m = AuthStatus{} }
func (m *AuthStatus) String() string { return proto.CompactTextString(m) }
func (*AuthStatus) ProtoMessage()    {}
func (*AuthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{1}
}
func (m *AuthStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthStatus.Merge(m, src)
}
func (m *AuthStatus) XXX_Size() int {
	return m.Size()
}
func (m *AuthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuthStatus proto.InternalMessageInfo

type isAuthStatus_Id interface {
	isAuthStatus_Id()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isAuthStatus_Id
}

type AuthStatus_UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}
type AuthStatus_ServiceId struct {
	ServiceId *storage.ServiceIdentity `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3,oneof" json:"service_id,omitempty"`
}

func (*AuthStatus_UserId) isAuthStatus_Id() {}
func (m *AuthStatus_UserId) Clone() isAuthStatus_Id {
	if m == nil {
		return nil
	}
	cloned := new(AuthStatus_UserId)
	*cloned = *m

	return cloned
}
func (*AuthStatus_ServiceId) isAuthStatus_Id() {}
func (m *AuthStatus_ServiceId) Clone() isAuthStatus_Id {
	if m == nil {
		return nil
	}
	cloned := new(AuthStatus_ServiceId)
	*cloned = *m

	cloned.ServiceId = m.ServiceId.Clone()
	return cloned
}

func (m *AuthStatus) GetId() isAuthStatus_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AuthStatus) GetUserId() string {
	if x, ok := m.GetId().(*AuthStatus_UserId); ok {
		return x.UserId
	}
	return ""
}

func (m *AuthStatus) GetServiceId() *storage.ServiceIdentity {
	if x, ok := m.GetId().(*AuthStatus_ServiceId); ok {
		return x.ServiceId
	}
	return nil
}

func (m *AuthStatus) GetExpires() *types.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *AuthStatus) GetRefreshUrl() string {
	if m != nil {
		return m.RefreshUrl
	}
	return ""
}

func (m *AuthStatus) GetAuthProvider() *storage.AuthProvider {
	if m != nil {
		return m.AuthProvider
	}
	return nil
}

func (m *AuthStatus) GetUserInfo() *storage.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *AuthStatus) GetUserAttributes() []*UserAttribute {
	if m != nil {
		return m.UserAttributes
	}
	return nil
}

func (m *AuthStatus) GetIdpToken() string {
	if m != nil {
		return m.IdpToken
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthStatus_UserId)(nil),
		(*AuthStatus_ServiceId)(nil),
	}
}

func (m *AuthStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuthStatus) Clone() *AuthStatus {
	if m == nil {
		return nil
	}
	cloned := new(AuthStatus)
	*cloned = *m

	if m.Id != nil {
		cloned.Id = m.Id.Clone()
	}
	cloned.Expires = m.Expires.Clone()
	cloned.AuthProvider = m.AuthProvider.Clone()
	cloned.UserInfo = m.UserInfo.Clone()
	if m.UserAttributes != nil {
		cloned.UserAttributes = make([]*UserAttribute, len(m.UserAttributes))
		for idx, v := range m.UserAttributes {
			cloned.UserAttributes[idx] = v.Clone()
		}
	}
	return cloned
}

// AuthMachineToMachineConfig determines rules for exchanging an identity token from a third party with
// a Central access token. The M2M stands for machine to machine, as this is the intended use-case
// for the config.
type AuthMachineToMachineConfig struct {
	// UUID of the config.
	// Note that when adding a machine to machine config, this field should not be set.
	Id   string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type AuthMachineToMachineConfig_Type `protobuf:"varint,2,opt,name=type,proto3,enum=v1.AuthMachineToMachineConfig_Type" json:"type,omitempty"`
	// Sets the expiration of the token returned from the ExchangeAuthMachineToMachineToken API call.
	// Possible valid time units are: s, m, h.
	// The maximum allowed expiration duration is 24h.
	// As an example: 2h45m.
	// For additional information on the validation of the duration, see:
	// https://pkg.go.dev/time#ParseDuration.
	TokenExpirationDuration string `protobuf:"bytes,3,opt,name=token_expiration_duration,json=tokenExpirationDuration,proto3" json:"token_expiration_duration,omitempty"`
	// At least one mapping is required to resolve to a valid role for the access token to be successfully generated.
	Mappings []*AuthMachineToMachineConfig_Mapping `protobuf:"bytes,4,rep,name=mappings,proto3" json:"mappings,omitempty"`
	// The issuer of the related OIDC provider issuing the ID tokens to exchange.
	//
	// Must be non-empty string containing URL when type is GENERIC.
	// In case of GitHub actions, this must be empty or set to https://token.actions.githubusercontent.com.
	//
	// Issuer is a unique key, therefore there may be at most one GITHUB_ACTIONS config, and each
	// GENERIC config must have a distinct issuer.
	Issuer               string   `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthMachineToMachineConfig) Reset()         { *m = AuthMachineToMachineConfig{} }
func (m *AuthMachineToMachineConfig) String() string { return proto.CompactTextString(m) }
func (*AuthMachineToMachineConfig) ProtoMessage()    {}
func (*AuthMachineToMachineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{2}
}
func (m *AuthMachineToMachineConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMachineToMachineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMachineToMachineConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMachineToMachineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMachineToMachineConfig.Merge(m, src)
}
func (m *AuthMachineToMachineConfig) XXX_Size() int {
	return m.Size()
}
func (m *AuthMachineToMachineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMachineToMachineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMachineToMachineConfig proto.InternalMessageInfo

func (m *AuthMachineToMachineConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthMachineToMachineConfig) GetType() AuthMachineToMachineConfig_Type {
	if m != nil {
		return m.Type
	}
	return AuthMachineToMachineConfig_GENERIC
}

func (m *AuthMachineToMachineConfig) GetTokenExpirationDuration() string {
	if m != nil {
		return m.TokenExpirationDuration
	}
	return ""
}

func (m *AuthMachineToMachineConfig) GetMappings() []*AuthMachineToMachineConfig_Mapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

func (m *AuthMachineToMachineConfig) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *AuthMachineToMachineConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuthMachineToMachineConfig) Clone() *AuthMachineToMachineConfig {
	if m == nil {
		return nil
	}
	cloned := new(AuthMachineToMachineConfig)
	*cloned = *m

	if m.Mappings != nil {
		cloned.Mappings = make([]*AuthMachineToMachineConfig_Mapping, len(m.Mappings))
		for idx, v := range m.Mappings {
			cloned.Mappings[idx] = v.Clone()
		}
	}
	return cloned
}

// Mappings map an identity token's claim values to a specific role within Central.
type AuthMachineToMachineConfig_Mapping struct {
	// A key within the identity token's claim value to use.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// A regular expression that will be evaluated against values of the identity token claim
	// identified by the specified key.
	// This regular expressions is in RE2 format, see more here:
	// https://github.com/google/re2/wiki/Syntax.
	ValueExpression string `protobuf:"bytes,2,opt,name=value_expression,json=valueExpression,proto3" json:"value_expression,omitempty"`
	// The role which should be issued when the key and value match for a particular identity token.
	Role                 string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthMachineToMachineConfig_Mapping) Reset()         { *m = AuthMachineToMachineConfig_Mapping{} }
func (m *AuthMachineToMachineConfig_Mapping) String() string { return proto.CompactTextString(m) }
func (*AuthMachineToMachineConfig_Mapping) ProtoMessage()    {}
func (*AuthMachineToMachineConfig_Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{2, 0}
}
func (m *AuthMachineToMachineConfig_Mapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMachineToMachineConfig_Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthMachineToMachineConfig_Mapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthMachineToMachineConfig_Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMachineToMachineConfig_Mapping.Merge(m, src)
}
func (m *AuthMachineToMachineConfig_Mapping) XXX_Size() int {
	return m.Size()
}
func (m *AuthMachineToMachineConfig_Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMachineToMachineConfig_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMachineToMachineConfig_Mapping proto.InternalMessageInfo

func (m *AuthMachineToMachineConfig_Mapping) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AuthMachineToMachineConfig_Mapping) GetValueExpression() string {
	if m != nil {
		return m.ValueExpression
	}
	return ""
}

func (m *AuthMachineToMachineConfig_Mapping) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *AuthMachineToMachineConfig_Mapping) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AuthMachineToMachineConfig_Mapping) Clone() *AuthMachineToMachineConfig_Mapping {
	if m == nil {
		return nil
	}
	cloned := new(AuthMachineToMachineConfig_Mapping)
	*cloned = *m

	return cloned
}

type ListAuthMachineToMachineConfigResponse struct {
	Configs              []*AuthMachineToMachineConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ListAuthMachineToMachineConfigResponse) Reset() {
	*m = ListAuthMachineToMachineConfigResponse{}
}
func (m *ListAuthMachineToMachineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ListAuthMachineToMachineConfigResponse) ProtoMessage()    {}
func (*ListAuthMachineToMachineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{3}
}
func (m *ListAuthMachineToMachineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAuthMachineToMachineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAuthMachineToMachineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAuthMachineToMachineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAuthMachineToMachineConfigResponse.Merge(m, src)
}
func (m *ListAuthMachineToMachineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAuthMachineToMachineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAuthMachineToMachineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAuthMachineToMachineConfigResponse proto.InternalMessageInfo

func (m *ListAuthMachineToMachineConfigResponse) GetConfigs() []*AuthMachineToMachineConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *ListAuthMachineToMachineConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListAuthMachineToMachineConfigResponse) Clone() *ListAuthMachineToMachineConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListAuthMachineToMachineConfigResponse)
	*cloned = *m

	if m.Configs != nil {
		cloned.Configs = make([]*AuthMachineToMachineConfig, len(m.Configs))
		for idx, v := range m.Configs {
			cloned.Configs[idx] = v.Clone()
		}
	}
	return cloned
}

type GetAuthMachineToMachineConfigResponse struct {
	Config               *AuthMachineToMachineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetAuthMachineToMachineConfigResponse) Reset()         { *m = GetAuthMachineToMachineConfigResponse{} }
func (m *GetAuthMachineToMachineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetAuthMachineToMachineConfigResponse) ProtoMessage()    {}
func (*GetAuthMachineToMachineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{4}
}
func (m *GetAuthMachineToMachineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuthMachineToMachineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuthMachineToMachineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuthMachineToMachineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthMachineToMachineConfigResponse.Merge(m, src)
}
func (m *GetAuthMachineToMachineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuthMachineToMachineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthMachineToMachineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthMachineToMachineConfigResponse proto.InternalMessageInfo

func (m *GetAuthMachineToMachineConfigResponse) GetConfig() *AuthMachineToMachineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetAuthMachineToMachineConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetAuthMachineToMachineConfigResponse) Clone() *GetAuthMachineToMachineConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetAuthMachineToMachineConfigResponse)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type AddAuthMachineToMachineConfigRequest struct {
	Config               *AuthMachineToMachineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AddAuthMachineToMachineConfigRequest) Reset()         { *m = AddAuthMachineToMachineConfigRequest{} }
func (m *AddAuthMachineToMachineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AddAuthMachineToMachineConfigRequest) ProtoMessage()    {}
func (*AddAuthMachineToMachineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{5}
}
func (m *AddAuthMachineToMachineConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAuthMachineToMachineConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAuthMachineToMachineConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAuthMachineToMachineConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAuthMachineToMachineConfigRequest.Merge(m, src)
}
func (m *AddAuthMachineToMachineConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddAuthMachineToMachineConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAuthMachineToMachineConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAuthMachineToMachineConfigRequest proto.InternalMessageInfo

func (m *AddAuthMachineToMachineConfigRequest) GetConfig() *AuthMachineToMachineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AddAuthMachineToMachineConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AddAuthMachineToMachineConfigRequest) Clone() *AddAuthMachineToMachineConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(AddAuthMachineToMachineConfigRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type AddAuthMachineToMachineConfigResponse struct {
	Config               *AuthMachineToMachineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AddAuthMachineToMachineConfigResponse) Reset()         { *m = AddAuthMachineToMachineConfigResponse{} }
func (m *AddAuthMachineToMachineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AddAuthMachineToMachineConfigResponse) ProtoMessage()    {}
func (*AddAuthMachineToMachineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{6}
}
func (m *AddAuthMachineToMachineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAuthMachineToMachineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAuthMachineToMachineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAuthMachineToMachineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAuthMachineToMachineConfigResponse.Merge(m, src)
}
func (m *AddAuthMachineToMachineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddAuthMachineToMachineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAuthMachineToMachineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddAuthMachineToMachineConfigResponse proto.InternalMessageInfo

func (m *AddAuthMachineToMachineConfigResponse) GetConfig() *AuthMachineToMachineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AddAuthMachineToMachineConfigResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *AddAuthMachineToMachineConfigResponse) Clone() *AddAuthMachineToMachineConfigResponse {
	if m == nil {
		return nil
	}
	cloned := new(AddAuthMachineToMachineConfigResponse)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type UpdateAuthMachineToMachineConfigRequest struct {
	Config               *AuthMachineToMachineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpdateAuthMachineToMachineConfigRequest) Reset() {
	*m = UpdateAuthMachineToMachineConfigRequest{}
}
func (m *UpdateAuthMachineToMachineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthMachineToMachineConfigRequest) ProtoMessage()    {}
func (*UpdateAuthMachineToMachineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{7}
}
func (m *UpdateAuthMachineToMachineConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthMachineToMachineConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthMachineToMachineConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthMachineToMachineConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthMachineToMachineConfigRequest.Merge(m, src)
}
func (m *UpdateAuthMachineToMachineConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthMachineToMachineConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthMachineToMachineConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthMachineToMachineConfigRequest proto.InternalMessageInfo

func (m *UpdateAuthMachineToMachineConfigRequest) GetConfig() *AuthMachineToMachineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateAuthMachineToMachineConfigRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *UpdateAuthMachineToMachineConfigRequest) Clone() *UpdateAuthMachineToMachineConfigRequest {
	if m == nil {
		return nil
	}
	cloned := new(UpdateAuthMachineToMachineConfigRequest)
	*cloned = *m

	cloned.Config = m.Config.Clone()
	return cloned
}

type ExchangeAuthMachineToMachineTokenRequest struct {
	// Identity token that is supposed to be exchanged.
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeAuthMachineToMachineTokenRequest) Reset() {
	*m = ExchangeAuthMachineToMachineTokenRequest{}
}
func (m *ExchangeAuthMachineToMachineTokenRequest) String() string { return proto.CompactTextString(m) }
func (*ExchangeAuthMachineToMachineTokenRequest) ProtoMessage()    {}
func (*ExchangeAuthMachineToMachineTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{8}
}
func (m *ExchangeAuthMachineToMachineTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeAuthMachineToMachineTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeAuthMachineToMachineTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeAuthMachineToMachineTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeAuthMachineToMachineTokenRequest.Merge(m, src)
}
func (m *ExchangeAuthMachineToMachineTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeAuthMachineToMachineTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeAuthMachineToMachineTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeAuthMachineToMachineTokenRequest proto.InternalMessageInfo

func (m *ExchangeAuthMachineToMachineTokenRequest) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

func (m *ExchangeAuthMachineToMachineTokenRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExchangeAuthMachineToMachineTokenRequest) Clone() *ExchangeAuthMachineToMachineTokenRequest {
	if m == nil {
		return nil
	}
	cloned := new(ExchangeAuthMachineToMachineTokenRequest)
	*cloned = *m

	return cloned
}

type ExchangeAuthMachineToMachineTokenResponse struct {
	// The exchanged access token.
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeAuthMachineToMachineTokenResponse) Reset() {
	*m = ExchangeAuthMachineToMachineTokenResponse{}
}
func (m *ExchangeAuthMachineToMachineTokenResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ExchangeAuthMachineToMachineTokenResponse) ProtoMessage() {}
func (*ExchangeAuthMachineToMachineTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ce5d1cdb6bc92a, []int{9}
}
func (m *ExchangeAuthMachineToMachineTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeAuthMachineToMachineTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeAuthMachineToMachineTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeAuthMachineToMachineTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeAuthMachineToMachineTokenResponse.Merge(m, src)
}
func (m *ExchangeAuthMachineToMachineTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeAuthMachineToMachineTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeAuthMachineToMachineTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeAuthMachineToMachineTokenResponse proto.InternalMessageInfo

func (m *ExchangeAuthMachineToMachineTokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *ExchangeAuthMachineToMachineTokenResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ExchangeAuthMachineToMachineTokenResponse) Clone() *ExchangeAuthMachineToMachineTokenResponse {
	if m == nil {
		return nil
	}
	cloned := new(ExchangeAuthMachineToMachineTokenResponse)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("v1.AuthMachineToMachineConfig_Type", AuthMachineToMachineConfig_Type_name, AuthMachineToMachineConfig_Type_value)
	proto.RegisterType((*UserAttribute)(nil), "v1.UserAttribute")
	proto.RegisterType((*AuthStatus)(nil), "v1.AuthStatus")
	proto.RegisterType((*AuthMachineToMachineConfig)(nil), "v1.AuthMachineToMachineConfig")
	proto.RegisterType((*AuthMachineToMachineConfig_Mapping)(nil), "v1.AuthMachineToMachineConfig.Mapping")
	proto.RegisterType((*ListAuthMachineToMachineConfigResponse)(nil), "v1.ListAuthMachineToMachineConfigResponse")
	proto.RegisterType((*GetAuthMachineToMachineConfigResponse)(nil), "v1.GetAuthMachineToMachineConfigResponse")
	proto.RegisterType((*AddAuthMachineToMachineConfigRequest)(nil), "v1.AddAuthMachineToMachineConfigRequest")
	proto.RegisterType((*AddAuthMachineToMachineConfigResponse)(nil), "v1.AddAuthMachineToMachineConfigResponse")
	proto.RegisterType((*UpdateAuthMachineToMachineConfigRequest)(nil), "v1.UpdateAuthMachineToMachineConfigRequest")
	proto.RegisterType((*ExchangeAuthMachineToMachineTokenRequest)(nil), "v1.ExchangeAuthMachineToMachineTokenRequest")
	proto.RegisterType((*ExchangeAuthMachineToMachineTokenResponse)(nil), "v1.ExchangeAuthMachineToMachineTokenResponse")
}

func init() { proto.RegisterFile("api/v1/auth_service.proto", fileDescriptor_70ce5d1cdb6bc92a) }

var fileDescriptor_70ce5d1cdb6bc92a = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0xae, 0x93, 0xfc, 0x92, 0xe6, 0x6d, 0x9b, 0xa6, 0xb3, 0xbf, 0x65, 0x1d, 0x2f, 0x4d, 0xb3,
	0x5e, 0x76, 0x37, 0x2d, 0xe0, 0x28, 0x05, 0x01, 0x9b, 0x5b, 0xd3, 0x46, 0x6d, 0x24, 0xb6, 0x20,
	0x37, 0x95, 0x50, 0x0f, 0x58, 0x6e, 0x3c, 0x49, 0x46, 0x4d, 0x3c, 0xc6, 0x33, 0x0e, 0x8d, 0xd0,
	0x0a, 0x69, 0xc5, 0x95, 0x13, 0x17, 0xce, 0x7c, 0x1a, 0x2e, 0x48, 0x48, 0x7c, 0x01, 0x54, 0xf8,
	0x20, 0x68, 0xc6, 0xe3, 0x6c, 0x23, 0xba, 0x49, 0x04, 0xe2, 0x36, 0xf3, 0xfe, 0x7d, 0xde, 0x67,
	0x9e, 0xf1, 0x18, 0x4a, 0x6e, 0x40, 0x6a, 0xe3, 0x7a, 0xcd, 0x8d, 0xf8, 0xc0, 0x61, 0x38, 0x1c,
	0x93, 0x2e, 0xb6, 0x82, 0x90, 0x72, 0x8a, 0x52, 0xe3, 0xba, 0x71, 0x4f, 0xb9, 0xbb, 0x74, 0x34,
	0xa2, 0x7e, 0xec, 0x30, 0x90, 0x32, 0xe2, 0x51, 0xc0, 0x27, 0xca, 0xf6, 0x76, 0x9f, 0xd2, 0xfe,
	0x10, 0xd7, 0x84, 0xcb, 0xf5, 0x7d, 0xca, 0x5d, 0x4e, 0xa8, 0xcf, 0x94, 0x77, 0x47, 0x79, 0xe5,
	0xee, 0x32, 0xea, 0xd5, 0x38, 0x19, 0x61, 0xc6, 0xdd, 0x51, 0xa0, 0x02, 0x1e, 0x32, 0x4e, 0x43,
	0xb7, 0x8f, 0x63, 0x1c, 0x41, 0x48, 0xc7, 0xc4, 0xc3, 0xa1, 0x72, 0x96, 0x13, 0xa7, 0xc2, 0xe7,
	0x10, 0x0f, 0xfb, 0x9c, 0x4c, 0x7b, 0xa3, 0xc4, 0x1f, 0xb1, 0x24, 0xc7, 0x7c, 0x0e, 0x1b, 0xe7,
	0x0c, 0x87, 0x07, 0x9c, 0x87, 0xe4, 0x32, 0xe2, 0x18, 0x15, 0x21, 0x7d, 0x85, 0x27, 0xba, 0x56,
	0xd1, 0xaa, 0x79, 0x5b, 0x2c, 0xd1, 0x5b, 0x90, 0x1d, 0xbb, 0xc3, 0x08, 0x33, 0x3d, 0x55, 0x49,
	0x57, 0xf3, 0xb6, 0xda, 0x99, 0xdf, 0xa5, 0x01, 0x0e, 0x22, 0x3e, 0x38, 0xe3, 0x2e, 0x8f, 0x18,
	0x2a, 0x41, 0x4e, 0xd4, 0x75, 0x88, 0x17, 0x27, 0x9f, 0xac, 0xd8, 0x59, 0x61, 0x68, 0x7b, 0xe8,
	0x39, 0xc0, 0x6b, 0x48, 0x7a, 0xaa, 0xa2, 0x55, 0xd7, 0xf6, 0x75, 0x4b, 0xa1, 0xb1, 0xce, 0x62,
	0x57, 0x5b, 0x81, 0x3d, 0x59, 0xb1, 0xf3, 0x2c, 0x31, 0xa1, 0x0f, 0x21, 0x87, 0xaf, 0x03, 0x12,
	0x62, 0xa6, 0xa7, 0x65, 0x9e, 0x61, 0xc5, 0x1c, 0x59, 0x09, 0x47, 0x56, 0x27, 0xe1, 0xc8, 0x4e,
	0x42, 0xd1, 0x0e, 0xac, 0x85, 0xb8, 0x17, 0x62, 0x36, 0x70, 0xa2, 0x70, 0xa8, 0x67, 0xe4, 0x30,
	0xa0, 0x4c, 0xe7, 0xe1, 0x10, 0x35, 0x60, 0x63, 0x86, 0x41, 0xfd, 0x7f, 0xb2, 0xf8, 0xfd, 0x29,
	0x28, 0x31, 0xd8, 0xe7, 0xca, 0x69, 0xaf, 0xbb, 0xb7, 0x76, 0xc8, 0x82, 0x7c, 0x3c, 0xa8, 0xdf,
	0xa3, 0x7a, 0x56, 0xe6, 0x6d, 0x4d, 0xf3, 0x04, 0x99, 0x6d, 0xbf, 0x47, 0xed, 0xd5, 0x48, 0xad,
	0x50, 0x03, 0x36, 0x65, 0xbc, 0x9b, 0x70, 0xcc, 0xf4, 0x5c, 0x25, 0x2d, 0xb3, 0xc6, 0x75, 0x6b,
	0x86, 0x7d, 0xbb, 0x10, 0xdd, 0xde, 0x32, 0xf4, 0x10, 0xf2, 0xc4, 0x0b, 0x1c, 0x4e, 0xaf, 0xb0,
	0xaf, 0xaf, 0xca, 0x31, 0x56, 0x89, 0x17, 0x74, 0xc4, 0xbe, 0x99, 0x81, 0x14, 0xf1, 0xcc, 0x57,
	0x69, 0x30, 0x04, 0xda, 0x17, 0x6e, 0x77, 0x40, 0x7c, 0xdc, 0xa1, 0x6a, 0x71, 0x48, 0xfd, 0x1e,
	0xe9, 0xa3, 0x82, 0x08, 0x52, 0xc7, 0x99, 0x22, 0x1e, 0xfa, 0x18, 0x32, 0x7c, 0x12, 0x60, 0x79,
	0x0a, 0x85, 0xfd, 0xc7, 0x02, 0xc2, 0x9b, 0xb3, 0xad, 0xce, 0x24, 0xc0, 0xb6, 0x4c, 0x40, 0x0d,
	0x28, 0x49, 0x18, 0x8e, 0x24, 0x59, 0xca, 0xd6, 0xf1, 0xa2, 0x78, 0x21, 0xcf, 0x26, 0x6f, 0x3f,
	0x90, 0x01, 0xad, 0xa9, 0xff, 0x48, 0xb9, 0x51, 0x13, 0x56, 0x47, 0x6e, 0x10, 0x10, 0xbf, 0xcf,
	0xf4, 0x8c, 0x9c, 0xfd, 0xe9, 0x82, 0xc6, 0x2f, 0xe2, 0x70, 0x7b, 0x9a, 0x27, 0x64, 0x48, 0x18,
	0x8b, 0xd4, 0x59, 0xe5, 0x6d, 0xb5, 0x33, 0x2e, 0x20, 0xa7, 0x82, 0xef, 0xd0, 0xee, 0x2e, 0x14,
	0xa5, 0x5a, 0x05, 0xe8, 0x10, 0x33, 0x26, 0xb0, 0xa6, 0xa4, 0x7b, 0x53, 0xda, 0x5b, 0x53, 0x33,
	0x42, 0x90, 0x09, 0xe9, 0x10, 0xab, 0x51, 0xe4, 0xda, 0x7c, 0x06, 0x19, 0xc1, 0x00, 0x5a, 0x83,
	0xdc, 0x71, 0xeb, 0xb4, 0x65, 0xb7, 0x0f, 0x8b, 0x2b, 0x08, 0x41, 0xe1, 0xb8, 0xdd, 0x39, 0x39,
	0x6f, 0x3a, 0x07, 0x87, 0x9d, 0xf6, 0x67, 0xa7, 0x67, 0x45, 0xcd, 0xbc, 0x84, 0xa7, 0x9f, 0x12,
	0xc6, 0xdf, 0x3c, 0x90, 0x8d, 0x59, 0x40, 0x7d, 0x86, 0xd1, 0x27, 0x90, 0xeb, 0x4a, 0x0b, 0xd3,
	0x35, 0xc9, 0x44, 0x79, 0x3e, 0x13, 0x76, 0x12, 0x6e, 0x3a, 0xf0, 0xe4, 0x18, 0x2f, 0xd3, 0xe2,
	0x23, 0xc8, 0xc6, 0x39, 0x92, 0x89, 0xc5, 0x1d, 0x54, 0xb4, 0xf9, 0x25, 0xbc, 0x73, 0xe0, 0x79,
	0xf3, 0x1a, 0x7c, 0x15, 0x61, 0xc6, 0xff, 0x71, 0x7d, 0x07, 0x9e, 0x2c, 0xa8, 0xff, 0x2f, 0x07,
	0x70, 0xe1, 0xd9, 0x79, 0xe0, 0xb9, 0x1c, 0xff, 0x77, 0x33, 0xb4, 0xa0, 0xda, 0xba, 0xee, 0x0e,
	0x5c, 0xbf, 0x7f, 0x67, 0x13, 0x79, 0x31, 0x93, 0x1e, 0x25, 0x58, 0x25, 0x9e, 0xba, 0xbb, 0xb1,
	0x26, 0x73, 0xc4, 0x93, 0x11, 0xe6, 0x29, 0xec, 0x2e, 0x51, 0x46, 0xd1, 0xf1, 0x08, 0xd6, 0xdd,
	0x6e, 0x17, 0x33, 0x36, 0x53, 0x6b, 0x2d, 0xb6, 0xc9, 0xd0, 0xfd, 0x5f, 0xb2, 0xb0, 0x26, 0xbf,
	0xc5, 0xf1, 0x87, 0x13, 0x1d, 0xc2, 0x86, 0xd2, 0x8a, 0xfa, 0x3a, 0xe7, 0xc5, 0x7c, 0x2d, 0xf1,
	0x10, 0x19, 0x85, 0x64, 0xd4, 0xd8, 0x65, 0x3e, 0x78, 0xf5, 0xdb, 0x9f, 0x3f, 0xa4, 0xb6, 0xd0,
	0x66, 0xf2, 0xbe, 0xd5, 0x58, 0x9c, 0xe3, 0xc3, 0xce, 0x7c, 0x51, 0xcf, 0x94, 0xdd, 0x13, 0xcb,
	0xe5, 0x2e, 0x81, 0xf9, 0x7f, 0xd9, 0xb2, 0x80, 0xd6, 0xa7, 0x2d, 0x47, 0xfb, 0x23, 0xf4, 0x35,
	0x6c, 0xcf, 0x15, 0x38, 0x2a, 0x8a, 0x16, 0x36, 0x66, 0x34, 0x0a, 0xbb, 0xb8, 0x39, 0x69, 0x1f,
	0x19, 0xbb, 0xc2, 0xb2, 0xd4, 0xad, 0x30, 0x4b, 0xb2, 0xe7, 0x3d, 0xb4, 0x75, 0xbb, 0x67, 0xed,
	0x1b, 0xe2, 0xbd, 0x44, 0xdf, 0x6b, 0xb0, 0x3d, 0x57, 0x99, 0xa8, 0x2a, 0x39, 0x5b, 0xe2, 0x72,
	0xc4, 0x88, 0x96, 0x92, 0x79, 0x42, 0xbc, 0x39, 0xc3, 0x42, 0x43, 0xdb, 0x43, 0xdf, 0x42, 0x65,
	0x91, 0x8e, 0xd1, 0xbb, 0xf2, 0xf1, 0x58, 0x4e, 0xed, 0xc6, 0xeb, 0x63, 0x32, 0x1f, 0xcb, 0xa6,
	0xdb, 0x86, 0x3e, 0x4b, 0x43, 0x2c, 0x6f, 0x8b, 0x78, 0x2f, 0x05, 0x80, 0x0b, 0xa8, 0x1c, 0xe1,
	0x21, 0x9e, 0x0b, 0xe0, 0xef, 0x87, 0x71, 0xab, 0x8b, 0x22, 0x7b, 0xef, 0x0e, 0xb2, 0x7f, 0xd2,
	0xe0, 0xd1, 0x42, 0xed, 0xa3, 0xf7, 0x64, 0xad, 0x25, 0x6f, 0x9a, 0xf1, 0xfe, 0x92, 0xd1, 0x8a,
	0xf8, 0x8a, 0x44, 0x67, 0x98, 0xf7, 0x67, 0xd0, 0x61, 0x95, 0xdf, 0xd0, 0xf6, 0x9a, 0xd6, 0xcf,
	0x37, 0x65, 0xed, 0xd7, 0x9b, 0xb2, 0xf6, 0xfb, 0x4d, 0x59, 0xfb, 0xf1, 0x8f, 0xf2, 0x0a, 0xe8,
	0x84, 0x5a, 0x8c, 0xbb, 0xdd, 0xab, 0x90, 0x5e, 0xc7, 0xff, 0x1e, 0x96, 0x1b, 0x10, 0x6b, 0x5c,
	0xbf, 0x48, 0x8d, 0xeb, 0x5f, 0xa4, 0x2e, 0xb3, 0xd2, 0xf6, 0xc1, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x27, 0x33, 0x5a, 0x20, 0x29, 0x0a, 0x00, 0x00,
}

func (m *UserAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintAuthService(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdpToken) > 0 {
		i -= len(m.IdpToken)
		copy(dAtA[i:], m.IdpToken)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.IdpToken)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UserAttributes) > 0 {
		for iNdEx := len(m.UserAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAttributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UserInfo != nil {
		{
			size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AuthProvider != nil {
		{
			size, err := m.AuthProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RefreshUrl) > 0 {
		i -= len(m.RefreshUrl)
		copy(dAtA[i:], m.RefreshUrl)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.RefreshUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Expires != nil {
		{
			size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthStatus_UserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthStatus_UserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UserId)
	copy(dAtA[i:], m.UserId)
	i = encodeVarintAuthService(dAtA, i, uint64(len(m.UserId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *AuthStatus_ServiceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthStatus_ServiceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceId != nil {
		{
			size, err := m.ServiceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AuthMachineToMachineConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMachineToMachineConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMachineToMachineConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mappings) > 0 {
		for iNdEx := len(m.Mappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenExpirationDuration) > 0 {
		i -= len(m.TokenExpirationDuration)
		copy(dAtA[i:], m.TokenExpirationDuration)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.TokenExpirationDuration)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintAuthService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthMachineToMachineConfig_Mapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMachineToMachineConfig_Mapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMachineToMachineConfig_Mapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValueExpression) > 0 {
		i -= len(m.ValueExpression)
		copy(dAtA[i:], m.ValueExpression)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.ValueExpression)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAuthMachineToMachineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAuthMachineToMachineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAuthMachineToMachineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAuthMachineToMachineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthMachineToMachineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuthMachineToMachineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddAuthMachineToMachineConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAuthMachineToMachineConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAuthMachineToMachineConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddAuthMachineToMachineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAuthMachineToMachineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAuthMachineToMachineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthMachineToMachineConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthMachineToMachineConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthMachineToMachineConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeAuthMachineToMachineTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeAuthMachineToMachineTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeAuthMachineToMachineTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdToken) > 0 {
		i -= len(m.IdToken)
		copy(dAtA[i:], m.IdToken)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.IdToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeAuthMachineToMachineTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeAuthMachineToMachineTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeAuthMachineToMachineTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintAuthService(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthService(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovAuthService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	l = len(m.RefreshUrl)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.AuthProvider != nil {
		l = m.AuthProvider.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if len(m.UserAttributes) > 0 {
		for _, e := range m.UserAttributes {
			l = e.Size()
			n += 1 + l + sovAuthService(uint64(l))
		}
	}
	l = len(m.IdpToken)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthStatus_UserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	n += 1 + l + sovAuthService(uint64(l))
	return n
}
func (m *AuthStatus_ServiceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != nil {
		l = m.ServiceId.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	return n
}
func (m *AuthMachineToMachineConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAuthService(uint64(m.Type))
	}
	l = len(m.TokenExpirationDuration)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.Size()
			n += 1 + l + sovAuthService(uint64(l))
		}
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthMachineToMachineConfig_Mapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	l = len(m.ValueExpression)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAuthMachineToMachineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovAuthService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAuthMachineToMachineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddAuthMachineToMachineConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddAuthMachineToMachineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAuthMachineToMachineConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeAuthMachineToMachineTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeAuthMachineToMachineTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAuthService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthService(x uint64) (n int) {
	return sovAuthService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &AuthStatus_UserId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &storage.ServiceIdentity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Id = &AuthStatus_ServiceId{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &types.Timestamp{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthProvider == nil {
				m.AuthProvider = &storage.AuthProvider{}
			}
			if err := m.AuthProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &storage.UserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAttributes = append(m.UserAttributes, &UserAttribute{})
			if err := m.UserAttributes[len(m.UserAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdpToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdpToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMachineToMachineConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthMachineToMachineConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthMachineToMachineConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuthMachineToMachineConfig_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExpirationDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenExpirationDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, &AuthMachineToMachineConfig_Mapping{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMachineToMachineConfig_Mapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAuthMachineToMachineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAuthMachineToMachineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAuthMachineToMachineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &AuthMachineToMachineConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthMachineToMachineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthMachineToMachineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthMachineToMachineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthMachineToMachineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAuthMachineToMachineConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAuthMachineToMachineConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAuthMachineToMachineConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthMachineToMachineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAuthMachineToMachineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAuthMachineToMachineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAuthMachineToMachineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthMachineToMachineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthMachineToMachineConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthMachineToMachineConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthMachineToMachineConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthMachineToMachineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeAuthMachineToMachineTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeAuthMachineToMachineTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeAuthMachineToMachineTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeAuthMachineToMachineTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeAuthMachineToMachineTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeAuthMachineToMachineTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthService = fmt.Errorf("proto: unexpected end of group")
)
