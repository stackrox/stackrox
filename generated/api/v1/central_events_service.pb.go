// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/central_events_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CentralEventType exposes the different types of events.
type CentralEventType int32

const (
	CentralEventType_CENTRAL_EVENT_TYPE_UNKNOWN     CentralEventType = 0
	CentralEventType_CENTRAL_EVENT_TYPE_GENERIC     CentralEventType = 1
	CentralEventType_CENTRAL_EVENT_TYPE_LOG_MESSAGE CentralEventType = 2
)

var CentralEventType_name = map[int32]string{
	0: "CENTRAL_EVENT_TYPE_UNKNOWN",
	1: "CENTRAL_EVENT_TYPE_GENERIC",
	2: "CENTRAL_EVENT_TYPE_LOG_MESSAGE",
}

var CentralEventType_value = map[string]int32{
	"CENTRAL_EVENT_TYPE_UNKNOWN":     0,
	"CENTRAL_EVENT_TYPE_GENERIC":     1,
	"CENTRAL_EVENT_TYPE_LOG_MESSAGE": 2,
}

func (x CentralEventType) String() string {
	return proto.EnumName(CentralEventType_name, int32(x))
}

func (CentralEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{0}
}

// CentralEventLevel exposes the different levels of events.
type CentralEventLevel int32

const (
	CentralEventLevel_CENTRAL_EVENT_LEVEL_UNKNOWN CentralEventLevel = 0
	CentralEventLevel_CENTRAL_EVENT_LEVEL_INFO    CentralEventLevel = 1
	CentralEventLevel_CENTRAL_EVENT_LEVEL_SUCCESS CentralEventLevel = 2
	CentralEventLevel_CENTRAL_EVENT_LEVEL_WARN    CentralEventLevel = 3
	CentralEventLevel_CENTRAL_EVENT_LEVEL_DANGER  CentralEventLevel = 4
)

var CentralEventLevel_name = map[int32]string{
	0: "CENTRAL_EVENT_LEVEL_UNKNOWN",
	1: "CENTRAL_EVENT_LEVEL_INFO",
	2: "CENTRAL_EVENT_LEVEL_SUCCESS",
	3: "CENTRAL_EVENT_LEVEL_WARN",
	4: "CENTRAL_EVENT_LEVEL_DANGER",
}

var CentralEventLevel_value = map[string]int32{
	"CENTRAL_EVENT_LEVEL_UNKNOWN": 0,
	"CENTRAL_EVENT_LEVEL_INFO":    1,
	"CENTRAL_EVENT_LEVEL_SUCCESS": 2,
	"CENTRAL_EVENT_LEVEL_WARN":    3,
	"CENTRAL_EVENT_LEVEL_DANGER":  4,
}

func (x CentralEventLevel) String() string {
	return proto.EnumName(CentralEventLevel_name, int32(x))
}

func (CentralEventLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{1}
}

// CentralEvents are emitted by Central. They are used to create transparency for users
// for asynchronous, background tasks. events are part of Central's system health view.
type CentralEvent struct {
	// UUID of the event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the event.
	Type CentralEventType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.CentralEventType" json:"type,omitempty"`
	// Level associated with the event. The level is categorized into danger, warn, info,
	// success.
	Level CentralEventLevel `protobuf:"varint,3,opt,name=level,proto3,enum=v1.CentralEventLevel" json:"level,omitempty"`
	// Message associated with the event. The message may include detailed information
	// for this particular event.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Hint associated with the event. The hint may include different information based
	// on the type of event. It can include instructions to resolve a event, or
	// informational hints.
	Hint string `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	// Domain associated with the event. A event's domain outlines the feature domain where
	// the event was created from. As an example, this might be "Image Scanning".
	// In case of events that cannot be tied to a specific domain, this will be "General".
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// Resource type associated with the event. A event may refer to an underlying resource
	// such as a particular image. In that case, the resource type will be filled here.
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Resource ID associated with the event. If a event refers to an underlying resource,
	// the resource ID identifies the underlying resource.
	ResourceId string `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Occurrences associated with the event. When events may occur multiple times, the
	// occurrences track the amount.
	NumOccurrences int64 `protobuf:"varint,9,opt,name=num_occurrences,json=numOccurrences,proto3" json:"num_occurrences,omitempty"`
	// Specifies the time when the event has last occurred.
	LastOccurredAt *types.Timestamp `protobuf:"bytes,10,opt,name=last_occurred_at,json=lastOccurredAt,proto3" json:"last_occurred_at,omitempty"`
	// Specifies the time when the event has been created.
	CreatedAt            *types.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CentralEvent) Reset()         { *m = CentralEvent{} }
func (m *CentralEvent) String() string { return proto.CompactTextString(m) }
func (*CentralEvent) ProtoMessage()    {}
func (*CentralEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{0}
}
func (m *CentralEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CentralEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CentralEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CentralEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentralEvent.Merge(m, src)
}
func (m *CentralEvent) XXX_Size() int {
	return m.Size()
}
func (m *CentralEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CentralEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CentralEvent proto.InternalMessageInfo

func (m *CentralEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CentralEvent) GetType() CentralEventType {
	if m != nil {
		return m.Type
	}
	return CentralEventType_CENTRAL_EVENT_TYPE_UNKNOWN
}

func (m *CentralEvent) GetLevel() CentralEventLevel {
	if m != nil {
		return m.Level
	}
	return CentralEventLevel_CENTRAL_EVENT_LEVEL_UNKNOWN
}

func (m *CentralEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CentralEvent) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *CentralEvent) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CentralEvent) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *CentralEvent) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *CentralEvent) GetNumOccurrences() int64 {
	if m != nil {
		return m.NumOccurrences
	}
	return 0
}

func (m *CentralEvent) GetLastOccurredAt() *types.Timestamp {
	if m != nil {
		return m.LastOccurredAt
	}
	return nil
}

func (m *CentralEvent) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CentralEvent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CentralEvent) Clone() *CentralEvent {
	if m == nil {
		return nil
	}
	cloned := new(CentralEvent)
	*cloned = *m

	cloned.LastOccurredAt = m.LastOccurredAt.Clone()
	cloned.CreatedAt = m.CreatedAt.Clone()
	return cloned
}

type CentralEventsFilter struct {
	// For filtering events starting from a specific timestamp, i.e. the lower boundary.
	From *types.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// For filtering events up until a specific timestamp, i.e. the upper boundary.
	Until *types.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	// For filtering events from a specific domain.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// For filtering events associated with a specific resource type.
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// For filtering events based on their type.
	Type CentralEventType `protobuf:"varint,5,opt,name=type,proto3,enum=v1.CentralEventType" json:"type,omitempty"`
	// For filtering events based on their level.
	Level                CentralEventLevel `protobuf:"varint,6,opt,name=level,proto3,enum=v1.CentralEventLevel" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CentralEventsFilter) Reset()         { *m = CentralEventsFilter{} }
func (m *CentralEventsFilter) String() string { return proto.CompactTextString(m) }
func (*CentralEventsFilter) ProtoMessage()    {}
func (*CentralEventsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{1}
}
func (m *CentralEventsFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CentralEventsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CentralEventsFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CentralEventsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentralEventsFilter.Merge(m, src)
}
func (m *CentralEventsFilter) XXX_Size() int {
	return m.Size()
}
func (m *CentralEventsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CentralEventsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CentralEventsFilter proto.InternalMessageInfo

func (m *CentralEventsFilter) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CentralEventsFilter) GetUntil() *types.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

func (m *CentralEventsFilter) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CentralEventsFilter) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *CentralEventsFilter) GetType() CentralEventType {
	if m != nil {
		return m.Type
	}
	return CentralEventType_CENTRAL_EVENT_TYPE_UNKNOWN
}

func (m *CentralEventsFilter) GetLevel() CentralEventLevel {
	if m != nil {
		return m.Level
	}
	return CentralEventLevel_CENTRAL_EVENT_LEVEL_UNKNOWN
}

func (m *CentralEventsFilter) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CentralEventsFilter) Clone() *CentralEventsFilter {
	if m == nil {
		return nil
	}
	cloned := new(CentralEventsFilter)
	*cloned = *m

	cloned.From = m.From.Clone()
	cloned.Until = m.Until.Clone()
	return cloned
}

type CountCentralEventsRequest struct {
	// For filtering the events based on the requested fields.
	Filter               *CentralEventsFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CountCentralEventsRequest) Reset()         { *m = CountCentralEventsRequest{} }
func (m *CountCentralEventsRequest) String() string { return proto.CompactTextString(m) }
func (*CountCentralEventsRequest) ProtoMessage()    {}
func (*CountCentralEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{2}
}
func (m *CountCentralEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountCentralEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountCentralEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountCentralEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountCentralEventsRequest.Merge(m, src)
}
func (m *CountCentralEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountCentralEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountCentralEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountCentralEventsRequest proto.InternalMessageInfo

func (m *CountCentralEventsRequest) GetFilter() *CentralEventsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CountCentralEventsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountCentralEventsRequest) Clone() *CountCentralEventsRequest {
	if m == nil {
		return nil
	}
	cloned := new(CountCentralEventsRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

type CountCentralEventsResponse struct {
	// The total number of events after filtering and deduplication.
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountCentralEventsResponse) Reset()         { *m = CountCentralEventsResponse{} }
func (m *CountCentralEventsResponse) String() string { return proto.CompactTextString(m) }
func (*CountCentralEventsResponse) ProtoMessage()    {}
func (*CountCentralEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{3}
}
func (m *CountCentralEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountCentralEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountCentralEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountCentralEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountCentralEventsResponse.Merge(m, src)
}
func (m *CountCentralEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountCentralEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountCentralEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountCentralEventsResponse proto.InternalMessageInfo

func (m *CountCentralEventsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountCentralEventsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CountCentralEventsResponse) Clone() *CountCentralEventsResponse {
	if m == nil {
		return nil
	}
	cloned := new(CountCentralEventsResponse)
	*cloned = *m

	return cloned
}

type GetCentralEventResponse struct {
	Event                *CentralEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetCentralEventResponse) Reset()         { *m = GetCentralEventResponse{} }
func (m *GetCentralEventResponse) String() string { return proto.CompactTextString(m) }
func (*GetCentralEventResponse) ProtoMessage()    {}
func (*GetCentralEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{4}
}
func (m *GetCentralEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCentralEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCentralEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCentralEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCentralEventResponse.Merge(m, src)
}
func (m *GetCentralEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCentralEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCentralEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCentralEventResponse proto.InternalMessageInfo

func (m *GetCentralEventResponse) GetEvent() *CentralEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *GetCentralEventResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetCentralEventResponse) Clone() *GetCentralEventResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetCentralEventResponse)
	*cloned = *m

	cloned.Event = m.Event.Clone()
	return cloned
}

type ListCentralEventsRequest struct {
	// For dividing the events response into chunks.
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// For filtering the events based on the requested fields.
	Filter               *CentralEventsFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListCentralEventsRequest) Reset()         { *m = ListCentralEventsRequest{} }
func (m *ListCentralEventsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCentralEventsRequest) ProtoMessage()    {}
func (*ListCentralEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{5}
}
func (m *ListCentralEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCentralEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCentralEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCentralEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCentralEventsRequest.Merge(m, src)
}
func (m *ListCentralEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCentralEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCentralEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCentralEventsRequest proto.InternalMessageInfo

func (m *ListCentralEventsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCentralEventsRequest) GetFilter() *CentralEventsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListCentralEventsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCentralEventsRequest) Clone() *ListCentralEventsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ListCentralEventsRequest)
	*cloned = *m

	cloned.Pagination = m.Pagination.Clone()
	cloned.Filter = m.Filter.Clone()
	return cloned
}

type ListCentralEventsResponse struct {
	Events               []*CentralEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListCentralEventsResponse) Reset()         { *m = ListCentralEventsResponse{} }
func (m *ListCentralEventsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCentralEventsResponse) ProtoMessage()    {}
func (*ListCentralEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a6b6aa8857d062, []int{6}
}
func (m *ListCentralEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCentralEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCentralEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCentralEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCentralEventsResponse.Merge(m, src)
}
func (m *ListCentralEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCentralEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCentralEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCentralEventsResponse proto.InternalMessageInfo

func (m *ListCentralEventsResponse) GetEvents() []*CentralEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ListCentralEventsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListCentralEventsResponse) Clone() *ListCentralEventsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListCentralEventsResponse)
	*cloned = *m

	if m.Events != nil {
		cloned.Events = make([]*CentralEvent, len(m.Events))
		for idx, v := range m.Events {
			cloned.Events[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v1.CentralEventType", CentralEventType_name, CentralEventType_value)
	proto.RegisterEnum("v1.CentralEventLevel", CentralEventLevel_name, CentralEventLevel_value)
	proto.RegisterType((*CentralEvent)(nil), "v1.CentralEvent")
	proto.RegisterType((*CentralEventsFilter)(nil), "v1.CentralEventsFilter")
	proto.RegisterType((*CountCentralEventsRequest)(nil), "v1.CountCentralEventsRequest")
	proto.RegisterType((*CountCentralEventsResponse)(nil), "v1.CountCentralEventsResponse")
	proto.RegisterType((*GetCentralEventResponse)(nil), "v1.GetCentralEventResponse")
	proto.RegisterType((*ListCentralEventsRequest)(nil), "v1.ListCentralEventsRequest")
	proto.RegisterType((*ListCentralEventsResponse)(nil), "v1.ListCentralEventsResponse")
}

func init() {
	proto.RegisterFile("api/v1/central_events_service.proto", fileDescriptor_b9a6b6aa8857d062)
}

var fileDescriptor_b9a6b6aa8857d062 = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x73, 0xdb, 0x44,
	0x14, 0x8e, 0xe4, 0x1f, 0x25, 0x2f, 0xc5, 0x55, 0x36, 0xa5, 0x51, 0xdc, 0xd4, 0xf1, 0xa8, 0x33,
	0xe0, 0x29, 0x33, 0x32, 0x0e, 0x27, 0x8e, 0xae, 0xa3, 0x7a, 0x32, 0x18, 0xa5, 0x23, 0xbb, 0x2d,
	0x70, 0x11, 0xaa, 0xb4, 0x09, 0x3b, 0xb5, 0xb4, 0x42, 0xbb, 0xd2, 0x90, 0xe9, 0x70, 0xe1, 0xca,
	0x91, 0x0b, 0xff, 0x03, 0x27, 0xfe, 0x0b, 0x8e, 0xcc, 0x70, 0xe2, 0xc6, 0x04, 0xfe, 0x90, 0x8e,
	0x56, 0xab, 0xd4, 0xb1, 0x2d, 0xb7, 0x37, 0xef, 0xfb, 0xbe, 0xf7, 0xbd, 0x7d, 0xef, 0x7d, 0x2b,
	0xc3, 0x43, 0x2f, 0x26, 0xfd, 0x6c, 0xd0, 0xf7, 0x71, 0xc4, 0x13, 0x6f, 0xee, 0xe2, 0x0c, 0x47,
	0x9c, 0xb9, 0x0c, 0x27, 0x19, 0xf1, 0xb1, 0x19, 0x27, 0x94, 0x53, 0xa4, 0x66, 0x83, 0xf6, 0xe1,
	0x05, 0xa5, 0x17, 0x73, 0xdc, 0xcf, 0xf9, 0x5e, 0x14, 0x51, 0xee, 0x71, 0x42, 0x23, 0x56, 0x30,
	0xda, 0x7b, 0xa5, 0x0c, 0x0d, 0x43, 0x1a, 0xc9, 0xe0, 0xbe, 0x0c, 0xc6, 0xde, 0x05, 0x89, 0x04,
	0x5d, 0x02, 0x47, 0x52, 0x4b, 0x9c, 0x5e, 0xa6, 0xe7, 0x7d, 0x4e, 0x42, 0xcc, 0xb8, 0x17, 0xc6,
	0x05, 0xc1, 0xf8, 0xbd, 0x06, 0xb7, 0x47, 0xc5, 0x8d, 0xac, 0xfc, 0x42, 0xa8, 0x05, 0x2a, 0x09,
	0x74, 0xa5, 0xab, 0xf4, 0xb6, 0x1d, 0x95, 0x04, 0xa8, 0x07, 0x75, 0x7e, 0x19, 0x63, 0x5d, 0xed,
	0x2a, 0xbd, 0xd6, 0xf1, 0x5d, 0x33, 0x1b, 0x98, 0x8b, 0xfc, 0xd9, 0x65, 0x8c, 0x1d, 0xc1, 0x40,
	0x9f, 0x42, 0x63, 0x8e, 0x33, 0x3c, 0xd7, 0x6b, 0x82, 0xfa, 0xd1, 0x32, 0x75, 0x92, 0x83, 0x4e,
	0xc1, 0x41, 0x3a, 0xdc, 0x0a, 0x31, 0x63, 0xde, 0x05, 0xd6, 0xeb, 0xa2, 0x56, 0x79, 0x44, 0x08,
	0xea, 0xdf, 0x93, 0x88, 0xeb, 0x0d, 0x11, 0x16, 0xbf, 0xd1, 0x3d, 0x68, 0x06, 0x34, 0xf4, 0x48,
	0xa4, 0x37, 0x45, 0x54, 0x9e, 0xd0, 0x43, 0xf8, 0x30, 0xc1, 0x8c, 0xa6, 0x89, 0x8f, 0x5d, 0x71,
	0xcb, 0x5b, 0x02, 0xbe, 0x5d, 0x06, 0xf3, 0xdb, 0xa1, 0x23, 0xd8, 0xb9, 0x26, 0x91, 0x40, 0xff,
	0x40, 0x50, 0xa0, 0x0c, 0x9d, 0x06, 0xe8, 0x13, 0xb8, 0x13, 0xa5, 0xa1, 0x4b, 0x7d, 0x3f, 0x4d,
	0x12, 0x1c, 0xf9, 0x98, 0xe9, 0xdb, 0x5d, 0xa5, 0x57, 0x73, 0x5a, 0x51, 0x1a, 0x9e, 0xbd, 0x8d,
	0xa2, 0x13, 0xd0, 0xe6, 0x1e, 0xe3, 0x25, 0x33, 0x70, 0x3d, 0xae, 0x43, 0x57, 0xe9, 0xed, 0x1c,
	0xb7, 0xcd, 0x62, 0xd0, 0x66, 0x39, 0x68, 0x73, 0x56, 0x0e, 0xda, 0x69, 0xe5, 0x39, 0x52, 0x26,
	0x18, 0x72, 0xf4, 0x05, 0x80, 0x9f, 0x60, 0x8f, 0x17, 0xf9, 0x3b, 0xef, 0xcc, 0xdf, 0x96, 0xec,
	0x21, 0x37, 0x7e, 0x51, 0x61, 0x6f, 0x71, 0xa4, 0xec, 0x09, 0x99, 0x73, 0x9c, 0x20, 0x13, 0xea,
	0xe7, 0x09, 0x0d, 0xc5, 0xda, 0x36, 0x8b, 0x09, 0x1e, 0xfa, 0x0c, 0x1a, 0x69, 0xc4, 0xc9, 0x5c,
	0x6c, 0x75, 0x73, 0x42, 0x41, 0x5c, 0xd8, 0x40, 0x6d, 0xf3, 0x06, 0xea, 0x6b, 0x36, 0x50, 0x7a,
	0xa8, 0xf1, 0xfe, 0x1e, 0x6a, 0xbe, 0xdb, 0x43, 0xc6, 0x04, 0x0e, 0x46, 0x34, 0x8d, 0xf8, 0x8d,
	0x89, 0x38, 0xf8, 0x87, 0x14, 0x33, 0x8e, 0xfa, 0xd0, 0x3c, 0x17, 0xc3, 0x91, 0x43, 0xd9, 0x5f,
	0x96, 0x92, 0xb3, 0x73, 0x24, 0xcd, 0x38, 0x86, 0xf6, 0x3a, 0x35, 0x16, 0xd3, 0x88, 0x61, 0x74,
	0x17, 0x1a, 0x7e, 0x8e, 0x0a, 0xb5, 0x9a, 0x53, 0x1c, 0x8c, 0x21, 0xec, 0x8f, 0xf1, 0x8d, 0x8c,
	0xeb, 0x84, 0x8f, 0xa1, 0x21, 0x5e, 0xb8, 0x2c, 0xaf, 0x2d, 0x97, 0x77, 0x0a, 0xd8, 0x78, 0x0d,
	0xfa, 0x84, 0xb0, 0xf5, 0x3d, 0x98, 0x00, 0x6f, 0x5f, 0xb4, 0x14, 0x6a, 0xe5, 0x42, 0x4f, 0xaf,
	0xa3, 0xce, 0x02, 0x63, 0xa1, 0x67, 0xf5, 0xfd, 0x7a, 0xb6, 0xe0, 0x60, 0x4d, 0x71, 0xd9, 0x41,
	0x0f, 0x9a, 0xc5, 0x37, 0x4a, 0x57, 0xba, 0xb5, 0xb5, 0x2d, 0x48, 0xfc, 0x51, 0x06, 0xda, 0xf2,
	0x3e, 0x51, 0x07, 0xda, 0x23, 0xcb, 0x9e, 0x39, 0xc3, 0x89, 0x6b, 0x3d, 0xb7, 0xec, 0x99, 0x3b,
	0xfb, 0xe6, 0xa9, 0xe5, 0x3e, 0xb3, 0xbf, 0xb4, 0xcf, 0x5e, 0xd8, 0xda, 0x56, 0x05, 0x3e, 0xb6,
	0x6c, 0xcb, 0x39, 0x1d, 0x69, 0x0a, 0x32, 0xa0, 0xb3, 0x06, 0x9f, 0x9c, 0x8d, 0xdd, 0xaf, 0xac,
	0xe9, 0x74, 0x38, 0xb6, 0x34, 0xf5, 0xd1, 0x1f, 0x0a, 0xec, 0xae, 0xb8, 0x03, 0x1d, 0xc1, 0xfd,
	0x9b, 0x99, 0x13, 0xeb, 0xb9, 0x35, 0x59, 0x28, 0x7d, 0x08, 0xfa, 0x3a, 0xc2, 0xa9, 0xfd, 0xe4,
	0x4c, 0x53, 0xaa, 0xd2, 0xa7, 0xcf, 0x46, 0x23, 0x6b, 0x3a, 0xd5, 0xd4, 0xaa, 0xf4, 0x17, 0x43,
	0xc7, 0xd6, 0x6a, 0xab, 0x7d, 0x15, 0xe8, 0xc9, 0xd0, 0x1e, 0x5b, 0x8e, 0x56, 0x3f, 0xfe, 0x67,
	0xe9, 0x09, 0x4f, 0x8b, 0xef, 0x3f, 0x62, 0x80, 0x56, 0xed, 0x87, 0x1e, 0x88, 0x99, 0x57, 0x99,
	0xbc, 0xdd, 0xa9, 0x82, 0x8b, 0x15, 0x1a, 0x9d, 0x9f, 0xff, 0xfe, 0xff, 0x57, 0x55, 0x47, 0xf7,
	0x16, 0xfe, 0x78, 0x8a, 0x9d, 0x09, 0xff, 0xa2, 0xef, 0xe0, 0xce, 0x92, 0x7f, 0x91, 0xd8, 0xb2,
	0x23, 0x5f, 0xef, 0xe3, 0xcb, 0xd3, 0x93, 0xf6, 0xfd, 0x3c, 0x52, 0x61, 0xf3, 0x0d, 0x15, 0xfa,
	0xaf, 0x49, 0xf0, 0x13, 0x7a, 0x05, 0xbb, 0x2b, 0x0e, 0x43, 0x87, 0xb9, 0x62, 0x95, 0xeb, 0xdb,
	0x0f, 0x2a, 0x50, 0x59, 0xf1, 0x40, 0x54, 0xdc, 0x43, 0xbb, 0x2b, 0x15, 0x1f, 0x9b, 0x7f, 0x5e,
	0x75, 0x94, 0xbf, 0xae, 0x3a, 0xca, 0xbf, 0x57, 0x1d, 0xe5, 0xb7, 0xff, 0x3a, 0x5b, 0xa0, 0x13,
	0x6a, 0x32, 0xee, 0xf9, 0xaf, 0x12, 0xfa, 0x63, 0xf1, 0x75, 0x33, 0xbd, 0x98, 0x98, 0xd9, 0xe0,
	0x5b, 0x35, 0x1b, 0x7c, 0xbd, 0xf5, 0xb2, 0x29, 0x62, 0x9f, 0xbf, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x84, 0x4f, 0x82, 0x06, 0x9d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CentralEventServiceClient is the client API for CentralEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type CentralEventServiceClient interface {
	// CountCentralEvents returns the number of events after filtered by requested fields.
	CountCentralEvents(ctx context.Context, in *CountCentralEventsRequest, opts ...grpc.CallOption) (*CountCentralEventsResponse, error)
	// GetCentralEvent retrieves a event by ID.
	GetCentralEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetCentralEventResponse, error)
	// ListCentralEvents returns the list of events after filtered by requested fields.
	ListCentralEvents(ctx context.Context, in *ListCentralEventsRequest, opts ...grpc.CallOption) (*ListCentralEventsResponse, error)
}

type centralEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralEventServiceClient(cc grpc.ClientConnInterface) CentralEventServiceClient {
	return &centralEventServiceClient{cc}
}

func (c *centralEventServiceClient) CountCentralEvents(ctx context.Context, in *CountCentralEventsRequest, opts ...grpc.CallOption) (*CountCentralEventsResponse, error) {
	out := new(CountCentralEventsResponse)
	err := c.cc.Invoke(ctx, "/v1.CentralEventService/CountCentralEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralEventServiceClient) GetCentralEvent(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*GetCentralEventResponse, error) {
	out := new(GetCentralEventResponse)
	err := c.cc.Invoke(ctx, "/v1.CentralEventService/GetCentralEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralEventServiceClient) ListCentralEvents(ctx context.Context, in *ListCentralEventsRequest, opts ...grpc.CallOption) (*ListCentralEventsResponse, error) {
	out := new(ListCentralEventsResponse)
	err := c.cc.Invoke(ctx, "/v1.CentralEventService/ListCentralEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralEventServiceServer is the server API for CentralEventService service.
type CentralEventServiceServer interface {
	// CountCentralEvents returns the number of events after filtered by requested fields.
	CountCentralEvents(context.Context, *CountCentralEventsRequest) (*CountCentralEventsResponse, error)
	// GetCentralEvent retrieves a event by ID.
	GetCentralEvent(context.Context, *ResourceByID) (*GetCentralEventResponse, error)
	// ListCentralEvents returns the list of events after filtered by requested fields.
	ListCentralEvents(context.Context, *ListCentralEventsRequest) (*ListCentralEventsResponse, error)
}

// UnimplementedCentralEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCentralEventServiceServer struct {
}

func (*UnimplementedCentralEventServiceServer) CountCentralEvents(ctx context.Context, req *CountCentralEventsRequest) (*CountCentralEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCentralEvents not implemented")
}
func (*UnimplementedCentralEventServiceServer) GetCentralEvent(ctx context.Context, req *ResourceByID) (*GetCentralEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCentralEvent not implemented")
}
func (*UnimplementedCentralEventServiceServer) ListCentralEvents(ctx context.Context, req *ListCentralEventsRequest) (*ListCentralEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCentralEvents not implemented")
}

func RegisterCentralEventServiceServer(s *grpc.Server, srv CentralEventServiceServer) {
	s.RegisterService(&_CentralEventService_serviceDesc, srv)
}

func _CentralEventService_CountCentralEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCentralEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralEventServiceServer).CountCentralEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CentralEventService/CountCentralEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralEventServiceServer).CountCentralEvents(ctx, req.(*CountCentralEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralEventService_GetCentralEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralEventServiceServer).GetCentralEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CentralEventService/GetCentralEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralEventServiceServer).GetCentralEvent(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralEventService_ListCentralEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCentralEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralEventServiceServer).ListCentralEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CentralEventService/ListCentralEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralEventServiceServer).ListCentralEvents(ctx, req.(*ListCentralEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CentralEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CentralEventService",
	HandlerType: (*CentralEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCentralEvents",
			Handler:    _CentralEventService_CountCentralEvents_Handler,
		},
		{
			MethodName: "GetCentralEvent",
			Handler:    _CentralEventService_GetCentralEvent_Handler,
		},
		{
			MethodName: "ListCentralEvents",
			Handler:    _CentralEventService_ListCentralEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/central_events_service.proto",
}

func (m *CentralEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CentralEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CentralEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LastOccurredAt != nil {
		{
			size, err := m.LastOccurredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NumOccurrences != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.NumOccurrences))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CentralEventsFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CentralEventsFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CentralEventsFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintCentralEventsService(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Until != nil {
		{
			size, err := m.Until.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountCentralEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountCentralEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountCentralEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountCentralEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountCentralEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountCentralEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCentralEventsService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCentralEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCentralEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCentralEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCentralEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCentralEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCentralEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCentralEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCentralEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCentralEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralEventsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCentralEventsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCentralEventsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CentralEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCentralEventsService(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovCentralEventsService(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.NumOccurrences != 0 {
		n += 1 + sovCentralEventsService(uint64(m.NumOccurrences))
	}
	if m.LastOccurredAt != nil {
		l = m.LastOccurredAt.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CentralEventsFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.Until != nil {
		l = m.Until.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCentralEventsService(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovCentralEventsService(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountCentralEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountCentralEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCentralEventsService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCentralEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCentralEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCentralEventsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCentralEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCentralEventsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCentralEventsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCentralEventsService(x uint64) (n int) {
	return sovCentralEventsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CentralEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CentralEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CentralEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CentralEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= CentralEventLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOccurrences", wireType)
			}
			m.NumOccurrences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOccurrences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOccurredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastOccurredAt == nil {
				m.LastOccurredAt = &types.Timestamp{}
			}
			if err := m.LastOccurredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CentralEventsFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CentralEventsFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CentralEventsFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Until", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Until == nil {
				m.Until = &types.Timestamp{}
			}
			if err := m.Until.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CentralEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= CentralEventLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountCentralEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountCentralEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountCentralEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &CentralEventsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountCentralEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountCentralEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountCentralEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCentralEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCentralEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCentralEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &CentralEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCentralEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCentralEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCentralEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &CentralEventsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCentralEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCentralEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCentralEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &CentralEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralEventsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralEventsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCentralEventsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCentralEventsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralEventsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCentralEventsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCentralEventsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCentralEventsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCentralEventsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCentralEventsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCentralEventsService = fmt.Errorf("proto: unexpected end of group")
)
