// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/network_baseline_service.proto

package v1

import (
	context "context"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkBaselineService_GetNetworkBaselineStatusForFlows_FullMethodName = "/v1.NetworkBaselineService/GetNetworkBaselineStatusForFlows"
	NetworkBaselineService_GetNetworkBaseline_FullMethodName               = "/v1.NetworkBaselineService/GetNetworkBaseline"
	NetworkBaselineService_ModifyBaselineStatusForPeers_FullMethodName     = "/v1.NetworkBaselineService/ModifyBaselineStatusForPeers"
	NetworkBaselineService_LockNetworkBaseline_FullMethodName              = "/v1.NetworkBaselineService/LockNetworkBaseline"
	NetworkBaselineService_UnlockNetworkBaseline_FullMethodName            = "/v1.NetworkBaselineService/UnlockNetworkBaseline"
)

// NetworkBaselineServiceClient is the client API for NetworkBaselineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkBaselineServiceClient interface {
	GetNetworkBaselineStatusForFlows(ctx context.Context, in *NetworkBaselineStatusRequest, opts ...grpc.CallOption) (*NetworkBaselineStatusResponse, error)
	GetNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.NetworkBaseline, error)
	ModifyBaselineStatusForPeers(ctx context.Context, in *ModifyBaselineStatusForPeersRequest, opts ...grpc.CallOption) (*Empty, error)
	LockNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
	UnlockNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error)
}

type networkBaselineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkBaselineServiceClient(cc grpc.ClientConnInterface) NetworkBaselineServiceClient {
	return &networkBaselineServiceClient{cc}
}

func (c *networkBaselineServiceClient) GetNetworkBaselineStatusForFlows(ctx context.Context, in *NetworkBaselineStatusRequest, opts ...grpc.CallOption) (*NetworkBaselineStatusResponse, error) {
	out := new(NetworkBaselineStatusResponse)
	err := c.cc.Invoke(ctx, NetworkBaselineService_GetNetworkBaselineStatusForFlows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBaselineServiceClient) GetNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*storage.NetworkBaseline, error) {
	out := new(storage.NetworkBaseline)
	err := c.cc.Invoke(ctx, NetworkBaselineService_GetNetworkBaseline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBaselineServiceClient) ModifyBaselineStatusForPeers(ctx context.Context, in *ModifyBaselineStatusForPeersRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkBaselineService_ModifyBaselineStatusForPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBaselineServiceClient) LockNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkBaselineService_LockNetworkBaseline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBaselineServiceClient) UnlockNetworkBaseline(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetworkBaselineService_UnlockNetworkBaseline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkBaselineServiceServer is the server API for NetworkBaselineService service.
// All implementations should embed UnimplementedNetworkBaselineServiceServer
// for forward compatibility
type NetworkBaselineServiceServer interface {
	GetNetworkBaselineStatusForFlows(context.Context, *NetworkBaselineStatusRequest) (*NetworkBaselineStatusResponse, error)
	GetNetworkBaseline(context.Context, *ResourceByID) (*storage.NetworkBaseline, error)
	ModifyBaselineStatusForPeers(context.Context, *ModifyBaselineStatusForPeersRequest) (*Empty, error)
	LockNetworkBaseline(context.Context, *ResourceByID) (*Empty, error)
	UnlockNetworkBaseline(context.Context, *ResourceByID) (*Empty, error)
}

// UnimplementedNetworkBaselineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkBaselineServiceServer struct {
}

func (UnimplementedNetworkBaselineServiceServer) GetNetworkBaselineStatusForFlows(context.Context, *NetworkBaselineStatusRequest) (*NetworkBaselineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkBaselineStatusForFlows not implemented")
}
func (UnimplementedNetworkBaselineServiceServer) GetNetworkBaseline(context.Context, *ResourceByID) (*storage.NetworkBaseline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkBaseline not implemented")
}
func (UnimplementedNetworkBaselineServiceServer) ModifyBaselineStatusForPeers(context.Context, *ModifyBaselineStatusForPeersRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBaselineStatusForPeers not implemented")
}
func (UnimplementedNetworkBaselineServiceServer) LockNetworkBaseline(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockNetworkBaseline not implemented")
}
func (UnimplementedNetworkBaselineServiceServer) UnlockNetworkBaseline(context.Context, *ResourceByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockNetworkBaseline not implemented")
}

// UnsafeNetworkBaselineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkBaselineServiceServer will
// result in compilation errors.
type UnsafeNetworkBaselineServiceServer interface {
	mustEmbedUnimplementedNetworkBaselineServiceServer()
}

func RegisterNetworkBaselineServiceServer(s grpc.ServiceRegistrar, srv NetworkBaselineServiceServer) {
	s.RegisterService(&NetworkBaselineService_ServiceDesc, srv)
}

func _NetworkBaselineService_GetNetworkBaselineStatusForFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkBaselineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBaselineServiceServer).GetNetworkBaselineStatusForFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkBaselineService_GetNetworkBaselineStatusForFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBaselineServiceServer).GetNetworkBaselineStatusForFlows(ctx, req.(*NetworkBaselineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBaselineService_GetNetworkBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBaselineServiceServer).GetNetworkBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkBaselineService_GetNetworkBaseline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBaselineServiceServer).GetNetworkBaseline(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBaselineService_ModifyBaselineStatusForPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyBaselineStatusForPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBaselineServiceServer).ModifyBaselineStatusForPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkBaselineService_ModifyBaselineStatusForPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBaselineServiceServer).ModifyBaselineStatusForPeers(ctx, req.(*ModifyBaselineStatusForPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBaselineService_LockNetworkBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBaselineServiceServer).LockNetworkBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkBaselineService_LockNetworkBaseline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBaselineServiceServer).LockNetworkBaseline(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBaselineService_UnlockNetworkBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBaselineServiceServer).UnlockNetworkBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkBaselineService_UnlockNetworkBaseline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBaselineServiceServer).UnlockNetworkBaseline(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkBaselineService_ServiceDesc is the grpc.ServiceDesc for NetworkBaselineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkBaselineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NetworkBaselineService",
	HandlerType: (*NetworkBaselineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkBaselineStatusForFlows",
			Handler:    _NetworkBaselineService_GetNetworkBaselineStatusForFlows_Handler,
		},
		{
			MethodName: "GetNetworkBaseline",
			Handler:    _NetworkBaselineService_GetNetworkBaseline_Handler,
		},
		{
			MethodName: "ModifyBaselineStatusForPeers",
			Handler:    _NetworkBaselineService_ModifyBaselineStatusForPeers_Handler,
		},
		{
			MethodName: "LockNetworkBaseline",
			Handler:    _NetworkBaselineService_LockNetworkBaseline_Handler,
		},
		{
			MethodName: "UnlockNetworkBaseline",
			Handler:    _NetworkBaselineService_UnlockNetworkBaseline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/network_baseline_service.proto",
}
